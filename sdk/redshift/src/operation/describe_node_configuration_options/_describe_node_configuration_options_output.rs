// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNodeConfigurationOptionsOutput {
    /// <p>A list of valid node configurations.</p>
    #[doc(hidden)]
    pub node_configuration_option_list:
        std::option::Option<std::vec::Vec<crate::types::NodeConfigurationOption>>,
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>Marker</code> parameter and retrying the command. If the <code>Marker</code> field is empty, all response records have been retrieved for the request. </p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeNodeConfigurationOptionsOutput {
    /// <p>A list of valid node configurations.</p>
    pub fn node_configuration_option_list(
        &self,
    ) -> std::option::Option<&[crate::types::NodeConfigurationOption]> {
        self.node_configuration_option_list.as_deref()
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>Marker</code> parameter and retrying the command. If the <code>Marker</code> field is empty, all response records have been retrieved for the request. </p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeNodeConfigurationOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeNodeConfigurationOptionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNodeConfigurationOptionsOutput`](crate::operation::describe_node_configuration_options::DescribeNodeConfigurationOptionsOutput).
    pub fn builder() -> crate::operation::describe_node_configuration_options::builders::DescribeNodeConfigurationOptionsOutputBuilder{
        crate::operation::describe_node_configuration_options::builders::DescribeNodeConfigurationOptionsOutputBuilder::default()
    }
}

/// A builder for [`DescribeNodeConfigurationOptionsOutput`](crate::operation::describe_node_configuration_options::DescribeNodeConfigurationOptionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeNodeConfigurationOptionsOutputBuilder {
    pub(crate) node_configuration_option_list:
        std::option::Option<std::vec::Vec<crate::types::NodeConfigurationOption>>,
    pub(crate) marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeNodeConfigurationOptionsOutputBuilder {
    /// Appends an item to `node_configuration_option_list`.
    ///
    /// To override the contents of this collection use [`set_node_configuration_option_list`](Self::set_node_configuration_option_list).
    ///
    /// <p>A list of valid node configurations.</p>
    pub fn node_configuration_option_list(
        mut self,
        input: crate::types::NodeConfigurationOption,
    ) -> Self {
        let mut v = self.node_configuration_option_list.unwrap_or_default();
        v.push(input);
        self.node_configuration_option_list = Some(v);
        self
    }
    /// <p>A list of valid node configurations.</p>
    pub fn set_node_configuration_option_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NodeConfigurationOption>>,
    ) -> Self {
        self.node_configuration_option_list = input;
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>Marker</code> parameter and retrying the command. If the <code>Marker</code> field is empty, all response records have been retrieved for the request. </p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>Marker</code> parameter and retrying the command. If the <code>Marker</code> field is empty, all response records have been retrieved for the request. </p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeNodeConfigurationOptionsOutput`](crate::operation::describe_node_configuration_options::DescribeNodeConfigurationOptionsOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_node_configuration_options::DescribeNodeConfigurationOptionsOutput
    {
        crate::operation::describe_node_configuration_options::DescribeNodeConfigurationOptionsOutput {
            node_configuration_option_list: self.node_configuration_option_list
            ,
            marker: self.marker
            ,
            _request_id: self._request_id,
        }
    }
}
