// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchModifyClusterSnapshotsOutput {
    /// <p>A list of the snapshots that were modified.</p>
    pub resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of any errors returned.</p>
    pub errors: ::std::option::Option<::std::vec::Vec<crate::types::SnapshotErrorMessage>>,
    _request_id: Option<String>,
}
impl BatchModifyClusterSnapshotsOutput {
    /// <p>A list of the snapshots that were modified.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resources.is_none()`.
    pub fn resources(&self) -> &[::std::string::String] {
        self.resources.as_deref().unwrap_or_default()
    }
    /// <p>A list of any errors returned.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.errors.is_none()`.
    pub fn errors(&self) -> &[crate::types::SnapshotErrorMessage] {
        self.errors.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for BatchModifyClusterSnapshotsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchModifyClusterSnapshotsOutput {
    /// Creates a new builder-style object to manufacture [`BatchModifyClusterSnapshotsOutput`](crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshotsOutput).
    pub fn builder() -> crate::operation::batch_modify_cluster_snapshots::builders::BatchModifyClusterSnapshotsOutputBuilder {
        crate::operation::batch_modify_cluster_snapshots::builders::BatchModifyClusterSnapshotsOutputBuilder::default()
    }
}

/// A builder for [`BatchModifyClusterSnapshotsOutput`](crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshotsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchModifyClusterSnapshotsOutputBuilder {
    pub(crate) resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::SnapshotErrorMessage>>,
    _request_id: Option<String>,
}
impl BatchModifyClusterSnapshotsOutputBuilder {
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>A list of the snapshots that were modified.</p>
    pub fn resources(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input.into());
        self.resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the snapshots that were modified.</p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resources = input;
        self
    }
    /// <p>A list of the snapshots that were modified.</p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resources
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>A list of any errors returned.</p>
    pub fn errors(mut self, input: crate::types::SnapshotErrorMessage) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of any errors returned.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SnapshotErrorMessage>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>A list of any errors returned.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SnapshotErrorMessage>> {
        &self.errors
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchModifyClusterSnapshotsOutput`](crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshotsOutput).
    pub fn build(self) -> crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshotsOutput {
        crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshotsOutput {
            resources: self.resources,
            errors: self.errors,
            _request_id: self._request_id,
        }
    }
}
