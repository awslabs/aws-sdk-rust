// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RotateEncryptionKeyInput {
    /// <p>The unique identifier of the cluster that you want to rotate the encryption keys for.</p>
    /// <p>Constraints: Must be the name of valid cluster that has encryption enabled.</p>
    #[doc(hidden)]
    pub cluster_identifier: std::option::Option<std::string::String>,
}
impl RotateEncryptionKeyInput {
    /// <p>The unique identifier of the cluster that you want to rotate the encryption keys for.</p>
    /// <p>Constraints: Must be the name of valid cluster that has encryption enabled.</p>
    pub fn cluster_identifier(&self) -> std::option::Option<&str> {
        self.cluster_identifier.as_deref()
    }
}
impl RotateEncryptionKeyInput {
    /// Creates a new builder-style object to manufacture [`RotateEncryptionKeyInput`](crate::operation::rotate_encryption_key::RotateEncryptionKeyInput).
    pub fn builder(
    ) -> crate::operation::rotate_encryption_key::builders::RotateEncryptionKeyInputBuilder {
        crate::operation::rotate_encryption_key::builders::RotateEncryptionKeyInputBuilder::default(
        )
    }
}

/// A builder for [`RotateEncryptionKeyInput`](crate::operation::rotate_encryption_key::RotateEncryptionKeyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RotateEncryptionKeyInputBuilder {
    pub(crate) cluster_identifier: std::option::Option<std::string::String>,
}
impl RotateEncryptionKeyInputBuilder {
    /// <p>The unique identifier of the cluster that you want to rotate the encryption keys for.</p>
    /// <p>Constraints: Must be the name of valid cluster that has encryption enabled.</p>
    pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_identifier = Some(input.into());
        self
    }
    /// <p>The unique identifier of the cluster that you want to rotate the encryption keys for.</p>
    /// <p>Constraints: Must be the name of valid cluster that has encryption enabled.</p>
    pub fn set_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cluster_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`RotateEncryptionKeyInput`](crate::operation::rotate_encryption_key::RotateEncryptionKeyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::rotate_encryption_key::RotateEncryptionKeyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::rotate_encryption_key::RotateEncryptionKeyInput {
                cluster_identifier: self.cluster_identifier,
            },
        )
    }
}
