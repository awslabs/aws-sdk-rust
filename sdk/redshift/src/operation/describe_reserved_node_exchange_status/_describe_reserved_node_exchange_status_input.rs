// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeReservedNodeExchangeStatusInput {
    /// <p>The identifier of the source reserved node in a reserved-node exchange request.</p>
    #[doc(hidden)]
    pub reserved_node_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the reserved-node exchange request.</p>
    #[doc(hidden)]
    pub reserved_node_exchange_request_id: std::option::Option<std::string::String>,
    /// <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>Marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.</p>
    #[doc(hidden)]
    pub max_records: std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous <code>DescribeReservedNodeExchangeStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
}
impl DescribeReservedNodeExchangeStatusInput {
    /// <p>The identifier of the source reserved node in a reserved-node exchange request.</p>
    pub fn reserved_node_id(&self) -> std::option::Option<&str> {
        self.reserved_node_id.as_deref()
    }
    /// <p>The identifier of the reserved-node exchange request.</p>
    pub fn reserved_node_exchange_request_id(&self) -> std::option::Option<&str> {
        self.reserved_node_exchange_request_id.as_deref()
    }
    /// <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>Marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.</p>
    pub fn max_records(&self) -> std::option::Option<i32> {
        self.max_records
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeReservedNodeExchangeStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl DescribeReservedNodeExchangeStatusInput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedNodeExchangeStatusInput`](crate::operation::describe_reserved_node_exchange_status::DescribeReservedNodeExchangeStatusInput).
    pub fn builder() -> crate::operation::describe_reserved_node_exchange_status::builders::DescribeReservedNodeExchangeStatusInputBuilder{
        crate::operation::describe_reserved_node_exchange_status::builders::DescribeReservedNodeExchangeStatusInputBuilder::default()
    }
}

/// A builder for [`DescribeReservedNodeExchangeStatusInput`](crate::operation::describe_reserved_node_exchange_status::DescribeReservedNodeExchangeStatusInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeReservedNodeExchangeStatusInputBuilder {
    pub(crate) reserved_node_id: std::option::Option<std::string::String>,
    pub(crate) reserved_node_exchange_request_id: std::option::Option<std::string::String>,
    pub(crate) max_records: std::option::Option<i32>,
    pub(crate) marker: std::option::Option<std::string::String>,
}
impl DescribeReservedNodeExchangeStatusInputBuilder {
    /// <p>The identifier of the source reserved node in a reserved-node exchange request.</p>
    pub fn reserved_node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.reserved_node_id = Some(input.into());
        self
    }
    /// <p>The identifier of the source reserved node in a reserved-node exchange request.</p>
    pub fn set_reserved_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reserved_node_id = input;
        self
    }
    /// <p>The identifier of the reserved-node exchange request.</p>
    pub fn reserved_node_exchange_request_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.reserved_node_exchange_request_id = Some(input.into());
        self
    }
    /// <p>The identifier of the reserved-node exchange request.</p>
    pub fn set_reserved_node_exchange_request_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reserved_node_exchange_request_id = input;
        self
    }
    /// <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>Marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = Some(input);
        self
    }
    /// <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>Marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeReservedNodeExchangeStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeReservedNodeExchangeStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeReservedNodeExchangeStatusInput`](crate::operation::describe_reserved_node_exchange_status::DescribeReservedNodeExchangeStatusInput).
    pub fn build(self) -> Result<crate::operation::describe_reserved_node_exchange_status::DescribeReservedNodeExchangeStatusInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::describe_reserved_node_exchange_status::DescribeReservedNodeExchangeStatusInput {
                reserved_node_id: self.reserved_node_id
                ,
                reserved_node_exchange_request_id: self.reserved_node_exchange_request_id
                ,
                max_records: self.max_records
                ,
                marker: self.marker
                ,
            }
        )
    }
}
