// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeReservedNodeExchangeStatusOutput {
    /// <p>The details of the reserved-node exchange request, including the status, request time, source reserved-node identifier, and additional details.</p>
    #[doc(hidden)]
    pub reserved_node_exchange_status_details:
        std::option::Option<std::vec::Vec<crate::types::ReservedNodeExchangeStatus>>,
    /// <p>A pagination token provided by a previous <code>DescribeReservedNodeExchangeStatus</code> request.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeReservedNodeExchangeStatusOutput {
    /// <p>The details of the reserved-node exchange request, including the status, request time, source reserved-node identifier, and additional details.</p>
    pub fn reserved_node_exchange_status_details(
        &self,
    ) -> std::option::Option<&[crate::types::ReservedNodeExchangeStatus]> {
        self.reserved_node_exchange_status_details.as_deref()
    }
    /// <p>A pagination token provided by a previous <code>DescribeReservedNodeExchangeStatus</code> request.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeReservedNodeExchangeStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeReservedNodeExchangeStatusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedNodeExchangeStatusOutput`](crate::operation::describe_reserved_node_exchange_status::DescribeReservedNodeExchangeStatusOutput).
    pub fn builder() -> crate::operation::describe_reserved_node_exchange_status::builders::DescribeReservedNodeExchangeStatusOutputBuilder{
        crate::operation::describe_reserved_node_exchange_status::builders::DescribeReservedNodeExchangeStatusOutputBuilder::default()
    }
}

/// A builder for [`DescribeReservedNodeExchangeStatusOutput`](crate::operation::describe_reserved_node_exchange_status::DescribeReservedNodeExchangeStatusOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeReservedNodeExchangeStatusOutputBuilder {
    pub(crate) reserved_node_exchange_status_details:
        std::option::Option<std::vec::Vec<crate::types::ReservedNodeExchangeStatus>>,
    pub(crate) marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeReservedNodeExchangeStatusOutputBuilder {
    /// Appends an item to `reserved_node_exchange_status_details`.
    ///
    /// To override the contents of this collection use [`set_reserved_node_exchange_status_details`](Self::set_reserved_node_exchange_status_details).
    ///
    /// <p>The details of the reserved-node exchange request, including the status, request time, source reserved-node identifier, and additional details.</p>
    pub fn reserved_node_exchange_status_details(
        mut self,
        input: crate::types::ReservedNodeExchangeStatus,
    ) -> Self {
        let mut v = self
            .reserved_node_exchange_status_details
            .unwrap_or_default();
        v.push(input);
        self.reserved_node_exchange_status_details = Some(v);
        self
    }
    /// <p>The details of the reserved-node exchange request, including the status, request time, source reserved-node identifier, and additional details.</p>
    pub fn set_reserved_node_exchange_status_details(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReservedNodeExchangeStatus>>,
    ) -> Self {
        self.reserved_node_exchange_status_details = input;
        self
    }
    /// <p>A pagination token provided by a previous <code>DescribeReservedNodeExchangeStatus</code> request.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>A pagination token provided by a previous <code>DescribeReservedNodeExchangeStatus</code> request.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeReservedNodeExchangeStatusOutput`](crate::operation::describe_reserved_node_exchange_status::DescribeReservedNodeExchangeStatusOutput).
    pub fn build(self) -> crate::operation::describe_reserved_node_exchange_status::DescribeReservedNodeExchangeStatusOutput{
        crate::operation::describe_reserved_node_exchange_status::DescribeReservedNodeExchangeStatusOutput {
            reserved_node_exchange_status_details: self.reserved_node_exchange_status_details
            ,
            marker: self.marker
            ,
            _request_id: self._request_id,
        }
    }
}
