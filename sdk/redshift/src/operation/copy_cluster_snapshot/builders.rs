// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::copy_cluster_snapshot::_copy_cluster_snapshot_output::CopyClusterSnapshotOutputBuilder;

pub use crate::operation::copy_cluster_snapshot::_copy_cluster_snapshot_input::CopyClusterSnapshotInputBuilder;

/// Fluent builder constructing a request to `CopyClusterSnapshot`.
///
/// <p>Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.</p>
/// <p>When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.</p>
/// <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CopyClusterSnapshotFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::copy_cluster_snapshot::builders::CopyClusterSnapshotInputBuilder,
}
impl CopyClusterSnapshotFluentBuilder {
    /// Creates a new `CopyClusterSnapshot`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::copy_cluster_snapshot::CopyClusterSnapshot,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::copy_cluster_snapshot::CopyClusterSnapshotError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::copy_cluster_snapshot::CopyClusterSnapshotOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::copy_cluster_snapshot::CopyClusterSnapshotError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier for the source snapshot.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be the identifier for a valid automated snapshot whose state is <code>available</code>.</p> </li>
    /// </ul>
    pub fn source_snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_snapshot_identifier(input.into());
        self
    }
    /// <p>The identifier for the source snapshot.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be the identifier for a valid automated snapshot whose state is <code>available</code>.</p> </li>
    /// </ul>
    pub fn set_source_snapshot_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_source_snapshot_identifier(input);
        self
    }
    /// <p>The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be the identifier for a valid cluster.</p> </li>
    /// </ul>
    pub fn source_snapshot_cluster_identifier(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.source_snapshot_cluster_identifier(input.into());
        self
    }
    /// <p>The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be the identifier for a valid cluster.</p> </li>
    /// </ul>
    pub fn set_source_snapshot_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_source_snapshot_cluster_identifier(input);
        self
    }
    /// <p>The identifier given to the new manual snapshot.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Cannot be null, empty, or blank.</p> </li>
    /// <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// <li> <p>Must be unique for the Amazon Web Services account that is making the request.</p> </li>
    /// </ul>
    pub fn target_snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_snapshot_identifier(input.into());
        self
    }
    /// <p>The identifier given to the new manual snapshot.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Cannot be null, empty, or blank.</p> </li>
    /// <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// <li> <p>Must be unique for the Amazon Web Services account that is making the request.</p> </li>
    /// </ul>
    pub fn set_target_snapshot_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_target_snapshot_identifier(input);
        self
    }
    /// <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p>
    /// <p>The value must be either -1 or an integer between 1 and 3,653.</p>
    /// <p>The default value is -1.</p>
    pub fn manual_snapshot_retention_period(mut self, input: i32) -> Self {
        self.inner = self.inner.manual_snapshot_retention_period(input);
        self
    }
    /// <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p>
    /// <p>The value must be either -1 or an integer between 1 and 3,653.</p>
    /// <p>The default value is -1.</p>
    pub fn set_manual_snapshot_retention_period(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_manual_snapshot_retention_period(input);
        self
    }
}
