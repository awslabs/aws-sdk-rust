// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReservedNodeExchangeOfferingsOutput {
    /// <p>An optional parameter that specifies the starting point for returning a set of response records. When the results of a <code>GetReservedNodeExchangeOfferings</code> request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request. </p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>Returns an array of <code>ReservedNodeOffering</code> objects.</p>
    #[doc(hidden)]
    pub reserved_node_offerings:
        std::option::Option<std::vec::Vec<crate::types::ReservedNodeOffering>>,
    _request_id: Option<String>,
}
impl GetReservedNodeExchangeOfferingsOutput {
    /// <p>An optional parameter that specifies the starting point for returning a set of response records. When the results of a <code>GetReservedNodeExchangeOfferings</code> request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request. </p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Returns an array of <code>ReservedNodeOffering</code> objects.</p>
    pub fn reserved_node_offerings(
        &self,
    ) -> std::option::Option<&[crate::types::ReservedNodeOffering]> {
        self.reserved_node_offerings.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetReservedNodeExchangeOfferingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetReservedNodeExchangeOfferingsOutput {
    /// Creates a new builder-style object to manufacture [`GetReservedNodeExchangeOfferingsOutput`](crate::operation::get_reserved_node_exchange_offerings::GetReservedNodeExchangeOfferingsOutput).
    pub fn builder() -> crate::operation::get_reserved_node_exchange_offerings::builders::GetReservedNodeExchangeOfferingsOutputBuilder{
        crate::operation::get_reserved_node_exchange_offerings::builders::GetReservedNodeExchangeOfferingsOutputBuilder::default()
    }
}

/// A builder for [`GetReservedNodeExchangeOfferingsOutput`](crate::operation::get_reserved_node_exchange_offerings::GetReservedNodeExchangeOfferingsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetReservedNodeExchangeOfferingsOutputBuilder {
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) reserved_node_offerings:
        std::option::Option<std::vec::Vec<crate::types::ReservedNodeOffering>>,
    _request_id: Option<String>,
}
impl GetReservedNodeExchangeOfferingsOutputBuilder {
    /// <p>An optional parameter that specifies the starting point for returning a set of response records. When the results of a <code>GetReservedNodeExchangeOfferings</code> request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request. </p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An optional parameter that specifies the starting point for returning a set of response records. When the results of a <code>GetReservedNodeExchangeOfferings</code> request exceed the value specified in MaxRecords, Amazon Redshift returns a value in the marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the marker parameter and retrying the request. </p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Appends an item to `reserved_node_offerings`.
    ///
    /// To override the contents of this collection use [`set_reserved_node_offerings`](Self::set_reserved_node_offerings).
    ///
    /// <p>Returns an array of <code>ReservedNodeOffering</code> objects.</p>
    pub fn reserved_node_offerings(mut self, input: crate::types::ReservedNodeOffering) -> Self {
        let mut v = self.reserved_node_offerings.unwrap_or_default();
        v.push(input);
        self.reserved_node_offerings = Some(v);
        self
    }
    /// <p>Returns an array of <code>ReservedNodeOffering</code> objects.</p>
    pub fn set_reserved_node_offerings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReservedNodeOffering>>,
    ) -> Self {
        self.reserved_node_offerings = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetReservedNodeExchangeOfferingsOutput`](crate::operation::get_reserved_node_exchange_offerings::GetReservedNodeExchangeOfferingsOutput).
    pub fn build(self) -> crate::operation::get_reserved_node_exchange_offerings::GetReservedNodeExchangeOfferingsOutput{
        crate::operation::get_reserved_node_exchange_offerings::GetReservedNodeExchangeOfferingsOutput {
            marker: self.marker
            ,
            reserved_node_offerings: self.reserved_node_offerings
            ,
            _request_id: self._request_id,
        }
    }
}
