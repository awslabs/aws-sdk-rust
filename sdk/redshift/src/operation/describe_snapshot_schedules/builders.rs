// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_snapshot_schedules::_describe_snapshot_schedules_output::DescribeSnapshotSchedulesOutputBuilder;

pub use crate::operation::describe_snapshot_schedules::_describe_snapshot_schedules_input::DescribeSnapshotSchedulesInputBuilder;

/// Fluent builder constructing a request to `DescribeSnapshotSchedules`.
///
/// <p>Returns a list of snapshot schedules. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSnapshotSchedulesFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::describe_snapshot_schedules::builders::DescribeSnapshotSchedulesInputBuilder
            }
impl DescribeSnapshotSchedulesFluentBuilder {
    /// Creates a new `DescribeSnapshotSchedules`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_snapshot_schedules::DescribeSnapshotSchedules,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_snapshot_schedules::DescribeSnapshotSchedulesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_snapshot_schedules::DescribeSnapshotSchedulesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_snapshot_schedules::DescribeSnapshotSchedulesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_snapshot_schedules::paginator::DescribeSnapshotSchedulesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::describe_snapshot_schedules::paginator::DescribeSnapshotSchedulesPaginator
    {
        crate::operation::describe_snapshot_schedules::paginator::DescribeSnapshotSchedulesPaginator::new(self.handle, self.inner)
    }
    /// <p>The unique identifier for the cluster whose snapshot schedules you want to view.</p>
    pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_identifier(input.into());
        self
    }
    /// <p>The unique identifier for the cluster whose snapshot schedules you want to view.</p>
    pub fn set_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_cluster_identifier(input);
        self
    }
    /// <p>A unique identifier for a snapshot schedule.</p>
    pub fn schedule_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.schedule_identifier(input.into());
        self
    }
    /// <p>A unique identifier for a snapshot schedule.</p>
    pub fn set_schedule_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_schedule_identifier(input);
        self
    }
    /// Appends an item to `TagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p>The key value for a snapshot schedule tag.</p>
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// <p>The key value for a snapshot schedule tag.</p>
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
    /// Appends an item to `TagValues`.
    ///
    /// To override the contents of this collection use [`set_tag_values`](Self::set_tag_values).
    ///
    /// <p>The value corresponding to the key of the snapshot schedule tag.</p>
    pub fn tag_values(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_values(input.into());
        self
    }
    /// <p>The value corresponding to the key of the snapshot schedule tag.</p>
    pub fn set_tag_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_values(input);
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
    /// <p>The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.inner = self.inner.max_records(input);
        self
    }
    /// <p>The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_records(input);
        self
    }
}
