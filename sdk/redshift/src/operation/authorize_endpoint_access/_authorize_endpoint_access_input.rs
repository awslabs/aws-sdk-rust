// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuthorizeEndpointAccessInput {
    /// <p>The cluster identifier of the cluster to grant access to.</p>
    #[doc(hidden)]
    pub cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID to grant access to.</p>
    #[doc(hidden)]
    pub account: std::option::Option<std::string::String>,
    /// <p>The virtual private cloud (VPC) identifiers to grant access to.</p>
    #[doc(hidden)]
    pub vpc_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AuthorizeEndpointAccessInput {
    /// <p>The cluster identifier of the cluster to grant access to.</p>
    pub fn cluster_identifier(&self) -> std::option::Option<&str> {
        self.cluster_identifier.as_deref()
    }
    /// <p>The Amazon Web Services account ID to grant access to.</p>
    pub fn account(&self) -> std::option::Option<&str> {
        self.account.as_deref()
    }
    /// <p>The virtual private cloud (VPC) identifiers to grant access to.</p>
    pub fn vpc_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.vpc_ids.as_deref()
    }
}
impl AuthorizeEndpointAccessInput {
    /// Creates a new builder-style object to manufacture [`AuthorizeEndpointAccessInput`](crate::operation::authorize_endpoint_access::AuthorizeEndpointAccessInput).
    pub fn builder(
    ) -> crate::operation::authorize_endpoint_access::builders::AuthorizeEndpointAccessInputBuilder
    {
        crate::operation::authorize_endpoint_access::builders::AuthorizeEndpointAccessInputBuilder::default()
    }
}

/// A builder for [`AuthorizeEndpointAccessInput`](crate::operation::authorize_endpoint_access::AuthorizeEndpointAccessInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AuthorizeEndpointAccessInputBuilder {
    pub(crate) cluster_identifier: std::option::Option<std::string::String>,
    pub(crate) account: std::option::Option<std::string::String>,
    pub(crate) vpc_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AuthorizeEndpointAccessInputBuilder {
    /// <p>The cluster identifier of the cluster to grant access to.</p>
    pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_identifier = Some(input.into());
        self
    }
    /// <p>The cluster identifier of the cluster to grant access to.</p>
    pub fn set_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cluster_identifier = input;
        self
    }
    /// <p>The Amazon Web Services account ID to grant access to.</p>
    pub fn account(mut self, input: impl Into<std::string::String>) -> Self {
        self.account = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID to grant access to.</p>
    pub fn set_account(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account = input;
        self
    }
    /// Appends an item to `vpc_ids`.
    ///
    /// To override the contents of this collection use [`set_vpc_ids`](Self::set_vpc_ids).
    ///
    /// <p>The virtual private cloud (VPC) identifiers to grant access to.</p>
    pub fn vpc_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.vpc_ids.unwrap_or_default();
        v.push(input.into());
        self.vpc_ids = Some(v);
        self
    }
    /// <p>The virtual private cloud (VPC) identifiers to grant access to.</p>
    pub fn set_vpc_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.vpc_ids = input;
        self
    }
    /// Consumes the builder and constructs a [`AuthorizeEndpointAccessInput`](crate::operation::authorize_endpoint_access::AuthorizeEndpointAccessInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::authorize_endpoint_access::AuthorizeEndpointAccessInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::authorize_endpoint_access::AuthorizeEndpointAccessInput {
                cluster_identifier: self.cluster_identifier,
                account: self.account,
                vpc_ids: self.vpc_ids,
            },
        )
    }
}
