// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateDataShareConsumerOutput {
    /// <p>An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the <code>arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name}</code> format.</p>
    #[doc(hidden)]
    pub data_share_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the producer.</p>
    #[doc(hidden)]
    pub producer_arn: std::option::Option<std::string::String>,
    /// <p>A value that specifies whether the datashare can be shared to a publicly accessible cluster.</p>
    #[doc(hidden)]
    pub allow_publicly_accessible_consumers: bool,
    /// <p>A value that specifies when the datashare has an association between producer and data consumers.</p>
    #[doc(hidden)]
    pub data_share_associations:
        std::option::Option<std::vec::Vec<crate::types::DataShareAssociation>>,
    /// <p>The identifier of a datashare to show its managing entity.</p>
    #[doc(hidden)]
    pub managed_by: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DisassociateDataShareConsumerOutput {
    /// <p>An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the <code>arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name}</code> format.</p>
    pub fn data_share_arn(&self) -> std::option::Option<&str> {
        self.data_share_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the producer.</p>
    pub fn producer_arn(&self) -> std::option::Option<&str> {
        self.producer_arn.as_deref()
    }
    /// <p>A value that specifies whether the datashare can be shared to a publicly accessible cluster.</p>
    pub fn allow_publicly_accessible_consumers(&self) -> bool {
        self.allow_publicly_accessible_consumers
    }
    /// <p>A value that specifies when the datashare has an association between producer and data consumers.</p>
    pub fn data_share_associations(
        &self,
    ) -> std::option::Option<&[crate::types::DataShareAssociation]> {
        self.data_share_associations.as_deref()
    }
    /// <p>The identifier of a datashare to show its managing entity.</p>
    pub fn managed_by(&self) -> std::option::Option<&str> {
        self.managed_by.as_deref()
    }
}
impl aws_http::request_id::RequestId for DisassociateDataShareConsumerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DisassociateDataShareConsumerOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateDataShareConsumerOutput`](crate::operation::disassociate_data_share_consumer::DisassociateDataShareConsumerOutput).
    pub fn builder() -> crate::operation::disassociate_data_share_consumer::builders::DisassociateDataShareConsumerOutputBuilder{
        crate::operation::disassociate_data_share_consumer::builders::DisassociateDataShareConsumerOutputBuilder::default()
    }
}

/// A builder for [`DisassociateDataShareConsumerOutput`](crate::operation::disassociate_data_share_consumer::DisassociateDataShareConsumerOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DisassociateDataShareConsumerOutputBuilder {
    pub(crate) data_share_arn: std::option::Option<std::string::String>,
    pub(crate) producer_arn: std::option::Option<std::string::String>,
    pub(crate) allow_publicly_accessible_consumers: std::option::Option<bool>,
    pub(crate) data_share_associations:
        std::option::Option<std::vec::Vec<crate::types::DataShareAssociation>>,
    pub(crate) managed_by: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DisassociateDataShareConsumerOutputBuilder {
    /// <p>An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the <code>arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name}</code> format.</p>
    pub fn data_share_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_share_arn = Some(input.into());
        self
    }
    /// <p>An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the <code>arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name}</code> format.</p>
    pub fn set_data_share_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_share_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the producer.</p>
    pub fn producer_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.producer_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the producer.</p>
    pub fn set_producer_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.producer_arn = input;
        self
    }
    /// <p>A value that specifies whether the datashare can be shared to a publicly accessible cluster.</p>
    pub fn allow_publicly_accessible_consumers(mut self, input: bool) -> Self {
        self.allow_publicly_accessible_consumers = Some(input);
        self
    }
    /// <p>A value that specifies whether the datashare can be shared to a publicly accessible cluster.</p>
    pub fn set_allow_publicly_accessible_consumers(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.allow_publicly_accessible_consumers = input;
        self
    }
    /// Appends an item to `data_share_associations`.
    ///
    /// To override the contents of this collection use [`set_data_share_associations`](Self::set_data_share_associations).
    ///
    /// <p>A value that specifies when the datashare has an association between producer and data consumers.</p>
    pub fn data_share_associations(mut self, input: crate::types::DataShareAssociation) -> Self {
        let mut v = self.data_share_associations.unwrap_or_default();
        v.push(input);
        self.data_share_associations = Some(v);
        self
    }
    /// <p>A value that specifies when the datashare has an association between producer and data consumers.</p>
    pub fn set_data_share_associations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataShareAssociation>>,
    ) -> Self {
        self.data_share_associations = input;
        self
    }
    /// <p>The identifier of a datashare to show its managing entity.</p>
    pub fn managed_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.managed_by = Some(input.into());
        self
    }
    /// <p>The identifier of a datashare to show its managing entity.</p>
    pub fn set_managed_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.managed_by = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DisassociateDataShareConsumerOutput`](crate::operation::disassociate_data_share_consumer::DisassociateDataShareConsumerOutput).
    pub fn build(
        self,
    ) -> crate::operation::disassociate_data_share_consumer::DisassociateDataShareConsumerOutput
    {
        crate::operation::disassociate_data_share_consumer::DisassociateDataShareConsumerOutput {
            data_share_arn: self.data_share_arn,
            producer_arn: self.producer_arn,
            allow_publicly_accessible_consumers: self
                .allow_publicly_accessible_consumers
                .unwrap_or_default(),
            data_share_associations: self.data_share_associations,
            managed_by: self.managed_by,
            _request_id: self._request_id,
        }
    }
}
