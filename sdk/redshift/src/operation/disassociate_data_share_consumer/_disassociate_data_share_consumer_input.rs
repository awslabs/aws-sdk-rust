// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisassociateDataShareConsumerInput {
    /// <p>The Amazon Resource Name (ARN) of the datashare to remove association for. </p>
    pub data_share_arn: ::std::option::Option<::std::string::String>,
    /// <p>A value that specifies whether association for the datashare is removed from the entire account.</p>
    pub disassociate_entire_account: ::std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the consumer that association for the datashare is removed from.</p>
    pub consumer_arn: ::std::option::Option<::std::string::String>,
    /// <p>From a datashare consumer account, removes association of a datashare from all the existing and future namespaces in the specified Amazon Web Services Region.</p>
    pub consumer_region: ::std::option::Option<::std::string::String>,
}
impl DisassociateDataShareConsumerInput {
    /// <p>The Amazon Resource Name (ARN) of the datashare to remove association for. </p>
    pub fn data_share_arn(&self) -> ::std::option::Option<&str> {
        self.data_share_arn.as_deref()
    }
    /// <p>A value that specifies whether association for the datashare is removed from the entire account.</p>
    pub fn disassociate_entire_account(&self) -> ::std::option::Option<bool> {
        self.disassociate_entire_account
    }
    /// <p>The Amazon Resource Name (ARN) of the consumer that association for the datashare is removed from.</p>
    pub fn consumer_arn(&self) -> ::std::option::Option<&str> {
        self.consumer_arn.as_deref()
    }
    /// <p>From a datashare consumer account, removes association of a datashare from all the existing and future namespaces in the specified Amazon Web Services Region.</p>
    pub fn consumer_region(&self) -> ::std::option::Option<&str> {
        self.consumer_region.as_deref()
    }
}
impl DisassociateDataShareConsumerInput {
    /// Creates a new builder-style object to manufacture [`DisassociateDataShareConsumerInput`](crate::operation::disassociate_data_share_consumer::DisassociateDataShareConsumerInput).
    pub fn builder() -> crate::operation::disassociate_data_share_consumer::builders::DisassociateDataShareConsumerInputBuilder {
        crate::operation::disassociate_data_share_consumer::builders::DisassociateDataShareConsumerInputBuilder::default()
    }
}

/// A builder for [`DisassociateDataShareConsumerInput`](crate::operation::disassociate_data_share_consumer::DisassociateDataShareConsumerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DisassociateDataShareConsumerInputBuilder {
    pub(crate) data_share_arn: ::std::option::Option<::std::string::String>,
    pub(crate) disassociate_entire_account: ::std::option::Option<bool>,
    pub(crate) consumer_arn: ::std::option::Option<::std::string::String>,
    pub(crate) consumer_region: ::std::option::Option<::std::string::String>,
}
impl DisassociateDataShareConsumerInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the datashare to remove association for. </p>
    /// This field is required.
    pub fn data_share_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_share_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the datashare to remove association for. </p>
    pub fn set_data_share_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_share_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the datashare to remove association for. </p>
    pub fn get_data_share_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_share_arn
    }
    /// <p>A value that specifies whether association for the datashare is removed from the entire account.</p>
    pub fn disassociate_entire_account(mut self, input: bool) -> Self {
        self.disassociate_entire_account = ::std::option::Option::Some(input);
        self
    }
    /// <p>A value that specifies whether association for the datashare is removed from the entire account.</p>
    pub fn set_disassociate_entire_account(mut self, input: ::std::option::Option<bool>) -> Self {
        self.disassociate_entire_account = input;
        self
    }
    /// <p>A value that specifies whether association for the datashare is removed from the entire account.</p>
    pub fn get_disassociate_entire_account(&self) -> &::std::option::Option<bool> {
        &self.disassociate_entire_account
    }
    /// <p>The Amazon Resource Name (ARN) of the consumer that association for the datashare is removed from.</p>
    pub fn consumer_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.consumer_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the consumer that association for the datashare is removed from.</p>
    pub fn set_consumer_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.consumer_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the consumer that association for the datashare is removed from.</p>
    pub fn get_consumer_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.consumer_arn
    }
    /// <p>From a datashare consumer account, removes association of a datashare from all the existing and future namespaces in the specified Amazon Web Services Region.</p>
    pub fn consumer_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.consumer_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>From a datashare consumer account, removes association of a datashare from all the existing and future namespaces in the specified Amazon Web Services Region.</p>
    pub fn set_consumer_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.consumer_region = input;
        self
    }
    /// <p>From a datashare consumer account, removes association of a datashare from all the existing and future namespaces in the specified Amazon Web Services Region.</p>
    pub fn get_consumer_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.consumer_region
    }
    /// Consumes the builder and constructs a [`DisassociateDataShareConsumerInput`](crate::operation::disassociate_data_share_consumer::DisassociateDataShareConsumerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::disassociate_data_share_consumer::DisassociateDataShareConsumerInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::disassociate_data_share_consumer::DisassociateDataShareConsumerInput {
            data_share_arn: self.data_share_arn,
            disassociate_entire_account: self.disassociate_entire_account,
            consumer_arn: self.consumer_arn,
            consumer_region: self.consumer_region,
        })
    }
}
