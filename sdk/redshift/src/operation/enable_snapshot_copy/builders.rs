// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::enable_snapshot_copy::_enable_snapshot_copy_output::EnableSnapshotCopyOutputBuilder;

pub use crate::operation::enable_snapshot_copy::_enable_snapshot_copy_input::EnableSnapshotCopyInputBuilder;

/// Fluent builder constructing a request to `EnableSnapshotCopy`.
///
/// <p>Enables the automatic copy of snapshots from one region to another region for a specified cluster.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct EnableSnapshotCopyFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::enable_snapshot_copy::builders::EnableSnapshotCopyInputBuilder,
}
impl EnableSnapshotCopyFluentBuilder {
    /// Creates a new `EnableSnapshotCopy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::enable_snapshot_copy::EnableSnapshotCopy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::enable_snapshot_copy::EnableSnapshotCopyError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::enable_snapshot_copy::EnableSnapshotCopyOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::enable_snapshot_copy::EnableSnapshotCopyError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the source cluster to copy snapshots from.</p>
    /// <p>Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.</p>
    pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_identifier(input.into());
        self
    }
    /// <p>The unique identifier of the source cluster to copy snapshots from.</p>
    /// <p>Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.</p>
    pub fn set_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_cluster_identifier(input);
        self
    }
    /// <p>The destination Amazon Web Services Region that you want to copy snapshots to.</p>
    /// <p>Constraints: Must be the name of a valid Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region">Regions and Endpoints</a> in the Amazon Web Services General Reference. </p>
    pub fn destination_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_region(input.into());
        self
    }
    /// <p>The destination Amazon Web Services Region that you want to copy snapshots to.</p>
    /// <p>Constraints: Must be the name of a valid Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region">Regions and Endpoints</a> in the Amazon Web Services General Reference. </p>
    pub fn set_destination_region(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_destination_region(input);
        self
    }
    /// <p>The number of days to retain automated snapshots in the destination region after they are copied from the source region.</p>
    /// <p>Default: 7.</p>
    /// <p>Constraints: Must be at least 1 and no more than 35.</p>
    pub fn retention_period(mut self, input: i32) -> Self {
        self.inner = self.inner.retention_period(input);
        self
    }
    /// <p>The number of days to retain automated snapshots in the destination region after they are copied from the source region.</p>
    /// <p>Default: 7.</p>
    /// <p>Constraints: Must be at least 1 and no more than 35.</p>
    pub fn set_retention_period(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_retention_period(input);
        self
    }
    /// <p>The name of the snapshot copy grant to use when snapshots of an Amazon Web Services KMS-encrypted cluster are copied to the destination region.</p>
    pub fn snapshot_copy_grant_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.snapshot_copy_grant_name(input.into());
        self
    }
    /// <p>The name of the snapshot copy grant to use when snapshots of an Amazon Web Services KMS-encrypted cluster are copied to the destination region.</p>
    pub fn set_snapshot_copy_grant_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_snapshot_copy_grant_name(input);
        self
    }
    /// <p>The number of days to retain newly copied snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. If the value is -1, the manual snapshot is retained indefinitely. </p>
    /// <p>The value must be either -1 or an integer between 1 and 3,653.</p>
    pub fn manual_snapshot_retention_period(mut self, input: i32) -> Self {
        self.inner = self.inner.manual_snapshot_retention_period(input);
        self
    }
    /// <p>The number of days to retain newly copied snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. If the value is -1, the manual snapshot is retained indefinitely. </p>
    /// <p>The value must be either -1 or an integer between 1 and 3,653.</p>
    pub fn set_manual_snapshot_retention_period(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_manual_snapshot_retention_period(input);
        self
    }
}
