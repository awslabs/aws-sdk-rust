// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_cluster_security_group::_create_cluster_security_group_output::CreateClusterSecurityGroupOutputBuilder;

pub use crate::operation::create_cluster_security_group::_create_cluster_security_group_input::CreateClusterSecurityGroupInputBuilder;

/// Fluent builder constructing a request to `CreateClusterSecurityGroup`.
///
/// <p>Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.</p>
/// <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateClusterSecurityGroupFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_cluster_security_group::builders::CreateClusterSecurityGroupInputBuilder
            }
impl CreateClusterSecurityGroupFluentBuilder {
    /// Creates a new `CreateClusterSecurityGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_cluster_security_group::CreateClusterSecurityGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_cluster_security_group::CreateClusterSecurityGroupError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_cluster_security_group::CreateClusterSecurityGroupOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_cluster_security_group::CreateClusterSecurityGroupError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name for the security group. Amazon Redshift stores the value as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>Must not be "Default".</p> </li>
    /// <li> <p>Must be unique for all security groups that are created by your Amazon Web Services account.</p> </li>
    /// </ul>
    /// <p>Example: <code>examplesecuritygroup</code> </p>
    pub fn cluster_security_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_security_group_name(input.into());
        self
    }
    /// <p>The name for the security group. Amazon Redshift stores the value as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>Must not be "Default".</p> </li>
    /// <li> <p>Must be unique for all security groups that are created by your Amazon Web Services account.</p> </li>
    /// </ul>
    /// <p>Example: <code>examplesecuritygroup</code> </p>
    pub fn set_cluster_security_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_cluster_security_group_name(input);
        self
    }
    /// <p>A description for the security group.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the security group.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tag instances.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tag instances.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
