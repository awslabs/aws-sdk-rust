// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result of the <code>CreateSnapshotCopyGrant</code> action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateSnapshotCopyGrantInput {
    /// <p>The name of the snapshot copy grant. This name must be unique in the region for the Amazon Web Services account.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>Alphabetic characters must be lowercase.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li>
    /// </ul>
    pub snapshot_copy_grant_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the encrypted symmetric key to which to grant Amazon Redshift permission. If no key is specified, the default key is used.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of tag instances.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateSnapshotCopyGrantInput {
    /// <p>The name of the snapshot copy grant. This name must be unique in the region for the Amazon Web Services account.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>Alphabetic characters must be lowercase.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li>
    /// </ul>
    pub fn snapshot_copy_grant_name(&self) -> ::std::option::Option<&str> {
        self.snapshot_copy_grant_name.as_deref()
    }
    /// <p>The unique identifier of the encrypted symmetric key to which to grant Amazon Redshift permission. If no key is specified, the default key is used.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>A list of tag instances.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateSnapshotCopyGrantInput {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotCopyGrantInput`](crate::operation::create_snapshot_copy_grant::CreateSnapshotCopyGrantInput).
    pub fn builder() -> crate::operation::create_snapshot_copy_grant::builders::CreateSnapshotCopyGrantInputBuilder {
        crate::operation::create_snapshot_copy_grant::builders::CreateSnapshotCopyGrantInputBuilder::default()
    }
}

/// A builder for [`CreateSnapshotCopyGrantInput`](crate::operation::create_snapshot_copy_grant::CreateSnapshotCopyGrantInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateSnapshotCopyGrantInputBuilder {
    pub(crate) snapshot_copy_grant_name: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateSnapshotCopyGrantInputBuilder {
    /// <p>The name of the snapshot copy grant. This name must be unique in the region for the Amazon Web Services account.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>Alphabetic characters must be lowercase.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn snapshot_copy_grant_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_copy_grant_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the snapshot copy grant. This name must be unique in the region for the Amazon Web Services account.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>Alphabetic characters must be lowercase.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li>
    /// </ul>
    pub fn set_snapshot_copy_grant_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_copy_grant_name = input;
        self
    }
    /// <p>The name of the snapshot copy grant. This name must be unique in the region for the Amazon Web Services account.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>Alphabetic characters must be lowercase.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li>
    /// </ul>
    pub fn get_snapshot_copy_grant_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_copy_grant_name
    }
    /// <p>The unique identifier of the encrypted symmetric key to which to grant Amazon Redshift permission. If no key is specified, the default key is used.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the encrypted symmetric key to which to grant Amazon Redshift permission. If no key is specified, the default key is used.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The unique identifier of the encrypted symmetric key to which to grant Amazon Redshift permission. If no key is specified, the default key is used.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tag instances.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tag instances.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tag instances.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateSnapshotCopyGrantInput`](crate::operation::create_snapshot_copy_grant::CreateSnapshotCopyGrantInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_snapshot_copy_grant::CreateSnapshotCopyGrantInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_snapshot_copy_grant::CreateSnapshotCopyGrantInput {
            snapshot_copy_grant_name: self.snapshot_copy_grant_name,
            kms_key_id: self.kms_key_id,
            tags: self.tags,
        })
    }
}
