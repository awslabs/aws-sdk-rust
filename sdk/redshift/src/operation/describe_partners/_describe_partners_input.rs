// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribePartnersInput {
    /// <p>The Amazon Web Services account ID that owns the cluster.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The cluster identifier of the cluster whose partner integration is being described.</p>
    pub cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database whose partner integration is being described. If database name is not specified, then all databases in the cluster are described.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the partner that is being described. If partner name is not specified, then all partner integrations are described.</p>
    pub partner_name: ::std::option::Option<::std::string::String>,
}
impl DescribePartnersInput {
    /// <p>The Amazon Web Services account ID that owns the cluster.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The cluster identifier of the cluster whose partner integration is being described.</p>
    pub fn cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.cluster_identifier.as_deref()
    }
    /// <p>The name of the database whose partner integration is being described. If database name is not specified, then all databases in the cluster are described.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the partner that is being described. If partner name is not specified, then all partner integrations are described.</p>
    pub fn partner_name(&self) -> ::std::option::Option<&str> {
        self.partner_name.as_deref()
    }
}
impl DescribePartnersInput {
    /// Creates a new builder-style object to manufacture [`DescribePartnersInput`](crate::operation::describe_partners::DescribePartnersInput).
    pub fn builder() -> crate::operation::describe_partners::builders::DescribePartnersInputBuilder {
        crate::operation::describe_partners::builders::DescribePartnersInputBuilder::default()
    }
}

/// A builder for [`DescribePartnersInput`](crate::operation::describe_partners::DescribePartnersInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribePartnersInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) partner_name: ::std::option::Option<::std::string::String>,
}
impl DescribePartnersInputBuilder {
    /// <p>The Amazon Web Services account ID that owns the cluster.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the cluster.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID that owns the cluster.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The cluster identifier of the cluster whose partner integration is being described.</p>
    /// This field is required.
    pub fn cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cluster identifier of the cluster whose partner integration is being described.</p>
    pub fn set_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_identifier = input;
        self
    }
    /// <p>The cluster identifier of the cluster whose partner integration is being described.</p>
    pub fn get_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_identifier
    }
    /// <p>The name of the database whose partner integration is being described. If database name is not specified, then all databases in the cluster are described.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database whose partner integration is being described. If database name is not specified, then all databases in the cluster are described.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the database whose partner integration is being described. If database name is not specified, then all databases in the cluster are described.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the partner that is being described. If partner name is not specified, then all partner integrations are described.</p>
    pub fn partner_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.partner_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the partner that is being described. If partner name is not specified, then all partner integrations are described.</p>
    pub fn set_partner_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.partner_name = input;
        self
    }
    /// <p>The name of the partner that is being described. If partner name is not specified, then all partner integrations are described.</p>
    pub fn get_partner_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.partner_name
    }
    /// Consumes the builder and constructs a [`DescribePartnersInput`](crate::operation::describe_partners::DescribePartnersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_partners::DescribePartnersInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_partners::DescribePartnersInput {
            account_id: self.account_id,
            cluster_identifier: self.cluster_identifier,
            database_name: self.database_name,
            partner_name: self.partner_name,
        })
    }
}
