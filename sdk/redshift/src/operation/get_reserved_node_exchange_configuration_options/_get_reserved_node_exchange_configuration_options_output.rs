// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetReservedNodeExchangeConfigurationOptionsOutput {
    /// <p>A pagination token provided by a previous <code>GetReservedNodeExchangeConfigurationOptions</code> request.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node. Details include the node type, the price, the node count, and the offering type.</p>
    pub reserved_node_configuration_option_list: ::std::option::Option<::std::vec::Vec<crate::types::ReservedNodeConfigurationOption>>,
    _request_id: Option<String>,
}
impl GetReservedNodeExchangeConfigurationOptionsOutput {
    /// <p>A pagination token provided by a previous <code>GetReservedNodeExchangeConfigurationOptions</code> request.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node. Details include the node type, the price, the node count, and the offering type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reserved_node_configuration_option_list.is_none()`.
    pub fn reserved_node_configuration_option_list(&self) -> &[crate::types::ReservedNodeConfigurationOption] {
        self.reserved_node_configuration_option_list.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for GetReservedNodeExchangeConfigurationOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetReservedNodeExchangeConfigurationOptionsOutput {
    /// Creates a new builder-style object to manufacture [`GetReservedNodeExchangeConfigurationOptionsOutput`](crate::operation::get_reserved_node_exchange_configuration_options::GetReservedNodeExchangeConfigurationOptionsOutput).
    pub fn builder(
    ) -> crate::operation::get_reserved_node_exchange_configuration_options::builders::GetReservedNodeExchangeConfigurationOptionsOutputBuilder {
        crate::operation::get_reserved_node_exchange_configuration_options::builders::GetReservedNodeExchangeConfigurationOptionsOutputBuilder::default()
    }
}

/// A builder for [`GetReservedNodeExchangeConfigurationOptionsOutput`](crate::operation::get_reserved_node_exchange_configuration_options::GetReservedNodeExchangeConfigurationOptionsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetReservedNodeExchangeConfigurationOptionsOutputBuilder {
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) reserved_node_configuration_option_list: ::std::option::Option<::std::vec::Vec<crate::types::ReservedNodeConfigurationOption>>,
    _request_id: Option<String>,
}
impl GetReservedNodeExchangeConfigurationOptionsOutputBuilder {
    /// <p>A pagination token provided by a previous <code>GetReservedNodeExchangeConfigurationOptions</code> request.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token provided by a previous <code>GetReservedNodeExchangeConfigurationOptions</code> request.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>A pagination token provided by a previous <code>GetReservedNodeExchangeConfigurationOptions</code> request.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Appends an item to `reserved_node_configuration_option_list`.
    ///
    /// To override the contents of this collection use [`set_reserved_node_configuration_option_list`](Self::set_reserved_node_configuration_option_list).
    ///
    /// <p>the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node. Details include the node type, the price, the node count, and the offering type.</p>
    pub fn reserved_node_configuration_option_list(mut self, input: crate::types::ReservedNodeConfigurationOption) -> Self {
        let mut v = self.reserved_node_configuration_option_list.unwrap_or_default();
        v.push(input);
        self.reserved_node_configuration_option_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node. Details include the node type, the price, the node count, and the offering type.</p>
    pub fn set_reserved_node_configuration_option_list(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ReservedNodeConfigurationOption>>,
    ) -> Self {
        self.reserved_node_configuration_option_list = input;
        self
    }
    /// <p>the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node. Details include the node type, the price, the node count, and the offering type.</p>
    pub fn get_reserved_node_configuration_option_list(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::ReservedNodeConfigurationOption>> {
        &self.reserved_node_configuration_option_list
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetReservedNodeExchangeConfigurationOptionsOutput`](crate::operation::get_reserved_node_exchange_configuration_options::GetReservedNodeExchangeConfigurationOptionsOutput).
    pub fn build(self) -> crate::operation::get_reserved_node_exchange_configuration_options::GetReservedNodeExchangeConfigurationOptionsOutput {
        crate::operation::get_reserved_node_exchange_configuration_options::GetReservedNodeExchangeConfigurationOptionsOutput {
            marker: self.marker,
            reserved_node_configuration_option_list: self.reserved_node_configuration_option_list,
            _request_id: self._request_id,
        }
    }
}
