// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::enable_logging::_enable_logging_output::EnableLoggingOutputBuilder;

pub use crate::operation::enable_logging::_enable_logging_input::EnableLoggingInputBuilder;

impl crate::operation::enable_logging::builders::EnableLoggingInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::enable_logging::EnableLoggingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::enable_logging::EnableLoggingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.enable_logging();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `EnableLogging`.
///
/// <p>Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct EnableLoggingFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::enable_logging::builders::EnableLoggingInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::enable_logging::EnableLoggingOutput,
        crate::operation::enable_logging::EnableLoggingError,
    > for EnableLoggingFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::enable_logging::EnableLoggingOutput,
            crate::operation::enable_logging::EnableLoggingError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl EnableLoggingFluentBuilder {
    /// Creates a new `EnableLogging`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the EnableLogging as a reference.
    pub fn as_input(&self) -> &crate::operation::enable_logging::builders::EnableLoggingInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::enable_logging::EnableLoggingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::enable_logging::EnableLoggingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::enable_logging::EnableLogging::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::enable_logging::EnableLogging::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::enable_logging::EnableLoggingOutput,
        crate::operation::enable_logging::EnableLoggingError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the cluster on which logging is to be started.</p>
    /// <p>Example: <code>examplecluster</code></p>
    pub fn cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cluster_identifier(input.into());
        self
    }
    /// <p>The identifier of the cluster on which logging is to be started.</p>
    /// <p>Example: <code>examplecluster</code></p>
    pub fn set_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_identifier(input);
        self
    }
    /// <p>The identifier of the cluster on which logging is to be started.</p>
    /// <p>Example: <code>examplecluster</code></p>
    pub fn get_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cluster_identifier()
    }
    /// <p>The name of an existing S3 bucket where the log files are to be stored.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the same region as the cluster</p></li>
    /// <li>
    /// <p>The cluster must have read bucket and put object permissions</p></li>
    /// </ul>
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.bucket_name(input.into());
        self
    }
    /// <p>The name of an existing S3 bucket where the log files are to be stored.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the same region as the cluster</p></li>
    /// <li>
    /// <p>The cluster must have read bucket and put object permissions</p></li>
    /// </ul>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_bucket_name(input);
        self
    }
    /// <p>The name of an existing S3 bucket where the log files are to be stored.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the same region as the cluster</p></li>
    /// <li>
    /// <p>The cluster must have read bucket and put object permissions</p></li>
    /// </ul>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_bucket_name()
    }
    /// <p>The prefix applied to the log file names.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Cannot exceed 512 characters</p></li>
    /// <li>
    /// <p>Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are:</p>
    /// <ul>
    /// <li>
    /// <p>x00 to x20</p></li>
    /// <li>
    /// <p>x22</p></li>
    /// <li>
    /// <p>x27</p></li>
    /// <li>
    /// <p>x5c</p></li>
    /// <li>
    /// <p>x7f or larger</p></li>
    /// </ul></li>
    /// </ul>
    pub fn s3_key_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.s3_key_prefix(input.into());
        self
    }
    /// <p>The prefix applied to the log file names.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Cannot exceed 512 characters</p></li>
    /// <li>
    /// <p>Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are:</p>
    /// <ul>
    /// <li>
    /// <p>x00 to x20</p></li>
    /// <li>
    /// <p>x22</p></li>
    /// <li>
    /// <p>x27</p></li>
    /// <li>
    /// <p>x5c</p></li>
    /// <li>
    /// <p>x7f or larger</p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_s3_key_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_s3_key_prefix(input);
        self
    }
    /// <p>The prefix applied to the log file names.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Cannot exceed 512 characters</p></li>
    /// <li>
    /// <p>Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are:</p>
    /// <ul>
    /// <li>
    /// <p>x00 to x20</p></li>
    /// <li>
    /// <p>x22</p></li>
    /// <li>
    /// <p>x27</p></li>
    /// <li>
    /// <p>x5c</p></li>
    /// <li>
    /// <p>x7f or larger</p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_s3_key_prefix(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_s3_key_prefix()
    }
    /// <p>The log destination type. An enum with possible values of <code>s3</code> and <code>cloudwatch</code>.</p>
    pub fn log_destination_type(mut self, input: crate::types::LogDestinationType) -> Self {
        self.inner = self.inner.log_destination_type(input);
        self
    }
    /// <p>The log destination type. An enum with possible values of <code>s3</code> and <code>cloudwatch</code>.</p>
    pub fn set_log_destination_type(mut self, input: ::std::option::Option<crate::types::LogDestinationType>) -> Self {
        self.inner = self.inner.set_log_destination_type(input);
        self
    }
    /// <p>The log destination type. An enum with possible values of <code>s3</code> and <code>cloudwatch</code>.</p>
    pub fn get_log_destination_type(&self) -> &::std::option::Option<crate::types::LogDestinationType> {
        self.inner.get_log_destination_type()
    }
    ///
    /// Appends an item to `LogExports`.
    ///
    /// To override the contents of this collection use [`set_log_exports`](Self::set_log_exports).
    ///
    /// <p>The collection of exported log types. Possible values are <code>connectionlog</code>, <code>useractivitylog</code>, and <code>userlog</code>.</p>
    pub fn log_exports(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.log_exports(input.into());
        self
    }
    /// <p>The collection of exported log types. Possible values are <code>connectionlog</code>, <code>useractivitylog</code>, and <code>userlog</code>.</p>
    pub fn set_log_exports(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_log_exports(input);
        self
    }
    /// <p>The collection of exported log types. Possible values are <code>connectionlog</code>, <code>useractivitylog</code>, and <code>userlog</code>.</p>
    pub fn get_log_exports(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_log_exports()
    }
}
