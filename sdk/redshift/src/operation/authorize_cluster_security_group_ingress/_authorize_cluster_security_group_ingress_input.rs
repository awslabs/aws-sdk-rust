// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthorizeClusterSecurityGroupIngressInput {
    /// <p>The name of the security group to which the ingress rule is added.</p>
    pub cluster_security_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The IP range to be added the Amazon Redshift security group.</p>
    pub cidrip: ::std::option::Option<::std::string::String>,
    /// <p>The EC2 security group to be added the Amazon Redshift security group.</p>
    pub ec2_security_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account number of the owner of the security group specified by the <i>EC2SecurityGroupName</i> parameter. The Amazon Web Services Access Key ID is not an acceptable value. </p>
    /// <p>Example: <code>111122223333</code> </p>
    pub ec2_security_group_owner_id: ::std::option::Option<::std::string::String>,
}
impl AuthorizeClusterSecurityGroupIngressInput {
    /// <p>The name of the security group to which the ingress rule is added.</p>
    pub fn cluster_security_group_name(&self) -> ::std::option::Option<&str> {
        self.cluster_security_group_name.as_deref()
    }
    /// <p>The IP range to be added the Amazon Redshift security group.</p>
    pub fn cidrip(&self) -> ::std::option::Option<&str> {
        self.cidrip.as_deref()
    }
    /// <p>The EC2 security group to be added the Amazon Redshift security group.</p>
    pub fn ec2_security_group_name(&self) -> ::std::option::Option<&str> {
        self.ec2_security_group_name.as_deref()
    }
    /// <p>The Amazon Web Services account number of the owner of the security group specified by the <i>EC2SecurityGroupName</i> parameter. The Amazon Web Services Access Key ID is not an acceptable value. </p>
    /// <p>Example: <code>111122223333</code> </p>
    pub fn ec2_security_group_owner_id(&self) -> ::std::option::Option<&str> {
        self.ec2_security_group_owner_id.as_deref()
    }
}
impl AuthorizeClusterSecurityGroupIngressInput {
    /// Creates a new builder-style object to manufacture [`AuthorizeClusterSecurityGroupIngressInput`](crate::operation::authorize_cluster_security_group_ingress::AuthorizeClusterSecurityGroupIngressInput).
    pub fn builder() -> crate::operation::authorize_cluster_security_group_ingress::builders::AuthorizeClusterSecurityGroupIngressInputBuilder {
        crate::operation::authorize_cluster_security_group_ingress::builders::AuthorizeClusterSecurityGroupIngressInputBuilder::default()
    }
}

/// A builder for [`AuthorizeClusterSecurityGroupIngressInput`](crate::operation::authorize_cluster_security_group_ingress::AuthorizeClusterSecurityGroupIngressInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AuthorizeClusterSecurityGroupIngressInputBuilder {
    pub(crate) cluster_security_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) cidrip: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_security_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_security_group_owner_id: ::std::option::Option<::std::string::String>,
}
impl AuthorizeClusterSecurityGroupIngressInputBuilder {
    /// <p>The name of the security group to which the ingress rule is added.</p>
    /// This field is required.
    pub fn cluster_security_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_security_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the security group to which the ingress rule is added.</p>
    pub fn set_cluster_security_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_security_group_name = input;
        self
    }
    /// <p>The name of the security group to which the ingress rule is added.</p>
    pub fn get_cluster_security_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_security_group_name
    }
    /// <p>The IP range to be added the Amazon Redshift security group.</p>
    pub fn cidrip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cidrip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP range to be added the Amazon Redshift security group.</p>
    pub fn set_cidrip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cidrip = input;
        self
    }
    /// <p>The IP range to be added the Amazon Redshift security group.</p>
    pub fn get_cidrip(&self) -> &::std::option::Option<::std::string::String> {
        &self.cidrip
    }
    /// <p>The EC2 security group to be added the Amazon Redshift security group.</p>
    pub fn ec2_security_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_security_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The EC2 security group to be added the Amazon Redshift security group.</p>
    pub fn set_ec2_security_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_security_group_name = input;
        self
    }
    /// <p>The EC2 security group to be added the Amazon Redshift security group.</p>
    pub fn get_ec2_security_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_security_group_name
    }
    /// <p>The Amazon Web Services account number of the owner of the security group specified by the <i>EC2SecurityGroupName</i> parameter. The Amazon Web Services Access Key ID is not an acceptable value. </p>
    /// <p>Example: <code>111122223333</code> </p>
    pub fn ec2_security_group_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_security_group_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account number of the owner of the security group specified by the <i>EC2SecurityGroupName</i> parameter. The Amazon Web Services Access Key ID is not an acceptable value. </p>
    /// <p>Example: <code>111122223333</code> </p>
    pub fn set_ec2_security_group_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_security_group_owner_id = input;
        self
    }
    /// <p>The Amazon Web Services account number of the owner of the security group specified by the <i>EC2SecurityGroupName</i> parameter. The Amazon Web Services Access Key ID is not an acceptable value. </p>
    /// <p>Example: <code>111122223333</code> </p>
    pub fn get_ec2_security_group_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_security_group_owner_id
    }
    /// Consumes the builder and constructs a [`AuthorizeClusterSecurityGroupIngressInput`](crate::operation::authorize_cluster_security_group_ingress::AuthorizeClusterSecurityGroupIngressInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::authorize_cluster_security_group_ingress::AuthorizeClusterSecurityGroupIngressInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::authorize_cluster_security_group_ingress::AuthorizeClusterSecurityGroupIngressInput {
                cluster_security_group_name: self.cluster_security_group_name,
                cidrip: self.cidrip,
                ec2_security_group_name: self.ec2_security_group_name,
                ec2_security_group_owner_id: self.ec2_security_group_owner_id,
            },
        )
    }
}
