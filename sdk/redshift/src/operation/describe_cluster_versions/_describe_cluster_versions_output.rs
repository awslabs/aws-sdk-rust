// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the output from the <code>DescribeClusterVersions</code> action. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeClusterVersionsOutput {
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>Marker</code> parameter and retrying the command. If the <code>Marker</code> field is empty, all response records have been retrieved for the request. </p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>Version</code> elements. </p>
    pub cluster_versions: ::std::option::Option<::std::vec::Vec<crate::types::ClusterVersion>>,
    _request_id: Option<String>,
}
impl DescribeClusterVersionsOutput {
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>Marker</code> parameter and retrying the command. If the <code>Marker</code> field is empty, all response records have been retrieved for the request. </p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>A list of <code>Version</code> elements. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cluster_versions.is_none()`.
    pub fn cluster_versions(&self) -> &[crate::types::ClusterVersion] {
        self.cluster_versions.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeClusterVersionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeClusterVersionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClusterVersionsOutput`](crate::operation::describe_cluster_versions::DescribeClusterVersionsOutput).
    pub fn builder() -> crate::operation::describe_cluster_versions::builders::DescribeClusterVersionsOutputBuilder {
        crate::operation::describe_cluster_versions::builders::DescribeClusterVersionsOutputBuilder::default()
    }
}

/// A builder for [`DescribeClusterVersionsOutput`](crate::operation::describe_cluster_versions::DescribeClusterVersionsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeClusterVersionsOutputBuilder {
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_versions: ::std::option::Option<::std::vec::Vec<crate::types::ClusterVersion>>,
    _request_id: Option<String>,
}
impl DescribeClusterVersionsOutputBuilder {
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>Marker</code> parameter and retrying the command. If the <code>Marker</code> field is empty, all response records have been retrieved for the request. </p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>Marker</code> parameter and retrying the command. If the <code>Marker</code> field is empty, all response records have been retrieved for the request. </p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>Marker</code> parameter and retrying the command. If the <code>Marker</code> field is empty, all response records have been retrieved for the request. </p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Appends an item to `cluster_versions`.
    ///
    /// To override the contents of this collection use [`set_cluster_versions`](Self::set_cluster_versions).
    ///
    /// <p>A list of <code>Version</code> elements. </p>
    pub fn cluster_versions(mut self, input: crate::types::ClusterVersion) -> Self {
        let mut v = self.cluster_versions.unwrap_or_default();
        v.push(input);
        self.cluster_versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>Version</code> elements. </p>
    pub fn set_cluster_versions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ClusterVersion>>) -> Self {
        self.cluster_versions = input;
        self
    }
    /// <p>A list of <code>Version</code> elements. </p>
    pub fn get_cluster_versions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ClusterVersion>> {
        &self.cluster_versions
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeClusterVersionsOutput`](crate::operation::describe_cluster_versions::DescribeClusterVersionsOutput).
    pub fn build(self) -> crate::operation::describe_cluster_versions::DescribeClusterVersionsOutput {
        crate::operation::describe_cluster_versions::DescribeClusterVersionsOutput {
            marker: self.marker,
            cluster_versions: self.cluster_versions,
            _request_id: self._request_id,
        }
    }
}
