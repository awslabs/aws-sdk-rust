// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::restore_from_cluster_snapshot::_restore_from_cluster_snapshot_output::RestoreFromClusterSnapshotOutputBuilder;

pub use crate::operation::restore_from_cluster_snapshot::_restore_from_cluster_snapshot_input::RestoreFromClusterSnapshotInputBuilder;

/// Fluent builder constructing a request to `RestoreFromClusterSnapshot`.
///
/// <p>Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the <code>ModifyCluster</code> API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.</p>
/// <p>If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.</p>
/// <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RestoreFromClusterSnapshotFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::restore_from_cluster_snapshot::builders::RestoreFromClusterSnapshotInputBuilder
            }
impl RestoreFromClusterSnapshotFluentBuilder {
    /// Creates a new `RestoreFromClusterSnapshot`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::restore_from_cluster_snapshot::RestoreFromClusterSnapshot,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::restore_from_cluster_snapshot::RestoreFromClusterSnapshotError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::restore_from_cluster_snapshot::RestoreFromClusterSnapshotOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::restore_from_cluster_snapshot::RestoreFromClusterSnapshotError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier of the cluster that will be created from restoring the snapshot.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>Alphabetic characters must be lowercase.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li>
    /// </ul>
    pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_identifier(input.into());
        self
    }
    /// <p>The identifier of the cluster that will be created from restoring the snapshot.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>Alphabetic characters must be lowercase.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li>
    /// </ul>
    pub fn set_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_cluster_identifier(input);
        self
    }
    /// <p>The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive. You can specify this parameter or <code>snapshotArn</code>, but not both.</p>
    /// <p>Example: <code>my-snapshot-id</code> </p>
    pub fn snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.snapshot_identifier(input.into());
        self
    }
    /// <p>The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive. You can specify this parameter or <code>snapshotArn</code>, but not both.</p>
    /// <p>Example: <code>my-snapshot-id</code> </p>
    pub fn set_snapshot_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_snapshot_identifier(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot associated with the message to restore from a cluster. You can specify this parameter or <code>snapshotIdentifier</code>, but not both.</p>
    pub fn snapshot_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.snapshot_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot associated with the message to restore from a cluster. You can specify this parameter or <code>snapshotIdentifier</code>, but not both.</p>
    pub fn set_snapshot_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_snapshot_arn(input);
        self
    }
    /// <p>The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p>
    pub fn snapshot_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.snapshot_cluster_identifier(input.into());
        self
    }
    /// <p>The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p>
    pub fn set_snapshot_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_snapshot_cluster_identifier(input);
        self
    }
    /// <p>The port number on which the cluster accepts connections.</p>
    /// <p>Default: The same port as the original cluster.</p>
    /// <p>Constraints: Must be between <code>1115</code> and <code>65535</code>.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.inner = self.inner.port(input);
        self
    }
    /// <p>The port number on which the cluster accepts connections.</p>
    /// <p>Default: The same port as the original cluster.</p>
    /// <p>Constraints: Must be between <code>1115</code> and <code>65535</code>.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_port(input);
        self
    }
    /// <p>The Amazon EC2 Availability Zone in which to restore the cluster.</p>
    /// <p>Default: A random, system-chosen Availability Zone.</p>
    /// <p>Example: <code>us-east-2a</code> </p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.availability_zone(input.into());
        self
    }
    /// <p>The Amazon EC2 Availability Zone in which to restore the cluster.</p>
    /// <p>Default: A random, system-chosen Availability Zone.</p>
    /// <p>Example: <code>us-east-2a</code> </p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_availability_zone(input);
        self
    }
    /// <p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. </p>
    /// <p>Default: <code>true</code> </p>
    pub fn allow_version_upgrade(mut self, input: bool) -> Self {
        self.inner = self.inner.allow_version_upgrade(input);
        self
    }
    /// <p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. </p>
    /// <p>Default: <code>true</code> </p>
    pub fn set_allow_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_allow_version_upgrade(input);
        self
    }
    /// <p>The name of the subnet group where you want to cluster restored.</p>
    /// <p>A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.</p>
    pub fn cluster_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_subnet_group_name(input.into());
        self
    }
    /// <p>The name of the subnet group where you want to cluster restored.</p>
    /// <p>A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.</p>
    pub fn set_cluster_subnet_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_cluster_subnet_group_name(input);
        self
    }
    /// <p>If <code>true</code>, the cluster can be accessed from a public network. </p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.inner = self.inner.publicly_accessible(input);
        self
    }
    /// <p>If <code>true</code>, the cluster can be accessed from a public network. </p>
    pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_publicly_accessible(input);
        self
    }
    /// <p>The Amazon Web Services account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.</p>
    pub fn owner_account(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.owner_account(input.into());
        self
    }
    /// <p>The Amazon Web Services account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.</p>
    pub fn set_owner_account(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_owner_account(input);
        self
    }
    /// <p>Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.</p>
    pub fn hsm_client_certificate_identifier(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.hsm_client_certificate_identifier(input.into());
        self
    }
    /// <p>Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.</p>
    pub fn set_hsm_client_certificate_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hsm_client_certificate_identifier(input);
        self
    }
    /// <p>Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.</p>
    pub fn hsm_configuration_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hsm_configuration_identifier(input.into());
        self
    }
    /// <p>Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.</p>
    pub fn set_hsm_configuration_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_hsm_configuration_identifier(input);
        self
    }
    /// <p>The Elastic IP (EIP) address for the cluster. Don't specify the Elastic IP address for a publicly accessible cluster with availability zone relocation turned on.</p>
    pub fn elastic_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.elastic_ip(input.into());
        self
    }
    /// <p>The Elastic IP (EIP) address for the cluster. Don't specify the Elastic IP address for a publicly accessible cluster with availability zone relocation turned on.</p>
    pub fn set_elastic_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_elastic_ip(input);
        self
    }
    /// <p>The name of the parameter group to be associated with this cluster.</p>
    /// <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    pub fn cluster_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_parameter_group_name(input.into());
        self
    }
    /// <p>The name of the parameter group to be associated with this cluster.</p>
    /// <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    pub fn set_cluster_parameter_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_cluster_parameter_group_name(input);
        self
    }
    /// Appends an item to `ClusterSecurityGroups`.
    ///
    /// To override the contents of this collection use [`set_cluster_security_groups`](Self::set_cluster_security_groups).
    ///
    /// <p>A list of security groups to be associated with this cluster.</p>
    /// <p>Default: The default cluster security group for Amazon Redshift.</p>
    /// <p>Cluster security groups only apply to clusters outside of VPCs.</p>
    pub fn cluster_security_groups(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_security_groups(input.into());
        self
    }
    /// <p>A list of security groups to be associated with this cluster.</p>
    /// <p>Default: The default cluster security group for Amazon Redshift.</p>
    /// <p>Cluster security groups only apply to clusters outside of VPCs.</p>
    pub fn set_cluster_security_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_cluster_security_groups(input);
        self
    }
    /// Appends an item to `VpcSecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p>
    /// <p>Default: The default VPC security group is associated with the cluster.</p>
    /// <p>VPC security groups only apply to clusters in VPCs.</p>
    pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.vpc_security_group_ids(input.into());
        self
    }
    /// <p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p>
    /// <p>Default: The default VPC security group is associated with the cluster.</p>
    /// <p>VPC security groups only apply to clusters in VPCs.</p>
    pub fn set_vpc_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_vpc_security_group_ids(input);
        self
    }
    /// <p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p>
    /// <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p> Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide. </p>
    /// <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.preferred_maintenance_window(input.into());
        self
    }
    /// <p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p>
    /// <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p> Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide. </p>
    /// <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_preferred_maintenance_window(input);
        self
    }
    /// <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <code>CreateClusterSnapshot</code>. </p>
    /// <p>You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days.</p>
    /// <p>Default: The value selected for the cluster from which the snapshot was taken.</p>
    /// <p>Constraints: Must be a value from 0 to 35.</p>
    pub fn automated_snapshot_retention_period(mut self, input: i32) -> Self {
        self.inner = self.inner.automated_snapshot_retention_period(input);
        self
    }
    /// <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <code>CreateClusterSnapshot</code>. </p>
    /// <p>You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days.</p>
    /// <p>Default: The value selected for the cluster from which the snapshot was taken.</p>
    /// <p>Constraints: Must be a value from 0 to 35.</p>
    pub fn set_automated_snapshot_retention_period(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.inner = self.inner.set_automated_snapshot_retention_period(input);
        self
    }
    /// <p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p>
    /// <p>The value must be either -1 or an integer between 1 and 3,653.</p>
    pub fn manual_snapshot_retention_period(mut self, input: i32) -> Self {
        self.inner = self.inner.manual_snapshot_retention_period(input);
        self
    }
    /// <p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p>
    /// <p>The value must be either -1 or an integer between 1 and 3,653.</p>
    pub fn set_manual_snapshot_retention_period(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_manual_snapshot_retention_period(input);
        self
    }
    /// <p>The Key Management Service (KMS) key ID of the encryption key that encrypts data in the cluster restored from a shared snapshot. You can also provide the key ID when you restore from an unencrypted snapshot to an encrypted cluster in the same account. Additionally, you can specify a new KMS key ID when you restore from an encrypted snapshot in the same account in order to change it. In that case, the restored cluster is encrypted with the new KMS key ID.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>The Key Management Service (KMS) key ID of the encryption key that encrypts data in the cluster restored from a shared snapshot. You can also provide the key ID when you restore from an unencrypted snapshot to an encrypted cluster in the same account. Additionally, you can specify a new KMS key ID when you restore from an encrypted snapshot in the same account in order to change it. In that case, the restored cluster is encrypted with the new KMS key ID.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// <p>The node type that the restored cluster will be provisioned with.</p>
    /// <p>Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge to dc2.8xlarge. First restore to a dc1.8xlarge cluster, then resize to a dc2.8large cluster. For more information about node types, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-about-clusters-and-nodes"> About Clusters and Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
    pub fn node_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.node_type(input.into());
        self
    }
    /// <p>The node type that the restored cluster will be provisioned with.</p>
    /// <p>Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge to dc2.8xlarge. First restore to a dc1.8xlarge cluster, then resize to a dc2.8large cluster. For more information about node types, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-about-clusters-and-nodes"> About Clusters and Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
    pub fn set_node_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_node_type(input);
        self
    }
    /// <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p>
    /// <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p>
    /// <p>Default: false</p>
    pub fn enhanced_vpc_routing(mut self, input: bool) -> Self {
        self.inner = self.inner.enhanced_vpc_routing(input);
        self
    }
    /// <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p>
    /// <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p>
    /// <p>Default: false</p>
    pub fn set_enhanced_vpc_routing(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enhanced_vpc_routing(input);
        self
    }
    /// <p>Reserved.</p>
    pub fn additional_info(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.additional_info(input.into());
        self
    }
    /// <p>Reserved.</p>
    pub fn set_additional_info(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_additional_info(input);
        self
    }
    /// Appends an item to `IamRoles`.
    ///
    /// To override the contents of this collection use [`set_iam_roles`](Self::set_iam_roles).
    ///
    /// <p>A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. </p>
    /// <p>The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html">Quotas and limits</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
    pub fn iam_roles(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.iam_roles(input.into());
        self
    }
    /// <p>A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. </p>
    /// <p>The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html">Quotas and limits</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
    pub fn set_iam_roles(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_iam_roles(input);
        self
    }
    /// <p>The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the <code>MaintenanceTrack</code> value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.</p>
    pub fn maintenance_track_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.maintenance_track_name(input.into());
        self
    }
    /// <p>The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the <code>MaintenanceTrack</code> value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.</p>
    pub fn set_maintenance_track_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_maintenance_track_name(input);
        self
    }
    /// <p>A unique identifier for the snapshot schedule.</p>
    pub fn snapshot_schedule_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.snapshot_schedule_identifier(input.into());
        self
    }
    /// <p>A unique identifier for the snapshot schedule.</p>
    pub fn set_snapshot_schedule_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_snapshot_schedule_identifier(input);
        self
    }
    /// <p>The number of nodes specified when provisioning the restored cluster.</p>
    pub fn number_of_nodes(mut self, input: i32) -> Self {
        self.inner = self.inner.number_of_nodes(input);
        self
    }
    /// <p>The number of nodes specified when provisioning the restored cluster.</p>
    pub fn set_number_of_nodes(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_number_of_nodes(input);
        self
    }
    /// <p>The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster is restored.</p>
    pub fn availability_zone_relocation(mut self, input: bool) -> Self {
        self.inner = self.inner.availability_zone_relocation(input);
        self
    }
    /// <p>The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster is restored.</p>
    pub fn set_availability_zone_relocation(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_availability_zone_relocation(input);
        self
    }
    /// <p>This parameter is retired. It does not set the AQUA configuration status. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).</p>
    pub fn aqua_configuration_status(
        mut self,
        input: crate::types::AquaConfigurationStatus,
    ) -> Self {
        self.inner = self.inner.aqua_configuration_status(input);
        self
    }
    /// <p>This parameter is retired. It does not set the AQUA configuration status. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).</p>
    pub fn set_aqua_configuration_status(
        mut self,
        input: std::option::Option<crate::types::AquaConfigurationStatus>,
    ) -> Self {
        self.inner = self.inner.set_aqua_configuration_status(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was last modified while it was restored from a snapshot.</p>
    pub fn default_iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.default_iam_role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was last modified while it was restored from a snapshot.</p>
    pub fn set_default_iam_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_default_iam_role_arn(input);
        self
    }
    /// <p>The identifier of the target reserved node offering.</p>
    pub fn reserved_node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reserved_node_id(input.into());
        self
    }
    /// <p>The identifier of the target reserved node offering.</p>
    pub fn set_reserved_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_reserved_node_id(input);
        self
    }
    /// <p>The identifier of the target reserved node offering.</p>
    pub fn target_reserved_node_offering_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.target_reserved_node_offering_id(input.into());
        self
    }
    /// <p>The identifier of the target reserved node offering.</p>
    pub fn set_target_reserved_node_offering_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_target_reserved_node_offering_id(input);
        self
    }
    /// <p>Enables support for restoring an unencrypted snapshot to a cluster encrypted with Key Management Service (KMS) and a customer managed key.</p>
    pub fn encrypted(mut self, input: bool) -> Self {
        self.inner = self.inner.encrypted(input);
        self
    }
    /// <p>Enables support for restoring an unencrypted snapshot to a cluster encrypted with Key Management Service (KMS) and a customer managed key.</p>
    pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_encrypted(input);
        self
    }
}
