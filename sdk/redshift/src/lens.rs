// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_cluster_db_revisions_output_marker(
    input: &crate::output::DescribeClusterDbRevisionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_cluster_parameter_groups_output_marker(
    input: &crate::output::DescribeClusterParameterGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_cluster_parameters_output_marker(
    input: &crate::output::DescribeClusterParametersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_clusters_output_marker(
    input: &crate::output::DescribeClustersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_cluster_security_groups_output_marker(
    input: &crate::output::DescribeClusterSecurityGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_cluster_snapshots_output_marker(
    input: &crate::output::DescribeClusterSnapshotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_cluster_subnet_groups_output_marker(
    input: &crate::output::DescribeClusterSubnetGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_cluster_tracks_output_marker(
    input: &crate::output::DescribeClusterTracksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_cluster_versions_output_marker(
    input: &crate::output::DescribeClusterVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_data_shares_output_marker(
    input: &crate::output::DescribeDataSharesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_data_shares_for_consumer_output_marker(
    input: &crate::output::DescribeDataSharesForConsumerOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_data_shares_for_producer_output_marker(
    input: &crate::output::DescribeDataSharesForProducerOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_default_cluster_parameters_output_default_cluster_parameters_marker(
    input: &crate::output::DescribeDefaultClusterParametersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.default_cluster_parameters {
        None => return None,
        Some(t) => t,
    };
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_endpoint_access_output_marker(
    input: &crate::output::DescribeEndpointAccessOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_endpoint_authorization_output_marker(
    input: &crate::output::DescribeEndpointAuthorizationOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_events_output_marker(
    input: &crate::output::DescribeEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_event_subscriptions_output_marker(
    input: &crate::output::DescribeEventSubscriptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_hsm_client_certificates_output_marker(
    input: &crate::output::DescribeHsmClientCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_hsm_configurations_output_marker(
    input: &crate::output::DescribeHsmConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_node_configuration_options_output_marker(
    input: &crate::output::DescribeNodeConfigurationOptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_orderable_cluster_options_output_marker(
    input: &crate::output::DescribeOrderableClusterOptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_reserved_node_exchange_status_output_marker(
    input: &crate::output::DescribeReservedNodeExchangeStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_reserved_node_offerings_output_marker(
    input: &crate::output::DescribeReservedNodeOfferingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_reserved_nodes_output_marker(
    input: &crate::output::DescribeReservedNodesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_scheduled_actions_output_marker(
    input: &crate::output::DescribeScheduledActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_snapshot_copy_grants_output_marker(
    input: &crate::output::DescribeSnapshotCopyGrantsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_snapshot_schedules_output_marker(
    input: &crate::output::DescribeSnapshotSchedulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_table_restore_status_output_marker(
    input: &crate::output::DescribeTableRestoreStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_tags_output_marker(
    input: &crate::output::DescribeTagsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_usage_limits_output_marker(
    input: &crate::output::DescribeUsageLimitsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_reserved_node_exchange_configuration_options_output_marker(
    input: &crate::output::GetReservedNodeExchangeConfigurationOptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_reserved_node_exchange_offerings_output_marker(
    input: &crate::output::GetReservedNodeExchangeOfferingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cluster_db_revisions_output_cluster_db_revisions(
    input: crate::output::DescribeClusterDbRevisionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ClusterDbRevision>> {
    let input = match input.cluster_db_revisions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cluster_parameter_groups_output_parameter_groups(
    input: crate::output::DescribeClusterParameterGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ClusterParameterGroup>> {
    let input = match input.parameter_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cluster_parameters_output_parameters(
    input: crate::output::DescribeClusterParametersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Parameter>> {
    let input = match input.parameters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_clusters_output_clusters(
    input: crate::output::DescribeClustersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Cluster>> {
    let input = match input.clusters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cluster_security_groups_output_cluster_security_groups(
    input: crate::output::DescribeClusterSecurityGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ClusterSecurityGroup>> {
    let input = match input.cluster_security_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cluster_snapshots_output_snapshots(
    input: crate::output::DescribeClusterSnapshotsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Snapshot>> {
    let input = match input.snapshots {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cluster_subnet_groups_output_cluster_subnet_groups(
    input: crate::output::DescribeClusterSubnetGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ClusterSubnetGroup>> {
    let input = match input.cluster_subnet_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cluster_tracks_output_maintenance_tracks(
    input: crate::output::DescribeClusterTracksOutput,
) -> std::option::Option<std::vec::Vec<crate::model::MaintenanceTrack>> {
    let input = match input.maintenance_tracks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_cluster_versions_output_cluster_versions(
    input: crate::output::DescribeClusterVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ClusterVersion>> {
    let input = match input.cluster_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_data_shares_output_data_shares(
    input: crate::output::DescribeDataSharesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DataShare>> {
    let input = match input.data_shares {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_data_shares_for_consumer_output_data_shares(
    input: crate::output::DescribeDataSharesForConsumerOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DataShare>> {
    let input = match input.data_shares {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_data_shares_for_producer_output_data_shares(
    input: crate::output::DescribeDataSharesForProducerOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DataShare>> {
    let input = match input.data_shares {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_default_cluster_parameters_output_default_cluster_parameters_parameters(
    input: crate::output::DescribeDefaultClusterParametersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Parameter>> {
    let input = match input.default_cluster_parameters {
        None => return None,
        Some(t) => t,
    };
    let input = match input.parameters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_endpoint_access_output_endpoint_access_list(
    input: crate::output::DescribeEndpointAccessOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EndpointAccess>> {
    let input = match input.endpoint_access_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_endpoint_authorization_output_endpoint_authorization_list(
    input: crate::output::DescribeEndpointAuthorizationOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EndpointAuthorization>> {
    let input = match input.endpoint_authorization_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_events_output_events(
    input: crate::output::DescribeEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Event>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_event_subscriptions_output_event_subscriptions_list(
    input: crate::output::DescribeEventSubscriptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EventSubscription>> {
    let input = match input.event_subscriptions_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_hsm_client_certificates_output_hsm_client_certificates(
    input: crate::output::DescribeHsmClientCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::HsmClientCertificate>> {
    let input = match input.hsm_client_certificates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_hsm_configurations_output_hsm_configurations(
    input: crate::output::DescribeHsmConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::HsmConfiguration>> {
    let input = match input.hsm_configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_node_configuration_options_output_node_configuration_option_list(
    input: crate::output::DescribeNodeConfigurationOptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::NodeConfigurationOption>> {
    let input = match input.node_configuration_option_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_orderable_cluster_options_output_orderable_cluster_options(
    input: crate::output::DescribeOrderableClusterOptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::OrderableClusterOption>> {
    let input = match input.orderable_cluster_options {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_reserved_node_exchange_status_output_reserved_node_exchange_status_details(
    input: crate::output::DescribeReservedNodeExchangeStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReservedNodeExchangeStatus>> {
    let input = match input.reserved_node_exchange_status_details {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_reserved_node_offerings_output_reserved_node_offerings(
    input: crate::output::DescribeReservedNodeOfferingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReservedNodeOffering>> {
    let input = match input.reserved_node_offerings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_reserved_nodes_output_reserved_nodes(
    input: crate::output::DescribeReservedNodesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReservedNode>> {
    let input = match input.reserved_nodes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_scheduled_actions_output_scheduled_actions(
    input: crate::output::DescribeScheduledActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ScheduledAction>> {
    let input = match input.scheduled_actions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_snapshot_copy_grants_output_snapshot_copy_grants(
    input: crate::output::DescribeSnapshotCopyGrantsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SnapshotCopyGrant>> {
    let input = match input.snapshot_copy_grants {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_snapshot_schedules_output_snapshot_schedules(
    input: crate::output::DescribeSnapshotSchedulesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SnapshotSchedule>> {
    let input = match input.snapshot_schedules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_table_restore_status_output_table_restore_status_details(
    input: crate::output::DescribeTableRestoreStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TableRestoreStatus>> {
    let input = match input.table_restore_status_details {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_tags_output_tagged_resources(
    input: crate::output::DescribeTagsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TaggedResource>> {
    let input = match input.tagged_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_usage_limits_output_usage_limits(
    input: crate::output::DescribeUsageLimitsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UsageLimit>> {
    let input = match input.usage_limits {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_reserved_node_exchange_configuration_options_output_reserved_node_configuration_option_list(
    input: crate::output::GetReservedNodeExchangeConfigurationOptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReservedNodeConfigurationOption>> {
    let input = match input.reserved_node_configuration_option_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_reserved_node_exchange_offerings_output_reserved_node_offerings(
    input: crate::output::GetReservedNodeExchangeOfferingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReservedNodeOffering>> {
    let input = match input.reserved_node_offerings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
