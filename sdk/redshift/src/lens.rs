// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_cluster_db_revisions_output_marker(
    input: &crate::operation::describe_cluster_db_revisions::DescribeClusterDbRevisionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_cluster_parameter_groups_output_marker(
    input: &crate::operation::describe_cluster_parameter_groups::DescribeClusterParameterGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_cluster_parameters_output_marker(
    input: &crate::operation::describe_cluster_parameters::DescribeClusterParametersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_cluster_security_groups_output_marker(
    input: &crate::operation::describe_cluster_security_groups::DescribeClusterSecurityGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_cluster_snapshots_output_marker(
    input: &crate::operation::describe_cluster_snapshots::DescribeClusterSnapshotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_cluster_subnet_groups_output_marker(
    input: &crate::operation::describe_cluster_subnet_groups::DescribeClusterSubnetGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_cluster_tracks_output_marker(
    input: &crate::operation::describe_cluster_tracks::DescribeClusterTracksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_cluster_versions_output_marker(
    input: &crate::operation::describe_cluster_versions::DescribeClusterVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_clusters_output_marker(
    input: &crate::operation::describe_clusters::DescribeClustersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_data_shares_output_marker(
    input: &crate::operation::describe_data_shares::DescribeDataSharesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_data_shares_for_consumer_output_marker(
    input: &crate::operation::describe_data_shares_for_consumer::DescribeDataSharesForConsumerOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_data_shares_for_producer_output_marker(
    input: &crate::operation::describe_data_shares_for_producer::DescribeDataSharesForProducerOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_default_cluster_parameters_output_default_cluster_parameters_marker(
    input: &crate::operation::describe_default_cluster_parameters::DescribeDefaultClusterParametersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.default_cluster_parameters {
        None => return None,
        Some(t) => t,
    };
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_endpoint_access_output_marker(
    input: &crate::operation::describe_endpoint_access::DescribeEndpointAccessOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_endpoint_authorization_output_marker(
    input: &crate::operation::describe_endpoint_authorization::DescribeEndpointAuthorizationOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_event_subscriptions_output_marker(
    input: &crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_events_output_marker(
    input: &crate::operation::describe_events::DescribeEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_hsm_client_certificates_output_marker(
    input: &crate::operation::describe_hsm_client_certificates::DescribeHsmClientCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_hsm_configurations_output_marker(
    input: &crate::operation::describe_hsm_configurations::DescribeHsmConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_node_configuration_options_output_marker(
    input: &crate::operation::describe_node_configuration_options::DescribeNodeConfigurationOptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_orderable_cluster_options_output_marker(
    input: &crate::operation::describe_orderable_cluster_options::DescribeOrderableClusterOptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_reserved_node_exchange_status_output_marker(
    input: &crate::operation::describe_reserved_node_exchange_status::DescribeReservedNodeExchangeStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_reserved_node_offerings_output_marker(
    input: &crate::operation::describe_reserved_node_offerings::DescribeReservedNodeOfferingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_reserved_nodes_output_marker(
    input: &crate::operation::describe_reserved_nodes::DescribeReservedNodesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_scheduled_actions_output_marker(
    input: &crate::operation::describe_scheduled_actions::DescribeScheduledActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_snapshot_copy_grants_output_marker(
    input: &crate::operation::describe_snapshot_copy_grants::DescribeSnapshotCopyGrantsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_snapshot_schedules_output_marker(
    input: &crate::operation::describe_snapshot_schedules::DescribeSnapshotSchedulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_table_restore_status_output_marker(
    input: &crate::operation::describe_table_restore_status::DescribeTableRestoreStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_tags_output_marker(
    input: &crate::operation::describe_tags::DescribeTagsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_usage_limits_output_marker(
    input: &crate::operation::describe_usage_limits::DescribeUsageLimitsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_reserved_node_exchange_configuration_options_output_marker(
    input: &crate::operation::get_reserved_node_exchange_configuration_options::GetReservedNodeExchangeConfigurationOptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_reserved_node_exchange_offerings_output_marker(
    input: &crate::operation::get_reserved_node_exchange_offerings::GetReservedNodeExchangeOfferingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_cluster_db_revisions_output_cluster_db_revisions(
    input: crate::operation::describe_cluster_db_revisions::DescribeClusterDbRevisionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ClusterDbRevision>> {
    let input = match input.cluster_db_revisions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_cluster_parameter_groups_output_parameter_groups(
    input: crate::operation::describe_cluster_parameter_groups::DescribeClusterParameterGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ClusterParameterGroup>> {
    let input = match input.parameter_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_cluster_parameters_output_parameters(
    input: crate::operation::describe_cluster_parameters::DescribeClusterParametersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Parameter>> {
    let input = match input.parameters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_cluster_security_groups_output_cluster_security_groups(
    input: crate::operation::describe_cluster_security_groups::DescribeClusterSecurityGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ClusterSecurityGroup>> {
    let input = match input.cluster_security_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_cluster_snapshots_output_snapshots(
    input: crate::operation::describe_cluster_snapshots::DescribeClusterSnapshotsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Snapshot>> {
    let input = match input.snapshots {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_cluster_subnet_groups_output_cluster_subnet_groups(
    input: crate::operation::describe_cluster_subnet_groups::DescribeClusterSubnetGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ClusterSubnetGroup>> {
    let input = match input.cluster_subnet_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_cluster_tracks_output_maintenance_tracks(
    input: crate::operation::describe_cluster_tracks::DescribeClusterTracksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MaintenanceTrack>> {
    let input = match input.maintenance_tracks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_cluster_versions_output_cluster_versions(
    input: crate::operation::describe_cluster_versions::DescribeClusterVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ClusterVersion>> {
    let input = match input.cluster_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_clusters_output_clusters(
    input: crate::operation::describe_clusters::DescribeClustersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Cluster>> {
    let input = match input.clusters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_data_shares_output_data_shares(
    input: crate::operation::describe_data_shares::DescribeDataSharesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DataShare>> {
    let input = match input.data_shares {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_data_shares_for_consumer_output_data_shares(
    input: crate::operation::describe_data_shares_for_consumer::DescribeDataSharesForConsumerOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DataShare>> {
    let input = match input.data_shares {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_data_shares_for_producer_output_data_shares(
    input: crate::operation::describe_data_shares_for_producer::DescribeDataSharesForProducerOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DataShare>> {
    let input = match input.data_shares {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_default_cluster_parameters_output_default_cluster_parameters_parameters(
    input: crate::operation::describe_default_cluster_parameters::DescribeDefaultClusterParametersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Parameter>> {
    let input = match input.default_cluster_parameters {
        None => return None,
        Some(t) => t,
    };
    let input = match input.parameters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_endpoint_access_output_endpoint_access_list(
    input: crate::operation::describe_endpoint_access::DescribeEndpointAccessOutput,
) -> std::option::Option<std::vec::Vec<crate::types::EndpointAccess>> {
    let input = match input.endpoint_access_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_endpoint_authorization_output_endpoint_authorization_list(
    input: crate::operation::describe_endpoint_authorization::DescribeEndpointAuthorizationOutput,
) -> std::option::Option<std::vec::Vec<crate::types::EndpointAuthorization>> {
    let input = match input.endpoint_authorization_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_event_subscriptions_output_event_subscriptions_list(
    input: crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::EventSubscription>> {
    let input = match input.event_subscriptions_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_events_output_events(
    input: crate::operation::describe_events::DescribeEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Event>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_hsm_client_certificates_output_hsm_client_certificates(
    input: crate::operation::describe_hsm_client_certificates::DescribeHsmClientCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::HsmClientCertificate>> {
    let input = match input.hsm_client_certificates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_hsm_configurations_output_hsm_configurations(
    input: crate::operation::describe_hsm_configurations::DescribeHsmConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::HsmConfiguration>> {
    let input = match input.hsm_configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_node_configuration_options_output_node_configuration_option_list(
    input: crate::operation::describe_node_configuration_options::DescribeNodeConfigurationOptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::NodeConfigurationOption>> {
    let input = match input.node_configuration_option_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_orderable_cluster_options_output_orderable_cluster_options(
    input: crate::operation::describe_orderable_cluster_options::DescribeOrderableClusterOptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OrderableClusterOption>> {
    let input = match input.orderable_cluster_options {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_reserved_node_exchange_status_output_reserved_node_exchange_status_details(
    input: crate::operation::describe_reserved_node_exchange_status::DescribeReservedNodeExchangeStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ReservedNodeExchangeStatus>> {
    let input = match input.reserved_node_exchange_status_details {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_reserved_node_offerings_output_reserved_node_offerings(
    input: crate::operation::describe_reserved_node_offerings::DescribeReservedNodeOfferingsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ReservedNodeOffering>> {
    let input = match input.reserved_node_offerings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_reserved_nodes_output_reserved_nodes(
    input: crate::operation::describe_reserved_nodes::DescribeReservedNodesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ReservedNode>> {
    let input = match input.reserved_nodes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_scheduled_actions_output_scheduled_actions(
    input: crate::operation::describe_scheduled_actions::DescribeScheduledActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ScheduledAction>> {
    let input = match input.scheduled_actions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_snapshot_copy_grants_output_snapshot_copy_grants(
    input: crate::operation::describe_snapshot_copy_grants::DescribeSnapshotCopyGrantsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SnapshotCopyGrant>> {
    let input = match input.snapshot_copy_grants {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_snapshot_schedules_output_snapshot_schedules(
    input: crate::operation::describe_snapshot_schedules::DescribeSnapshotSchedulesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SnapshotSchedule>> {
    let input = match input.snapshot_schedules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_table_restore_status_output_table_restore_status_details(
    input: crate::operation::describe_table_restore_status::DescribeTableRestoreStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TableRestoreStatus>> {
    let input = match input.table_restore_status_details {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_tags_output_tagged_resources(
    input: crate::operation::describe_tags::DescribeTagsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TaggedResource>> {
    let input = match input.tagged_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_usage_limits_output_usage_limits(
    input: crate::operation::describe_usage_limits::DescribeUsageLimitsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::UsageLimit>> {
    let input = match input.usage_limits {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_reserved_node_exchange_configuration_options_output_reserved_node_configuration_option_list(
    input: crate::operation::get_reserved_node_exchange_configuration_options::GetReservedNodeExchangeConfigurationOptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ReservedNodeConfigurationOption>> {
    let input = match input.reserved_node_configuration_option_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_reserved_node_exchange_offerings_output_reserved_node_offerings(
    input: crate::operation::get_reserved_node_exchange_offerings::GetReservedNodeExchangeOfferingsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ReservedNodeOffering>> {
    let input = match input.reserved_node_offerings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
