// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AuthorizeSnapshotAccess`](crate::client::fluent_builders::AuthorizeSnapshotAccess) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`snapshot_identifier(impl Into<String>)`](crate::client::fluent_builders::AuthorizeSnapshotAccess::snapshot_identifier) / [`set_snapshot_identifier(Option<String>)`](crate::client::fluent_builders::AuthorizeSnapshotAccess::set_snapshot_identifier): <p>The identifier of the snapshot the account is authorized to restore.</p>
    ///   - [`snapshot_arn(impl Into<String>)`](crate::client::fluent_builders::AuthorizeSnapshotAccess::snapshot_arn) / [`set_snapshot_arn(Option<String>)`](crate::client::fluent_builders::AuthorizeSnapshotAccess::set_snapshot_arn): <p>The Amazon Resource Name (ARN) of the snapshot to authorize access to.</p>
    ///   - [`snapshot_cluster_identifier(impl Into<String>)`](crate::client::fluent_builders::AuthorizeSnapshotAccess::snapshot_cluster_identifier) / [`set_snapshot_cluster_identifier(Option<String>)`](crate::client::fluent_builders::AuthorizeSnapshotAccess::set_snapshot_cluster_identifier): <p>The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p>
    ///   - [`account_with_restore_access(impl Into<String>)`](crate::client::fluent_builders::AuthorizeSnapshotAccess::account_with_restore_access) / [`set_account_with_restore_access(Option<String>)`](crate::client::fluent_builders::AuthorizeSnapshotAccess::set_account_with_restore_access): <p>The identifier of the Amazon Web Services account authorized to restore the specified snapshot.</p>  <p>To share a snapshot with Amazon Web Services Support, specify amazon-redshift-support.</p>
    /// - On success, responds with [`AuthorizeSnapshotAccessOutput`](crate::output::AuthorizeSnapshotAccessOutput) with field(s):
    ///   - [`snapshot(Option<Snapshot>)`](crate::output::AuthorizeSnapshotAccessOutput::snapshot): <p>Describes a snapshot.</p>
    /// - On failure, responds with [`SdkError<AuthorizeSnapshotAccessError>`](crate::error::AuthorizeSnapshotAccessError)
    pub fn authorize_snapshot_access(
        &self,
    ) -> crate::client::fluent_builders::AuthorizeSnapshotAccess {
        crate::client::fluent_builders::AuthorizeSnapshotAccess::new(self.handle.clone())
    }
}
