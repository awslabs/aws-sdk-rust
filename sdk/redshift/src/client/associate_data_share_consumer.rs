// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AssociateDataShareConsumer`](crate::operation::associate_data_share_consumer::builders::AssociateDataShareConsumerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`data_share_arn(impl Into<String>)`](crate::operation::associate_data_share_consumer::builders::AssociateDataShareConsumerFluentBuilder::data_share_arn) / [`set_data_share_arn(Option<String>)`](crate::operation::associate_data_share_consumer::builders::AssociateDataShareConsumerFluentBuilder::set_data_share_arn): <p>The Amazon Resource Name (ARN) of the datashare that the consumer is to use with the account or the namespace.</p>
    ///   - [`associate_entire_account(bool)`](crate::operation::associate_data_share_consumer::builders::AssociateDataShareConsumerFluentBuilder::associate_entire_account) / [`set_associate_entire_account(Option<bool>)`](crate::operation::associate_data_share_consumer::builders::AssociateDataShareConsumerFluentBuilder::set_associate_entire_account): <p>A value that specifies whether the datashare is associated with the entire account.</p>
    ///   - [`consumer_arn(impl Into<String>)`](crate::operation::associate_data_share_consumer::builders::AssociateDataShareConsumerFluentBuilder::consumer_arn) / [`set_consumer_arn(Option<String>)`](crate::operation::associate_data_share_consumer::builders::AssociateDataShareConsumerFluentBuilder::set_consumer_arn): <p>The Amazon Resource Name (ARN) of the consumer that is associated with the datashare.</p>
    ///   - [`consumer_region(impl Into<String>)`](crate::operation::associate_data_share_consumer::builders::AssociateDataShareConsumerFluentBuilder::consumer_region) / [`set_consumer_region(Option<String>)`](crate::operation::associate_data_share_consumer::builders::AssociateDataShareConsumerFluentBuilder::set_consumer_region): <p>From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified Amazon Web Services Region.</p>
    /// - On success, responds with [`AssociateDataShareConsumerOutput`](crate::operation::associate_data_share_consumer::AssociateDataShareConsumerOutput) with field(s):
    ///   - [`data_share_arn(Option<String>)`](crate::operation::associate_data_share_consumer::AssociateDataShareConsumerOutput::data_share_arn): <p>An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the <code>arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name}</code> format.</p>
    ///   - [`producer_arn(Option<String>)`](crate::operation::associate_data_share_consumer::AssociateDataShareConsumerOutput::producer_arn): <p>The Amazon Resource Name (ARN) of the producer.</p>
    ///   - [`allow_publicly_accessible_consumers(bool)`](crate::operation::associate_data_share_consumer::AssociateDataShareConsumerOutput::allow_publicly_accessible_consumers): <p>A value that specifies whether the datashare can be shared to a publicly accessible cluster.</p>
    ///   - [`data_share_associations(Option<Vec<DataShareAssociation>>)`](crate::operation::associate_data_share_consumer::AssociateDataShareConsumerOutput::data_share_associations): <p>A value that specifies when the datashare has an association between producer and data consumers.</p>
    ///   - [`managed_by(Option<String>)`](crate::operation::associate_data_share_consumer::AssociateDataShareConsumerOutput::managed_by): <p>The identifier of a datashare to show its managing entity.</p>
    /// - On failure, responds with [`SdkError<AssociateDataShareConsumerError>`](crate::operation::associate_data_share_consumer::AssociateDataShareConsumerError)
    pub fn associate_data_share_consumer(&self) -> crate::operation::associate_data_share_consumer::builders::AssociateDataShareConsumerFluentBuilder{
        crate::operation::associate_data_share_consumer::builders::AssociateDataShareConsumerFluentBuilder::new(self.handle.clone())
    }
}
