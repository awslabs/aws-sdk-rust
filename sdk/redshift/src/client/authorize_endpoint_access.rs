// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AuthorizeEndpointAccess`](crate::client::fluent_builders::AuthorizeEndpointAccess) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_identifier(impl Into<String>)`](crate::client::fluent_builders::AuthorizeEndpointAccess::cluster_identifier) / [`set_cluster_identifier(Option<String>)`](crate::client::fluent_builders::AuthorizeEndpointAccess::set_cluster_identifier): <p>The cluster identifier of the cluster to grant access to.</p>
    ///   - [`account(impl Into<String>)`](crate::client::fluent_builders::AuthorizeEndpointAccess::account) / [`set_account(Option<String>)`](crate::client::fluent_builders::AuthorizeEndpointAccess::set_account): <p>The Amazon Web Services account ID to grant access to.</p>
    ///   - [`vpc_ids(Vec<String>)`](crate::client::fluent_builders::AuthorizeEndpointAccess::vpc_ids) / [`set_vpc_ids(Option<Vec<String>>)`](crate::client::fluent_builders::AuthorizeEndpointAccess::set_vpc_ids): <p>The virtual private cloud (VPC) identifiers to grant access to.</p>
    /// - On success, responds with [`AuthorizeEndpointAccessOutput`](crate::output::AuthorizeEndpointAccessOutput) with field(s):
    ///   - [`grantor(Option<String>)`](crate::output::AuthorizeEndpointAccessOutput::grantor): <p>The Amazon Web Services account ID of the cluster owner.</p>
    ///   - [`grantee(Option<String>)`](crate::output::AuthorizeEndpointAccessOutput::grantee): <p>The Amazon Web Services account ID of the grantee of the cluster.</p>
    ///   - [`cluster_identifier(Option<String>)`](crate::output::AuthorizeEndpointAccessOutput::cluster_identifier): <p>The cluster identifier.</p>
    ///   - [`authorize_time(Option<DateTime>)`](crate::output::AuthorizeEndpointAccessOutput::authorize_time): <p>The time (UTC) when the authorization was created.</p>
    ///   - [`cluster_status(Option<String>)`](crate::output::AuthorizeEndpointAccessOutput::cluster_status): <p>The status of the cluster.</p>
    ///   - [`status(Option<AuthorizationStatus>)`](crate::output::AuthorizeEndpointAccessOutput::status): <p>The status of the authorization action.</p>
    ///   - [`allowed_all_vp_cs(bool)`](crate::output::AuthorizeEndpointAccessOutput::allowed_all_vp_cs): <p>Indicates whether all VPCs in the grantee account are allowed access to the cluster.</p>
    ///   - [`allowed_vp_cs(Option<Vec<String>>)`](crate::output::AuthorizeEndpointAccessOutput::allowed_vp_cs): <p>The VPCs allowed access to the cluster.</p>
    ///   - [`endpoint_count(i32)`](crate::output::AuthorizeEndpointAccessOutput::endpoint_count): <p>The number of Redshift-managed VPC endpoints created for the authorization.</p>
    /// - On failure, responds with [`SdkError<AuthorizeEndpointAccessError>`](crate::error::AuthorizeEndpointAccessError)
    pub fn authorize_endpoint_access(
        &self,
    ) -> crate::client::fluent_builders::AuthorizeEndpointAccess {
        crate::client::fluent_builders::AuthorizeEndpointAccess::new(self.handle.clone())
    }
}
