// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ModifyUsageLimit`](crate::client::fluent_builders::ModifyUsageLimit) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`usage_limit_id(impl Into<String>)`](crate::client::fluent_builders::ModifyUsageLimit::usage_limit_id) / [`set_usage_limit_id(Option<String>)`](crate::client::fluent_builders::ModifyUsageLimit::set_usage_limit_id): <p>The identifier of the usage limit to modify.</p>
    ///   - [`amount(i64)`](crate::client::fluent_builders::ModifyUsageLimit::amount) / [`set_amount(Option<i64>)`](crate::client::fluent_builders::ModifyUsageLimit::set_amount): <p>The new limit amount. For more information about this parameter, see <code>UsageLimit</code>. </p>
    ///   - [`breach_action(UsageLimitBreachAction)`](crate::client::fluent_builders::ModifyUsageLimit::breach_action) / [`set_breach_action(Option<UsageLimitBreachAction>)`](crate::client::fluent_builders::ModifyUsageLimit::set_breach_action): <p>The new action that Amazon Redshift takes when the limit is reached. For more information about this parameter, see <code>UsageLimit</code>. </p>
    /// - On success, responds with [`ModifyUsageLimitOutput`](crate::output::ModifyUsageLimitOutput) with field(s):
    ///   - [`usage_limit_id(Option<String>)`](crate::output::ModifyUsageLimitOutput::usage_limit_id): <p>The identifier of the usage limit.</p>
    ///   - [`cluster_identifier(Option<String>)`](crate::output::ModifyUsageLimitOutput::cluster_identifier): <p>The identifier of the cluster with a usage limit.</p>
    ///   - [`feature_type(Option<UsageLimitFeatureType>)`](crate::output::ModifyUsageLimitOutput::feature_type): <p>The Amazon Redshift feature to which the limit applies.</p>
    ///   - [`limit_type(Option<UsageLimitLimitType>)`](crate::output::ModifyUsageLimitOutput::limit_type): <p>The type of limit. Depending on the feature type, this can be based on a time duration or data size.</p>
    ///   - [`amount(i64)`](crate::output::ModifyUsageLimitOutput::amount): <p>The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).</p>
    ///   - [`period(Option<UsageLimitPeriod>)`](crate::output::ModifyUsageLimitOutput::period): <p>The time period that the amount applies to. A <code>weekly</code> period begins on Sunday. The default is <code>monthly</code>. </p>
    ///   - [`breach_action(Option<UsageLimitBreachAction>)`](crate::output::ModifyUsageLimitOutput::breach_action): <p>The action that Amazon Redshift takes when the limit is reached. Possible values are: </p>  <ul>   <li> <p> <b>log</b> - To log an event in a system table. The default is log.</p> </li>   <li> <p> <b>emit-metric</b> - To emit CloudWatch metrics.</p> </li>   <li> <p> <b>disable</b> - To disable the feature until the next usage period begins.</p> </li>  </ul>
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ModifyUsageLimitOutput::tags): <p>A list of tag instances.</p>
    /// - On failure, responds with [`SdkError<ModifyUsageLimitError>`](crate::error::ModifyUsageLimitError)
    pub fn modify_usage_limit(&self) -> crate::client::fluent_builders::ModifyUsageLimit {
        crate::client::fluent_builders::ModifyUsageLimit::new(self.handle.clone())
    }
}
