// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ModifyClusterSnapshot`](crate::client::fluent_builders::ModifyClusterSnapshot) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`snapshot_identifier(impl Into<String>)`](crate::client::fluent_builders::ModifyClusterSnapshot::snapshot_identifier) / [`set_snapshot_identifier(Option<String>)`](crate::client::fluent_builders::ModifyClusterSnapshot::set_snapshot_identifier): <p>The identifier of the snapshot whose setting you want to modify.</p>
    ///   - [`manual_snapshot_retention_period(i32)`](crate::client::fluent_builders::ModifyClusterSnapshot::manual_snapshot_retention_period) / [`set_manual_snapshot_retention_period(Option<i32>)`](crate::client::fluent_builders::ModifyClusterSnapshot::set_manual_snapshot_retention_period): <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p>  <p>If the manual snapshot falls outside of the new retention period, you can specify the force option to immediately delete the snapshot.</p>  <p>The value must be either -1 or an integer between 1 and 3,653.</p>
    ///   - [`force(bool)`](crate::client::fluent_builders::ModifyClusterSnapshot::force) / [`set_force(bool)`](crate::client::fluent_builders::ModifyClusterSnapshot::set_force): <p>A Boolean option to override an exception if the retention period has already passed.</p>
    /// - On success, responds with [`ModifyClusterSnapshotOutput`](crate::output::ModifyClusterSnapshotOutput) with field(s):
    ///   - [`snapshot(Option<Snapshot>)`](crate::output::ModifyClusterSnapshotOutput::snapshot): <p>Describes a snapshot.</p>
    /// - On failure, responds with [`SdkError<ModifyClusterSnapshotError>`](crate::error::ModifyClusterSnapshotError)
    pub fn modify_cluster_snapshot(&self) -> crate::client::fluent_builders::ModifyClusterSnapshot {
        crate::client::fluent_builders::ModifyClusterSnapshot::new(self.handle.clone())
    }
}
