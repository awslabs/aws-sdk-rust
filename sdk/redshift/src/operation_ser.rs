// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_accept_reserved_node_exchange(
    input: &crate::input::AcceptReservedNodeExchangeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AcceptReservedNodeExchange", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ReservedNodeId");
    if let Some(var_2) = &input.reserved_node_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TargetReservedNodeOfferingId");
    if let Some(var_4) = &input.target_reserved_node_offering_id {
        scope_3.string(var_4);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_add_partner(
    input: &crate::input::AddPartnerInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AddPartner", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("AccountId");
    if let Some(var_6) = &input.account_id {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("ClusterIdentifier");
    if let Some(var_8) = &input.cluster_identifier {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("DatabaseName");
    if let Some(var_10) = &input.database_name {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("PartnerName");
    if let Some(var_12) = &input.partner_name {
        scope_11.string(var_12);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_authorize_cluster_security_group_ingress(
    input: &crate::input::AuthorizeClusterSecurityGroupIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "AuthorizeClusterSecurityGroupIngress",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_14) = &input.cluster_security_group_name {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("CIDRIP");
    if let Some(var_16) = &input.cidrip {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_18) = &input.ec2_security_group_name {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_20) = &input.ec2_security_group_owner_id {
        scope_19.string(var_20);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_authorize_endpoint_access(
    input: &crate::input::AuthorizeEndpointAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("ClusterIdentifier");
    if let Some(var_22) = &input.cluster_identifier {
        scope_21.string(var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("Account");
    if let Some(var_24) = &input.account {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("VpcIds");
    if let Some(var_26) = &input.vpc_ids {
        let mut list_28 = scope_25.start_list(false, Some("VpcIdentifier"));
        for item_27 in var_26 {
            #[allow(unused_mut)]
            let mut entry_29 = list_28.entry();
            entry_29.string(item_27);
        }
        list_28.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_authorize_snapshot_access(
    input: &crate::input::AuthorizeSnapshotAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AuthorizeSnapshotAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("SnapshotIdentifier");
    if let Some(var_31) = &input.snapshot_identifier {
        scope_30.string(var_31);
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_33) = &input.snapshot_cluster_identifier {
        scope_32.string(var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("AccountWithRestoreAccess");
    if let Some(var_35) = &input.account_with_restore_access {
        scope_34.string(var_35);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_batch_delete_cluster_snapshots(
    input: &crate::input::BatchDeleteClusterSnapshotsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "BatchDeleteClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("Identifiers");
    if let Some(var_37) = &input.identifiers {
        let mut list_39 = scope_36.start_list(false, Some("DeleteClusterSnapshotMessage"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            crate::query_ser::serialize_structure_delete_cluster_snapshot_message(
                entry_40, item_38,
            );
        }
        list_39.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_batch_modify_cluster_snapshots(
    input: &crate::input::BatchModifyClusterSnapshotsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "BatchModifyClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("SnapshotIdentifierList");
    if let Some(var_42) = &input.snapshot_identifier_list {
        let mut list_44 = scope_41.start_list(false, Some("String"));
        for item_43 in var_42 {
            #[allow(unused_mut)]
            let mut entry_45 = list_44.entry();
            entry_45.string(item_43);
        }
        list_44.finish();
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_47) = &input.manual_snapshot_retention_period {
        scope_46.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_47).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("Force");
    if input.force {
        scope_48.boolean(input.force);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_cancel_resize(
    input: &crate::input::CancelResizeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CancelResize", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("ClusterIdentifier");
    if let Some(var_50) = &input.cluster_identifier {
        scope_49.string(var_50);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_copy_cluster_snapshot(
    input: &crate::input::CopyClusterSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CopyClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("SourceSnapshotIdentifier");
    if let Some(var_52) = &input.source_snapshot_identifier {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("SourceSnapshotClusterIdentifier");
    if let Some(var_54) = &input.source_snapshot_cluster_identifier {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("TargetSnapshotIdentifier");
    if let Some(var_56) = &input.target_snapshot_identifier {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_58) = &input.manual_snapshot_retention_period {
        scope_57.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_58).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_cluster(
    input: &crate::input::CreateClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DBName");
    if let Some(var_60) = &input.db_name {
        scope_59.string(var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("ClusterIdentifier");
    if let Some(var_62) = &input.cluster_identifier {
        scope_61.string(var_62);
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("ClusterType");
    if let Some(var_64) = &input.cluster_type {
        scope_63.string(var_64);
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("NodeType");
    if let Some(var_66) = &input.node_type {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("MasterUsername");
    if let Some(var_68) = &input.master_username {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("MasterUserPassword");
    if let Some(var_70) = &input.master_user_password {
        scope_69.string(var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_72) = &input.cluster_security_groups {
        let mut list_74 = scope_71.start_list(false, Some("ClusterSecurityGroupName"));
        for item_73 in var_72 {
            #[allow(unused_mut)]
            let mut entry_75 = list_74.entry();
            entry_75.string(item_73);
        }
        list_74.finish();
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_77) = &input.vpc_security_group_ids {
        let mut list_79 = scope_76.start_list(false, Some("VpcSecurityGroupId"));
        for item_78 in var_77 {
            #[allow(unused_mut)]
            let mut entry_80 = list_79.entry();
            entry_80.string(item_78);
        }
        list_79.finish();
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_82) = &input.cluster_subnet_group_name {
        scope_81.string(var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("AvailabilityZone");
    if let Some(var_84) = &input.availability_zone {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_86) = &input.preferred_maintenance_window {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_88) = &input.cluster_parameter_group_name {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_90) = &input.automated_snapshot_retention_period {
        scope_89.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_90).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_92) = &input.manual_snapshot_retention_period {
        scope_91.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_92).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("Port");
    if let Some(var_94) = &input.port {
        scope_93.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("ClusterVersion");
    if let Some(var_96) = &input.cluster_version {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_98) = &input.allow_version_upgrade {
        scope_97.boolean(*var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("NumberOfNodes");
    if let Some(var_100) = &input.number_of_nodes {
        scope_99.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_100).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("PubliclyAccessible");
    if let Some(var_102) = &input.publicly_accessible {
        scope_101.boolean(*var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Encrypted");
    if let Some(var_104) = &input.encrypted {
        scope_103.boolean(*var_104);
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_106) = &input.hsm_client_certificate_identifier {
        scope_105.string(var_106);
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_108) = &input.hsm_configuration_identifier {
        scope_107.string(var_108);
    }
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("ElasticIp");
    if let Some(var_110) = &input.elastic_ip {
        scope_109.string(var_110);
    }
    #[allow(unused_mut)]
    let mut scope_111 = writer.prefix("Tags");
    if let Some(var_112) = &input.tags {
        let mut list_114 = scope_111.start_list(false, Some("Tag"));
        for item_113 in var_112 {
            #[allow(unused_mut)]
            let mut entry_115 = list_114.entry();
            crate::query_ser::serialize_structure_tag(entry_115, item_113);
        }
        list_114.finish();
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("KmsKeyId");
    if let Some(var_117) = &input.kms_key_id {
        scope_116.string(var_117);
    }
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_119) = &input.enhanced_vpc_routing {
        scope_118.boolean(*var_119);
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("AdditionalInfo");
    if let Some(var_121) = &input.additional_info {
        scope_120.string(var_121);
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("IamRoles");
    if let Some(var_123) = &input.iam_roles {
        let mut list_125 = scope_122.start_list(false, Some("IamRoleArn"));
        for item_124 in var_123 {
            #[allow(unused_mut)]
            let mut entry_126 = list_125.entry();
            entry_126.string(item_124);
        }
        list_125.finish();
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("MaintenanceTrackName");
    if let Some(var_128) = &input.maintenance_track_name {
        scope_127.string(var_128);
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("SnapshotScheduleIdentifier");
    if let Some(var_130) = &input.snapshot_schedule_identifier {
        scope_129.string(var_130);
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_132) = &input.availability_zone_relocation {
        scope_131.boolean(*var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_134) = &input.aqua_configuration_status {
        scope_133.string(var_134.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_cluster_parameter_group(
    input: &crate::input::CreateClusterParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("ParameterGroupName");
    if let Some(var_136) = &input.parameter_group_name {
        scope_135.string(var_136);
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("ParameterGroupFamily");
    if let Some(var_138) = &input.parameter_group_family {
        scope_137.string(var_138);
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("Description");
    if let Some(var_140) = &input.description {
        scope_139.string(var_140);
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("Tags");
    if let Some(var_142) = &input.tags {
        let mut list_144 = scope_141.start_list(false, Some("Tag"));
        for item_143 in var_142 {
            #[allow(unused_mut)]
            let mut entry_145 = list_144.entry();
            crate::query_ser::serialize_structure_tag(entry_145, item_143);
        }
        list_144.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_cluster_security_group(
    input: &crate::input::CreateClusterSecurityGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateClusterSecurityGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_147) = &input.cluster_security_group_name {
        scope_146.string(var_147);
    }
    #[allow(unused_mut)]
    let mut scope_148 = writer.prefix("Description");
    if let Some(var_149) = &input.description {
        scope_148.string(var_149);
    }
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("Tags");
    if let Some(var_151) = &input.tags {
        let mut list_153 = scope_150.start_list(false, Some("Tag"));
        for item_152 in var_151 {
            #[allow(unused_mut)]
            let mut entry_154 = list_153.entry();
            crate::query_ser::serialize_structure_tag(entry_154, item_152);
        }
        list_153.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_cluster_snapshot(
    input: &crate::input::CreateClusterSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("SnapshotIdentifier");
    if let Some(var_156) = &input.snapshot_identifier {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("ClusterIdentifier");
    if let Some(var_158) = &input.cluster_identifier {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_160) = &input.manual_snapshot_retention_period {
        scope_159.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("Tags");
    if let Some(var_162) = &input.tags {
        let mut list_164 = scope_161.start_list(false, Some("Tag"));
        for item_163 in var_162 {
            #[allow(unused_mut)]
            let mut entry_165 = list_164.entry();
            crate::query_ser::serialize_structure_tag(entry_165, item_163);
        }
        list_164.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_cluster_subnet_group(
    input: &crate::input::CreateClusterSubnetGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateClusterSubnetGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_167) = &input.cluster_subnet_group_name {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("Description");
    if let Some(var_169) = &input.description {
        scope_168.string(var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("SubnetIds");
    if let Some(var_171) = &input.subnet_ids {
        let mut list_173 = scope_170.start_list(false, Some("SubnetIdentifier"));
        for item_172 in var_171 {
            #[allow(unused_mut)]
            let mut entry_174 = list_173.entry();
            entry_174.string(item_172);
        }
        list_173.finish();
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("Tags");
    if let Some(var_176) = &input.tags {
        let mut list_178 = scope_175.start_list(false, Some("Tag"));
        for item_177 in var_176 {
            #[allow(unused_mut)]
            let mut entry_179 = list_178.entry();
            crate::query_ser::serialize_structure_tag(entry_179, item_177);
        }
        list_178.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_endpoint_access(
    input: &crate::input::CreateEndpointAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("ClusterIdentifier");
    if let Some(var_181) = &input.cluster_identifier {
        scope_180.string(var_181);
    }
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("ResourceOwner");
    if let Some(var_183) = &input.resource_owner {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("EndpointName");
    if let Some(var_185) = &input.endpoint_name {
        scope_184.string(var_185);
    }
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("SubnetGroupName");
    if let Some(var_187) = &input.subnet_group_name {
        scope_186.string(var_187);
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_189) = &input.vpc_security_group_ids {
        let mut list_191 = scope_188.start_list(false, Some("VpcSecurityGroupId"));
        for item_190 in var_189 {
            #[allow(unused_mut)]
            let mut entry_192 = list_191.entry();
            entry_192.string(item_190);
        }
        list_191.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_event_subscription(
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateEventSubscription", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("SubscriptionName");
    if let Some(var_194) = &input.subscription_name {
        scope_193.string(var_194);
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("SnsTopicArn");
    if let Some(var_196) = &input.sns_topic_arn {
        scope_195.string(var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("SourceType");
    if let Some(var_198) = &input.source_type {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("SourceIds");
    if let Some(var_200) = &input.source_ids {
        let mut list_202 = scope_199.start_list(false, Some("SourceId"));
        for item_201 in var_200 {
            #[allow(unused_mut)]
            let mut entry_203 = list_202.entry();
            entry_203.string(item_201);
        }
        list_202.finish();
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("EventCategories");
    if let Some(var_205) = &input.event_categories {
        let mut list_207 = scope_204.start_list(false, Some("EventCategory"));
        for item_206 in var_205 {
            #[allow(unused_mut)]
            let mut entry_208 = list_207.entry();
            entry_208.string(item_206);
        }
        list_207.finish();
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("Severity");
    if let Some(var_210) = &input.severity {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("Enabled");
    if let Some(var_212) = &input.enabled {
        scope_211.boolean(*var_212);
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("Tags");
    if let Some(var_214) = &input.tags {
        let mut list_216 = scope_213.start_list(false, Some("Tag"));
        for item_215 in var_214 {
            #[allow(unused_mut)]
            let mut entry_217 = list_216.entry();
            crate::query_ser::serialize_structure_tag(entry_217, item_215);
        }
        list_216.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_hsm_client_certificate(
    input: &crate::input::CreateHsmClientCertificateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateHsmClientCertificate", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_219) = &input.hsm_client_certificate_identifier {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("Tags");
    if let Some(var_221) = &input.tags {
        let mut list_223 = scope_220.start_list(false, Some("Tag"));
        for item_222 in var_221 {
            #[allow(unused_mut)]
            let mut entry_224 = list_223.entry();
            crate::query_ser::serialize_structure_tag(entry_224, item_222);
        }
        list_223.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_hsm_configuration(
    input: &crate::input::CreateHsmConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateHsmConfiguration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_226) = &input.hsm_configuration_identifier {
        scope_225.string(var_226);
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("Description");
    if let Some(var_228) = &input.description {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("HsmIpAddress");
    if let Some(var_230) = &input.hsm_ip_address {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("HsmPartitionName");
    if let Some(var_232) = &input.hsm_partition_name {
        scope_231.string(var_232);
    }
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("HsmPartitionPassword");
    if let Some(var_234) = &input.hsm_partition_password {
        scope_233.string(var_234);
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("HsmServerPublicCertificate");
    if let Some(var_236) = &input.hsm_server_public_certificate {
        scope_235.string(var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("Tags");
    if let Some(var_238) = &input.tags {
        let mut list_240 = scope_237.start_list(false, Some("Tag"));
        for item_239 in var_238 {
            #[allow(unused_mut)]
            let mut entry_241 = list_240.entry();
            crate::query_ser::serialize_structure_tag(entry_241, item_239);
        }
        list_240.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_scheduled_action(
    input: &crate::input::CreateScheduledActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateScheduledAction", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("ScheduledActionName");
    if let Some(var_243) = &input.scheduled_action_name {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("TargetAction");
    if let Some(var_245) = &input.target_action {
        crate::query_ser::serialize_structure_scheduled_action_type(scope_244, var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("Schedule");
    if let Some(var_247) = &input.schedule {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("IamRole");
    if let Some(var_249) = &input.iam_role {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("ScheduledActionDescription");
    if let Some(var_251) = &input.scheduled_action_description {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("StartTime");
    if let Some(var_253) = &input.start_time {
        scope_252.instant(var_253, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("EndTime");
    if let Some(var_255) = &input.end_time {
        scope_254.instant(var_255, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("Enable");
    if let Some(var_257) = &input.enable {
        scope_256.boolean(*var_257);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_snapshot_copy_grant(
    input: &crate::input::CreateSnapshotCopyGrantInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateSnapshotCopyGrant", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_259) = &input.snapshot_copy_grant_name {
        scope_258.string(var_259);
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("KmsKeyId");
    if let Some(var_261) = &input.kms_key_id {
        scope_260.string(var_261);
    }
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("Tags");
    if let Some(var_263) = &input.tags {
        let mut list_265 = scope_262.start_list(false, Some("Tag"));
        for item_264 in var_263 {
            #[allow(unused_mut)]
            let mut entry_266 = list_265.entry();
            crate::query_ser::serialize_structure_tag(entry_266, item_264);
        }
        list_265.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_snapshot_schedule(
    input: &crate::input::CreateSnapshotScheduleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateSnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("ScheduleDefinitions");
    if let Some(var_268) = &input.schedule_definitions {
        let mut list_270 = scope_267.start_list(false, Some("ScheduleDefinition"));
        for item_269 in var_268 {
            #[allow(unused_mut)]
            let mut entry_271 = list_270.entry();
            entry_271.string(item_269);
        }
        list_270.finish();
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("ScheduleIdentifier");
    if let Some(var_273) = &input.schedule_identifier {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("ScheduleDescription");
    if let Some(var_275) = &input.schedule_description {
        scope_274.string(var_275);
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("Tags");
    if let Some(var_277) = &input.tags {
        let mut list_279 = scope_276.start_list(false, Some("Tag"));
        for item_278 in var_277 {
            #[allow(unused_mut)]
            let mut entry_280 = list_279.entry();
            crate::query_ser::serialize_structure_tag(entry_280, item_278);
        }
        list_279.finish();
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("DryRun");
    if let Some(var_282) = &input.dry_run {
        scope_281.boolean(*var_282);
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("NextInvocations");
    if let Some(var_284) = &input.next_invocations {
        scope_283.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_284).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateTags", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("ResourceName");
    if let Some(var_286) = &input.resource_name {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("Tags");
    if let Some(var_288) = &input.tags {
        let mut list_290 = scope_287.start_list(false, Some("Tag"));
        for item_289 in var_288 {
            #[allow(unused_mut)]
            let mut entry_291 = list_290.entry();
            crate::query_ser::serialize_structure_tag(entry_291, item_289);
        }
        list_290.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_usage_limit(
    input: &crate::input::CreateUsageLimitInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateUsageLimit", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("ClusterIdentifier");
    if let Some(var_293) = &input.cluster_identifier {
        scope_292.string(var_293);
    }
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("FeatureType");
    if let Some(var_295) = &input.feature_type {
        scope_294.string(var_295.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("LimitType");
    if let Some(var_297) = &input.limit_type {
        scope_296.string(var_297.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("Amount");
    {
        scope_298.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.amount).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("Period");
    if let Some(var_300) = &input.period {
        scope_299.string(var_300.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("BreachAction");
    if let Some(var_302) = &input.breach_action {
        scope_301.string(var_302.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("Tags");
    if let Some(var_304) = &input.tags {
        let mut list_306 = scope_303.start_list(false, Some("Tag"));
        for item_305 in var_304 {
            #[allow(unused_mut)]
            let mut entry_307 = list_306.entry();
            crate::query_ser::serialize_structure_tag(entry_307, item_305);
        }
        list_306.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_cluster(
    input: &crate::input::DeleteClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("ClusterIdentifier");
    if let Some(var_309) = &input.cluster_identifier {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("SkipFinalClusterSnapshot");
    if input.skip_final_cluster_snapshot {
        scope_310.boolean(input.skip_final_cluster_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("FinalClusterSnapshotIdentifier");
    if let Some(var_312) = &input.final_cluster_snapshot_identifier {
        scope_311.string(var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("FinalClusterSnapshotRetentionPeriod");
    if let Some(var_314) = &input.final_cluster_snapshot_retention_period {
        scope_313.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_314).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_cluster_parameter_group(
    input: &crate::input::DeleteClusterParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("ParameterGroupName");
    if let Some(var_316) = &input.parameter_group_name {
        scope_315.string(var_316);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_cluster_security_group(
    input: &crate::input::DeleteClusterSecurityGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteClusterSecurityGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_318) = &input.cluster_security_group_name {
        scope_317.string(var_318);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_cluster_snapshot(
    input: &crate::input::DeleteClusterSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("SnapshotIdentifier");
    if let Some(var_320) = &input.snapshot_identifier {
        scope_319.string(var_320);
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_322) = &input.snapshot_cluster_identifier {
        scope_321.string(var_322);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_cluster_subnet_group(
    input: &crate::input::DeleteClusterSubnetGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteClusterSubnetGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_324) = &input.cluster_subnet_group_name {
        scope_323.string(var_324);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_endpoint_access(
    input: &crate::input::DeleteEndpointAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("EndpointName");
    if let Some(var_326) = &input.endpoint_name {
        scope_325.string(var_326);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_event_subscription(
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteEventSubscription", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("SubscriptionName");
    if let Some(var_328) = &input.subscription_name {
        scope_327.string(var_328);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_hsm_client_certificate(
    input: &crate::input::DeleteHsmClientCertificateInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteHsmClientCertificate", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_330) = &input.hsm_client_certificate_identifier {
        scope_329.string(var_330);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_hsm_configuration(
    input: &crate::input::DeleteHsmConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteHsmConfiguration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_332) = &input.hsm_configuration_identifier {
        scope_331.string(var_332);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_partner(
    input: &crate::input::DeletePartnerInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeletePartner", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("AccountId");
    if let Some(var_334) = &input.account_id {
        scope_333.string(var_334);
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("ClusterIdentifier");
    if let Some(var_336) = &input.cluster_identifier {
        scope_335.string(var_336);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("DatabaseName");
    if let Some(var_338) = &input.database_name {
        scope_337.string(var_338);
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("PartnerName");
    if let Some(var_340) = &input.partner_name {
        scope_339.string(var_340);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_scheduled_action(
    input: &crate::input::DeleteScheduledActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteScheduledAction", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("ScheduledActionName");
    if let Some(var_342) = &input.scheduled_action_name {
        scope_341.string(var_342);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_snapshot_copy_grant(
    input: &crate::input::DeleteSnapshotCopyGrantInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteSnapshotCopyGrant", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_344) = &input.snapshot_copy_grant_name {
        scope_343.string(var_344);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_snapshot_schedule(
    input: &crate::input::DeleteSnapshotScheduleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteSnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("ScheduleIdentifier");
    if let Some(var_346) = &input.schedule_identifier {
        scope_345.string(var_346);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("ResourceName");
    if let Some(var_348) = &input.resource_name {
        scope_347.string(var_348);
    }
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("TagKeys");
    if let Some(var_350) = &input.tag_keys {
        let mut list_352 = scope_349.start_list(false, Some("TagKey"));
        for item_351 in var_350 {
            #[allow(unused_mut)]
            let mut entry_353 = list_352.entry();
            entry_353.string(item_351);
        }
        list_352.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_usage_limit(
    input: &crate::input::DeleteUsageLimitInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteUsageLimit", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("UsageLimitId");
    if let Some(var_355) = &input.usage_limit_id {
        scope_354.string(var_355);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("AttributeNames");
    if let Some(var_357) = &input.attribute_names {
        let mut list_359 = scope_356.start_list(false, Some("AttributeName"));
        for item_358 in var_357 {
            #[allow(unused_mut)]
            let mut entry_360 = list_359.entry();
            entry_360.string(item_358);
        }
        list_359.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_cluster_db_revisions(
    input: &crate::input::DescribeClusterDbRevisionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClusterDbRevisions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("ClusterIdentifier");
    if let Some(var_362) = &input.cluster_identifier {
        scope_361.string(var_362);
    }
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("MaxRecords");
    if let Some(var_364) = &input.max_records {
        scope_363.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_364).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("Marker");
    if let Some(var_366) = &input.marker {
        scope_365.string(var_366);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_cluster_parameter_groups(
    input: &crate::input::DescribeClusterParameterGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClusterParameterGroups", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("ParameterGroupName");
    if let Some(var_368) = &input.parameter_group_name {
        scope_367.string(var_368);
    }
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("MaxRecords");
    if let Some(var_370) = &input.max_records {
        scope_369.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_370).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("Marker");
    if let Some(var_372) = &input.marker {
        scope_371.string(var_372);
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("TagKeys");
    if let Some(var_374) = &input.tag_keys {
        let mut list_376 = scope_373.start_list(false, Some("TagKey"));
        for item_375 in var_374 {
            #[allow(unused_mut)]
            let mut entry_377 = list_376.entry();
            entry_377.string(item_375);
        }
        list_376.finish();
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("TagValues");
    if let Some(var_379) = &input.tag_values {
        let mut list_381 = scope_378.start_list(false, Some("TagValue"));
        for item_380 in var_379 {
            #[allow(unused_mut)]
            let mut entry_382 = list_381.entry();
            entry_382.string(item_380);
        }
        list_381.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_cluster_parameters(
    input: &crate::input::DescribeClusterParametersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClusterParameters", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("ParameterGroupName");
    if let Some(var_384) = &input.parameter_group_name {
        scope_383.string(var_384);
    }
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("Source");
    if let Some(var_386) = &input.source {
        scope_385.string(var_386);
    }
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("MaxRecords");
    if let Some(var_388) = &input.max_records {
        scope_387.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_388).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("Marker");
    if let Some(var_390) = &input.marker {
        scope_389.string(var_390);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_clusters(
    input: &crate::input::DescribeClustersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeClusters", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("ClusterIdentifier");
    if let Some(var_392) = &input.cluster_identifier {
        scope_391.string(var_392);
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("MaxRecords");
    if let Some(var_394) = &input.max_records {
        scope_393.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_394).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("Marker");
    if let Some(var_396) = &input.marker {
        scope_395.string(var_396);
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("TagKeys");
    if let Some(var_398) = &input.tag_keys {
        let mut list_400 = scope_397.start_list(false, Some("TagKey"));
        for item_399 in var_398 {
            #[allow(unused_mut)]
            let mut entry_401 = list_400.entry();
            entry_401.string(item_399);
        }
        list_400.finish();
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("TagValues");
    if let Some(var_403) = &input.tag_values {
        let mut list_405 = scope_402.start_list(false, Some("TagValue"));
        for item_404 in var_403 {
            #[allow(unused_mut)]
            let mut entry_406 = list_405.entry();
            entry_406.string(item_404);
        }
        list_405.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_cluster_security_groups(
    input: &crate::input::DescribeClusterSecurityGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClusterSecurityGroups", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_408) = &input.cluster_security_group_name {
        scope_407.string(var_408);
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("MaxRecords");
    if let Some(var_410) = &input.max_records {
        scope_409.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_410).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("Marker");
    if let Some(var_412) = &input.marker {
        scope_411.string(var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("TagKeys");
    if let Some(var_414) = &input.tag_keys {
        let mut list_416 = scope_413.start_list(false, Some("TagKey"));
        for item_415 in var_414 {
            #[allow(unused_mut)]
            let mut entry_417 = list_416.entry();
            entry_417.string(item_415);
        }
        list_416.finish();
    }
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("TagValues");
    if let Some(var_419) = &input.tag_values {
        let mut list_421 = scope_418.start_list(false, Some("TagValue"));
        for item_420 in var_419 {
            #[allow(unused_mut)]
            let mut entry_422 = list_421.entry();
            entry_422.string(item_420);
        }
        list_421.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_cluster_snapshots(
    input: &crate::input::DescribeClusterSnapshotsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("ClusterIdentifier");
    if let Some(var_424) = &input.cluster_identifier {
        scope_423.string(var_424);
    }
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("SnapshotIdentifier");
    if let Some(var_426) = &input.snapshot_identifier {
        scope_425.string(var_426);
    }
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("SnapshotType");
    if let Some(var_428) = &input.snapshot_type {
        scope_427.string(var_428);
    }
    #[allow(unused_mut)]
    let mut scope_429 = writer.prefix("StartTime");
    if let Some(var_430) = &input.start_time {
        scope_429.instant(var_430, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("EndTime");
    if let Some(var_432) = &input.end_time {
        scope_431.instant(var_432, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("MaxRecords");
    if let Some(var_434) = &input.max_records {
        scope_433.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_434).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("Marker");
    if let Some(var_436) = &input.marker {
        scope_435.string(var_436);
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("OwnerAccount");
    if let Some(var_438) = &input.owner_account {
        scope_437.string(var_438);
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("TagKeys");
    if let Some(var_440) = &input.tag_keys {
        let mut list_442 = scope_439.start_list(false, Some("TagKey"));
        for item_441 in var_440 {
            #[allow(unused_mut)]
            let mut entry_443 = list_442.entry();
            entry_443.string(item_441);
        }
        list_442.finish();
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("TagValues");
    if let Some(var_445) = &input.tag_values {
        let mut list_447 = scope_444.start_list(false, Some("TagValue"));
        for item_446 in var_445 {
            #[allow(unused_mut)]
            let mut entry_448 = list_447.entry();
            entry_448.string(item_446);
        }
        list_447.finish();
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("ClusterExists");
    if let Some(var_450) = &input.cluster_exists {
        scope_449.boolean(*var_450);
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("SortingEntities");
    if let Some(var_452) = &input.sorting_entities {
        let mut list_454 = scope_451.start_list(false, Some("SnapshotSortingEntity"));
        for item_453 in var_452 {
            #[allow(unused_mut)]
            let mut entry_455 = list_454.entry();
            crate::query_ser::serialize_structure_snapshot_sorting_entity(entry_455, item_453);
        }
        list_454.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_cluster_subnet_groups(
    input: &crate::input::DescribeClusterSubnetGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClusterSubnetGroups", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_457) = &input.cluster_subnet_group_name {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("MaxRecords");
    if let Some(var_459) = &input.max_records {
        scope_458.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_459).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("Marker");
    if let Some(var_461) = &input.marker {
        scope_460.string(var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("TagKeys");
    if let Some(var_463) = &input.tag_keys {
        let mut list_465 = scope_462.start_list(false, Some("TagKey"));
        for item_464 in var_463 {
            #[allow(unused_mut)]
            let mut entry_466 = list_465.entry();
            entry_466.string(item_464);
        }
        list_465.finish();
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("TagValues");
    if let Some(var_468) = &input.tag_values {
        let mut list_470 = scope_467.start_list(false, Some("TagValue"));
        for item_469 in var_468 {
            #[allow(unused_mut)]
            let mut entry_471 = list_470.entry();
            entry_471.string(item_469);
        }
        list_470.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_cluster_tracks(
    input: &crate::input::DescribeClusterTracksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClusterTracks", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("MaintenanceTrackName");
    if let Some(var_473) = &input.maintenance_track_name {
        scope_472.string(var_473);
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("MaxRecords");
    if let Some(var_475) = &input.max_records {
        scope_474.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_475).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("Marker");
    if let Some(var_477) = &input.marker {
        scope_476.string(var_477);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_cluster_versions(
    input: &crate::input::DescribeClusterVersionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeClusterVersions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("ClusterVersion");
    if let Some(var_479) = &input.cluster_version {
        scope_478.string(var_479);
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("ClusterParameterGroupFamily");
    if let Some(var_481) = &input.cluster_parameter_group_family {
        scope_480.string(var_481);
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("MaxRecords");
    if let Some(var_483) = &input.max_records {
        scope_482.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_483).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("Marker");
    if let Some(var_485) = &input.marker {
        scope_484.string(var_485);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_default_cluster_parameters(
    input: &crate::input::DescribeDefaultClusterParametersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeDefaultClusterParameters", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("ParameterGroupFamily");
    if let Some(var_487) = &input.parameter_group_family {
        scope_486.string(var_487);
    }
    #[allow(unused_mut)]
    let mut scope_488 = writer.prefix("MaxRecords");
    if let Some(var_489) = &input.max_records {
        scope_488.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_489).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("Marker");
    if let Some(var_491) = &input.marker {
        scope_490.string(var_491);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_endpoint_access(
    input: &crate::input::DescribeEndpointAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("ClusterIdentifier");
    if let Some(var_493) = &input.cluster_identifier {
        scope_492.string(var_493);
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("ResourceOwner");
    if let Some(var_495) = &input.resource_owner {
        scope_494.string(var_495);
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("EndpointName");
    if let Some(var_497) = &input.endpoint_name {
        scope_496.string(var_497);
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("VpcId");
    if let Some(var_499) = &input.vpc_id {
        scope_498.string(var_499);
    }
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("MaxRecords");
    if let Some(var_501) = &input.max_records {
        scope_500.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_501).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("Marker");
    if let Some(var_503) = &input.marker {
        scope_502.string(var_503);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_endpoint_authorization(
    input: &crate::input::DescribeEndpointAuthorizationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeEndpointAuthorization", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("ClusterIdentifier");
    if let Some(var_505) = &input.cluster_identifier {
        scope_504.string(var_505);
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("Account");
    if let Some(var_507) = &input.account {
        scope_506.string(var_507);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("Grantee");
    if let Some(var_509) = &input.grantee {
        scope_508.boolean(*var_509);
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("MaxRecords");
    if let Some(var_511) = &input.max_records {
        scope_510.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_511).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("Marker");
    if let Some(var_513) = &input.marker {
        scope_512.string(var_513);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_event_categories(
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeEventCategories", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("SourceType");
    if let Some(var_515) = &input.source_type {
        scope_514.string(var_515);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("SourceIdentifier");
    if let Some(var_517) = &input.source_identifier {
        scope_516.string(var_517);
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("SourceType");
    if let Some(var_519) = &input.source_type {
        scope_518.string(var_519.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("StartTime");
    if let Some(var_521) = &input.start_time {
        scope_520.instant(var_521, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("EndTime");
    if let Some(var_523) = &input.end_time {
        scope_522.instant(var_523, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("Duration");
    if let Some(var_525) = &input.duration {
        scope_524.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_525).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("MaxRecords");
    if let Some(var_527) = &input.max_records {
        scope_526.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_527).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("Marker");
    if let Some(var_529) = &input.marker {
        scope_528.string(var_529);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_event_subscriptions(
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeEventSubscriptions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("SubscriptionName");
    if let Some(var_531) = &input.subscription_name {
        scope_530.string(var_531);
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("MaxRecords");
    if let Some(var_533) = &input.max_records {
        scope_532.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_533).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("Marker");
    if let Some(var_535) = &input.marker {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("TagKeys");
    if let Some(var_537) = &input.tag_keys {
        let mut list_539 = scope_536.start_list(false, Some("TagKey"));
        for item_538 in var_537 {
            #[allow(unused_mut)]
            let mut entry_540 = list_539.entry();
            entry_540.string(item_538);
        }
        list_539.finish();
    }
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("TagValues");
    if let Some(var_542) = &input.tag_values {
        let mut list_544 = scope_541.start_list(false, Some("TagValue"));
        for item_543 in var_542 {
            #[allow(unused_mut)]
            let mut entry_545 = list_544.entry();
            entry_545.string(item_543);
        }
        list_544.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_hsm_client_certificates(
    input: &crate::input::DescribeHsmClientCertificatesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeHsmClientCertificates", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_547) = &input.hsm_client_certificate_identifier {
        scope_546.string(var_547);
    }
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("MaxRecords");
    if let Some(var_549) = &input.max_records {
        scope_548.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_549).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("Marker");
    if let Some(var_551) = &input.marker {
        scope_550.string(var_551);
    }
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("TagKeys");
    if let Some(var_553) = &input.tag_keys {
        let mut list_555 = scope_552.start_list(false, Some("TagKey"));
        for item_554 in var_553 {
            #[allow(unused_mut)]
            let mut entry_556 = list_555.entry();
            entry_556.string(item_554);
        }
        list_555.finish();
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("TagValues");
    if let Some(var_558) = &input.tag_values {
        let mut list_560 = scope_557.start_list(false, Some("TagValue"));
        for item_559 in var_558 {
            #[allow(unused_mut)]
            let mut entry_561 = list_560.entry();
            entry_561.string(item_559);
        }
        list_560.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_hsm_configurations(
    input: &crate::input::DescribeHsmConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeHsmConfigurations", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_563) = &input.hsm_configuration_identifier {
        scope_562.string(var_563);
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("MaxRecords");
    if let Some(var_565) = &input.max_records {
        scope_564.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_565).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("Marker");
    if let Some(var_567) = &input.marker {
        scope_566.string(var_567);
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("TagKeys");
    if let Some(var_569) = &input.tag_keys {
        let mut list_571 = scope_568.start_list(false, Some("TagKey"));
        for item_570 in var_569 {
            #[allow(unused_mut)]
            let mut entry_572 = list_571.entry();
            entry_572.string(item_570);
        }
        list_571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("TagValues");
    if let Some(var_574) = &input.tag_values {
        let mut list_576 = scope_573.start_list(false, Some("TagValue"));
        for item_575 in var_574 {
            #[allow(unused_mut)]
            let mut entry_577 = list_576.entry();
            entry_577.string(item_575);
        }
        list_576.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_logging_status(
    input: &crate::input::DescribeLoggingStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLoggingStatus", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("ClusterIdentifier");
    if let Some(var_579) = &input.cluster_identifier {
        scope_578.string(var_579);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_node_configuration_options(
    input: &crate::input::DescribeNodeConfigurationOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeNodeConfigurationOptions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("ActionType");
    if let Some(var_581) = &input.action_type {
        scope_580.string(var_581.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("ClusterIdentifier");
    if let Some(var_583) = &input.cluster_identifier {
        scope_582.string(var_583);
    }
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("SnapshotIdentifier");
    if let Some(var_585) = &input.snapshot_identifier {
        scope_584.string(var_585);
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("OwnerAccount");
    if let Some(var_587) = &input.owner_account {
        scope_586.string(var_587);
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("Filter");
    if let Some(var_589) = &input.filters {
        let mut list_591 = scope_588.start_list(false, Some("NodeConfigurationOptionsFilter"));
        for item_590 in var_589 {
            #[allow(unused_mut)]
            let mut entry_592 = list_591.entry();
            crate::query_ser::serialize_structure_node_configuration_options_filter(
                entry_592, item_590,
            );
        }
        list_591.finish();
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("Marker");
    if let Some(var_594) = &input.marker {
        scope_593.string(var_594);
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("MaxRecords");
    if let Some(var_596) = &input.max_records {
        scope_595.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_596).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_orderable_cluster_options(
    input: &crate::input::DescribeOrderableClusterOptionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeOrderableClusterOptions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("ClusterVersion");
    if let Some(var_598) = &input.cluster_version {
        scope_597.string(var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("NodeType");
    if let Some(var_600) = &input.node_type {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("MaxRecords");
    if let Some(var_602) = &input.max_records {
        scope_601.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_602).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("Marker");
    if let Some(var_604) = &input.marker {
        scope_603.string(var_604);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_partners(
    input: &crate::input::DescribePartnersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribePartners", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("AccountId");
    if let Some(var_606) = &input.account_id {
        scope_605.string(var_606);
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("ClusterIdentifier");
    if let Some(var_608) = &input.cluster_identifier {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("DatabaseName");
    if let Some(var_610) = &input.database_name {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("PartnerName");
    if let Some(var_612) = &input.partner_name {
        scope_611.string(var_612);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_reserved_node_offerings(
    input: &crate::input::DescribeReservedNodeOfferingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReservedNodeOfferings", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("ReservedNodeOfferingId");
    if let Some(var_614) = &input.reserved_node_offering_id {
        scope_613.string(var_614);
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("MaxRecords");
    if let Some(var_616) = &input.max_records {
        scope_615.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_616).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_617 = writer.prefix("Marker");
    if let Some(var_618) = &input.marker {
        scope_617.string(var_618);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_reserved_nodes(
    input: &crate::input::DescribeReservedNodesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeReservedNodes", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("ReservedNodeId");
    if let Some(var_620) = &input.reserved_node_id {
        scope_619.string(var_620);
    }
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("MaxRecords");
    if let Some(var_622) = &input.max_records {
        scope_621.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_622).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("Marker");
    if let Some(var_624) = &input.marker {
        scope_623.string(var_624);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_resize(
    input: &crate::input::DescribeResizeInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeResize", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("ClusterIdentifier");
    if let Some(var_626) = &input.cluster_identifier {
        scope_625.string(var_626);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_scheduled_actions(
    input: &crate::input::DescribeScheduledActionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeScheduledActions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("ScheduledActionName");
    if let Some(var_628) = &input.scheduled_action_name {
        scope_627.string(var_628);
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("TargetActionType");
    if let Some(var_630) = &input.target_action_type {
        scope_629.string(var_630.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("StartTime");
    if let Some(var_632) = &input.start_time {
        scope_631.instant(var_632, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("EndTime");
    if let Some(var_634) = &input.end_time {
        scope_633.instant(var_634, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("Active");
    if let Some(var_636) = &input.active {
        scope_635.boolean(*var_636);
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("Filters");
    if let Some(var_638) = &input.filters {
        let mut list_640 = scope_637.start_list(false, Some("ScheduledActionFilter"));
        for item_639 in var_638 {
            #[allow(unused_mut)]
            let mut entry_641 = list_640.entry();
            crate::query_ser::serialize_structure_scheduled_action_filter(entry_641, item_639);
        }
        list_640.finish();
    }
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("Marker");
    if let Some(var_643) = &input.marker {
        scope_642.string(var_643);
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("MaxRecords");
    if let Some(var_645) = &input.max_records {
        scope_644.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_645).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_snapshot_copy_grants(
    input: &crate::input::DescribeSnapshotCopyGrantsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotCopyGrants", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_647) = &input.snapshot_copy_grant_name {
        scope_646.string(var_647);
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("MaxRecords");
    if let Some(var_649) = &input.max_records {
        scope_648.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_649).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("Marker");
    if let Some(var_651) = &input.marker {
        scope_650.string(var_651);
    }
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("TagKeys");
    if let Some(var_653) = &input.tag_keys {
        let mut list_655 = scope_652.start_list(false, Some("TagKey"));
        for item_654 in var_653 {
            #[allow(unused_mut)]
            let mut entry_656 = list_655.entry();
            entry_656.string(item_654);
        }
        list_655.finish();
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("TagValues");
    if let Some(var_658) = &input.tag_values {
        let mut list_660 = scope_657.start_list(false, Some("TagValue"));
        for item_659 in var_658 {
            #[allow(unused_mut)]
            let mut entry_661 = list_660.entry();
            entry_661.string(item_659);
        }
        list_660.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_snapshot_schedules(
    input: &crate::input::DescribeSnapshotSchedulesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotSchedules", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_662 = writer.prefix("ClusterIdentifier");
    if let Some(var_663) = &input.cluster_identifier {
        scope_662.string(var_663);
    }
    #[allow(unused_mut)]
    let mut scope_664 = writer.prefix("ScheduleIdentifier");
    if let Some(var_665) = &input.schedule_identifier {
        scope_664.string(var_665);
    }
    #[allow(unused_mut)]
    let mut scope_666 = writer.prefix("TagKeys");
    if let Some(var_667) = &input.tag_keys {
        let mut list_669 = scope_666.start_list(false, Some("TagKey"));
        for item_668 in var_667 {
            #[allow(unused_mut)]
            let mut entry_670 = list_669.entry();
            entry_670.string(item_668);
        }
        list_669.finish();
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("TagValues");
    if let Some(var_672) = &input.tag_values {
        let mut list_674 = scope_671.start_list(false, Some("TagValue"));
        for item_673 in var_672 {
            #[allow(unused_mut)]
            let mut entry_675 = list_674.entry();
            entry_675.string(item_673);
        }
        list_674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("Marker");
    if let Some(var_677) = &input.marker {
        scope_676.string(var_677);
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("MaxRecords");
    if let Some(var_679) = &input.max_records {
        scope_678.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_679).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_storage(
    input: &crate::input::DescribeStorageInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeStorage", "2012-12-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_table_restore_status(
    input: &crate::input::DescribeTableRestoreStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTableRestoreStatus", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("ClusterIdentifier");
    if let Some(var_681) = &input.cluster_identifier {
        scope_680.string(var_681);
    }
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("TableRestoreRequestId");
    if let Some(var_683) = &input.table_restore_request_id {
        scope_682.string(var_683);
    }
    #[allow(unused_mut)]
    let mut scope_684 = writer.prefix("MaxRecords");
    if let Some(var_685) = &input.max_records {
        scope_684.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_685).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_686 = writer.prefix("Marker");
    if let Some(var_687) = &input.marker {
        scope_686.string(var_687);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("ResourceName");
    if let Some(var_689) = &input.resource_name {
        scope_688.string(var_689);
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("ResourceType");
    if let Some(var_691) = &input.resource_type {
        scope_690.string(var_691);
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("MaxRecords");
    if let Some(var_693) = &input.max_records {
        scope_692.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_693).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("Marker");
    if let Some(var_695) = &input.marker {
        scope_694.string(var_695);
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("TagKeys");
    if let Some(var_697) = &input.tag_keys {
        let mut list_699 = scope_696.start_list(false, Some("TagKey"));
        for item_698 in var_697 {
            #[allow(unused_mut)]
            let mut entry_700 = list_699.entry();
            entry_700.string(item_698);
        }
        list_699.finish();
    }
    #[allow(unused_mut)]
    let mut scope_701 = writer.prefix("TagValues");
    if let Some(var_702) = &input.tag_values {
        let mut list_704 = scope_701.start_list(false, Some("TagValue"));
        for item_703 in var_702 {
            #[allow(unused_mut)]
            let mut entry_705 = list_704.entry();
            entry_705.string(item_703);
        }
        list_704.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_describe_usage_limits(
    input: &crate::input::DescribeUsageLimitsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeUsageLimits", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("UsageLimitId");
    if let Some(var_707) = &input.usage_limit_id {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("ClusterIdentifier");
    if let Some(var_709) = &input.cluster_identifier {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("FeatureType");
    if let Some(var_711) = &input.feature_type {
        scope_710.string(var_711.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("MaxRecords");
    if let Some(var_713) = &input.max_records {
        scope_712.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_713).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("Marker");
    if let Some(var_715) = &input.marker {
        scope_714.string(var_715);
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("TagKeys");
    if let Some(var_717) = &input.tag_keys {
        let mut list_719 = scope_716.start_list(false, Some("TagKey"));
        for item_718 in var_717 {
            #[allow(unused_mut)]
            let mut entry_720 = list_719.entry();
            entry_720.string(item_718);
        }
        list_719.finish();
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("TagValues");
    if let Some(var_722) = &input.tag_values {
        let mut list_724 = scope_721.start_list(false, Some("TagValue"));
        for item_723 in var_722 {
            #[allow(unused_mut)]
            let mut entry_725 = list_724.entry();
            entry_725.string(item_723);
        }
        list_724.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_logging(
    input: &crate::input::DisableLoggingInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DisableLogging", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("ClusterIdentifier");
    if let Some(var_727) = &input.cluster_identifier {
        scope_726.string(var_727);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_disable_snapshot_copy(
    input: &crate::input::DisableSnapshotCopyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DisableSnapshotCopy", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("ClusterIdentifier");
    if let Some(var_729) = &input.cluster_identifier {
        scope_728.string(var_729);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_logging(
    input: &crate::input::EnableLoggingInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EnableLogging", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("ClusterIdentifier");
    if let Some(var_731) = &input.cluster_identifier {
        scope_730.string(var_731);
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("BucketName");
    if let Some(var_733) = &input.bucket_name {
        scope_732.string(var_733);
    }
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("S3KeyPrefix");
    if let Some(var_735) = &input.s3_key_prefix {
        scope_734.string(var_735);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_enable_snapshot_copy(
    input: &crate::input::EnableSnapshotCopyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EnableSnapshotCopy", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("ClusterIdentifier");
    if let Some(var_737) = &input.cluster_identifier {
        scope_736.string(var_737);
    }
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("DestinationRegion");
    if let Some(var_739) = &input.destination_region {
        scope_738.string(var_739);
    }
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("RetentionPeriod");
    if let Some(var_741) = &input.retention_period {
        scope_740.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_741).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_743) = &input.snapshot_copy_grant_name {
        scope_742.string(var_743);
    }
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_745) = &input.manual_snapshot_retention_period {
        scope_744.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_745).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_cluster_credentials(
    input: &crate::input::GetClusterCredentialsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetClusterCredentials", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("DbUser");
    if let Some(var_747) = &input.db_user {
        scope_746.string(var_747);
    }
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("DbName");
    if let Some(var_749) = &input.db_name {
        scope_748.string(var_749);
    }
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("ClusterIdentifier");
    if let Some(var_751) = &input.cluster_identifier {
        scope_750.string(var_751);
    }
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("DurationSeconds");
    if let Some(var_753) = &input.duration_seconds {
        scope_752.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_753).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("AutoCreate");
    if let Some(var_755) = &input.auto_create {
        scope_754.boolean(*var_755);
    }
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("DbGroups");
    if let Some(var_757) = &input.db_groups {
        let mut list_759 = scope_756.start_list(false, Some("DbGroup"));
        for item_758 in var_757 {
            #[allow(unused_mut)]
            let mut entry_760 = list_759.entry();
            entry_760.string(item_758);
        }
        list_759.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_reserved_node_exchange_offerings(
    input: &crate::input::GetReservedNodeExchangeOfferingsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetReservedNodeExchangeOfferings", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("ReservedNodeId");
    if let Some(var_762) = &input.reserved_node_id {
        scope_761.string(var_762);
    }
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("MaxRecords");
    if let Some(var_764) = &input.max_records {
        scope_763.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_764).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("Marker");
    if let Some(var_766) = &input.marker {
        scope_765.string(var_766);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_aqua_configuration(
    input: &crate::input::ModifyAquaConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyAquaConfiguration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("ClusterIdentifier");
    if let Some(var_768) = &input.cluster_identifier {
        scope_767.string(var_768);
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_770) = &input.aqua_configuration_status {
        scope_769.string(var_770.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_cluster(
    input: &crate::input::ModifyClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_771 = writer.prefix("ClusterIdentifier");
    if let Some(var_772) = &input.cluster_identifier {
        scope_771.string(var_772);
    }
    #[allow(unused_mut)]
    let mut scope_773 = writer.prefix("ClusterType");
    if let Some(var_774) = &input.cluster_type {
        scope_773.string(var_774);
    }
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("NodeType");
    if let Some(var_776) = &input.node_type {
        scope_775.string(var_776);
    }
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("NumberOfNodes");
    if let Some(var_778) = &input.number_of_nodes {
        scope_777.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_778).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_780) = &input.cluster_security_groups {
        let mut list_782 = scope_779.start_list(false, Some("ClusterSecurityGroupName"));
        for item_781 in var_780 {
            #[allow(unused_mut)]
            let mut entry_783 = list_782.entry();
            entry_783.string(item_781);
        }
        list_782.finish();
    }
    #[allow(unused_mut)]
    let mut scope_784 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_785) = &input.vpc_security_group_ids {
        let mut list_787 = scope_784.start_list(false, Some("VpcSecurityGroupId"));
        for item_786 in var_785 {
            #[allow(unused_mut)]
            let mut entry_788 = list_787.entry();
            entry_788.string(item_786);
        }
        list_787.finish();
    }
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("MasterUserPassword");
    if let Some(var_790) = &input.master_user_password {
        scope_789.string(var_790);
    }
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_792) = &input.cluster_parameter_group_name {
        scope_791.string(var_792);
    }
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_794) = &input.automated_snapshot_retention_period {
        scope_793.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_794).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_796) = &input.manual_snapshot_retention_period {
        scope_795.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_796).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_797 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_798) = &input.preferred_maintenance_window {
        scope_797.string(var_798);
    }
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("ClusterVersion");
    if let Some(var_800) = &input.cluster_version {
        scope_799.string(var_800);
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_802) = &input.allow_version_upgrade {
        scope_801.boolean(*var_802);
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_804) = &input.hsm_client_certificate_identifier {
        scope_803.string(var_804);
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_806) = &input.hsm_configuration_identifier {
        scope_805.string(var_806);
    }
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("NewClusterIdentifier");
    if let Some(var_808) = &input.new_cluster_identifier {
        scope_807.string(var_808);
    }
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("PubliclyAccessible");
    if let Some(var_810) = &input.publicly_accessible {
        scope_809.boolean(*var_810);
    }
    #[allow(unused_mut)]
    let mut scope_811 = writer.prefix("ElasticIp");
    if let Some(var_812) = &input.elastic_ip {
        scope_811.string(var_812);
    }
    #[allow(unused_mut)]
    let mut scope_813 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_814) = &input.enhanced_vpc_routing {
        scope_813.boolean(*var_814);
    }
    #[allow(unused_mut)]
    let mut scope_815 = writer.prefix("MaintenanceTrackName");
    if let Some(var_816) = &input.maintenance_track_name {
        scope_815.string(var_816);
    }
    #[allow(unused_mut)]
    let mut scope_817 = writer.prefix("Encrypted");
    if let Some(var_818) = &input.encrypted {
        scope_817.boolean(*var_818);
    }
    #[allow(unused_mut)]
    let mut scope_819 = writer.prefix("KmsKeyId");
    if let Some(var_820) = &input.kms_key_id {
        scope_819.string(var_820);
    }
    #[allow(unused_mut)]
    let mut scope_821 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_822) = &input.availability_zone_relocation {
        scope_821.boolean(*var_822);
    }
    #[allow(unused_mut)]
    let mut scope_823 = writer.prefix("AvailabilityZone");
    if let Some(var_824) = &input.availability_zone {
        scope_823.string(var_824);
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("Port");
    if let Some(var_826) = &input.port {
        scope_825.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_826).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_cluster_db_revision(
    input: &crate::input::ModifyClusterDbRevisionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyClusterDbRevision", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_827 = writer.prefix("ClusterIdentifier");
    if let Some(var_828) = &input.cluster_identifier {
        scope_827.string(var_828);
    }
    #[allow(unused_mut)]
    let mut scope_829 = writer.prefix("RevisionTarget");
    if let Some(var_830) = &input.revision_target {
        scope_829.string(var_830);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_cluster_iam_roles(
    input: &crate::input::ModifyClusterIamRolesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyClusterIamRoles", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_831 = writer.prefix("ClusterIdentifier");
    if let Some(var_832) = &input.cluster_identifier {
        scope_831.string(var_832);
    }
    #[allow(unused_mut)]
    let mut scope_833 = writer.prefix("AddIamRoles");
    if let Some(var_834) = &input.add_iam_roles {
        let mut list_836 = scope_833.start_list(false, Some("IamRoleArn"));
        for item_835 in var_834 {
            #[allow(unused_mut)]
            let mut entry_837 = list_836.entry();
            entry_837.string(item_835);
        }
        list_836.finish();
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("RemoveIamRoles");
    if let Some(var_839) = &input.remove_iam_roles {
        let mut list_841 = scope_838.start_list(false, Some("IamRoleArn"));
        for item_840 in var_839 {
            #[allow(unused_mut)]
            let mut entry_842 = list_841.entry();
            entry_842.string(item_840);
        }
        list_841.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_cluster_maintenance(
    input: &crate::input::ModifyClusterMaintenanceInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyClusterMaintenance", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_843 = writer.prefix("ClusterIdentifier");
    if let Some(var_844) = &input.cluster_identifier {
        scope_843.string(var_844);
    }
    #[allow(unused_mut)]
    let mut scope_845 = writer.prefix("DeferMaintenance");
    if let Some(var_846) = &input.defer_maintenance {
        scope_845.boolean(*var_846);
    }
    #[allow(unused_mut)]
    let mut scope_847 = writer.prefix("DeferMaintenanceIdentifier");
    if let Some(var_848) = &input.defer_maintenance_identifier {
        scope_847.string(var_848);
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("DeferMaintenanceStartTime");
    if let Some(var_850) = &input.defer_maintenance_start_time {
        scope_849.instant(var_850, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("DeferMaintenanceEndTime");
    if let Some(var_852) = &input.defer_maintenance_end_time {
        scope_851.instant(var_852, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("DeferMaintenanceDuration");
    if let Some(var_854) = &input.defer_maintenance_duration {
        scope_853.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_854).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_cluster_parameter_group(
    input: &crate::input::ModifyClusterParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("ParameterGroupName");
    if let Some(var_856) = &input.parameter_group_name {
        scope_855.string(var_856);
    }
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("Parameters");
    if let Some(var_858) = &input.parameters {
        let mut list_860 = scope_857.start_list(false, Some("Parameter"));
        for item_859 in var_858 {
            #[allow(unused_mut)]
            let mut entry_861 = list_860.entry();
            crate::query_ser::serialize_structure_parameter(entry_861, item_859);
        }
        list_860.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_cluster_snapshot(
    input: &crate::input::ModifyClusterSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("SnapshotIdentifier");
    if let Some(var_863) = &input.snapshot_identifier {
        scope_862.string(var_863);
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_865) = &input.manual_snapshot_retention_period {
        scope_864.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_865).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("Force");
    if input.force {
        scope_866.boolean(input.force);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_cluster_snapshot_schedule(
    input: &crate::input::ModifyClusterSnapshotScheduleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyClusterSnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_867 = writer.prefix("ClusterIdentifier");
    if let Some(var_868) = &input.cluster_identifier {
        scope_867.string(var_868);
    }
    #[allow(unused_mut)]
    let mut scope_869 = writer.prefix("ScheduleIdentifier");
    if let Some(var_870) = &input.schedule_identifier {
        scope_869.string(var_870);
    }
    #[allow(unused_mut)]
    let mut scope_871 = writer.prefix("DisassociateSchedule");
    if let Some(var_872) = &input.disassociate_schedule {
        scope_871.boolean(*var_872);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_cluster_subnet_group(
    input: &crate::input::ModifyClusterSubnetGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyClusterSubnetGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_873 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_874) = &input.cluster_subnet_group_name {
        scope_873.string(var_874);
    }
    #[allow(unused_mut)]
    let mut scope_875 = writer.prefix("Description");
    if let Some(var_876) = &input.description {
        scope_875.string(var_876);
    }
    #[allow(unused_mut)]
    let mut scope_877 = writer.prefix("SubnetIds");
    if let Some(var_878) = &input.subnet_ids {
        let mut list_880 = scope_877.start_list(false, Some("SubnetIdentifier"));
        for item_879 in var_878 {
            #[allow(unused_mut)]
            let mut entry_881 = list_880.entry();
            entry_881.string(item_879);
        }
        list_880.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_endpoint_access(
    input: &crate::input::ModifyEndpointAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("EndpointName");
    if let Some(var_883) = &input.endpoint_name {
        scope_882.string(var_883);
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_885) = &input.vpc_security_group_ids {
        let mut list_887 = scope_884.start_list(false, Some("VpcSecurityGroupId"));
        for item_886 in var_885 {
            #[allow(unused_mut)]
            let mut entry_888 = list_887.entry();
            entry_888.string(item_886);
        }
        list_887.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_event_subscription(
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyEventSubscription", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("SubscriptionName");
    if let Some(var_890) = &input.subscription_name {
        scope_889.string(var_890);
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("SnsTopicArn");
    if let Some(var_892) = &input.sns_topic_arn {
        scope_891.string(var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("SourceType");
    if let Some(var_894) = &input.source_type {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("SourceIds");
    if let Some(var_896) = &input.source_ids {
        let mut list_898 = scope_895.start_list(false, Some("SourceId"));
        for item_897 in var_896 {
            #[allow(unused_mut)]
            let mut entry_899 = list_898.entry();
            entry_899.string(item_897);
        }
        list_898.finish();
    }
    #[allow(unused_mut)]
    let mut scope_900 = writer.prefix("EventCategories");
    if let Some(var_901) = &input.event_categories {
        let mut list_903 = scope_900.start_list(false, Some("EventCategory"));
        for item_902 in var_901 {
            #[allow(unused_mut)]
            let mut entry_904 = list_903.entry();
            entry_904.string(item_902);
        }
        list_903.finish();
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("Severity");
    if let Some(var_906) = &input.severity {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("Enabled");
    if let Some(var_908) = &input.enabled {
        scope_907.boolean(*var_908);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_scheduled_action(
    input: &crate::input::ModifyScheduledActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifyScheduledAction", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("ScheduledActionName");
    if let Some(var_910) = &input.scheduled_action_name {
        scope_909.string(var_910);
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("TargetAction");
    if let Some(var_912) = &input.target_action {
        crate::query_ser::serialize_structure_scheduled_action_type(scope_911, var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("Schedule");
    if let Some(var_914) = &input.schedule {
        scope_913.string(var_914);
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("IamRole");
    if let Some(var_916) = &input.iam_role {
        scope_915.string(var_916);
    }
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("ScheduledActionDescription");
    if let Some(var_918) = &input.scheduled_action_description {
        scope_917.string(var_918);
    }
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("StartTime");
    if let Some(var_920) = &input.start_time {
        scope_919.instant(var_920, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_921 = writer.prefix("EndTime");
    if let Some(var_922) = &input.end_time {
        scope_921.instant(var_922, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_923 = writer.prefix("Enable");
    if let Some(var_924) = &input.enable {
        scope_923.boolean(*var_924);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_snapshot_copy_retention_period(
    input: &crate::input::ModifySnapshotCopyRetentionPeriodInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySnapshotCopyRetentionPeriod", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("ClusterIdentifier");
    if let Some(var_926) = &input.cluster_identifier {
        scope_925.string(var_926);
    }
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("RetentionPeriod");
    {
        scope_927.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.retention_period).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_928 = writer.prefix("Manual");
    if input.manual {
        scope_928.boolean(input.manual);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_snapshot_schedule(
    input: &crate::input::ModifySnapshotScheduleInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ModifySnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("ScheduleIdentifier");
    if let Some(var_930) = &input.schedule_identifier {
        scope_929.string(var_930);
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("ScheduleDefinitions");
    if let Some(var_932) = &input.schedule_definitions {
        let mut list_934 = scope_931.start_list(false, Some("ScheduleDefinition"));
        for item_933 in var_932 {
            #[allow(unused_mut)]
            let mut entry_935 = list_934.entry();
            entry_935.string(item_933);
        }
        list_934.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_modify_usage_limit(
    input: &crate::input::ModifyUsageLimitInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ModifyUsageLimit", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("UsageLimitId");
    if let Some(var_937) = &input.usage_limit_id {
        scope_936.string(var_937);
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("Amount");
    if let Some(var_939) = &input.amount {
        scope_938.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_939).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("BreachAction");
    if let Some(var_941) = &input.breach_action {
        scope_940.string(var_941.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_pause_cluster(
    input: &crate::input::PauseClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "PauseCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("ClusterIdentifier");
    if let Some(var_943) = &input.cluster_identifier {
        scope_942.string(var_943);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_purchase_reserved_node_offering(
    input: &crate::input::PurchaseReservedNodeOfferingInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PurchaseReservedNodeOffering", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("ReservedNodeOfferingId");
    if let Some(var_945) = &input.reserved_node_offering_id {
        scope_944.string(var_945);
    }
    #[allow(unused_mut)]
    let mut scope_946 = writer.prefix("NodeCount");
    if let Some(var_947) = &input.node_count {
        scope_946.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_947).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reboot_cluster(
    input: &crate::input::RebootClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RebootCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_948 = writer.prefix("ClusterIdentifier");
    if let Some(var_949) = &input.cluster_identifier {
        scope_948.string(var_949);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_reset_cluster_parameter_group(
    input: &crate::input::ResetClusterParameterGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ResetClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_950 = writer.prefix("ParameterGroupName");
    if let Some(var_951) = &input.parameter_group_name {
        scope_950.string(var_951);
    }
    #[allow(unused_mut)]
    let mut scope_952 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_952.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("Parameters");
    if let Some(var_954) = &input.parameters {
        let mut list_956 = scope_953.start_list(false, Some("Parameter"));
        for item_955 in var_954 {
            #[allow(unused_mut)]
            let mut entry_957 = list_956.entry();
            crate::query_ser::serialize_structure_parameter(entry_957, item_955);
        }
        list_956.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_resize_cluster(
    input: &crate::input::ResizeClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ResizeCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("ClusterIdentifier");
    if let Some(var_959) = &input.cluster_identifier {
        scope_958.string(var_959);
    }
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("ClusterType");
    if let Some(var_961) = &input.cluster_type {
        scope_960.string(var_961);
    }
    #[allow(unused_mut)]
    let mut scope_962 = writer.prefix("NodeType");
    if let Some(var_963) = &input.node_type {
        scope_962.string(var_963);
    }
    #[allow(unused_mut)]
    let mut scope_964 = writer.prefix("NumberOfNodes");
    if let Some(var_965) = &input.number_of_nodes {
        scope_964.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_965).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("Classic");
    if let Some(var_967) = &input.classic {
        scope_966.boolean(*var_967);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_restore_from_cluster_snapshot(
    input: &crate::input::RestoreFromClusterSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RestoreFromClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("ClusterIdentifier");
    if let Some(var_969) = &input.cluster_identifier {
        scope_968.string(var_969);
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("SnapshotIdentifier");
    if let Some(var_971) = &input.snapshot_identifier {
        scope_970.string(var_971);
    }
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_973) = &input.snapshot_cluster_identifier {
        scope_972.string(var_973);
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("Port");
    if let Some(var_975) = &input.port {
        scope_974.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_975).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("AvailabilityZone");
    if let Some(var_977) = &input.availability_zone {
        scope_976.string(var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_979) = &input.allow_version_upgrade {
        scope_978.boolean(*var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_981) = &input.cluster_subnet_group_name {
        scope_980.string(var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("PubliclyAccessible");
    if let Some(var_983) = &input.publicly_accessible {
        scope_982.boolean(*var_983);
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("OwnerAccount");
    if let Some(var_985) = &input.owner_account {
        scope_984.string(var_985);
    }
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_987) = &input.hsm_client_certificate_identifier {
        scope_986.string(var_987);
    }
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_989) = &input.hsm_configuration_identifier {
        scope_988.string(var_989);
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("ElasticIp");
    if let Some(var_991) = &input.elastic_ip {
        scope_990.string(var_991);
    }
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_993) = &input.cluster_parameter_group_name {
        scope_992.string(var_993);
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_995) = &input.cluster_security_groups {
        let mut list_997 = scope_994.start_list(false, Some("ClusterSecurityGroupName"));
        for item_996 in var_995 {
            #[allow(unused_mut)]
            let mut entry_998 = list_997.entry();
            entry_998.string(item_996);
        }
        list_997.finish();
    }
    #[allow(unused_mut)]
    let mut scope_999 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1000) = &input.vpc_security_group_ids {
        let mut list_1002 = scope_999.start_list(false, Some("VpcSecurityGroupId"));
        for item_1001 in var_1000 {
            #[allow(unused_mut)]
            let mut entry_1003 = list_1002.entry();
            entry_1003.string(item_1001);
        }
        list_1002.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1005) = &input.preferred_maintenance_window {
        scope_1004.string(var_1005);
    }
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_1007) = &input.automated_snapshot_retention_period {
        scope_1006.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1007).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_1009) = &input.manual_snapshot_retention_period {
        scope_1008.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1009).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("KmsKeyId");
    if let Some(var_1011) = &input.kms_key_id {
        scope_1010.string(var_1011);
    }
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("NodeType");
    if let Some(var_1013) = &input.node_type {
        scope_1012.string(var_1013);
    }
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_1015) = &input.enhanced_vpc_routing {
        scope_1014.boolean(*var_1015);
    }
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("AdditionalInfo");
    if let Some(var_1017) = &input.additional_info {
        scope_1016.string(var_1017);
    }
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("IamRoles");
    if let Some(var_1019) = &input.iam_roles {
        let mut list_1021 = scope_1018.start_list(false, Some("IamRoleArn"));
        for item_1020 in var_1019 {
            #[allow(unused_mut)]
            let mut entry_1022 = list_1021.entry();
            entry_1022.string(item_1020);
        }
        list_1021.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("MaintenanceTrackName");
    if let Some(var_1024) = &input.maintenance_track_name {
        scope_1023.string(var_1024);
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("SnapshotScheduleIdentifier");
    if let Some(var_1026) = &input.snapshot_schedule_identifier {
        scope_1025.string(var_1026);
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("NumberOfNodes");
    if let Some(var_1028) = &input.number_of_nodes {
        scope_1027.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1028).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_1030) = &input.availability_zone_relocation {
        scope_1029.boolean(*var_1030);
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_1032) = &input.aqua_configuration_status {
        scope_1031.string(var_1032.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_restore_table_from_cluster_snapshot(
    input: &crate::input::RestoreTableFromClusterSnapshotInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RestoreTableFromClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("ClusterIdentifier");
    if let Some(var_1034) = &input.cluster_identifier {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1036) = &input.snapshot_identifier {
        scope_1035.string(var_1036);
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("SourceDatabaseName");
    if let Some(var_1038) = &input.source_database_name {
        scope_1037.string(var_1038);
    }
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("SourceSchemaName");
    if let Some(var_1040) = &input.source_schema_name {
        scope_1039.string(var_1040);
    }
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("SourceTableName");
    if let Some(var_1042) = &input.source_table_name {
        scope_1041.string(var_1042);
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("TargetDatabaseName");
    if let Some(var_1044) = &input.target_database_name {
        scope_1043.string(var_1044);
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("TargetSchemaName");
    if let Some(var_1046) = &input.target_schema_name {
        scope_1045.string(var_1046);
    }
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("NewTableName");
    if let Some(var_1048) = &input.new_table_name {
        scope_1047.string(var_1048);
    }
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("EnableCaseSensitiveIdentifier");
    if let Some(var_1050) = &input.enable_case_sensitive_identifier {
        scope_1049.boolean(*var_1050);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_resume_cluster(
    input: &crate::input::ResumeClusterInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ResumeCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("ClusterIdentifier");
    if let Some(var_1052) = &input.cluster_identifier {
        scope_1051.string(var_1052);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_revoke_cluster_security_group_ingress(
    input: &crate::input::RevokeClusterSecurityGroupIngressInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RevokeClusterSecurityGroupIngress", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_1054) = &input.cluster_security_group_name {
        scope_1053.string(var_1054);
    }
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("CIDRIP");
    if let Some(var_1056) = &input.cidrip {
        scope_1055.string(var_1056);
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_1058) = &input.ec2_security_group_name {
        scope_1057.string(var_1058);
    }
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_1060) = &input.ec2_security_group_owner_id {
        scope_1059.string(var_1060);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_revoke_endpoint_access(
    input: &crate::input::RevokeEndpointAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RevokeEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("ClusterIdentifier");
    if let Some(var_1062) = &input.cluster_identifier {
        scope_1061.string(var_1062);
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("Account");
    if let Some(var_1064) = &input.account {
        scope_1063.string(var_1064);
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("VpcIds");
    if let Some(var_1066) = &input.vpc_ids {
        let mut list_1068 = scope_1065.start_list(false, Some("VpcIdentifier"));
        for item_1067 in var_1066 {
            #[allow(unused_mut)]
            let mut entry_1069 = list_1068.entry();
            entry_1069.string(item_1067);
        }
        list_1068.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("Force");
    if input.force {
        scope_1070.boolean(input.force);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_revoke_snapshot_access(
    input: &crate::input::RevokeSnapshotAccessInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RevokeSnapshotAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1072) = &input.snapshot_identifier {
        scope_1071.string(var_1072);
    }
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_1074) = &input.snapshot_cluster_identifier {
        scope_1073.string(var_1074);
    }
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("AccountWithRestoreAccess");
    if let Some(var_1076) = &input.account_with_restore_access {
        scope_1075.string(var_1076);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_rotate_encryption_key(
    input: &crate::input::RotateEncryptionKeyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RotateEncryptionKey", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("ClusterIdentifier");
    if let Some(var_1078) = &input.cluster_identifier {
        scope_1077.string(var_1078);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_update_partner_status(
    input: &crate::input::UpdatePartnerStatusInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UpdatePartnerStatus", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("AccountId");
    if let Some(var_1080) = &input.account_id {
        scope_1079.string(var_1080);
    }
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("ClusterIdentifier");
    if let Some(var_1082) = &input.cluster_identifier {
        scope_1081.string(var_1082);
    }
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("DatabaseName");
    if let Some(var_1084) = &input.database_name {
        scope_1083.string(var_1084);
    }
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("PartnerName");
    if let Some(var_1086) = &input.partner_name {
        scope_1085.string(var_1086);
    }
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("Status");
    if let Some(var_1088) = &input.status {
        scope_1087.string(var_1088.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("StatusMessage");
    if let Some(var_1090) = &input.status_message {
        scope_1089.string(var_1090);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}
