// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Lens upgrade summary return object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LensUpgradeSummary {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    #[doc(hidden)]
    pub workload_name: std::option::Option<std::string::String>,
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    #[doc(hidden)]
    pub lens_alias: std::option::Option<std::string::String>,
    /// <p>The ARN for the lens.</p>
    #[doc(hidden)]
    pub lens_arn: std::option::Option<std::string::String>,
    /// <p>The current version of the lens.</p>
    #[doc(hidden)]
    pub current_lens_version: std::option::Option<std::string::String>,
    /// <p>The latest version of the lens.</p>
    #[doc(hidden)]
    pub latest_lens_version: std::option::Option<std::string::String>,
}
impl LensUpgradeSummary {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn workload_name(&self) -> std::option::Option<&str> {
        self.workload_name.as_deref()
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(&self) -> std::option::Option<&str> {
        self.lens_alias.as_deref()
    }
    /// <p>The ARN for the lens.</p>
    pub fn lens_arn(&self) -> std::option::Option<&str> {
        self.lens_arn.as_deref()
    }
    /// <p>The current version of the lens.</p>
    pub fn current_lens_version(&self) -> std::option::Option<&str> {
        self.current_lens_version.as_deref()
    }
    /// <p>The latest version of the lens.</p>
    pub fn latest_lens_version(&self) -> std::option::Option<&str> {
        self.latest_lens_version.as_deref()
    }
}
impl LensUpgradeSummary {
    /// Creates a new builder-style object to manufacture [`LensUpgradeSummary`](crate::types::LensUpgradeSummary).
    pub fn builder() -> crate::types::builders::LensUpgradeSummaryBuilder {
        crate::types::builders::LensUpgradeSummaryBuilder::default()
    }
}

/// A builder for [`LensUpgradeSummary`](crate::types::LensUpgradeSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LensUpgradeSummaryBuilder {
    pub(crate) workload_id: std::option::Option<std::string::String>,
    pub(crate) workload_name: std::option::Option<std::string::String>,
    pub(crate) lens_alias: std::option::Option<std::string::String>,
    pub(crate) lens_arn: std::option::Option<std::string::String>,
    pub(crate) current_lens_version: std::option::Option<std::string::String>,
    pub(crate) latest_lens_version: std::option::Option<std::string::String>,
}
impl LensUpgradeSummaryBuilder {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workload_id = Some(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workload_id = input;
        self
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn workload_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.workload_name = Some(input.into());
        self
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn set_workload_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workload_name = input;
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.lens_alias = Some(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lens_alias = input;
        self
    }
    /// <p>The ARN for the lens.</p>
    pub fn lens_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.lens_arn = Some(input.into());
        self
    }
    /// <p>The ARN for the lens.</p>
    pub fn set_lens_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lens_arn = input;
        self
    }
    /// <p>The current version of the lens.</p>
    pub fn current_lens_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_lens_version = Some(input.into());
        self
    }
    /// <p>The current version of the lens.</p>
    pub fn set_current_lens_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.current_lens_version = input;
        self
    }
    /// <p>The latest version of the lens.</p>
    pub fn latest_lens_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.latest_lens_version = Some(input.into());
        self
    }
    /// <p>The latest version of the lens.</p>
    pub fn set_latest_lens_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.latest_lens_version = input;
        self
    }
    /// Consumes the builder and constructs a [`LensUpgradeSummary`](crate::types::LensUpgradeSummary).
    pub fn build(self) -> crate::types::LensUpgradeSummary {
        crate::types::LensUpgradeSummary {
            workload_id: self.workload_id,
            workload_name: self.workload_name,
            lens_alias: self.lens_alias,
            lens_arn: self.lens_arn,
            current_lens_version: self.current_lens_version,
            latest_lens_version: self.latest_lens_version,
        }
    }
}
