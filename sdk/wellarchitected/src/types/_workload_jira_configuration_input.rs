// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Workload-level: Input for the Jira configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkloadJiraConfigurationInput {
    /// <p>Workload-level: Jira issue management status.</p>
    pub issue_management_status: ::std::option::Option<crate::types::WorkloadIssueManagementStatus>,
    /// <p>Workload-level: Jira issue management type.</p>
    pub issue_management_type: ::std::option::Option<crate::types::IssueManagementType>,
    /// <p>Workload-level: Jira project key to sync workloads to.</p>
    pub jira_project_key: ::std::option::Option<::std::string::String>,
}
impl WorkloadJiraConfigurationInput {
    /// <p>Workload-level: Jira issue management status.</p>
    pub fn issue_management_status(&self) -> ::std::option::Option<&crate::types::WorkloadIssueManagementStatus> {
        self.issue_management_status.as_ref()
    }
    /// <p>Workload-level: Jira issue management type.</p>
    pub fn issue_management_type(&self) -> ::std::option::Option<&crate::types::IssueManagementType> {
        self.issue_management_type.as_ref()
    }
    /// <p>Workload-level: Jira project key to sync workloads to.</p>
    pub fn jira_project_key(&self) -> ::std::option::Option<&str> {
        self.jira_project_key.as_deref()
    }
}
impl WorkloadJiraConfigurationInput {
    /// Creates a new builder-style object to manufacture [`WorkloadJiraConfigurationInput`](crate::types::WorkloadJiraConfigurationInput).
    pub fn builder() -> crate::types::builders::WorkloadJiraConfigurationInputBuilder {
        crate::types::builders::WorkloadJiraConfigurationInputBuilder::default()
    }
}

/// A builder for [`WorkloadJiraConfigurationInput`](crate::types::WorkloadJiraConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkloadJiraConfigurationInputBuilder {
    pub(crate) issue_management_status: ::std::option::Option<crate::types::WorkloadIssueManagementStatus>,
    pub(crate) issue_management_type: ::std::option::Option<crate::types::IssueManagementType>,
    pub(crate) jira_project_key: ::std::option::Option<::std::string::String>,
}
impl WorkloadJiraConfigurationInputBuilder {
    /// <p>Workload-level: Jira issue management status.</p>
    pub fn issue_management_status(mut self, input: crate::types::WorkloadIssueManagementStatus) -> Self {
        self.issue_management_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Workload-level: Jira issue management status.</p>
    pub fn set_issue_management_status(mut self, input: ::std::option::Option<crate::types::WorkloadIssueManagementStatus>) -> Self {
        self.issue_management_status = input;
        self
    }
    /// <p>Workload-level: Jira issue management status.</p>
    pub fn get_issue_management_status(&self) -> &::std::option::Option<crate::types::WorkloadIssueManagementStatus> {
        &self.issue_management_status
    }
    /// <p>Workload-level: Jira issue management type.</p>
    pub fn issue_management_type(mut self, input: crate::types::IssueManagementType) -> Self {
        self.issue_management_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Workload-level: Jira issue management type.</p>
    pub fn set_issue_management_type(mut self, input: ::std::option::Option<crate::types::IssueManagementType>) -> Self {
        self.issue_management_type = input;
        self
    }
    /// <p>Workload-level: Jira issue management type.</p>
    pub fn get_issue_management_type(&self) -> &::std::option::Option<crate::types::IssueManagementType> {
        &self.issue_management_type
    }
    /// <p>Workload-level: Jira project key to sync workloads to.</p>
    pub fn jira_project_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.jira_project_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Workload-level: Jira project key to sync workloads to.</p>
    pub fn set_jira_project_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.jira_project_key = input;
        self
    }
    /// <p>Workload-level: Jira project key to sync workloads to.</p>
    pub fn get_jira_project_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.jira_project_key
    }
    /// Consumes the builder and constructs a [`WorkloadJiraConfigurationInput`](crate::types::WorkloadJiraConfigurationInput).
    pub fn build(self) -> crate::types::WorkloadJiraConfigurationInput {
        crate::types::WorkloadJiraConfigurationInput {
            issue_management_status: self.issue_management_status,
            issue_management_type: self.issue_management_type,
            jira_project_key: self.jira_project_key,
        }
    }
}
