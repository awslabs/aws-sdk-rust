// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A choice that has been answered on a question in your workload.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChoiceAnswer {
    /// <p>The ID of a choice.</p>
    #[doc(hidden)]
    pub choice_id: std::option::Option<std::string::String>,
    /// <p>The status of a choice.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ChoiceStatus>,
    /// <p>The reason why a choice is non-applicable to a question in your workload.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<crate::types::ChoiceReason>,
    /// <p>The notes associated with a choice.</p>
    #[doc(hidden)]
    pub notes: std::option::Option<std::string::String>,
}
impl ChoiceAnswer {
    /// <p>The ID of a choice.</p>
    pub fn choice_id(&self) -> std::option::Option<&str> {
        self.choice_id.as_deref()
    }
    /// <p>The status of a choice.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ChoiceStatus> {
        self.status.as_ref()
    }
    /// <p>The reason why a choice is non-applicable to a question in your workload.</p>
    pub fn reason(&self) -> std::option::Option<&crate::types::ChoiceReason> {
        self.reason.as_ref()
    }
    /// <p>The notes associated with a choice.</p>
    pub fn notes(&self) -> std::option::Option<&str> {
        self.notes.as_deref()
    }
}
impl ChoiceAnswer {
    /// Creates a new builder-style object to manufacture [`ChoiceAnswer`](crate::types::ChoiceAnswer).
    pub fn builder() -> crate::types::builders::ChoiceAnswerBuilder {
        crate::types::builders::ChoiceAnswerBuilder::default()
    }
}

/// A builder for [`ChoiceAnswer`](crate::types::ChoiceAnswer).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChoiceAnswerBuilder {
    pub(crate) choice_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ChoiceStatus>,
    pub(crate) reason: std::option::Option<crate::types::ChoiceReason>,
    pub(crate) notes: std::option::Option<std::string::String>,
}
impl ChoiceAnswerBuilder {
    /// <p>The ID of a choice.</p>
    pub fn choice_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.choice_id = Some(input.into());
        self
    }
    /// <p>The ID of a choice.</p>
    pub fn set_choice_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.choice_id = input;
        self
    }
    /// <p>The status of a choice.</p>
    pub fn status(mut self, input: crate::types::ChoiceStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of a choice.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ChoiceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The reason why a choice is non-applicable to a question in your workload.</p>
    pub fn reason(mut self, input: crate::types::ChoiceReason) -> Self {
        self.reason = Some(input);
        self
    }
    /// <p>The reason why a choice is non-applicable to a question in your workload.</p>
    pub fn set_reason(mut self, input: std::option::Option<crate::types::ChoiceReason>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The notes associated with a choice.</p>
    pub fn notes(mut self, input: impl Into<std::string::String>) -> Self {
        self.notes = Some(input.into());
        self
    }
    /// <p>The notes associated with a choice.</p>
    pub fn set_notes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.notes = input;
        self
    }
    /// Consumes the builder and constructs a [`ChoiceAnswer`](crate::types::ChoiceAnswer).
    pub fn build(self) -> crate::types::ChoiceAnswer {
        crate::types::ChoiceAnswer {
            choice_id: self.choice_id,
            status: self.status,
            reason: self.reason,
            notes: self.notes,
        }
    }
}
