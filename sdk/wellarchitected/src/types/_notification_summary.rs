// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A notification summary return object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NotificationSummary {
    /// <p>The type of notification.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::NotificationType>,
    /// <p>Summary of lens upgrade.</p>
    #[doc(hidden)]
    pub lens_upgrade_summary: std::option::Option<crate::types::LensUpgradeSummary>,
}
impl NotificationSummary {
    /// <p>The type of notification.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::NotificationType> {
        self.r#type.as_ref()
    }
    /// <p>Summary of lens upgrade.</p>
    pub fn lens_upgrade_summary(&self) -> std::option::Option<&crate::types::LensUpgradeSummary> {
        self.lens_upgrade_summary.as_ref()
    }
}
impl NotificationSummary {
    /// Creates a new builder-style object to manufacture [`NotificationSummary`](crate::types::NotificationSummary).
    pub fn builder() -> crate::types::builders::NotificationSummaryBuilder {
        crate::types::builders::NotificationSummaryBuilder::default()
    }
}

/// A builder for [`NotificationSummary`](crate::types::NotificationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NotificationSummaryBuilder {
    pub(crate) r#type: std::option::Option<crate::types::NotificationType>,
    pub(crate) lens_upgrade_summary: std::option::Option<crate::types::LensUpgradeSummary>,
}
impl NotificationSummaryBuilder {
    /// <p>The type of notification.</p>
    pub fn r#type(mut self, input: crate::types::NotificationType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of notification.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::NotificationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Summary of lens upgrade.</p>
    pub fn lens_upgrade_summary(mut self, input: crate::types::LensUpgradeSummary) -> Self {
        self.lens_upgrade_summary = Some(input);
        self
    }
    /// <p>Summary of lens upgrade.</p>
    pub fn set_lens_upgrade_summary(
        mut self,
        input: std::option::Option<crate::types::LensUpgradeSummary>,
    ) -> Self {
        self.lens_upgrade_summary = input;
        self
    }
    /// Consumes the builder and constructs a [`NotificationSummary`](crate::types::NotificationSummary).
    pub fn build(self) -> crate::types::NotificationSummary {
        crate::types::NotificationSummary {
            r#type: self.r#type,
            lens_upgrade_summary: self.lens_upgrade_summary,
        }
    }
}
