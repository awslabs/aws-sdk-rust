// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A choice summary that has been answered on a question in your workload.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChoiceAnswerSummary {
    /// <p>The ID of a choice.</p>
    #[doc(hidden)]
    pub choice_id: std::option::Option<std::string::String>,
    /// <p>The status of a choice.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ChoiceStatus>,
    /// <p>The reason why a choice is non-applicable to a question in your workload.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<crate::types::ChoiceReason>,
}
impl ChoiceAnswerSummary {
    /// <p>The ID of a choice.</p>
    pub fn choice_id(&self) -> std::option::Option<&str> {
        self.choice_id.as_deref()
    }
    /// <p>The status of a choice.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ChoiceStatus> {
        self.status.as_ref()
    }
    /// <p>The reason why a choice is non-applicable to a question in your workload.</p>
    pub fn reason(&self) -> std::option::Option<&crate::types::ChoiceReason> {
        self.reason.as_ref()
    }
}
impl ChoiceAnswerSummary {
    /// Creates a new builder-style object to manufacture [`ChoiceAnswerSummary`](crate::types::ChoiceAnswerSummary).
    pub fn builder() -> crate::types::builders::ChoiceAnswerSummaryBuilder {
        crate::types::builders::ChoiceAnswerSummaryBuilder::default()
    }
}

/// A builder for [`ChoiceAnswerSummary`](crate::types::ChoiceAnswerSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChoiceAnswerSummaryBuilder {
    pub(crate) choice_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ChoiceStatus>,
    pub(crate) reason: std::option::Option<crate::types::ChoiceReason>,
}
impl ChoiceAnswerSummaryBuilder {
    /// <p>The ID of a choice.</p>
    pub fn choice_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.choice_id = Some(input.into());
        self
    }
    /// <p>The ID of a choice.</p>
    pub fn set_choice_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.choice_id = input;
        self
    }
    /// <p>The status of a choice.</p>
    pub fn status(mut self, input: crate::types::ChoiceStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of a choice.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ChoiceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The reason why a choice is non-applicable to a question in your workload.</p>
    pub fn reason(mut self, input: crate::types::ChoiceReason) -> Self {
        self.reason = Some(input);
        self
    }
    /// <p>The reason why a choice is non-applicable to a question in your workload.</p>
    pub fn set_reason(mut self, input: std::option::Option<crate::types::ChoiceReason>) -> Self {
        self.reason = input;
        self
    }
    /// Consumes the builder and constructs a [`ChoiceAnswerSummary`](crate::types::ChoiceAnswerSummary).
    pub fn build(self) -> crate::types::ChoiceAnswerSummary {
        crate::types::ChoiceAnswerSummary {
            choice_id: self.choice_id,
            status: self.status,
            reason: self.reason,
        }
    }
}
