// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A metric for a particular lens in a workload.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LensMetric {
    /// <p>The lens ARN.</p>
    pub lens_arn: ::std::option::Option<::std::string::String>,
    /// <p>The metrics for the pillars in a lens.</p>
    pub pillars: ::std::option::Option<::std::vec::Vec<crate::types::PillarMetric>>,
    /// <p>A map from risk names to the count of how many questions have that rating.</p>
    pub risk_counts: ::std::option::Option<::std::collections::HashMap<crate::types::Risk, i32>>,
}
impl LensMetric {
    /// <p>The lens ARN.</p>
    pub fn lens_arn(&self) -> ::std::option::Option<&str> {
        self.lens_arn.as_deref()
    }
    /// <p>The metrics for the pillars in a lens.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.pillars.is_none()`.
    pub fn pillars(&self) -> &[crate::types::PillarMetric] {
        self.pillars.as_deref().unwrap_or_default()
    }
    /// <p>A map from risk names to the count of how many questions have that rating.</p>
    pub fn risk_counts(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::Risk, i32>> {
        self.risk_counts.as_ref()
    }
}
impl LensMetric {
    /// Creates a new builder-style object to manufacture [`LensMetric`](crate::types::LensMetric).
    pub fn builder() -> crate::types::builders::LensMetricBuilder {
        crate::types::builders::LensMetricBuilder::default()
    }
}

/// A builder for [`LensMetric`](crate::types::LensMetric).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LensMetricBuilder {
    pub(crate) lens_arn: ::std::option::Option<::std::string::String>,
    pub(crate) pillars: ::std::option::Option<::std::vec::Vec<crate::types::PillarMetric>>,
    pub(crate) risk_counts: ::std::option::Option<::std::collections::HashMap<crate::types::Risk, i32>>,
}
impl LensMetricBuilder {
    /// <p>The lens ARN.</p>
    pub fn lens_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lens_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The lens ARN.</p>
    pub fn set_lens_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lens_arn = input;
        self
    }
    /// <p>The lens ARN.</p>
    pub fn get_lens_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.lens_arn
    }
    /// Appends an item to `pillars`.
    ///
    /// To override the contents of this collection use [`set_pillars`](Self::set_pillars).
    ///
    /// <p>The metrics for the pillars in a lens.</p>
    pub fn pillars(mut self, input: crate::types::PillarMetric) -> Self {
        let mut v = self.pillars.unwrap_or_default();
        v.push(input);
        self.pillars = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metrics for the pillars in a lens.</p>
    pub fn set_pillars(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PillarMetric>>) -> Self {
        self.pillars = input;
        self
    }
    /// <p>The metrics for the pillars in a lens.</p>
    pub fn get_pillars(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PillarMetric>> {
        &self.pillars
    }
    /// Adds a key-value pair to `risk_counts`.
    ///
    /// To override the contents of this collection use [`set_risk_counts`](Self::set_risk_counts).
    ///
    /// <p>A map from risk names to the count of how many questions have that rating.</p>
    pub fn risk_counts(mut self, k: crate::types::Risk, v: i32) -> Self {
        let mut hash_map = self.risk_counts.unwrap_or_default();
        hash_map.insert(k, v);
        self.risk_counts = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map from risk names to the count of how many questions have that rating.</p>
    pub fn set_risk_counts(mut self, input: ::std::option::Option<::std::collections::HashMap<crate::types::Risk, i32>>) -> Self {
        self.risk_counts = input;
        self
    }
    /// <p>A map from risk names to the count of how many questions have that rating.</p>
    pub fn get_risk_counts(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::Risk, i32>> {
        &self.risk_counts
    }
    /// Consumes the builder and constructs a [`LensMetric`](crate::types::LensMetric).
    pub fn build(self) -> crate::types::LensMetric {
        crate::types::LensMetric {
            lens_arn: self.lens_arn,
            pillars: self.pillars,
            risk_counts: self.risk_counts,
        }
    }
}
