// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The differences between the base and latest versions of the lens.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VersionDifferences {
    /// <p>The differences between the base and latest versions of the lens.</p>
    pub pillar_differences: ::std::option::Option<::std::vec::Vec<crate::types::PillarDifference>>,
}
impl VersionDifferences {
    /// <p>The differences between the base and latest versions of the lens.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.pillar_differences.is_none()`.
    pub fn pillar_differences(&self) -> &[crate::types::PillarDifference] {
        self.pillar_differences.as_deref().unwrap_or_default()
    }
}
impl VersionDifferences {
    /// Creates a new builder-style object to manufacture [`VersionDifferences`](crate::types::VersionDifferences).
    pub fn builder() -> crate::types::builders::VersionDifferencesBuilder {
        crate::types::builders::VersionDifferencesBuilder::default()
    }
}

/// A builder for [`VersionDifferences`](crate::types::VersionDifferences).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VersionDifferencesBuilder {
    pub(crate) pillar_differences: ::std::option::Option<::std::vec::Vec<crate::types::PillarDifference>>,
}
impl VersionDifferencesBuilder {
    /// Appends an item to `pillar_differences`.
    ///
    /// To override the contents of this collection use [`set_pillar_differences`](Self::set_pillar_differences).
    ///
    /// <p>The differences between the base and latest versions of the lens.</p>
    pub fn pillar_differences(mut self, input: crate::types::PillarDifference) -> Self {
        let mut v = self.pillar_differences.unwrap_or_default();
        v.push(input);
        self.pillar_differences = ::std::option::Option::Some(v);
        self
    }
    /// <p>The differences between the base and latest versions of the lens.</p>
    pub fn set_pillar_differences(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PillarDifference>>) -> Self {
        self.pillar_differences = input;
        self
    }
    /// <p>The differences between the base and latest versions of the lens.</p>
    pub fn get_pillar_differences(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PillarDifference>> {
        &self.pillar_differences
    }
    /// Consumes the builder and constructs a [`VersionDifferences`](crate::types::VersionDifferences).
    pub fn build(self) -> crate::types::VersionDifferences {
        crate::types::VersionDifferences {
            pillar_differences: self.pillar_differences,
        }
    }
}
