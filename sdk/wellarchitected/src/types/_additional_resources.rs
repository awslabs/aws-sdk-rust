// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The choice level additional resources.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AdditionalResources {
    /// <p>Type of additional resource.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::AdditionalResourceType>,
    /// <p>The URLs for additional resources, either helpful resources or improvement plans. Up to five additional URLs can be specified.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::vec::Vec<crate::types::ChoiceContent>>,
}
impl AdditionalResources {
    /// <p>Type of additional resource.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::AdditionalResourceType> {
        self.r#type.as_ref()
    }
    /// <p>The URLs for additional resources, either helpful resources or improvement plans. Up to five additional URLs can be specified.</p>
    pub fn content(&self) -> std::option::Option<&[crate::types::ChoiceContent]> {
        self.content.as_deref()
    }
}
impl AdditionalResources {
    /// Creates a new builder-style object to manufacture [`AdditionalResources`](crate::types::AdditionalResources).
    pub fn builder() -> crate::types::builders::AdditionalResourcesBuilder {
        crate::types::builders::AdditionalResourcesBuilder::default()
    }
}

/// A builder for [`AdditionalResources`](crate::types::AdditionalResources).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AdditionalResourcesBuilder {
    pub(crate) r#type: std::option::Option<crate::types::AdditionalResourceType>,
    pub(crate) content: std::option::Option<std::vec::Vec<crate::types::ChoiceContent>>,
}
impl AdditionalResourcesBuilder {
    /// <p>Type of additional resource.</p>
    pub fn r#type(mut self, input: crate::types::AdditionalResourceType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Type of additional resource.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::AdditionalResourceType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// Appends an item to `content`.
    ///
    /// To override the contents of this collection use [`set_content`](Self::set_content).
    ///
    /// <p>The URLs for additional resources, either helpful resources or improvement plans. Up to five additional URLs can be specified.</p>
    pub fn content(mut self, input: crate::types::ChoiceContent) -> Self {
        let mut v = self.content.unwrap_or_default();
        v.push(input);
        self.content = Some(v);
        self
    }
    /// <p>The URLs for additional resources, either helpful resources or improvement plans. Up to five additional URLs can be specified.</p>
    pub fn set_content(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ChoiceContent>>,
    ) -> Self {
        self.content = input;
        self
    }
    /// Consumes the builder and constructs a [`AdditionalResources`](crate::types::AdditionalResources).
    pub fn build(self) -> crate::types::AdditionalResources {
        crate::types::AdditionalResources {
            r#type: self.r#type,
            content: self.content,
        }
    }
}
