// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Account-level: Output configuration of the Jira integration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccountJiraConfigurationOutput {
    /// <p>Account-level: Configuration status of the Jira integration.</p>
    pub integration_status: ::std::option::Option<crate::types::IntegrationStatus>,
    /// <p>Account-level: Jira issue management status.</p>
    pub issue_management_status: ::std::option::Option<crate::types::AccountJiraIssueManagementStatus>,
    /// <p>Account-level: Jira issue management type.</p>
    pub issue_management_type: ::std::option::Option<crate::types::IssueManagementType>,
    /// <p>Account-level: Jira subdomain URL.</p>
    pub subdomain: ::std::option::Option<::std::string::String>,
    /// <p>Account-level: Jira project key to sync workloads to.</p>
    pub jira_project_key: ::std::option::Option<::std::string::String>,
    /// <p>Account-level: Status message on configuration of the Jira integration.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
}
impl AccountJiraConfigurationOutput {
    /// <p>Account-level: Configuration status of the Jira integration.</p>
    pub fn integration_status(&self) -> ::std::option::Option<&crate::types::IntegrationStatus> {
        self.integration_status.as_ref()
    }
    /// <p>Account-level: Jira issue management status.</p>
    pub fn issue_management_status(&self) -> ::std::option::Option<&crate::types::AccountJiraIssueManagementStatus> {
        self.issue_management_status.as_ref()
    }
    /// <p>Account-level: Jira issue management type.</p>
    pub fn issue_management_type(&self) -> ::std::option::Option<&crate::types::IssueManagementType> {
        self.issue_management_type.as_ref()
    }
    /// <p>Account-level: Jira subdomain URL.</p>
    pub fn subdomain(&self) -> ::std::option::Option<&str> {
        self.subdomain.as_deref()
    }
    /// <p>Account-level: Jira project key to sync workloads to.</p>
    pub fn jira_project_key(&self) -> ::std::option::Option<&str> {
        self.jira_project_key.as_deref()
    }
    /// <p>Account-level: Status message on configuration of the Jira integration.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl AccountJiraConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`AccountJiraConfigurationOutput`](crate::types::AccountJiraConfigurationOutput).
    pub fn builder() -> crate::types::builders::AccountJiraConfigurationOutputBuilder {
        crate::types::builders::AccountJiraConfigurationOutputBuilder::default()
    }
}

/// A builder for [`AccountJiraConfigurationOutput`](crate::types::AccountJiraConfigurationOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccountJiraConfigurationOutputBuilder {
    pub(crate) integration_status: ::std::option::Option<crate::types::IntegrationStatus>,
    pub(crate) issue_management_status: ::std::option::Option<crate::types::AccountJiraIssueManagementStatus>,
    pub(crate) issue_management_type: ::std::option::Option<crate::types::IssueManagementType>,
    pub(crate) subdomain: ::std::option::Option<::std::string::String>,
    pub(crate) jira_project_key: ::std::option::Option<::std::string::String>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
}
impl AccountJiraConfigurationOutputBuilder {
    /// <p>Account-level: Configuration status of the Jira integration.</p>
    pub fn integration_status(mut self, input: crate::types::IntegrationStatus) -> Self {
        self.integration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Account-level: Configuration status of the Jira integration.</p>
    pub fn set_integration_status(mut self, input: ::std::option::Option<crate::types::IntegrationStatus>) -> Self {
        self.integration_status = input;
        self
    }
    /// <p>Account-level: Configuration status of the Jira integration.</p>
    pub fn get_integration_status(&self) -> &::std::option::Option<crate::types::IntegrationStatus> {
        &self.integration_status
    }
    /// <p>Account-level: Jira issue management status.</p>
    pub fn issue_management_status(mut self, input: crate::types::AccountJiraIssueManagementStatus) -> Self {
        self.issue_management_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Account-level: Jira issue management status.</p>
    pub fn set_issue_management_status(mut self, input: ::std::option::Option<crate::types::AccountJiraIssueManagementStatus>) -> Self {
        self.issue_management_status = input;
        self
    }
    /// <p>Account-level: Jira issue management status.</p>
    pub fn get_issue_management_status(&self) -> &::std::option::Option<crate::types::AccountJiraIssueManagementStatus> {
        &self.issue_management_status
    }
    /// <p>Account-level: Jira issue management type.</p>
    pub fn issue_management_type(mut self, input: crate::types::IssueManagementType) -> Self {
        self.issue_management_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Account-level: Jira issue management type.</p>
    pub fn set_issue_management_type(mut self, input: ::std::option::Option<crate::types::IssueManagementType>) -> Self {
        self.issue_management_type = input;
        self
    }
    /// <p>Account-level: Jira issue management type.</p>
    pub fn get_issue_management_type(&self) -> &::std::option::Option<crate::types::IssueManagementType> {
        &self.issue_management_type
    }
    /// <p>Account-level: Jira subdomain URL.</p>
    pub fn subdomain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subdomain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Account-level: Jira subdomain URL.</p>
    pub fn set_subdomain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subdomain = input;
        self
    }
    /// <p>Account-level: Jira subdomain URL.</p>
    pub fn get_subdomain(&self) -> &::std::option::Option<::std::string::String> {
        &self.subdomain
    }
    /// <p>Account-level: Jira project key to sync workloads to.</p>
    pub fn jira_project_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.jira_project_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Account-level: Jira project key to sync workloads to.</p>
    pub fn set_jira_project_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.jira_project_key = input;
        self
    }
    /// <p>Account-level: Jira project key to sync workloads to.</p>
    pub fn get_jira_project_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.jira_project_key
    }
    /// <p>Account-level: Status message on configuration of the Jira integration.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Account-level: Status message on configuration of the Jira integration.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Account-level: Status message on configuration of the Jira integration.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Consumes the builder and constructs a [`AccountJiraConfigurationOutput`](crate::types::AccountJiraConfigurationOutput).
    pub fn build(self) -> crate::types::AccountJiraConfigurationOutput {
        crate::types::AccountJiraConfigurationOutput {
            integration_status: self.integration_status,
            issue_management_status: self.issue_management_status,
            issue_management_type: self.issue_management_type,
            subdomain: self.subdomain,
            jira_project_key: self.jira_project_key,
            status_message: self.status_message,
        }
    }
}
