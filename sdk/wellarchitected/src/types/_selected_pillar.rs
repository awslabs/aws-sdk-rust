// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The selected pillar.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SelectedPillar {
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub pillar_id: ::std::option::Option<::std::string::String>,
    /// <p>Selected question IDs in the selected pillar.</p>
    pub selected_question_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SelectedPillar {
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn pillar_id(&self) -> ::std::option::Option<&str> {
        self.pillar_id.as_deref()
    }
    /// <p>Selected question IDs in the selected pillar.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.selected_question_ids.is_none()`.
    pub fn selected_question_ids(&self) -> &[::std::string::String] {
        self.selected_question_ids.as_deref().unwrap_or_default()
    }
}
impl SelectedPillar {
    /// Creates a new builder-style object to manufacture [`SelectedPillar`](crate::types::SelectedPillar).
    pub fn builder() -> crate::types::builders::SelectedPillarBuilder {
        crate::types::builders::SelectedPillarBuilder::default()
    }
}

/// A builder for [`SelectedPillar`](crate::types::SelectedPillar).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SelectedPillarBuilder {
    pub(crate) pillar_id: ::std::option::Option<::std::string::String>,
    pub(crate) selected_question_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SelectedPillarBuilder {
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn pillar_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pillar_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn set_pillar_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pillar_id = input;
        self
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn get_pillar_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pillar_id
    }
    /// Appends an item to `selected_question_ids`.
    ///
    /// To override the contents of this collection use [`set_selected_question_ids`](Self::set_selected_question_ids).
    ///
    /// <p>Selected question IDs in the selected pillar.</p>
    pub fn selected_question_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.selected_question_ids.unwrap_or_default();
        v.push(input.into());
        self.selected_question_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>Selected question IDs in the selected pillar.</p>
    pub fn set_selected_question_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.selected_question_ids = input;
        self
    }
    /// <p>Selected question IDs in the selected pillar.</p>
    pub fn get_selected_question_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.selected_question_ids
    }
    /// Consumes the builder and constructs a [`SelectedPillar`](crate::types::SelectedPillar).
    pub fn build(self) -> crate::types::SelectedPillar {
        crate::types::SelectedPillar {
            pillar_id: self.pillar_id,
            selected_question_ids: self.selected_question_ids,
        }
    }
}
