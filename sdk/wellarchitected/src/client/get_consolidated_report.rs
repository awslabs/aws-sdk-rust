// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetConsolidatedReport`](crate::operation::get_consolidated_report::builders::GetConsolidatedReportFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::get_consolidated_report::builders::GetConsolidatedReportFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`format(ReportFormat)`](crate::operation::get_consolidated_report::builders::GetConsolidatedReportFluentBuilder::format) / [`set_format(Option<ReportFormat>)`](crate::operation::get_consolidated_report::builders::GetConsolidatedReportFluentBuilder::set_format):<br>required: **true**<br><p>The format of the consolidated report.</p>  <p>For <code>PDF</code>, <code>Base64String</code> is returned. For <code>JSON</code>, <code>Metrics</code> is returned.</p><br>
    ///   - [`include_shared_resources(bool)`](crate::operation::get_consolidated_report::builders::GetConsolidatedReportFluentBuilder::include_shared_resources) / [`set_include_shared_resources(Option<bool>)`](crate::operation::get_consolidated_report::builders::GetConsolidatedReportFluentBuilder::set_include_shared_resources):<br>required: **false**<br><p>Set to <code>true</code> to have shared resources included in the report.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::get_consolidated_report::builders::GetConsolidatedReportFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::get_consolidated_report::builders::GetConsolidatedReportFluentBuilder::set_next_token):<br>required: **false**<br><p>The token to use to retrieve the next set of results.</p><br>
    ///   - [`max_results(i32)`](crate::operation::get_consolidated_report::builders::GetConsolidatedReportFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::get_consolidated_report::builders::GetConsolidatedReportFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return for this request.</p><br>
    /// - On success, responds with [`GetConsolidatedReportOutput`](crate::operation::get_consolidated_report::GetConsolidatedReportOutput) with field(s):
    ///   - [`metrics(Option<Vec::<ConsolidatedReportMetric>>)`](crate::operation::get_consolidated_report::GetConsolidatedReportOutput::metrics): <p>The metrics that make up the consolidated report.</p>  <p>Only returned when <code>JSON</code> format is requested.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::get_consolidated_report::GetConsolidatedReportOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`base64_string(Option<String>)`](crate::operation::get_consolidated_report::GetConsolidatedReportOutput::base64_string): <p>The Base64-encoded string representation of a lens review report.</p>  <p>This data can be used to create a PDF file.</p>  <p>Only returned by <code>GetConsolidatedReport</code> when <code>PDF</code> format is requested.</p>
    /// - On failure, responds with [`SdkError<GetConsolidatedReportError>`](crate::operation::get_consolidated_report::GetConsolidatedReportError)
    pub fn get_consolidated_report(&self) -> crate::operation::get_consolidated_report::builders::GetConsolidatedReportFluentBuilder {
        crate::operation::get_consolidated_report::builders::GetConsolidatedReportFluentBuilder::new(self.handle.clone())
    }
}
