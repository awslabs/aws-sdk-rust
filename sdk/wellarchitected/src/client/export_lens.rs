// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ExportLens`](crate::operation::export_lens::builders::ExportLensFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`lens_alias(impl Into<String>)`](crate::operation::export_lens::builders::ExportLensFluentBuilder::lens_alias) / [`set_lens_alias(Option<String>)`](crate::operation::export_lens::builders::ExportLensFluentBuilder::set_lens_alias):<br>required: **true**<br><p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p><br>
    ///   - [`lens_version(impl Into<String>)`](crate::operation::export_lens::builders::ExportLensFluentBuilder::lens_version) / [`set_lens_version(Option<String>)`](crate::operation::export_lens::builders::ExportLensFluentBuilder::set_lens_version):<br>required: **false**<br><p>The lens version to be exported.</p><br>
    /// - On success, responds with [`ExportLensOutput`](crate::operation::export_lens::ExportLensOutput) with field(s):
    ///   - [`lens_json(Option<String>)`](crate::operation::export_lens::ExportLensOutput::lens_json): <p>The JSON representation of a lens.</p>
    /// - On failure, responds with [`SdkError<ExportLensError>`](crate::operation::export_lens::ExportLensError)
    pub fn export_lens(&self) -> crate::operation::export_lens::builders::ExportLensFluentBuilder {
        crate::operation::export_lens::builders::ExportLensFluentBuilder::new(self.handle.clone())
    }
}
