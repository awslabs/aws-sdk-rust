// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Fluent builder constructing a request to `AssociateLenses`.
///
/// <p>Associate a lens to a workload.</p>
/// <p>Up to 10 lenses can be associated with a workload in a single API operation. A maximum of 20 lenses can be associated with a workload.</p> <note>
/// <p> <b>Disclaimer</b> </p>
/// <p>By accessing and/or applying custom lenses created by another Amazon Web Services user or account, you acknowledge that custom lenses created by other users and shared with you are Third Party Content as defined in the Amazon Web Services Customer Agreement. </p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociateLenses {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::associate_lenses_input::Builder,
}
impl AssociateLenses {
    /// Creates a new `AssociateLenses`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AssociateLenses,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::AssociateLensesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AssociateLensesOutput,
        aws_smithy_http::result::SdkError<crate::error::AssociateLensesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// Appends an item to `LensAliases`.
    ///
    /// To override the contents of this collection use [`set_lens_aliases`](Self::set_lens_aliases).
    ///
    /// <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p>
    /// <p>Identify a lens using its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_aliases(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_aliases(input.into());
        self
    }
    /// <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p>
    /// <p>Identify a lens using its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_aliases(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_lens_aliases(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateLensShare`.
///
/// <p>Create a lens share.</p>
/// <p>The owner of a lens can share it with other Amazon Web Services accounts, IAM users, an organization, and organizational units (OUs) in the same Amazon Web Services Region. Shared access to a lens is not removed until the lens invitation is deleted.</p> <note>
/// <p> <b>Disclaimer</b> </p>
/// <p>By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateLensShare {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_lens_share_input::Builder,
}
impl CreateLensShare {
    /// Creates a new `CreateLensShare`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateLensShare,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateLensShareError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateLensShareOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateLensShareError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.</p>
    pub fn shared_with(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.shared_with(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.</p>
    pub fn set_shared_with(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_shared_with(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateLensVersion`.
///
/// <p>Create a new lens version.</p>
/// <p>A lens can have up to 100 versions.</p>
/// <p>After a lens has been imported, create a new lens version to publish it. The owner of a lens can share the lens with other Amazon Web Services accounts and IAM users in the same Amazon Web Services Region. Only the owner of a lens can delete it. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateLensVersion {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_lens_version_input::Builder,
}
impl CreateLensVersion {
    /// Creates a new `CreateLensVersion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateLensVersion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateLensVersionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateLensVersionOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateLensVersionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The version of the lens being created.</p>
    pub fn lens_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_version(input.into());
        self
    }
    /// <p>The version of the lens being created.</p>
    pub fn set_lens_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_version(input);
        self
    }
    /// <p>Set to true if this new major lens version.</p>
    pub fn is_major_version(mut self, input: bool) -> Self {
        self.inner = self.inner.is_major_version(input);
        self
    }
    /// <p>Set to true if this new major lens version.</p>
    pub fn set_is_major_version(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_major_version(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateMilestone`.
///
/// <p>Create a milestone for an existing workload.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateMilestone {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_milestone_input::Builder,
}
impl CreateMilestone {
    /// Creates a new `CreateMilestone`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateMilestone,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateMilestoneError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateMilestoneOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateMilestoneError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The name of the milestone in a workload.</p>
    /// <p>Milestone names must be unique within a workload.</p>
    pub fn milestone_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.milestone_name(input.into());
        self
    }
    /// <p>The name of the milestone in a workload.</p>
    /// <p>Milestone names must be unique within a workload.</p>
    pub fn set_milestone_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_milestone_name(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateWorkload`.
///
/// <p>Create a new workload.</p>
/// <p>The owner of a workload can share the workload with other Amazon Web Services accounts, IAM users, an organization, and organizational units (OUs) in the same Amazon Web Services Region. Only the owner of a workload can delete it.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/define-workload.html">Defining a Workload</a> in the <i>Well-Architected Tool User Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateWorkload {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_workload_input::Builder,
}
impl CreateWorkload {
    /// Creates a new `CreateWorkload`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateWorkload,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateWorkloadError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateWorkloadOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateWorkloadError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn workload_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_name(input.into());
        self
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn set_workload_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_name(input);
        self
    }
    /// <p>The description for the workload.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description for the workload.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The environment for the workload.</p>
    pub fn environment(mut self, input: crate::model::WorkloadEnvironment) -> Self {
        self.inner = self.inner.environment(input);
        self
    }
    /// <p>The environment for the workload.</p>
    pub fn set_environment(
        mut self,
        input: std::option::Option<crate::model::WorkloadEnvironment>,
    ) -> Self {
        self.inner = self.inner.set_environment(input);
        self
    }
    /// Appends an item to `AccountIds`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>The list of Amazon Web Services account IDs associated with the workload.</p>
    pub fn account_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_ids(input.into());
        self
    }
    /// <p>The list of Amazon Web Services account IDs associated with the workload.</p>
    pub fn set_account_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_account_ids(input);
        self
    }
    /// Appends an item to `AwsRegions`.
    ///
    /// To override the contents of this collection use [`set_aws_regions`](Self::set_aws_regions).
    ///
    /// <p>The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.</p>
    pub fn aws_regions(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aws_regions(input.into());
        self
    }
    /// <p>The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.</p>
    pub fn set_aws_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_aws_regions(input);
        self
    }
    /// Appends an item to `NonAwsRegions`.
    ///
    /// To override the contents of this collection use [`set_non_aws_regions`](Self::set_non_aws_regions).
    ///
    /// <p> The list of non-Amazon Web Services Regions associated with the workload.</p>
    pub fn non_aws_regions(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.non_aws_regions(input.into());
        self
    }
    /// <p> The list of non-Amazon Web Services Regions associated with the workload.</p>
    pub fn set_non_aws_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_non_aws_regions(input);
        self
    }
    /// Appends an item to `PillarPriorities`.
    ///
    /// To override the contents of this collection use [`set_pillar_priorities`](Self::set_pillar_priorities).
    ///
    /// <p>The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn pillar_priorities(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pillar_priorities(input.into());
        self
    }
    /// <p>The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn set_pillar_priorities(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_pillar_priorities(input);
        self
    }
    /// <p>The URL of the architectural design for the workload.</p>
    pub fn architectural_design(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.architectural_design(input.into());
        self
    }
    /// <p>The URL of the architectural design for the workload.</p>
    pub fn set_architectural_design(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_architectural_design(input);
        self
    }
    /// <p>The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.</p>
    pub fn review_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.review_owner(input.into());
        self
    }
    /// <p>The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.</p>
    pub fn set_review_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_review_owner(input);
        self
    }
    /// <p>The industry type for the workload.</p>
    /// <p>If specified, must be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>Agriculture</code> </p> </li>
    /// <li> <p> <code>Automobile</code> </p> </li>
    /// <li> <p> <code>Defense</code> </p> </li>
    /// <li> <p> <code>Design and Engineering</code> </p> </li>
    /// <li> <p> <code>Digital Advertising</code> </p> </li>
    /// <li> <p> <code>Education</code> </p> </li>
    /// <li> <p> <code>Environmental Protection</code> </p> </li>
    /// <li> <p> <code>Financial Services</code> </p> </li>
    /// <li> <p> <code>Gaming</code> </p> </li>
    /// <li> <p> <code>General Public Services</code> </p> </li>
    /// <li> <p> <code>Healthcare</code> </p> </li>
    /// <li> <p> <code>Hospitality</code> </p> </li>
    /// <li> <p> <code>InfoTech</code> </p> </li>
    /// <li> <p> <code>Justice and Public Safety</code> </p> </li>
    /// <li> <p> <code>Life Sciences</code> </p> </li>
    /// <li> <p> <code>Manufacturing</code> </p> </li>
    /// <li> <p> <code>Media &amp; Entertainment</code> </p> </li>
    /// <li> <p> <code>Mining &amp; Resources</code> </p> </li>
    /// <li> <p> <code>Oil &amp; Gas</code> </p> </li>
    /// <li> <p> <code>Power &amp; Utilities</code> </p> </li>
    /// <li> <p> <code>Professional Services</code> </p> </li>
    /// <li> <p> <code>Real Estate &amp; Construction</code> </p> </li>
    /// <li> <p> <code>Retail &amp; Wholesale</code> </p> </li>
    /// <li> <p> <code>Social Protection</code> </p> </li>
    /// <li> <p> <code>Telecommunications</code> </p> </li>
    /// <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li>
    /// <li> <p> <code>Other</code> </p> </li>
    /// </ul>
    pub fn industry_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.industry_type(input.into());
        self
    }
    /// <p>The industry type for the workload.</p>
    /// <p>If specified, must be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>Agriculture</code> </p> </li>
    /// <li> <p> <code>Automobile</code> </p> </li>
    /// <li> <p> <code>Defense</code> </p> </li>
    /// <li> <p> <code>Design and Engineering</code> </p> </li>
    /// <li> <p> <code>Digital Advertising</code> </p> </li>
    /// <li> <p> <code>Education</code> </p> </li>
    /// <li> <p> <code>Environmental Protection</code> </p> </li>
    /// <li> <p> <code>Financial Services</code> </p> </li>
    /// <li> <p> <code>Gaming</code> </p> </li>
    /// <li> <p> <code>General Public Services</code> </p> </li>
    /// <li> <p> <code>Healthcare</code> </p> </li>
    /// <li> <p> <code>Hospitality</code> </p> </li>
    /// <li> <p> <code>InfoTech</code> </p> </li>
    /// <li> <p> <code>Justice and Public Safety</code> </p> </li>
    /// <li> <p> <code>Life Sciences</code> </p> </li>
    /// <li> <p> <code>Manufacturing</code> </p> </li>
    /// <li> <p> <code>Media &amp; Entertainment</code> </p> </li>
    /// <li> <p> <code>Mining &amp; Resources</code> </p> </li>
    /// <li> <p> <code>Oil &amp; Gas</code> </p> </li>
    /// <li> <p> <code>Power &amp; Utilities</code> </p> </li>
    /// <li> <p> <code>Professional Services</code> </p> </li>
    /// <li> <p> <code>Real Estate &amp; Construction</code> </p> </li>
    /// <li> <p> <code>Retail &amp; Wholesale</code> </p> </li>
    /// <li> <p> <code>Social Protection</code> </p> </li>
    /// <li> <p> <code>Telecommunications</code> </p> </li>
    /// <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li>
    /// <li> <p> <code>Other</code> </p> </li>
    /// </ul>
    pub fn set_industry_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_industry_type(input);
        self
    }
    /// <p>The industry for the workload.</p>
    pub fn industry(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.industry(input.into());
        self
    }
    /// <p>The industry for the workload.</p>
    pub fn set_industry(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_industry(input);
        self
    }
    /// Appends an item to `Lenses`.
    ///
    /// To override the contents of this collection use [`set_lenses`](Self::set_lenses).
    ///
    /// <p>The list of lenses associated with the workload. Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lenses(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lenses(input.into());
        self
    }
    /// <p>The list of lenses associated with the workload. Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lenses(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_lenses(input);
        self
    }
    /// <p>The notes associated with the workload.</p>
    pub fn notes(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notes(input.into());
        self
    }
    /// <p>The notes associated with the workload.</p>
    pub fn set_notes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_notes(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be associated with the workload.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags to be associated with the workload.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Well-Architected discovery configuration settings associated to the workload.</p>
    pub fn discovery_config(mut self, input: crate::model::WorkloadDiscoveryConfig) -> Self {
        self.inner = self.inner.discovery_config(input);
        self
    }
    /// <p>Well-Architected discovery configuration settings associated to the workload.</p>
    pub fn set_discovery_config(
        mut self,
        input: std::option::Option<crate::model::WorkloadDiscoveryConfig>,
    ) -> Self {
        self.inner = self.inner.set_discovery_config(input);
        self
    }
    /// Appends an item to `Applications`.
    ///
    /// To override the contents of this collection use [`set_applications`](Self::set_applications).
    ///
    /// <p>List of AppRegistry application ARNs associated to the workload.</p>
    pub fn applications(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.applications(input.into());
        self
    }
    /// <p>List of AppRegistry application ARNs associated to the workload.</p>
    pub fn set_applications(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_applications(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateWorkloadShare`.
///
/// <p>Create a workload share.</p>
/// <p>The owner of a workload can share it with other Amazon Web Services accounts and IAM users in the same Amazon Web Services Region. Shared access to a workload is not removed until the workload invitation is deleted.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/workloads-sharing.html">Sharing a Workload</a> in the <i>Well-Architected Tool User Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateWorkloadShare {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_workload_share_input::Builder,
}
impl CreateWorkloadShare {
    /// Creates a new `CreateWorkloadShare`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateWorkloadShare,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateWorkloadShareError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateWorkloadShareOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateWorkloadShareError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.</p>
    pub fn shared_with(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.shared_with(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.</p>
    pub fn set_shared_with(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_shared_with(input);
        self
    }
    /// <p>Permission granted on a workload share.</p>
    pub fn permission_type(mut self, input: crate::model::PermissionType) -> Self {
        self.inner = self.inner.permission_type(input);
        self
    }
    /// <p>Permission granted on a workload share.</p>
    pub fn set_permission_type(
        mut self,
        input: std::option::Option<crate::model::PermissionType>,
    ) -> Self {
        self.inner = self.inner.set_permission_type(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteLens`.
///
/// <p>Delete an existing lens.</p>
/// <p>Only the owner of a lens can delete it. After the lens is deleted, Amazon Web Services accounts and IAM users that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads. </p> <note>
/// <p> <b>Disclaimer</b> </p>
/// <p>By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteLens {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_lens_input::Builder,
}
impl DeleteLens {
    /// Creates a new `DeleteLens`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteLens,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteLensError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteLensOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteLensError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The status of the lens to be deleted.</p>
    pub fn lens_status(mut self, input: crate::model::LensStatusType) -> Self {
        self.inner = self.inner.lens_status(input);
        self
    }
    /// <p>The status of the lens to be deleted.</p>
    pub fn set_lens_status(
        mut self,
        input: std::option::Option<crate::model::LensStatusType>,
    ) -> Self {
        self.inner = self.inner.set_lens_status(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteLensShare`.
///
/// <p>Delete a lens share.</p>
/// <p>After the lens share is deleted, Amazon Web Services accounts, IAM users, organizations, and organizational units (OUs) that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads.</p> <note>
/// <p> <b>Disclaimer</b> </p>
/// <p>By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteLensShare {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_lens_share_input::Builder,
}
impl DeleteLensShare {
    /// Creates a new `DeleteLensShare`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteLensShare,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteLensShareError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteLensShareOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteLensShareError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID associated with the workload share.</p>
    pub fn share_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.share_id(input.into());
        self
    }
    /// <p>The ID associated with the workload share.</p>
    pub fn set_share_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_share_id(input);
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteWorkload`.
///
/// <p>Delete an existing workload.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWorkload {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_workload_input::Builder,
}
impl DeleteWorkload {
    /// Creates a new `DeleteWorkload`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteWorkload,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteWorkloadError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteWorkloadOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteWorkloadError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteWorkloadShare`.
///
/// <p>Delete a workload share.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteWorkloadShare {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_workload_share_input::Builder,
}
impl DeleteWorkloadShare {
    /// Creates a new `DeleteWorkloadShare`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteWorkloadShare,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteWorkloadShareError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteWorkloadShareOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteWorkloadShareError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID associated with the workload share.</p>
    pub fn share_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.share_id(input.into());
        self
    }
    /// <p>The ID associated with the workload share.</p>
    pub fn set_share_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_share_id(input);
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DisassociateLenses`.
///
/// <p>Disassociate a lens from a workload.</p>
/// <p>Up to 10 lenses can be disassociated from a workload in a single API operation.</p> <note>
/// <p>The Amazon Web Services Well-Architected Framework lens (<code>wellarchitected</code>) cannot be removed from a workload.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateLenses {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::disassociate_lenses_input::Builder,
}
impl DisassociateLenses {
    /// Creates a new `DisassociateLenses`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DisassociateLenses,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DisassociateLensesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DisassociateLensesOutput,
        aws_smithy_http::result::SdkError<crate::error::DisassociateLensesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// Appends an item to `LensAliases`.
    ///
    /// To override the contents of this collection use [`set_lens_aliases`](Self::set_lens_aliases).
    ///
    /// <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p>
    /// <p>Identify a lens using its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_aliases(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_aliases(input.into());
        self
    }
    /// <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p>
    /// <p>Identify a lens using its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_aliases(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_lens_aliases(input);
        self
    }
}

/// Fluent builder constructing a request to `ExportLens`.
///
/// <p>Export an existing lens.</p>
/// <p>Lenses are defined in JSON. For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html">JSON format specification</a> in the <i>Well-Architected Tool User Guide</i>. Only the owner of a lens can export it. </p> <note>
/// <p> <b>Disclaimer</b> </p>
/// <p>Do not include or gather personal identifiable information (PII) of end users or other identifiable individuals in or via your custom lenses. If your custom lens or those shared with you and used in your account do include or collect PII you are responsible for: ensuring that the included PII is processed in accordance with applicable law, providing adequate privacy notices, and obtaining necessary consents for processing such data.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ExportLens {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::export_lens_input::Builder,
}
impl ExportLens {
    /// Creates a new `ExportLens`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ExportLens,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ExportLensError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ExportLensOutput,
        aws_smithy_http::result::SdkError<crate::error::ExportLensError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The lens version to be exported.</p>
    pub fn lens_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_version(input.into());
        self
    }
    /// <p>The lens version to be exported.</p>
    pub fn set_lens_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_version(input);
        self
    }
}

/// Fluent builder constructing a request to `GetAnswer`.
///
/// <p>Get the answer to a specific question in a workload review.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetAnswer {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_answer_input::Builder,
}
impl GetAnswer {
    /// Creates a new `GetAnswer`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetAnswer,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetAnswerError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetAnswerOutput,
        aws_smithy_http::result::SdkError<crate::error::GetAnswerError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The ID of the question.</p>
    pub fn question_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.question_id(input.into());
        self
    }
    /// <p>The ID of the question.</p>
    pub fn set_question_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_question_id(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(mut self, input: i32) -> Self {
        self.inner = self.inner.milestone_number(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_milestone_number(input);
        self
    }
}

/// Fluent builder constructing a request to `GetLens`.
///
/// <p>Get an existing lens.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetLens {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_lens_input::Builder,
}
impl GetLens {
    /// Creates a new `GetLens`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetLens,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetLensError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetLensOutput,
        aws_smithy_http::result::SdkError<crate::error::GetLensError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The lens version to be retrieved.</p>
    pub fn lens_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_version(input.into());
        self
    }
    /// <p>The lens version to be retrieved.</p>
    pub fn set_lens_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_version(input);
        self
    }
}

/// Fluent builder constructing a request to `GetLensReview`.
///
/// <p>Get lens review.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetLensReview {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_lens_review_input::Builder,
}
impl GetLensReview {
    /// Creates a new `GetLensReview`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetLensReview,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetLensReviewError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetLensReviewOutput,
        aws_smithy_http::result::SdkError<crate::error::GetLensReviewError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(mut self, input: i32) -> Self {
        self.inner = self.inner.milestone_number(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_milestone_number(input);
        self
    }
}

/// Fluent builder constructing a request to `GetLensReviewReport`.
///
/// <p>Get lens review report.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetLensReviewReport {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_lens_review_report_input::Builder,
}
impl GetLensReviewReport {
    /// Creates a new `GetLensReviewReport`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetLensReviewReport,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetLensReviewReportError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetLensReviewReportOutput,
        aws_smithy_http::result::SdkError<crate::error::GetLensReviewReportError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(mut self, input: i32) -> Self {
        self.inner = self.inner.milestone_number(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_milestone_number(input);
        self
    }
}

/// Fluent builder constructing a request to `GetLensVersionDifference`.
///
/// <p>Get lens version differences.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetLensVersionDifference {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_lens_version_difference_input::Builder,
}
impl GetLensVersionDifference {
    /// Creates a new `GetLensVersionDifference`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetLensVersionDifference,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetLensVersionDifferenceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetLensVersionDifferenceOutput,
        aws_smithy_http::result::SdkError<crate::error::GetLensVersionDifferenceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The base version of the lens.</p>
    pub fn base_lens_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.base_lens_version(input.into());
        self
    }
    /// <p>The base version of the lens.</p>
    pub fn set_base_lens_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_base_lens_version(input);
        self
    }
    /// <p>The lens version to target a difference for.</p>
    pub fn target_lens_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_lens_version(input.into());
        self
    }
    /// <p>The lens version to target a difference for.</p>
    pub fn set_target_lens_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_target_lens_version(input);
        self
    }
}

/// Fluent builder constructing a request to `GetMilestone`.
///
/// <p>Get a milestone for an existing workload.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetMilestone {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_milestone_input::Builder,
}
impl GetMilestone {
    /// Creates a new `GetMilestone`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetMilestone,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetMilestoneError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetMilestoneOutput,
        aws_smithy_http::result::SdkError<crate::error::GetMilestoneError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(mut self, input: i32) -> Self {
        self.inner = self.inner.milestone_number(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_milestone_number(input);
        self
    }
}

/// Fluent builder constructing a request to `GetWorkload`.
///
/// <p>Get an existing workload.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetWorkload {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_workload_input::Builder,
}
impl GetWorkload {
    /// Creates a new `GetWorkload`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetWorkload,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetWorkloadError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetWorkloadOutput,
        aws_smithy_http::result::SdkError<crate::error::GetWorkloadError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
}

/// Fluent builder constructing a request to `ImportLens`.
///
/// <p>Import a new lens.</p>
/// <p>The lens cannot be applied to workloads or shared with other Amazon Web Services accounts until it's published with <code>CreateLensVersion</code> </p>
/// <p>Lenses are defined in JSON. For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html">JSON format specification</a> in the <i>Well-Architected Tool User Guide</i>.</p>
/// <p>A custom lens cannot exceed 500 KB in size.</p> <note>
/// <p> <b>Disclaimer</b> </p>
/// <p>Do not include or gather personal identifiable information (PII) of end users or other identifiable individuals in or via your custom lenses. If your custom lens or those shared with you and used in your account do include or collect PII you are responsible for: ensuring that the included PII is processed in accordance with applicable law, providing adequate privacy notices, and obtaining necessary consents for processing such data.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ImportLens {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::import_lens_input::Builder,
}
impl ImportLens {
    /// Creates a new `ImportLens`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ImportLens,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ImportLensError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ImportLensOutput,
        aws_smithy_http::result::SdkError<crate::error::ImportLensError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The JSON representation of a lens.</p>
    pub fn json_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.json_string(input.into());
        self
    }
    /// <p>The JSON representation of a lens.</p>
    pub fn set_json_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_json_string(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to associate to a lens.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags to associate to a lens.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `ListAnswers`.
///
/// <p>List of answers.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAnswers {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_answers_input::Builder,
}
impl ListAnswers {
    /// Creates a new `ListAnswers`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListAnswers,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAnswersError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAnswersOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAnswersError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListAnswersPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListAnswersPaginator {
        crate::paginator::ListAnswersPaginator::new(self.handle, self.inner)
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn pillar_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pillar_id(input.into());
        self
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn set_pillar_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pillar_id(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(mut self, input: i32) -> Self {
        self.inner = self.inner.milestone_number(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_milestone_number(input);
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListCheckDetails`.
///
/// <p>List of Trusted Advisor check details by account related to the workload.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCheckDetails {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_check_details_input::Builder,
}
impl ListCheckDetails {
    /// Creates a new `ListCheckDetails`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListCheckDetails,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListCheckDetailsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListCheckDetailsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListCheckDetailsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListCheckDetailsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListCheckDetailsPaginator {
        crate::paginator::ListCheckDetailsPaginator::new(self.handle, self.inner)
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Well-Architected Lens ARN.</p>
    pub fn lens_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_arn(input.into());
        self
    }
    /// <p>Well-Architected Lens ARN.</p>
    pub fn set_lens_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_arn(input);
        self
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn pillar_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pillar_id(input.into());
        self
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn set_pillar_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pillar_id(input);
        self
    }
    /// <p>The ID of the question.</p>
    pub fn question_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.question_id(input.into());
        self
    }
    /// <p>The ID of the question.</p>
    pub fn set_question_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_question_id(input);
        self
    }
    /// <p>The ID of a choice.</p>
    pub fn choice_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.choice_id(input.into());
        self
    }
    /// <p>The ID of a choice.</p>
    pub fn set_choice_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_choice_id(input);
        self
    }
}

/// Fluent builder constructing a request to `ListCheckSummaries`.
///
/// <p>List of Trusted Advisor checks summarized for all accounts related to the workload.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListCheckSummaries {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_check_summaries_input::Builder,
}
impl ListCheckSummaries {
    /// Creates a new `ListCheckSummaries`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListCheckSummaries,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListCheckSummariesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListCheckSummariesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListCheckSummariesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListCheckSummariesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListCheckSummariesPaginator {
        crate::paginator::ListCheckSummariesPaginator::new(self.handle, self.inner)
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Well-Architected Lens ARN.</p>
    pub fn lens_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_arn(input.into());
        self
    }
    /// <p>Well-Architected Lens ARN.</p>
    pub fn set_lens_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_arn(input);
        self
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn pillar_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pillar_id(input.into());
        self
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn set_pillar_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pillar_id(input);
        self
    }
    /// <p>The ID of the question.</p>
    pub fn question_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.question_id(input.into());
        self
    }
    /// <p>The ID of the question.</p>
    pub fn set_question_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_question_id(input);
        self
    }
    /// <p>The ID of a choice.</p>
    pub fn choice_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.choice_id(input.into());
        self
    }
    /// <p>The ID of a choice.</p>
    pub fn set_choice_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_choice_id(input);
        self
    }
}

/// Fluent builder constructing a request to `ListLenses`.
///
/// <p>List the available lenses.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListLenses {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_lenses_input::Builder,
}
impl ListLenses {
    /// Creates a new `ListLenses`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListLenses,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListLensesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListLensesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListLensesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListLensesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListLensesPaginator {
        crate::paginator::ListLensesPaginator::new(self.handle, self.inner)
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The type of lenses to be returned.</p>
    pub fn lens_type(mut self, input: crate::model::LensType) -> Self {
        self.inner = self.inner.lens_type(input);
        self
    }
    /// <p>The type of lenses to be returned.</p>
    pub fn set_lens_type(mut self, input: std::option::Option<crate::model::LensType>) -> Self {
        self.inner = self.inner.set_lens_type(input);
        self
    }
    /// <p>The status of lenses to be returned.</p>
    pub fn lens_status(mut self, input: crate::model::LensStatusType) -> Self {
        self.inner = self.inner.lens_status(input);
        self
    }
    /// <p>The status of lenses to be returned.</p>
    pub fn set_lens_status(
        mut self,
        input: std::option::Option<crate::model::LensStatusType>,
    ) -> Self {
        self.inner = self.inner.set_lens_status(input);
        self
    }
    /// <p>The full name of the lens.</p>
    pub fn lens_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_name(input.into());
        self
    }
    /// <p>The full name of the lens.</p>
    pub fn set_lens_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_name(input);
        self
    }
}

/// Fluent builder constructing a request to `ListLensReviewImprovements`.
///
/// <p>List lens review improvements.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListLensReviewImprovements {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_lens_review_improvements_input::Builder,
}
impl ListLensReviewImprovements {
    /// Creates a new `ListLensReviewImprovements`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListLensReviewImprovements,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListLensReviewImprovementsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListLensReviewImprovementsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListLensReviewImprovementsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListLensReviewImprovementsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListLensReviewImprovementsPaginator {
        crate::paginator::ListLensReviewImprovementsPaginator::new(self.handle, self.inner)
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn pillar_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pillar_id(input.into());
        self
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn set_pillar_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pillar_id(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(mut self, input: i32) -> Self {
        self.inner = self.inner.milestone_number(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_milestone_number(input);
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListLensReviews`.
///
/// <p>List lens reviews.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListLensReviews {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_lens_reviews_input::Builder,
}
impl ListLensReviews {
    /// Creates a new `ListLensReviews`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListLensReviews,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListLensReviewsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListLensReviewsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListLensReviewsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListLensReviewsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListLensReviewsPaginator {
        crate::paginator::ListLensReviewsPaginator::new(self.handle, self.inner)
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(mut self, input: i32) -> Self {
        self.inner = self.inner.milestone_number(input);
        self
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_milestone_number(input);
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListLensShares`.
///
/// <p>List the lens shares associated with the lens.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListLensShares {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_lens_shares_input::Builder,
}
impl ListLensShares {
    /// Creates a new `ListLensShares`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListLensShares,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListLensSharesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListLensSharesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListLensSharesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListLensSharesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListLensSharesPaginator {
        crate::paginator::ListLensSharesPaginator::new(self.handle, self.inner)
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the lens is shared.</p>
    pub fn shared_with_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.shared_with_prefix(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the lens is shared.</p>
    pub fn set_shared_with_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_shared_with_prefix(input);
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The status of a workload share.</p>
    pub fn status(mut self, input: crate::model::ShareStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of a workload share.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::model::ShareStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
}

/// Fluent builder constructing a request to `ListMilestones`.
///
/// <p>List all milestones for an existing workload.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListMilestones {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_milestones_input::Builder,
}
impl ListMilestones {
    /// Creates a new `ListMilestones`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListMilestones,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListMilestonesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListMilestonesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListMilestonesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListMilestonesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListMilestonesPaginator {
        crate::paginator::ListMilestonesPaginator::new(self.handle, self.inner)
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListNotifications`.
///
/// <p>List lens notifications.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListNotifications {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_notifications_input::Builder,
}
impl ListNotifications {
    /// Creates a new `ListNotifications`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListNotifications,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListNotificationsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListNotificationsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListNotificationsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListNotificationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListNotificationsPaginator {
        crate::paginator::ListNotificationsPaginator::new(self.handle, self.inner)
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListShareInvitations`.
///
/// <p>List the workload invitations.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListShareInvitations {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_share_invitations_input::Builder,
}
impl ListShareInvitations {
    /// Creates a new `ListShareInvitations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListShareInvitations,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListShareInvitationsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListShareInvitationsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListShareInvitationsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListShareInvitationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListShareInvitationsPaginator {
        crate::paginator::ListShareInvitationsPaginator::new(self.handle, self.inner)
    }
    /// <p>An optional string added to the beginning of each workload name returned in the results.</p>
    pub fn workload_name_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_name_prefix(input.into());
        self
    }
    /// <p>An optional string added to the beginning of each workload name returned in the results.</p>
    pub fn set_workload_name_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_workload_name_prefix(input);
        self
    }
    /// <p>An optional string added to the beginning of each lens name returned in the results.</p>
    pub fn lens_name_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_name_prefix(input.into());
        self
    }
    /// <p>An optional string added to the beginning of each lens name returned in the results.</p>
    pub fn set_lens_name_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_name_prefix(input);
        self
    }
    /// <p>The type of share invitations to be returned.</p>
    pub fn share_resource_type(mut self, input: crate::model::ShareResourceType) -> Self {
        self.inner = self.inner.share_resource_type(input);
        self
    }
    /// <p>The type of share invitations to be returned.</p>
    pub fn set_share_resource_type(
        mut self,
        input: std::option::Option<crate::model::ShareResourceType>,
    ) -> Self {
        self.inner = self.inner.set_share_resource_type(input);
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTagsForResource`.
///
/// <p>List the tags for a resource.</p> <note>
/// <p>The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_for_resource_input::Builder,
}
impl ListTagsForResource {
    /// Creates a new `ListTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsForResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN for the workload.</p>
    pub fn workload_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_arn(input.into());
        self
    }
    /// <p>The ARN for the workload.</p>
    pub fn set_workload_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `ListWorkloads`.
///
/// <p>List workloads. Paginated.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListWorkloads {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_workloads_input::Builder,
}
impl ListWorkloads {
    /// Creates a new `ListWorkloads`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListWorkloads,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListWorkloadsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListWorkloadsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListWorkloadsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListWorkloadsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListWorkloadsPaginator {
        crate::paginator::ListWorkloadsPaginator::new(self.handle, self.inner)
    }
    /// <p>An optional string added to the beginning of each workload name returned in the results.</p>
    pub fn workload_name_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_name_prefix(input.into());
        self
    }
    /// <p>An optional string added to the beginning of each workload name returned in the results.</p>
    pub fn set_workload_name_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_workload_name_prefix(input);
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListWorkloadShares`.
///
/// <p>List the workload shares associated with the workload.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListWorkloadShares {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_workload_shares_input::Builder,
}
impl ListWorkloadShares {
    /// Creates a new `ListWorkloadShares`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListWorkloadShares,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListWorkloadSharesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListWorkloadSharesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListWorkloadSharesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListWorkloadSharesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListWorkloadSharesPaginator {
        crate::paginator::ListWorkloadSharesPaginator::new(self.handle, self.inner)
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.</p>
    pub fn shared_with_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.shared_with_prefix(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.</p>
    pub fn set_shared_with_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_shared_with_prefix(input);
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The status of a workload share.</p>
    pub fn status(mut self, input: crate::model::ShareStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of a workload share.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::model::ShareStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
}

/// Fluent builder constructing a request to `TagResource`.
///
/// <p>Adds one or more tags to the specified resource.</p> <note>
/// <p>The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::tag_resource_input::Builder,
}
impl TagResource {
    /// Creates a new `TagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::TagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::TagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN for the workload.</p>
    pub fn workload_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_arn(input.into());
        self
    }
    /// <p>The ARN for the workload.</p>
    pub fn set_workload_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_arn(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the resource.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags for the resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UntagResource`.
///
/// <p>Deletes specified tags from a resource.</p> <note>
/// <p>The WorkloadArn parameter can be either a workload ARN or a custom lens ARN.</p>
/// </note>
/// <p>To specify multiple tags, use separate <b>tagKeys</b> parameters, for example:</p>
/// <p> <code>DELETE /tags/WorkloadArn?tagKeys=key1&amp;tagKeys=key2</code> </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::untag_resource_input::Builder,
}
impl UntagResource {
    /// Creates a new `UntagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UntagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UntagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN for the workload.</p>
    pub fn workload_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_arn(input.into());
        self
    }
    /// <p>The ARN for the workload.</p>
    pub fn set_workload_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_arn(input);
        self
    }
    /// Appends an item to `TagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p>A list of tag keys. Existing tags of the resource whose keys are members of this list are removed from the resource.</p>
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// <p>A list of tag keys. Existing tags of the resource whose keys are members of this list are removed from the resource.</p>
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateAnswer`.
///
/// <p>Update the answer to a specific question in a workload review.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAnswer {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_answer_input::Builder,
}
impl UpdateAnswer {
    /// Creates a new `UpdateAnswer`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateAnswer,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateAnswerError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateAnswerOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateAnswerError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The ID of the question.</p>
    pub fn question_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.question_id(input.into());
        self
    }
    /// <p>The ID of the question.</p>
    pub fn set_question_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_question_id(input);
        self
    }
    /// Appends an item to `SelectedChoices`.
    ///
    /// To override the contents of this collection use [`set_selected_choices`](Self::set_selected_choices).
    ///
    /// <p>List of selected choice IDs in a question answer.</p>
    /// <p>The values entered replace the previously selected choices.</p>
    pub fn selected_choices(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.selected_choices(input.into());
        self
    }
    /// <p>List of selected choice IDs in a question answer.</p>
    /// <p>The values entered replace the previously selected choices.</p>
    pub fn set_selected_choices(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_selected_choices(input);
        self
    }
    /// Adds a key-value pair to `ChoiceUpdates`.
    ///
    /// To override the contents of this collection use [`set_choice_updates`](Self::set_choice_updates).
    ///
    /// <p>A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.</p>
    pub fn choice_updates(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::model::ChoiceUpdate,
    ) -> Self {
        self.inner = self.inner.choice_updates(k.into(), v);
        self
    }
    /// <p>A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.</p>
    pub fn set_choice_updates(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::model::ChoiceUpdate>,
        >,
    ) -> Self {
        self.inner = self.inner.set_choice_updates(input);
        self
    }
    /// <p>The notes associated with the workload.</p>
    pub fn notes(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notes(input.into());
        self
    }
    /// <p>The notes associated with the workload.</p>
    pub fn set_notes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_notes(input);
        self
    }
    /// <p>Defines whether this question is applicable to a lens review.</p>
    pub fn is_applicable(mut self, input: bool) -> Self {
        self.inner = self.inner.is_applicable(input);
        self
    }
    /// <p>Defines whether this question is applicable to a lens review.</p>
    pub fn set_is_applicable(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_applicable(input);
        self
    }
    /// <p>The reason why a question is not applicable to your workload.</p>
    pub fn reason(mut self, input: crate::model::AnswerReason) -> Self {
        self.inner = self.inner.reason(input);
        self
    }
    /// <p>The reason why a question is not applicable to your workload.</p>
    pub fn set_reason(mut self, input: std::option::Option<crate::model::AnswerReason>) -> Self {
        self.inner = self.inner.set_reason(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateGlobalSettings`.
///
/// <p>Updates whether the Amazon Web Services account is opted into organization sharing features.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGlobalSettings {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_global_settings_input::Builder,
}
impl UpdateGlobalSettings {
    /// Creates a new `UpdateGlobalSettings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateGlobalSettings,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateGlobalSettingsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateGlobalSettingsOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateGlobalSettingsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The status of organization sharing settings.</p>
    pub fn organization_sharing_status(
        mut self,
        input: crate::model::OrganizationSharingStatus,
    ) -> Self {
        self.inner = self.inner.organization_sharing_status(input);
        self
    }
    /// <p>The status of organization sharing settings.</p>
    pub fn set_organization_sharing_status(
        mut self,
        input: std::option::Option<crate::model::OrganizationSharingStatus>,
    ) -> Self {
        self.inner = self.inner.set_organization_sharing_status(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateLensReview`.
///
/// <p>Update lens review.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateLensReview {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_lens_review_input::Builder,
}
impl UpdateLensReview {
    /// Creates a new `UpdateLensReview`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateLensReview,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateLensReviewError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateLensReviewOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateLensReviewError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The notes associated with the workload.</p>
    pub fn lens_notes(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_notes(input.into());
        self
    }
    /// <p>The notes associated with the workload.</p>
    pub fn set_lens_notes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_notes(input);
        self
    }
    /// Adds a key-value pair to `PillarNotes`.
    ///
    /// To override the contents of this collection use [`set_pillar_notes`](Self::set_pillar_notes).
    ///
    /// <p>List of pillar notes of a lens review in a workload.</p>
    pub fn pillar_notes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.pillar_notes(k.into(), v.into());
        self
    }
    /// <p>List of pillar notes of a lens review in a workload.</p>
    pub fn set_pillar_notes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_pillar_notes(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateShareInvitation`.
///
/// <p>Update a workload or custom lens share invitation.</p> <note>
/// <p>This API operation can be called independently of any resource. Previous documentation implied that a workload ARN must be specified.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateShareInvitation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_share_invitation_input::Builder,
}
impl UpdateShareInvitation {
    /// Creates a new `UpdateShareInvitation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateShareInvitation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateShareInvitationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateShareInvitationOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateShareInvitationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the share invitation.</p>
    pub fn share_invitation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.share_invitation_id(input.into());
        self
    }
    /// <p>The ID assigned to the share invitation.</p>
    pub fn set_share_invitation_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_share_invitation_id(input);
        self
    }
    /// <p>Share invitation action taken by contributor.</p>
    pub fn share_invitation_action(mut self, input: crate::model::ShareInvitationAction) -> Self {
        self.inner = self.inner.share_invitation_action(input);
        self
    }
    /// <p>Share invitation action taken by contributor.</p>
    pub fn set_share_invitation_action(
        mut self,
        input: std::option::Option<crate::model::ShareInvitationAction>,
    ) -> Self {
        self.inner = self.inner.set_share_invitation_action(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateWorkload`.
///
/// <p>Update an existing workload.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkload {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_workload_input::Builder,
}
impl UpdateWorkload {
    /// Creates a new `UpdateWorkload`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateWorkload,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateWorkloadError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateWorkloadOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateWorkloadError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn workload_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_name(input.into());
        self
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn set_workload_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_name(input);
        self
    }
    /// <p>The description for the workload.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description for the workload.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The environment for the workload.</p>
    pub fn environment(mut self, input: crate::model::WorkloadEnvironment) -> Self {
        self.inner = self.inner.environment(input);
        self
    }
    /// <p>The environment for the workload.</p>
    pub fn set_environment(
        mut self,
        input: std::option::Option<crate::model::WorkloadEnvironment>,
    ) -> Self {
        self.inner = self.inner.set_environment(input);
        self
    }
    /// Appends an item to `AccountIds`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>The list of Amazon Web Services account IDs associated with the workload.</p>
    pub fn account_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_ids(input.into());
        self
    }
    /// <p>The list of Amazon Web Services account IDs associated with the workload.</p>
    pub fn set_account_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_account_ids(input);
        self
    }
    /// Appends an item to `AwsRegions`.
    ///
    /// To override the contents of this collection use [`set_aws_regions`](Self::set_aws_regions).
    ///
    /// <p>The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.</p>
    pub fn aws_regions(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.aws_regions(input.into());
        self
    }
    /// <p>The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.</p>
    pub fn set_aws_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_aws_regions(input);
        self
    }
    /// Appends an item to `NonAwsRegions`.
    ///
    /// To override the contents of this collection use [`set_non_aws_regions`](Self::set_non_aws_regions).
    ///
    /// <p> The list of non-Amazon Web Services Regions associated with the workload.</p>
    pub fn non_aws_regions(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.non_aws_regions(input.into());
        self
    }
    /// <p> The list of non-Amazon Web Services Regions associated with the workload.</p>
    pub fn set_non_aws_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_non_aws_regions(input);
        self
    }
    /// Appends an item to `PillarPriorities`.
    ///
    /// To override the contents of this collection use [`set_pillar_priorities`](Self::set_pillar_priorities).
    ///
    /// <p>The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn pillar_priorities(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pillar_priorities(input.into());
        self
    }
    /// <p>The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn set_pillar_priorities(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_pillar_priorities(input);
        self
    }
    /// <p>The URL of the architectural design for the workload.</p>
    pub fn architectural_design(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.architectural_design(input.into());
        self
    }
    /// <p>The URL of the architectural design for the workload.</p>
    pub fn set_architectural_design(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_architectural_design(input);
        self
    }
    /// <p>The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.</p>
    pub fn review_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.review_owner(input.into());
        self
    }
    /// <p>The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.</p>
    pub fn set_review_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_review_owner(input);
        self
    }
    /// <p>Flag indicating whether the workload owner has acknowledged that the <i>Review owner</i> field is required.</p>
    /// <p>If a <b>Review owner</b> is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.</p>
    pub fn is_review_owner_update_acknowledged(mut self, input: bool) -> Self {
        self.inner = self.inner.is_review_owner_update_acknowledged(input);
        self
    }
    /// <p>Flag indicating whether the workload owner has acknowledged that the <i>Review owner</i> field is required.</p>
    /// <p>If a <b>Review owner</b> is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.</p>
    pub fn set_is_review_owner_update_acknowledged(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self.inner.set_is_review_owner_update_acknowledged(input);
        self
    }
    /// <p>The industry type for the workload.</p>
    /// <p>If specified, must be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>Agriculture</code> </p> </li>
    /// <li> <p> <code>Automobile</code> </p> </li>
    /// <li> <p> <code>Defense</code> </p> </li>
    /// <li> <p> <code>Design and Engineering</code> </p> </li>
    /// <li> <p> <code>Digital Advertising</code> </p> </li>
    /// <li> <p> <code>Education</code> </p> </li>
    /// <li> <p> <code>Environmental Protection</code> </p> </li>
    /// <li> <p> <code>Financial Services</code> </p> </li>
    /// <li> <p> <code>Gaming</code> </p> </li>
    /// <li> <p> <code>General Public Services</code> </p> </li>
    /// <li> <p> <code>Healthcare</code> </p> </li>
    /// <li> <p> <code>Hospitality</code> </p> </li>
    /// <li> <p> <code>InfoTech</code> </p> </li>
    /// <li> <p> <code>Justice and Public Safety</code> </p> </li>
    /// <li> <p> <code>Life Sciences</code> </p> </li>
    /// <li> <p> <code>Manufacturing</code> </p> </li>
    /// <li> <p> <code>Media &amp; Entertainment</code> </p> </li>
    /// <li> <p> <code>Mining &amp; Resources</code> </p> </li>
    /// <li> <p> <code>Oil &amp; Gas</code> </p> </li>
    /// <li> <p> <code>Power &amp; Utilities</code> </p> </li>
    /// <li> <p> <code>Professional Services</code> </p> </li>
    /// <li> <p> <code>Real Estate &amp; Construction</code> </p> </li>
    /// <li> <p> <code>Retail &amp; Wholesale</code> </p> </li>
    /// <li> <p> <code>Social Protection</code> </p> </li>
    /// <li> <p> <code>Telecommunications</code> </p> </li>
    /// <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li>
    /// <li> <p> <code>Other</code> </p> </li>
    /// </ul>
    pub fn industry_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.industry_type(input.into());
        self
    }
    /// <p>The industry type for the workload.</p>
    /// <p>If specified, must be one of the following:</p>
    /// <ul>
    /// <li> <p> <code>Agriculture</code> </p> </li>
    /// <li> <p> <code>Automobile</code> </p> </li>
    /// <li> <p> <code>Defense</code> </p> </li>
    /// <li> <p> <code>Design and Engineering</code> </p> </li>
    /// <li> <p> <code>Digital Advertising</code> </p> </li>
    /// <li> <p> <code>Education</code> </p> </li>
    /// <li> <p> <code>Environmental Protection</code> </p> </li>
    /// <li> <p> <code>Financial Services</code> </p> </li>
    /// <li> <p> <code>Gaming</code> </p> </li>
    /// <li> <p> <code>General Public Services</code> </p> </li>
    /// <li> <p> <code>Healthcare</code> </p> </li>
    /// <li> <p> <code>Hospitality</code> </p> </li>
    /// <li> <p> <code>InfoTech</code> </p> </li>
    /// <li> <p> <code>Justice and Public Safety</code> </p> </li>
    /// <li> <p> <code>Life Sciences</code> </p> </li>
    /// <li> <p> <code>Manufacturing</code> </p> </li>
    /// <li> <p> <code>Media &amp; Entertainment</code> </p> </li>
    /// <li> <p> <code>Mining &amp; Resources</code> </p> </li>
    /// <li> <p> <code>Oil &amp; Gas</code> </p> </li>
    /// <li> <p> <code>Power &amp; Utilities</code> </p> </li>
    /// <li> <p> <code>Professional Services</code> </p> </li>
    /// <li> <p> <code>Real Estate &amp; Construction</code> </p> </li>
    /// <li> <p> <code>Retail &amp; Wholesale</code> </p> </li>
    /// <li> <p> <code>Social Protection</code> </p> </li>
    /// <li> <p> <code>Telecommunications</code> </p> </li>
    /// <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li>
    /// <li> <p> <code>Other</code> </p> </li>
    /// </ul>
    pub fn set_industry_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_industry_type(input);
        self
    }
    /// <p>The industry for the workload.</p>
    pub fn industry(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.industry(input.into());
        self
    }
    /// <p>The industry for the workload.</p>
    pub fn set_industry(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_industry(input);
        self
    }
    /// <p>The notes associated with the workload.</p>
    pub fn notes(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notes(input.into());
        self
    }
    /// <p>The notes associated with the workload.</p>
    pub fn set_notes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_notes(input);
        self
    }
    /// <p>The improvement status for a workload.</p>
    pub fn improvement_status(mut self, input: crate::model::WorkloadImprovementStatus) -> Self {
        self.inner = self.inner.improvement_status(input);
        self
    }
    /// <p>The improvement status for a workload.</p>
    pub fn set_improvement_status(
        mut self,
        input: std::option::Option<crate::model::WorkloadImprovementStatus>,
    ) -> Self {
        self.inner = self.inner.set_improvement_status(input);
        self
    }
    /// <p>Well-Architected discovery configuration settings to associate to the workload.</p>
    pub fn discovery_config(mut self, input: crate::model::WorkloadDiscoveryConfig) -> Self {
        self.inner = self.inner.discovery_config(input);
        self
    }
    /// <p>Well-Architected discovery configuration settings to associate to the workload.</p>
    pub fn set_discovery_config(
        mut self,
        input: std::option::Option<crate::model::WorkloadDiscoveryConfig>,
    ) -> Self {
        self.inner = self.inner.set_discovery_config(input);
        self
    }
    /// Appends an item to `Applications`.
    ///
    /// To override the contents of this collection use [`set_applications`](Self::set_applications).
    ///
    /// <p>List of AppRegistry application ARNs to associate to the workload.</p>
    pub fn applications(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.applications(input.into());
        self
    }
    /// <p>List of AppRegistry application ARNs to associate to the workload.</p>
    pub fn set_applications(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_applications(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateWorkloadShare`.
///
/// <p>Update a workload share.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkloadShare {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_workload_share_input::Builder,
}
impl UpdateWorkloadShare {
    /// Creates a new `UpdateWorkloadShare`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateWorkloadShare,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateWorkloadShareError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateWorkloadShareOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateWorkloadShareError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID associated with the workload share.</p>
    pub fn share_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.share_id(input.into());
        self
    }
    /// <p>The ID associated with the workload share.</p>
    pub fn set_share_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_share_id(input);
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>Permission granted on a workload share.</p>
    pub fn permission_type(mut self, input: crate::model::PermissionType) -> Self {
        self.inner = self.inner.permission_type(input);
        self
    }
    /// <p>Permission granted on a workload share.</p>
    pub fn set_permission_type(
        mut self,
        input: std::option::Option<crate::model::PermissionType>,
    ) -> Self {
        self.inner = self.inner.set_permission_type(input);
        self
    }
}

/// Fluent builder constructing a request to `UpgradeLensReview`.
///
/// <p>Upgrade lens review.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpgradeLensReview {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::upgrade_lens_review_input::Builder,
}
impl UpgradeLensReview {
    /// Creates a new `UpgradeLensReview`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpgradeLensReview,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpgradeLensReviewError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpgradeLensReviewOutput,
        aws_smithy_http::result::SdkError<crate::error::UpgradeLensReviewError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The name of the milestone in a workload.</p>
    /// <p>Milestone names must be unique within a workload.</p>
    pub fn milestone_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.milestone_name(input.into());
        self
    }
    /// <p>The name of the milestone in a workload.</p>
    /// <p>Milestone names must be unique within a workload.</p>
    pub fn set_milestone_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_milestone_name(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}
