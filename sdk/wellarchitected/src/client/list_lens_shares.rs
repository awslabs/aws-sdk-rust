// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListLensShares`](crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`lens_alias(impl Into<String>)`](crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder::lens_alias) / [`set_lens_alias(Option<String>)`](crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder::set_lens_alias):<br>required: **true**<br><p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p><br>
    ///   - [`shared_with_prefix(impl Into<String>)`](crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder::shared_with_prefix) / [`set_shared_with_prefix(Option<String>)`](crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder::set_shared_with_prefix):<br>required: **false**<br><p>The Amazon Web Services account ID, organization ID, or organizational unit (OU) ID with which the lens is shared.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder::set_next_token):<br>required: **false**<br><p>The token to use to retrieve the next set of results.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return for this request.</p><br>
    ///   - [`status(ShareStatus)`](crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder::status) / [`set_status(Option<ShareStatus>)`](crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder::set_status):<br>required: **false**<br><p>The status of the share request.</p><br>
    /// - On success, responds with [`ListLensSharesOutput`](crate::operation::list_lens_shares::ListLensSharesOutput) with field(s):
    ///   - [`lens_share_summaries(Option<Vec::<LensShareSummary>>)`](crate::operation::list_lens_shares::ListLensSharesOutput::lens_share_summaries): <p>A list of lens share summaries.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_lens_shares::ListLensSharesOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListLensSharesError>`](crate::operation::list_lens_shares::ListLensSharesError)
    pub fn list_lens_shares(&self) -> crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder {
        crate::operation::list_lens_shares::builders::ListLensSharesFluentBuilder::new(self.handle.clone())
    }
}
