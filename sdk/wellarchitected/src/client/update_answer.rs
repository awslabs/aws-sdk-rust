// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateAnswer`](crate::client::fluent_builders::UpdateAnswer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::UpdateAnswer::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::UpdateAnswer::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::UpdateAnswer::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::UpdateAnswer::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`question_id(impl Into<String>)`](crate::client::fluent_builders::UpdateAnswer::question_id) / [`set_question_id(Option<String>)`](crate::client::fluent_builders::UpdateAnswer::set_question_id): <p>The ID of the question.</p>
    ///   - [`selected_choices(Vec<String>)`](crate::client::fluent_builders::UpdateAnswer::selected_choices) / [`set_selected_choices(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateAnswer::set_selected_choices): <p>List of selected choice IDs in a question answer.</p>  <p>The values entered replace the previously selected choices.</p>
    ///   - [`choice_updates(HashMap<String, ChoiceUpdate>)`](crate::client::fluent_builders::UpdateAnswer::choice_updates) / [`set_choice_updates(Option<HashMap<String, ChoiceUpdate>>)`](crate::client::fluent_builders::UpdateAnswer::set_choice_updates): <p>A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.</p>
    ///   - [`notes(impl Into<String>)`](crate::client::fluent_builders::UpdateAnswer::notes) / [`set_notes(Option<String>)`](crate::client::fluent_builders::UpdateAnswer::set_notes): <p>The notes associated with the workload.</p>
    ///   - [`is_applicable(bool)`](crate::client::fluent_builders::UpdateAnswer::is_applicable) / [`set_is_applicable(bool)`](crate::client::fluent_builders::UpdateAnswer::set_is_applicable): <p>Defines whether this question is applicable to a lens review.</p>
    ///   - [`reason(AnswerReason)`](crate::client::fluent_builders::UpdateAnswer::reason) / [`set_reason(Option<AnswerReason>)`](crate::client::fluent_builders::UpdateAnswer::set_reason): <p>The reason why a question is not applicable to your workload.</p>
    /// - On success, responds with [`UpdateAnswerOutput`](crate::output::UpdateAnswerOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::UpdateAnswerOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_alias(Option<String>)`](crate::output::UpdateAnswerOutput::lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`lens_arn(Option<String>)`](crate::output::UpdateAnswerOutput::lens_arn): <p>The ARN for the lens.</p>
    ///   - [`answer(Option<Answer>)`](crate::output::UpdateAnswerOutput::answer): <p>An answer of the question.</p>
    /// - On failure, responds with [`SdkError<UpdateAnswerError>`](crate::error::UpdateAnswerError)
    pub fn update_answer(&self) -> crate::client::fluent_builders::UpdateAnswer {
        crate::client::fluent_builders::UpdateAnswer::new(self.handle.clone())
    }
}
