// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetLens`](crate::operation::get_lens::builders::GetLensFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`lens_alias(impl Into<String>)`](crate::operation::get_lens::builders::GetLensFluentBuilder::lens_alias) / [`set_lens_alias(Option<String>)`](crate::operation::get_lens::builders::GetLensFluentBuilder::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`lens_version(impl Into<String>)`](crate::operation::get_lens::builders::GetLensFluentBuilder::lens_version) / [`set_lens_version(Option<String>)`](crate::operation::get_lens::builders::GetLensFluentBuilder::set_lens_version): <p>The lens version to be retrieved.</p>
    /// - On success, responds with [`GetLensOutput`](crate::operation::get_lens::GetLensOutput) with field(s):
    ///   - [`lens(Option<Lens>)`](crate::operation::get_lens::GetLensOutput::lens): <p>A lens return object.</p>
    /// - On failure, responds with [`SdkError<GetLensError>`](crate::operation::get_lens::GetLensError)
    pub fn get_lens(&self) -> crate::operation::get_lens::builders::GetLensFluentBuilder {
        crate::operation::get_lens::builders::GetLensFluentBuilder::new(self.handle.clone())
    }
}
