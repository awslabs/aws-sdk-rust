// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_associate_lenses;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_create_lens_share;

pub(crate) mod shape_create_lens_version;

pub(crate) mod shape_create_milestone;

pub(crate) mod shape_create_workload;

pub(crate) mod shape_create_workload_share;

pub(crate) mod shape_delete_lens;

pub(crate) mod shape_delete_lens_share;

pub(crate) mod shape_delete_workload;

pub(crate) mod shape_delete_workload_share;

pub(crate) mod shape_disassociate_lenses;

pub(crate) mod shape_export_lens;

pub(crate) mod shape_get_answer;

pub(crate) mod shape_get_lens;

pub(crate) mod shape_get_lens_review;

pub(crate) mod shape_get_lens_review_report;

pub(crate) mod shape_get_lens_version_difference;

pub(crate) mod shape_get_milestone;

pub(crate) mod shape_get_workload;

pub(crate) mod shape_import_lens;

pub(crate) mod shape_list_answers;

pub(crate) mod shape_list_check_details;

pub(crate) mod shape_list_check_summaries;

pub(crate) mod shape_list_lens_review_improvements;

pub(crate) mod shape_list_lens_reviews;

pub(crate) mod shape_list_lens_shares;

pub(crate) mod shape_list_lenses;

pub(crate) mod shape_list_milestones;

pub(crate) mod shape_list_notifications;

pub(crate) mod shape_list_share_invitations;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_workload_shares;

pub(crate) mod shape_list_workloads;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_answer;

pub(crate) mod shape_update_global_settings;

pub(crate) mod shape_update_lens_review;

pub(crate) mod shape_update_share_invitation;

pub(crate) mod shape_update_workload;

pub(crate) mod shape_update_workload_share;

pub(crate) mod shape_upgrade_lens_review;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_associate_lenses_input;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_lens_share_input;

pub(crate) mod shape_create_lens_version_input;

pub(crate) mod shape_create_milestone_input;

pub(crate) mod shape_create_workload_input;

pub(crate) mod shape_create_workload_share_input;

pub(crate) mod shape_disassociate_lenses_input;

pub(crate) mod shape_import_lens_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_list_check_details_input;

pub(crate) mod shape_list_check_summaries_input;

pub(crate) mod shape_list_milestones_input;

pub(crate) mod shape_list_notifications_input;

pub(crate) mod shape_list_workloads_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_update_answer_input;

pub(crate) mod shape_update_global_settings_input;

pub(crate) mod shape_update_lens_review_input;

pub(crate) mod shape_update_share_invitation_input;

pub(crate) mod shape_update_workload_input;

pub(crate) mod shape_update_workload_share_input;

pub(crate) mod shape_upgrade_lens_review_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_answer;

pub(crate) mod shape_answer_summaries;

pub(crate) mod shape_check_details;

pub(crate) mod shape_check_summaries;

pub(crate) mod shape_choice_update;

pub(crate) mod shape_improvement_summaries;

pub(crate) mod shape_lens;

pub(crate) mod shape_lens_review;

pub(crate) mod shape_lens_review_report;

pub(crate) mod shape_lens_review_summaries;

pub(crate) mod shape_lens_share_summaries;

pub(crate) mod shape_lens_summaries;

pub(crate) mod shape_milestone;

pub(crate) mod shape_milestone_summaries;

pub(crate) mod shape_notification_summaries;

pub(crate) mod shape_share_invitation;

pub(crate) mod shape_share_invitation_summaries;

pub(crate) mod shape_tag_map;

pub(crate) mod shape_validation_exception_field_list;

pub(crate) mod shape_version_differences;

pub(crate) mod shape_workload;

pub(crate) mod shape_workload_discovery_config;

pub(crate) mod shape_workload_share;

pub(crate) mod shape_workload_share_summaries;

pub(crate) mod shape_workload_summaries;

pub(crate) mod shape_answer_summary;

pub(crate) mod shape_check_detail;

pub(crate) mod shape_check_summary;

pub(crate) mod shape_choice_answers;

pub(crate) mod shape_choices;

pub(crate) mod shape_improvement_summary;

pub(crate) mod shape_lens_review_summary;

pub(crate) mod shape_lens_share_summary;

pub(crate) mod shape_lens_summary;

pub(crate) mod shape_milestone_summary;

pub(crate) mod shape_notification_summary;

pub(crate) mod shape_pillar_differences;

pub(crate) mod shape_pillar_review_summaries;

pub(crate) mod shape_risk_counts;

pub(crate) mod shape_selected_choices;

pub(crate) mod shape_share_invitation_summary;

pub(crate) mod shape_validation_exception_field;

pub(crate) mod shape_workload_account_ids;

pub(crate) mod shape_workload_applications;

pub(crate) mod shape_workload_aws_regions;

pub(crate) mod shape_workload_lenses;

pub(crate) mod shape_workload_non_aws_regions;

pub(crate) mod shape_workload_pillar_priorities;

pub(crate) mod shape_workload_share_summary;

pub(crate) mod shape_workload_summary;

pub(crate) mod shape_account_summary;

pub(crate) mod shape_choice;

pub(crate) mod shape_choice_answer;

pub(crate) mod shape_choice_answer_summaries;

pub(crate) mod shape_choice_improvement_plans;

pub(crate) mod shape_lens_upgrade_summary;

pub(crate) mod shape_pillar_difference;

pub(crate) mod shape_pillar_review_summary;

pub(crate) mod shape_additional_resources_list;

pub(crate) mod shape_choice_answer_summary;

pub(crate) mod shape_choice_content;

pub(crate) mod shape_choice_improvement_plan;

pub(crate) mod shape_question_differences;

pub(crate) mod shape_additional_resources;

pub(crate) mod shape_question_difference;

pub(crate) mod shape_urls;
