// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCheckSummariesInput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub workload_id: ::std::option::Option<::std::string::String>,
    /// <p>The token to use to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return for this request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Well-Architected Lens ARN.</p>
    pub lens_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub pillar_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the question.</p>
    pub question_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of a choice.</p>
    pub choice_id: ::std::option::Option<::std::string::String>,
}
impl ListCheckSummariesInput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> ::std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Well-Architected Lens ARN.</p>
    pub fn lens_arn(&self) -> ::std::option::Option<&str> {
        self.lens_arn.as_deref()
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn pillar_id(&self) -> ::std::option::Option<&str> {
        self.pillar_id.as_deref()
    }
    /// <p>The ID of the question.</p>
    pub fn question_id(&self) -> ::std::option::Option<&str> {
        self.question_id.as_deref()
    }
    /// <p>The ID of a choice.</p>
    pub fn choice_id(&self) -> ::std::option::Option<&str> {
        self.choice_id.as_deref()
    }
}
impl ListCheckSummariesInput {
    /// Creates a new builder-style object to manufacture [`ListCheckSummariesInput`](crate::operation::list_check_summaries::ListCheckSummariesInput).
    pub fn builder() -> crate::operation::list_check_summaries::builders::ListCheckSummariesInputBuilder {
        crate::operation::list_check_summaries::builders::ListCheckSummariesInputBuilder::default()
    }
}

/// A builder for [`ListCheckSummariesInput`](crate::operation::list_check_summaries::ListCheckSummariesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListCheckSummariesInputBuilder {
    pub(crate) workload_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) lens_arn: ::std::option::Option<::std::string::String>,
    pub(crate) pillar_id: ::std::option::Option<::std::string::String>,
    pub(crate) question_id: ::std::option::Option<::std::string::String>,
    pub(crate) choice_id: ::std::option::Option<::std::string::String>,
}
impl ListCheckSummariesInputBuilder {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    /// This field is required.
    pub fn workload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_id = input;
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn get_workload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_id
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Well-Architected Lens ARN.</p>
    /// This field is required.
    pub fn lens_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lens_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Well-Architected Lens ARN.</p>
    pub fn set_lens_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lens_arn = input;
        self
    }
    /// <p>Well-Architected Lens ARN.</p>
    pub fn get_lens_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.lens_arn
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    /// This field is required.
    pub fn pillar_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pillar_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn set_pillar_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pillar_id = input;
        self
    }
    /// <p>The ID used to identify a pillar, for example, <code>security</code>.</p>
    /// <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn get_pillar_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pillar_id
    }
    /// <p>The ID of the question.</p>
    /// This field is required.
    pub fn question_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.question_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the question.</p>
    pub fn set_question_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.question_id = input;
        self
    }
    /// <p>The ID of the question.</p>
    pub fn get_question_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.question_id
    }
    /// <p>The ID of a choice.</p>
    /// This field is required.
    pub fn choice_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.choice_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a choice.</p>
    pub fn set_choice_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.choice_id = input;
        self
    }
    /// <p>The ID of a choice.</p>
    pub fn get_choice_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.choice_id
    }
    /// Consumes the builder and constructs a [`ListCheckSummariesInput`](crate::operation::list_check_summaries::ListCheckSummariesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_check_summaries::ListCheckSummariesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_check_summaries::ListCheckSummariesInput {
            workload_id: self.workload_id,
            next_token: self.next_token,
            max_results: self.max_results,
            lens_arn: self.lens_arn,
            pillar_id: self.pillar_id,
            question_id: self.question_id,
            choice_id: self.choice_id,
        })
    }
}
