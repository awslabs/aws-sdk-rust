// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Output of a list milestones call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMilestonesOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>A list of milestone summaries.</p>
    #[doc(hidden)]
    pub milestone_summaries: std::option::Option<std::vec::Vec<crate::types::MilestoneSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListMilestonesOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>A list of milestone summaries.</p>
    pub fn milestone_summaries(&self) -> std::option::Option<&[crate::types::MilestoneSummary]> {
        self.milestone_summaries.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMilestonesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListMilestonesOutput {
    /// Creates a new builder-style object to manufacture [`ListMilestonesOutput`](crate::operation::list_milestones::ListMilestonesOutput).
    pub fn builder() -> crate::operation::list_milestones::builders::ListMilestonesOutputBuilder {
        crate::operation::list_milestones::builders::ListMilestonesOutputBuilder::default()
    }
}

/// A builder for [`ListMilestonesOutput`](crate::operation::list_milestones::ListMilestonesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListMilestonesOutputBuilder {
    pub(crate) workload_id: std::option::Option<std::string::String>,
    pub(crate) milestone_summaries:
        std::option::Option<std::vec::Vec<crate::types::MilestoneSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListMilestonesOutputBuilder {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workload_id = Some(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workload_id = input;
        self
    }
    /// Appends an item to `milestone_summaries`.
    ///
    /// To override the contents of this collection use [`set_milestone_summaries`](Self::set_milestone_summaries).
    ///
    /// <p>A list of milestone summaries.</p>
    pub fn milestone_summaries(mut self, input: crate::types::MilestoneSummary) -> Self {
        let mut v = self.milestone_summaries.unwrap_or_default();
        v.push(input);
        self.milestone_summaries = Some(v);
        self
    }
    /// <p>A list of milestone summaries.</p>
    pub fn set_milestone_summaries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MilestoneSummary>>,
    ) -> Self {
        self.milestone_summaries = input;
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListMilestonesOutput`](crate::operation::list_milestones::ListMilestonesOutput).
    pub fn build(self) -> crate::operation::list_milestones::ListMilestonesOutput {
        crate::operation::list_milestones::ListMilestonesOutput {
            workload_id: self.workload_id,
            milestone_summaries: self.milestone_summaries,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
