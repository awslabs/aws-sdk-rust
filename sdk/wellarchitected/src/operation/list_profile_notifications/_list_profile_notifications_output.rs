// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListProfileNotificationsOutput {
    /// <p>Notification summaries.</p>
    pub notification_summaries: ::std::option::Option<::std::vec::Vec<crate::types::ProfileNotificationSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListProfileNotificationsOutput {
    /// <p>Notification summaries.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.notification_summaries.is_none()`.
    pub fn notification_summaries(&self) -> &[crate::types::ProfileNotificationSummary] {
        self.notification_summaries.as_deref().unwrap_or_default()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListProfileNotificationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListProfileNotificationsOutput {
    /// Creates a new builder-style object to manufacture [`ListProfileNotificationsOutput`](crate::operation::list_profile_notifications::ListProfileNotificationsOutput).
    pub fn builder() -> crate::operation::list_profile_notifications::builders::ListProfileNotificationsOutputBuilder {
        crate::operation::list_profile_notifications::builders::ListProfileNotificationsOutputBuilder::default()
    }
}

/// A builder for [`ListProfileNotificationsOutput`](crate::operation::list_profile_notifications::ListProfileNotificationsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListProfileNotificationsOutputBuilder {
    pub(crate) notification_summaries: ::std::option::Option<::std::vec::Vec<crate::types::ProfileNotificationSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListProfileNotificationsOutputBuilder {
    /// Appends an item to `notification_summaries`.
    ///
    /// To override the contents of this collection use [`set_notification_summaries`](Self::set_notification_summaries).
    ///
    /// <p>Notification summaries.</p>
    pub fn notification_summaries(mut self, input: crate::types::ProfileNotificationSummary) -> Self {
        let mut v = self.notification_summaries.unwrap_or_default();
        v.push(input);
        self.notification_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>Notification summaries.</p>
    pub fn set_notification_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProfileNotificationSummary>>) -> Self {
        self.notification_summaries = input;
        self
    }
    /// <p>Notification summaries.</p>
    pub fn get_notification_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProfileNotificationSummary>> {
        &self.notification_summaries
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListProfileNotificationsOutput`](crate::operation::list_profile_notifications::ListProfileNotificationsOutput).
    pub fn build(self) -> crate::operation::list_profile_notifications::ListProfileNotificationsOutput {
        crate::operation::list_profile_notifications::ListProfileNotificationsOutput {
            notification_summaries: self.notification_summaries,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
