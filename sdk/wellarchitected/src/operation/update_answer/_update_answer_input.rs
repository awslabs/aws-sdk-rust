// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input to update answer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAnswerInput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    #[doc(hidden)]
    pub lens_alias: std::option::Option<std::string::String>,
    /// <p>The ID of the question.</p>
    #[doc(hidden)]
    pub question_id: std::option::Option<std::string::String>,
    /// <p>List of selected choice IDs in a question answer.</p>
    /// <p>The values entered replace the previously selected choices.</p>
    #[doc(hidden)]
    pub selected_choices: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.</p>
    #[doc(hidden)]
    pub choice_updates: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ChoiceUpdate>,
    >,
    /// <p>The notes associated with the workload.</p>
    #[doc(hidden)]
    pub notes: std::option::Option<std::string::String>,
    /// <p>Defines whether this question is applicable to a lens review.</p>
    #[doc(hidden)]
    pub is_applicable: bool,
    /// <p>The reason why a question is not applicable to your workload.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<crate::types::AnswerReason>,
}
impl UpdateAnswerInput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(&self) -> std::option::Option<&str> {
        self.lens_alias.as_deref()
    }
    /// <p>The ID of the question.</p>
    pub fn question_id(&self) -> std::option::Option<&str> {
        self.question_id.as_deref()
    }
    /// <p>List of selected choice IDs in a question answer.</p>
    /// <p>The values entered replace the previously selected choices.</p>
    pub fn selected_choices(&self) -> std::option::Option<&[std::string::String]> {
        self.selected_choices.as_deref()
    }
    /// <p>A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.</p>
    pub fn choice_updates(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::ChoiceUpdate>,
    > {
        self.choice_updates.as_ref()
    }
    /// <p>The notes associated with the workload.</p>
    pub fn notes(&self) -> std::option::Option<&str> {
        self.notes.as_deref()
    }
    /// <p>Defines whether this question is applicable to a lens review.</p>
    pub fn is_applicable(&self) -> bool {
        self.is_applicable
    }
    /// <p>The reason why a question is not applicable to your workload.</p>
    pub fn reason(&self) -> std::option::Option<&crate::types::AnswerReason> {
        self.reason.as_ref()
    }
}
impl UpdateAnswerInput {
    /// Creates a new builder-style object to manufacture [`UpdateAnswerInput`](crate::operation::update_answer::UpdateAnswerInput).
    pub fn builder() -> crate::operation::update_answer::builders::UpdateAnswerInputBuilder {
        crate::operation::update_answer::builders::UpdateAnswerInputBuilder::default()
    }
}

/// A builder for [`UpdateAnswerInput`](crate::operation::update_answer::UpdateAnswerInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateAnswerInputBuilder {
    pub(crate) workload_id: std::option::Option<std::string::String>,
    pub(crate) lens_alias: std::option::Option<std::string::String>,
    pub(crate) question_id: std::option::Option<std::string::String>,
    pub(crate) selected_choices: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) choice_updates: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::ChoiceUpdate>,
    >,
    pub(crate) notes: std::option::Option<std::string::String>,
    pub(crate) is_applicable: std::option::Option<bool>,
    pub(crate) reason: std::option::Option<crate::types::AnswerReason>,
}
impl UpdateAnswerInputBuilder {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workload_id = Some(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workload_id = input;
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.lens_alias = Some(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lens_alias = input;
        self
    }
    /// <p>The ID of the question.</p>
    pub fn question_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.question_id = Some(input.into());
        self
    }
    /// <p>The ID of the question.</p>
    pub fn set_question_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.question_id = input;
        self
    }
    /// Appends an item to `selected_choices`.
    ///
    /// To override the contents of this collection use [`set_selected_choices`](Self::set_selected_choices).
    ///
    /// <p>List of selected choice IDs in a question answer.</p>
    /// <p>The values entered replace the previously selected choices.</p>
    pub fn selected_choices(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.selected_choices.unwrap_or_default();
        v.push(input.into());
        self.selected_choices = Some(v);
        self
    }
    /// <p>List of selected choice IDs in a question answer.</p>
    /// <p>The values entered replace the previously selected choices.</p>
    pub fn set_selected_choices(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.selected_choices = input;
        self
    }
    /// Adds a key-value pair to `choice_updates`.
    ///
    /// To override the contents of this collection use [`set_choice_updates`](Self::set_choice_updates).
    ///
    /// <p>A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.</p>
    pub fn choice_updates(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::ChoiceUpdate,
    ) -> Self {
        let mut hash_map = self.choice_updates.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.choice_updates = Some(hash_map);
        self
    }
    /// <p>A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.</p>
    pub fn set_choice_updates(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::ChoiceUpdate>,
        >,
    ) -> Self {
        self.choice_updates = input;
        self
    }
    /// <p>The notes associated with the workload.</p>
    pub fn notes(mut self, input: impl Into<std::string::String>) -> Self {
        self.notes = Some(input.into());
        self
    }
    /// <p>The notes associated with the workload.</p>
    pub fn set_notes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.notes = input;
        self
    }
    /// <p>Defines whether this question is applicable to a lens review.</p>
    pub fn is_applicable(mut self, input: bool) -> Self {
        self.is_applicable = Some(input);
        self
    }
    /// <p>Defines whether this question is applicable to a lens review.</p>
    pub fn set_is_applicable(mut self, input: std::option::Option<bool>) -> Self {
        self.is_applicable = input;
        self
    }
    /// <p>The reason why a question is not applicable to your workload.</p>
    pub fn reason(mut self, input: crate::types::AnswerReason) -> Self {
        self.reason = Some(input);
        self
    }
    /// <p>The reason why a question is not applicable to your workload.</p>
    pub fn set_reason(mut self, input: std::option::Option<crate::types::AnswerReason>) -> Self {
        self.reason = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateAnswerInput`](crate::operation::update_answer::UpdateAnswerInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_answer::UpdateAnswerInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_answer::UpdateAnswerInput {
            workload_id: self.workload_id,
            lens_alias: self.lens_alias,
            question_id: self.question_id,
            selected_choices: self.selected_choices,
            choice_updates: self.choice_updates,
            notes: self.notes,
            is_applicable: self.is_applicable.unwrap_or_default(),
            reason: self.reason,
        })
    }
}
