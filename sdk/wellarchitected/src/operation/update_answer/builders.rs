// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_answer::_update_answer_output::UpdateAnswerOutputBuilder;

pub use crate::operation::update_answer::_update_answer_input::UpdateAnswerInputBuilder;

/// Fluent builder constructing a request to `UpdateAnswer`.
///
/// <p>Update the answer to a specific question in a workload review.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAnswerFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_answer::builders::UpdateAnswerInputBuilder,
}
impl UpdateAnswerFluentBuilder {
    /// Creates a new `UpdateAnswer`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_answer::UpdateAnswer,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_answer::UpdateAnswerError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_answer::UpdateAnswerOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_answer::UpdateAnswerError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workload_id(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workload_id(input);
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lens_alias(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lens_alias(input);
        self
    }
    /// <p>The ID of the question.</p>
    pub fn question_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.question_id(input.into());
        self
    }
    /// <p>The ID of the question.</p>
    pub fn set_question_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_question_id(input);
        self
    }
    /// Appends an item to `SelectedChoices`.
    ///
    /// To override the contents of this collection use [`set_selected_choices`](Self::set_selected_choices).
    ///
    /// <p>List of selected choice IDs in a question answer.</p>
    /// <p>The values entered replace the previously selected choices.</p>
    pub fn selected_choices(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.selected_choices(input.into());
        self
    }
    /// <p>List of selected choice IDs in a question answer.</p>
    /// <p>The values entered replace the previously selected choices.</p>
    pub fn set_selected_choices(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_selected_choices(input);
        self
    }
    /// Adds a key-value pair to `ChoiceUpdates`.
    ///
    /// To override the contents of this collection use [`set_choice_updates`](Self::set_choice_updates).
    ///
    /// <p>A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.</p>
    pub fn choice_updates(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::ChoiceUpdate,
    ) -> Self {
        self.inner = self.inner.choice_updates(k.into(), v);
        self
    }
    /// <p>A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.</p>
    pub fn set_choice_updates(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::ChoiceUpdate>,
        >,
    ) -> Self {
        self.inner = self.inner.set_choice_updates(input);
        self
    }
    /// <p>The notes associated with the workload.</p>
    pub fn notes(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.notes(input.into());
        self
    }
    /// <p>The notes associated with the workload.</p>
    pub fn set_notes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_notes(input);
        self
    }
    /// <p>Defines whether this question is applicable to a lens review.</p>
    pub fn is_applicable(mut self, input: bool) -> Self {
        self.inner = self.inner.is_applicable(input);
        self
    }
    /// <p>Defines whether this question is applicable to a lens review.</p>
    pub fn set_is_applicable(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_applicable(input);
        self
    }
    /// <p>The reason why a question is not applicable to your workload.</p>
    pub fn reason(mut self, input: crate::types::AnswerReason) -> Self {
        self.inner = self.inner.reason(input);
        self
    }
    /// <p>The reason why a question is not applicable to your workload.</p>
    pub fn set_reason(mut self, input: std::option::Option<crate::types::AnswerReason>) -> Self {
        self.inner = self.inner.set_reason(input);
        self
    }
}
