// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input for List Share Invitations</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListShareInvitationsInput {
    /// <p>An optional string added to the beginning of each workload name returned in the results.</p>
    pub workload_name_prefix: ::std::option::Option<::std::string::String>,
    /// <p>An optional string added to the beginning of each lens name returned in the results.</p>
    pub lens_name_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The type of share invitations to be returned.</p>
    pub share_resource_type: ::std::option::Option<crate::types::ShareResourceType>,
    /// <p>The token to use to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return for this request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>An optional string added to the beginning of each profile name returned in the results.</p>
    pub profile_name_prefix: ::std::option::Option<::std::string::String>,
    /// <p>An optional string added to the beginning of each review template name returned in the results.</p>
    pub template_name_prefix: ::std::option::Option<::std::string::String>,
}
impl ListShareInvitationsInput {
    /// <p>An optional string added to the beginning of each workload name returned in the results.</p>
    pub fn workload_name_prefix(&self) -> ::std::option::Option<&str> {
        self.workload_name_prefix.as_deref()
    }
    /// <p>An optional string added to the beginning of each lens name returned in the results.</p>
    pub fn lens_name_prefix(&self) -> ::std::option::Option<&str> {
        self.lens_name_prefix.as_deref()
    }
    /// <p>The type of share invitations to be returned.</p>
    pub fn share_resource_type(&self) -> ::std::option::Option<&crate::types::ShareResourceType> {
        self.share_resource_type.as_ref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>An optional string added to the beginning of each profile name returned in the results.</p>
    pub fn profile_name_prefix(&self) -> ::std::option::Option<&str> {
        self.profile_name_prefix.as_deref()
    }
    /// <p>An optional string added to the beginning of each review template name returned in the results.</p>
    pub fn template_name_prefix(&self) -> ::std::option::Option<&str> {
        self.template_name_prefix.as_deref()
    }
}
impl ListShareInvitationsInput {
    /// Creates a new builder-style object to manufacture [`ListShareInvitationsInput`](crate::operation::list_share_invitations::ListShareInvitationsInput).
    pub fn builder() -> crate::operation::list_share_invitations::builders::ListShareInvitationsInputBuilder {
        crate::operation::list_share_invitations::builders::ListShareInvitationsInputBuilder::default()
    }
}

/// A builder for [`ListShareInvitationsInput`](crate::operation::list_share_invitations::ListShareInvitationsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListShareInvitationsInputBuilder {
    pub(crate) workload_name_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) lens_name_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) share_resource_type: ::std::option::Option<crate::types::ShareResourceType>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) profile_name_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) template_name_prefix: ::std::option::Option<::std::string::String>,
}
impl ListShareInvitationsInputBuilder {
    /// <p>An optional string added to the beginning of each workload name returned in the results.</p>
    pub fn workload_name_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_name_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional string added to the beginning of each workload name returned in the results.</p>
    pub fn set_workload_name_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_name_prefix = input;
        self
    }
    /// <p>An optional string added to the beginning of each workload name returned in the results.</p>
    pub fn get_workload_name_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_name_prefix
    }
    /// <p>An optional string added to the beginning of each lens name returned in the results.</p>
    pub fn lens_name_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lens_name_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional string added to the beginning of each lens name returned in the results.</p>
    pub fn set_lens_name_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lens_name_prefix = input;
        self
    }
    /// <p>An optional string added to the beginning of each lens name returned in the results.</p>
    pub fn get_lens_name_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.lens_name_prefix
    }
    /// <p>The type of share invitations to be returned.</p>
    pub fn share_resource_type(mut self, input: crate::types::ShareResourceType) -> Self {
        self.share_resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of share invitations to be returned.</p>
    pub fn set_share_resource_type(mut self, input: ::std::option::Option<crate::types::ShareResourceType>) -> Self {
        self.share_resource_type = input;
        self
    }
    /// <p>The type of share invitations to be returned.</p>
    pub fn get_share_resource_type(&self) -> &::std::option::Option<crate::types::ShareResourceType> {
        &self.share_resource_type
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>An optional string added to the beginning of each profile name returned in the results.</p>
    pub fn profile_name_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_name_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional string added to the beginning of each profile name returned in the results.</p>
    pub fn set_profile_name_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_name_prefix = input;
        self
    }
    /// <p>An optional string added to the beginning of each profile name returned in the results.</p>
    pub fn get_profile_name_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_name_prefix
    }
    /// <p>An optional string added to the beginning of each review template name returned in the results.</p>
    pub fn template_name_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional string added to the beginning of each review template name returned in the results.</p>
    pub fn set_template_name_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name_prefix = input;
        self
    }
    /// <p>An optional string added to the beginning of each review template name returned in the results.</p>
    pub fn get_template_name_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name_prefix
    }
    /// Consumes the builder and constructs a [`ListShareInvitationsInput`](crate::operation::list_share_invitations::ListShareInvitationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_share_invitations::ListShareInvitationsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_share_invitations::ListShareInvitationsInput {
            workload_name_prefix: self.workload_name_prefix,
            lens_name_prefix: self.lens_name_prefix,
            share_resource_type: self.share_resource_type,
            next_token: self.next_token,
            max_results: self.max_results,
            profile_name_prefix: self.profile_name_prefix,
            template_name_prefix: self.template_name_prefix,
        })
    }
}
