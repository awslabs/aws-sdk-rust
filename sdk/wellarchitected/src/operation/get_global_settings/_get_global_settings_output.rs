// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetGlobalSettingsOutput {
    /// <p>Amazon Web Services Organizations sharing status.</p>
    pub organization_sharing_status: ::std::option::Option<crate::types::OrganizationSharingStatus>,
    /// <p>Discovery integration status.</p>
    pub discovery_integration_status: ::std::option::Option<crate::types::DiscoveryIntegrationStatus>,
    /// <p>Jira configuration status.</p>
    pub jira_configuration: ::std::option::Option<crate::types::AccountJiraConfigurationOutput>,
    _request_id: Option<String>,
}
impl GetGlobalSettingsOutput {
    /// <p>Amazon Web Services Organizations sharing status.</p>
    pub fn organization_sharing_status(&self) -> ::std::option::Option<&crate::types::OrganizationSharingStatus> {
        self.organization_sharing_status.as_ref()
    }
    /// <p>Discovery integration status.</p>
    pub fn discovery_integration_status(&self) -> ::std::option::Option<&crate::types::DiscoveryIntegrationStatus> {
        self.discovery_integration_status.as_ref()
    }
    /// <p>Jira configuration status.</p>
    pub fn jira_configuration(&self) -> ::std::option::Option<&crate::types::AccountJiraConfigurationOutput> {
        self.jira_configuration.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetGlobalSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetGlobalSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetGlobalSettingsOutput`](crate::operation::get_global_settings::GetGlobalSettingsOutput).
    pub fn builder() -> crate::operation::get_global_settings::builders::GetGlobalSettingsOutputBuilder {
        crate::operation::get_global_settings::builders::GetGlobalSettingsOutputBuilder::default()
    }
}

/// A builder for [`GetGlobalSettingsOutput`](crate::operation::get_global_settings::GetGlobalSettingsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetGlobalSettingsOutputBuilder {
    pub(crate) organization_sharing_status: ::std::option::Option<crate::types::OrganizationSharingStatus>,
    pub(crate) discovery_integration_status: ::std::option::Option<crate::types::DiscoveryIntegrationStatus>,
    pub(crate) jira_configuration: ::std::option::Option<crate::types::AccountJiraConfigurationOutput>,
    _request_id: Option<String>,
}
impl GetGlobalSettingsOutputBuilder {
    /// <p>Amazon Web Services Organizations sharing status.</p>
    pub fn organization_sharing_status(mut self, input: crate::types::OrganizationSharingStatus) -> Self {
        self.organization_sharing_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Amazon Web Services Organizations sharing status.</p>
    pub fn set_organization_sharing_status(mut self, input: ::std::option::Option<crate::types::OrganizationSharingStatus>) -> Self {
        self.organization_sharing_status = input;
        self
    }
    /// <p>Amazon Web Services Organizations sharing status.</p>
    pub fn get_organization_sharing_status(&self) -> &::std::option::Option<crate::types::OrganizationSharingStatus> {
        &self.organization_sharing_status
    }
    /// <p>Discovery integration status.</p>
    pub fn discovery_integration_status(mut self, input: crate::types::DiscoveryIntegrationStatus) -> Self {
        self.discovery_integration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Discovery integration status.</p>
    pub fn set_discovery_integration_status(mut self, input: ::std::option::Option<crate::types::DiscoveryIntegrationStatus>) -> Self {
        self.discovery_integration_status = input;
        self
    }
    /// <p>Discovery integration status.</p>
    pub fn get_discovery_integration_status(&self) -> &::std::option::Option<crate::types::DiscoveryIntegrationStatus> {
        &self.discovery_integration_status
    }
    /// <p>Jira configuration status.</p>
    pub fn jira_configuration(mut self, input: crate::types::AccountJiraConfigurationOutput) -> Self {
        self.jira_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Jira configuration status.</p>
    pub fn set_jira_configuration(mut self, input: ::std::option::Option<crate::types::AccountJiraConfigurationOutput>) -> Self {
        self.jira_configuration = input;
        self
    }
    /// <p>Jira configuration status.</p>
    pub fn get_jira_configuration(&self) -> &::std::option::Option<crate::types::AccountJiraConfigurationOutput> {
        &self.jira_configuration
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetGlobalSettingsOutput`](crate::operation::get_global_settings::GetGlobalSettingsOutput).
    pub fn build(self) -> crate::operation::get_global_settings::GetGlobalSettingsOutput {
        crate::operation::get_global_settings::GetGlobalSettingsOutput {
            organization_sharing_status: self.organization_sharing_status,
            discovery_integration_status: self.discovery_integration_status,
            jira_configuration: self.jira_configuration,
            _request_id: self._request_id,
        }
    }
}
