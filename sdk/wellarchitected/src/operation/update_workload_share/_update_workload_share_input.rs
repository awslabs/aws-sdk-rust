// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input for Update Workload Share</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateWorkloadShareInput {
    /// <p>The ID associated with the share.</p>
    pub share_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub workload_id: ::std::option::Option<::std::string::String>,
    /// <p>Permission granted on a share request.</p>
    pub permission_type: ::std::option::Option<crate::types::PermissionType>,
}
impl UpdateWorkloadShareInput {
    /// <p>The ID associated with the share.</p>
    pub fn share_id(&self) -> ::std::option::Option<&str> {
        self.share_id.as_deref()
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> ::std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>Permission granted on a share request.</p>
    pub fn permission_type(&self) -> ::std::option::Option<&crate::types::PermissionType> {
        self.permission_type.as_ref()
    }
}
impl UpdateWorkloadShareInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkloadShareInput`](crate::operation::update_workload_share::UpdateWorkloadShareInput).
    pub fn builder() -> crate::operation::update_workload_share::builders::UpdateWorkloadShareInputBuilder {
        crate::operation::update_workload_share::builders::UpdateWorkloadShareInputBuilder::default()
    }
}

/// A builder for [`UpdateWorkloadShareInput`](crate::operation::update_workload_share::UpdateWorkloadShareInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateWorkloadShareInputBuilder {
    pub(crate) share_id: ::std::option::Option<::std::string::String>,
    pub(crate) workload_id: ::std::option::Option<::std::string::String>,
    pub(crate) permission_type: ::std::option::Option<crate::types::PermissionType>,
}
impl UpdateWorkloadShareInputBuilder {
    /// <p>The ID associated with the share.</p>
    /// This field is required.
    pub fn share_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.share_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID associated with the share.</p>
    pub fn set_share_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.share_id = input;
        self
    }
    /// <p>The ID associated with the share.</p>
    pub fn get_share_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.share_id
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    /// This field is required.
    pub fn workload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_id = input;
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn get_workload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_id
    }
    /// <p>Permission granted on a share request.</p>
    /// This field is required.
    pub fn permission_type(mut self, input: crate::types::PermissionType) -> Self {
        self.permission_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Permission granted on a share request.</p>
    pub fn set_permission_type(mut self, input: ::std::option::Option<crate::types::PermissionType>) -> Self {
        self.permission_type = input;
        self
    }
    /// <p>Permission granted on a share request.</p>
    pub fn get_permission_type(&self) -> &::std::option::Option<crate::types::PermissionType> {
        &self.permission_type
    }
    /// Consumes the builder and constructs a [`UpdateWorkloadShareInput`](crate::operation::update_workload_share::UpdateWorkloadShareInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_workload_share::UpdateWorkloadShareInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_workload_share::UpdateWorkloadShareInput {
            share_id: self.share_id,
            workload_id: self.workload_id,
            permission_type: self.permission_type,
        })
    }
}
