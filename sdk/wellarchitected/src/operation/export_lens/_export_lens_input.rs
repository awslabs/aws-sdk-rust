// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportLensInput {
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    #[doc(hidden)]
    pub lens_alias: std::option::Option<std::string::String>,
    /// <p>The lens version to be exported.</p>
    #[doc(hidden)]
    pub lens_version: std::option::Option<std::string::String>,
}
impl ExportLensInput {
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(&self) -> std::option::Option<&str> {
        self.lens_alias.as_deref()
    }
    /// <p>The lens version to be exported.</p>
    pub fn lens_version(&self) -> std::option::Option<&str> {
        self.lens_version.as_deref()
    }
}
impl ExportLensInput {
    /// Creates a new builder-style object to manufacture [`ExportLensInput`](crate::operation::export_lens::ExportLensInput).
    pub fn builder() -> crate::operation::export_lens::builders::ExportLensInputBuilder {
        crate::operation::export_lens::builders::ExportLensInputBuilder::default()
    }
}

/// A builder for [`ExportLensInput`](crate::operation::export_lens::ExportLensInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExportLensInputBuilder {
    pub(crate) lens_alias: std::option::Option<std::string::String>,
    pub(crate) lens_version: std::option::Option<std::string::String>,
}
impl ExportLensInputBuilder {
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.lens_alias = Some(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lens_alias = input;
        self
    }
    /// <p>The lens version to be exported.</p>
    pub fn lens_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.lens_version = Some(input.into());
        self
    }
    /// <p>The lens version to be exported.</p>
    pub fn set_lens_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lens_version = input;
        self
    }
    /// Consumes the builder and constructs a [`ExportLensInput`](crate::operation::export_lens::ExportLensInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::export_lens::ExportLensInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::export_lens::ExportLensInput {
            lens_alias: self.lens_alias,
            lens_version: self.lens_version,
        })
    }
}
