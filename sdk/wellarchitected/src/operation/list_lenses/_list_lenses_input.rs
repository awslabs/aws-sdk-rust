// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input to list lenses.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListLensesInput {
    /// <p>The token to use to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return for this request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The type of lenses to be returned.</p>
    pub lens_type: ::std::option::Option<crate::types::LensType>,
    /// <p>The status of lenses to be returned.</p>
    pub lens_status: ::std::option::Option<crate::types::LensStatusType>,
    /// <p>The full name of the lens.</p>
    pub lens_name: ::std::option::Option<::std::string::String>,
}
impl ListLensesInput {
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The type of lenses to be returned.</p>
    pub fn lens_type(&self) -> ::std::option::Option<&crate::types::LensType> {
        self.lens_type.as_ref()
    }
    /// <p>The status of lenses to be returned.</p>
    pub fn lens_status(&self) -> ::std::option::Option<&crate::types::LensStatusType> {
        self.lens_status.as_ref()
    }
    /// <p>The full name of the lens.</p>
    pub fn lens_name(&self) -> ::std::option::Option<&str> {
        self.lens_name.as_deref()
    }
}
impl ListLensesInput {
    /// Creates a new builder-style object to manufacture [`ListLensesInput`](crate::operation::list_lenses::ListLensesInput).
    pub fn builder() -> crate::operation::list_lenses::builders::ListLensesInputBuilder {
        crate::operation::list_lenses::builders::ListLensesInputBuilder::default()
    }
}

/// A builder for [`ListLensesInput`](crate::operation::list_lenses::ListLensesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListLensesInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) lens_type: ::std::option::Option<crate::types::LensType>,
    pub(crate) lens_status: ::std::option::Option<crate::types::LensStatusType>,
    pub(crate) lens_name: ::std::option::Option<::std::string::String>,
}
impl ListLensesInputBuilder {
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return for this request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The type of lenses to be returned.</p>
    pub fn lens_type(mut self, input: crate::types::LensType) -> Self {
        self.lens_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of lenses to be returned.</p>
    pub fn set_lens_type(mut self, input: ::std::option::Option<crate::types::LensType>) -> Self {
        self.lens_type = input;
        self
    }
    /// <p>The type of lenses to be returned.</p>
    pub fn get_lens_type(&self) -> &::std::option::Option<crate::types::LensType> {
        &self.lens_type
    }
    /// <p>The status of lenses to be returned.</p>
    pub fn lens_status(mut self, input: crate::types::LensStatusType) -> Self {
        self.lens_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of lenses to be returned.</p>
    pub fn set_lens_status(mut self, input: ::std::option::Option<crate::types::LensStatusType>) -> Self {
        self.lens_status = input;
        self
    }
    /// <p>The status of lenses to be returned.</p>
    pub fn get_lens_status(&self) -> &::std::option::Option<crate::types::LensStatusType> {
        &self.lens_status
    }
    /// <p>The full name of the lens.</p>
    pub fn lens_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lens_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full name of the lens.</p>
    pub fn set_lens_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lens_name = input;
        self
    }
    /// <p>The full name of the lens.</p>
    pub fn get_lens_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.lens_name
    }
    /// Consumes the builder and constructs a [`ListLensesInput`](crate::operation::list_lenses::ListLensesInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_lenses::ListLensesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_lenses::ListLensesInput {
            next_token: self.next_token,
            max_results: self.max_results,
            lens_type: self.lens_type,
            lens_status: self.lens_status,
            lens_name: self.lens_name,
        })
    }
}
