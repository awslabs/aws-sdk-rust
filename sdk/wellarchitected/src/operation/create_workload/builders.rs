// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_workload::_create_workload_output::CreateWorkloadOutputBuilder;

pub use crate::operation::create_workload::_create_workload_input::CreateWorkloadInputBuilder;

impl crate::operation::create_workload::builders::CreateWorkloadInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_workload::CreateWorkloadOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_workload::CreateWorkloadError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_workload();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateWorkload`.
///
/// <p>Create a new workload.</p>
/// <p>The owner of a workload can share the workload with other Amazon Web Services accounts, users, an organization, and organizational units (OUs) in the same Amazon Web Services Region. Only the owner of a workload can delete it.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/define-workload.html">Defining a Workload</a> in the <i>Well-Architected Tool User Guide</i>.</p><important>
/// <p>Either <code>AwsRegions</code>, <code>NonAwsRegions</code>, or both must be specified when creating a workload.</p>
/// <p>You also must specify <code>ReviewOwner</code>, even though the parameter is listed as not being required in the following section.</p>
/// </important>
/// <p>When creating a workload using a review template, you must have the following IAM permissions:</p>
/// <ul>
/// <li>
/// <p><code>wellarchitected:GetReviewTemplate</code></p></li>
/// <li>
/// <p><code>wellarchitected:GetReviewTemplateAnswer</code></p></li>
/// <li>
/// <p><code>wellarchitected:ListReviewTemplateAnswers</code></p></li>
/// <li>
/// <p><code>wellarchitected:GetReviewTemplateLensReview</code></p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateWorkloadFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_workload::builders::CreateWorkloadInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_workload::CreateWorkloadOutput,
        crate::operation::create_workload::CreateWorkloadError,
    > for CreateWorkloadFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_workload::CreateWorkloadOutput,
            crate::operation::create_workload::CreateWorkloadError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateWorkloadFluentBuilder {
    /// Creates a new `CreateWorkload`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateWorkload as a reference.
    pub fn as_input(&self) -> &crate::operation::create_workload::builders::CreateWorkloadInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_workload::CreateWorkloadOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_workload::CreateWorkloadError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_workload::CreateWorkload::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_workload::CreateWorkload::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_workload::CreateWorkloadOutput,
        crate::operation::create_workload::CreateWorkloadError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn workload_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.workload_name(input.into());
        self
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn set_workload_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_workload_name(input);
        self
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn get_workload_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_workload_name()
    }
    /// <p>The description for the workload.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description for the workload.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description for the workload.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The environment for the workload.</p>
    pub fn environment(mut self, input: crate::types::WorkloadEnvironment) -> Self {
        self.inner = self.inner.environment(input);
        self
    }
    /// <p>The environment for the workload.</p>
    pub fn set_environment(mut self, input: ::std::option::Option<crate::types::WorkloadEnvironment>) -> Self {
        self.inner = self.inner.set_environment(input);
        self
    }
    /// <p>The environment for the workload.</p>
    pub fn get_environment(&self) -> &::std::option::Option<crate::types::WorkloadEnvironment> {
        self.inner.get_environment()
    }
    ///
    /// Appends an item to `AccountIds`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>The list of Amazon Web Services account IDs associated with the workload.</p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_ids(input.into());
        self
    }
    /// <p>The list of Amazon Web Services account IDs associated with the workload.</p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_account_ids(input);
        self
    }
    /// <p>The list of Amazon Web Services account IDs associated with the workload.</p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_account_ids()
    }
    ///
    /// Appends an item to `AwsRegions`.
    ///
    /// To override the contents of this collection use [`set_aws_regions`](Self::set_aws_regions).
    ///
    /// <p>The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.</p>
    pub fn aws_regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.aws_regions(input.into());
        self
    }
    /// <p>The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.</p>
    pub fn set_aws_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_aws_regions(input);
        self
    }
    /// <p>The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.</p>
    pub fn get_aws_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_aws_regions()
    }
    ///
    /// Appends an item to `NonAwsRegions`.
    ///
    /// To override the contents of this collection use [`set_non_aws_regions`](Self::set_non_aws_regions).
    ///
    /// <p>The list of non-Amazon Web Services Regions associated with the workload.</p>
    pub fn non_aws_regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.non_aws_regions(input.into());
        self
    }
    /// <p>The list of non-Amazon Web Services Regions associated with the workload.</p>
    pub fn set_non_aws_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_non_aws_regions(input);
        self
    }
    /// <p>The list of non-Amazon Web Services Regions associated with the workload.</p>
    pub fn get_non_aws_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_non_aws_regions()
    }
    ///
    /// Appends an item to `PillarPriorities`.
    ///
    /// To override the contents of this collection use [`set_pillar_priorities`](Self::set_pillar_priorities).
    ///
    /// <p>The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn pillar_priorities(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.pillar_priorities(input.into());
        self
    }
    /// <p>The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn set_pillar_priorities(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_pillar_priorities(input);
        self
    }
    /// <p>The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <code>PillarReviewSummary$PillarId</code>.</p>
    pub fn get_pillar_priorities(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_pillar_priorities()
    }
    /// <p>The URL of the architectural design for the workload.</p>
    pub fn architectural_design(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.architectural_design(input.into());
        self
    }
    /// <p>The URL of the architectural design for the workload.</p>
    pub fn set_architectural_design(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_architectural_design(input);
        self
    }
    /// <p>The URL of the architectural design for the workload.</p>
    pub fn get_architectural_design(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_architectural_design()
    }
    /// <p>The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.</p>
    pub fn review_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.review_owner(input.into());
        self
    }
    /// <p>The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.</p>
    pub fn set_review_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_review_owner(input);
        self
    }
    /// <p>The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.</p>
    pub fn get_review_owner(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_review_owner()
    }
    /// <p>The industry type for the workload.</p>
    /// <p>If specified, must be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>Agriculture</code></p></li>
    /// <li>
    /// <p><code>Automobile</code></p></li>
    /// <li>
    /// <p><code>Defense</code></p></li>
    /// <li>
    /// <p><code>Design and Engineering</code></p></li>
    /// <li>
    /// <p><code>Digital Advertising</code></p></li>
    /// <li>
    /// <p><code>Education</code></p></li>
    /// <li>
    /// <p><code>Environmental Protection</code></p></li>
    /// <li>
    /// <p><code>Financial Services</code></p></li>
    /// <li>
    /// <p><code>Gaming</code></p></li>
    /// <li>
    /// <p><code>General Public Services</code></p></li>
    /// <li>
    /// <p><code>Healthcare</code></p></li>
    /// <li>
    /// <p><code>Hospitality</code></p></li>
    /// <li>
    /// <p><code>InfoTech</code></p></li>
    /// <li>
    /// <p><code>Justice and Public Safety</code></p></li>
    /// <li>
    /// <p><code>Life Sciences</code></p></li>
    /// <li>
    /// <p><code>Manufacturing</code></p></li>
    /// <li>
    /// <p><code>Media &amp; Entertainment</code></p></li>
    /// <li>
    /// <p><code>Mining &amp; Resources</code></p></li>
    /// <li>
    /// <p><code>Oil &amp; Gas</code></p></li>
    /// <li>
    /// <p><code>Power &amp; Utilities</code></p></li>
    /// <li>
    /// <p><code>Professional Services</code></p></li>
    /// <li>
    /// <p><code>Real Estate &amp; Construction</code></p></li>
    /// <li>
    /// <p><code>Retail &amp; Wholesale</code></p></li>
    /// <li>
    /// <p><code>Social Protection</code></p></li>
    /// <li>
    /// <p><code>Telecommunications</code></p></li>
    /// <li>
    /// <p><code>Travel, Transportation &amp; Logistics</code></p></li>
    /// <li>
    /// <p><code>Other</code></p></li>
    /// </ul>
    pub fn industry_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.industry_type(input.into());
        self
    }
    /// <p>The industry type for the workload.</p>
    /// <p>If specified, must be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>Agriculture</code></p></li>
    /// <li>
    /// <p><code>Automobile</code></p></li>
    /// <li>
    /// <p><code>Defense</code></p></li>
    /// <li>
    /// <p><code>Design and Engineering</code></p></li>
    /// <li>
    /// <p><code>Digital Advertising</code></p></li>
    /// <li>
    /// <p><code>Education</code></p></li>
    /// <li>
    /// <p><code>Environmental Protection</code></p></li>
    /// <li>
    /// <p><code>Financial Services</code></p></li>
    /// <li>
    /// <p><code>Gaming</code></p></li>
    /// <li>
    /// <p><code>General Public Services</code></p></li>
    /// <li>
    /// <p><code>Healthcare</code></p></li>
    /// <li>
    /// <p><code>Hospitality</code></p></li>
    /// <li>
    /// <p><code>InfoTech</code></p></li>
    /// <li>
    /// <p><code>Justice and Public Safety</code></p></li>
    /// <li>
    /// <p><code>Life Sciences</code></p></li>
    /// <li>
    /// <p><code>Manufacturing</code></p></li>
    /// <li>
    /// <p><code>Media &amp; Entertainment</code></p></li>
    /// <li>
    /// <p><code>Mining &amp; Resources</code></p></li>
    /// <li>
    /// <p><code>Oil &amp; Gas</code></p></li>
    /// <li>
    /// <p><code>Power &amp; Utilities</code></p></li>
    /// <li>
    /// <p><code>Professional Services</code></p></li>
    /// <li>
    /// <p><code>Real Estate &amp; Construction</code></p></li>
    /// <li>
    /// <p><code>Retail &amp; Wholesale</code></p></li>
    /// <li>
    /// <p><code>Social Protection</code></p></li>
    /// <li>
    /// <p><code>Telecommunications</code></p></li>
    /// <li>
    /// <p><code>Travel, Transportation &amp; Logistics</code></p></li>
    /// <li>
    /// <p><code>Other</code></p></li>
    /// </ul>
    pub fn set_industry_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_industry_type(input);
        self
    }
    /// <p>The industry type for the workload.</p>
    /// <p>If specified, must be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>Agriculture</code></p></li>
    /// <li>
    /// <p><code>Automobile</code></p></li>
    /// <li>
    /// <p><code>Defense</code></p></li>
    /// <li>
    /// <p><code>Design and Engineering</code></p></li>
    /// <li>
    /// <p><code>Digital Advertising</code></p></li>
    /// <li>
    /// <p><code>Education</code></p></li>
    /// <li>
    /// <p><code>Environmental Protection</code></p></li>
    /// <li>
    /// <p><code>Financial Services</code></p></li>
    /// <li>
    /// <p><code>Gaming</code></p></li>
    /// <li>
    /// <p><code>General Public Services</code></p></li>
    /// <li>
    /// <p><code>Healthcare</code></p></li>
    /// <li>
    /// <p><code>Hospitality</code></p></li>
    /// <li>
    /// <p><code>InfoTech</code></p></li>
    /// <li>
    /// <p><code>Justice and Public Safety</code></p></li>
    /// <li>
    /// <p><code>Life Sciences</code></p></li>
    /// <li>
    /// <p><code>Manufacturing</code></p></li>
    /// <li>
    /// <p><code>Media &amp; Entertainment</code></p></li>
    /// <li>
    /// <p><code>Mining &amp; Resources</code></p></li>
    /// <li>
    /// <p><code>Oil &amp; Gas</code></p></li>
    /// <li>
    /// <p><code>Power &amp; Utilities</code></p></li>
    /// <li>
    /// <p><code>Professional Services</code></p></li>
    /// <li>
    /// <p><code>Real Estate &amp; Construction</code></p></li>
    /// <li>
    /// <p><code>Retail &amp; Wholesale</code></p></li>
    /// <li>
    /// <p><code>Social Protection</code></p></li>
    /// <li>
    /// <p><code>Telecommunications</code></p></li>
    /// <li>
    /// <p><code>Travel, Transportation &amp; Logistics</code></p></li>
    /// <li>
    /// <p><code>Other</code></p></li>
    /// </ul>
    pub fn get_industry_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_industry_type()
    }
    /// <p>The industry for the workload.</p>
    pub fn industry(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.industry(input.into());
        self
    }
    /// <p>The industry for the workload.</p>
    pub fn set_industry(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_industry(input);
        self
    }
    /// <p>The industry for the workload.</p>
    pub fn get_industry(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_industry()
    }
    ///
    /// Appends an item to `Lenses`.
    ///
    /// To override the contents of this collection use [`set_lenses`](Self::set_lenses).
    ///
    /// <p>The list of lenses associated with the workload. Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    /// <p>If a review template that specifies lenses is applied to the workload, those lenses are applied to the workload in addition to these lenses.</p>
    pub fn lenses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.lenses(input.into());
        self
    }
    /// <p>The list of lenses associated with the workload. Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    /// <p>If a review template that specifies lenses is applied to the workload, those lenses are applied to the workload in addition to these lenses.</p>
    pub fn set_lenses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_lenses(input);
        self
    }
    /// <p>The list of lenses associated with the workload. Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    /// <p>If a review template that specifies lenses is applied to the workload, those lenses are applied to the workload in addition to these lenses.</p>
    pub fn get_lenses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_lenses()
    }
    /// <p>The notes associated with the workload.</p>
    /// <p>For a review template, these are the notes that will be associated with the workload when the template is applied.</p>
    pub fn notes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.notes(input.into());
        self
    }
    /// <p>The notes associated with the workload.</p>
    /// <p>For a review template, these are the notes that will be associated with the workload when the template is applied.</p>
    pub fn set_notes(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_notes(input);
        self
    }
    /// <p>The notes associated with the workload.</p>
    /// <p>For a review template, these are the notes that will be associated with the workload when the template is applied.</p>
    pub fn get_notes(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_notes()
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p><important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p><important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>
    /// <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p><important>
    /// <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>
    /// </important>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
    ///
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be associated with the workload.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags to be associated with the workload.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags to be associated with the workload.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>Well-Architected discovery configuration settings associated to the workload.</p>
    pub fn discovery_config(mut self, input: crate::types::WorkloadDiscoveryConfig) -> Self {
        self.inner = self.inner.discovery_config(input);
        self
    }
    /// <p>Well-Architected discovery configuration settings associated to the workload.</p>
    pub fn set_discovery_config(mut self, input: ::std::option::Option<crate::types::WorkloadDiscoveryConfig>) -> Self {
        self.inner = self.inner.set_discovery_config(input);
        self
    }
    /// <p>Well-Architected discovery configuration settings associated to the workload.</p>
    pub fn get_discovery_config(&self) -> &::std::option::Option<crate::types::WorkloadDiscoveryConfig> {
        self.inner.get_discovery_config()
    }
    ///
    /// Appends an item to `Applications`.
    ///
    /// To override the contents of this collection use [`set_applications`](Self::set_applications).
    ///
    /// <p>List of AppRegistry application ARNs associated to the workload.</p>
    pub fn applications(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.applications(input.into());
        self
    }
    /// <p>List of AppRegistry application ARNs associated to the workload.</p>
    pub fn set_applications(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_applications(input);
        self
    }
    /// <p>List of AppRegistry application ARNs associated to the workload.</p>
    pub fn get_applications(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_applications()
    }
    ///
    /// Appends an item to `ProfileArns`.
    ///
    /// To override the contents of this collection use [`set_profile_arns`](Self::set_profile_arns).
    ///
    /// <p>The list of profile ARNs associated with the workload.</p>
    pub fn profile_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.profile_arns(input.into());
        self
    }
    /// <p>The list of profile ARNs associated with the workload.</p>
    pub fn set_profile_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_profile_arns(input);
        self
    }
    /// <p>The list of profile ARNs associated with the workload.</p>
    pub fn get_profile_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_profile_arns()
    }
    ///
    /// Appends an item to `ReviewTemplateArns`.
    ///
    /// To override the contents of this collection use [`set_review_template_arns`](Self::set_review_template_arns).
    ///
    /// <p>The list of review template ARNs to associate with the workload.</p>
    pub fn review_template_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.review_template_arns(input.into());
        self
    }
    /// <p>The list of review template ARNs to associate with the workload.</p>
    pub fn set_review_template_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_review_template_arns(input);
        self
    }
    /// <p>The list of review template ARNs to associate with the workload.</p>
    pub fn get_review_template_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_review_template_arns()
    }
    /// <p>Jira configuration settings when creating a workload.</p>
    pub fn jira_configuration(mut self, input: crate::types::WorkloadJiraConfigurationInput) -> Self {
        self.inner = self.inner.jira_configuration(input);
        self
    }
    /// <p>Jira configuration settings when creating a workload.</p>
    pub fn set_jira_configuration(mut self, input: ::std::option::Option<crate::types::WorkloadJiraConfigurationInput>) -> Self {
        self.inner = self.inner.set_jira_configuration(input);
        self
    }
    /// <p>Jira configuration settings when creating a workload.</p>
    pub fn get_jira_configuration(&self) -> &::std::option::Option<crate::types::WorkloadJiraConfigurationInput> {
        self.inner.get_jira_configuration()
    }
}
