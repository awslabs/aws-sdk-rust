// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLensVersionDifferenceInput {
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    #[doc(hidden)]
    pub lens_alias: std::option::Option<std::string::String>,
    /// <p>The base version of the lens.</p>
    #[doc(hidden)]
    pub base_lens_version: std::option::Option<std::string::String>,
    /// <p>The lens version to target a difference for.</p>
    #[doc(hidden)]
    pub target_lens_version: std::option::Option<std::string::String>,
}
impl GetLensVersionDifferenceInput {
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(&self) -> std::option::Option<&str> {
        self.lens_alias.as_deref()
    }
    /// <p>The base version of the lens.</p>
    pub fn base_lens_version(&self) -> std::option::Option<&str> {
        self.base_lens_version.as_deref()
    }
    /// <p>The lens version to target a difference for.</p>
    pub fn target_lens_version(&self) -> std::option::Option<&str> {
        self.target_lens_version.as_deref()
    }
}
impl GetLensVersionDifferenceInput {
    /// Creates a new builder-style object to manufacture [`GetLensVersionDifferenceInput`](crate::operation::get_lens_version_difference::GetLensVersionDifferenceInput).
    pub fn builder(
    ) -> crate::operation::get_lens_version_difference::builders::GetLensVersionDifferenceInputBuilder
    {
        crate::operation::get_lens_version_difference::builders::GetLensVersionDifferenceInputBuilder::default()
    }
}

/// A builder for [`GetLensVersionDifferenceInput`](crate::operation::get_lens_version_difference::GetLensVersionDifferenceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetLensVersionDifferenceInputBuilder {
    pub(crate) lens_alias: std::option::Option<std::string::String>,
    pub(crate) base_lens_version: std::option::Option<std::string::String>,
    pub(crate) target_lens_version: std::option::Option<std::string::String>,
}
impl GetLensVersionDifferenceInputBuilder {
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.lens_alias = Some(input.into());
        self
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lens_alias = input;
        self
    }
    /// <p>The base version of the lens.</p>
    pub fn base_lens_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.base_lens_version = Some(input.into());
        self
    }
    /// <p>The base version of the lens.</p>
    pub fn set_base_lens_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.base_lens_version = input;
        self
    }
    /// <p>The lens version to target a difference for.</p>
    pub fn target_lens_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_lens_version = Some(input.into());
        self
    }
    /// <p>The lens version to target a difference for.</p>
    pub fn set_target_lens_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_lens_version = input;
        self
    }
    /// Consumes the builder and constructs a [`GetLensVersionDifferenceInput`](crate::operation::get_lens_version_difference::GetLensVersionDifferenceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_lens_version_difference::GetLensVersionDifferenceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_lens_version_difference::GetLensVersionDifferenceInput {
                lens_alias: self.lens_alias,
                base_lens_version: self.base_lens_version,
                target_lens_version: self.target_lens_version,
            },
        )
    }
}
