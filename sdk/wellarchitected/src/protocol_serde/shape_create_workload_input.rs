// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_workload_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_workload::CreateWorkloadInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.account_ids {
        let mut array_2 = object.key("AccountIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.applications {
        let mut array_5 = object.key("Applications").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.architectural_design {
        object.key("ArchitecturalDesign").string(var_7.as_str());
    }
    if let Some(var_8) = &input.aws_regions {
        let mut array_9 = object.key("AwsRegions").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_11.as_str());
    }
    if let Some(var_12) = &input.description {
        object.key("Description").string(var_12.as_str());
    }
    if let Some(var_13) = &input.discovery_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("DiscoveryConfig").start_object();
        crate::protocol_serde::shape_workload_discovery_config::ser_workload_discovery_config(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.environment {
        object.key("Environment").string(var_15.as_str());
    }
    if let Some(var_16) = &input.industry {
        object.key("Industry").string(var_16.as_str());
    }
    if let Some(var_17) = &input.industry_type {
        object.key("IndustryType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.jira_configuration {
        #[allow(unused_mut)]
        let mut object_19 = object.key("JiraConfiguration").start_object();
        crate::protocol_serde::shape_workload_jira_configuration_input::ser_workload_jira_configuration_input(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.lenses {
        let mut array_21 = object.key("Lenses").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.non_aws_regions {
        let mut array_24 = object.key("NonAwsRegions").start_array();
        for item_25 in var_23 {
            {
                array_24.value().string(item_25.as_str());
            }
        }
        array_24.finish();
    }
    if let Some(var_26) = &input.notes {
        object.key("Notes").string(var_26.as_str());
    }
    if let Some(var_27) = &input.pillar_priorities {
        let mut array_28 = object.key("PillarPriorities").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    if let Some(var_30) = &input.profile_arns {
        let mut array_31 = object.key("ProfileArns").start_array();
        for item_32 in var_30 {
            {
                array_31.value().string(item_32.as_str());
            }
        }
        array_31.finish();
    }
    if let Some(var_33) = &input.review_owner {
        object.key("ReviewOwner").string(var_33.as_str());
    }
    if let Some(var_34) = &input.review_template_arns {
        let mut array_35 = object.key("ReviewTemplateArns").start_array();
        for item_36 in var_34 {
            {
                array_35.value().string(item_36.as_str());
            }
        }
        array_35.finish();
    }
    if let Some(var_37) = &input.tags {
        #[allow(unused_mut)]
        let mut object_38 = object.key("Tags").start_object();
        for (key_39, value_40) in var_37 {
            {
                object_38.key(key_39.as_str()).string(value_40.as_str());
            }
        }
        object_38.finish();
    }
    if let Some(var_41) = &input.workload_name {
        object.key("WorkloadName").string(var_41.as_str());
    }
    Ok(())
}
