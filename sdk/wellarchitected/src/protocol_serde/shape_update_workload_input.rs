// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_workload_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_workload::UpdateWorkloadInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.account_ids {
        let mut array_2 = object.key("AccountIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.applications {
        let mut array_5 = object.key("Applications").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.architectural_design {
        object.key("ArchitecturalDesign").string(var_7.as_str());
    }
    if let Some(var_8) = &input.aws_regions {
        let mut array_9 = object.key("AwsRegions").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.description {
        object.key("Description").string(var_11.as_str());
    }
    if let Some(var_12) = &input.discovery_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("DiscoveryConfig").start_object();
        crate::protocol_serde::shape_workload_discovery_config::ser_workload_discovery_config(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.environment {
        object.key("Environment").string(var_14.as_str());
    }
    if let Some(var_15) = &input.improvement_status {
        object.key("ImprovementStatus").string(var_15.as_str());
    }
    if let Some(var_16) = &input.industry {
        object.key("Industry").string(var_16.as_str());
    }
    if let Some(var_17) = &input.industry_type {
        object.key("IndustryType").string(var_17.as_str());
    }
    if input.is_review_owner_update_acknowledged {
        object
            .key("IsReviewOwnerUpdateAcknowledged")
            .boolean(input.is_review_owner_update_acknowledged);
    }
    if let Some(var_18) = &input.non_aws_regions {
        let mut array_19 = object.key("NonAwsRegions").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.notes {
        object.key("Notes").string(var_21.as_str());
    }
    if let Some(var_22) = &input.pillar_priorities {
        let mut array_23 = object.key("PillarPriorities").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24.as_str());
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.review_owner {
        object.key("ReviewOwner").string(var_25.as_str());
    }
    if let Some(var_26) = &input.workload_name {
        object.key("WorkloadName").string(var_26.as_str());
    }
    Ok(())
}
