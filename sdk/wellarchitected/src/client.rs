// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Well-Architected Tool
///
/// Client for invoking operations on AWS Well-Architected Tool. Each operation on AWS Well-Architected Tool is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_wellarchitected::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_wellarchitected::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_wellarchitected::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AssociateLenses`](crate::client::fluent_builders::AssociateLenses) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::AssociateLenses::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::AssociateLenses::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_aliases(Vec<String>)`](crate::client::fluent_builders::AssociateLenses::lens_aliases) / [`set_lens_aliases(Option<Vec<String>>)`](crate::client::fluent_builders::AssociateLenses::set_lens_aliases): <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p>  <p>Identify a lens using its <code>LensSummary$LensAlias</code>.</p>
    /// - On success, responds with [`AssociateLensesOutput`](crate::output::AssociateLensesOutput)

    /// - On failure, responds with [`SdkError<AssociateLensesError>`](crate::error::AssociateLensesError)
    pub fn associate_lenses(&self) -> crate::client::fluent_builders::AssociateLenses {
        crate::client::fluent_builders::AssociateLenses::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLensShare`](crate::client::fluent_builders::CreateLensShare) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::CreateLensShare::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::CreateLensShare::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`shared_with(impl Into<String>)`](crate::client::fluent_builders::CreateLensShare::shared_with) / [`set_shared_with(Option<String>)`](crate::client::fluent_builders::CreateLensShare::set_shared_with): <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::CreateLensShare::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::CreateLensShare::set_client_request_token): <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>  <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>   <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>  </important>
    /// - On success, responds with [`CreateLensShareOutput`](crate::output::CreateLensShareOutput) with field(s):
    ///   - [`share_id(Option<String>)`](crate::output::CreateLensShareOutput::share_id): <p>The ID associated with the workload share.</p>
    /// - On failure, responds with [`SdkError<CreateLensShareError>`](crate::error::CreateLensShareError)
    pub fn create_lens_share(&self) -> crate::client::fluent_builders::CreateLensShare {
        crate::client::fluent_builders::CreateLensShare::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLensVersion`](crate::client::fluent_builders::CreateLensVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::CreateLensVersion::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::CreateLensVersion::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`lens_version(impl Into<String>)`](crate::client::fluent_builders::CreateLensVersion::lens_version) / [`set_lens_version(Option<String>)`](crate::client::fluent_builders::CreateLensVersion::set_lens_version): <p>The version of the lens being created.</p>
    ///   - [`is_major_version(bool)`](crate::client::fluent_builders::CreateLensVersion::is_major_version) / [`set_is_major_version(bool)`](crate::client::fluent_builders::CreateLensVersion::set_is_major_version): <p>Set to true if this new major lens version.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::CreateLensVersion::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::CreateLensVersion::set_client_request_token): <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>  <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>   <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>  </important>
    /// - On success, responds with [`CreateLensVersionOutput`](crate::output::CreateLensVersionOutput) with field(s):
    ///   - [`lens_arn(Option<String>)`](crate::output::CreateLensVersionOutput::lens_arn): <p>The ARN for the lens.</p>
    ///   - [`lens_version(Option<String>)`](crate::output::CreateLensVersionOutput::lens_version): <p>The version of the lens.</p>
    /// - On failure, responds with [`SdkError<CreateLensVersionError>`](crate::error::CreateLensVersionError)
    pub fn create_lens_version(&self) -> crate::client::fluent_builders::CreateLensVersion {
        crate::client::fluent_builders::CreateLensVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateMilestone`](crate::client::fluent_builders::CreateMilestone) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::CreateMilestone::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::CreateMilestone::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`milestone_name(impl Into<String>)`](crate::client::fluent_builders::CreateMilestone::milestone_name) / [`set_milestone_name(Option<String>)`](crate::client::fluent_builders::CreateMilestone::set_milestone_name): <p>The name of the milestone in a workload.</p>  <p>Milestone names must be unique within a workload.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::CreateMilestone::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::CreateMilestone::set_client_request_token): <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>  <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>   <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>  </important>
    /// - On success, responds with [`CreateMilestoneOutput`](crate::output::CreateMilestoneOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::CreateMilestoneOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`milestone_number(i32)`](crate::output::CreateMilestoneOutput::milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    /// - On failure, responds with [`SdkError<CreateMilestoneError>`](crate::error::CreateMilestoneError)
    pub fn create_milestone(&self) -> crate::client::fluent_builders::CreateMilestone {
        crate::client::fluent_builders::CreateMilestone::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWorkload`](crate::client::fluent_builders::CreateWorkload) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_name(impl Into<String>)`](crate::client::fluent_builders::CreateWorkload::workload_name) / [`set_workload_name(Option<String>)`](crate::client::fluent_builders::CreateWorkload::set_workload_name): <p>The name of the workload.</p>  <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateWorkload::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateWorkload::set_description): <p>The description for the workload.</p>
    ///   - [`environment(WorkloadEnvironment)`](crate::client::fluent_builders::CreateWorkload::environment) / [`set_environment(Option<WorkloadEnvironment>)`](crate::client::fluent_builders::CreateWorkload::set_environment): <p>The environment for the workload.</p>
    ///   - [`account_ids(Vec<String>)`](crate::client::fluent_builders::CreateWorkload::account_ids) / [`set_account_ids(Option<Vec<String>>)`](crate::client::fluent_builders::CreateWorkload::set_account_ids): <p>The list of Amazon Web Services account IDs associated with the workload.</p>
    ///   - [`aws_regions(Vec<String>)`](crate::client::fluent_builders::CreateWorkload::aws_regions) / [`set_aws_regions(Option<Vec<String>>)`](crate::client::fluent_builders::CreateWorkload::set_aws_regions): <p>The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.</p>
    ///   - [`non_aws_regions(Vec<String>)`](crate::client::fluent_builders::CreateWorkload::non_aws_regions) / [`set_non_aws_regions(Option<Vec<String>>)`](crate::client::fluent_builders::CreateWorkload::set_non_aws_regions): <p> The list of non-Amazon Web Services Regions associated with the workload.</p>
    ///   - [`pillar_priorities(Vec<String>)`](crate::client::fluent_builders::CreateWorkload::pillar_priorities) / [`set_pillar_priorities(Option<Vec<String>>)`](crate::client::fluent_builders::CreateWorkload::set_pillar_priorities): <p>The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <code>PillarReviewSummary$PillarId</code>.</p>
    ///   - [`architectural_design(impl Into<String>)`](crate::client::fluent_builders::CreateWorkload::architectural_design) / [`set_architectural_design(Option<String>)`](crate::client::fluent_builders::CreateWorkload::set_architectural_design): <p>The URL of the architectural design for the workload.</p>
    ///   - [`review_owner(impl Into<String>)`](crate::client::fluent_builders::CreateWorkload::review_owner) / [`set_review_owner(Option<String>)`](crate::client::fluent_builders::CreateWorkload::set_review_owner): <p>The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.</p>
    ///   - [`industry_type(impl Into<String>)`](crate::client::fluent_builders::CreateWorkload::industry_type) / [`set_industry_type(Option<String>)`](crate::client::fluent_builders::CreateWorkload::set_industry_type): <p>The industry type for the workload.</p>  <p>If specified, must be one of the following:</p>  <ul>   <li> <p> <code>Agriculture</code> </p> </li>   <li> <p> <code>Automobile</code> </p> </li>   <li> <p> <code>Defense</code> </p> </li>   <li> <p> <code>Design and Engineering</code> </p> </li>   <li> <p> <code>Digital Advertising</code> </p> </li>   <li> <p> <code>Education</code> </p> </li>   <li> <p> <code>Environmental Protection</code> </p> </li>   <li> <p> <code>Financial Services</code> </p> </li>   <li> <p> <code>Gaming</code> </p> </li>   <li> <p> <code>General Public Services</code> </p> </li>   <li> <p> <code>Healthcare</code> </p> </li>   <li> <p> <code>Hospitality</code> </p> </li>   <li> <p> <code>InfoTech</code> </p> </li>   <li> <p> <code>Justice and Public Safety</code> </p> </li>   <li> <p> <code>Life Sciences</code> </p> </li>   <li> <p> <code>Manufacturing</code> </p> </li>   <li> <p> <code>Media &amp; Entertainment</code> </p> </li>   <li> <p> <code>Mining &amp; Resources</code> </p> </li>   <li> <p> <code>Oil &amp; Gas</code> </p> </li>   <li> <p> <code>Power &amp; Utilities</code> </p> </li>   <li> <p> <code>Professional Services</code> </p> </li>   <li> <p> <code>Real Estate &amp; Construction</code> </p> </li>   <li> <p> <code>Retail &amp; Wholesale</code> </p> </li>   <li> <p> <code>Social Protection</code> </p> </li>   <li> <p> <code>Telecommunications</code> </p> </li>   <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li>   <li> <p> <code>Other</code> </p> </li>  </ul>
    ///   - [`industry(impl Into<String>)`](crate::client::fluent_builders::CreateWorkload::industry) / [`set_industry(Option<String>)`](crate::client::fluent_builders::CreateWorkload::set_industry): <p>The industry for the workload.</p>
    ///   - [`lenses(Vec<String>)`](crate::client::fluent_builders::CreateWorkload::lenses) / [`set_lenses(Option<Vec<String>>)`](crate::client::fluent_builders::CreateWorkload::set_lenses): <p>The list of lenses associated with the workload. Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`notes(impl Into<String>)`](crate::client::fluent_builders::CreateWorkload::notes) / [`set_notes(Option<String>)`](crate::client::fluent_builders::CreateWorkload::set_notes): <p>The notes associated with the workload.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::CreateWorkload::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::CreateWorkload::set_client_request_token): <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>  <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>   <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>  </important>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateWorkload::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateWorkload::set_tags): <p>The tags to be associated with the workload.</p>
    ///   - [`discovery_config(WorkloadDiscoveryConfig)`](crate::client::fluent_builders::CreateWorkload::discovery_config) / [`set_discovery_config(Option<WorkloadDiscoveryConfig>)`](crate::client::fluent_builders::CreateWorkload::set_discovery_config): <p>Well-Architected discovery configuration settings associated to the workload.</p>
    ///   - [`applications(Vec<String>)`](crate::client::fluent_builders::CreateWorkload::applications) / [`set_applications(Option<Vec<String>>)`](crate::client::fluent_builders::CreateWorkload::set_applications): <p>List of AppRegistry application ARNs associated to the workload.</p>
    /// - On success, responds with [`CreateWorkloadOutput`](crate::output::CreateWorkloadOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::CreateWorkloadOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`workload_arn(Option<String>)`](crate::output::CreateWorkloadOutput::workload_arn): <p>The ARN for the workload.</p>
    /// - On failure, responds with [`SdkError<CreateWorkloadError>`](crate::error::CreateWorkloadError)
    pub fn create_workload(&self) -> crate::client::fluent_builders::CreateWorkload {
        crate::client::fluent_builders::CreateWorkload::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWorkloadShare`](crate::client::fluent_builders::CreateWorkloadShare) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::CreateWorkloadShare::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::CreateWorkloadShare::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`shared_with(impl Into<String>)`](crate::client::fluent_builders::CreateWorkloadShare::shared_with) / [`set_shared_with(Option<String>)`](crate::client::fluent_builders::CreateWorkloadShare::set_shared_with): <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.</p>
    ///   - [`permission_type(PermissionType)`](crate::client::fluent_builders::CreateWorkloadShare::permission_type) / [`set_permission_type(Option<PermissionType>)`](crate::client::fluent_builders::CreateWorkloadShare::set_permission_type): <p>Permission granted on a workload share.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::CreateWorkloadShare::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::CreateWorkloadShare::set_client_request_token): <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>  <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>   <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>  </important>
    /// - On success, responds with [`CreateWorkloadShareOutput`](crate::output::CreateWorkloadShareOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::CreateWorkloadShareOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`share_id(Option<String>)`](crate::output::CreateWorkloadShareOutput::share_id): <p>The ID associated with the workload share.</p>
    /// - On failure, responds with [`SdkError<CreateWorkloadShareError>`](crate::error::CreateWorkloadShareError)
    pub fn create_workload_share(&self) -> crate::client::fluent_builders::CreateWorkloadShare {
        crate::client::fluent_builders::CreateWorkloadShare::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLens`](crate::client::fluent_builders::DeleteLens) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::DeleteLens::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::DeleteLens::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::DeleteLens::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::DeleteLens::set_client_request_token): <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>  <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>   <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>  </important>
    ///   - [`lens_status(LensStatusType)`](crate::client::fluent_builders::DeleteLens::lens_status) / [`set_lens_status(Option<LensStatusType>)`](crate::client::fluent_builders::DeleteLens::set_lens_status): <p>The status of the lens to be deleted.</p>
    /// - On success, responds with [`DeleteLensOutput`](crate::output::DeleteLensOutput)

    /// - On failure, responds with [`SdkError<DeleteLensError>`](crate::error::DeleteLensError)
    pub fn delete_lens(&self) -> crate::client::fluent_builders::DeleteLens {
        crate::client::fluent_builders::DeleteLens::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLensShare`](crate::client::fluent_builders::DeleteLensShare) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`share_id(impl Into<String>)`](crate::client::fluent_builders::DeleteLensShare::share_id) / [`set_share_id(Option<String>)`](crate::client::fluent_builders::DeleteLensShare::set_share_id): <p>The ID associated with the workload share.</p>
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::DeleteLensShare::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::DeleteLensShare::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::DeleteLensShare::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::DeleteLensShare::set_client_request_token): <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>  <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>   <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>  </important>
    /// - On success, responds with [`DeleteLensShareOutput`](crate::output::DeleteLensShareOutput)

    /// - On failure, responds with [`SdkError<DeleteLensShareError>`](crate::error::DeleteLensShareError)
    pub fn delete_lens_share(&self) -> crate::client::fluent_builders::DeleteLensShare {
        crate::client::fluent_builders::DeleteLensShare::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteWorkload`](crate::client::fluent_builders::DeleteWorkload) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::DeleteWorkload::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::DeleteWorkload::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::DeleteWorkload::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::DeleteWorkload::set_client_request_token): <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>  <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>   <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>  </important>
    /// - On success, responds with [`DeleteWorkloadOutput`](crate::output::DeleteWorkloadOutput)

    /// - On failure, responds with [`SdkError<DeleteWorkloadError>`](crate::error::DeleteWorkloadError)
    pub fn delete_workload(&self) -> crate::client::fluent_builders::DeleteWorkload {
        crate::client::fluent_builders::DeleteWorkload::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteWorkloadShare`](crate::client::fluent_builders::DeleteWorkloadShare) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`share_id(impl Into<String>)`](crate::client::fluent_builders::DeleteWorkloadShare::share_id) / [`set_share_id(Option<String>)`](crate::client::fluent_builders::DeleteWorkloadShare::set_share_id): <p>The ID associated with the workload share.</p>
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::DeleteWorkloadShare::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::DeleteWorkloadShare::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::DeleteWorkloadShare::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::DeleteWorkloadShare::set_client_request_token): <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>  <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>   <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>  </important>
    /// - On success, responds with [`DeleteWorkloadShareOutput`](crate::output::DeleteWorkloadShareOutput)

    /// - On failure, responds with [`SdkError<DeleteWorkloadShareError>`](crate::error::DeleteWorkloadShareError)
    pub fn delete_workload_share(&self) -> crate::client::fluent_builders::DeleteWorkloadShare {
        crate::client::fluent_builders::DeleteWorkloadShare::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateLenses`](crate::client::fluent_builders::DisassociateLenses) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::DisassociateLenses::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::DisassociateLenses::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_aliases(Vec<String>)`](crate::client::fluent_builders::DisassociateLenses::lens_aliases) / [`set_lens_aliases(Option<Vec<String>>)`](crate::client::fluent_builders::DisassociateLenses::set_lens_aliases): <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p>  <p>Identify a lens using its <code>LensSummary$LensAlias</code>.</p>
    /// - On success, responds with [`DisassociateLensesOutput`](crate::output::DisassociateLensesOutput)

    /// - On failure, responds with [`SdkError<DisassociateLensesError>`](crate::error::DisassociateLensesError)
    pub fn disassociate_lenses(&self) -> crate::client::fluent_builders::DisassociateLenses {
        crate::client::fluent_builders::DisassociateLenses::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ExportLens`](crate::client::fluent_builders::ExportLens) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::ExportLens::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::ExportLens::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`lens_version(impl Into<String>)`](crate::client::fluent_builders::ExportLens::lens_version) / [`set_lens_version(Option<String>)`](crate::client::fluent_builders::ExportLens::set_lens_version): <p>The lens version to be exported.</p>
    /// - On success, responds with [`ExportLensOutput`](crate::output::ExportLensOutput) with field(s):
    ///   - [`lens_json(Option<String>)`](crate::output::ExportLensOutput::lens_json): <p>The JSON for the lens.</p>
    /// - On failure, responds with [`SdkError<ExportLensError>`](crate::error::ExportLensError)
    pub fn export_lens(&self) -> crate::client::fluent_builders::ExportLens {
        crate::client::fluent_builders::ExportLens::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAnswer`](crate::client::fluent_builders::GetAnswer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::GetAnswer::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::GetAnswer::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::GetAnswer::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::GetAnswer::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`question_id(impl Into<String>)`](crate::client::fluent_builders::GetAnswer::question_id) / [`set_question_id(Option<String>)`](crate::client::fluent_builders::GetAnswer::set_question_id): <p>The ID of the question.</p>
    ///   - [`milestone_number(i32)`](crate::client::fluent_builders::GetAnswer::milestone_number) / [`set_milestone_number(i32)`](crate::client::fluent_builders::GetAnswer::set_milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    /// - On success, responds with [`GetAnswerOutput`](crate::output::GetAnswerOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::GetAnswerOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`milestone_number(i32)`](crate::output::GetAnswerOutput::milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    ///   - [`lens_alias(Option<String>)`](crate::output::GetAnswerOutput::lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`lens_arn(Option<String>)`](crate::output::GetAnswerOutput::lens_arn): <p>The ARN for the lens.</p>
    ///   - [`answer(Option<Answer>)`](crate::output::GetAnswerOutput::answer): <p>An answer of the question.</p>
    /// - On failure, responds with [`SdkError<GetAnswerError>`](crate::error::GetAnswerError)
    pub fn get_answer(&self) -> crate::client::fluent_builders::GetAnswer {
        crate::client::fluent_builders::GetAnswer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLens`](crate::client::fluent_builders::GetLens) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::GetLens::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::GetLens::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`lens_version(impl Into<String>)`](crate::client::fluent_builders::GetLens::lens_version) / [`set_lens_version(Option<String>)`](crate::client::fluent_builders::GetLens::set_lens_version): <p>The lens version to be retrieved.</p>
    /// - On success, responds with [`GetLensOutput`](crate::output::GetLensOutput) with field(s):
    ///   - [`lens(Option<Lens>)`](crate::output::GetLensOutput::lens): <p>A lens return object.</p>
    /// - On failure, responds with [`SdkError<GetLensError>`](crate::error::GetLensError)
    pub fn get_lens(&self) -> crate::client::fluent_builders::GetLens {
        crate::client::fluent_builders::GetLens::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLensReview`](crate::client::fluent_builders::GetLensReview) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::GetLensReview::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::GetLensReview::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::GetLensReview::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::GetLensReview::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`milestone_number(i32)`](crate::client::fluent_builders::GetLensReview::milestone_number) / [`set_milestone_number(i32)`](crate::client::fluent_builders::GetLensReview::set_milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    /// - On success, responds with [`GetLensReviewOutput`](crate::output::GetLensReviewOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::GetLensReviewOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`milestone_number(i32)`](crate::output::GetLensReviewOutput::milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    ///   - [`lens_review(Option<LensReview>)`](crate::output::GetLensReviewOutput::lens_review): <p>A lens review of a question.</p>
    /// - On failure, responds with [`SdkError<GetLensReviewError>`](crate::error::GetLensReviewError)
    pub fn get_lens_review(&self) -> crate::client::fluent_builders::GetLensReview {
        crate::client::fluent_builders::GetLensReview::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLensReviewReport`](crate::client::fluent_builders::GetLensReviewReport) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::GetLensReviewReport::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::GetLensReviewReport::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::GetLensReviewReport::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::GetLensReviewReport::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`milestone_number(i32)`](crate::client::fluent_builders::GetLensReviewReport::milestone_number) / [`set_milestone_number(i32)`](crate::client::fluent_builders::GetLensReviewReport::set_milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    /// - On success, responds with [`GetLensReviewReportOutput`](crate::output::GetLensReviewReportOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::GetLensReviewReportOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`milestone_number(i32)`](crate::output::GetLensReviewReportOutput::milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    ///   - [`lens_review_report(Option<LensReviewReport>)`](crate::output::GetLensReviewReportOutput::lens_review_report): <p>A report of a lens review.</p>
    /// - On failure, responds with [`SdkError<GetLensReviewReportError>`](crate::error::GetLensReviewReportError)
    pub fn get_lens_review_report(&self) -> crate::client::fluent_builders::GetLensReviewReport {
        crate::client::fluent_builders::GetLensReviewReport::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLensVersionDifference`](crate::client::fluent_builders::GetLensVersionDifference) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::GetLensVersionDifference::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::GetLensVersionDifference::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`base_lens_version(impl Into<String>)`](crate::client::fluent_builders::GetLensVersionDifference::base_lens_version) / [`set_base_lens_version(Option<String>)`](crate::client::fluent_builders::GetLensVersionDifference::set_base_lens_version): <p>The base version of the lens.</p>
    ///   - [`target_lens_version(impl Into<String>)`](crate::client::fluent_builders::GetLensVersionDifference::target_lens_version) / [`set_target_lens_version(Option<String>)`](crate::client::fluent_builders::GetLensVersionDifference::set_target_lens_version): <p>The lens version to target a difference for.</p>
    /// - On success, responds with [`GetLensVersionDifferenceOutput`](crate::output::GetLensVersionDifferenceOutput) with field(s):
    ///   - [`lens_alias(Option<String>)`](crate::output::GetLensVersionDifferenceOutput::lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`lens_arn(Option<String>)`](crate::output::GetLensVersionDifferenceOutput::lens_arn): <p>The ARN for the lens.</p>
    ///   - [`base_lens_version(Option<String>)`](crate::output::GetLensVersionDifferenceOutput::base_lens_version): <p>The base version of the lens.</p>
    ///   - [`target_lens_version(Option<String>)`](crate::output::GetLensVersionDifferenceOutput::target_lens_version): <p>The target lens version for the lens.</p>
    ///   - [`latest_lens_version(Option<String>)`](crate::output::GetLensVersionDifferenceOutput::latest_lens_version): <p>The latest version of the lens.</p>
    ///   - [`version_differences(Option<VersionDifferences>)`](crate::output::GetLensVersionDifferenceOutput::version_differences): <p>The differences between the base and latest versions of the lens.</p>
    /// - On failure, responds with [`SdkError<GetLensVersionDifferenceError>`](crate::error::GetLensVersionDifferenceError)
    pub fn get_lens_version_difference(
        &self,
    ) -> crate::client::fluent_builders::GetLensVersionDifference {
        crate::client::fluent_builders::GetLensVersionDifference::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetMilestone`](crate::client::fluent_builders::GetMilestone) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::GetMilestone::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::GetMilestone::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`milestone_number(i32)`](crate::client::fluent_builders::GetMilestone::milestone_number) / [`set_milestone_number(i32)`](crate::client::fluent_builders::GetMilestone::set_milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    /// - On success, responds with [`GetMilestoneOutput`](crate::output::GetMilestoneOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::GetMilestoneOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`milestone(Option<Milestone>)`](crate::output::GetMilestoneOutput::milestone): <p>A milestone return object.</p>
    /// - On failure, responds with [`SdkError<GetMilestoneError>`](crate::error::GetMilestoneError)
    pub fn get_milestone(&self) -> crate::client::fluent_builders::GetMilestone {
        crate::client::fluent_builders::GetMilestone::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetWorkload`](crate::client::fluent_builders::GetWorkload) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::GetWorkload::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::GetWorkload::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    /// - On success, responds with [`GetWorkloadOutput`](crate::output::GetWorkloadOutput) with field(s):
    ///   - [`workload(Option<Workload>)`](crate::output::GetWorkloadOutput::workload): <p>A workload return object.</p>
    /// - On failure, responds with [`SdkError<GetWorkloadError>`](crate::error::GetWorkloadError)
    pub fn get_workload(&self) -> crate::client::fluent_builders::GetWorkload {
        crate::client::fluent_builders::GetWorkload::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportLens`](crate::client::fluent_builders::ImportLens) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::ImportLens::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::ImportLens::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`json_string(impl Into<String>)`](crate::client::fluent_builders::ImportLens::json_string) / [`set_json_string(Option<String>)`](crate::client::fluent_builders::ImportLens::set_json_string): <p>The JSON representation of a lens.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::ImportLens::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::ImportLens::set_client_request_token): <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>  <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>   <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>  </important>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::ImportLens::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::ImportLens::set_tags): <p>Tags to associate to a lens.</p>
    /// - On success, responds with [`ImportLensOutput`](crate::output::ImportLensOutput) with field(s):
    ///   - [`lens_arn(Option<String>)`](crate::output::ImportLensOutput::lens_arn): <p>The ARN for the lens.</p>
    ///   - [`status(Option<ImportLensStatus>)`](crate::output::ImportLensOutput::status): <p>The status of the imported lens.</p>
    /// - On failure, responds with [`SdkError<ImportLensError>`](crate::error::ImportLensError)
    pub fn import_lens(&self) -> crate::client::fluent_builders::ImportLens {
        crate::client::fluent_builders::ImportLens::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListAnswers`](crate::client::fluent_builders::ListAnswers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListAnswers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::ListAnswers::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::ListAnswers::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::ListAnswers::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::ListAnswers::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`pillar_id(impl Into<String>)`](crate::client::fluent_builders::ListAnswers::pillar_id) / [`set_pillar_id(Option<String>)`](crate::client::fluent_builders::ListAnswers::set_pillar_id): <p>The ID used to identify a pillar, for example, <code>security</code>.</p>  <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    ///   - [`milestone_number(i32)`](crate::client::fluent_builders::ListAnswers::milestone_number) / [`set_milestone_number(i32)`](crate::client::fluent_builders::ListAnswers::set_milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListAnswers::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListAnswers::set_next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListAnswers::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListAnswers::set_max_results): <p>The maximum number of results to return for this request.</p>
    /// - On success, responds with [`ListAnswersOutput`](crate::output::ListAnswersOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::ListAnswersOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`milestone_number(i32)`](crate::output::ListAnswersOutput::milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    ///   - [`lens_alias(Option<String>)`](crate::output::ListAnswersOutput::lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`lens_arn(Option<String>)`](crate::output::ListAnswersOutput::lens_arn): <p>The ARN for the lens.</p>
    ///   - [`answer_summaries(Option<Vec<AnswerSummary>>)`](crate::output::ListAnswersOutput::answer_summaries): <p>List of answer summaries of lens review in a workload.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListAnswersOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListAnswersError>`](crate::error::ListAnswersError)
    pub fn list_answers(&self) -> crate::client::fluent_builders::ListAnswers {
        crate::client::fluent_builders::ListAnswers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCheckDetails`](crate::client::fluent_builders::ListCheckDetails) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCheckDetails::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::ListCheckDetails::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::ListCheckDetails::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCheckDetails::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCheckDetails::set_next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCheckDetails::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListCheckDetails::set_max_results): <p>The maximum number of results to return for this request.</p>
    ///   - [`lens_arn(impl Into<String>)`](crate::client::fluent_builders::ListCheckDetails::lens_arn) / [`set_lens_arn(Option<String>)`](crate::client::fluent_builders::ListCheckDetails::set_lens_arn): <p>Well-Architected Lens ARN.</p>
    ///   - [`pillar_id(impl Into<String>)`](crate::client::fluent_builders::ListCheckDetails::pillar_id) / [`set_pillar_id(Option<String>)`](crate::client::fluent_builders::ListCheckDetails::set_pillar_id): <p>The ID used to identify a pillar, for example, <code>security</code>.</p>  <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    ///   - [`question_id(impl Into<String>)`](crate::client::fluent_builders::ListCheckDetails::question_id) / [`set_question_id(Option<String>)`](crate::client::fluent_builders::ListCheckDetails::set_question_id): <p>The ID of the question.</p>
    ///   - [`choice_id(impl Into<String>)`](crate::client::fluent_builders::ListCheckDetails::choice_id) / [`set_choice_id(Option<String>)`](crate::client::fluent_builders::ListCheckDetails::set_choice_id): <p>The ID of a choice.</p>
    /// - On success, responds with [`ListCheckDetailsOutput`](crate::output::ListCheckDetailsOutput) with field(s):
    ///   - [`check_details(Option<Vec<CheckDetail>>)`](crate::output::ListCheckDetailsOutput::check_details): <p>The details about the Trusted Advisor checks related to the Well-Architected best practice.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListCheckDetailsOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListCheckDetailsError>`](crate::error::ListCheckDetailsError)
    pub fn list_check_details(&self) -> crate::client::fluent_builders::ListCheckDetails {
        crate::client::fluent_builders::ListCheckDetails::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCheckSummaries`](crate::client::fluent_builders::ListCheckSummaries) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCheckSummaries::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::ListCheckSummaries::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::ListCheckSummaries::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCheckSummaries::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCheckSummaries::set_next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCheckSummaries::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListCheckSummaries::set_max_results): <p>The maximum number of results to return for this request.</p>
    ///   - [`lens_arn(impl Into<String>)`](crate::client::fluent_builders::ListCheckSummaries::lens_arn) / [`set_lens_arn(Option<String>)`](crate::client::fluent_builders::ListCheckSummaries::set_lens_arn): <p>Well-Architected Lens ARN.</p>
    ///   - [`pillar_id(impl Into<String>)`](crate::client::fluent_builders::ListCheckSummaries::pillar_id) / [`set_pillar_id(Option<String>)`](crate::client::fluent_builders::ListCheckSummaries::set_pillar_id): <p>The ID used to identify a pillar, for example, <code>security</code>.</p>  <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    ///   - [`question_id(impl Into<String>)`](crate::client::fluent_builders::ListCheckSummaries::question_id) / [`set_question_id(Option<String>)`](crate::client::fluent_builders::ListCheckSummaries::set_question_id): <p>The ID of the question.</p>
    ///   - [`choice_id(impl Into<String>)`](crate::client::fluent_builders::ListCheckSummaries::choice_id) / [`set_choice_id(Option<String>)`](crate::client::fluent_builders::ListCheckSummaries::set_choice_id): <p>The ID of a choice.</p>
    /// - On success, responds with [`ListCheckSummariesOutput`](crate::output::ListCheckSummariesOutput) with field(s):
    ///   - [`check_summaries(Option<Vec<CheckSummary>>)`](crate::output::ListCheckSummariesOutput::check_summaries): <p>List of Trusted Advisor summaries related to the Well-Architected best practice.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListCheckSummariesOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListCheckSummariesError>`](crate::error::ListCheckSummariesError)
    pub fn list_check_summaries(&self) -> crate::client::fluent_builders::ListCheckSummaries {
        crate::client::fluent_builders::ListCheckSummaries::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListLenses`](crate::client::fluent_builders::ListLenses) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListLenses::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLenses::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLenses::set_next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListLenses::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListLenses::set_max_results): <p>The maximum number of results to return for this request.</p>
    ///   - [`lens_type(LensType)`](crate::client::fluent_builders::ListLenses::lens_type) / [`set_lens_type(Option<LensType>)`](crate::client::fluent_builders::ListLenses::set_lens_type): <p>The type of lenses to be returned.</p>
    ///   - [`lens_status(LensStatusType)`](crate::client::fluent_builders::ListLenses::lens_status) / [`set_lens_status(Option<LensStatusType>)`](crate::client::fluent_builders::ListLenses::set_lens_status): <p>The status of lenses to be returned.</p>
    ///   - [`lens_name(impl Into<String>)`](crate::client::fluent_builders::ListLenses::lens_name) / [`set_lens_name(Option<String>)`](crate::client::fluent_builders::ListLenses::set_lens_name): <p>The full name of the lens.</p>
    /// - On success, responds with [`ListLensesOutput`](crate::output::ListLensesOutput) with field(s):
    ///   - [`lens_summaries(Option<Vec<LensSummary>>)`](crate::output::ListLensesOutput::lens_summaries): <p>List of lens summaries of available lenses.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListLensesOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListLensesError>`](crate::error::ListLensesError)
    pub fn list_lenses(&self) -> crate::client::fluent_builders::ListLenses {
        crate::client::fluent_builders::ListLenses::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListLensReviewImprovements`](crate::client::fluent_builders::ListLensReviewImprovements) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListLensReviewImprovements::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::ListLensReviewImprovements::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::ListLensReviewImprovements::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::ListLensReviewImprovements::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::ListLensReviewImprovements::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`pillar_id(impl Into<String>)`](crate::client::fluent_builders::ListLensReviewImprovements::pillar_id) / [`set_pillar_id(Option<String>)`](crate::client::fluent_builders::ListLensReviewImprovements::set_pillar_id): <p>The ID used to identify a pillar, for example, <code>security</code>.</p>  <p>A pillar is identified by its <code>PillarReviewSummary$PillarId</code>.</p>
    ///   - [`milestone_number(i32)`](crate::client::fluent_builders::ListLensReviewImprovements::milestone_number) / [`set_milestone_number(i32)`](crate::client::fluent_builders::ListLensReviewImprovements::set_milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLensReviewImprovements::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLensReviewImprovements::set_next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListLensReviewImprovements::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListLensReviewImprovements::set_max_results): <p>The maximum number of results to return for this request.</p>
    /// - On success, responds with [`ListLensReviewImprovementsOutput`](crate::output::ListLensReviewImprovementsOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::ListLensReviewImprovementsOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`milestone_number(i32)`](crate::output::ListLensReviewImprovementsOutput::milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    ///   - [`lens_alias(Option<String>)`](crate::output::ListLensReviewImprovementsOutput::lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`lens_arn(Option<String>)`](crate::output::ListLensReviewImprovementsOutput::lens_arn): <p>The ARN for the lens.</p>
    ///   - [`improvement_summaries(Option<Vec<ImprovementSummary>>)`](crate::output::ListLensReviewImprovementsOutput::improvement_summaries): <p>List of improvement summaries of lens review in a workload.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListLensReviewImprovementsOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListLensReviewImprovementsError>`](crate::error::ListLensReviewImprovementsError)
    pub fn list_lens_review_improvements(
        &self,
    ) -> crate::client::fluent_builders::ListLensReviewImprovements {
        crate::client::fluent_builders::ListLensReviewImprovements::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListLensReviews`](crate::client::fluent_builders::ListLensReviews) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListLensReviews::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::ListLensReviews::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::ListLensReviews::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`milestone_number(i32)`](crate::client::fluent_builders::ListLensReviews::milestone_number) / [`set_milestone_number(i32)`](crate::client::fluent_builders::ListLensReviews::set_milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLensReviews::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLensReviews::set_next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListLensReviews::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListLensReviews::set_max_results): <p>The maximum number of results to return for this request.</p>
    /// - On success, responds with [`ListLensReviewsOutput`](crate::output::ListLensReviewsOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::ListLensReviewsOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`milestone_number(i32)`](crate::output::ListLensReviewsOutput::milestone_number): <p>The milestone number.</p>  <p>A workload can have a maximum of 100 milestones.</p>
    ///   - [`lens_review_summaries(Option<Vec<LensReviewSummary>>)`](crate::output::ListLensReviewsOutput::lens_review_summaries): <p>List of lens summaries of lens reviews of a workload.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListLensReviewsOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListLensReviewsError>`](crate::error::ListLensReviewsError)
    pub fn list_lens_reviews(&self) -> crate::client::fluent_builders::ListLensReviews {
        crate::client::fluent_builders::ListLensReviews::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListLensShares`](crate::client::fluent_builders::ListLensShares) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListLensShares::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::ListLensShares::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::ListLensShares::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`shared_with_prefix(impl Into<String>)`](crate::client::fluent_builders::ListLensShares::shared_with_prefix) / [`set_shared_with_prefix(Option<String>)`](crate::client::fluent_builders::ListLensShares::set_shared_with_prefix): <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the lens is shared.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLensShares::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLensShares::set_next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListLensShares::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListLensShares::set_max_results): <p>The maximum number of results to return for this request.</p>
    ///   - [`status(ShareStatus)`](crate::client::fluent_builders::ListLensShares::status) / [`set_status(Option<ShareStatus>)`](crate::client::fluent_builders::ListLensShares::set_status): <p>The status of a workload share.</p>
    /// - On success, responds with [`ListLensSharesOutput`](crate::output::ListLensSharesOutput) with field(s):
    ///   - [`lens_share_summaries(Option<Vec<LensShareSummary>>)`](crate::output::ListLensSharesOutput::lens_share_summaries): <p>A list of lens share summaries.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListLensSharesOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListLensSharesError>`](crate::error::ListLensSharesError)
    pub fn list_lens_shares(&self) -> crate::client::fluent_builders::ListLensShares {
        crate::client::fluent_builders::ListLensShares::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListMilestones`](crate::client::fluent_builders::ListMilestones) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListMilestones::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::ListMilestones::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::ListMilestones::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListMilestones::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListMilestones::set_next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListMilestones::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListMilestones::set_max_results): <p>The maximum number of results to return for this request.</p>
    /// - On success, responds with [`ListMilestonesOutput`](crate::output::ListMilestonesOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::ListMilestonesOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`milestone_summaries(Option<Vec<MilestoneSummary>>)`](crate::output::ListMilestonesOutput::milestone_summaries): <p>A list of milestone summaries.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListMilestonesOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListMilestonesError>`](crate::error::ListMilestonesError)
    pub fn list_milestones(&self) -> crate::client::fluent_builders::ListMilestones {
        crate::client::fluent_builders::ListMilestones::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListNotifications`](crate::client::fluent_builders::ListNotifications) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListNotifications::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::ListNotifications::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::ListNotifications::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListNotifications::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListNotifications::set_next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListNotifications::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListNotifications::set_max_results): <p>The maximum number of results to return for this request.</p>
    /// - On success, responds with [`ListNotificationsOutput`](crate::output::ListNotificationsOutput) with field(s):
    ///   - [`notification_summaries(Option<Vec<NotificationSummary>>)`](crate::output::ListNotificationsOutput::notification_summaries): <p>List of lens notification summaries in a workload.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListNotificationsOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListNotificationsError>`](crate::error::ListNotificationsError)
    pub fn list_notifications(&self) -> crate::client::fluent_builders::ListNotifications {
        crate::client::fluent_builders::ListNotifications::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListShareInvitations`](crate::client::fluent_builders::ListShareInvitations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListShareInvitations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_name_prefix(impl Into<String>)`](crate::client::fluent_builders::ListShareInvitations::workload_name_prefix) / [`set_workload_name_prefix(Option<String>)`](crate::client::fluent_builders::ListShareInvitations::set_workload_name_prefix): <p>An optional string added to the beginning of each workload name returned in the results.</p>
    ///   - [`lens_name_prefix(impl Into<String>)`](crate::client::fluent_builders::ListShareInvitations::lens_name_prefix) / [`set_lens_name_prefix(Option<String>)`](crate::client::fluent_builders::ListShareInvitations::set_lens_name_prefix): <p>An optional string added to the beginning of each lens name returned in the results.</p>
    ///   - [`share_resource_type(ShareResourceType)`](crate::client::fluent_builders::ListShareInvitations::share_resource_type) / [`set_share_resource_type(Option<ShareResourceType>)`](crate::client::fluent_builders::ListShareInvitations::set_share_resource_type): <p>The type of share invitations to be returned.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListShareInvitations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListShareInvitations::set_next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListShareInvitations::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListShareInvitations::set_max_results): <p>The maximum number of results to return for this request.</p>
    /// - On success, responds with [`ListShareInvitationsOutput`](crate::output::ListShareInvitationsOutput) with field(s):
    ///   - [`share_invitation_summaries(Option<Vec<ShareInvitationSummary>>)`](crate::output::ListShareInvitationsOutput::share_invitation_summaries): <p>List of share invitation summaries in a workload.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListShareInvitationsOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListShareInvitationsError>`](crate::error::ListShareInvitationsError)
    pub fn list_share_invitations(&self) -> crate::client::fluent_builders::ListShareInvitations {
        crate::client::fluent_builders::ListShareInvitations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::workload_arn) / [`set_workload_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_workload_arn): <p>The ARN for the workload.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The tags for the resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWorkloads`](crate::client::fluent_builders::ListWorkloads) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWorkloads::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_name_prefix(impl Into<String>)`](crate::client::fluent_builders::ListWorkloads::workload_name_prefix) / [`set_workload_name_prefix(Option<String>)`](crate::client::fluent_builders::ListWorkloads::set_workload_name_prefix): <p>An optional string added to the beginning of each workload name returned in the results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListWorkloads::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListWorkloads::set_next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWorkloads::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListWorkloads::set_max_results): <p>The maximum number of results to return for this request.</p>
    /// - On success, responds with [`ListWorkloadsOutput`](crate::output::ListWorkloadsOutput) with field(s):
    ///   - [`workload_summaries(Option<Vec<WorkloadSummary>>)`](crate::output::ListWorkloadsOutput::workload_summaries): <p>A list of workload summaries.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListWorkloadsOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListWorkloadsError>`](crate::error::ListWorkloadsError)
    pub fn list_workloads(&self) -> crate::client::fluent_builders::ListWorkloads {
        crate::client::fluent_builders::ListWorkloads::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWorkloadShares`](crate::client::fluent_builders::ListWorkloadShares) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWorkloadShares::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::ListWorkloadShares::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::ListWorkloadShares::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`shared_with_prefix(impl Into<String>)`](crate::client::fluent_builders::ListWorkloadShares::shared_with_prefix) / [`set_shared_with_prefix(Option<String>)`](crate::client::fluent_builders::ListWorkloadShares::set_shared_with_prefix): <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListWorkloadShares::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListWorkloadShares::set_next_token): <p>The token to use to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListWorkloadShares::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListWorkloadShares::set_max_results): <p>The maximum number of results to return for this request.</p>
    ///   - [`status(ShareStatus)`](crate::client::fluent_builders::ListWorkloadShares::status) / [`set_status(Option<ShareStatus>)`](crate::client::fluent_builders::ListWorkloadShares::set_status): <p>The status of a workload share.</p>
    /// - On success, responds with [`ListWorkloadSharesOutput`](crate::output::ListWorkloadSharesOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::ListWorkloadSharesOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`workload_share_summaries(Option<Vec<WorkloadShareSummary>>)`](crate::output::ListWorkloadSharesOutput::workload_share_summaries): <p>A list of workload share summaries.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListWorkloadSharesOutput::next_token): <p>The token to use to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListWorkloadSharesError>`](crate::error::ListWorkloadSharesError)
    pub fn list_workload_shares(&self) -> crate::client::fluent_builders::ListWorkloadShares {
        crate::client::fluent_builders::ListWorkloadShares::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::workload_arn) / [`set_workload_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_workload_arn): <p>The ARN for the workload.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags for the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::workload_arn) / [`set_workload_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_workload_arn): <p>The ARN for the workload.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>A list of tag keys. Existing tags of the resource whose keys are members of this list are removed from the resource.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateAnswer`](crate::client::fluent_builders::UpdateAnswer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::UpdateAnswer::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::UpdateAnswer::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::UpdateAnswer::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::UpdateAnswer::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`question_id(impl Into<String>)`](crate::client::fluent_builders::UpdateAnswer::question_id) / [`set_question_id(Option<String>)`](crate::client::fluent_builders::UpdateAnswer::set_question_id): <p>The ID of the question.</p>
    ///   - [`selected_choices(Vec<String>)`](crate::client::fluent_builders::UpdateAnswer::selected_choices) / [`set_selected_choices(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateAnswer::set_selected_choices): <p>List of selected choice IDs in a question answer.</p>  <p>The values entered replace the previously selected choices.</p>
    ///   - [`choice_updates(HashMap<String, ChoiceUpdate>)`](crate::client::fluent_builders::UpdateAnswer::choice_updates) / [`set_choice_updates(Option<HashMap<String, ChoiceUpdate>>)`](crate::client::fluent_builders::UpdateAnswer::set_choice_updates): <p>A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.</p>
    ///   - [`notes(impl Into<String>)`](crate::client::fluent_builders::UpdateAnswer::notes) / [`set_notes(Option<String>)`](crate::client::fluent_builders::UpdateAnswer::set_notes): <p>The notes associated with the workload.</p>
    ///   - [`is_applicable(bool)`](crate::client::fluent_builders::UpdateAnswer::is_applicable) / [`set_is_applicable(bool)`](crate::client::fluent_builders::UpdateAnswer::set_is_applicable): <p>Defines whether this question is applicable to a lens review.</p>
    ///   - [`reason(AnswerReason)`](crate::client::fluent_builders::UpdateAnswer::reason) / [`set_reason(Option<AnswerReason>)`](crate::client::fluent_builders::UpdateAnswer::set_reason): <p>The reason why a question is not applicable to your workload.</p>
    /// - On success, responds with [`UpdateAnswerOutput`](crate::output::UpdateAnswerOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::UpdateAnswerOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_alias(Option<String>)`](crate::output::UpdateAnswerOutput::lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`lens_arn(Option<String>)`](crate::output::UpdateAnswerOutput::lens_arn): <p>The ARN for the lens.</p>
    ///   - [`answer(Option<Answer>)`](crate::output::UpdateAnswerOutput::answer): <p>An answer of the question.</p>
    /// - On failure, responds with [`SdkError<UpdateAnswerError>`](crate::error::UpdateAnswerError)
    pub fn update_answer(&self) -> crate::client::fluent_builders::UpdateAnswer {
        crate::client::fluent_builders::UpdateAnswer::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateGlobalSettings`](crate::client::fluent_builders::UpdateGlobalSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`organization_sharing_status(OrganizationSharingStatus)`](crate::client::fluent_builders::UpdateGlobalSettings::organization_sharing_status) / [`set_organization_sharing_status(Option<OrganizationSharingStatus>)`](crate::client::fluent_builders::UpdateGlobalSettings::set_organization_sharing_status): <p>The status of organization sharing settings.</p>
    /// - On success, responds with [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput)

    /// - On failure, responds with [`SdkError<UpdateGlobalSettingsError>`](crate::error::UpdateGlobalSettingsError)
    pub fn update_global_settings(&self) -> crate::client::fluent_builders::UpdateGlobalSettings {
        crate::client::fluent_builders::UpdateGlobalSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateLensReview`](crate::client::fluent_builders::UpdateLensReview) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::UpdateLensReview::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::UpdateLensReview::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::UpdateLensReview::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::UpdateLensReview::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`lens_notes(impl Into<String>)`](crate::client::fluent_builders::UpdateLensReview::lens_notes) / [`set_lens_notes(Option<String>)`](crate::client::fluent_builders::UpdateLensReview::set_lens_notes): <p>The notes associated with the workload.</p>
    ///   - [`pillar_notes(HashMap<String, String>)`](crate::client::fluent_builders::UpdateLensReview::pillar_notes) / [`set_pillar_notes(Option<HashMap<String, String>>)`](crate::client::fluent_builders::UpdateLensReview::set_pillar_notes): <p>List of pillar notes of a lens review in a workload.</p>
    /// - On success, responds with [`UpdateLensReviewOutput`](crate::output::UpdateLensReviewOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::UpdateLensReviewOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_review(Option<LensReview>)`](crate::output::UpdateLensReviewOutput::lens_review): <p>A lens review of a question.</p>
    /// - On failure, responds with [`SdkError<UpdateLensReviewError>`](crate::error::UpdateLensReviewError)
    pub fn update_lens_review(&self) -> crate::client::fluent_builders::UpdateLensReview {
        crate::client::fluent_builders::UpdateLensReview::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateShareInvitation`](crate::client::fluent_builders::UpdateShareInvitation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`share_invitation_id(impl Into<String>)`](crate::client::fluent_builders::UpdateShareInvitation::share_invitation_id) / [`set_share_invitation_id(Option<String>)`](crate::client::fluent_builders::UpdateShareInvitation::set_share_invitation_id): <p>The ID assigned to the share invitation.</p>
    ///   - [`share_invitation_action(ShareInvitationAction)`](crate::client::fluent_builders::UpdateShareInvitation::share_invitation_action) / [`set_share_invitation_action(Option<ShareInvitationAction>)`](crate::client::fluent_builders::UpdateShareInvitation::set_share_invitation_action): <p>Share invitation action taken by contributor.</p>
    /// - On success, responds with [`UpdateShareInvitationOutput`](crate::output::UpdateShareInvitationOutput) with field(s):
    ///   - [`share_invitation(Option<ShareInvitation>)`](crate::output::UpdateShareInvitationOutput::share_invitation): <p>The updated workload or custom lens share invitation.</p>
    /// - On failure, responds with [`SdkError<UpdateShareInvitationError>`](crate::error::UpdateShareInvitationError)
    pub fn update_share_invitation(&self) -> crate::client::fluent_builders::UpdateShareInvitation {
        crate::client::fluent_builders::UpdateShareInvitation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateWorkload`](crate::client::fluent_builders::UpdateWorkload) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkload::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::UpdateWorkload::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`workload_name(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkload::workload_name) / [`set_workload_name(Option<String>)`](crate::client::fluent_builders::UpdateWorkload::set_workload_name): <p>The name of the workload.</p>  <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkload::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateWorkload::set_description): <p>The description for the workload.</p>
    ///   - [`environment(WorkloadEnvironment)`](crate::client::fluent_builders::UpdateWorkload::environment) / [`set_environment(Option<WorkloadEnvironment>)`](crate::client::fluent_builders::UpdateWorkload::set_environment): <p>The environment for the workload.</p>
    ///   - [`account_ids(Vec<String>)`](crate::client::fluent_builders::UpdateWorkload::account_ids) / [`set_account_ids(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateWorkload::set_account_ids): <p>The list of Amazon Web Services account IDs associated with the workload.</p>
    ///   - [`aws_regions(Vec<String>)`](crate::client::fluent_builders::UpdateWorkload::aws_regions) / [`set_aws_regions(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateWorkload::set_aws_regions): <p>The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.</p>
    ///   - [`non_aws_regions(Vec<String>)`](crate::client::fluent_builders::UpdateWorkload::non_aws_regions) / [`set_non_aws_regions(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateWorkload::set_non_aws_regions): <p> The list of non-Amazon Web Services Regions associated with the workload.</p>
    ///   - [`pillar_priorities(Vec<String>)`](crate::client::fluent_builders::UpdateWorkload::pillar_priorities) / [`set_pillar_priorities(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateWorkload::set_pillar_priorities): <p>The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <code>PillarReviewSummary$PillarId</code>.</p>
    ///   - [`architectural_design(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkload::architectural_design) / [`set_architectural_design(Option<String>)`](crate::client::fluent_builders::UpdateWorkload::set_architectural_design): <p>The URL of the architectural design for the workload.</p>
    ///   - [`review_owner(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkload::review_owner) / [`set_review_owner(Option<String>)`](crate::client::fluent_builders::UpdateWorkload::set_review_owner): <p>The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.</p>
    ///   - [`is_review_owner_update_acknowledged(bool)`](crate::client::fluent_builders::UpdateWorkload::is_review_owner_update_acknowledged) / [`set_is_review_owner_update_acknowledged(bool)`](crate::client::fluent_builders::UpdateWorkload::set_is_review_owner_update_acknowledged): <p>Flag indicating whether the workload owner has acknowledged that the <i>Review owner</i> field is required.</p>  <p>If a <b>Review owner</b> is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.</p>
    ///   - [`industry_type(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkload::industry_type) / [`set_industry_type(Option<String>)`](crate::client::fluent_builders::UpdateWorkload::set_industry_type): <p>The industry type for the workload.</p>  <p>If specified, must be one of the following:</p>  <ul>   <li> <p> <code>Agriculture</code> </p> </li>   <li> <p> <code>Automobile</code> </p> </li>   <li> <p> <code>Defense</code> </p> </li>   <li> <p> <code>Design and Engineering</code> </p> </li>   <li> <p> <code>Digital Advertising</code> </p> </li>   <li> <p> <code>Education</code> </p> </li>   <li> <p> <code>Environmental Protection</code> </p> </li>   <li> <p> <code>Financial Services</code> </p> </li>   <li> <p> <code>Gaming</code> </p> </li>   <li> <p> <code>General Public Services</code> </p> </li>   <li> <p> <code>Healthcare</code> </p> </li>   <li> <p> <code>Hospitality</code> </p> </li>   <li> <p> <code>InfoTech</code> </p> </li>   <li> <p> <code>Justice and Public Safety</code> </p> </li>   <li> <p> <code>Life Sciences</code> </p> </li>   <li> <p> <code>Manufacturing</code> </p> </li>   <li> <p> <code>Media &amp; Entertainment</code> </p> </li>   <li> <p> <code>Mining &amp; Resources</code> </p> </li>   <li> <p> <code>Oil &amp; Gas</code> </p> </li>   <li> <p> <code>Power &amp; Utilities</code> </p> </li>   <li> <p> <code>Professional Services</code> </p> </li>   <li> <p> <code>Real Estate &amp; Construction</code> </p> </li>   <li> <p> <code>Retail &amp; Wholesale</code> </p> </li>   <li> <p> <code>Social Protection</code> </p> </li>   <li> <p> <code>Telecommunications</code> </p> </li>   <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li>   <li> <p> <code>Other</code> </p> </li>  </ul>
    ///   - [`industry(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkload::industry) / [`set_industry(Option<String>)`](crate::client::fluent_builders::UpdateWorkload::set_industry): <p>The industry for the workload.</p>
    ///   - [`notes(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkload::notes) / [`set_notes(Option<String>)`](crate::client::fluent_builders::UpdateWorkload::set_notes): <p>The notes associated with the workload.</p>
    ///   - [`improvement_status(WorkloadImprovementStatus)`](crate::client::fluent_builders::UpdateWorkload::improvement_status) / [`set_improvement_status(Option<WorkloadImprovementStatus>)`](crate::client::fluent_builders::UpdateWorkload::set_improvement_status): <p>The improvement status for a workload.</p>
    ///   - [`discovery_config(WorkloadDiscoveryConfig)`](crate::client::fluent_builders::UpdateWorkload::discovery_config) / [`set_discovery_config(Option<WorkloadDiscoveryConfig>)`](crate::client::fluent_builders::UpdateWorkload::set_discovery_config): <p>Well-Architected discovery configuration settings to associate to the workload.</p>
    ///   - [`applications(Vec<String>)`](crate::client::fluent_builders::UpdateWorkload::applications) / [`set_applications(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateWorkload::set_applications): <p>List of AppRegistry application ARNs to associate to the workload.</p>
    /// - On success, responds with [`UpdateWorkloadOutput`](crate::output::UpdateWorkloadOutput) with field(s):
    ///   - [`workload(Option<Workload>)`](crate::output::UpdateWorkloadOutput::workload): <p>A workload return object.</p>
    /// - On failure, responds with [`SdkError<UpdateWorkloadError>`](crate::error::UpdateWorkloadError)
    pub fn update_workload(&self) -> crate::client::fluent_builders::UpdateWorkload {
        crate::client::fluent_builders::UpdateWorkload::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateWorkloadShare`](crate::client::fluent_builders::UpdateWorkloadShare) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`share_id(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkloadShare::share_id) / [`set_share_id(Option<String>)`](crate::client::fluent_builders::UpdateWorkloadShare::set_share_id): <p>The ID associated with the workload share.</p>
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::UpdateWorkloadShare::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::UpdateWorkloadShare::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`permission_type(PermissionType)`](crate::client::fluent_builders::UpdateWorkloadShare::permission_type) / [`set_permission_type(Option<PermissionType>)`](crate::client::fluent_builders::UpdateWorkloadShare::set_permission_type): <p>Permission granted on a workload share.</p>
    /// - On success, responds with [`UpdateWorkloadShareOutput`](crate::output::UpdateWorkloadShareOutput) with field(s):
    ///   - [`workload_id(Option<String>)`](crate::output::UpdateWorkloadShareOutput::workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`workload_share(Option<WorkloadShare>)`](crate::output::UpdateWorkloadShareOutput::workload_share): <p>A workload share return object.</p>
    /// - On failure, responds with [`SdkError<UpdateWorkloadShareError>`](crate::error::UpdateWorkloadShareError)
    pub fn update_workload_share(&self) -> crate::client::fluent_builders::UpdateWorkloadShare {
        crate::client::fluent_builders::UpdateWorkloadShare::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpgradeLensReview`](crate::client::fluent_builders::UpgradeLensReview) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_id(impl Into<String>)`](crate::client::fluent_builders::UpgradeLensReview::workload_id) / [`set_workload_id(Option<String>)`](crate::client::fluent_builders::UpgradeLensReview::set_workload_id): <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    ///   - [`lens_alias(impl Into<String>)`](crate::client::fluent_builders::UpgradeLensReview::lens_alias) / [`set_lens_alias(Option<String>)`](crate::client::fluent_builders::UpgradeLensReview::set_lens_alias): <p>The alias of the lens.</p>  <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>  <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>  <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    ///   - [`milestone_name(impl Into<String>)`](crate::client::fluent_builders::UpgradeLensReview::milestone_name) / [`set_milestone_name(Option<String>)`](crate::client::fluent_builders::UpgradeLensReview::set_milestone_name): <p>The name of the milestone in a workload.</p>  <p>Milestone names must be unique within a workload.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::UpgradeLensReview::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::UpgradeLensReview::set_client_request_token): <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p>  <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important>   <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p>  </important>
    /// - On success, responds with [`UpgradeLensReviewOutput`](crate::output::UpgradeLensReviewOutput)

    /// - On failure, responds with [`SdkError<UpgradeLensReviewError>`](crate::error::UpgradeLensReviewError)
    pub fn upgrade_lens_review(&self) -> crate::client::fluent_builders::UpgradeLensReview {
        crate::client::fluent_builders::UpgradeLensReview::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
