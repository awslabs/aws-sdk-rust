// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpgradeLensReviewOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpgradeLensReviewOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpgradeLensReviewOutput`](crate::output::UpgradeLensReviewOutput).
pub mod upgrade_lens_review_output {

    /// A builder for [`UpgradeLensReviewOutput`](crate::output::UpgradeLensReviewOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpgradeLensReviewOutput`](crate::output::UpgradeLensReviewOutput).
        pub fn build(self) -> crate::output::UpgradeLensReviewOutput {
            crate::output::UpgradeLensReviewOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpgradeLensReviewOutput {
    /// Creates a new builder-style object to manufacture [`UpgradeLensReviewOutput`](crate::output::UpgradeLensReviewOutput).
    pub fn builder() -> crate::output::upgrade_lens_review_output::Builder {
        crate::output::upgrade_lens_review_output::Builder::default()
    }
}

/// <p>Input for Update Workload Share</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkloadShareOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>A workload share return object.</p>
    #[doc(hidden)]
    pub workload_share: std::option::Option<crate::model::WorkloadShare>,
    _request_id: Option<String>,
}
impl UpdateWorkloadShareOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>A workload share return object.</p>
    pub fn workload_share(&self) -> std::option::Option<&crate::model::WorkloadShare> {
        self.workload_share.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateWorkloadShareOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateWorkloadShareOutput`](crate::output::UpdateWorkloadShareOutput).
pub mod update_workload_share_output {

    /// A builder for [`UpdateWorkloadShareOutput`](crate::output::UpdateWorkloadShareOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) workload_share: std::option::Option<crate::model::WorkloadShare>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>A workload share return object.</p>
        pub fn workload_share(mut self, input: crate::model::WorkloadShare) -> Self {
            self.workload_share = Some(input);
            self
        }
        /// <p>A workload share return object.</p>
        pub fn set_workload_share(
            mut self,
            input: std::option::Option<crate::model::WorkloadShare>,
        ) -> Self {
            self.workload_share = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateWorkloadShareOutput`](crate::output::UpdateWorkloadShareOutput).
        pub fn build(self) -> crate::output::UpdateWorkloadShareOutput {
            crate::output::UpdateWorkloadShareOutput {
                workload_id: self.workload_id,
                workload_share: self.workload_share,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateWorkloadShareOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkloadShareOutput`](crate::output::UpdateWorkloadShareOutput).
    pub fn builder() -> crate::output::update_workload_share_output::Builder {
        crate::output::update_workload_share_output::Builder::default()
    }
}

/// <p>Output of an update workload call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkloadOutput {
    /// <p>A workload return object.</p>
    #[doc(hidden)]
    pub workload: std::option::Option<crate::model::Workload>,
    _request_id: Option<String>,
}
impl UpdateWorkloadOutput {
    /// <p>A workload return object.</p>
    pub fn workload(&self) -> std::option::Option<&crate::model::Workload> {
        self.workload.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateWorkloadOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateWorkloadOutput`](crate::output::UpdateWorkloadOutput).
pub mod update_workload_output {

    /// A builder for [`UpdateWorkloadOutput`](crate::output::UpdateWorkloadOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload: std::option::Option<crate::model::Workload>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A workload return object.</p>
        pub fn workload(mut self, input: crate::model::Workload) -> Self {
            self.workload = Some(input);
            self
        }
        /// <p>A workload return object.</p>
        pub fn set_workload(mut self, input: std::option::Option<crate::model::Workload>) -> Self {
            self.workload = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateWorkloadOutput`](crate::output::UpdateWorkloadOutput).
        pub fn build(self) -> crate::output::UpdateWorkloadOutput {
            crate::output::UpdateWorkloadOutput {
                workload: self.workload,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateWorkloadOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkloadOutput`](crate::output::UpdateWorkloadOutput).
    pub fn builder() -> crate::output::update_workload_output::Builder {
        crate::output::update_workload_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateShareInvitationOutput {
    /// <p>The updated workload or custom lens share invitation.</p>
    #[doc(hidden)]
    pub share_invitation: std::option::Option<crate::model::ShareInvitation>,
    _request_id: Option<String>,
}
impl UpdateShareInvitationOutput {
    /// <p>The updated workload or custom lens share invitation.</p>
    pub fn share_invitation(&self) -> std::option::Option<&crate::model::ShareInvitation> {
        self.share_invitation.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateShareInvitationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateShareInvitationOutput`](crate::output::UpdateShareInvitationOutput).
pub mod update_share_invitation_output {

    /// A builder for [`UpdateShareInvitationOutput`](crate::output::UpdateShareInvitationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) share_invitation: std::option::Option<crate::model::ShareInvitation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The updated workload or custom lens share invitation.</p>
        pub fn share_invitation(mut self, input: crate::model::ShareInvitation) -> Self {
            self.share_invitation = Some(input);
            self
        }
        /// <p>The updated workload or custom lens share invitation.</p>
        pub fn set_share_invitation(
            mut self,
            input: std::option::Option<crate::model::ShareInvitation>,
        ) -> Self {
            self.share_invitation = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateShareInvitationOutput`](crate::output::UpdateShareInvitationOutput).
        pub fn build(self) -> crate::output::UpdateShareInvitationOutput {
            crate::output::UpdateShareInvitationOutput {
                share_invitation: self.share_invitation,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateShareInvitationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateShareInvitationOutput`](crate::output::UpdateShareInvitationOutput).
    pub fn builder() -> crate::output::update_share_invitation_output::Builder {
        crate::output::update_share_invitation_output::Builder::default()
    }
}

/// <p>Output of a update lens review call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateLensReviewOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>A lens review of a question.</p>
    #[doc(hidden)]
    pub lens_review: std::option::Option<crate::model::LensReview>,
    _request_id: Option<String>,
}
impl UpdateLensReviewOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>A lens review of a question.</p>
    pub fn lens_review(&self) -> std::option::Option<&crate::model::LensReview> {
        self.lens_review.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateLensReviewOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateLensReviewOutput`](crate::output::UpdateLensReviewOutput).
pub mod update_lens_review_output {

    /// A builder for [`UpdateLensReviewOutput`](crate::output::UpdateLensReviewOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) lens_review: std::option::Option<crate::model::LensReview>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>A lens review of a question.</p>
        pub fn lens_review(mut self, input: crate::model::LensReview) -> Self {
            self.lens_review = Some(input);
            self
        }
        /// <p>A lens review of a question.</p>
        pub fn set_lens_review(
            mut self,
            input: std::option::Option<crate::model::LensReview>,
        ) -> Self {
            self.lens_review = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateLensReviewOutput`](crate::output::UpdateLensReviewOutput).
        pub fn build(self) -> crate::output::UpdateLensReviewOutput {
            crate::output::UpdateLensReviewOutput {
                workload_id: self.workload_id,
                lens_review: self.lens_review,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateLensReviewOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLensReviewOutput`](crate::output::UpdateLensReviewOutput).
    pub fn builder() -> crate::output::update_lens_review_output::Builder {
        crate::output::update_lens_review_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateGlobalSettingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateGlobalSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput).
pub mod update_global_settings_output {

    /// A builder for [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput).
        pub fn build(self) -> crate::output::UpdateGlobalSettingsOutput {
            crate::output::UpdateGlobalSettingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateGlobalSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateGlobalSettingsOutput`](crate::output::UpdateGlobalSettingsOutput).
    pub fn builder() -> crate::output::update_global_settings_output::Builder {
        crate::output::update_global_settings_output::Builder::default()
    }
}

/// <p>Output of a update answer call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAnswerOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    #[doc(hidden)]
    pub lens_alias: std::option::Option<std::string::String>,
    /// <p>The ARN for the lens.</p>
    #[doc(hidden)]
    pub lens_arn: std::option::Option<std::string::String>,
    /// <p>An answer of the question.</p>
    #[doc(hidden)]
    pub answer: std::option::Option<crate::model::Answer>,
    _request_id: Option<String>,
}
impl UpdateAnswerOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(&self) -> std::option::Option<&str> {
        self.lens_alias.as_deref()
    }
    /// <p>The ARN for the lens.</p>
    pub fn lens_arn(&self) -> std::option::Option<&str> {
        self.lens_arn.as_deref()
    }
    /// <p>An answer of the question.</p>
    pub fn answer(&self) -> std::option::Option<&crate::model::Answer> {
        self.answer.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateAnswerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateAnswerOutput`](crate::output::UpdateAnswerOutput).
pub mod update_answer_output {

    /// A builder for [`UpdateAnswerOutput`](crate::output::UpdateAnswerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) lens_alias: std::option::Option<std::string::String>,
        pub(crate) lens_arn: std::option::Option<std::string::String>,
        pub(crate) answer: std::option::Option<crate::model::Answer>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>The alias of the lens.</p>
        /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
        /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
        /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
        pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_alias = Some(input.into());
            self
        }
        /// <p>The alias of the lens.</p>
        /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
        /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
        /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
        pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_alias = input;
            self
        }
        /// <p>The ARN for the lens.</p>
        pub fn lens_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_arn = Some(input.into());
            self
        }
        /// <p>The ARN for the lens.</p>
        pub fn set_lens_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_arn = input;
            self
        }
        /// <p>An answer of the question.</p>
        pub fn answer(mut self, input: crate::model::Answer) -> Self {
            self.answer = Some(input);
            self
        }
        /// <p>An answer of the question.</p>
        pub fn set_answer(mut self, input: std::option::Option<crate::model::Answer>) -> Self {
            self.answer = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAnswerOutput`](crate::output::UpdateAnswerOutput).
        pub fn build(self) -> crate::output::UpdateAnswerOutput {
            crate::output::UpdateAnswerOutput {
                workload_id: self.workload_id,
                lens_alias: self.lens_alias,
                lens_arn: self.lens_arn,
                answer: self.answer,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateAnswerOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAnswerOutput`](crate::output::UpdateAnswerOutput).
    pub fn builder() -> crate::output::update_answer_output::Builder {
        crate::output::update_answer_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// <p>Input for List Workload Share</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorkloadSharesOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>A list of workload share summaries.</p>
    #[doc(hidden)]
    pub workload_share_summaries:
        std::option::Option<std::vec::Vec<crate::model::WorkloadShareSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkloadSharesOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>A list of workload share summaries.</p>
    pub fn workload_share_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::WorkloadShareSummary]> {
        self.workload_share_summaries.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListWorkloadSharesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListWorkloadSharesOutput`](crate::output::ListWorkloadSharesOutput).
pub mod list_workload_shares_output {

    /// A builder for [`ListWorkloadSharesOutput`](crate::output::ListWorkloadSharesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) workload_share_summaries:
            std::option::Option<std::vec::Vec<crate::model::WorkloadShareSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// Appends an item to `workload_share_summaries`.
        ///
        /// To override the contents of this collection use [`set_workload_share_summaries`](Self::set_workload_share_summaries).
        ///
        /// <p>A list of workload share summaries.</p>
        pub fn workload_share_summaries(
            mut self,
            input: crate::model::WorkloadShareSummary,
        ) -> Self {
            let mut v = self.workload_share_summaries.unwrap_or_default();
            v.push(input);
            self.workload_share_summaries = Some(v);
            self
        }
        /// <p>A list of workload share summaries.</p>
        pub fn set_workload_share_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WorkloadShareSummary>>,
        ) -> Self {
            self.workload_share_summaries = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListWorkloadSharesOutput`](crate::output::ListWorkloadSharesOutput).
        pub fn build(self) -> crate::output::ListWorkloadSharesOutput {
            crate::output::ListWorkloadSharesOutput {
                workload_id: self.workload_id,
                workload_share_summaries: self.workload_share_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListWorkloadSharesOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkloadSharesOutput`](crate::output::ListWorkloadSharesOutput).
    pub fn builder() -> crate::output::list_workload_shares_output::Builder {
        crate::output::list_workload_shares_output::Builder::default()
    }
}

/// <p>Output of a list workloads call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorkloadsOutput {
    /// <p>A list of workload summaries.</p>
    #[doc(hidden)]
    pub workload_summaries: std::option::Option<std::vec::Vec<crate::model::WorkloadSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkloadsOutput {
    /// <p>A list of workload summaries.</p>
    pub fn workload_summaries(&self) -> std::option::Option<&[crate::model::WorkloadSummary]> {
        self.workload_summaries.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListWorkloadsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListWorkloadsOutput`](crate::output::ListWorkloadsOutput).
pub mod list_workloads_output {

    /// A builder for [`ListWorkloadsOutput`](crate::output::ListWorkloadsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_summaries:
            std::option::Option<std::vec::Vec<crate::model::WorkloadSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `workload_summaries`.
        ///
        /// To override the contents of this collection use [`set_workload_summaries`](Self::set_workload_summaries).
        ///
        /// <p>A list of workload summaries.</p>
        pub fn workload_summaries(mut self, input: crate::model::WorkloadSummary) -> Self {
            let mut v = self.workload_summaries.unwrap_or_default();
            v.push(input);
            self.workload_summaries = Some(v);
            self
        }
        /// <p>A list of workload summaries.</p>
        pub fn set_workload_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WorkloadSummary>>,
        ) -> Self {
            self.workload_summaries = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListWorkloadsOutput`](crate::output::ListWorkloadsOutput).
        pub fn build(self) -> crate::output::ListWorkloadsOutput {
            crate::output::ListWorkloadsOutput {
                workload_summaries: self.workload_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListWorkloadsOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkloadsOutput`](crate::output::ListWorkloadsOutput).
    pub fn builder() -> crate::output::list_workloads_output::Builder {
        crate::output::list_workloads_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags for the resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags for the resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags for the resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags for the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// <p>Input for List Share Invitations</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListShareInvitationsOutput {
    /// <p>List of share invitation summaries in a workload.</p>
    #[doc(hidden)]
    pub share_invitation_summaries:
        std::option::Option<std::vec::Vec<crate::model::ShareInvitationSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListShareInvitationsOutput {
    /// <p>List of share invitation summaries in a workload.</p>
    pub fn share_invitation_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::ShareInvitationSummary]> {
        self.share_invitation_summaries.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListShareInvitationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListShareInvitationsOutput`](crate::output::ListShareInvitationsOutput).
pub mod list_share_invitations_output {

    /// A builder for [`ListShareInvitationsOutput`](crate::output::ListShareInvitationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) share_invitation_summaries:
            std::option::Option<std::vec::Vec<crate::model::ShareInvitationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `share_invitation_summaries`.
        ///
        /// To override the contents of this collection use [`set_share_invitation_summaries`](Self::set_share_invitation_summaries).
        ///
        /// <p>List of share invitation summaries in a workload.</p>
        pub fn share_invitation_summaries(
            mut self,
            input: crate::model::ShareInvitationSummary,
        ) -> Self {
            let mut v = self.share_invitation_summaries.unwrap_or_default();
            v.push(input);
            self.share_invitation_summaries = Some(v);
            self
        }
        /// <p>List of share invitation summaries in a workload.</p>
        pub fn set_share_invitation_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ShareInvitationSummary>>,
        ) -> Self {
            self.share_invitation_summaries = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListShareInvitationsOutput`](crate::output::ListShareInvitationsOutput).
        pub fn build(self) -> crate::output::ListShareInvitationsOutput {
            crate::output::ListShareInvitationsOutput {
                share_invitation_summaries: self.share_invitation_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListShareInvitationsOutput {
    /// Creates a new builder-style object to manufacture [`ListShareInvitationsOutput`](crate::output::ListShareInvitationsOutput).
    pub fn builder() -> crate::output::list_share_invitations_output::Builder {
        crate::output::list_share_invitations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListNotificationsOutput {
    /// <p>List of lens notification summaries in a workload.</p>
    #[doc(hidden)]
    pub notification_summaries:
        std::option::Option<std::vec::Vec<crate::model::NotificationSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListNotificationsOutput {
    /// <p>List of lens notification summaries in a workload.</p>
    pub fn notification_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::NotificationSummary]> {
        self.notification_summaries.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListNotificationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListNotificationsOutput`](crate::output::ListNotificationsOutput).
pub mod list_notifications_output {

    /// A builder for [`ListNotificationsOutput`](crate::output::ListNotificationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) notification_summaries:
            std::option::Option<std::vec::Vec<crate::model::NotificationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `notification_summaries`.
        ///
        /// To override the contents of this collection use [`set_notification_summaries`](Self::set_notification_summaries).
        ///
        /// <p>List of lens notification summaries in a workload.</p>
        pub fn notification_summaries(mut self, input: crate::model::NotificationSummary) -> Self {
            let mut v = self.notification_summaries.unwrap_or_default();
            v.push(input);
            self.notification_summaries = Some(v);
            self
        }
        /// <p>List of lens notification summaries in a workload.</p>
        pub fn set_notification_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NotificationSummary>>,
        ) -> Self {
            self.notification_summaries = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListNotificationsOutput`](crate::output::ListNotificationsOutput).
        pub fn build(self) -> crate::output::ListNotificationsOutput {
            crate::output::ListNotificationsOutput {
                notification_summaries: self.notification_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListNotificationsOutput {
    /// Creates a new builder-style object to manufacture [`ListNotificationsOutput`](crate::output::ListNotificationsOutput).
    pub fn builder() -> crate::output::list_notifications_output::Builder {
        crate::output::list_notifications_output::Builder::default()
    }
}

/// <p>Output of a list milestones call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMilestonesOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>A list of milestone summaries.</p>
    #[doc(hidden)]
    pub milestone_summaries: std::option::Option<std::vec::Vec<crate::model::MilestoneSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListMilestonesOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>A list of milestone summaries.</p>
    pub fn milestone_summaries(&self) -> std::option::Option<&[crate::model::MilestoneSummary]> {
        self.milestone_summaries.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMilestonesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListMilestonesOutput`](crate::output::ListMilestonesOutput).
pub mod list_milestones_output {

    /// A builder for [`ListMilestonesOutput`](crate::output::ListMilestonesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) milestone_summaries:
            std::option::Option<std::vec::Vec<crate::model::MilestoneSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// Appends an item to `milestone_summaries`.
        ///
        /// To override the contents of this collection use [`set_milestone_summaries`](Self::set_milestone_summaries).
        ///
        /// <p>A list of milestone summaries.</p>
        pub fn milestone_summaries(mut self, input: crate::model::MilestoneSummary) -> Self {
            let mut v = self.milestone_summaries.unwrap_or_default();
            v.push(input);
            self.milestone_summaries = Some(v);
            self
        }
        /// <p>A list of milestone summaries.</p>
        pub fn set_milestone_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MilestoneSummary>>,
        ) -> Self {
            self.milestone_summaries = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListMilestonesOutput`](crate::output::ListMilestonesOutput).
        pub fn build(self) -> crate::output::ListMilestonesOutput {
            crate::output::ListMilestonesOutput {
                workload_id: self.workload_id,
                milestone_summaries: self.milestone_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListMilestonesOutput {
    /// Creates a new builder-style object to manufacture [`ListMilestonesOutput`](crate::output::ListMilestonesOutput).
    pub fn builder() -> crate::output::list_milestones_output::Builder {
        crate::output::list_milestones_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLensSharesOutput {
    /// <p>A list of lens share summaries.</p>
    #[doc(hidden)]
    pub lens_share_summaries: std::option::Option<std::vec::Vec<crate::model::LensShareSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListLensSharesOutput {
    /// <p>A list of lens share summaries.</p>
    pub fn lens_share_summaries(&self) -> std::option::Option<&[crate::model::LensShareSummary]> {
        self.lens_share_summaries.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListLensSharesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListLensSharesOutput`](crate::output::ListLensSharesOutput).
pub mod list_lens_shares_output {

    /// A builder for [`ListLensSharesOutput`](crate::output::ListLensSharesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lens_share_summaries:
            std::option::Option<std::vec::Vec<crate::model::LensShareSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `lens_share_summaries`.
        ///
        /// To override the contents of this collection use [`set_lens_share_summaries`](Self::set_lens_share_summaries).
        ///
        /// <p>A list of lens share summaries.</p>
        pub fn lens_share_summaries(mut self, input: crate::model::LensShareSummary) -> Self {
            let mut v = self.lens_share_summaries.unwrap_or_default();
            v.push(input);
            self.lens_share_summaries = Some(v);
            self
        }
        /// <p>A list of lens share summaries.</p>
        pub fn set_lens_share_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LensShareSummary>>,
        ) -> Self {
            self.lens_share_summaries = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListLensSharesOutput`](crate::output::ListLensSharesOutput).
        pub fn build(self) -> crate::output::ListLensSharesOutput {
            crate::output::ListLensSharesOutput {
                lens_share_summaries: self.lens_share_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListLensSharesOutput {
    /// Creates a new builder-style object to manufacture [`ListLensSharesOutput`](crate::output::ListLensSharesOutput).
    pub fn builder() -> crate::output::list_lens_shares_output::Builder {
        crate::output::list_lens_shares_output::Builder::default()
    }
}

/// <p>Output of a list lens reviews call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLensReviewsOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    #[doc(hidden)]
    pub milestone_number: i32,
    /// <p>List of lens summaries of lens reviews of a workload.</p>
    #[doc(hidden)]
    pub lens_review_summaries: std::option::Option<std::vec::Vec<crate::model::LensReviewSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListLensReviewsOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(&self) -> i32 {
        self.milestone_number
    }
    /// <p>List of lens summaries of lens reviews of a workload.</p>
    pub fn lens_review_summaries(&self) -> std::option::Option<&[crate::model::LensReviewSummary]> {
        self.lens_review_summaries.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListLensReviewsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListLensReviewsOutput`](crate::output::ListLensReviewsOutput).
pub mod list_lens_reviews_output {

    /// A builder for [`ListLensReviewsOutput`](crate::output::ListLensReviewsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) milestone_number: std::option::Option<i32>,
        pub(crate) lens_review_summaries:
            std::option::Option<std::vec::Vec<crate::model::LensReviewSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn milestone_number(mut self, input: i32) -> Self {
            self.milestone_number = Some(input);
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
            self.milestone_number = input;
            self
        }
        /// Appends an item to `lens_review_summaries`.
        ///
        /// To override the contents of this collection use [`set_lens_review_summaries`](Self::set_lens_review_summaries).
        ///
        /// <p>List of lens summaries of lens reviews of a workload.</p>
        pub fn lens_review_summaries(mut self, input: crate::model::LensReviewSummary) -> Self {
            let mut v = self.lens_review_summaries.unwrap_or_default();
            v.push(input);
            self.lens_review_summaries = Some(v);
            self
        }
        /// <p>List of lens summaries of lens reviews of a workload.</p>
        pub fn set_lens_review_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LensReviewSummary>>,
        ) -> Self {
            self.lens_review_summaries = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListLensReviewsOutput`](crate::output::ListLensReviewsOutput).
        pub fn build(self) -> crate::output::ListLensReviewsOutput {
            crate::output::ListLensReviewsOutput {
                workload_id: self.workload_id,
                milestone_number: self.milestone_number.unwrap_or_default(),
                lens_review_summaries: self.lens_review_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListLensReviewsOutput {
    /// Creates a new builder-style object to manufacture [`ListLensReviewsOutput`](crate::output::ListLensReviewsOutput).
    pub fn builder() -> crate::output::list_lens_reviews_output::Builder {
        crate::output::list_lens_reviews_output::Builder::default()
    }
}

/// <p>Output of a list lens review improvements call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLensReviewImprovementsOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    #[doc(hidden)]
    pub milestone_number: i32,
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    #[doc(hidden)]
    pub lens_alias: std::option::Option<std::string::String>,
    /// <p>The ARN for the lens.</p>
    #[doc(hidden)]
    pub lens_arn: std::option::Option<std::string::String>,
    /// <p>List of improvement summaries of lens review in a workload.</p>
    #[doc(hidden)]
    pub improvement_summaries: std::option::Option<std::vec::Vec<crate::model::ImprovementSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListLensReviewImprovementsOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(&self) -> i32 {
        self.milestone_number
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(&self) -> std::option::Option<&str> {
        self.lens_alias.as_deref()
    }
    /// <p>The ARN for the lens.</p>
    pub fn lens_arn(&self) -> std::option::Option<&str> {
        self.lens_arn.as_deref()
    }
    /// <p>List of improvement summaries of lens review in a workload.</p>
    pub fn improvement_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::ImprovementSummary]> {
        self.improvement_summaries.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListLensReviewImprovementsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListLensReviewImprovementsOutput`](crate::output::ListLensReviewImprovementsOutput).
pub mod list_lens_review_improvements_output {

    /// A builder for [`ListLensReviewImprovementsOutput`](crate::output::ListLensReviewImprovementsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) milestone_number: std::option::Option<i32>,
        pub(crate) lens_alias: std::option::Option<std::string::String>,
        pub(crate) lens_arn: std::option::Option<std::string::String>,
        pub(crate) improvement_summaries:
            std::option::Option<std::vec::Vec<crate::model::ImprovementSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn milestone_number(mut self, input: i32) -> Self {
            self.milestone_number = Some(input);
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
            self.milestone_number = input;
            self
        }
        /// <p>The alias of the lens.</p>
        /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
        /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
        /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
        pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_alias = Some(input.into());
            self
        }
        /// <p>The alias of the lens.</p>
        /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
        /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
        /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
        pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_alias = input;
            self
        }
        /// <p>The ARN for the lens.</p>
        pub fn lens_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_arn = Some(input.into());
            self
        }
        /// <p>The ARN for the lens.</p>
        pub fn set_lens_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_arn = input;
            self
        }
        /// Appends an item to `improvement_summaries`.
        ///
        /// To override the contents of this collection use [`set_improvement_summaries`](Self::set_improvement_summaries).
        ///
        /// <p>List of improvement summaries of lens review in a workload.</p>
        pub fn improvement_summaries(mut self, input: crate::model::ImprovementSummary) -> Self {
            let mut v = self.improvement_summaries.unwrap_or_default();
            v.push(input);
            self.improvement_summaries = Some(v);
            self
        }
        /// <p>List of improvement summaries of lens review in a workload.</p>
        pub fn set_improvement_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ImprovementSummary>>,
        ) -> Self {
            self.improvement_summaries = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListLensReviewImprovementsOutput`](crate::output::ListLensReviewImprovementsOutput).
        pub fn build(self) -> crate::output::ListLensReviewImprovementsOutput {
            crate::output::ListLensReviewImprovementsOutput {
                workload_id: self.workload_id,
                milestone_number: self.milestone_number.unwrap_or_default(),
                lens_alias: self.lens_alias,
                lens_arn: self.lens_arn,
                improvement_summaries: self.improvement_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListLensReviewImprovementsOutput {
    /// Creates a new builder-style object to manufacture [`ListLensReviewImprovementsOutput`](crate::output::ListLensReviewImprovementsOutput).
    pub fn builder() -> crate::output::list_lens_review_improvements_output::Builder {
        crate::output::list_lens_review_improvements_output::Builder::default()
    }
}

/// <p>Output of a list lenses call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLensesOutput {
    /// <p>List of lens summaries of available lenses.</p>
    #[doc(hidden)]
    pub lens_summaries: std::option::Option<std::vec::Vec<crate::model::LensSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListLensesOutput {
    /// <p>List of lens summaries of available lenses.</p>
    pub fn lens_summaries(&self) -> std::option::Option<&[crate::model::LensSummary]> {
        self.lens_summaries.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListLensesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListLensesOutput`](crate::output::ListLensesOutput).
pub mod list_lenses_output {

    /// A builder for [`ListLensesOutput`](crate::output::ListLensesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lens_summaries: std::option::Option<std::vec::Vec<crate::model::LensSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `lens_summaries`.
        ///
        /// To override the contents of this collection use [`set_lens_summaries`](Self::set_lens_summaries).
        ///
        /// <p>List of lens summaries of available lenses.</p>
        pub fn lens_summaries(mut self, input: crate::model::LensSummary) -> Self {
            let mut v = self.lens_summaries.unwrap_or_default();
            v.push(input);
            self.lens_summaries = Some(v);
            self
        }
        /// <p>List of lens summaries of available lenses.</p>
        pub fn set_lens_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LensSummary>>,
        ) -> Self {
            self.lens_summaries = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListLensesOutput`](crate::output::ListLensesOutput).
        pub fn build(self) -> crate::output::ListLensesOutput {
            crate::output::ListLensesOutput {
                lens_summaries: self.lens_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListLensesOutput {
    /// Creates a new builder-style object to manufacture [`ListLensesOutput`](crate::output::ListLensesOutput).
    pub fn builder() -> crate::output::list_lenses_output::Builder {
        crate::output::list_lenses_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCheckSummariesOutput {
    /// <p>List of Trusted Advisor summaries related to the Well-Architected best practice.</p>
    #[doc(hidden)]
    pub check_summaries: std::option::Option<std::vec::Vec<crate::model::CheckSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListCheckSummariesOutput {
    /// <p>List of Trusted Advisor summaries related to the Well-Architected best practice.</p>
    pub fn check_summaries(&self) -> std::option::Option<&[crate::model::CheckSummary]> {
        self.check_summaries.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListCheckSummariesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListCheckSummariesOutput`](crate::output::ListCheckSummariesOutput).
pub mod list_check_summaries_output {

    /// A builder for [`ListCheckSummariesOutput`](crate::output::ListCheckSummariesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) check_summaries: std::option::Option<std::vec::Vec<crate::model::CheckSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `check_summaries`.
        ///
        /// To override the contents of this collection use [`set_check_summaries`](Self::set_check_summaries).
        ///
        /// <p>List of Trusted Advisor summaries related to the Well-Architected best practice.</p>
        pub fn check_summaries(mut self, input: crate::model::CheckSummary) -> Self {
            let mut v = self.check_summaries.unwrap_or_default();
            v.push(input);
            self.check_summaries = Some(v);
            self
        }
        /// <p>List of Trusted Advisor summaries related to the Well-Architected best practice.</p>
        pub fn set_check_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CheckSummary>>,
        ) -> Self {
            self.check_summaries = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListCheckSummariesOutput`](crate::output::ListCheckSummariesOutput).
        pub fn build(self) -> crate::output::ListCheckSummariesOutput {
            crate::output::ListCheckSummariesOutput {
                check_summaries: self.check_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListCheckSummariesOutput {
    /// Creates a new builder-style object to manufacture [`ListCheckSummariesOutput`](crate::output::ListCheckSummariesOutput).
    pub fn builder() -> crate::output::list_check_summaries_output::Builder {
        crate::output::list_check_summaries_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCheckDetailsOutput {
    /// <p>The details about the Trusted Advisor checks related to the Well-Architected best practice.</p>
    #[doc(hidden)]
    pub check_details: std::option::Option<std::vec::Vec<crate::model::CheckDetail>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListCheckDetailsOutput {
    /// <p>The details about the Trusted Advisor checks related to the Well-Architected best practice.</p>
    pub fn check_details(&self) -> std::option::Option<&[crate::model::CheckDetail]> {
        self.check_details.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListCheckDetailsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListCheckDetailsOutput`](crate::output::ListCheckDetailsOutput).
pub mod list_check_details_output {

    /// A builder for [`ListCheckDetailsOutput`](crate::output::ListCheckDetailsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) check_details: std::option::Option<std::vec::Vec<crate::model::CheckDetail>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `check_details`.
        ///
        /// To override the contents of this collection use [`set_check_details`](Self::set_check_details).
        ///
        /// <p>The details about the Trusted Advisor checks related to the Well-Architected best practice.</p>
        pub fn check_details(mut self, input: crate::model::CheckDetail) -> Self {
            let mut v = self.check_details.unwrap_or_default();
            v.push(input);
            self.check_details = Some(v);
            self
        }
        /// <p>The details about the Trusted Advisor checks related to the Well-Architected best practice.</p>
        pub fn set_check_details(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CheckDetail>>,
        ) -> Self {
            self.check_details = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListCheckDetailsOutput`](crate::output::ListCheckDetailsOutput).
        pub fn build(self) -> crate::output::ListCheckDetailsOutput {
            crate::output::ListCheckDetailsOutput {
                check_details: self.check_details,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListCheckDetailsOutput {
    /// Creates a new builder-style object to manufacture [`ListCheckDetailsOutput`](crate::output::ListCheckDetailsOutput).
    pub fn builder() -> crate::output::list_check_details_output::Builder {
        crate::output::list_check_details_output::Builder::default()
    }
}

/// <p>Output of a list answers call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAnswersOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    #[doc(hidden)]
    pub milestone_number: i32,
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    #[doc(hidden)]
    pub lens_alias: std::option::Option<std::string::String>,
    /// <p>The ARN for the lens.</p>
    #[doc(hidden)]
    pub lens_arn: std::option::Option<std::string::String>,
    /// <p>List of answer summaries of lens review in a workload.</p>
    #[doc(hidden)]
    pub answer_summaries: std::option::Option<std::vec::Vec<crate::model::AnswerSummary>>,
    /// <p>The token to use to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAnswersOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(&self) -> i32 {
        self.milestone_number
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(&self) -> std::option::Option<&str> {
        self.lens_alias.as_deref()
    }
    /// <p>The ARN for the lens.</p>
    pub fn lens_arn(&self) -> std::option::Option<&str> {
        self.lens_arn.as_deref()
    }
    /// <p>List of answer summaries of lens review in a workload.</p>
    pub fn answer_summaries(&self) -> std::option::Option<&[crate::model::AnswerSummary]> {
        self.answer_summaries.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAnswersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListAnswersOutput`](crate::output::ListAnswersOutput).
pub mod list_answers_output {

    /// A builder for [`ListAnswersOutput`](crate::output::ListAnswersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) milestone_number: std::option::Option<i32>,
        pub(crate) lens_alias: std::option::Option<std::string::String>,
        pub(crate) lens_arn: std::option::Option<std::string::String>,
        pub(crate) answer_summaries:
            std::option::Option<std::vec::Vec<crate::model::AnswerSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn milestone_number(mut self, input: i32) -> Self {
            self.milestone_number = Some(input);
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
            self.milestone_number = input;
            self
        }
        /// <p>The alias of the lens.</p>
        /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
        /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
        /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
        pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_alias = Some(input.into());
            self
        }
        /// <p>The alias of the lens.</p>
        /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
        /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
        /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
        pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_alias = input;
            self
        }
        /// <p>The ARN for the lens.</p>
        pub fn lens_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_arn = Some(input.into());
            self
        }
        /// <p>The ARN for the lens.</p>
        pub fn set_lens_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_arn = input;
            self
        }
        /// Appends an item to `answer_summaries`.
        ///
        /// To override the contents of this collection use [`set_answer_summaries`](Self::set_answer_summaries).
        ///
        /// <p>List of answer summaries of lens review in a workload.</p>
        pub fn answer_summaries(mut self, input: crate::model::AnswerSummary) -> Self {
            let mut v = self.answer_summaries.unwrap_or_default();
            v.push(input);
            self.answer_summaries = Some(v);
            self
        }
        /// <p>List of answer summaries of lens review in a workload.</p>
        pub fn set_answer_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AnswerSummary>>,
        ) -> Self {
            self.answer_summaries = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAnswersOutput`](crate::output::ListAnswersOutput).
        pub fn build(self) -> crate::output::ListAnswersOutput {
            crate::output::ListAnswersOutput {
                workload_id: self.workload_id,
                milestone_number: self.milestone_number.unwrap_or_default(),
                lens_alias: self.lens_alias,
                lens_arn: self.lens_arn,
                answer_summaries: self.answer_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListAnswersOutput {
    /// Creates a new builder-style object to manufacture [`ListAnswersOutput`](crate::output::ListAnswersOutput).
    pub fn builder() -> crate::output::list_answers_output::Builder {
        crate::output::list_answers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportLensOutput {
    /// <p>The ARN for the lens.</p>
    #[doc(hidden)]
    pub lens_arn: std::option::Option<std::string::String>,
    /// <p>The status of the imported lens.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ImportLensStatus>,
    _request_id: Option<String>,
}
impl ImportLensOutput {
    /// <p>The ARN for the lens.</p>
    pub fn lens_arn(&self) -> std::option::Option<&str> {
        self.lens_arn.as_deref()
    }
    /// <p>The status of the imported lens.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ImportLensStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for ImportLensOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ImportLensOutput`](crate::output::ImportLensOutput).
pub mod import_lens_output {

    /// A builder for [`ImportLensOutput`](crate::output::ImportLensOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lens_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ImportLensStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN for the lens.</p>
        pub fn lens_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_arn = Some(input.into());
            self
        }
        /// <p>The ARN for the lens.</p>
        pub fn set_lens_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_arn = input;
            self
        }
        /// <p>The status of the imported lens.</p>
        pub fn status(mut self, input: crate::model::ImportLensStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the imported lens.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ImportLensStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ImportLensOutput`](crate::output::ImportLensOutput).
        pub fn build(self) -> crate::output::ImportLensOutput {
            crate::output::ImportLensOutput {
                lens_arn: self.lens_arn,
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl ImportLensOutput {
    /// Creates a new builder-style object to manufacture [`ImportLensOutput`](crate::output::ImportLensOutput).
    pub fn builder() -> crate::output::import_lens_output::Builder {
        crate::output::import_lens_output::Builder::default()
    }
}

/// <p>Output of a get workload call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetWorkloadOutput {
    /// <p>A workload return object.</p>
    #[doc(hidden)]
    pub workload: std::option::Option<crate::model::Workload>,
    _request_id: Option<String>,
}
impl GetWorkloadOutput {
    /// <p>A workload return object.</p>
    pub fn workload(&self) -> std::option::Option<&crate::model::Workload> {
        self.workload.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetWorkloadOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetWorkloadOutput`](crate::output::GetWorkloadOutput).
pub mod get_workload_output {

    /// A builder for [`GetWorkloadOutput`](crate::output::GetWorkloadOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload: std::option::Option<crate::model::Workload>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A workload return object.</p>
        pub fn workload(mut self, input: crate::model::Workload) -> Self {
            self.workload = Some(input);
            self
        }
        /// <p>A workload return object.</p>
        pub fn set_workload(mut self, input: std::option::Option<crate::model::Workload>) -> Self {
            self.workload = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetWorkloadOutput`](crate::output::GetWorkloadOutput).
        pub fn build(self) -> crate::output::GetWorkloadOutput {
            crate::output::GetWorkloadOutput {
                workload: self.workload,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetWorkloadOutput {
    /// Creates a new builder-style object to manufacture [`GetWorkloadOutput`](crate::output::GetWorkloadOutput).
    pub fn builder() -> crate::output::get_workload_output::Builder {
        crate::output::get_workload_output::Builder::default()
    }
}

/// <p>Output of a get milestone call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMilestoneOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>A milestone return object.</p>
    #[doc(hidden)]
    pub milestone: std::option::Option<crate::model::Milestone>,
    _request_id: Option<String>,
}
impl GetMilestoneOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>A milestone return object.</p>
    pub fn milestone(&self) -> std::option::Option<&crate::model::Milestone> {
        self.milestone.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMilestoneOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetMilestoneOutput`](crate::output::GetMilestoneOutput).
pub mod get_milestone_output {

    /// A builder for [`GetMilestoneOutput`](crate::output::GetMilestoneOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) milestone: std::option::Option<crate::model::Milestone>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>A milestone return object.</p>
        pub fn milestone(mut self, input: crate::model::Milestone) -> Self {
            self.milestone = Some(input);
            self
        }
        /// <p>A milestone return object.</p>
        pub fn set_milestone(
            mut self,
            input: std::option::Option<crate::model::Milestone>,
        ) -> Self {
            self.milestone = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMilestoneOutput`](crate::output::GetMilestoneOutput).
        pub fn build(self) -> crate::output::GetMilestoneOutput {
            crate::output::GetMilestoneOutput {
                workload_id: self.workload_id,
                milestone: self.milestone,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetMilestoneOutput {
    /// Creates a new builder-style object to manufacture [`GetMilestoneOutput`](crate::output::GetMilestoneOutput).
    pub fn builder() -> crate::output::get_milestone_output::Builder {
        crate::output::get_milestone_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLensVersionDifferenceOutput {
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    #[doc(hidden)]
    pub lens_alias: std::option::Option<std::string::String>,
    /// <p>The ARN for the lens.</p>
    #[doc(hidden)]
    pub lens_arn: std::option::Option<std::string::String>,
    /// <p>The base version of the lens.</p>
    #[doc(hidden)]
    pub base_lens_version: std::option::Option<std::string::String>,
    /// <p>The target lens version for the lens.</p>
    #[doc(hidden)]
    pub target_lens_version: std::option::Option<std::string::String>,
    /// <p>The latest version of the lens.</p>
    #[doc(hidden)]
    pub latest_lens_version: std::option::Option<std::string::String>,
    /// <p>The differences between the base and latest versions of the lens.</p>
    #[doc(hidden)]
    pub version_differences: std::option::Option<crate::model::VersionDifferences>,
    _request_id: Option<String>,
}
impl GetLensVersionDifferenceOutput {
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(&self) -> std::option::Option<&str> {
        self.lens_alias.as_deref()
    }
    /// <p>The ARN for the lens.</p>
    pub fn lens_arn(&self) -> std::option::Option<&str> {
        self.lens_arn.as_deref()
    }
    /// <p>The base version of the lens.</p>
    pub fn base_lens_version(&self) -> std::option::Option<&str> {
        self.base_lens_version.as_deref()
    }
    /// <p>The target lens version for the lens.</p>
    pub fn target_lens_version(&self) -> std::option::Option<&str> {
        self.target_lens_version.as_deref()
    }
    /// <p>The latest version of the lens.</p>
    pub fn latest_lens_version(&self) -> std::option::Option<&str> {
        self.latest_lens_version.as_deref()
    }
    /// <p>The differences between the base and latest versions of the lens.</p>
    pub fn version_differences(&self) -> std::option::Option<&crate::model::VersionDifferences> {
        self.version_differences.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetLensVersionDifferenceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetLensVersionDifferenceOutput`](crate::output::GetLensVersionDifferenceOutput).
pub mod get_lens_version_difference_output {

    /// A builder for [`GetLensVersionDifferenceOutput`](crate::output::GetLensVersionDifferenceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lens_alias: std::option::Option<std::string::String>,
        pub(crate) lens_arn: std::option::Option<std::string::String>,
        pub(crate) base_lens_version: std::option::Option<std::string::String>,
        pub(crate) target_lens_version: std::option::Option<std::string::String>,
        pub(crate) latest_lens_version: std::option::Option<std::string::String>,
        pub(crate) version_differences: std::option::Option<crate::model::VersionDifferences>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The alias of the lens.</p>
        /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
        /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
        /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
        pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_alias = Some(input.into());
            self
        }
        /// <p>The alias of the lens.</p>
        /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
        /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
        /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
        pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_alias = input;
            self
        }
        /// <p>The ARN for the lens.</p>
        pub fn lens_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_arn = Some(input.into());
            self
        }
        /// <p>The ARN for the lens.</p>
        pub fn set_lens_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_arn = input;
            self
        }
        /// <p>The base version of the lens.</p>
        pub fn base_lens_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.base_lens_version = Some(input.into());
            self
        }
        /// <p>The base version of the lens.</p>
        pub fn set_base_lens_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.base_lens_version = input;
            self
        }
        /// <p>The target lens version for the lens.</p>
        pub fn target_lens_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.target_lens_version = Some(input.into());
            self
        }
        /// <p>The target lens version for the lens.</p>
        pub fn set_target_lens_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_lens_version = input;
            self
        }
        /// <p>The latest version of the lens.</p>
        pub fn latest_lens_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.latest_lens_version = Some(input.into());
            self
        }
        /// <p>The latest version of the lens.</p>
        pub fn set_latest_lens_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.latest_lens_version = input;
            self
        }
        /// <p>The differences between the base and latest versions of the lens.</p>
        pub fn version_differences(mut self, input: crate::model::VersionDifferences) -> Self {
            self.version_differences = Some(input);
            self
        }
        /// <p>The differences between the base and latest versions of the lens.</p>
        pub fn set_version_differences(
            mut self,
            input: std::option::Option<crate::model::VersionDifferences>,
        ) -> Self {
            self.version_differences = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetLensVersionDifferenceOutput`](crate::output::GetLensVersionDifferenceOutput).
        pub fn build(self) -> crate::output::GetLensVersionDifferenceOutput {
            crate::output::GetLensVersionDifferenceOutput {
                lens_alias: self.lens_alias,
                lens_arn: self.lens_arn,
                base_lens_version: self.base_lens_version,
                target_lens_version: self.target_lens_version,
                latest_lens_version: self.latest_lens_version,
                version_differences: self.version_differences,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetLensVersionDifferenceOutput {
    /// Creates a new builder-style object to manufacture [`GetLensVersionDifferenceOutput`](crate::output::GetLensVersionDifferenceOutput).
    pub fn builder() -> crate::output::get_lens_version_difference_output::Builder {
        crate::output::get_lens_version_difference_output::Builder::default()
    }
}

/// <p>Output of a get lens review report call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLensReviewReportOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    #[doc(hidden)]
    pub milestone_number: i32,
    /// <p>A report of a lens review.</p>
    #[doc(hidden)]
    pub lens_review_report: std::option::Option<crate::model::LensReviewReport>,
    _request_id: Option<String>,
}
impl GetLensReviewReportOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(&self) -> i32 {
        self.milestone_number
    }
    /// <p>A report of a lens review.</p>
    pub fn lens_review_report(&self) -> std::option::Option<&crate::model::LensReviewReport> {
        self.lens_review_report.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetLensReviewReportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetLensReviewReportOutput`](crate::output::GetLensReviewReportOutput).
pub mod get_lens_review_report_output {

    /// A builder for [`GetLensReviewReportOutput`](crate::output::GetLensReviewReportOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) milestone_number: std::option::Option<i32>,
        pub(crate) lens_review_report: std::option::Option<crate::model::LensReviewReport>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn milestone_number(mut self, input: i32) -> Self {
            self.milestone_number = Some(input);
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
            self.milestone_number = input;
            self
        }
        /// <p>A report of a lens review.</p>
        pub fn lens_review_report(mut self, input: crate::model::LensReviewReport) -> Self {
            self.lens_review_report = Some(input);
            self
        }
        /// <p>A report of a lens review.</p>
        pub fn set_lens_review_report(
            mut self,
            input: std::option::Option<crate::model::LensReviewReport>,
        ) -> Self {
            self.lens_review_report = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetLensReviewReportOutput`](crate::output::GetLensReviewReportOutput).
        pub fn build(self) -> crate::output::GetLensReviewReportOutput {
            crate::output::GetLensReviewReportOutput {
                workload_id: self.workload_id,
                milestone_number: self.milestone_number.unwrap_or_default(),
                lens_review_report: self.lens_review_report,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetLensReviewReportOutput {
    /// Creates a new builder-style object to manufacture [`GetLensReviewReportOutput`](crate::output::GetLensReviewReportOutput).
    pub fn builder() -> crate::output::get_lens_review_report_output::Builder {
        crate::output::get_lens_review_report_output::Builder::default()
    }
}

/// <p>Output of a get lens review call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLensReviewOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    #[doc(hidden)]
    pub milestone_number: i32,
    /// <p>A lens review of a question.</p>
    #[doc(hidden)]
    pub lens_review: std::option::Option<crate::model::LensReview>,
    _request_id: Option<String>,
}
impl GetLensReviewOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(&self) -> i32 {
        self.milestone_number
    }
    /// <p>A lens review of a question.</p>
    pub fn lens_review(&self) -> std::option::Option<&crate::model::LensReview> {
        self.lens_review.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetLensReviewOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetLensReviewOutput`](crate::output::GetLensReviewOutput).
pub mod get_lens_review_output {

    /// A builder for [`GetLensReviewOutput`](crate::output::GetLensReviewOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) milestone_number: std::option::Option<i32>,
        pub(crate) lens_review: std::option::Option<crate::model::LensReview>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn milestone_number(mut self, input: i32) -> Self {
            self.milestone_number = Some(input);
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
            self.milestone_number = input;
            self
        }
        /// <p>A lens review of a question.</p>
        pub fn lens_review(mut self, input: crate::model::LensReview) -> Self {
            self.lens_review = Some(input);
            self
        }
        /// <p>A lens review of a question.</p>
        pub fn set_lens_review(
            mut self,
            input: std::option::Option<crate::model::LensReview>,
        ) -> Self {
            self.lens_review = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetLensReviewOutput`](crate::output::GetLensReviewOutput).
        pub fn build(self) -> crate::output::GetLensReviewOutput {
            crate::output::GetLensReviewOutput {
                workload_id: self.workload_id,
                milestone_number: self.milestone_number.unwrap_or_default(),
                lens_review: self.lens_review,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetLensReviewOutput {
    /// Creates a new builder-style object to manufacture [`GetLensReviewOutput`](crate::output::GetLensReviewOutput).
    pub fn builder() -> crate::output::get_lens_review_output::Builder {
        crate::output::get_lens_review_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLensOutput {
    /// <p>A lens return object.</p>
    #[doc(hidden)]
    pub lens: std::option::Option<crate::model::Lens>,
    _request_id: Option<String>,
}
impl GetLensOutput {
    /// <p>A lens return object.</p>
    pub fn lens(&self) -> std::option::Option<&crate::model::Lens> {
        self.lens.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetLensOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetLensOutput`](crate::output::GetLensOutput).
pub mod get_lens_output {

    /// A builder for [`GetLensOutput`](crate::output::GetLensOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lens: std::option::Option<crate::model::Lens>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A lens return object.</p>
        pub fn lens(mut self, input: crate::model::Lens) -> Self {
            self.lens = Some(input);
            self
        }
        /// <p>A lens return object.</p>
        pub fn set_lens(mut self, input: std::option::Option<crate::model::Lens>) -> Self {
            self.lens = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetLensOutput`](crate::output::GetLensOutput).
        pub fn build(self) -> crate::output::GetLensOutput {
            crate::output::GetLensOutput {
                lens: self.lens,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetLensOutput {
    /// Creates a new builder-style object to manufacture [`GetLensOutput`](crate::output::GetLensOutput).
    pub fn builder() -> crate::output::get_lens_output::Builder {
        crate::output::get_lens_output::Builder::default()
    }
}

/// <p>Output of a get answer call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAnswerOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    #[doc(hidden)]
    pub milestone_number: i32,
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    #[doc(hidden)]
    pub lens_alias: std::option::Option<std::string::String>,
    /// <p>The ARN for the lens.</p>
    #[doc(hidden)]
    pub lens_arn: std::option::Option<std::string::String>,
    /// <p>An answer of the question.</p>
    #[doc(hidden)]
    pub answer: std::option::Option<crate::model::Answer>,
    _request_id: Option<String>,
}
impl GetAnswerOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(&self) -> i32 {
        self.milestone_number
    }
    /// <p>The alias of the lens.</p>
    /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
    /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
    /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
    pub fn lens_alias(&self) -> std::option::Option<&str> {
        self.lens_alias.as_deref()
    }
    /// <p>The ARN for the lens.</p>
    pub fn lens_arn(&self) -> std::option::Option<&str> {
        self.lens_arn.as_deref()
    }
    /// <p>An answer of the question.</p>
    pub fn answer(&self) -> std::option::Option<&crate::model::Answer> {
        self.answer.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAnswerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAnswerOutput`](crate::output::GetAnswerOutput).
pub mod get_answer_output {

    /// A builder for [`GetAnswerOutput`](crate::output::GetAnswerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) milestone_number: std::option::Option<i32>,
        pub(crate) lens_alias: std::option::Option<std::string::String>,
        pub(crate) lens_arn: std::option::Option<std::string::String>,
        pub(crate) answer: std::option::Option<crate::model::Answer>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn milestone_number(mut self, input: i32) -> Self {
            self.milestone_number = Some(input);
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
            self.milestone_number = input;
            self
        }
        /// <p>The alias of the lens.</p>
        /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
        /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
        /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
        pub fn lens_alias(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_alias = Some(input.into());
            self
        }
        /// <p>The alias of the lens.</p>
        /// <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2::lens/serverless</code>.</p>
        /// <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1:123456789012:lens/my-lens</code>. </p>
        /// <p>Each lens is identified by its <code>LensSummary$LensAlias</code>.</p>
        pub fn set_lens_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_alias = input;
            self
        }
        /// <p>The ARN for the lens.</p>
        pub fn lens_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_arn = Some(input.into());
            self
        }
        /// <p>The ARN for the lens.</p>
        pub fn set_lens_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_arn = input;
            self
        }
        /// <p>An answer of the question.</p>
        pub fn answer(mut self, input: crate::model::Answer) -> Self {
            self.answer = Some(input);
            self
        }
        /// <p>An answer of the question.</p>
        pub fn set_answer(mut self, input: std::option::Option<crate::model::Answer>) -> Self {
            self.answer = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAnswerOutput`](crate::output::GetAnswerOutput).
        pub fn build(self) -> crate::output::GetAnswerOutput {
            crate::output::GetAnswerOutput {
                workload_id: self.workload_id,
                milestone_number: self.milestone_number.unwrap_or_default(),
                lens_alias: self.lens_alias,
                lens_arn: self.lens_arn,
                answer: self.answer,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAnswerOutput {
    /// Creates a new builder-style object to manufacture [`GetAnswerOutput`](crate::output::GetAnswerOutput).
    pub fn builder() -> crate::output::get_answer_output::Builder {
        crate::output::get_answer_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportLensOutput {
    /// <p>The JSON for the lens.</p>
    #[doc(hidden)]
    pub lens_json: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExportLensOutput {
    /// <p>The JSON for the lens.</p>
    pub fn lens_json(&self) -> std::option::Option<&str> {
        self.lens_json.as_deref()
    }
}
impl aws_http::request_id::RequestId for ExportLensOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ExportLensOutput`](crate::output::ExportLensOutput).
pub mod export_lens_output {

    /// A builder for [`ExportLensOutput`](crate::output::ExportLensOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lens_json: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The JSON for the lens.</p>
        pub fn lens_json(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_json = Some(input.into());
            self
        }
        /// <p>The JSON for the lens.</p>
        pub fn set_lens_json(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_json = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ExportLensOutput`](crate::output::ExportLensOutput).
        pub fn build(self) -> crate::output::ExportLensOutput {
            crate::output::ExportLensOutput {
                lens_json: self.lens_json,
                _request_id: self._request_id,
            }
        }
    }
}
impl ExportLensOutput {
    /// Creates a new builder-style object to manufacture [`ExportLensOutput`](crate::output::ExportLensOutput).
    pub fn builder() -> crate::output::export_lens_output::Builder {
        crate::output::export_lens_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateLensesOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateLensesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateLensesOutput`](crate::output::DisassociateLensesOutput).
pub mod disassociate_lenses_output {

    /// A builder for [`DisassociateLensesOutput`](crate::output::DisassociateLensesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateLensesOutput`](crate::output::DisassociateLensesOutput).
        pub fn build(self) -> crate::output::DisassociateLensesOutput {
            crate::output::DisassociateLensesOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateLensesOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateLensesOutput`](crate::output::DisassociateLensesOutput).
    pub fn builder() -> crate::output::disassociate_lenses_output::Builder {
        crate::output::disassociate_lenses_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteWorkloadShareOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteWorkloadShareOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteWorkloadShareOutput`](crate::output::DeleteWorkloadShareOutput).
pub mod delete_workload_share_output {

    /// A builder for [`DeleteWorkloadShareOutput`](crate::output::DeleteWorkloadShareOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteWorkloadShareOutput`](crate::output::DeleteWorkloadShareOutput).
        pub fn build(self) -> crate::output::DeleteWorkloadShareOutput {
            crate::output::DeleteWorkloadShareOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteWorkloadShareOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWorkloadShareOutput`](crate::output::DeleteWorkloadShareOutput).
    pub fn builder() -> crate::output::delete_workload_share_output::Builder {
        crate::output::delete_workload_share_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteWorkloadOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteWorkloadOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteWorkloadOutput`](crate::output::DeleteWorkloadOutput).
pub mod delete_workload_output {

    /// A builder for [`DeleteWorkloadOutput`](crate::output::DeleteWorkloadOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteWorkloadOutput`](crate::output::DeleteWorkloadOutput).
        pub fn build(self) -> crate::output::DeleteWorkloadOutput {
            crate::output::DeleteWorkloadOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteWorkloadOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWorkloadOutput`](crate::output::DeleteWorkloadOutput).
    pub fn builder() -> crate::output::delete_workload_output::Builder {
        crate::output::delete_workload_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLensShareOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteLensShareOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteLensShareOutput`](crate::output::DeleteLensShareOutput).
pub mod delete_lens_share_output {

    /// A builder for [`DeleteLensShareOutput`](crate::output::DeleteLensShareOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLensShareOutput`](crate::output::DeleteLensShareOutput).
        pub fn build(self) -> crate::output::DeleteLensShareOutput {
            crate::output::DeleteLensShareOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteLensShareOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLensShareOutput`](crate::output::DeleteLensShareOutput).
    pub fn builder() -> crate::output::delete_lens_share_output::Builder {
        crate::output::delete_lens_share_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLensOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteLensOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteLensOutput`](crate::output::DeleteLensOutput).
pub mod delete_lens_output {

    /// A builder for [`DeleteLensOutput`](crate::output::DeleteLensOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLensOutput`](crate::output::DeleteLensOutput).
        pub fn build(self) -> crate::output::DeleteLensOutput {
            crate::output::DeleteLensOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteLensOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLensOutput`](crate::output::DeleteLensOutput).
    pub fn builder() -> crate::output::delete_lens_output::Builder {
        crate::output::delete_lens_output::Builder::default()
    }
}

/// <p>Input for Create Workload Share</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWorkloadShareOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>The ID associated with the workload share.</p>
    #[doc(hidden)]
    pub share_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateWorkloadShareOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The ID associated with the workload share.</p>
    pub fn share_id(&self) -> std::option::Option<&str> {
        self.share_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateWorkloadShareOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateWorkloadShareOutput`](crate::output::CreateWorkloadShareOutput).
pub mod create_workload_share_output {

    /// A builder for [`CreateWorkloadShareOutput`](crate::output::CreateWorkloadShareOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) share_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>The ID associated with the workload share.</p>
        pub fn share_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.share_id = Some(input.into());
            self
        }
        /// <p>The ID associated with the workload share.</p>
        pub fn set_share_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.share_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateWorkloadShareOutput`](crate::output::CreateWorkloadShareOutput).
        pub fn build(self) -> crate::output::CreateWorkloadShareOutput {
            crate::output::CreateWorkloadShareOutput {
                workload_id: self.workload_id,
                share_id: self.share_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateWorkloadShareOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkloadShareOutput`](crate::output::CreateWorkloadShareOutput).
    pub fn builder() -> crate::output::create_workload_share_output::Builder {
        crate::output::create_workload_share_output::Builder::default()
    }
}

/// <p>Output of a create workload call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWorkloadOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>The ARN for the workload.</p>
    #[doc(hidden)]
    pub workload_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateWorkloadOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The ARN for the workload.</p>
    pub fn workload_arn(&self) -> std::option::Option<&str> {
        self.workload_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateWorkloadOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateWorkloadOutput`](crate::output::CreateWorkloadOutput).
pub mod create_workload_output {

    /// A builder for [`CreateWorkloadOutput`](crate::output::CreateWorkloadOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) workload_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>The ARN for the workload.</p>
        pub fn workload_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_arn = Some(input.into());
            self
        }
        /// <p>The ARN for the workload.</p>
        pub fn set_workload_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateWorkloadOutput`](crate::output::CreateWorkloadOutput).
        pub fn build(self) -> crate::output::CreateWorkloadOutput {
            crate::output::CreateWorkloadOutput {
                workload_id: self.workload_id,
                workload_arn: self.workload_arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateWorkloadOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkloadOutput`](crate::output::CreateWorkloadOutput).
    pub fn builder() -> crate::output::create_workload_output::Builder {
        crate::output::create_workload_output::Builder::default()
    }
}

/// <p>Output of a create milestone call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMilestoneOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub workload_id: std::option::Option<std::string::String>,
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    #[doc(hidden)]
    pub milestone_number: i32,
    _request_id: Option<String>,
}
impl CreateMilestoneOutput {
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The milestone number.</p>
    /// <p>A workload can have a maximum of 100 milestones.</p>
    pub fn milestone_number(&self) -> i32 {
        self.milestone_number
    }
}
impl aws_http::request_id::RequestId for CreateMilestoneOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateMilestoneOutput`](crate::output::CreateMilestoneOutput).
pub mod create_milestone_output {

    /// A builder for [`CreateMilestoneOutput`](crate::output::CreateMilestoneOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workload_id: std::option::Option<std::string::String>,
        pub(crate) milestone_number: std::option::Option<i32>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn workload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workload_id = Some(input.into());
            self
        }
        /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
        pub fn set_workload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workload_id = input;
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn milestone_number(mut self, input: i32) -> Self {
            self.milestone_number = Some(input);
            self
        }
        /// <p>The milestone number.</p>
        /// <p>A workload can have a maximum of 100 milestones.</p>
        pub fn set_milestone_number(mut self, input: std::option::Option<i32>) -> Self {
            self.milestone_number = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateMilestoneOutput`](crate::output::CreateMilestoneOutput).
        pub fn build(self) -> crate::output::CreateMilestoneOutput {
            crate::output::CreateMilestoneOutput {
                workload_id: self.workload_id,
                milestone_number: self.milestone_number.unwrap_or_default(),
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateMilestoneOutput {
    /// Creates a new builder-style object to manufacture [`CreateMilestoneOutput`](crate::output::CreateMilestoneOutput).
    pub fn builder() -> crate::output::create_milestone_output::Builder {
        crate::output::create_milestone_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLensVersionOutput {
    /// <p>The ARN for the lens.</p>
    #[doc(hidden)]
    pub lens_arn: std::option::Option<std::string::String>,
    /// <p>The version of the lens.</p>
    #[doc(hidden)]
    pub lens_version: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateLensVersionOutput {
    /// <p>The ARN for the lens.</p>
    pub fn lens_arn(&self) -> std::option::Option<&str> {
        self.lens_arn.as_deref()
    }
    /// <p>The version of the lens.</p>
    pub fn lens_version(&self) -> std::option::Option<&str> {
        self.lens_version.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateLensVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateLensVersionOutput`](crate::output::CreateLensVersionOutput).
pub mod create_lens_version_output {

    /// A builder for [`CreateLensVersionOutput`](crate::output::CreateLensVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lens_arn: std::option::Option<std::string::String>,
        pub(crate) lens_version: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN for the lens.</p>
        pub fn lens_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_arn = Some(input.into());
            self
        }
        /// <p>The ARN for the lens.</p>
        pub fn set_lens_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_arn = input;
            self
        }
        /// <p>The version of the lens.</p>
        pub fn lens_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.lens_version = Some(input.into());
            self
        }
        /// <p>The version of the lens.</p>
        pub fn set_lens_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lens_version = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateLensVersionOutput`](crate::output::CreateLensVersionOutput).
        pub fn build(self) -> crate::output::CreateLensVersionOutput {
            crate::output::CreateLensVersionOutput {
                lens_arn: self.lens_arn,
                lens_version: self.lens_version,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateLensVersionOutput {
    /// Creates a new builder-style object to manufacture [`CreateLensVersionOutput`](crate::output::CreateLensVersionOutput).
    pub fn builder() -> crate::output::create_lens_version_output::Builder {
        crate::output::create_lens_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLensShareOutput {
    /// <p>The ID associated with the workload share.</p>
    #[doc(hidden)]
    pub share_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateLensShareOutput {
    /// <p>The ID associated with the workload share.</p>
    pub fn share_id(&self) -> std::option::Option<&str> {
        self.share_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateLensShareOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateLensShareOutput`](crate::output::CreateLensShareOutput).
pub mod create_lens_share_output {

    /// A builder for [`CreateLensShareOutput`](crate::output::CreateLensShareOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) share_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID associated with the workload share.</p>
        pub fn share_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.share_id = Some(input.into());
            self
        }
        /// <p>The ID associated with the workload share.</p>
        pub fn set_share_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.share_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateLensShareOutput`](crate::output::CreateLensShareOutput).
        pub fn build(self) -> crate::output::CreateLensShareOutput {
            crate::output::CreateLensShareOutput {
                share_id: self.share_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateLensShareOutput {
    /// Creates a new builder-style object to manufacture [`CreateLensShareOutput`](crate::output::CreateLensShareOutput).
    pub fn builder() -> crate::output::create_lens_share_output::Builder {
        crate::output::create_lens_share_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateLensesOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AssociateLensesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateLensesOutput`](crate::output::AssociateLensesOutput).
pub mod associate_lenses_output {

    /// A builder for [`AssociateLensesOutput`](crate::output::AssociateLensesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateLensesOutput`](crate::output::AssociateLensesOutput).
        pub fn build(self) -> crate::output::AssociateLensesOutput {
            crate::output::AssociateLensesOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateLensesOutput {
    /// Creates a new builder-style object to manufacture [`AssociateLensesOutput`](crate::output::AssociateLensesOutput).
    pub fn builder() -> crate::output::associate_lenses_output::Builder {
        crate::output::associate_lenses_output::Builder::default()
    }
}
