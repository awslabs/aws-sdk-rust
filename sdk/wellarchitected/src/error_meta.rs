// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>User does not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The resource has already been processed, was deleted, or is too large.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>There is a problem with the Well-Architected Tool API service.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The requested resource was not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The user has reached their resource quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>Request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The user input is not valid.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_lenses::AssociateLensesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_lenses::AssociateLensesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_lenses::AssociateLensesError> for Error {
    fn from(err: crate::operation::associate_lenses::AssociateLensesError) -> Self {
        match err {
            crate::operation::associate_lenses::AssociateLensesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_lenses::AssociateLensesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_lenses::AssociateLensesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_lenses::AssociateLensesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_lenses::AssociateLensesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_lenses::AssociateLensesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_lenses::AssociateLensesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_profiles::AssociateProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_profiles::AssociateProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_profiles::AssociateProfilesError> for Error {
    fn from(err: crate::operation::associate_profiles::AssociateProfilesError) -> Self {
        match err {
            crate::operation::associate_profiles::AssociateProfilesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_profiles::AssociateProfilesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_profiles::AssociateProfilesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_profiles::AssociateProfilesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_profiles::AssociateProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_profiles::AssociateProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_profiles::AssociateProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_lens_share::CreateLensShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_lens_share::CreateLensShareError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_lens_share::CreateLensShareError> for Error {
    fn from(err: crate::operation::create_lens_share::CreateLensShareError) -> Self {
        match err {
            crate::operation::create_lens_share::CreateLensShareError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_lens_share::CreateLensShareError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_lens_share::CreateLensShareError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_lens_share::CreateLensShareError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_lens_share::CreateLensShareError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_lens_share::CreateLensShareError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_lens_share::CreateLensShareError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_lens_share::CreateLensShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_lens_version::CreateLensVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_lens_version::CreateLensVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_lens_version::CreateLensVersionError> for Error {
    fn from(err: crate::operation::create_lens_version::CreateLensVersionError) -> Self {
        match err {
            crate::operation::create_lens_version::CreateLensVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_lens_version::CreateLensVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_lens_version::CreateLensVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_lens_version::CreateLensVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_lens_version::CreateLensVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_lens_version::CreateLensVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_lens_version::CreateLensVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_lens_version::CreateLensVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_milestone::CreateMilestoneError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_milestone::CreateMilestoneError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_milestone::CreateMilestoneError> for Error {
    fn from(err: crate::operation::create_milestone::CreateMilestoneError) -> Self {
        match err {
            crate::operation::create_milestone::CreateMilestoneError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_milestone::CreateMilestoneError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_milestone::CreateMilestoneError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_milestone::CreateMilestoneError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_milestone::CreateMilestoneError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_milestone::CreateMilestoneError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_milestone::CreateMilestoneError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_milestone::CreateMilestoneError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_profile::CreateProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_profile::CreateProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_profile::CreateProfileError> for Error {
    fn from(err: crate::operation::create_profile::CreateProfileError) -> Self {
        match err {
            crate::operation::create_profile::CreateProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_profile::CreateProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_profile::CreateProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_profile::CreateProfileError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_profile::CreateProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_profile::CreateProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_profile::CreateProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_profile_share::CreateProfileShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_profile_share::CreateProfileShareError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_profile_share::CreateProfileShareError> for Error {
    fn from(err: crate::operation::create_profile_share::CreateProfileShareError) -> Self {
        match err {
            crate::operation::create_profile_share::CreateProfileShareError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_profile_share::CreateProfileShareError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_profile_share::CreateProfileShareError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_profile_share::CreateProfileShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_profile_share::CreateProfileShareError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_profile_share::CreateProfileShareError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_profile_share::CreateProfileShareError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_profile_share::CreateProfileShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_review_template::CreateReviewTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_review_template::CreateReviewTemplateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_review_template::CreateReviewTemplateError> for Error {
    fn from(err: crate::operation::create_review_template::CreateReviewTemplateError) -> Self {
        match err {
            crate::operation::create_review_template::CreateReviewTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_review_template::CreateReviewTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_review_template::CreateReviewTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_review_template::CreateReviewTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_review_template::CreateReviewTemplateError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_review_template::CreateReviewTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_review_template::CreateReviewTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_review_template::CreateReviewTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_template_share::CreateTemplateShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_template_share::CreateTemplateShareError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_template_share::CreateTemplateShareError> for Error {
    fn from(err: crate::operation::create_template_share::CreateTemplateShareError) -> Self {
        match err {
            crate::operation::create_template_share::CreateTemplateShareError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_template_share::CreateTemplateShareError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_template_share::CreateTemplateShareError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_template_share::CreateTemplateShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_template_share::CreateTemplateShareError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_template_share::CreateTemplateShareError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_template_share::CreateTemplateShareError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_template_share::CreateTemplateShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workload::CreateWorkloadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workload::CreateWorkloadError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_workload::CreateWorkloadError> for Error {
    fn from(err: crate::operation::create_workload::CreateWorkloadError) -> Self {
        match err {
            crate::operation::create_workload::CreateWorkloadError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_workload::CreateWorkloadError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_workload::CreateWorkloadError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_workload::CreateWorkloadError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_workload::CreateWorkloadError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_workload::CreateWorkloadError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_workload::CreateWorkloadError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_workload::CreateWorkloadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workload_share::CreateWorkloadShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workload_share::CreateWorkloadShareError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_workload_share::CreateWorkloadShareError> for Error {
    fn from(err: crate::operation::create_workload_share::CreateWorkloadShareError) -> Self {
        match err {
            crate::operation::create_workload_share::CreateWorkloadShareError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_workload_share::CreateWorkloadShareError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_workload_share::CreateWorkloadShareError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_workload_share::CreateWorkloadShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_workload_share::CreateWorkloadShareError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_workload_share::CreateWorkloadShareError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_workload_share::CreateWorkloadShareError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_workload_share::CreateWorkloadShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_lens::DeleteLensError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_lens::DeleteLensError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_lens::DeleteLensError> for Error {
    fn from(err: crate::operation::delete_lens::DeleteLensError) -> Self {
        match err {
            crate::operation::delete_lens::DeleteLensError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_lens::DeleteLensError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_lens::DeleteLensError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_lens::DeleteLensError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_lens::DeleteLensError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_lens::DeleteLensError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_lens::DeleteLensError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_lens_share::DeleteLensShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_lens_share::DeleteLensShareError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_lens_share::DeleteLensShareError> for Error {
    fn from(err: crate::operation::delete_lens_share::DeleteLensShareError) -> Self {
        match err {
            crate::operation::delete_lens_share::DeleteLensShareError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_lens_share::DeleteLensShareError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_lens_share::DeleteLensShareError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_lens_share::DeleteLensShareError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_lens_share::DeleteLensShareError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_lens_share::DeleteLensShareError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_lens_share::DeleteLensShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_profile::DeleteProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_profile::DeleteProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_profile::DeleteProfileError> for Error {
    fn from(err: crate::operation::delete_profile::DeleteProfileError) -> Self {
        match err {
            crate::operation::delete_profile::DeleteProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_profile::DeleteProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_profile::DeleteProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_profile::DeleteProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_profile::DeleteProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_profile::DeleteProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_profile::DeleteProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_profile_share::DeleteProfileShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_profile_share::DeleteProfileShareError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_profile_share::DeleteProfileShareError> for Error {
    fn from(err: crate::operation::delete_profile_share::DeleteProfileShareError) -> Self {
        match err {
            crate::operation::delete_profile_share::DeleteProfileShareError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_profile_share::DeleteProfileShareError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_profile_share::DeleteProfileShareError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_profile_share::DeleteProfileShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_profile_share::DeleteProfileShareError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_profile_share::DeleteProfileShareError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_profile_share::DeleteProfileShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_review_template::DeleteReviewTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_review_template::DeleteReviewTemplateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_review_template::DeleteReviewTemplateError> for Error {
    fn from(err: crate::operation::delete_review_template::DeleteReviewTemplateError) -> Self {
        match err {
            crate::operation::delete_review_template::DeleteReviewTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_review_template::DeleteReviewTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_review_template::DeleteReviewTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_review_template::DeleteReviewTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_review_template::DeleteReviewTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_review_template::DeleteReviewTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_review_template::DeleteReviewTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_template_share::DeleteTemplateShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_template_share::DeleteTemplateShareError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_template_share::DeleteTemplateShareError> for Error {
    fn from(err: crate::operation::delete_template_share::DeleteTemplateShareError) -> Self {
        match err {
            crate::operation::delete_template_share::DeleteTemplateShareError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_template_share::DeleteTemplateShareError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_template_share::DeleteTemplateShareError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_template_share::DeleteTemplateShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_template_share::DeleteTemplateShareError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_template_share::DeleteTemplateShareError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_template_share::DeleteTemplateShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workload::DeleteWorkloadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workload::DeleteWorkloadError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_workload::DeleteWorkloadError> for Error {
    fn from(err: crate::operation::delete_workload::DeleteWorkloadError) -> Self {
        match err {
            crate::operation::delete_workload::DeleteWorkloadError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_workload::DeleteWorkloadError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_workload::DeleteWorkloadError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_workload::DeleteWorkloadError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_workload::DeleteWorkloadError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_workload::DeleteWorkloadError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_workload::DeleteWorkloadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workload_share::DeleteWorkloadShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workload_share::DeleteWorkloadShareError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_workload_share::DeleteWorkloadShareError> for Error {
    fn from(err: crate::operation::delete_workload_share::DeleteWorkloadShareError) -> Self {
        match err {
            crate::operation::delete_workload_share::DeleteWorkloadShareError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_workload_share::DeleteWorkloadShareError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_workload_share::DeleteWorkloadShareError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_workload_share::DeleteWorkloadShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_workload_share::DeleteWorkloadShareError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_workload_share::DeleteWorkloadShareError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_workload_share::DeleteWorkloadShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_lenses::DisassociateLensesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_lenses::DisassociateLensesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_lenses::DisassociateLensesError> for Error {
    fn from(err: crate::operation::disassociate_lenses::DisassociateLensesError) -> Self {
        match err {
            crate::operation::disassociate_lenses::DisassociateLensesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_lenses::DisassociateLensesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_lenses::DisassociateLensesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_lenses::DisassociateLensesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_lenses::DisassociateLensesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_lenses::DisassociateLensesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_lenses::DisassociateLensesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_profiles::DisassociateProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_profiles::DisassociateProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_profiles::DisassociateProfilesError> for Error {
    fn from(err: crate::operation::disassociate_profiles::DisassociateProfilesError) -> Self {
        match err {
            crate::operation::disassociate_profiles::DisassociateProfilesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_profiles::DisassociateProfilesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_profiles::DisassociateProfilesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disassociate_profiles::DisassociateProfilesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_profiles::DisassociateProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_profiles::DisassociateProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_profiles::DisassociateProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::export_lens::ExportLensError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::export_lens::ExportLensError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::export_lens::ExportLensError> for Error {
    fn from(err: crate::operation::export_lens::ExportLensError) -> Self {
        match err {
            crate::operation::export_lens::ExportLensError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::export_lens::ExportLensError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::export_lens::ExportLensError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::export_lens::ExportLensError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::export_lens::ExportLensError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::export_lens::ExportLensError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_answer::GetAnswerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_answer::GetAnswerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_answer::GetAnswerError> for Error {
    fn from(err: crate::operation::get_answer::GetAnswerError) -> Self {
        match err {
            crate::operation::get_answer::GetAnswerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_answer::GetAnswerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_answer::GetAnswerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_answer::GetAnswerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_answer::GetAnswerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_answer::GetAnswerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_consolidated_report::GetConsolidatedReportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_consolidated_report::GetConsolidatedReportError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_consolidated_report::GetConsolidatedReportError> for Error {
    fn from(err: crate::operation::get_consolidated_report::GetConsolidatedReportError) -> Self {
        match err {
            crate::operation::get_consolidated_report::GetConsolidatedReportError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_consolidated_report::GetConsolidatedReportError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_consolidated_report::GetConsolidatedReportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_consolidated_report::GetConsolidatedReportError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_consolidated_report::GetConsolidatedReportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_consolidated_report::GetConsolidatedReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_global_settings::GetGlobalSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_global_settings::GetGlobalSettingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_global_settings::GetGlobalSettingsError> for Error {
    fn from(err: crate::operation::get_global_settings::GetGlobalSettingsError) -> Self {
        match err {
            crate::operation::get_global_settings::GetGlobalSettingsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_global_settings::GetGlobalSettingsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_global_settings::GetGlobalSettingsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_global_settings::GetGlobalSettingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_global_settings::GetGlobalSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lens::GetLensError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lens::GetLensError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_lens::GetLensError> for Error {
    fn from(err: crate::operation::get_lens::GetLensError) -> Self {
        match err {
            crate::operation::get_lens::GetLensError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_lens::GetLensError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_lens::GetLensError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_lens::GetLensError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_lens::GetLensError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_lens::GetLensError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lens_review::GetLensReviewError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lens_review::GetLensReviewError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_lens_review::GetLensReviewError> for Error {
    fn from(err: crate::operation::get_lens_review::GetLensReviewError) -> Self {
        match err {
            crate::operation::get_lens_review::GetLensReviewError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_lens_review::GetLensReviewError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_lens_review::GetLensReviewError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_lens_review::GetLensReviewError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_lens_review::GetLensReviewError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_lens_review::GetLensReviewError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lens_review_report::GetLensReviewReportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lens_review_report::GetLensReviewReportError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_lens_review_report::GetLensReviewReportError> for Error {
    fn from(err: crate::operation::get_lens_review_report::GetLensReviewReportError) -> Self {
        match err {
            crate::operation::get_lens_review_report::GetLensReviewReportError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_lens_review_report::GetLensReviewReportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_lens_review_report::GetLensReviewReportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_lens_review_report::GetLensReviewReportError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_lens_review_report::GetLensReviewReportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_lens_review_report::GetLensReviewReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lens_version_difference::GetLensVersionDifferenceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lens_version_difference::GetLensVersionDifferenceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_lens_version_difference::GetLensVersionDifferenceError> for Error {
    fn from(err: crate::operation::get_lens_version_difference::GetLensVersionDifferenceError) -> Self {
        match err {
            crate::operation::get_lens_version_difference::GetLensVersionDifferenceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_lens_version_difference::GetLensVersionDifferenceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_lens_version_difference::GetLensVersionDifferenceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_lens_version_difference::GetLensVersionDifferenceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_lens_version_difference::GetLensVersionDifferenceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_lens_version_difference::GetLensVersionDifferenceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_milestone::GetMilestoneError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_milestone::GetMilestoneError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_milestone::GetMilestoneError> for Error {
    fn from(err: crate::operation::get_milestone::GetMilestoneError) -> Self {
        match err {
            crate::operation::get_milestone::GetMilestoneError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_milestone::GetMilestoneError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_milestone::GetMilestoneError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_milestone::GetMilestoneError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_milestone::GetMilestoneError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_milestone::GetMilestoneError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_profile::GetProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_profile::GetProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_profile::GetProfileError> for Error {
    fn from(err: crate::operation::get_profile::GetProfileError) -> Self {
        match err {
            crate::operation::get_profile::GetProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_profile::GetProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_profile::GetProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_profile::GetProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_profile::GetProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_profile::GetProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_profile_template::GetProfileTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_profile_template::GetProfileTemplateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_profile_template::GetProfileTemplateError> for Error {
    fn from(err: crate::operation::get_profile_template::GetProfileTemplateError) -> Self {
        match err {
            crate::operation::get_profile_template::GetProfileTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_profile_template::GetProfileTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_profile_template::GetProfileTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_profile_template::GetProfileTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_profile_template::GetProfileTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_profile_template::GetProfileTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_review_template::GetReviewTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_review_template::GetReviewTemplateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_review_template::GetReviewTemplateError> for Error {
    fn from(err: crate::operation::get_review_template::GetReviewTemplateError) -> Self {
        match err {
            crate::operation::get_review_template::GetReviewTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_review_template::GetReviewTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_review_template::GetReviewTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_review_template::GetReviewTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_review_template::GetReviewTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_review_template::GetReviewTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_review_template_answer::GetReviewTemplateAnswerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_review_template_answer::GetReviewTemplateAnswerError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_review_template_answer::GetReviewTemplateAnswerError> for Error {
    fn from(err: crate::operation::get_review_template_answer::GetReviewTemplateAnswerError) -> Self {
        match err {
            crate::operation::get_review_template_answer::GetReviewTemplateAnswerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_review_template_answer::GetReviewTemplateAnswerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_review_template_answer::GetReviewTemplateAnswerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_review_template_answer::GetReviewTemplateAnswerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_review_template_answer::GetReviewTemplateAnswerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_review_template_answer::GetReviewTemplateAnswerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_review_template_lens_review::GetReviewTemplateLensReviewError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_review_template_lens_review::GetReviewTemplateLensReviewError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_review_template_lens_review::GetReviewTemplateLensReviewError> for Error {
    fn from(err: crate::operation::get_review_template_lens_review::GetReviewTemplateLensReviewError) -> Self {
        match err {
            crate::operation::get_review_template_lens_review::GetReviewTemplateLensReviewError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_review_template_lens_review::GetReviewTemplateLensReviewError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_review_template_lens_review::GetReviewTemplateLensReviewError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_review_template_lens_review::GetReviewTemplateLensReviewError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_review_template_lens_review::GetReviewTemplateLensReviewError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_review_template_lens_review::GetReviewTemplateLensReviewError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workload::GetWorkloadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workload::GetWorkloadError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_workload::GetWorkloadError> for Error {
    fn from(err: crate::operation::get_workload::GetWorkloadError) -> Self {
        match err {
            crate::operation::get_workload::GetWorkloadError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_workload::GetWorkloadError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_workload::GetWorkloadError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_workload::GetWorkloadError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_workload::GetWorkloadError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_workload::GetWorkloadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_lens::ImportLensError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_lens::ImportLensError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::import_lens::ImportLensError> for Error {
    fn from(err: crate::operation::import_lens::ImportLensError) -> Self {
        match err {
            crate::operation::import_lens::ImportLensError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::import_lens::ImportLensError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::import_lens::ImportLensError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::import_lens::ImportLensError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::import_lens::ImportLensError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::import_lens::ImportLensError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::import_lens::ImportLensError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::import_lens::ImportLensError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_answers::ListAnswersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_answers::ListAnswersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_answers::ListAnswersError> for Error {
    fn from(err: crate::operation::list_answers::ListAnswersError) -> Self {
        match err {
            crate::operation::list_answers::ListAnswersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_answers::ListAnswersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_answers::ListAnswersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_answers::ListAnswersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_answers::ListAnswersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_answers::ListAnswersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_check_details::ListCheckDetailsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_check_details::ListCheckDetailsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_check_details::ListCheckDetailsError> for Error {
    fn from(err: crate::operation::list_check_details::ListCheckDetailsError) -> Self {
        match err {
            crate::operation::list_check_details::ListCheckDetailsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_check_details::ListCheckDetailsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_check_details::ListCheckDetailsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_check_details::ListCheckDetailsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_check_details::ListCheckDetailsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_check_details::ListCheckDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_check_summaries::ListCheckSummariesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_check_summaries::ListCheckSummariesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_check_summaries::ListCheckSummariesError> for Error {
    fn from(err: crate::operation::list_check_summaries::ListCheckSummariesError) -> Self {
        match err {
            crate::operation::list_check_summaries::ListCheckSummariesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_check_summaries::ListCheckSummariesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_check_summaries::ListCheckSummariesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_check_summaries::ListCheckSummariesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_check_summaries::ListCheckSummariesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_check_summaries::ListCheckSummariesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_lenses::ListLensesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_lenses::ListLensesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_lenses::ListLensesError> for Error {
    fn from(err: crate::operation::list_lenses::ListLensesError) -> Self {
        match err {
            crate::operation::list_lenses::ListLensesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_lenses::ListLensesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_lenses::ListLensesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_lenses::ListLensesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_lenses::ListLensesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_lens_review_improvements::ListLensReviewImprovementsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_lens_review_improvements::ListLensReviewImprovementsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_lens_review_improvements::ListLensReviewImprovementsError> for Error {
    fn from(err: crate::operation::list_lens_review_improvements::ListLensReviewImprovementsError) -> Self {
        match err {
            crate::operation::list_lens_review_improvements::ListLensReviewImprovementsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_lens_review_improvements::ListLensReviewImprovementsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_lens_review_improvements::ListLensReviewImprovementsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_lens_review_improvements::ListLensReviewImprovementsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_lens_review_improvements::ListLensReviewImprovementsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_lens_review_improvements::ListLensReviewImprovementsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_lens_reviews::ListLensReviewsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_lens_reviews::ListLensReviewsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_lens_reviews::ListLensReviewsError> for Error {
    fn from(err: crate::operation::list_lens_reviews::ListLensReviewsError) -> Self {
        match err {
            crate::operation::list_lens_reviews::ListLensReviewsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_lens_reviews::ListLensReviewsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_lens_reviews::ListLensReviewsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_lens_reviews::ListLensReviewsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_lens_reviews::ListLensReviewsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_lens_reviews::ListLensReviewsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_lens_shares::ListLensSharesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_lens_shares::ListLensSharesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_lens_shares::ListLensSharesError> for Error {
    fn from(err: crate::operation::list_lens_shares::ListLensSharesError) -> Self {
        match err {
            crate::operation::list_lens_shares::ListLensSharesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_lens_shares::ListLensSharesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_lens_shares::ListLensSharesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_lens_shares::ListLensSharesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_lens_shares::ListLensSharesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_lens_shares::ListLensSharesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_milestones::ListMilestonesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_milestones::ListMilestonesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_milestones::ListMilestonesError> for Error {
    fn from(err: crate::operation::list_milestones::ListMilestonesError) -> Self {
        match err {
            crate::operation::list_milestones::ListMilestonesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_milestones::ListMilestonesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_milestones::ListMilestonesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_milestones::ListMilestonesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_milestones::ListMilestonesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_milestones::ListMilestonesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notifications::ListNotificationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notifications::ListNotificationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_notifications::ListNotificationsError> for Error {
    fn from(err: crate::operation::list_notifications::ListNotificationsError) -> Self {
        match err {
            crate::operation::list_notifications::ListNotificationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_notifications::ListNotificationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_notifications::ListNotificationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_notifications::ListNotificationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_notifications::ListNotificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_profile_notifications::ListProfileNotificationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_profile_notifications::ListProfileNotificationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_profile_notifications::ListProfileNotificationsError> for Error {
    fn from(err: crate::operation::list_profile_notifications::ListProfileNotificationsError) -> Self {
        match err {
            crate::operation::list_profile_notifications::ListProfileNotificationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_profile_notifications::ListProfileNotificationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_profile_notifications::ListProfileNotificationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_profile_notifications::ListProfileNotificationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_profile_notifications::ListProfileNotificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_profiles::ListProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_profiles::ListProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_profiles::ListProfilesError> for Error {
    fn from(err: crate::operation::list_profiles::ListProfilesError) -> Self {
        match err {
            crate::operation::list_profiles::ListProfilesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_profiles::ListProfilesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_profiles::ListProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_profiles::ListProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_profiles::ListProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_profile_shares::ListProfileSharesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_profile_shares::ListProfileSharesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_profile_shares::ListProfileSharesError> for Error {
    fn from(err: crate::operation::list_profile_shares::ListProfileSharesError) -> Self {
        match err {
            crate::operation::list_profile_shares::ListProfileSharesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_profile_shares::ListProfileSharesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_profile_shares::ListProfileSharesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_profile_shares::ListProfileSharesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_profile_shares::ListProfileSharesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_profile_shares::ListProfileSharesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_review_template_answers::ListReviewTemplateAnswersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_review_template_answers::ListReviewTemplateAnswersError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_review_template_answers::ListReviewTemplateAnswersError> for Error {
    fn from(err: crate::operation::list_review_template_answers::ListReviewTemplateAnswersError) -> Self {
        match err {
            crate::operation::list_review_template_answers::ListReviewTemplateAnswersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_review_template_answers::ListReviewTemplateAnswersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_review_template_answers::ListReviewTemplateAnswersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_review_template_answers::ListReviewTemplateAnswersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_review_template_answers::ListReviewTemplateAnswersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_review_template_answers::ListReviewTemplateAnswersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_review_templates::ListReviewTemplatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_review_templates::ListReviewTemplatesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_review_templates::ListReviewTemplatesError> for Error {
    fn from(err: crate::operation::list_review_templates::ListReviewTemplatesError) -> Self {
        match err {
            crate::operation::list_review_templates::ListReviewTemplatesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_review_templates::ListReviewTemplatesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_review_templates::ListReviewTemplatesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_review_templates::ListReviewTemplatesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_review_templates::ListReviewTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_share_invitations::ListShareInvitationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_share_invitations::ListShareInvitationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_share_invitations::ListShareInvitationsError> for Error {
    fn from(err: crate::operation::list_share_invitations::ListShareInvitationsError) -> Self {
        match err {
            crate::operation::list_share_invitations::ListShareInvitationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_share_invitations::ListShareInvitationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_share_invitations::ListShareInvitationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_share_invitations::ListShareInvitationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_share_invitations::ListShareInvitationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_template_shares::ListTemplateSharesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_template_shares::ListTemplateSharesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_template_shares::ListTemplateSharesError> for Error {
    fn from(err: crate::operation::list_template_shares::ListTemplateSharesError) -> Self {
        match err {
            crate::operation::list_template_shares::ListTemplateSharesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_template_shares::ListTemplateSharesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_template_shares::ListTemplateSharesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_template_shares::ListTemplateSharesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_template_shares::ListTemplateSharesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_template_shares::ListTemplateSharesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workloads::ListWorkloadsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workloads::ListWorkloadsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_workloads::ListWorkloadsError> for Error {
    fn from(err: crate::operation::list_workloads::ListWorkloadsError) -> Self {
        match err {
            crate::operation::list_workloads::ListWorkloadsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_workloads::ListWorkloadsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_workloads::ListWorkloadsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_workloads::ListWorkloadsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_workloads::ListWorkloadsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workload_shares::ListWorkloadSharesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workload_shares::ListWorkloadSharesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_workload_shares::ListWorkloadSharesError> for Error {
    fn from(err: crate::operation::list_workload_shares::ListWorkloadSharesError) -> Self {
        match err {
            crate::operation::list_workload_shares::ListWorkloadSharesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_workload_shares::ListWorkloadSharesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_workload_shares::ListWorkloadSharesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_workload_shares::ListWorkloadSharesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_workload_shares::ListWorkloadSharesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_workload_shares::ListWorkloadSharesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_answer::UpdateAnswerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_answer::UpdateAnswerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_answer::UpdateAnswerError> for Error {
    fn from(err: crate::operation::update_answer::UpdateAnswerError) -> Self {
        match err {
            crate::operation::update_answer::UpdateAnswerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_answer::UpdateAnswerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_answer::UpdateAnswerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_answer::UpdateAnswerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_answer::UpdateAnswerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_answer::UpdateAnswerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_answer::UpdateAnswerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_global_settings::UpdateGlobalSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_global_settings::UpdateGlobalSettingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_global_settings::UpdateGlobalSettingsError> for Error {
    fn from(err: crate::operation::update_global_settings::UpdateGlobalSettingsError) -> Self {
        match err {
            crate::operation::update_global_settings::UpdateGlobalSettingsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_global_settings::UpdateGlobalSettingsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_global_settings::UpdateGlobalSettingsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_global_settings::UpdateGlobalSettingsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_global_settings::UpdateGlobalSettingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_global_settings::UpdateGlobalSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_integration::UpdateIntegrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_integration::UpdateIntegrationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_integration::UpdateIntegrationError> for Error {
    fn from(err: crate::operation::update_integration::UpdateIntegrationError) -> Self {
        match err {
            crate::operation::update_integration::UpdateIntegrationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_integration::UpdateIntegrationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_integration::UpdateIntegrationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_integration::UpdateIntegrationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_integration::UpdateIntegrationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_integration::UpdateIntegrationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_integration::UpdateIntegrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_lens_review::UpdateLensReviewError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_lens_review::UpdateLensReviewError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_lens_review::UpdateLensReviewError> for Error {
    fn from(err: crate::operation::update_lens_review::UpdateLensReviewError) -> Self {
        match err {
            crate::operation::update_lens_review::UpdateLensReviewError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_lens_review::UpdateLensReviewError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_lens_review::UpdateLensReviewError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_lens_review::UpdateLensReviewError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_lens_review::UpdateLensReviewError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_lens_review::UpdateLensReviewError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_lens_review::UpdateLensReviewError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_profile::UpdateProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_profile::UpdateProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_profile::UpdateProfileError> for Error {
    fn from(err: crate::operation::update_profile::UpdateProfileError) -> Self {
        match err {
            crate::operation::update_profile::UpdateProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_profile::UpdateProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_profile::UpdateProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_profile::UpdateProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_profile::UpdateProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_profile::UpdateProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_profile::UpdateProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_review_template::UpdateReviewTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_review_template::UpdateReviewTemplateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_review_template::UpdateReviewTemplateError> for Error {
    fn from(err: crate::operation::update_review_template::UpdateReviewTemplateError) -> Self {
        match err {
            crate::operation::update_review_template::UpdateReviewTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_review_template::UpdateReviewTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_review_template::UpdateReviewTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_review_template::UpdateReviewTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_review_template::UpdateReviewTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_review_template::UpdateReviewTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_review_template::UpdateReviewTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerError> for Error {
    fn from(err: crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerError) -> Self {
        match err {
            crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_review_template_answer::UpdateReviewTemplateAnswerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewError> for Error {
    fn from(err: crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewError) -> Self {
        match err {
            crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_review_template_lens_review::UpdateReviewTemplateLensReviewError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_share_invitation::UpdateShareInvitationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_share_invitation::UpdateShareInvitationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_share_invitation::UpdateShareInvitationError> for Error {
    fn from(err: crate::operation::update_share_invitation::UpdateShareInvitationError) -> Self {
        match err {
            crate::operation::update_share_invitation::UpdateShareInvitationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_share_invitation::UpdateShareInvitationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_share_invitation::UpdateShareInvitationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_share_invitation::UpdateShareInvitationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_share_invitation::UpdateShareInvitationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_share_invitation::UpdateShareInvitationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_share_invitation::UpdateShareInvitationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workload::UpdateWorkloadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workload::UpdateWorkloadError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_workload::UpdateWorkloadError> for Error {
    fn from(err: crate::operation::update_workload::UpdateWorkloadError) -> Self {
        match err {
            crate::operation::update_workload::UpdateWorkloadError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_workload::UpdateWorkloadError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_workload::UpdateWorkloadError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_workload::UpdateWorkloadError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_workload::UpdateWorkloadError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_workload::UpdateWorkloadError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_workload::UpdateWorkloadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workload_share::UpdateWorkloadShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workload_share::UpdateWorkloadShareError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_workload_share::UpdateWorkloadShareError> for Error {
    fn from(err: crate::operation::update_workload_share::UpdateWorkloadShareError) -> Self {
        match err {
            crate::operation::update_workload_share::UpdateWorkloadShareError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_workload_share::UpdateWorkloadShareError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_workload_share::UpdateWorkloadShareError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_workload_share::UpdateWorkloadShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_workload_share::UpdateWorkloadShareError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_workload_share::UpdateWorkloadShareError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_workload_share::UpdateWorkloadShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::upgrade_lens_review::UpgradeLensReviewError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::upgrade_lens_review::UpgradeLensReviewError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::upgrade_lens_review::UpgradeLensReviewError> for Error {
    fn from(err: crate::operation::upgrade_lens_review::UpgradeLensReviewError) -> Self {
        match err {
            crate::operation::upgrade_lens_review::UpgradeLensReviewError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::upgrade_lens_review::UpgradeLensReviewError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::upgrade_lens_review::UpgradeLensReviewError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::upgrade_lens_review::UpgradeLensReviewError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::upgrade_lens_review::UpgradeLensReviewError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::upgrade_lens_review::UpgradeLensReviewError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::upgrade_lens_review::UpgradeLensReviewError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::upgrade_lens_review::UpgradeLensReviewError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::upgrade_profile_version::UpgradeProfileVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::upgrade_profile_version::UpgradeProfileVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::upgrade_profile_version::UpgradeProfileVersionError> for Error {
    fn from(err: crate::operation::upgrade_profile_version::UpgradeProfileVersionError) -> Self {
        match err {
            crate::operation::upgrade_profile_version::UpgradeProfileVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::upgrade_profile_version::UpgradeProfileVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::upgrade_profile_version::UpgradeProfileVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::upgrade_profile_version::UpgradeProfileVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::upgrade_profile_version::UpgradeProfileVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::upgrade_profile_version::UpgradeProfileVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::upgrade_profile_version::UpgradeProfileVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::upgrade_profile_version::UpgradeProfileVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::upgrade_review_template_lens_review::UpgradeReviewTemplateLensReviewError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::upgrade_review_template_lens_review::UpgradeReviewTemplateLensReviewError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::upgrade_review_template_lens_review::UpgradeReviewTemplateLensReviewError> for Error {
    fn from(err: crate::operation::upgrade_review_template_lens_review::UpgradeReviewTemplateLensReviewError) -> Self {
        match err {
            crate::operation::upgrade_review_template_lens_review::UpgradeReviewTemplateLensReviewError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::upgrade_review_template_lens_review::UpgradeReviewTemplateLensReviewError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::upgrade_review_template_lens_review::UpgradeReviewTemplateLensReviewError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::upgrade_review_template_lens_review::UpgradeReviewTemplateLensReviewError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::upgrade_review_template_lens_review::UpgradeReviewTemplateLensReviewError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::upgrade_review_template_lens_review::UpgradeReviewTemplateLensReviewError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::upgrade_review_template_lens_review::UpgradeReviewTemplateLensReviewError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
