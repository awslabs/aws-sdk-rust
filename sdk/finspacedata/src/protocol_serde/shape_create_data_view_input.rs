// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_data_view_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_data_view::CreateDataViewInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.as_of_timestamp {
        object.key("asOfTimestamp").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.auto_update {
        object.key("autoUpdate").boolean(*var_2);
    }
    if let Some(var_3) = &input.client_token {
        object.key("clientToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.destination_type_params {
        #[allow(unused_mut)]
        let mut object_5 = object.key("destinationTypeParams").start_object();
        crate::protocol_serde::shape_data_view_destination_type_params::ser_data_view_destination_type_params(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.partition_columns {
        let mut array_7 = object.key("partitionColumns").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.sort_columns {
        let mut array_10 = object.key("sortColumns").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    Ok(())
}
