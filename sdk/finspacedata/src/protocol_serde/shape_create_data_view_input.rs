// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_data_view_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_data_view::CreateDataViewInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.as_of_timestamp {
        object.key("asOfTimestamp").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if input.auto_update {
        object.key("autoUpdate").boolean(input.auto_update);
    }
    if let Some(var_2) = &input.client_token {
        object.key("clientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.destination_type_params {
        #[allow(unused_mut)]
        let mut object_4 = object.key("destinationTypeParams").start_object();
        crate::protocol_serde::shape_data_view_destination_type_params::ser_data_view_destination_type_params(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.partition_columns {
        let mut array_6 = object.key("partitionColumns").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.sort_columns {
        let mut array_9 = object.key("sortColumns").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    Ok(())
}
