// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_changesets_output_next_token(
    input: &crate::output::ListChangesetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_datasets_output_next_token(
    input: &crate::output::ListDatasetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_data_views_output_next_token(
    input: &crate::output::ListDataViewsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_permission_groups_output_next_token(
    input: &crate::output::ListPermissionGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_users_output_next_token(
    input: &crate::output::ListUsersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_changesets_output_changesets(
    input: crate::output::ListChangesetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ChangesetSummary>> {
    let input = match input.changesets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_datasets_output_datasets(
    input: crate::output::ListDatasetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Dataset>> {
    let input = match input.datasets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_data_views_output_data_views(
    input: crate::output::ListDataViewsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DataViewSummary>> {
    let input = match input.data_views {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_permission_groups_output_permission_groups(
    input: crate::output::ListPermissionGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PermissionGroup>> {
    let input = match input.permission_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_users_output_users(
    input: crate::output::ListUsersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::User>> {
    let input = match input.users {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
