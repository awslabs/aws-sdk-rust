// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_changeset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChangesetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.change_type {
        object.key("changeType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_token {
        object.key("clientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.format_params {
        let mut object_4 = object.key("formatParams").start_object();
        for (key_5, value_6) in var_3 {
            {
                object_4.key(key_5).string(value_6.as_str());
            }
        }
        object_4.finish();
    }
    if let Some(var_7) = &input.source_params {
        let mut object_8 = object.key("sourceParams").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.alias {
        object.key("alias").string(var_11.as_str());
    }
    if let Some(var_12) = &input.client_token {
        object.key("clientToken").string(var_12.as_str());
    }
    if let Some(var_13) = &input.dataset_description {
        object.key("datasetDescription").string(var_13.as_str());
    }
    if let Some(var_14) = &input.dataset_title {
        object.key("datasetTitle").string(var_14.as_str());
    }
    if let Some(var_15) = &input.kind {
        object.key("kind").string(var_15.as_str());
    }
    if let Some(var_16) = &input.owner_info {
        let mut object_17 = object.key("ownerInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_dataset_owner_info(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if let Some(var_18) = &input.permission_group_params {
        let mut object_19 = object.key("permissionGroupParams").start_object();
        crate::json_ser::serialize_structure_crate_model_permission_group_params(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    if let Some(var_20) = &input.schema_definition {
        let mut object_21 = object.key("schemaDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_union(&mut object_21, var_20)?;
        object_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_view_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataViewInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_22) = &input.as_of_timestamp {
        object.key("asOfTimestamp").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    if input.auto_update {
        object.key("autoUpdate").boolean(input.auto_update);
    }
    if let Some(var_23) = &input.client_token {
        object.key("clientToken").string(var_23.as_str());
    }
    if let Some(var_24) = &input.destination_type_params {
        let mut object_25 = object.key("destinationTypeParams").start_object();
        crate::json_ser::serialize_structure_crate_model_data_view_destination_type_params(
            &mut object_25,
            var_24,
        )?;
        object_25.finish();
    }
    if let Some(var_26) = &input.partition_columns {
        let mut array_27 = object.key("partitionColumns").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28.as_str());
            }
        }
        array_27.finish();
    }
    if let Some(var_29) = &input.sort_columns {
        let mut array_30 = object.key("sortColumns").start_array();
        for item_31 in var_29 {
            {
                array_30.value().string(item_31.as_str());
            }
        }
        array_30.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_working_location_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkingLocationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.location_type {
        object.key("locationType").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_changeset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateChangesetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.client_token {
        object.key("clientToken").string(var_33.as_str());
    }
    if let Some(var_34) = &input.format_params {
        let mut object_35 = object.key("formatParams").start_object();
        for (key_36, value_37) in var_34 {
            {
                object_35.key(key_36).string(value_37.as_str());
            }
        }
        object_35.finish();
    }
    if let Some(var_38) = &input.source_params {
        let mut object_39 = object.key("sourceParams").start_object();
        for (key_40, value_41) in var_38 {
            {
                object_39.key(key_40).string(value_41.as_str());
            }
        }
        object_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatasetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.alias {
        object.key("alias").string(var_42.as_str());
    }
    if let Some(var_43) = &input.client_token {
        object.key("clientToken").string(var_43.as_str());
    }
    if let Some(var_44) = &input.dataset_description {
        object.key("datasetDescription").string(var_44.as_str());
    }
    if let Some(var_45) = &input.dataset_title {
        object.key("datasetTitle").string(var_45.as_str());
    }
    if let Some(var_46) = &input.kind {
        object.key("kind").string(var_46.as_str());
    }
    if let Some(var_47) = &input.schema_definition {
        let mut object_48 = object.key("schemaDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_union(&mut object_48, var_47)?;
        object_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dataset_owner_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetOwnerInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.name {
        object.key("name").string(var_49.as_str());
    }
    if let Some(var_50) = &input.phone_number {
        object.key("phoneNumber").string(var_50.as_str());
    }
    if let Some(var_51) = &input.email {
        object.key("email").string(var_51.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_permission_group_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PermissionGroupParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.permission_group_id {
        object.key("permissionGroupId").string(var_52.as_str());
    }
    if let Some(var_53) = &input.dataset_permissions {
        let mut array_54 = object.key("datasetPermissions").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_permission(
                    &mut object_56,
                    item_55,
                )?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_union(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaUnion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.tabular_schema_config {
        let mut object_58 = object.key("tabularSchemaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_definition(&mut object_58, var_57)?;
        object_58.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_view_destination_type_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataViewDestinationTypeParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.destination_type {
        object.key("destinationType").string(var_59.as_str());
    }
    if let Some(var_60) = &input.s3_destination_export_file_format {
        object
            .key("s3DestinationExportFileFormat")
            .string(var_60.as_str());
    }
    if let Some(var_61) = &input.s3_destination_export_file_format_options {
        let mut object_62 = object
            .key("s3DestinationExportFileFormatOptions")
            .start_object();
        for (key_63, value_64) in var_61 {
            {
                object_62.key(key_63).string(value_64.as_str());
            }
        }
        object_62.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_permission(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourcePermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.permission {
        object.key("permission").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.columns {
        let mut array_67 = object.key("columns").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_definition(
                    &mut object_69,
                    item_68,
                )?;
                object_69.finish();
            }
        }
        array_67.finish();
    }
    if let Some(var_70) = &input.primary_key_columns {
        let mut array_71 = object.key("primaryKeyColumns").start_array();
        for item_72 in var_70 {
            {
                array_71.value().string(item_72.as_str());
            }
        }
        array_71.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.data_type {
        object.key("dataType").string(var_73.as_str());
    }
    if let Some(var_74) = &input.column_name {
        object.key("columnName").string(var_74.as_str());
    }
    if let Some(var_75) = &input.column_description {
        object.key("columnDescription").string(var_75.as_str());
    }
    Ok(())
}
