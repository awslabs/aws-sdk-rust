// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_changeset_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChangesetInput,
) {
    if let Some(var_1) = &input.change_type {
        object.key("changeType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.format_params {
        let mut object_3 = object.key("formatParams").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4).string(value_5);
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.format_type {
        object.key("formatType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.source_params {
        let mut object_8 = object.key("sourceParams").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9).string(value_10);
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.source_type {
        object.key("sourceType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14).string(value_15);
            }
        }
        object_13.finish();
    }
}

pub fn serialize_structure_crate_input_get_working_location_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkingLocationInput,
) {
    if let Some(var_16) = &input.location_type {
        object.key("locationType").string(var_16.as_str());
    }
}
