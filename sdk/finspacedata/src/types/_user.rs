// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the user account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct User {
    /// <p>The unique identifier for the user.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The current status of the user account. </p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> – The user account creation is in progress.</p> </li>
    /// <li> <p> <code>ENABLED</code> – The user account is created and is currently active.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user account is currently inactive.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::UserStatus>,
    /// <p>The first name of the user.</p>
    #[doc(hidden)]
    pub first_name: std::option::Option<std::string::String>,
    /// <p> The last name of the user.</p>
    #[doc(hidden)]
    pub last_name: std::option::Option<std::string::String>,
    /// <p>The email address of the user. The email address serves as a uniquer identifier for each user and cannot be changed after it's created.</p>
    #[doc(hidden)]
    pub email_address: std::option::Option<std::string::String>,
    /// <p> Indicates the type of user.</p>
    /// <ul>
    /// <li> <p> <code>SUPER_USER</code> – A user with permission to all the functionality and data in FinSpace.</p> </li>
    /// <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::UserType>,
    /// <p>Indicates whether the user can use the <code>GetProgrammaticAccessCredentials</code> API to obtain credentials that can then be used to access other FinSpace Data API operations.</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> – The user has permissions to use the APIs.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user does not have permissions to use any APIs.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub api_access: std::option::Option<crate::types::ApiAccess>,
    /// <p>The ARN identifier of an AWS user or role that is allowed to call the <code>GetProgrammaticAccessCredentials</code> API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.</p>
    #[doc(hidden)]
    pub api_access_principal_arn: std::option::Option<std::string::String>,
    /// <p>The timestamp at which the user account was created in FinSpace. The value is determined as epoch time in milliseconds. </p>
    #[doc(hidden)]
    pub create_time: i64,
    /// <p> Describes the last time the user account was enabled. The value is determined as epoch time in milliseconds. </p>
    #[doc(hidden)]
    pub last_enabled_time: i64,
    /// <p>Describes the last time the user account was disabled. The value is determined as epoch time in milliseconds.</p>
    #[doc(hidden)]
    pub last_disabled_time: i64,
    /// <p>Describes the last time the user account was updated. The value is determined as epoch time in milliseconds. </p>
    #[doc(hidden)]
    pub last_modified_time: i64,
    /// <p>Describes the last time that the user logged into their account. The value is determined as epoch time in milliseconds. </p>
    #[doc(hidden)]
    pub last_login_time: i64,
}
impl User {
    /// <p>The unique identifier for the user.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The current status of the user account. </p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> – The user account creation is in progress.</p> </li>
    /// <li> <p> <code>ENABLED</code> – The user account is created and is currently active.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user account is currently inactive.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::UserStatus> {
        self.status.as_ref()
    }
    /// <p>The first name of the user.</p>
    pub fn first_name(&self) -> std::option::Option<&str> {
        self.first_name.as_deref()
    }
    /// <p> The last name of the user.</p>
    pub fn last_name(&self) -> std::option::Option<&str> {
        self.last_name.as_deref()
    }
    /// <p>The email address of the user. The email address serves as a uniquer identifier for each user and cannot be changed after it's created.</p>
    pub fn email_address(&self) -> std::option::Option<&str> {
        self.email_address.as_deref()
    }
    /// <p> Indicates the type of user.</p>
    /// <ul>
    /// <li> <p> <code>SUPER_USER</code> – A user with permission to all the functionality and data in FinSpace.</p> </li>
    /// <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&crate::types::UserType> {
        self.r#type.as_ref()
    }
    /// <p>Indicates whether the user can use the <code>GetProgrammaticAccessCredentials</code> API to obtain credentials that can then be used to access other FinSpace Data API operations.</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> – The user has permissions to use the APIs.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user does not have permissions to use any APIs.</p> </li>
    /// </ul>
    pub fn api_access(&self) -> std::option::Option<&crate::types::ApiAccess> {
        self.api_access.as_ref()
    }
    /// <p>The ARN identifier of an AWS user or role that is allowed to call the <code>GetProgrammaticAccessCredentials</code> API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.</p>
    pub fn api_access_principal_arn(&self) -> std::option::Option<&str> {
        self.api_access_principal_arn.as_deref()
    }
    /// <p>The timestamp at which the user account was created in FinSpace. The value is determined as epoch time in milliseconds. </p>
    pub fn create_time(&self) -> i64 {
        self.create_time
    }
    /// <p> Describes the last time the user account was enabled. The value is determined as epoch time in milliseconds. </p>
    pub fn last_enabled_time(&self) -> i64 {
        self.last_enabled_time
    }
    /// <p>Describes the last time the user account was disabled. The value is determined as epoch time in milliseconds.</p>
    pub fn last_disabled_time(&self) -> i64 {
        self.last_disabled_time
    }
    /// <p>Describes the last time the user account was updated. The value is determined as epoch time in milliseconds. </p>
    pub fn last_modified_time(&self) -> i64 {
        self.last_modified_time
    }
    /// <p>Describes the last time that the user logged into their account. The value is determined as epoch time in milliseconds. </p>
    pub fn last_login_time(&self) -> i64 {
        self.last_login_time
    }
}
impl std::fmt::Debug for User {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("User");
        formatter.field("user_id", &self.user_id);
        formatter.field("status", &self.status);
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("api_access", &self.api_access);
        formatter.field("api_access_principal_arn", &self.api_access_principal_arn);
        formatter.field("create_time", &self.create_time);
        formatter.field("last_enabled_time", &self.last_enabled_time);
        formatter.field("last_disabled_time", &self.last_disabled_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("last_login_time", &self.last_login_time);
        formatter.finish()
    }
}
impl User {
    /// Creates a new builder-style object to manufacture [`User`](crate::types::User).
    pub fn builder() -> crate::types::builders::UserBuilder {
        crate::types::builders::UserBuilder::default()
    }
}

/// A builder for [`User`](crate::types::User).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UserBuilder {
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::UserStatus>,
    pub(crate) first_name: std::option::Option<std::string::String>,
    pub(crate) last_name: std::option::Option<std::string::String>,
    pub(crate) email_address: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::UserType>,
    pub(crate) api_access: std::option::Option<crate::types::ApiAccess>,
    pub(crate) api_access_principal_arn: std::option::Option<std::string::String>,
    pub(crate) create_time: std::option::Option<i64>,
    pub(crate) last_enabled_time: std::option::Option<i64>,
    pub(crate) last_disabled_time: std::option::Option<i64>,
    pub(crate) last_modified_time: std::option::Option<i64>,
    pub(crate) last_login_time: std::option::Option<i64>,
}
impl UserBuilder {
    /// <p>The unique identifier for the user.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the user.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The current status of the user account. </p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> – The user account creation is in progress.</p> </li>
    /// <li> <p> <code>ENABLED</code> – The user account is created and is currently active.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user account is currently inactive.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::UserStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the user account. </p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> – The user account creation is in progress.</p> </li>
    /// <li> <p> <code>ENABLED</code> – The user account is created and is currently active.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user account is currently inactive.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::UserStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The first name of the user.</p>
    pub fn first_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.first_name = Some(input.into());
        self
    }
    /// <p>The first name of the user.</p>
    pub fn set_first_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.first_name = input;
        self
    }
    /// <p> The last name of the user.</p>
    pub fn last_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_name = Some(input.into());
        self
    }
    /// <p> The last name of the user.</p>
    pub fn set_last_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_name = input;
        self
    }
    /// <p>The email address of the user. The email address serves as a uniquer identifier for each user and cannot be changed after it's created.</p>
    pub fn email_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.email_address = Some(input.into());
        self
    }
    /// <p>The email address of the user. The email address serves as a uniquer identifier for each user and cannot be changed after it's created.</p>
    pub fn set_email_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p> Indicates the type of user.</p>
    /// <ul>
    /// <li> <p> <code>SUPER_USER</code> – A user with permission to all the functionality and data in FinSpace.</p> </li>
    /// <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::UserType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p> Indicates the type of user.</p>
    /// <ul>
    /// <li> <p> <code>SUPER_USER</code> – A user with permission to all the functionality and data in FinSpace.</p> </li>
    /// <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<crate::types::UserType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Indicates whether the user can use the <code>GetProgrammaticAccessCredentials</code> API to obtain credentials that can then be used to access other FinSpace Data API operations.</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> – The user has permissions to use the APIs.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user does not have permissions to use any APIs.</p> </li>
    /// </ul>
    pub fn api_access(mut self, input: crate::types::ApiAccess) -> Self {
        self.api_access = Some(input);
        self
    }
    /// <p>Indicates whether the user can use the <code>GetProgrammaticAccessCredentials</code> API to obtain credentials that can then be used to access other FinSpace Data API operations.</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> – The user has permissions to use the APIs.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user does not have permissions to use any APIs.</p> </li>
    /// </ul>
    pub fn set_api_access(mut self, input: std::option::Option<crate::types::ApiAccess>) -> Self {
        self.api_access = input;
        self
    }
    /// <p>The ARN identifier of an AWS user or role that is allowed to call the <code>GetProgrammaticAccessCredentials</code> API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.</p>
    pub fn api_access_principal_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.api_access_principal_arn = Some(input.into());
        self
    }
    /// <p>The ARN identifier of an AWS user or role that is allowed to call the <code>GetProgrammaticAccessCredentials</code> API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.</p>
    pub fn set_api_access_principal_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.api_access_principal_arn = input;
        self
    }
    /// <p>The timestamp at which the user account was created in FinSpace. The value is determined as epoch time in milliseconds. </p>
    pub fn create_time(mut self, input: i64) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p>The timestamp at which the user account was created in FinSpace. The value is determined as epoch time in milliseconds. </p>
    pub fn set_create_time(mut self, input: std::option::Option<i64>) -> Self {
        self.create_time = input;
        self
    }
    /// <p> Describes the last time the user account was enabled. The value is determined as epoch time in milliseconds. </p>
    pub fn last_enabled_time(mut self, input: i64) -> Self {
        self.last_enabled_time = Some(input);
        self
    }
    /// <p> Describes the last time the user account was enabled. The value is determined as epoch time in milliseconds. </p>
    pub fn set_last_enabled_time(mut self, input: std::option::Option<i64>) -> Self {
        self.last_enabled_time = input;
        self
    }
    /// <p>Describes the last time the user account was disabled. The value is determined as epoch time in milliseconds.</p>
    pub fn last_disabled_time(mut self, input: i64) -> Self {
        self.last_disabled_time = Some(input);
        self
    }
    /// <p>Describes the last time the user account was disabled. The value is determined as epoch time in milliseconds.</p>
    pub fn set_last_disabled_time(mut self, input: std::option::Option<i64>) -> Self {
        self.last_disabled_time = input;
        self
    }
    /// <p>Describes the last time the user account was updated. The value is determined as epoch time in milliseconds. </p>
    pub fn last_modified_time(mut self, input: i64) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>Describes the last time the user account was updated. The value is determined as epoch time in milliseconds. </p>
    pub fn set_last_modified_time(mut self, input: std::option::Option<i64>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>Describes the last time that the user logged into their account. The value is determined as epoch time in milliseconds. </p>
    pub fn last_login_time(mut self, input: i64) -> Self {
        self.last_login_time = Some(input);
        self
    }
    /// <p>Describes the last time that the user logged into their account. The value is determined as epoch time in milliseconds. </p>
    pub fn set_last_login_time(mut self, input: std::option::Option<i64>) -> Self {
        self.last_login_time = input;
        self
    }
    /// Consumes the builder and constructs a [`User`](crate::types::User).
    pub fn build(self) -> crate::types::User {
        crate::types::User {
            user_id: self.user_id,
            status: self.status,
            first_name: self.first_name,
            last_name: self.last_name,
            email_address: self.email_address,
            r#type: self.r#type,
            api_access: self.api_access,
            api_access_principal_arn: self.api_access_principal_arn,
            create_time: self.create_time.unwrap_or_default(),
            last_enabled_time: self.last_enabled_time.unwrap_or_default(),
            last_disabled_time: self.last_disabled_time.unwrap_or_default(),
            last_modified_time: self.last_modified_time.unwrap_or_default(),
            last_login_time: self.last_login_time.unwrap_or_default(),
        }
    }
}
impl std::fmt::Debug for UserBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UserBuilder");
        formatter.field("user_id", &self.user_id);
        formatter.field("status", &self.status);
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("api_access", &self.api_access);
        formatter.field("api_access_principal_arn", &self.api_access_principal_arn);
        formatter.field("create_time", &self.create_time);
        formatter.field("last_enabled_time", &self.last_enabled_time);
        formatter.field("last_disabled_time", &self.last_disabled_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("last_login_time", &self.last_login_time);
        formatter.finish()
    }
}
