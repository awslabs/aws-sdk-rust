// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure with error messages.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChangesetErrorInfo {
    /// <p>The text of the error message.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>The category of the error.</p>
    /// <ul>
    /// <li> <p> <code>VALIDATION</code> – The inputs to this request are invalid.</p> </li>
    /// <li> <p> <code>SERVICE_QUOTA_EXCEEDED</code> – Service quotas have been exceeded. Please contact AWS support to increase quotas.</p> </li>
    /// <li> <p> <code>ACCESS_DENIED</code> – Missing required permission to perform this request.</p> </li>
    /// <li> <p> <code>RESOURCE_NOT_FOUND</code> – One or more inputs to this request were not found.</p> </li>
    /// <li> <p> <code>THROTTLING</code> – The system temporarily lacks sufficient resources to process the request.</p> </li>
    /// <li> <p> <code>INTERNAL_SERVICE_EXCEPTION</code> – An internal service error has occurred.</p> </li>
    /// <li> <p> <code>CANCELLED</code> – Cancelled.</p> </li>
    /// <li> <p> <code>USER_RECOVERABLE</code> – A user recoverable error has occurred.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub error_category: std::option::Option<crate::types::ErrorCategory>,
}
impl ChangesetErrorInfo {
    /// <p>The text of the error message.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The category of the error.</p>
    /// <ul>
    /// <li> <p> <code>VALIDATION</code> – The inputs to this request are invalid.</p> </li>
    /// <li> <p> <code>SERVICE_QUOTA_EXCEEDED</code> – Service quotas have been exceeded. Please contact AWS support to increase quotas.</p> </li>
    /// <li> <p> <code>ACCESS_DENIED</code> – Missing required permission to perform this request.</p> </li>
    /// <li> <p> <code>RESOURCE_NOT_FOUND</code> – One or more inputs to this request were not found.</p> </li>
    /// <li> <p> <code>THROTTLING</code> – The system temporarily lacks sufficient resources to process the request.</p> </li>
    /// <li> <p> <code>INTERNAL_SERVICE_EXCEPTION</code> – An internal service error has occurred.</p> </li>
    /// <li> <p> <code>CANCELLED</code> – Cancelled.</p> </li>
    /// <li> <p> <code>USER_RECOVERABLE</code> – A user recoverable error has occurred.</p> </li>
    /// </ul>
    pub fn error_category(&self) -> std::option::Option<&crate::types::ErrorCategory> {
        self.error_category.as_ref()
    }
}
impl ChangesetErrorInfo {
    /// Creates a new builder-style object to manufacture [`ChangesetErrorInfo`](crate::types::ChangesetErrorInfo).
    pub fn builder() -> crate::types::builders::ChangesetErrorInfoBuilder {
        crate::types::builders::ChangesetErrorInfoBuilder::default()
    }
}

/// A builder for [`ChangesetErrorInfo`](crate::types::ChangesetErrorInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChangesetErrorInfoBuilder {
    pub(crate) error_message: std::option::Option<std::string::String>,
    pub(crate) error_category: std::option::Option<crate::types::ErrorCategory>,
}
impl ChangesetErrorInfoBuilder {
    /// <p>The text of the error message.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>The text of the error message.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The category of the error.</p>
    /// <ul>
    /// <li> <p> <code>VALIDATION</code> – The inputs to this request are invalid.</p> </li>
    /// <li> <p> <code>SERVICE_QUOTA_EXCEEDED</code> – Service quotas have been exceeded. Please contact AWS support to increase quotas.</p> </li>
    /// <li> <p> <code>ACCESS_DENIED</code> – Missing required permission to perform this request.</p> </li>
    /// <li> <p> <code>RESOURCE_NOT_FOUND</code> – One or more inputs to this request were not found.</p> </li>
    /// <li> <p> <code>THROTTLING</code> – The system temporarily lacks sufficient resources to process the request.</p> </li>
    /// <li> <p> <code>INTERNAL_SERVICE_EXCEPTION</code> – An internal service error has occurred.</p> </li>
    /// <li> <p> <code>CANCELLED</code> – Cancelled.</p> </li>
    /// <li> <p> <code>USER_RECOVERABLE</code> – A user recoverable error has occurred.</p> </li>
    /// </ul>
    pub fn error_category(mut self, input: crate::types::ErrorCategory) -> Self {
        self.error_category = Some(input);
        self
    }
    /// <p>The category of the error.</p>
    /// <ul>
    /// <li> <p> <code>VALIDATION</code> – The inputs to this request are invalid.</p> </li>
    /// <li> <p> <code>SERVICE_QUOTA_EXCEEDED</code> – Service quotas have been exceeded. Please contact AWS support to increase quotas.</p> </li>
    /// <li> <p> <code>ACCESS_DENIED</code> – Missing required permission to perform this request.</p> </li>
    /// <li> <p> <code>RESOURCE_NOT_FOUND</code> – One or more inputs to this request were not found.</p> </li>
    /// <li> <p> <code>THROTTLING</code> – The system temporarily lacks sufficient resources to process the request.</p> </li>
    /// <li> <p> <code>INTERNAL_SERVICE_EXCEPTION</code> – An internal service error has occurred.</p> </li>
    /// <li> <p> <code>CANCELLED</code> – Cancelled.</p> </li>
    /// <li> <p> <code>USER_RECOVERABLE</code> – A user recoverable error has occurred.</p> </li>
    /// </ul>
    pub fn set_error_category(
        mut self,
        input: std::option::Option<crate::types::ErrorCategory>,
    ) -> Self {
        self.error_category = input;
        self
    }
    /// Consumes the builder and constructs a [`ChangesetErrorInfo`](crate::types::ChangesetErrorInfo).
    pub fn build(self) -> crate::types::ChangesetErrorInfo {
        crate::types::ChangesetErrorInfo {
            error_message: self.error_message,
            error_category: self.error_category,
        }
    }
}
