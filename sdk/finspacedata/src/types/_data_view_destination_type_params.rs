// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure for the Dataview destination type parameters.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataViewDestinationTypeParams {
    /// <p>Destination type for a Dataview.</p>
    /// <ul>
    /// <li> <p> <code>GLUE_TABLE</code> – Glue table destination type.</p> </li>
    /// <li> <p> <code>S3</code> – S3 destination type.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub destination_type: std::option::Option<std::string::String>,
    /// <p>Dataview export file format.</p>
    /// <ul>
    /// <li> <p> <code>PARQUET</code> – Parquet export file format.</p> </li>
    /// <li> <p> <code>DELIMITED_TEXT</code> – Delimited text export file format.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub s3_destination_export_file_format: std::option::Option<crate::types::ExportFileFormat>,
    /// <p>Format Options for S3 Destination type.</p>
    /// <p>Here is an example of how you could specify the <code>s3DestinationExportFileFormatOptions</code> </p>
    /// <p> <code> { "header": "true", "delimiter": ",", "compression": "gzip" }</code> </p>
    #[doc(hidden)]
    pub s3_destination_export_file_format_options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DataViewDestinationTypeParams {
    /// <p>Destination type for a Dataview.</p>
    /// <ul>
    /// <li> <p> <code>GLUE_TABLE</code> – Glue table destination type.</p> </li>
    /// <li> <p> <code>S3</code> – S3 destination type.</p> </li>
    /// </ul>
    pub fn destination_type(&self) -> std::option::Option<&str> {
        self.destination_type.as_deref()
    }
    /// <p>Dataview export file format.</p>
    /// <ul>
    /// <li> <p> <code>PARQUET</code> – Parquet export file format.</p> </li>
    /// <li> <p> <code>DELIMITED_TEXT</code> – Delimited text export file format.</p> </li>
    /// </ul>
    pub fn s3_destination_export_file_format(
        &self,
    ) -> std::option::Option<&crate::types::ExportFileFormat> {
        self.s3_destination_export_file_format.as_ref()
    }
    /// <p>Format Options for S3 Destination type.</p>
    /// <p>Here is an example of how you could specify the <code>s3DestinationExportFileFormatOptions</code> </p>
    /// <p> <code> { "header": "true", "delimiter": ",", "compression": "gzip" }</code> </p>
    pub fn s3_destination_export_file_format_options(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.s3_destination_export_file_format_options.as_ref()
    }
}
impl DataViewDestinationTypeParams {
    /// Creates a new builder-style object to manufacture [`DataViewDestinationTypeParams`](crate::types::DataViewDestinationTypeParams).
    pub fn builder() -> crate::types::builders::DataViewDestinationTypeParamsBuilder {
        crate::types::builders::DataViewDestinationTypeParamsBuilder::default()
    }
}

/// A builder for [`DataViewDestinationTypeParams`](crate::types::DataViewDestinationTypeParams).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataViewDestinationTypeParamsBuilder {
    pub(crate) destination_type: std::option::Option<std::string::String>,
    pub(crate) s3_destination_export_file_format:
        std::option::Option<crate::types::ExportFileFormat>,
    pub(crate) s3_destination_export_file_format_options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DataViewDestinationTypeParamsBuilder {
    /// <p>Destination type for a Dataview.</p>
    /// <ul>
    /// <li> <p> <code>GLUE_TABLE</code> – Glue table destination type.</p> </li>
    /// <li> <p> <code>S3</code> – S3 destination type.</p> </li>
    /// </ul>
    pub fn destination_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_type = Some(input.into());
        self
    }
    /// <p>Destination type for a Dataview.</p>
    /// <ul>
    /// <li> <p> <code>GLUE_TABLE</code> – Glue table destination type.</p> </li>
    /// <li> <p> <code>S3</code> – S3 destination type.</p> </li>
    /// </ul>
    pub fn set_destination_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination_type = input;
        self
    }
    /// <p>Dataview export file format.</p>
    /// <ul>
    /// <li> <p> <code>PARQUET</code> – Parquet export file format.</p> </li>
    /// <li> <p> <code>DELIMITED_TEXT</code> – Delimited text export file format.</p> </li>
    /// </ul>
    pub fn s3_destination_export_file_format(
        mut self,
        input: crate::types::ExportFileFormat,
    ) -> Self {
        self.s3_destination_export_file_format = Some(input);
        self
    }
    /// <p>Dataview export file format.</p>
    /// <ul>
    /// <li> <p> <code>PARQUET</code> – Parquet export file format.</p> </li>
    /// <li> <p> <code>DELIMITED_TEXT</code> – Delimited text export file format.</p> </li>
    /// </ul>
    pub fn set_s3_destination_export_file_format(
        mut self,
        input: std::option::Option<crate::types::ExportFileFormat>,
    ) -> Self {
        self.s3_destination_export_file_format = input;
        self
    }
    /// Adds a key-value pair to `s3_destination_export_file_format_options`.
    ///
    /// To override the contents of this collection use [`set_s3_destination_export_file_format_options`](Self::set_s3_destination_export_file_format_options).
    ///
    /// <p>Format Options for S3 Destination type.</p>
    /// <p>Here is an example of how you could specify the <code>s3DestinationExportFileFormatOptions</code> </p>
    /// <p> <code> { "header": "true", "delimiter": ",", "compression": "gzip" }</code> </p>
    pub fn s3_destination_export_file_format_options(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self
            .s3_destination_export_file_format_options
            .unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.s3_destination_export_file_format_options = Some(hash_map);
        self
    }
    /// <p>Format Options for S3 Destination type.</p>
    /// <p>Here is an example of how you could specify the <code>s3DestinationExportFileFormatOptions</code> </p>
    /// <p> <code> { "header": "true", "delimiter": ",", "compression": "gzip" }</code> </p>
    pub fn set_s3_destination_export_file_format_options(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.s3_destination_export_file_format_options = input;
        self
    }
    /// Consumes the builder and constructs a [`DataViewDestinationTypeParams`](crate::types::DataViewDestinationTypeParams).
    pub fn build(self) -> crate::types::DataViewDestinationTypeParams {
        crate::types::DataViewDestinationTypeParams {
            destination_type: self.destination_type,
            s3_destination_export_file_format: self.s3_destination_export_file_format,
            s3_destination_export_file_format_options: self
                .s3_destination_export_file_format_options,
        }
    }
}
