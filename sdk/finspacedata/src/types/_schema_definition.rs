// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Definition for a schema on a tabular Dataset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SchemaDefinition {
    /// <p>List of column definitions.</p>
    pub columns: ::std::option::Option<::std::vec::Vec<crate::types::ColumnDefinition>>,
    /// <p>List of column names used for primary key.</p>
    pub primary_key_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SchemaDefinition {
    /// <p>List of column definitions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.columns.is_none()`.
    pub fn columns(&self) -> &[crate::types::ColumnDefinition] {
        self.columns.as_deref().unwrap_or_default()
    }
    /// <p>List of column names used for primary key.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.primary_key_columns.is_none()`.
    pub fn primary_key_columns(&self) -> &[::std::string::String] {
        self.primary_key_columns.as_deref().unwrap_or_default()
    }
}
impl SchemaDefinition {
    /// Creates a new builder-style object to manufacture [`SchemaDefinition`](crate::types::SchemaDefinition).
    pub fn builder() -> crate::types::builders::SchemaDefinitionBuilder {
        crate::types::builders::SchemaDefinitionBuilder::default()
    }
}

/// A builder for [`SchemaDefinition`](crate::types::SchemaDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SchemaDefinitionBuilder {
    pub(crate) columns: ::std::option::Option<::std::vec::Vec<crate::types::ColumnDefinition>>,
    pub(crate) primary_key_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SchemaDefinitionBuilder {
    /// Appends an item to `columns`.
    ///
    /// To override the contents of this collection use [`set_columns`](Self::set_columns).
    ///
    /// <p>List of column definitions.</p>
    pub fn columns(mut self, input: crate::types::ColumnDefinition) -> Self {
        let mut v = self.columns.unwrap_or_default();
        v.push(input);
        self.columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of column definitions.</p>
    pub fn set_columns(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ColumnDefinition>>) -> Self {
        self.columns = input;
        self
    }
    /// <p>List of column definitions.</p>
    pub fn get_columns(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ColumnDefinition>> {
        &self.columns
    }
    /// Appends an item to `primary_key_columns`.
    ///
    /// To override the contents of this collection use [`set_primary_key_columns`](Self::set_primary_key_columns).
    ///
    /// <p>List of column names used for primary key.</p>
    pub fn primary_key_columns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.primary_key_columns.unwrap_or_default();
        v.push(input.into());
        self.primary_key_columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of column names used for primary key.</p>
    pub fn set_primary_key_columns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.primary_key_columns = input;
        self
    }
    /// <p>List of column names used for primary key.</p>
    pub fn get_primary_key_columns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.primary_key_columns
    }
    /// Consumes the builder and constructs a [`SchemaDefinition`](crate::types::SchemaDefinition).
    pub fn build(self) -> crate::types::SchemaDefinition {
        crate::types::SchemaDefinition {
            columns: self.columns,
            primary_key_columns: self.primary_key_columns,
        }
    }
}
