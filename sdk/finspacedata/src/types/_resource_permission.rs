// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Resource permission for a dataset. When you create a dataset, all the other members of the same user group inherit access to the dataset. You can only create a dataset if your user group has application permission for Create Datasets.</p>
/// <p>The following is a list of valid dataset permissions that you can apply: </p>
/// <ul>
/// <li> <p> <code>ViewDatasetDetails</code> </p> </li>
/// <li> <p> <code>ReadDatasetDetails</code> </p> </li>
/// <li> <p> <code>AddDatasetData</code> </p> </li>
/// <li> <p> <code>CreateDataView</code> </p> </li>
/// <li> <p> <code>EditDatasetMetadata</code> </p> </li>
/// <li> <p> <code>DeleteDataset</code> </p> </li>
/// </ul>
/// <p>For more information on the dataset permissions, see <a href="https://docs.aws.amazon.com/finspace/latest/userguide/managing-user-permissions.html#supported-dataset-permissions">Supported Dataset Permissions</a> in the FinSpace User Guide.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourcePermission {
    /// <p>Permission for a resource.</p>
    #[doc(hidden)]
    pub permission: std::option::Option<std::string::String>,
}
impl ResourcePermission {
    /// <p>Permission for a resource.</p>
    pub fn permission(&self) -> std::option::Option<&str> {
        self.permission.as_deref()
    }
}
impl ResourcePermission {
    /// Creates a new builder-style object to manufacture [`ResourcePermission`](crate::types::ResourcePermission).
    pub fn builder() -> crate::types::builders::ResourcePermissionBuilder {
        crate::types::builders::ResourcePermissionBuilder::default()
    }
}

/// A builder for [`ResourcePermission`](crate::types::ResourcePermission).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourcePermissionBuilder {
    pub(crate) permission: std::option::Option<std::string::String>,
}
impl ResourcePermissionBuilder {
    /// <p>Permission for a resource.</p>
    pub fn permission(mut self, input: impl Into<std::string::String>) -> Self {
        self.permission = Some(input.into());
        self
    }
    /// <p>Permission for a resource.</p>
    pub fn set_permission(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.permission = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourcePermission`](crate::types::ResourcePermission).
    pub fn build(self) -> crate::types::ResourcePermission {
        crate::types::ResourcePermission {
            permission: self.permission,
        }
    }
}
