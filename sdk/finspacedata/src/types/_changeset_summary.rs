// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Changeset is unit of data in a Dataset.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChangesetSummary {
    /// <p>The unique identifier for a Changeset.</p>
    #[doc(hidden)]
    pub changeset_id: std::option::Option<std::string::String>,
    /// <p>The ARN identifier of the Changeset.</p>
    #[doc(hidden)]
    pub changeset_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the FinSpace Dataset in which the Changeset is created.</p>
    #[doc(hidden)]
    pub dataset_id: std::option::Option<std::string::String>,
    /// <p>Type that indicates how a Changeset is applied to a Dataset.</p>
    /// <ul>
    /// <li> <p> <code>REPLACE</code> – Changeset is considered as a replacement to all prior loaded Changesets.</p> </li>
    /// <li> <p> <code>APPEND</code> – Changeset is considered as an addition to the end of all prior loaded Changesets.</p> </li>
    /// <li> <p> <code>MODIFY</code> – Changeset is considered as a replacement to a specific prior ingested Changeset.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub change_type: std::option::Option<crate::types::ChangeType>,
    /// <p>Options that define the location of the data being ingested.</p>
    #[doc(hidden)]
    pub source_params:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Options that define the structure of the source file(s).</p>
    #[doc(hidden)]
    pub format_params:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The timestamp at which the Changeset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    #[doc(hidden)]
    pub create_time: i64,
    /// <p>Status of the Changeset ingestion.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – Changeset is pending creation.</p> </li>
    /// <li> <p> <code>FAILED</code> – Changeset creation has failed.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – Changeset creation has succeeded.</p> </li>
    /// <li> <p> <code>RUNNING</code> – Changeset creation is running.</p> </li>
    /// <li> <p> <code>STOP_REQUESTED</code> – User requested Changeset creation to stop.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::IngestionStatus>,
    /// <p>The structure with error messages.</p>
    #[doc(hidden)]
    pub error_info: std::option::Option<crate::types::ChangesetErrorInfo>,
    /// <p>Time until which the Changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    #[doc(hidden)]
    pub active_until_timestamp: std::option::Option<i64>,
    /// <p>Beginning time from which the Changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    #[doc(hidden)]
    pub active_from_timestamp: std::option::Option<i64>,
    /// <p>The unique identifier of the Changeset that is updated.</p>
    #[doc(hidden)]
    pub updates_changeset_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the updated Changeset.</p>
    #[doc(hidden)]
    pub updated_by_changeset_id: std::option::Option<std::string::String>,
}
impl ChangesetSummary {
    /// <p>The unique identifier for a Changeset.</p>
    pub fn changeset_id(&self) -> std::option::Option<&str> {
        self.changeset_id.as_deref()
    }
    /// <p>The ARN identifier of the Changeset.</p>
    pub fn changeset_arn(&self) -> std::option::Option<&str> {
        self.changeset_arn.as_deref()
    }
    /// <p>The unique identifier for the FinSpace Dataset in which the Changeset is created.</p>
    pub fn dataset_id(&self) -> std::option::Option<&str> {
        self.dataset_id.as_deref()
    }
    /// <p>Type that indicates how a Changeset is applied to a Dataset.</p>
    /// <ul>
    /// <li> <p> <code>REPLACE</code> – Changeset is considered as a replacement to all prior loaded Changesets.</p> </li>
    /// <li> <p> <code>APPEND</code> – Changeset is considered as an addition to the end of all prior loaded Changesets.</p> </li>
    /// <li> <p> <code>MODIFY</code> – Changeset is considered as a replacement to a specific prior ingested Changeset.</p> </li>
    /// </ul>
    pub fn change_type(&self) -> std::option::Option<&crate::types::ChangeType> {
        self.change_type.as_ref()
    }
    /// <p>Options that define the location of the data being ingested.</p>
    pub fn source_params(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.source_params.as_ref()
    }
    /// <p>Options that define the structure of the source file(s).</p>
    pub fn format_params(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.format_params.as_ref()
    }
    /// <p>The timestamp at which the Changeset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn create_time(&self) -> i64 {
        self.create_time
    }
    /// <p>Status of the Changeset ingestion.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – Changeset is pending creation.</p> </li>
    /// <li> <p> <code>FAILED</code> – Changeset creation has failed.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – Changeset creation has succeeded.</p> </li>
    /// <li> <p> <code>RUNNING</code> – Changeset creation is running.</p> </li>
    /// <li> <p> <code>STOP_REQUESTED</code> – User requested Changeset creation to stop.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::IngestionStatus> {
        self.status.as_ref()
    }
    /// <p>The structure with error messages.</p>
    pub fn error_info(&self) -> std::option::Option<&crate::types::ChangesetErrorInfo> {
        self.error_info.as_ref()
    }
    /// <p>Time until which the Changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn active_until_timestamp(&self) -> std::option::Option<i64> {
        self.active_until_timestamp
    }
    /// <p>Beginning time from which the Changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn active_from_timestamp(&self) -> std::option::Option<i64> {
        self.active_from_timestamp
    }
    /// <p>The unique identifier of the Changeset that is updated.</p>
    pub fn updates_changeset_id(&self) -> std::option::Option<&str> {
        self.updates_changeset_id.as_deref()
    }
    /// <p>The unique identifier of the updated Changeset.</p>
    pub fn updated_by_changeset_id(&self) -> std::option::Option<&str> {
        self.updated_by_changeset_id.as_deref()
    }
}
impl ChangesetSummary {
    /// Creates a new builder-style object to manufacture [`ChangesetSummary`](crate::types::ChangesetSummary).
    pub fn builder() -> crate::types::builders::ChangesetSummaryBuilder {
        crate::types::builders::ChangesetSummaryBuilder::default()
    }
}

/// A builder for [`ChangesetSummary`](crate::types::ChangesetSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChangesetSummaryBuilder {
    pub(crate) changeset_id: std::option::Option<std::string::String>,
    pub(crate) changeset_arn: std::option::Option<std::string::String>,
    pub(crate) dataset_id: std::option::Option<std::string::String>,
    pub(crate) change_type: std::option::Option<crate::types::ChangeType>,
    pub(crate) source_params:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) format_params:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) create_time: std::option::Option<i64>,
    pub(crate) status: std::option::Option<crate::types::IngestionStatus>,
    pub(crate) error_info: std::option::Option<crate::types::ChangesetErrorInfo>,
    pub(crate) active_until_timestamp: std::option::Option<i64>,
    pub(crate) active_from_timestamp: std::option::Option<i64>,
    pub(crate) updates_changeset_id: std::option::Option<std::string::String>,
    pub(crate) updated_by_changeset_id: std::option::Option<std::string::String>,
}
impl ChangesetSummaryBuilder {
    /// <p>The unique identifier for a Changeset.</p>
    pub fn changeset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.changeset_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for a Changeset.</p>
    pub fn set_changeset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.changeset_id = input;
        self
    }
    /// <p>The ARN identifier of the Changeset.</p>
    pub fn changeset_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.changeset_arn = Some(input.into());
        self
    }
    /// <p>The ARN identifier of the Changeset.</p>
    pub fn set_changeset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.changeset_arn = input;
        self
    }
    /// <p>The unique identifier for the FinSpace Dataset in which the Changeset is created.</p>
    pub fn dataset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the FinSpace Dataset in which the Changeset is created.</p>
    pub fn set_dataset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_id = input;
        self
    }
    /// <p>Type that indicates how a Changeset is applied to a Dataset.</p>
    /// <ul>
    /// <li> <p> <code>REPLACE</code> – Changeset is considered as a replacement to all prior loaded Changesets.</p> </li>
    /// <li> <p> <code>APPEND</code> – Changeset is considered as an addition to the end of all prior loaded Changesets.</p> </li>
    /// <li> <p> <code>MODIFY</code> – Changeset is considered as a replacement to a specific prior ingested Changeset.</p> </li>
    /// </ul>
    pub fn change_type(mut self, input: crate::types::ChangeType) -> Self {
        self.change_type = Some(input);
        self
    }
    /// <p>Type that indicates how a Changeset is applied to a Dataset.</p>
    /// <ul>
    /// <li> <p> <code>REPLACE</code> – Changeset is considered as a replacement to all prior loaded Changesets.</p> </li>
    /// <li> <p> <code>APPEND</code> – Changeset is considered as an addition to the end of all prior loaded Changesets.</p> </li>
    /// <li> <p> <code>MODIFY</code> – Changeset is considered as a replacement to a specific prior ingested Changeset.</p> </li>
    /// </ul>
    pub fn set_change_type(mut self, input: std::option::Option<crate::types::ChangeType>) -> Self {
        self.change_type = input;
        self
    }
    /// Adds a key-value pair to `source_params`.
    ///
    /// To override the contents of this collection use [`set_source_params`](Self::set_source_params).
    ///
    /// <p>Options that define the location of the data being ingested.</p>
    pub fn source_params(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.source_params.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.source_params = Some(hash_map);
        self
    }
    /// <p>Options that define the location of the data being ingested.</p>
    pub fn set_source_params(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.source_params = input;
        self
    }
    /// Adds a key-value pair to `format_params`.
    ///
    /// To override the contents of this collection use [`set_format_params`](Self::set_format_params).
    ///
    /// <p>Options that define the structure of the source file(s).</p>
    pub fn format_params(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.format_params.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.format_params = Some(hash_map);
        self
    }
    /// <p>Options that define the structure of the source file(s).</p>
    pub fn set_format_params(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.format_params = input;
        self
    }
    /// <p>The timestamp at which the Changeset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn create_time(mut self, input: i64) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p>The timestamp at which the Changeset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_create_time(mut self, input: std::option::Option<i64>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>Status of the Changeset ingestion.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – Changeset is pending creation.</p> </li>
    /// <li> <p> <code>FAILED</code> – Changeset creation has failed.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – Changeset creation has succeeded.</p> </li>
    /// <li> <p> <code>RUNNING</code> – Changeset creation is running.</p> </li>
    /// <li> <p> <code>STOP_REQUESTED</code> – User requested Changeset creation to stop.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::IngestionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Status of the Changeset ingestion.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – Changeset is pending creation.</p> </li>
    /// <li> <p> <code>FAILED</code> – Changeset creation has failed.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – Changeset creation has succeeded.</p> </li>
    /// <li> <p> <code>RUNNING</code> – Changeset creation is running.</p> </li>
    /// <li> <p> <code>STOP_REQUESTED</code> – User requested Changeset creation to stop.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::IngestionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The structure with error messages.</p>
    pub fn error_info(mut self, input: crate::types::ChangesetErrorInfo) -> Self {
        self.error_info = Some(input);
        self
    }
    /// <p>The structure with error messages.</p>
    pub fn set_error_info(
        mut self,
        input: std::option::Option<crate::types::ChangesetErrorInfo>,
    ) -> Self {
        self.error_info = input;
        self
    }
    /// <p>Time until which the Changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn active_until_timestamp(mut self, input: i64) -> Self {
        self.active_until_timestamp = Some(input);
        self
    }
    /// <p>Time until which the Changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_active_until_timestamp(mut self, input: std::option::Option<i64>) -> Self {
        self.active_until_timestamp = input;
        self
    }
    /// <p>Beginning time from which the Changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn active_from_timestamp(mut self, input: i64) -> Self {
        self.active_from_timestamp = Some(input);
        self
    }
    /// <p>Beginning time from which the Changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_active_from_timestamp(mut self, input: std::option::Option<i64>) -> Self {
        self.active_from_timestamp = input;
        self
    }
    /// <p>The unique identifier of the Changeset that is updated.</p>
    pub fn updates_changeset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.updates_changeset_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the Changeset that is updated.</p>
    pub fn set_updates_changeset_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.updates_changeset_id = input;
        self
    }
    /// <p>The unique identifier of the updated Changeset.</p>
    pub fn updated_by_changeset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.updated_by_changeset_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the updated Changeset.</p>
    pub fn set_updated_by_changeset_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.updated_by_changeset_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ChangesetSummary`](crate::types::ChangesetSummary).
    pub fn build(self) -> crate::types::ChangesetSummary {
        crate::types::ChangesetSummary {
            changeset_id: self.changeset_id,
            changeset_arn: self.changeset_arn,
            dataset_id: self.dataset_id,
            change_type: self.change_type,
            source_params: self.source_params,
            format_params: self.format_params,
            create_time: self.create_time.unwrap_or_default(),
            status: self.status,
            error_info: self.error_info,
            active_until_timestamp: self.active_until_timestamp,
            active_from_timestamp: self.active_from_timestamp,
            updates_changeset_id: self.updates_changeset_id,
            updated_by_changeset_id: self.updated_by_changeset_id,
        }
    }
}
