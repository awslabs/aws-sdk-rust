// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Permission group parameters for Dataset permissions.</p>
/// <p>Here is an example of how you could specify the <code>PermissionGroupParams</code>:</p>
/// <p> <code> { "permissionGroupId": "0r6fCRtSTUk4XPfXQe3M0g", "datasetPermissions": [ {"permission": "ViewDatasetDetails"}, {"permission": "AddDatasetData"}, {"permission": "EditDatasetMetadata"}, {"permission": "DeleteDataset"} ] } </code> </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PermissionGroupParams {
    /// <p>The unique identifier for the <code>PermissionGroup</code>.</p>
    #[doc(hidden)]
    pub permission_group_id: std::option::Option<std::string::String>,
    /// <p>List of resource permissions.</p>
    #[doc(hidden)]
    pub dataset_permissions: std::option::Option<std::vec::Vec<crate::types::ResourcePermission>>,
}
impl PermissionGroupParams {
    /// <p>The unique identifier for the <code>PermissionGroup</code>.</p>
    pub fn permission_group_id(&self) -> std::option::Option<&str> {
        self.permission_group_id.as_deref()
    }
    /// <p>List of resource permissions.</p>
    pub fn dataset_permissions(&self) -> std::option::Option<&[crate::types::ResourcePermission]> {
        self.dataset_permissions.as_deref()
    }
}
impl PermissionGroupParams {
    /// Creates a new builder-style object to manufacture [`PermissionGroupParams`](crate::types::PermissionGroupParams).
    pub fn builder() -> crate::types::builders::PermissionGroupParamsBuilder {
        crate::types::builders::PermissionGroupParamsBuilder::default()
    }
}

/// A builder for [`PermissionGroupParams`](crate::types::PermissionGroupParams).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PermissionGroupParamsBuilder {
    pub(crate) permission_group_id: std::option::Option<std::string::String>,
    pub(crate) dataset_permissions:
        std::option::Option<std::vec::Vec<crate::types::ResourcePermission>>,
}
impl PermissionGroupParamsBuilder {
    /// <p>The unique identifier for the <code>PermissionGroup</code>.</p>
    pub fn permission_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.permission_group_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the <code>PermissionGroup</code>.</p>
    pub fn set_permission_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.permission_group_id = input;
        self
    }
    /// Appends an item to `dataset_permissions`.
    ///
    /// To override the contents of this collection use [`set_dataset_permissions`](Self::set_dataset_permissions).
    ///
    /// <p>List of resource permissions.</p>
    pub fn dataset_permissions(mut self, input: crate::types::ResourcePermission) -> Self {
        let mut v = self.dataset_permissions.unwrap_or_default();
        v.push(input);
        self.dataset_permissions = Some(v);
        self
    }
    /// <p>List of resource permissions.</p>
    pub fn set_dataset_permissions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourcePermission>>,
    ) -> Self {
        self.dataset_permissions = input;
        self
    }
    /// Consumes the builder and constructs a [`PermissionGroupParams`](crate::types::PermissionGroupParams).
    pub fn build(self) -> crate::types::PermissionGroupParams {
        crate::types::PermissionGroupParams {
            permission_group_id: self.permission_group_id,
            dataset_permissions: self.dataset_permissions,
        }
    }
}
