// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure for Dataset owner info.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DatasetOwnerInfo {
    /// <p>The name of the Dataset owner.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Phone number for the Dataset owner.</p>
    #[doc(hidden)]
    pub phone_number: std::option::Option<std::string::String>,
    /// <p>Email address for the Dataset owner.</p>
    #[doc(hidden)]
    pub email: std::option::Option<std::string::String>,
}
impl DatasetOwnerInfo {
    /// <p>The name of the Dataset owner.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Phone number for the Dataset owner.</p>
    pub fn phone_number(&self) -> std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>Email address for the Dataset owner.</p>
    pub fn email(&self) -> std::option::Option<&str> {
        self.email.as_deref()
    }
}
impl std::fmt::Debug for DatasetOwnerInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DatasetOwnerInfo");
        formatter.field("name", &self.name);
        formatter.field("phone_number", &self.phone_number);
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl DatasetOwnerInfo {
    /// Creates a new builder-style object to manufacture [`DatasetOwnerInfo`](crate::types::DatasetOwnerInfo).
    pub fn builder() -> crate::types::builders::DatasetOwnerInfoBuilder {
        crate::types::builders::DatasetOwnerInfoBuilder::default()
    }
}

/// A builder for [`DatasetOwnerInfo`](crate::types::DatasetOwnerInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct DatasetOwnerInfoBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) phone_number: std::option::Option<std::string::String>,
    pub(crate) email: std::option::Option<std::string::String>,
}
impl DatasetOwnerInfoBuilder {
    /// <p>The name of the Dataset owner.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the Dataset owner.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Phone number for the Dataset owner.</p>
    pub fn phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number = Some(input.into());
        self
    }
    /// <p>Phone number for the Dataset owner.</p>
    pub fn set_phone_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>Email address for the Dataset owner.</p>
    pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
        self.email = Some(input.into());
        self
    }
    /// <p>Email address for the Dataset owner.</p>
    pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// Consumes the builder and constructs a [`DatasetOwnerInfo`](crate::types::DatasetOwnerInfo).
    pub fn build(self) -> crate::types::DatasetOwnerInfo {
        crate::types::DatasetOwnerInfo {
            name: self.name,
            phone_number: self.phone_number,
            email: self.email,
        }
    }
}
impl std::fmt::Debug for DatasetOwnerInfoBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DatasetOwnerInfoBuilder");
        formatter.field("name", &self.name);
        formatter.field("phone_number", &self.phone_number);
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
