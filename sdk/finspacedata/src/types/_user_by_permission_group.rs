// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure of a user account associated with a permission group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UserByPermissionGroup {
    /// <p>The unique identifier for the user.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The current status of the user account. </p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> – The user account creation is in progress.</p> </li>
    /// <li> <p> <code>ENABLED</code> – The user account is created and is currently active.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user account is currently inactive.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::UserStatus>,
    /// <p>The first name of the user.</p>
    #[doc(hidden)]
    pub first_name: std::option::Option<std::string::String>,
    /// <p>The last name of the user.</p>
    #[doc(hidden)]
    pub last_name: std::option::Option<std::string::String>,
    /// <p>The email address of the user. The email address serves as a unique identifier for each user and cannot be changed after it's created.</p>
    #[doc(hidden)]
    pub email_address: std::option::Option<std::string::String>,
    /// <p> Indicates the type of user.</p>
    /// <ul>
    /// <li> <p> <code>SUPER_USER</code> – A user with permission to all the functionality and data in FinSpace.</p> </li>
    /// <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::UserType>,
    /// <p>Indicates whether the user can access FinSpace API operations.</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> – The user has permissions to use the API operations.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user does not have permissions to use any API operations.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub api_access: std::option::Option<crate::types::ApiAccess>,
    /// <p>The IAM ARN identifier that is attached to FinSpace API calls.</p>
    #[doc(hidden)]
    pub api_access_principal_arn: std::option::Option<std::string::String>,
    /// <p>Indicates the status of the user account within a permission group.</p>
    /// <ul>
    /// <li> <p> <code>ADDITION_IN_PROGRESS</code> – The user account is currently being added to the permission group.</p> </li>
    /// <li> <p> <code>ADDITION_SUCCESS</code> – The user account is successfully added to the permission group.</p> </li>
    /// <li> <p> <code>REMOVAL_IN_PROGRESS</code> – The user is currently being removed from the permission group.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub membership_status: std::option::Option<crate::types::PermissionGroupMembershipStatus>,
}
impl UserByPermissionGroup {
    /// <p>The unique identifier for the user.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The current status of the user account. </p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> – The user account creation is in progress.</p> </li>
    /// <li> <p> <code>ENABLED</code> – The user account is created and is currently active.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user account is currently inactive.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::UserStatus> {
        self.status.as_ref()
    }
    /// <p>The first name of the user.</p>
    pub fn first_name(&self) -> std::option::Option<&str> {
        self.first_name.as_deref()
    }
    /// <p>The last name of the user.</p>
    pub fn last_name(&self) -> std::option::Option<&str> {
        self.last_name.as_deref()
    }
    /// <p>The email address of the user. The email address serves as a unique identifier for each user and cannot be changed after it's created.</p>
    pub fn email_address(&self) -> std::option::Option<&str> {
        self.email_address.as_deref()
    }
    /// <p> Indicates the type of user.</p>
    /// <ul>
    /// <li> <p> <code>SUPER_USER</code> – A user with permission to all the functionality and data in FinSpace.</p> </li>
    /// <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&crate::types::UserType> {
        self.r#type.as_ref()
    }
    /// <p>Indicates whether the user can access FinSpace API operations.</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> – The user has permissions to use the API operations.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user does not have permissions to use any API operations.</p> </li>
    /// </ul>
    pub fn api_access(&self) -> std::option::Option<&crate::types::ApiAccess> {
        self.api_access.as_ref()
    }
    /// <p>The IAM ARN identifier that is attached to FinSpace API calls.</p>
    pub fn api_access_principal_arn(&self) -> std::option::Option<&str> {
        self.api_access_principal_arn.as_deref()
    }
    /// <p>Indicates the status of the user account within a permission group.</p>
    /// <ul>
    /// <li> <p> <code>ADDITION_IN_PROGRESS</code> – The user account is currently being added to the permission group.</p> </li>
    /// <li> <p> <code>ADDITION_SUCCESS</code> – The user account is successfully added to the permission group.</p> </li>
    /// <li> <p> <code>REMOVAL_IN_PROGRESS</code> – The user is currently being removed from the permission group.</p> </li>
    /// </ul>
    pub fn membership_status(
        &self,
    ) -> std::option::Option<&crate::types::PermissionGroupMembershipStatus> {
        self.membership_status.as_ref()
    }
}
impl std::fmt::Debug for UserByPermissionGroup {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UserByPermissionGroup");
        formatter.field("user_id", &self.user_id);
        formatter.field("status", &self.status);
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("api_access", &self.api_access);
        formatter.field("api_access_principal_arn", &self.api_access_principal_arn);
        formatter.field("membership_status", &self.membership_status);
        formatter.finish()
    }
}
impl UserByPermissionGroup {
    /// Creates a new builder-style object to manufacture [`UserByPermissionGroup`](crate::types::UserByPermissionGroup).
    pub fn builder() -> crate::types::builders::UserByPermissionGroupBuilder {
        crate::types::builders::UserByPermissionGroupBuilder::default()
    }
}

/// A builder for [`UserByPermissionGroup`](crate::types::UserByPermissionGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UserByPermissionGroupBuilder {
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::UserStatus>,
    pub(crate) first_name: std::option::Option<std::string::String>,
    pub(crate) last_name: std::option::Option<std::string::String>,
    pub(crate) email_address: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::UserType>,
    pub(crate) api_access: std::option::Option<crate::types::ApiAccess>,
    pub(crate) api_access_principal_arn: std::option::Option<std::string::String>,
    pub(crate) membership_status:
        std::option::Option<crate::types::PermissionGroupMembershipStatus>,
}
impl UserByPermissionGroupBuilder {
    /// <p>The unique identifier for the user.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the user.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The current status of the user account. </p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> – The user account creation is in progress.</p> </li>
    /// <li> <p> <code>ENABLED</code> – The user account is created and is currently active.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user account is currently inactive.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::UserStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the user account. </p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> – The user account creation is in progress.</p> </li>
    /// <li> <p> <code>ENABLED</code> – The user account is created and is currently active.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user account is currently inactive.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::UserStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The first name of the user.</p>
    pub fn first_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.first_name = Some(input.into());
        self
    }
    /// <p>The first name of the user.</p>
    pub fn set_first_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.first_name = input;
        self
    }
    /// <p>The last name of the user.</p>
    pub fn last_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_name = Some(input.into());
        self
    }
    /// <p>The last name of the user.</p>
    pub fn set_last_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_name = input;
        self
    }
    /// <p>The email address of the user. The email address serves as a unique identifier for each user and cannot be changed after it's created.</p>
    pub fn email_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.email_address = Some(input.into());
        self
    }
    /// <p>The email address of the user. The email address serves as a unique identifier for each user and cannot be changed after it's created.</p>
    pub fn set_email_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p> Indicates the type of user.</p>
    /// <ul>
    /// <li> <p> <code>SUPER_USER</code> – A user with permission to all the functionality and data in FinSpace.</p> </li>
    /// <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::UserType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p> Indicates the type of user.</p>
    /// <ul>
    /// <li> <p> <code>SUPER_USER</code> – A user with permission to all the functionality and data in FinSpace.</p> </li>
    /// <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<crate::types::UserType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Indicates whether the user can access FinSpace API operations.</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> – The user has permissions to use the API operations.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user does not have permissions to use any API operations.</p> </li>
    /// </ul>
    pub fn api_access(mut self, input: crate::types::ApiAccess) -> Self {
        self.api_access = Some(input);
        self
    }
    /// <p>Indicates whether the user can access FinSpace API operations.</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> – The user has permissions to use the API operations.</p> </li>
    /// <li> <p> <code>DISABLED</code> – The user does not have permissions to use any API operations.</p> </li>
    /// </ul>
    pub fn set_api_access(mut self, input: std::option::Option<crate::types::ApiAccess>) -> Self {
        self.api_access = input;
        self
    }
    /// <p>The IAM ARN identifier that is attached to FinSpace API calls.</p>
    pub fn api_access_principal_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.api_access_principal_arn = Some(input.into());
        self
    }
    /// <p>The IAM ARN identifier that is attached to FinSpace API calls.</p>
    pub fn set_api_access_principal_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.api_access_principal_arn = input;
        self
    }
    /// <p>Indicates the status of the user account within a permission group.</p>
    /// <ul>
    /// <li> <p> <code>ADDITION_IN_PROGRESS</code> – The user account is currently being added to the permission group.</p> </li>
    /// <li> <p> <code>ADDITION_SUCCESS</code> – The user account is successfully added to the permission group.</p> </li>
    /// <li> <p> <code>REMOVAL_IN_PROGRESS</code> – The user is currently being removed from the permission group.</p> </li>
    /// </ul>
    pub fn membership_status(
        mut self,
        input: crate::types::PermissionGroupMembershipStatus,
    ) -> Self {
        self.membership_status = Some(input);
        self
    }
    /// <p>Indicates the status of the user account within a permission group.</p>
    /// <ul>
    /// <li> <p> <code>ADDITION_IN_PROGRESS</code> – The user account is currently being added to the permission group.</p> </li>
    /// <li> <p> <code>ADDITION_SUCCESS</code> – The user account is successfully added to the permission group.</p> </li>
    /// <li> <p> <code>REMOVAL_IN_PROGRESS</code> – The user is currently being removed from the permission group.</p> </li>
    /// </ul>
    pub fn set_membership_status(
        mut self,
        input: std::option::Option<crate::types::PermissionGroupMembershipStatus>,
    ) -> Self {
        self.membership_status = input;
        self
    }
    /// Consumes the builder and constructs a [`UserByPermissionGroup`](crate::types::UserByPermissionGroup).
    pub fn build(self) -> crate::types::UserByPermissionGroup {
        crate::types::UserByPermissionGroup {
            user_id: self.user_id,
            status: self.status,
            first_name: self.first_name,
            last_name: self.last_name,
            email_address: self.email_address,
            r#type: self.r#type,
            api_access: self.api_access,
            api_access_principal_arn: self.api_access_principal_arn,
            membership_status: self.membership_status,
        }
    }
}
impl std::fmt::Debug for UserByPermissionGroupBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UserByPermissionGroupBuilder");
        formatter.field("user_id", &self.user_id);
        formatter.field("status", &self.status);
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("api_access", &self.api_access);
        formatter.field("api_access_principal_arn", &self.api_access_principal_arn);
        formatter.field("membership_status", &self.membership_status);
        formatter.finish()
    }
}
