// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_data_view::_create_data_view_output::CreateDataViewOutputBuilder;

pub use crate::operation::create_data_view::_create_data_view_input::CreateDataViewInputBuilder;

impl crate::operation::create_data_view::builders::CreateDataViewInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_data_view::CreateDataViewOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_data_view::CreateDataViewError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_data_view();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateDataView`.
///
/// <p>Creates a Dataview for a Dataset.</p>
#[deprecated(note = "This method will be discontinued.")]
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateDataViewFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_data_view::builders::CreateDataViewInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_data_view::CreateDataViewOutput,
        crate::operation::create_data_view::CreateDataViewError,
    > for CreateDataViewFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_data_view::CreateDataViewOutput,
            crate::operation::create_data_view::CreateDataViewError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateDataViewFluentBuilder {
    /// Creates a new `CreateDataView`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateDataView as a reference.
    pub fn as_input(&self) -> &crate::operation::create_data_view::builders::CreateDataViewInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_data_view::CreateDataViewOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_data_view::CreateDataViewError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_data_view::CreateDataView::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_data_view::CreateDataView::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_data_view::CreateDataViewOutput,
        crate::operation::create_data_view::CreateDataViewError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The unique Dataset identifier that is used to create a Dataview.</p>
    pub fn dataset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.dataset_id(input.into());
        self
    }
    /// <p>The unique Dataset identifier that is used to create a Dataview.</p>
    pub fn set_dataset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_dataset_id(input);
        self
    }
    /// <p>The unique Dataset identifier that is used to create a Dataview.</p>
    pub fn get_dataset_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_dataset_id()
    }
    /// <p>Flag to indicate Dataview should be updated automatically.</p>
    pub fn auto_update(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_update(input);
        self
    }
    /// <p>Flag to indicate Dataview should be updated automatically.</p>
    pub fn set_auto_update(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_update(input);
        self
    }
    /// <p>Flag to indicate Dataview should be updated automatically.</p>
    pub fn get_auto_update(&self) -> &::std::option::Option<bool> {
        self.inner.get_auto_update()
    }
    ///
    /// Appends an item to `sortColumns`.
    ///
    /// To override the contents of this collection use [`set_sort_columns`](Self::set_sort_columns).
    ///
    /// <p>Columns to be used for sorting the data.</p>
    pub fn sort_columns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.sort_columns(input.into());
        self
    }
    /// <p>Columns to be used for sorting the data.</p>
    pub fn set_sort_columns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_sort_columns(input);
        self
    }
    /// <p>Columns to be used for sorting the data.</p>
    pub fn get_sort_columns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_sort_columns()
    }
    ///
    /// Appends an item to `partitionColumns`.
    ///
    /// To override the contents of this collection use [`set_partition_columns`](Self::set_partition_columns).
    ///
    /// <p>Ordered set of column names used to partition data.</p>
    pub fn partition_columns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.partition_columns(input.into());
        self
    }
    /// <p>Ordered set of column names used to partition data.</p>
    pub fn set_partition_columns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_partition_columns(input);
        self
    }
    /// <p>Ordered set of column names used to partition data.</p>
    pub fn get_partition_columns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_partition_columns()
    }
    /// <p>Beginning time to use for the Dataview. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn as_of_timestamp(mut self, input: i64) -> Self {
        self.inner = self.inner.as_of_timestamp(input);
        self
    }
    /// <p>Beginning time to use for the Dataview. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_as_of_timestamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_as_of_timestamp(input);
        self
    }
    /// <p>Beginning time to use for the Dataview. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn get_as_of_timestamp(&self) -> &::std::option::Option<i64> {
        self.inner.get_as_of_timestamp()
    }
    /// <p>Options that define the destination type for the Dataview.</p>
    pub fn destination_type_params(mut self, input: crate::types::DataViewDestinationTypeParams) -> Self {
        self.inner = self.inner.destination_type_params(input);
        self
    }
    /// <p>Options that define the destination type for the Dataview.</p>
    pub fn set_destination_type_params(mut self, input: ::std::option::Option<crate::types::DataViewDestinationTypeParams>) -> Self {
        self.inner = self.inner.set_destination_type_params(input);
        self
    }
    /// <p>Options that define the destination type for the Dataview.</p>
    pub fn get_destination_type_params(&self) -> &::std::option::Option<crate::types::DataViewDestinationTypeParams> {
        self.inner.get_destination_type_params()
    }
}
