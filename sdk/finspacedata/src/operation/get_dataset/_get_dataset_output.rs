// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Response for the GetDataset operation
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDatasetOutput {
    /// <p>The unique identifier for a Dataset.</p>
    #[doc(hidden)]
    pub dataset_id: std::option::Option<std::string::String>,
    /// <p>The ARN identifier of the Dataset.</p>
    #[doc(hidden)]
    pub dataset_arn: std::option::Option<std::string::String>,
    /// <p>Display title for a Dataset.</p>
    #[doc(hidden)]
    pub dataset_title: std::option::Option<std::string::String>,
    /// <p>The format in which Dataset data is structured.</p>
    /// <ul>
    /// <li> <p> <code>TABULAR</code> – Data is structured in a tabular format.</p> </li>
    /// <li> <p> <code>NON_TABULAR</code> – Data is structured in a non-tabular format.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub kind: std::option::Option<crate::types::DatasetKind>,
    /// <p>A description of the Dataset.</p>
    #[doc(hidden)]
    pub dataset_description: std::option::Option<std::string::String>,
    /// <p>The timestamp at which the Dataset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    #[doc(hidden)]
    pub create_time: i64,
    /// <p>The last time that the Dataset was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    #[doc(hidden)]
    pub last_modified_time: i64,
    /// <p>Definition for a schema on a tabular Dataset.</p>
    #[doc(hidden)]
    pub schema_definition: std::option::Option<crate::types::SchemaUnion>,
    /// <p>The unique resource identifier for a Dataset.</p>
    #[doc(hidden)]
    pub alias: std::option::Option<std::string::String>,
    /// <p>Status of the Dataset creation.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – Dataset is pending creation.</p> </li>
    /// <li> <p> <code>FAILED</code> – Dataset creation has failed.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – Dataset creation has succeeded.</p> </li>
    /// <li> <p> <code>RUNNING</code> – Dataset creation is running.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::DatasetStatus>,
    _request_id: Option<String>,
}
impl GetDatasetOutput {
    /// <p>The unique identifier for a Dataset.</p>
    pub fn dataset_id(&self) -> std::option::Option<&str> {
        self.dataset_id.as_deref()
    }
    /// <p>The ARN identifier of the Dataset.</p>
    pub fn dataset_arn(&self) -> std::option::Option<&str> {
        self.dataset_arn.as_deref()
    }
    /// <p>Display title for a Dataset.</p>
    pub fn dataset_title(&self) -> std::option::Option<&str> {
        self.dataset_title.as_deref()
    }
    /// <p>The format in which Dataset data is structured.</p>
    /// <ul>
    /// <li> <p> <code>TABULAR</code> – Data is structured in a tabular format.</p> </li>
    /// <li> <p> <code>NON_TABULAR</code> – Data is structured in a non-tabular format.</p> </li>
    /// </ul>
    pub fn kind(&self) -> std::option::Option<&crate::types::DatasetKind> {
        self.kind.as_ref()
    }
    /// <p>A description of the Dataset.</p>
    pub fn dataset_description(&self) -> std::option::Option<&str> {
        self.dataset_description.as_deref()
    }
    /// <p>The timestamp at which the Dataset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn create_time(&self) -> i64 {
        self.create_time
    }
    /// <p>The last time that the Dataset was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn last_modified_time(&self) -> i64 {
        self.last_modified_time
    }
    /// <p>Definition for a schema on a tabular Dataset.</p>
    pub fn schema_definition(&self) -> std::option::Option<&crate::types::SchemaUnion> {
        self.schema_definition.as_ref()
    }
    /// <p>The unique resource identifier for a Dataset.</p>
    pub fn alias(&self) -> std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>Status of the Dataset creation.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – Dataset is pending creation.</p> </li>
    /// <li> <p> <code>FAILED</code> – Dataset creation has failed.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – Dataset creation has succeeded.</p> </li>
    /// <li> <p> <code>RUNNING</code> – Dataset creation is running.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::DatasetStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetDatasetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDatasetOutput {
    /// Creates a new builder-style object to manufacture [`GetDatasetOutput`](crate::operation::get_dataset::GetDatasetOutput).
    pub fn builder() -> crate::operation::get_dataset::builders::GetDatasetOutputBuilder {
        crate::operation::get_dataset::builders::GetDatasetOutputBuilder::default()
    }
}

/// A builder for [`GetDatasetOutput`](crate::operation::get_dataset::GetDatasetOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDatasetOutputBuilder {
    pub(crate) dataset_id: std::option::Option<std::string::String>,
    pub(crate) dataset_arn: std::option::Option<std::string::String>,
    pub(crate) dataset_title: std::option::Option<std::string::String>,
    pub(crate) kind: std::option::Option<crate::types::DatasetKind>,
    pub(crate) dataset_description: std::option::Option<std::string::String>,
    pub(crate) create_time: std::option::Option<i64>,
    pub(crate) last_modified_time: std::option::Option<i64>,
    pub(crate) schema_definition: std::option::Option<crate::types::SchemaUnion>,
    pub(crate) alias: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::DatasetStatus>,
    _request_id: Option<String>,
}
impl GetDatasetOutputBuilder {
    /// <p>The unique identifier for a Dataset.</p>
    pub fn dataset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for a Dataset.</p>
    pub fn set_dataset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_id = input;
        self
    }
    /// <p>The ARN identifier of the Dataset.</p>
    pub fn dataset_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_arn = Some(input.into());
        self
    }
    /// <p>The ARN identifier of the Dataset.</p>
    pub fn set_dataset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_arn = input;
        self
    }
    /// <p>Display title for a Dataset.</p>
    pub fn dataset_title(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_title = Some(input.into());
        self
    }
    /// <p>Display title for a Dataset.</p>
    pub fn set_dataset_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_title = input;
        self
    }
    /// <p>The format in which Dataset data is structured.</p>
    /// <ul>
    /// <li> <p> <code>TABULAR</code> – Data is structured in a tabular format.</p> </li>
    /// <li> <p> <code>NON_TABULAR</code> – Data is structured in a non-tabular format.</p> </li>
    /// </ul>
    pub fn kind(mut self, input: crate::types::DatasetKind) -> Self {
        self.kind = Some(input);
        self
    }
    /// <p>The format in which Dataset data is structured.</p>
    /// <ul>
    /// <li> <p> <code>TABULAR</code> – Data is structured in a tabular format.</p> </li>
    /// <li> <p> <code>NON_TABULAR</code> – Data is structured in a non-tabular format.</p> </li>
    /// </ul>
    pub fn set_kind(mut self, input: std::option::Option<crate::types::DatasetKind>) -> Self {
        self.kind = input;
        self
    }
    /// <p>A description of the Dataset.</p>
    pub fn dataset_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_description = Some(input.into());
        self
    }
    /// <p>A description of the Dataset.</p>
    pub fn set_dataset_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dataset_description = input;
        self
    }
    /// <p>The timestamp at which the Dataset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn create_time(mut self, input: i64) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p>The timestamp at which the Dataset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_create_time(mut self, input: std::option::Option<i64>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The last time that the Dataset was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn last_modified_time(mut self, input: i64) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The last time that the Dataset was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_last_modified_time(mut self, input: std::option::Option<i64>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>Definition for a schema on a tabular Dataset.</p>
    pub fn schema_definition(mut self, input: crate::types::SchemaUnion) -> Self {
        self.schema_definition = Some(input);
        self
    }
    /// <p>Definition for a schema on a tabular Dataset.</p>
    pub fn set_schema_definition(
        mut self,
        input: std::option::Option<crate::types::SchemaUnion>,
    ) -> Self {
        self.schema_definition = input;
        self
    }
    /// <p>The unique resource identifier for a Dataset.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.alias = Some(input.into());
        self
    }
    /// <p>The unique resource identifier for a Dataset.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>Status of the Dataset creation.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – Dataset is pending creation.</p> </li>
    /// <li> <p> <code>FAILED</code> – Dataset creation has failed.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – Dataset creation has succeeded.</p> </li>
    /// <li> <p> <code>RUNNING</code> – Dataset creation is running.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::DatasetStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Status of the Dataset creation.</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> – Dataset is pending creation.</p> </li>
    /// <li> <p> <code>FAILED</code> – Dataset creation has failed.</p> </li>
    /// <li> <p> <code>SUCCESS</code> – Dataset creation has succeeded.</p> </li>
    /// <li> <p> <code>RUNNING</code> – Dataset creation is running.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::DatasetStatus>) -> Self {
        self.status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDatasetOutput`](crate::operation::get_dataset::GetDatasetOutput).
    pub fn build(self) -> crate::operation::get_dataset::GetDatasetOutput {
        crate::operation::get_dataset::GetDatasetOutput {
            dataset_id: self.dataset_id,
            dataset_arn: self.dataset_arn,
            dataset_title: self.dataset_title,
            kind: self.kind,
            dataset_description: self.dataset_description,
            create_time: self.create_time.unwrap_or_default(),
            last_modified_time: self.last_modified_time.unwrap_or_default(),
            schema_definition: self.schema_definition,
            alias: self.alias,
            status: self.status,
            _request_id: self._request_id,
        }
    }
}
