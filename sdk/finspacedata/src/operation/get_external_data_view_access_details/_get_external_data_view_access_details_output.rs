// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetExternalDataViewAccessDetailsOutput {
    /// <p>The credentials required to access the external Dataview from the S3 location.</p>
    #[doc(hidden)]
    pub credentials: std::option::Option<crate::types::AwsCredentials>,
    /// <p>The location where the external Dataview is stored.</p>
    #[doc(hidden)]
    pub s3_location: std::option::Option<crate::types::S3Location>,
    _request_id: Option<String>,
}
impl GetExternalDataViewAccessDetailsOutput {
    /// <p>The credentials required to access the external Dataview from the S3 location.</p>
    pub fn credentials(&self) -> std::option::Option<&crate::types::AwsCredentials> {
        self.credentials.as_ref()
    }
    /// <p>The location where the external Dataview is stored.</p>
    pub fn s3_location(&self) -> std::option::Option<&crate::types::S3Location> {
        self.s3_location.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetExternalDataViewAccessDetailsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetExternalDataViewAccessDetailsOutput {
    /// Creates a new builder-style object to manufacture [`GetExternalDataViewAccessDetailsOutput`](crate::operation::get_external_data_view_access_details::GetExternalDataViewAccessDetailsOutput).
    pub fn builder() -> crate::operation::get_external_data_view_access_details::builders::GetExternalDataViewAccessDetailsOutputBuilder{
        crate::operation::get_external_data_view_access_details::builders::GetExternalDataViewAccessDetailsOutputBuilder::default()
    }
}

/// A builder for [`GetExternalDataViewAccessDetailsOutput`](crate::operation::get_external_data_view_access_details::GetExternalDataViewAccessDetailsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetExternalDataViewAccessDetailsOutputBuilder {
    pub(crate) credentials: std::option::Option<crate::types::AwsCredentials>,
    pub(crate) s3_location: std::option::Option<crate::types::S3Location>,
    _request_id: Option<String>,
}
impl GetExternalDataViewAccessDetailsOutputBuilder {
    /// <p>The credentials required to access the external Dataview from the S3 location.</p>
    pub fn credentials(mut self, input: crate::types::AwsCredentials) -> Self {
        self.credentials = Some(input);
        self
    }
    /// <p>The credentials required to access the external Dataview from the S3 location.</p>
    pub fn set_credentials(
        mut self,
        input: std::option::Option<crate::types::AwsCredentials>,
    ) -> Self {
        self.credentials = input;
        self
    }
    /// <p>The location where the external Dataview is stored.</p>
    pub fn s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.s3_location = Some(input);
        self
    }
    /// <p>The location where the external Dataview is stored.</p>
    pub fn set_s3_location(mut self, input: std::option::Option<crate::types::S3Location>) -> Self {
        self.s3_location = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetExternalDataViewAccessDetailsOutput`](crate::operation::get_external_data_view_access_details::GetExternalDataViewAccessDetailsOutput).
    pub fn build(self) -> crate::operation::get_external_data_view_access_details::GetExternalDataViewAccessDetailsOutput{
        crate::operation::get_external_data_view_access_details::GetExternalDataViewAccessDetailsOutput {
            credentials: self.credentials
            ,
            s3_location: self.s3_location
            ,
            _request_id: self._request_id,
        }
    }
}
