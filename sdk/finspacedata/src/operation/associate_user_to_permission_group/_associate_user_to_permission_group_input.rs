// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateUserToPermissionGroupInput {
    /// <p>The unique identifier for the permission group.</p>
    #[doc(hidden)]
    pub permission_group_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the user.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl AssociateUserToPermissionGroupInput {
    /// <p>The unique identifier for the permission group.</p>
    pub fn permission_group_id(&self) -> std::option::Option<&str> {
        self.permission_group_id.as_deref()
    }
    /// <p>The unique identifier for the user.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl AssociateUserToPermissionGroupInput {
    /// Creates a new builder-style object to manufacture [`AssociateUserToPermissionGroupInput`](crate::operation::associate_user_to_permission_group::AssociateUserToPermissionGroupInput).
    pub fn builder() -> crate::operation::associate_user_to_permission_group::builders::AssociateUserToPermissionGroupInputBuilder{
        crate::operation::associate_user_to_permission_group::builders::AssociateUserToPermissionGroupInputBuilder::default()
    }
}

/// A builder for [`AssociateUserToPermissionGroupInput`](crate::operation::associate_user_to_permission_group::AssociateUserToPermissionGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssociateUserToPermissionGroupInputBuilder {
    pub(crate) permission_group_id: std::option::Option<std::string::String>,
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl AssociateUserToPermissionGroupInputBuilder {
    /// <p>The unique identifier for the permission group.</p>
    pub fn permission_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.permission_group_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the permission group.</p>
    pub fn set_permission_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.permission_group_id = input;
        self
    }
    /// <p>The unique identifier for the user.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the user.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`AssociateUserToPermissionGroupInput`](crate::operation::associate_user_to_permission_group::AssociateUserToPermissionGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::associate_user_to_permission_group::AssociateUserToPermissionGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::associate_user_to_permission_group::AssociateUserToPermissionGroupInput {
                permission_group_id: self.permission_group_id
                ,
                user_id: self.user_id
                ,
                client_token: self.client_token
                ,
            }
        )
    }
}
