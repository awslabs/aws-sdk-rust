// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateUserToPermissionGroupOutput {
    /// <p>The returned status code of the response.</p>
    #[doc(hidden)]
    pub status_code: i32,
    _request_id: Option<String>,
}
impl AssociateUserToPermissionGroupOutput {
    /// <p>The returned status code of the response.</p>
    pub fn status_code(&self) -> i32 {
        self.status_code
    }
}
impl aws_http::request_id::RequestId for AssociateUserToPermissionGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociateUserToPermissionGroupOutput {
    /// Creates a new builder-style object to manufacture [`AssociateUserToPermissionGroupOutput`](crate::operation::associate_user_to_permission_group::AssociateUserToPermissionGroupOutput).
    pub fn builder() -> crate::operation::associate_user_to_permission_group::builders::AssociateUserToPermissionGroupOutputBuilder{
        crate::operation::associate_user_to_permission_group::builders::AssociateUserToPermissionGroupOutputBuilder::default()
    }
}

/// A builder for [`AssociateUserToPermissionGroupOutput`](crate::operation::associate_user_to_permission_group::AssociateUserToPermissionGroupOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssociateUserToPermissionGroupOutputBuilder {
    pub(crate) status_code: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl AssociateUserToPermissionGroupOutputBuilder {
    /// <p>The returned status code of the response.</p>
    pub fn status_code(mut self, input: i32) -> Self {
        self.status_code = Some(input);
        self
    }
    /// <p>The returned status code of the response.</p>
    pub fn set_status_code(mut self, input: std::option::Option<i32>) -> Self {
        self.status_code = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`AssociateUserToPermissionGroupOutput`](crate::operation::associate_user_to_permission_group::AssociateUserToPermissionGroupOutput).
    pub fn build(
        self,
    ) -> crate::operation::associate_user_to_permission_group::AssociateUserToPermissionGroupOutput
    {
        crate::operation::associate_user_to_permission_group::AssociateUserToPermissionGroupOutput {
            status_code: self.status_code.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
