// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetUserPasswordOutput {
    /// <p>The unique identifier of the user that a new password is generated for.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>A randomly generated temporary password for the requested user account. This password expires in 7 days.</p>
    #[doc(hidden)]
    pub temporary_password: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ResetUserPasswordOutput {
    /// <p>The unique identifier of the user that a new password is generated for.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>A randomly generated temporary password for the requested user account. This password expires in 7 days.</p>
    pub fn temporary_password(&self) -> std::option::Option<&str> {
        self.temporary_password.as_deref()
    }
}
impl std::fmt::Debug for ResetUserPasswordOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetUserPasswordOutput");
        formatter.field("user_id", &self.user_id);
        formatter.field("temporary_password", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for ResetUserPasswordOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ResetUserPasswordOutput {
    /// Creates a new builder-style object to manufacture [`ResetUserPasswordOutput`](crate::operation::reset_user_password::ResetUserPasswordOutput).
    pub fn builder(
    ) -> crate::operation::reset_user_password::builders::ResetUserPasswordOutputBuilder {
        crate::operation::reset_user_password::builders::ResetUserPasswordOutputBuilder::default()
    }
}

/// A builder for [`ResetUserPasswordOutput`](crate::operation::reset_user_password::ResetUserPasswordOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ResetUserPasswordOutputBuilder {
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) temporary_password: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ResetUserPasswordOutputBuilder {
    /// <p>The unique identifier of the user that a new password is generated for.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the user that a new password is generated for.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>A randomly generated temporary password for the requested user account. This password expires in 7 days.</p>
    pub fn temporary_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.temporary_password = Some(input.into());
        self
    }
    /// <p>A randomly generated temporary password for the requested user account. This password expires in 7 days.</p>
    pub fn set_temporary_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.temporary_password = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ResetUserPasswordOutput`](crate::operation::reset_user_password::ResetUserPasswordOutput).
    pub fn build(self) -> crate::operation::reset_user_password::ResetUserPasswordOutput {
        crate::operation::reset_user_password::ResetUserPasswordOutput {
            user_id: self.user_id,
            temporary_password: self.temporary_password,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for ResetUserPasswordOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetUserPasswordOutputBuilder");
        formatter.field("user_id", &self.user_id);
        formatter.field("temporary_password", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
