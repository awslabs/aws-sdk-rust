// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_dataset::_update_dataset_output::UpdateDatasetOutputBuilder;

pub use crate::operation::update_dataset::_update_dataset_input::UpdateDatasetInputBuilder;

/// Fluent builder constructing a request to `UpdateDataset`.
///
/// <p>Updates a FinSpace Dataset.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDatasetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_dataset::builders::UpdateDatasetInputBuilder,
}
impl UpdateDatasetFluentBuilder {
    /// Creates a new `UpdateDataset`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_dataset::UpdateDataset,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_dataset::UpdateDatasetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_dataset::UpdateDatasetOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_dataset::UpdateDatasetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The unique identifier for the Dataset to update.</p>
    pub fn dataset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.dataset_id(input.into());
        self
    }
    /// <p>The unique identifier for the Dataset to update.</p>
    pub fn set_dataset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_dataset_id(input);
        self
    }
    /// <p>A display title for the Dataset.</p>
    pub fn dataset_title(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.dataset_title(input.into());
        self
    }
    /// <p>A display title for the Dataset.</p>
    pub fn set_dataset_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_dataset_title(input);
        self
    }
    /// <p>The format in which the Dataset data is structured.</p>
    /// <ul>
    /// <li> <p> <code>TABULAR</code> – Data is structured in a tabular format.</p> </li>
    /// <li> <p> <code>NON_TABULAR</code> – Data is structured in a non-tabular format.</p> </li>
    /// </ul>
    pub fn kind(mut self, input: crate::types::DatasetKind) -> Self {
        self.inner = self.inner.kind(input);
        self
    }
    /// <p>The format in which the Dataset data is structured.</p>
    /// <ul>
    /// <li> <p> <code>TABULAR</code> – Data is structured in a tabular format.</p> </li>
    /// <li> <p> <code>NON_TABULAR</code> – Data is structured in a non-tabular format.</p> </li>
    /// </ul>
    pub fn set_kind(mut self, input: std::option::Option<crate::types::DatasetKind>) -> Self {
        self.inner = self.inner.set_kind(input);
        self
    }
    /// <p>A description for the Dataset.</p>
    pub fn dataset_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.dataset_description(input.into());
        self
    }
    /// <p>A description for the Dataset.</p>
    pub fn set_dataset_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_dataset_description(input);
        self
    }
    /// <p>The unique resource identifier for a Dataset.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alias(input.into());
        self
    }
    /// <p>The unique resource identifier for a Dataset.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alias(input);
        self
    }
    /// <p>Definition for a schema on a tabular Dataset.</p>
    pub fn schema_definition(mut self, input: crate::types::SchemaUnion) -> Self {
        self.inner = self.inner.schema_definition(input);
        self
    }
    /// <p>Definition for a schema on a tabular Dataset.</p>
    pub fn set_schema_definition(
        mut self,
        input: std::option::Option<crate::types::SchemaUnion>,
    ) -> Self {
        self.inner = self.inner.set_schema_definition(input);
        self
    }
}
