// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateUser`](crate::operation::create_user::builders::CreateUserFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`email_address(impl Into<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::email_address) / [`set_email_address(Option<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::set_email_address):<br>required: **true**<br><p>The email address of the user that you want to register. The email address serves as a uniquer identifier for each user and cannot be changed after it's created.</p><br>
    ///   - [`r#type(UserType)`](crate::operation::create_user::builders::CreateUserFluentBuilder::type) / [`set_type(Option<UserType>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::set_type):<br>required: **true**<br><p>The option to indicate the type of user. Use one of the following options to specify this parameter:</p>  <ul>   <li> <p> <code>SUPER_USER</code> – A user with permission to all the functionality and data in FinSpace.</p> </li>   <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li>  </ul><br>
    ///   - [`first_name(impl Into<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::first_name) / [`set_first_name(Option<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::set_first_name):<br>required: **false**<br><p>The first name of the user that you want to register.</p><br>
    ///   - [`last_name(impl Into<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::last_name) / [`set_last_name(Option<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::set_last_name):<br>required: **false**<br><p>The last name of the user that you want to register.</p><br>
    ///   - [`api_access(ApiAccess)`](crate::operation::create_user::builders::CreateUserFluentBuilder::api_access) / [`set_api_access(Option<ApiAccess>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::set_api_access):<br>required: **false**<br><p>The option to indicate whether the user can use the <code>GetProgrammaticAccessCredentials</code> API to obtain credentials that can then be used to access other FinSpace Data API operations.</p>  <ul>   <li> <p> <code>ENABLED</code> – The user has permissions to use the APIs.</p> </li>   <li> <p> <code>DISABLED</code> – The user does not have permissions to use any APIs.</p> </li>  </ul><br>
    ///   - [`api_access_principal_arn(impl Into<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::api_access_principal_arn) / [`set_api_access_principal_arn(Option<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::set_api_access_principal_arn):<br>required: **false**<br><p>The ARN identifier of an AWS user or role that is allowed to call the <code>GetProgrammaticAccessCredentials</code> API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::set_client_token):<br>required: **false**<br><p>A token that ensures idempotency. This token expires in 10 minutes.</p><br>
    /// - On success, responds with [`CreateUserOutput`](crate::operation::create_user::CreateUserOutput) with field(s):
    ///   - [`user_id(Option<String>)`](crate::operation::create_user::CreateUserOutput::user_id): <p>The unique identifier for the user.</p>
    /// - On failure, responds with [`SdkError<CreateUserError>`](crate::operation::create_user::CreateUserError)
    pub fn create_user(&self) -> crate::operation::create_user::builders::CreateUserFluentBuilder {
        crate::operation::create_user::builders::CreateUserFluentBuilder::new(self.handle.clone())
    }
}
