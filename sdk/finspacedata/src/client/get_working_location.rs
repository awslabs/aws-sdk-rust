// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetWorkingLocation`](crate::operation::get_working_location::builders::GetWorkingLocationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`location_type(LocationType)`](crate::operation::get_working_location::builders::GetWorkingLocationFluentBuilder::location_type) / [`set_location_type(Option<LocationType>)`](crate::operation::get_working_location::builders::GetWorkingLocationFluentBuilder::set_location_type):<br>required: **false**<br><p>Specify the type of the working location.</p>  <ul>   <li> <p> <code>SAGEMAKER</code> – Use the Amazon S3 location as a temporary location to store data content when working with FinSpace Notebooks that run on SageMaker studio.</p> </li>   <li> <p> <code>INGESTION</code> – Use the Amazon S3 location as a staging location to copy your data content and then use the location with the Changeset creation operation.</p> </li>  </ul><br>
    /// - On success, responds with [`GetWorkingLocationOutput`](crate::operation::get_working_location::GetWorkingLocationOutput) with field(s):
    ///   - [`s3_uri(Option<String>)`](crate::operation::get_working_location::GetWorkingLocationOutput::s3_uri): <p>Returns the Amazon S3 URI for the working location.</p>
    ///   - [`s3_path(Option<String>)`](crate::operation::get_working_location::GetWorkingLocationOutput::s3_path): <p>Returns the Amazon S3 Path for the working location.</p>
    ///   - [`s3_bucket(Option<String>)`](crate::operation::get_working_location::GetWorkingLocationOutput::s3_bucket): <p>Returns the Amazon S3 bucket name for the working location.</p>
    /// - On failure, responds with [`SdkError<GetWorkingLocationError>`](crate::operation::get_working_location::GetWorkingLocationError)
    pub fn get_working_location(&self) -> crate::operation::get_working_location::builders::GetWorkingLocationFluentBuilder {
        crate::operation::get_working_location::builders::GetWorkingLocationFluentBuilder::new(self.handle.clone())
    }
}
