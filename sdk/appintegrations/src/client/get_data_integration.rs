// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetDataIntegration`](crate::client::fluent_builders::GetDataIntegration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identifier(impl Into<String>)`](crate::client::fluent_builders::GetDataIntegration::identifier) / [`set_identifier(Option<String>)`](crate::client::fluent_builders::GetDataIntegration::set_identifier): <p>A unique identifier.</p>
    /// - On success, responds with [`GetDataIntegrationOutput`](crate::output::GetDataIntegrationOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::GetDataIntegrationOutput::arn): <p>The Amazon Resource Name (ARN) for the DataIntegration.</p>
    ///   - [`id(Option<String>)`](crate::output::GetDataIntegrationOutput::id): <p>A unique identifier.</p>
    ///   - [`name(Option<String>)`](crate::output::GetDataIntegrationOutput::name): <p>The name of the DataIntegration.</p>
    ///   - [`description(Option<String>)`](crate::output::GetDataIntegrationOutput::description): <p>The KMS key for the DataIntegration.</p>
    ///   - [`kms_key(Option<String>)`](crate::output::GetDataIntegrationOutput::kms_key): <p>The KMS key for the DataIntegration.</p>
    ///   - [`source_uri(Option<String>)`](crate::output::GetDataIntegrationOutput::source_uri): <p>The URI of the data source.</p>
    ///   - [`schedule_configuration(Option<ScheduleConfiguration>)`](crate::output::GetDataIntegrationOutput::schedule_configuration): <p>The name of the data and how often it should be pulled from the source.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetDataIntegrationOutput::tags): <p>One or more tags.</p>
    /// - On failure, responds with [`SdkError<GetDataIntegrationError>`](crate::error::GetDataIntegrationError)
    pub fn get_data_integration(&self) -> crate::client::fluent_builders::GetDataIntegration {
        crate::client::fluent_builders::GetDataIntegration::new(self.handle.clone())
    }
}
