// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CreateDataIntegration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_data_integration`](crate::client::Client::create_data_integration).
///
/// See [`crate::client::fluent_builders::CreateDataIntegration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDataIntegration {
    _private: (),
}
impl CreateDataIntegration {
    /// Creates a new builder-style object to manufacture [`CreateDataIntegrationInput`](crate::input::CreateDataIntegrationInput)
    pub fn builder() -> crate::input::create_data_integration_input::Builder {
        crate::input::create_data_integration_input::Builder::default()
    }
    /// Creates a new `CreateDataIntegration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateDataIntegration {
    type Output = std::result::Result<
        crate::output::CreateDataIntegrationOutput,
        crate::error::CreateDataIntegrationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_data_integration_error(response)
        } else {
            crate::operation_deser::parse_create_data_integration_response(response)
        }
    }
}

/// Operation shape for `CreateEventIntegration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_event_integration`](crate::client::Client::create_event_integration).
///
/// See [`crate::client::fluent_builders::CreateEventIntegration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEventIntegration {
    _private: (),
}
impl CreateEventIntegration {
    /// Creates a new builder-style object to manufacture [`CreateEventIntegrationInput`](crate::input::CreateEventIntegrationInput)
    pub fn builder() -> crate::input::create_event_integration_input::Builder {
        crate::input::create_event_integration_input::Builder::default()
    }
    /// Creates a new `CreateEventIntegration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateEventIntegration {
    type Output = std::result::Result<
        crate::output::CreateEventIntegrationOutput,
        crate::error::CreateEventIntegrationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_event_integration_error(response)
        } else {
            crate::operation_deser::parse_create_event_integration_response(response)
        }
    }
}

/// Operation shape for `DeleteDataIntegration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_data_integration`](crate::client::Client::delete_data_integration).
///
/// See [`crate::client::fluent_builders::DeleteDataIntegration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDataIntegration {
    _private: (),
}
impl DeleteDataIntegration {
    /// Creates a new builder-style object to manufacture [`DeleteDataIntegrationInput`](crate::input::DeleteDataIntegrationInput)
    pub fn builder() -> crate::input::delete_data_integration_input::Builder {
        crate::input::delete_data_integration_input::Builder::default()
    }
    /// Creates a new `DeleteDataIntegration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteDataIntegration {
    type Output = std::result::Result<
        crate::output::DeleteDataIntegrationOutput,
        crate::error::DeleteDataIntegrationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_data_integration_error(response)
        } else {
            crate::operation_deser::parse_delete_data_integration_response(response)
        }
    }
}

/// Operation shape for `DeleteEventIntegration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_event_integration`](crate::client::Client::delete_event_integration).
///
/// See [`crate::client::fluent_builders::DeleteEventIntegration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEventIntegration {
    _private: (),
}
impl DeleteEventIntegration {
    /// Creates a new builder-style object to manufacture [`DeleteEventIntegrationInput`](crate::input::DeleteEventIntegrationInput)
    pub fn builder() -> crate::input::delete_event_integration_input::Builder {
        crate::input::delete_event_integration_input::Builder::default()
    }
    /// Creates a new `DeleteEventIntegration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteEventIntegration {
    type Output = std::result::Result<
        crate::output::DeleteEventIntegrationOutput,
        crate::error::DeleteEventIntegrationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_event_integration_error(response)
        } else {
            crate::operation_deser::parse_delete_event_integration_response(response)
        }
    }
}

/// Operation shape for `GetDataIntegration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_data_integration`](crate::client::Client::get_data_integration).
///
/// See [`crate::client::fluent_builders::GetDataIntegration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDataIntegration {
    _private: (),
}
impl GetDataIntegration {
    /// Creates a new builder-style object to manufacture [`GetDataIntegrationInput`](crate::input::GetDataIntegrationInput)
    pub fn builder() -> crate::input::get_data_integration_input::Builder {
        crate::input::get_data_integration_input::Builder::default()
    }
    /// Creates a new `GetDataIntegration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetDataIntegration {
    type Output = std::result::Result<
        crate::output::GetDataIntegrationOutput,
        crate::error::GetDataIntegrationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_data_integration_error(response)
        } else {
            crate::operation_deser::parse_get_data_integration_response(response)
        }
    }
}

/// Operation shape for `GetEventIntegration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_event_integration`](crate::client::Client::get_event_integration).
///
/// See [`crate::client::fluent_builders::GetEventIntegration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEventIntegration {
    _private: (),
}
impl GetEventIntegration {
    /// Creates a new builder-style object to manufacture [`GetEventIntegrationInput`](crate::input::GetEventIntegrationInput)
    pub fn builder() -> crate::input::get_event_integration_input::Builder {
        crate::input::get_event_integration_input::Builder::default()
    }
    /// Creates a new `GetEventIntegration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetEventIntegration {
    type Output = std::result::Result<
        crate::output::GetEventIntegrationOutput,
        crate::error::GetEventIntegrationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_event_integration_error(response)
        } else {
            crate::operation_deser::parse_get_event_integration_response(response)
        }
    }
}

/// Operation shape for `ListDataIntegrationAssociations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_data_integration_associations`](crate::client::Client::list_data_integration_associations).
///
/// See [`crate::client::fluent_builders::ListDataIntegrationAssociations`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDataIntegrationAssociations {
    _private: (),
}
impl ListDataIntegrationAssociations {
    /// Creates a new builder-style object to manufacture [`ListDataIntegrationAssociationsInput`](crate::input::ListDataIntegrationAssociationsInput)
    pub fn builder() -> crate::input::list_data_integration_associations_input::Builder {
        crate::input::list_data_integration_associations_input::Builder::default()
    }
    /// Creates a new `ListDataIntegrationAssociations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListDataIntegrationAssociations {
    type Output = std::result::Result<
        crate::output::ListDataIntegrationAssociationsOutput,
        crate::error::ListDataIntegrationAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_data_integration_associations_error(response)
        } else {
            crate::operation_deser::parse_list_data_integration_associations_response(response)
        }
    }
}

/// Operation shape for `ListDataIntegrations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_data_integrations`](crate::client::Client::list_data_integrations).
///
/// See [`crate::client::fluent_builders::ListDataIntegrations`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDataIntegrations {
    _private: (),
}
impl ListDataIntegrations {
    /// Creates a new builder-style object to manufacture [`ListDataIntegrationsInput`](crate::input::ListDataIntegrationsInput)
    pub fn builder() -> crate::input::list_data_integrations_input::Builder {
        crate::input::list_data_integrations_input::Builder::default()
    }
    /// Creates a new `ListDataIntegrations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListDataIntegrations {
    type Output = std::result::Result<
        crate::output::ListDataIntegrationsOutput,
        crate::error::ListDataIntegrationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_data_integrations_error(response)
        } else {
            crate::operation_deser::parse_list_data_integrations_response(response)
        }
    }
}

/// Operation shape for `ListEventIntegrationAssociations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_event_integration_associations`](crate::client::Client::list_event_integration_associations).
///
/// See [`crate::client::fluent_builders::ListEventIntegrationAssociations`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEventIntegrationAssociations {
    _private: (),
}
impl ListEventIntegrationAssociations {
    /// Creates a new builder-style object to manufacture [`ListEventIntegrationAssociationsInput`](crate::input::ListEventIntegrationAssociationsInput)
    pub fn builder() -> crate::input::list_event_integration_associations_input::Builder {
        crate::input::list_event_integration_associations_input::Builder::default()
    }
    /// Creates a new `ListEventIntegrationAssociations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListEventIntegrationAssociations {
    type Output = std::result::Result<
        crate::output::ListEventIntegrationAssociationsOutput,
        crate::error::ListEventIntegrationAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_event_integration_associations_error(response)
        } else {
            crate::operation_deser::parse_list_event_integration_associations_response(response)
        }
    }
}

/// Operation shape for `ListEventIntegrations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_event_integrations`](crate::client::Client::list_event_integrations).
///
/// See [`crate::client::fluent_builders::ListEventIntegrations`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEventIntegrations {
    _private: (),
}
impl ListEventIntegrations {
    /// Creates a new builder-style object to manufacture [`ListEventIntegrationsInput`](crate::input::ListEventIntegrationsInput)
    pub fn builder() -> crate::input::list_event_integrations_input::Builder {
        crate::input::list_event_integrations_input::Builder::default()
    }
    /// Creates a new `ListEventIntegrations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListEventIntegrations {
    type Output = std::result::Result<
        crate::output::ListEventIntegrationsOutput,
        crate::error::ListEventIntegrationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_event_integrations_error(response)
        } else {
            crate::operation_deser::parse_list_event_integrations_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::Client::list_tags_for_resource).
///
/// See [`crate::client::fluent_builders::ListTagsForResource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::Client::tag_resource).
///
/// See [`crate::client::fluent_builders::TagResource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::Client::untag_resource).
///
/// See [`crate::client::fluent_builders::UntagResource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// Operation shape for `UpdateDataIntegration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_data_integration`](crate::client::Client::update_data_integration).
///
/// See [`crate::client::fluent_builders::UpdateDataIntegration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDataIntegration {
    _private: (),
}
impl UpdateDataIntegration {
    /// Creates a new builder-style object to manufacture [`UpdateDataIntegrationInput`](crate::input::UpdateDataIntegrationInput)
    pub fn builder() -> crate::input::update_data_integration_input::Builder {
        crate::input::update_data_integration_input::Builder::default()
    }
    /// Creates a new `UpdateDataIntegration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateDataIntegration {
    type Output = std::result::Result<
        crate::output::UpdateDataIntegrationOutput,
        crate::error::UpdateDataIntegrationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_data_integration_error(response)
        } else {
            crate::operation_deser::parse_update_data_integration_response(response)
        }
    }
}

/// Operation shape for `UpdateEventIntegration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_event_integration`](crate::client::Client::update_event_integration).
///
/// See [`crate::client::fluent_builders::UpdateEventIntegration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEventIntegration {
    _private: (),
}
impl UpdateEventIntegration {
    /// Creates a new builder-style object to manufacture [`UpdateEventIntegrationInput`](crate::input::UpdateEventIntegrationInput)
    pub fn builder() -> crate::input::update_event_integration_input::Builder {
        crate::input::update_event_integration_input::Builder::default()
    }
    /// Creates a new `UpdateEventIntegration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateEventIntegration {
    type Output = std::result::Result<
        crate::output::UpdateEventIntegrationOutput,
        crate::error::UpdateEventIntegrationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_event_integration_error(response)
        } else {
            crate::operation_deser::parse_update_event_integration_response(response)
        }
    }
}
