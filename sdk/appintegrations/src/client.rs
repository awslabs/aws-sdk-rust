// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon AppIntegrations Service
///
/// Client for invoking operations on Amazon AppIntegrations Service. Each operation on Amazon AppIntegrations Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_appintegrations::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_appintegrations::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_appintegrations::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateDataIntegration`](crate::client::fluent_builders::CreateDataIntegration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateDataIntegration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateDataIntegration::set_name): <p>The name of the DataIntegration.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateDataIntegration::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateDataIntegration::set_description): <p>A description of the DataIntegration.</p>
    ///   - [`kms_key(impl Into<String>)`](crate::client::fluent_builders::CreateDataIntegration::kms_key) / [`set_kms_key(Option<String>)`](crate::client::fluent_builders::CreateDataIntegration::set_kms_key): <p>The KMS key for the DataIntegration.</p>
    ///   - [`source_uri(impl Into<String>)`](crate::client::fluent_builders::CreateDataIntegration::source_uri) / [`set_source_uri(Option<String>)`](crate::client::fluent_builders::CreateDataIntegration::set_source_uri): <p>The URI of the data source.</p>
    ///   - [`schedule_config(ScheduleConfiguration)`](crate::client::fluent_builders::CreateDataIntegration::schedule_config) / [`set_schedule_config(Option<ScheduleConfiguration>)`](crate::client::fluent_builders::CreateDataIntegration::set_schedule_config): <p>The name of the data and how often it should be pulled from the source.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateDataIntegration::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateDataIntegration::set_tags): <p>One or more tags.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateDataIntegration::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateDataIntegration::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    /// - On success, responds with [`CreateDataIntegrationOutput`](crate::output::CreateDataIntegrationOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::CreateDataIntegrationOutput::arn): <p>The Amazon Resource Name (ARN)</p>
    ///   - [`id(Option<String>)`](crate::output::CreateDataIntegrationOutput::id): <p>A unique identifier.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateDataIntegrationOutput::name): <p>The name of the DataIntegration.</p>
    ///   - [`description(Option<String>)`](crate::output::CreateDataIntegrationOutput::description): <p>A description of the DataIntegration.</p>
    ///   - [`kms_key(Option<String>)`](crate::output::CreateDataIntegrationOutput::kms_key): <p>The KMS key for the DataIntegration.</p>
    ///   - [`source_uri(Option<String>)`](crate::output::CreateDataIntegrationOutput::source_uri): <p>The URI of the data source.</p>
    ///   - [`schedule_configuration(Option<ScheduleConfiguration>)`](crate::output::CreateDataIntegrationOutput::schedule_configuration): <p>The name of the data and how often it should be pulled from the source.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::CreateDataIntegrationOutput::tags): <p>One or more tags.</p>
    ///   - [`client_token(Option<String>)`](crate::output::CreateDataIntegrationOutput::client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    /// - On failure, responds with [`SdkError<CreateDataIntegrationError>`](crate::error::CreateDataIntegrationError)
    pub fn create_data_integration(&self) -> crate::client::fluent_builders::CreateDataIntegration {
        crate::client::fluent_builders::CreateDataIntegration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateEventIntegration`](crate::client::fluent_builders::CreateEventIntegration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateEventIntegration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateEventIntegration::set_name): <p>The name of the event integration.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateEventIntegration::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateEventIntegration::set_description): <p>The description of the event integration.</p>
    ///   - [`event_filter(EventFilter)`](crate::client::fluent_builders::CreateEventIntegration::event_filter) / [`set_event_filter(Option<EventFilter>)`](crate::client::fluent_builders::CreateEventIntegration::set_event_filter): <p>The event filter.</p>
    ///   - [`event_bridge_bus(impl Into<String>)`](crate::client::fluent_builders::CreateEventIntegration::event_bridge_bus) / [`set_event_bridge_bus(Option<String>)`](crate::client::fluent_builders::CreateEventIntegration::set_event_bridge_bus): <p>The EventBridge bus.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateEventIntegration::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateEventIntegration::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateEventIntegration::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateEventIntegration::set_tags): <p>One or more tags.</p>
    /// - On success, responds with [`CreateEventIntegrationOutput`](crate::output::CreateEventIntegrationOutput) with field(s):
    ///   - [`event_integration_arn(Option<String>)`](crate::output::CreateEventIntegrationOutput::event_integration_arn): <p>The Amazon Resource Name (ARN) of the event integration. </p>
    /// - On failure, responds with [`SdkError<CreateEventIntegrationError>`](crate::error::CreateEventIntegrationError)
    pub fn create_event_integration(
        &self,
    ) -> crate::client::fluent_builders::CreateEventIntegration {
        crate::client::fluent_builders::CreateEventIntegration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDataIntegration`](crate::client::fluent_builders::DeleteDataIntegration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`data_integration_identifier(impl Into<String>)`](crate::client::fluent_builders::DeleteDataIntegration::data_integration_identifier) / [`set_data_integration_identifier(Option<String>)`](crate::client::fluent_builders::DeleteDataIntegration::set_data_integration_identifier): <p>A unique identifier for the DataIntegration.</p>
    /// - On success, responds with [`DeleteDataIntegrationOutput`](crate::output::DeleteDataIntegrationOutput)

    /// - On failure, responds with [`SdkError<DeleteDataIntegrationError>`](crate::error::DeleteDataIntegrationError)
    pub fn delete_data_integration(&self) -> crate::client::fluent_builders::DeleteDataIntegration {
        crate::client::fluent_builders::DeleteDataIntegration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteEventIntegration`](crate::client::fluent_builders::DeleteEventIntegration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteEventIntegration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteEventIntegration::set_name): <p>The name of the event integration.</p>
    /// - On success, responds with [`DeleteEventIntegrationOutput`](crate::output::DeleteEventIntegrationOutput)

    /// - On failure, responds with [`SdkError<DeleteEventIntegrationError>`](crate::error::DeleteEventIntegrationError)
    pub fn delete_event_integration(
        &self,
    ) -> crate::client::fluent_builders::DeleteEventIntegration {
        crate::client::fluent_builders::DeleteEventIntegration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDataIntegration`](crate::client::fluent_builders::GetDataIntegration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identifier(impl Into<String>)`](crate::client::fluent_builders::GetDataIntegration::identifier) / [`set_identifier(Option<String>)`](crate::client::fluent_builders::GetDataIntegration::set_identifier): <p>A unique identifier.</p>
    /// - On success, responds with [`GetDataIntegrationOutput`](crate::output::GetDataIntegrationOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::GetDataIntegrationOutput::arn): <p>The Amazon Resource Name (ARN) for the DataIntegration.</p>
    ///   - [`id(Option<String>)`](crate::output::GetDataIntegrationOutput::id): <p>A unique identifier.</p>
    ///   - [`name(Option<String>)`](crate::output::GetDataIntegrationOutput::name): <p>The name of the DataIntegration.</p>
    ///   - [`description(Option<String>)`](crate::output::GetDataIntegrationOutput::description): <p>The KMS key for the DataIntegration.</p>
    ///   - [`kms_key(Option<String>)`](crate::output::GetDataIntegrationOutput::kms_key): <p>The KMS key for the DataIntegration.</p>
    ///   - [`source_uri(Option<String>)`](crate::output::GetDataIntegrationOutput::source_uri): <p>The URI of the data source.</p>
    ///   - [`schedule_configuration(Option<ScheduleConfiguration>)`](crate::output::GetDataIntegrationOutput::schedule_configuration): <p>The name of the data and how often it should be pulled from the source.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetDataIntegrationOutput::tags): <p>One or more tags.</p>
    /// - On failure, responds with [`SdkError<GetDataIntegrationError>`](crate::error::GetDataIntegrationError)
    pub fn get_data_integration(&self) -> crate::client::fluent_builders::GetDataIntegration {
        crate::client::fluent_builders::GetDataIntegration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetEventIntegration`](crate::client::fluent_builders::GetEventIntegration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetEventIntegration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetEventIntegration::set_name): <p>The name of the event integration. </p>
    /// - On success, responds with [`GetEventIntegrationOutput`](crate::output::GetEventIntegrationOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::GetEventIntegrationOutput::name): <p>The name of the event integration. </p>
    ///   - [`description(Option<String>)`](crate::output::GetEventIntegrationOutput::description): <p>The description of the event integration.</p>
    ///   - [`event_integration_arn(Option<String>)`](crate::output::GetEventIntegrationOutput::event_integration_arn): <p>The Amazon Resource Name (ARN) for the event integration.</p>
    ///   - [`event_bridge_bus(Option<String>)`](crate::output::GetEventIntegrationOutput::event_bridge_bus): <p>The EventBridge bus.</p>
    ///   - [`event_filter(Option<EventFilter>)`](crate::output::GetEventIntegrationOutput::event_filter): <p>The event filter.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetEventIntegrationOutput::tags): <p>One or more tags.</p>
    /// - On failure, responds with [`SdkError<GetEventIntegrationError>`](crate::error::GetEventIntegrationError)
    pub fn get_event_integration(&self) -> crate::client::fluent_builders::GetEventIntegration {
        crate::client::fluent_builders::GetEventIntegration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDataIntegrationAssociations`](crate::client::fluent_builders::ListDataIntegrationAssociations) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`data_integration_identifier(impl Into<String>)`](crate::client::fluent_builders::ListDataIntegrationAssociations::data_integration_identifier) / [`set_data_integration_identifier(Option<String>)`](crate::client::fluent_builders::ListDataIntegrationAssociations::set_data_integration_identifier): <p>A unique identifier for the DataIntegration.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDataIntegrationAssociations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDataIntegrationAssociations::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDataIntegrationAssociations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDataIntegrationAssociations::set_max_results): <p>The maximum number of results to return per page.</p>
    /// - On success, responds with [`ListDataIntegrationAssociationsOutput`](crate::output::ListDataIntegrationAssociationsOutput) with field(s):
    ///   - [`data_integration_associations(Option<Vec<DataIntegrationAssociationSummary>>)`](crate::output::ListDataIntegrationAssociationsOutput::data_integration_associations): <p>The Amazon Resource Name (ARN) and unique ID of the DataIntegration association.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDataIntegrationAssociationsOutput::next_token): <p>If there are additional results, this is the token for the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListDataIntegrationAssociationsError>`](crate::error::ListDataIntegrationAssociationsError)
    pub fn list_data_integration_associations(
        &self,
    ) -> crate::client::fluent_builders::ListDataIntegrationAssociations {
        crate::client::fluent_builders::ListDataIntegrationAssociations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDataIntegrations`](crate::client::fluent_builders::ListDataIntegrations) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDataIntegrations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDataIntegrations::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDataIntegrations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDataIntegrations::set_max_results): <p>The maximum number of results to return per page.</p>
    /// - On success, responds with [`ListDataIntegrationsOutput`](crate::output::ListDataIntegrationsOutput) with field(s):
    ///   - [`data_integrations(Option<Vec<DataIntegrationSummary>>)`](crate::output::ListDataIntegrationsOutput::data_integrations): <p>The DataIntegrations associated with this account.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDataIntegrationsOutput::next_token): <p>If there are additional results, this is the token for the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListDataIntegrationsError>`](crate::error::ListDataIntegrationsError)
    pub fn list_data_integrations(&self) -> crate::client::fluent_builders::ListDataIntegrations {
        crate::client::fluent_builders::ListDataIntegrations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListEventIntegrationAssociations`](crate::client::fluent_builders::ListEventIntegrationAssociations) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_integration_name(impl Into<String>)`](crate::client::fluent_builders::ListEventIntegrationAssociations::event_integration_name) / [`set_event_integration_name(Option<String>)`](crate::client::fluent_builders::ListEventIntegrationAssociations::set_event_integration_name): <p>The name of the event integration. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEventIntegrationAssociations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEventIntegrationAssociations::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEventIntegrationAssociations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListEventIntegrationAssociations::set_max_results): <p>The maximum number of results to return per page.</p>
    /// - On success, responds with [`ListEventIntegrationAssociationsOutput`](crate::output::ListEventIntegrationAssociationsOutput) with field(s):
    ///   - [`event_integration_associations(Option<Vec<EventIntegrationAssociation>>)`](crate::output::ListEventIntegrationAssociationsOutput::event_integration_associations): <p>The event integration associations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListEventIntegrationAssociationsOutput::next_token): <p>If there are additional results, this is the token for the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListEventIntegrationAssociationsError>`](crate::error::ListEventIntegrationAssociationsError)
    pub fn list_event_integration_associations(
        &self,
    ) -> crate::client::fluent_builders::ListEventIntegrationAssociations {
        crate::client::fluent_builders::ListEventIntegrationAssociations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListEventIntegrations`](crate::client::fluent_builders::ListEventIntegrations) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEventIntegrations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEventIntegrations::set_next_token): <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEventIntegrations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListEventIntegrations::set_max_results): <p>The maximum number of results to return per page.</p>
    /// - On success, responds with [`ListEventIntegrationsOutput`](crate::output::ListEventIntegrationsOutput) with field(s):
    ///   - [`event_integrations(Option<Vec<EventIntegration>>)`](crate::output::ListEventIntegrationsOutput::event_integrations): <p>The event integrations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListEventIntegrationsOutput::next_token): <p>If there are additional results, this is the token for the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListEventIntegrationsError>`](crate::error::ListEventIntegrationsError)
    pub fn list_event_integrations(&self) -> crate::client::fluent_builders::ListEventIntegrations {
        crate::client::fluent_builders::ListEventIntegrations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource. </p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>Information about the tags.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>One or more tags. </p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The tag keys.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDataIntegration`](crate::client::fluent_builders::UpdateDataIntegration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identifier(impl Into<String>)`](crate::client::fluent_builders::UpdateDataIntegration::identifier) / [`set_identifier(Option<String>)`](crate::client::fluent_builders::UpdateDataIntegration::set_identifier): <p>A unique identifier for the DataIntegration.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateDataIntegration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateDataIntegration::set_name): <p>The name of the DataIntegration.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateDataIntegration::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateDataIntegration::set_description): <p>A description of the DataIntegration.</p>
    /// - On success, responds with [`UpdateDataIntegrationOutput`](crate::output::UpdateDataIntegrationOutput)

    /// - On failure, responds with [`SdkError<UpdateDataIntegrationError>`](crate::error::UpdateDataIntegrationError)
    pub fn update_data_integration(&self) -> crate::client::fluent_builders::UpdateDataIntegration {
        crate::client::fluent_builders::UpdateDataIntegration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateEventIntegration`](crate::client::fluent_builders::UpdateEventIntegration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateEventIntegration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateEventIntegration::set_name): <p>The name of the event integration.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateEventIntegration::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateEventIntegration::set_description): <p>The description of the event inegration.</p>
    /// - On success, responds with [`UpdateEventIntegrationOutput`](crate::output::UpdateEventIntegrationOutput)

    /// - On failure, responds with [`SdkError<UpdateEventIntegrationError>`](crate::error::UpdateEventIntegrationError)
    pub fn update_event_integration(
        &self,
    ) -> crate::client::fluent_builders::UpdateEventIntegration {
        crate::client::fluent_builders::UpdateEventIntegration::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
