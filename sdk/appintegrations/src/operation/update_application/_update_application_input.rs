// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateApplicationInput {
    /// <p>The Amazon Resource Name (ARN) of the Application.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the application.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the application.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The configuration for where the application should be loaded from.</p>
    pub application_source_config: ::std::option::Option<crate::types::ApplicationSourceConfig>,
    /// <p>The events that the application subscribes.</p>
    pub subscriptions: ::std::option::Option<::std::vec::Vec<crate::types::Subscription>>,
    /// <p>The events that the application publishes.</p>
    pub publications: ::std::option::Option<::std::vec::Vec<crate::types::Publication>>,
}
impl UpdateApplicationInput {
    /// <p>The Amazon Resource Name (ARN) of the Application.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the application.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the application.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The configuration for where the application should be loaded from.</p>
    pub fn application_source_config(&self) -> ::std::option::Option<&crate::types::ApplicationSourceConfig> {
        self.application_source_config.as_ref()
    }
    /// <p>The events that the application subscribes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subscriptions.is_none()`.
    pub fn subscriptions(&self) -> &[crate::types::Subscription] {
        self.subscriptions.as_deref().unwrap_or_default()
    }
    /// <p>The events that the application publishes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.publications.is_none()`.
    pub fn publications(&self) -> &[crate::types::Publication] {
        self.publications.as_deref().unwrap_or_default()
    }
}
impl UpdateApplicationInput {
    /// Creates a new builder-style object to manufacture [`UpdateApplicationInput`](crate::operation::update_application::UpdateApplicationInput).
    pub fn builder() -> crate::operation::update_application::builders::UpdateApplicationInputBuilder {
        crate::operation::update_application::builders::UpdateApplicationInputBuilder::default()
    }
}

/// A builder for [`UpdateApplicationInput`](crate::operation::update_application::UpdateApplicationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateApplicationInputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) application_source_config: ::std::option::Option<crate::types::ApplicationSourceConfig>,
    pub(crate) subscriptions: ::std::option::Option<::std::vec::Vec<crate::types::Subscription>>,
    pub(crate) publications: ::std::option::Option<::std::vec::Vec<crate::types::Publication>>,
}
impl UpdateApplicationInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Application.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Application.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Application.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the application.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the application.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the application.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the application.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the application.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The configuration for where the application should be loaded from.</p>
    pub fn application_source_config(mut self, input: crate::types::ApplicationSourceConfig) -> Self {
        self.application_source_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for where the application should be loaded from.</p>
    pub fn set_application_source_config(mut self, input: ::std::option::Option<crate::types::ApplicationSourceConfig>) -> Self {
        self.application_source_config = input;
        self
    }
    /// <p>The configuration for where the application should be loaded from.</p>
    pub fn get_application_source_config(&self) -> &::std::option::Option<crate::types::ApplicationSourceConfig> {
        &self.application_source_config
    }
    /// Appends an item to `subscriptions`.
    ///
    /// To override the contents of this collection use [`set_subscriptions`](Self::set_subscriptions).
    ///
    /// <p>The events that the application subscribes.</p>
    pub fn subscriptions(mut self, input: crate::types::Subscription) -> Self {
        let mut v = self.subscriptions.unwrap_or_default();
        v.push(input);
        self.subscriptions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The events that the application subscribes.</p>
    pub fn set_subscriptions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Subscription>>) -> Self {
        self.subscriptions = input;
        self
    }
    /// <p>The events that the application subscribes.</p>
    pub fn get_subscriptions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Subscription>> {
        &self.subscriptions
    }
    /// Appends an item to `publications`.
    ///
    /// To override the contents of this collection use [`set_publications`](Self::set_publications).
    ///
    /// <p>The events that the application publishes.</p>
    pub fn publications(mut self, input: crate::types::Publication) -> Self {
        let mut v = self.publications.unwrap_or_default();
        v.push(input);
        self.publications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The events that the application publishes.</p>
    pub fn set_publications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Publication>>) -> Self {
        self.publications = input;
        self
    }
    /// <p>The events that the application publishes.</p>
    pub fn get_publications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Publication>> {
        &self.publications
    }
    /// Consumes the builder and constructs a [`UpdateApplicationInput`](crate::operation::update_application::UpdateApplicationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_application::UpdateApplicationInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_application::UpdateApplicationInput {
            arn: self.arn,
            name: self.name,
            description: self.description,
            application_source_config: self.application_source_config,
            subscriptions: self.subscriptions,
            publications: self.publications,
        })
    }
}
