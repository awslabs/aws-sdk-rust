// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDataIntegrationInput {
    /// <p>The name of the DataIntegration.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the DataIntegration.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The KMS key for the DataIntegration.</p>
    #[doc(hidden)]
    pub kms_key: std::option::Option<std::string::String>,
    /// <p>The URI of the data source.</p>
    #[doc(hidden)]
    pub source_uri: std::option::Option<std::string::String>,
    /// <p>The name of the data and how often it should be pulled from the source.</p>
    #[doc(hidden)]
    pub schedule_config: std::option::Option<crate::types::ScheduleConfiguration>,
    /// <p>One or more tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl CreateDataIntegrationInput {
    /// <p>The name of the DataIntegration.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the DataIntegration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The KMS key for the DataIntegration.</p>
    pub fn kms_key(&self) -> std::option::Option<&str> {
        self.kms_key.as_deref()
    }
    /// <p>The URI of the data source.</p>
    pub fn source_uri(&self) -> std::option::Option<&str> {
        self.source_uri.as_deref()
    }
    /// <p>The name of the data and how often it should be pulled from the source.</p>
    pub fn schedule_config(&self) -> std::option::Option<&crate::types::ScheduleConfiguration> {
        self.schedule_config.as_ref()
    }
    /// <p>One or more tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateDataIntegrationInput {
    /// Creates a new builder-style object to manufacture [`CreateDataIntegrationInput`](crate::operation::create_data_integration::CreateDataIntegrationInput).
    pub fn builder(
    ) -> crate::operation::create_data_integration::builders::CreateDataIntegrationInputBuilder
    {
        crate::operation::create_data_integration::builders::CreateDataIntegrationInputBuilder::default()
    }
}

/// A builder for [`CreateDataIntegrationInput`](crate::operation::create_data_integration::CreateDataIntegrationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDataIntegrationInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) kms_key: std::option::Option<std::string::String>,
    pub(crate) source_uri: std::option::Option<std::string::String>,
    pub(crate) schedule_config: std::option::Option<crate::types::ScheduleConfiguration>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl CreateDataIntegrationInputBuilder {
    /// <p>The name of the DataIntegration.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the DataIntegration.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description of the DataIntegration.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the DataIntegration.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The KMS key for the DataIntegration.</p>
    pub fn kms_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key = Some(input.into());
        self
    }
    /// <p>The KMS key for the DataIntegration.</p>
    pub fn set_kms_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key = input;
        self
    }
    /// <p>The URI of the data source.</p>
    pub fn source_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_uri = Some(input.into());
        self
    }
    /// <p>The URI of the data source.</p>
    pub fn set_source_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_uri = input;
        self
    }
    /// <p>The name of the data and how often it should be pulled from the source.</p>
    pub fn schedule_config(mut self, input: crate::types::ScheduleConfiguration) -> Self {
        self.schedule_config = Some(input);
        self
    }
    /// <p>The name of the data and how often it should be pulled from the source.</p>
    pub fn set_schedule_config(
        mut self,
        input: std::option::Option<crate::types::ScheduleConfiguration>,
    ) -> Self {
        self.schedule_config = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>One or more tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateDataIntegrationInput`](crate::operation::create_data_integration::CreateDataIntegrationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_data_integration::CreateDataIntegrationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_data_integration::CreateDataIntegrationInput {
                name: self.name,
                description: self.description,
                kms_key: self.kms_key,
                source_uri: self.source_uri,
                schedule_config: self.schedule_config,
                tags: self.tags,
                client_token: self.client_token,
            },
        )
    }
}
