// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEventIntegrationOutput {
    /// <p>The name of the event integration. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the event integration.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the event integration.</p>
    #[doc(hidden)]
    pub event_integration_arn: std::option::Option<std::string::String>,
    /// <p>The EventBridge bus.</p>
    #[doc(hidden)]
    pub event_bridge_bus: std::option::Option<std::string::String>,
    /// <p>The event filter.</p>
    #[doc(hidden)]
    pub event_filter: std::option::Option<crate::types::EventFilter>,
    /// <p>One or more tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetEventIntegrationOutput {
    /// <p>The name of the event integration. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the event integration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the event integration.</p>
    pub fn event_integration_arn(&self) -> std::option::Option<&str> {
        self.event_integration_arn.as_deref()
    }
    /// <p>The EventBridge bus.</p>
    pub fn event_bridge_bus(&self) -> std::option::Option<&str> {
        self.event_bridge_bus.as_deref()
    }
    /// <p>The event filter.</p>
    pub fn event_filter(&self) -> std::option::Option<&crate::types::EventFilter> {
        self.event_filter.as_ref()
    }
    /// <p>One or more tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetEventIntegrationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEventIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`GetEventIntegrationOutput`](crate::operation::get_event_integration::GetEventIntegrationOutput).
    pub fn builder(
    ) -> crate::operation::get_event_integration::builders::GetEventIntegrationOutputBuilder {
        crate::operation::get_event_integration::builders::GetEventIntegrationOutputBuilder::default(
        )
    }
}

/// A builder for [`GetEventIntegrationOutput`](crate::operation::get_event_integration::GetEventIntegrationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEventIntegrationOutputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) event_integration_arn: std::option::Option<std::string::String>,
    pub(crate) event_bridge_bus: std::option::Option<std::string::String>,
    pub(crate) event_filter: std::option::Option<crate::types::EventFilter>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetEventIntegrationOutputBuilder {
    /// <p>The name of the event integration. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the event integration. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the event integration.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the event integration.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the event integration.</p>
    pub fn event_integration_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_integration_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the event integration.</p>
    pub fn set_event_integration_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.event_integration_arn = input;
        self
    }
    /// <p>The EventBridge bus.</p>
    pub fn event_bridge_bus(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_bridge_bus = Some(input.into());
        self
    }
    /// <p>The EventBridge bus.</p>
    pub fn set_event_bridge_bus(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_bridge_bus = input;
        self
    }
    /// <p>The event filter.</p>
    pub fn event_filter(mut self, input: crate::types::EventFilter) -> Self {
        self.event_filter = Some(input);
        self
    }
    /// <p>The event filter.</p>
    pub fn set_event_filter(
        mut self,
        input: std::option::Option<crate::types::EventFilter>,
    ) -> Self {
        self.event_filter = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>One or more tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEventIntegrationOutput`](crate::operation::get_event_integration::GetEventIntegrationOutput).
    pub fn build(self) -> crate::operation::get_event_integration::GetEventIntegrationOutput {
        crate::operation::get_event_integration::GetEventIntegrationOutput {
            name: self.name,
            description: self.description,
            event_integration_arn: self.event_integration_arn,
            event_bridge_bus: self.event_bridge_bus,
            event_filter: self.event_filter,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
