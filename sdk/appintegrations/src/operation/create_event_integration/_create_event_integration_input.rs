// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEventIntegrationInput {
    /// <p>The name of the event integration.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the event integration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The event filter.</p>
    pub event_filter: ::std::option::Option<crate::types::EventFilter>,
    /// <p>The EventBridge bus.</p>
    pub event_bridge_bus: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateEventIntegrationInput {
    /// <p>The name of the event integration.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the event integration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The event filter.</p>
    pub fn event_filter(&self) -> ::std::option::Option<&crate::types::EventFilter> {
        self.event_filter.as_ref()
    }
    /// <p>The EventBridge bus.</p>
    pub fn event_bridge_bus(&self) -> ::std::option::Option<&str> {
        self.event_bridge_bus.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateEventIntegrationInput {
    /// Creates a new builder-style object to manufacture [`CreateEventIntegrationInput`](crate::operation::create_event_integration::CreateEventIntegrationInput).
    pub fn builder() -> crate::operation::create_event_integration::builders::CreateEventIntegrationInputBuilder {
        crate::operation::create_event_integration::builders::CreateEventIntegrationInputBuilder::default()
    }
}

/// A builder for [`CreateEventIntegrationInput`](crate::operation::create_event_integration::CreateEventIntegrationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateEventIntegrationInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) event_filter: ::std::option::Option<crate::types::EventFilter>,
    pub(crate) event_bridge_bus: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateEventIntegrationInputBuilder {
    /// <p>The name of the event integration.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the event integration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the event integration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the event integration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the event integration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the event integration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The event filter.</p>
    /// This field is required.
    pub fn event_filter(mut self, input: crate::types::EventFilter) -> Self {
        self.event_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The event filter.</p>
    pub fn set_event_filter(mut self, input: ::std::option::Option<crate::types::EventFilter>) -> Self {
        self.event_filter = input;
        self
    }
    /// <p>The event filter.</p>
    pub fn get_event_filter(&self) -> &::std::option::Option<crate::types::EventFilter> {
        &self.event_filter
    }
    /// <p>The EventBridge bus.</p>
    /// This field is required.
    pub fn event_bridge_bus(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_bridge_bus = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The EventBridge bus.</p>
    pub fn set_event_bridge_bus(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_bridge_bus = input;
        self
    }
    /// <p>The EventBridge bus.</p>
    pub fn get_event_bridge_bus(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_bridge_bus
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateEventIntegrationInput`](crate::operation::create_event_integration::CreateEventIntegrationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_event_integration::CreateEventIntegrationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_event_integration::CreateEventIntegrationInput {
            name: self.name,
            description: self.description,
            event_filter: self.event_filter,
            event_bridge_bus: self.event_bridge_bus,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
