// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for what files should be pulled from the source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FileConfiguration {
    /// <p>Identifiers for the source folders to pull all files from recursively.</p>
    pub folders: ::std::vec::Vec<::std::string::String>,
    /// <p>Restrictions for what files should be pulled from the source.</p>
    pub filters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
}
impl FileConfiguration {
    /// <p>Identifiers for the source folders to pull all files from recursively.</p>
    pub fn folders(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.folders.deref()
    }
    /// <p>Restrictions for what files should be pulled from the source.</p>
    pub fn filters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        self.filters.as_ref()
    }
}
impl FileConfiguration {
    /// Creates a new builder-style object to manufacture [`FileConfiguration`](crate::types::FileConfiguration).
    pub fn builder() -> crate::types::builders::FileConfigurationBuilder {
        crate::types::builders::FileConfigurationBuilder::default()
    }
}

/// A builder for [`FileConfiguration`](crate::types::FileConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FileConfigurationBuilder {
    pub(crate) folders: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) filters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
}
impl FileConfigurationBuilder {
    /// Appends an item to `folders`.
    ///
    /// To override the contents of this collection use [`set_folders`](Self::set_folders).
    ///
    /// <p>Identifiers for the source folders to pull all files from recursively.</p>
    pub fn folders(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.folders.unwrap_or_default();
        v.push(input.into());
        self.folders = ::std::option::Option::Some(v);
        self
    }
    /// <p>Identifiers for the source folders to pull all files from recursively.</p>
    pub fn set_folders(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.folders = input;
        self
    }
    /// <p>Identifiers for the source folders to pull all files from recursively.</p>
    pub fn get_folders(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.folders
    }
    /// Adds a key-value pair to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Restrictions for what files should be pulled from the source.</p>
    pub fn filters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut hash_map = self.filters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.filters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Restrictions for what files should be pulled from the source.</p>
    pub fn set_filters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>Restrictions for what files should be pulled from the source.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        &self.filters
    }
    /// Consumes the builder and constructs a [`FileConfiguration`](crate::types::FileConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`folders`](crate::types::builders::FileConfigurationBuilder::folders)
    pub fn build(self) -> ::std::result::Result<crate::types::FileConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FileConfiguration {
            folders: self.folders.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "folders",
                    "folders was not specified but it is required when building FileConfiguration",
                )
            })?,
            filters: self.filters,
        })
    }
}
