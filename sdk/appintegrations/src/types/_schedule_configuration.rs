// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The name of the data and how often it should be pulled from the source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScheduleConfiguration {
    /// <p>The start date for objects to import in the first flow run.</p>
    #[doc(hidden)]
    pub first_execution_from: std::option::Option<std::string::String>,
    /// <p>The name of the object to pull from the data source.</p>
    #[doc(hidden)]
    pub object: std::option::Option<std::string::String>,
    /// <p>How often the data should be pulled from data source.</p>
    #[doc(hidden)]
    pub schedule_expression: std::option::Option<std::string::String>,
}
impl ScheduleConfiguration {
    /// <p>The start date for objects to import in the first flow run.</p>
    pub fn first_execution_from(&self) -> std::option::Option<&str> {
        self.first_execution_from.as_deref()
    }
    /// <p>The name of the object to pull from the data source.</p>
    pub fn object(&self) -> std::option::Option<&str> {
        self.object.as_deref()
    }
    /// <p>How often the data should be pulled from data source.</p>
    pub fn schedule_expression(&self) -> std::option::Option<&str> {
        self.schedule_expression.as_deref()
    }
}
impl ScheduleConfiguration {
    /// Creates a new builder-style object to manufacture [`ScheduleConfiguration`](crate::types::ScheduleConfiguration).
    pub fn builder() -> crate::types::builders::ScheduleConfigurationBuilder {
        crate::types::builders::ScheduleConfigurationBuilder::default()
    }
}

/// A builder for [`ScheduleConfiguration`](crate::types::ScheduleConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScheduleConfigurationBuilder {
    pub(crate) first_execution_from: std::option::Option<std::string::String>,
    pub(crate) object: std::option::Option<std::string::String>,
    pub(crate) schedule_expression: std::option::Option<std::string::String>,
}
impl ScheduleConfigurationBuilder {
    /// <p>The start date for objects to import in the first flow run.</p>
    pub fn first_execution_from(mut self, input: impl Into<std::string::String>) -> Self {
        self.first_execution_from = Some(input.into());
        self
    }
    /// <p>The start date for objects to import in the first flow run.</p>
    pub fn set_first_execution_from(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.first_execution_from = input;
        self
    }
    /// <p>The name of the object to pull from the data source.</p>
    pub fn object(mut self, input: impl Into<std::string::String>) -> Self {
        self.object = Some(input.into());
        self
    }
    /// <p>The name of the object to pull from the data source.</p>
    pub fn set_object(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.object = input;
        self
    }
    /// <p>How often the data should be pulled from data source.</p>
    pub fn schedule_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.schedule_expression = Some(input.into());
        self
    }
    /// <p>How often the data should be pulled from data source.</p>
    pub fn set_schedule_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schedule_expression = input;
        self
    }
    /// Consumes the builder and constructs a [`ScheduleConfiguration`](crate::types::ScheduleConfiguration).
    pub fn build(self) -> crate::types::ScheduleConfiguration {
        crate::types::ScheduleConfiguration {
            first_execution_from: self.first_execution_from,
            object: self.object,
            schedule_expression: self.schedule_expression,
        }
    }
}
