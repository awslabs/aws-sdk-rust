// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateEventIntegrationOutput {}
impl std::fmt::Debug for UpdateEventIntegrationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEventIntegrationOutput");
        formatter.finish()
    }
}
/// See [`UpdateEventIntegrationOutput`](crate::output::UpdateEventIntegrationOutput)
pub mod update_event_integration_output {
    /// A builder for [`UpdateEventIntegrationOutput`](crate::output::UpdateEventIntegrationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateEventIntegrationOutput`](crate::output::UpdateEventIntegrationOutput)
        pub fn build(self) -> crate::output::UpdateEventIntegrationOutput {
            crate::output::UpdateEventIntegrationOutput {}
        }
    }
}
impl UpdateEventIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEventIntegrationOutput`](crate::output::UpdateEventIntegrationOutput)
    pub fn builder() -> crate::output::update_event_integration_output::Builder {
        crate::output::update_event_integration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateDataIntegrationOutput {}
impl std::fmt::Debug for UpdateDataIntegrationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDataIntegrationOutput");
        formatter.finish()
    }
}
/// See [`UpdateDataIntegrationOutput`](crate::output::UpdateDataIntegrationOutput)
pub mod update_data_integration_output {
    /// A builder for [`UpdateDataIntegrationOutput`](crate::output::UpdateDataIntegrationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateDataIntegrationOutput`](crate::output::UpdateDataIntegrationOutput)
        pub fn build(self) -> crate::output::UpdateDataIntegrationOutput {
            crate::output::UpdateDataIntegrationOutput {}
        }
    }
}
impl UpdateDataIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDataIntegrationOutput`](crate::output::UpdateDataIntegrationOutput)
    pub fn builder() -> crate::output::update_data_integration_output::Builder {
        crate::output::update_data_integration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>Information about the tags.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ListTagsForResourceOutput {
    /// <p>Information about the tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Information about the tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>Information about the tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListEventIntegrationsOutput {
    /// <p>The event integrations.</p>
    pub event_integrations: std::option::Option<std::vec::Vec<crate::model::EventIntegration>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListEventIntegrationsOutput {
    /// <p>The event integrations.</p>
    pub fn event_integrations(&self) -> std::option::Option<&[crate::model::EventIntegration]> {
        self.event_integrations.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListEventIntegrationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListEventIntegrationsOutput");
        formatter.field("event_integrations", &self.event_integrations);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListEventIntegrationsOutput`](crate::output::ListEventIntegrationsOutput)
pub mod list_event_integrations_output {
    /// A builder for [`ListEventIntegrationsOutput`](crate::output::ListEventIntegrationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_integrations:
            std::option::Option<std::vec::Vec<crate::model::EventIntegration>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `event_integrations`.
        ///
        /// To override the contents of this collection use [`set_event_integrations`](Self::set_event_integrations).
        ///
        /// <p>The event integrations.</p>
        pub fn event_integrations(mut self, input: crate::model::EventIntegration) -> Self {
            let mut v = self.event_integrations.unwrap_or_default();
            v.push(input);
            self.event_integrations = Some(v);
            self
        }
        /// <p>The event integrations.</p>
        pub fn set_event_integrations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EventIntegration>>,
        ) -> Self {
            self.event_integrations = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListEventIntegrationsOutput`](crate::output::ListEventIntegrationsOutput)
        pub fn build(self) -> crate::output::ListEventIntegrationsOutput {
            crate::output::ListEventIntegrationsOutput {
                event_integrations: self.event_integrations,
                next_token: self.next_token,
            }
        }
    }
}
impl ListEventIntegrationsOutput {
    /// Creates a new builder-style object to manufacture [`ListEventIntegrationsOutput`](crate::output::ListEventIntegrationsOutput)
    pub fn builder() -> crate::output::list_event_integrations_output::Builder {
        crate::output::list_event_integrations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListEventIntegrationAssociationsOutput {
    /// <p>The event integration associations.</p>
    pub event_integration_associations:
        std::option::Option<std::vec::Vec<crate::model::EventIntegrationAssociation>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListEventIntegrationAssociationsOutput {
    /// <p>The event integration associations.</p>
    pub fn event_integration_associations(
        &self,
    ) -> std::option::Option<&[crate::model::EventIntegrationAssociation]> {
        self.event_integration_associations.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListEventIntegrationAssociationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListEventIntegrationAssociationsOutput");
        formatter.field(
            "event_integration_associations",
            &self.event_integration_associations,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListEventIntegrationAssociationsOutput`](crate::output::ListEventIntegrationAssociationsOutput)
pub mod list_event_integration_associations_output {
    /// A builder for [`ListEventIntegrationAssociationsOutput`](crate::output::ListEventIntegrationAssociationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_integration_associations:
            std::option::Option<std::vec::Vec<crate::model::EventIntegrationAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `event_integration_associations`.
        ///
        /// To override the contents of this collection use [`set_event_integration_associations`](Self::set_event_integration_associations).
        ///
        /// <p>The event integration associations.</p>
        pub fn event_integration_associations(
            mut self,
            input: crate::model::EventIntegrationAssociation,
        ) -> Self {
            let mut v = self.event_integration_associations.unwrap_or_default();
            v.push(input);
            self.event_integration_associations = Some(v);
            self
        }
        /// <p>The event integration associations.</p>
        pub fn set_event_integration_associations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EventIntegrationAssociation>>,
        ) -> Self {
            self.event_integration_associations = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListEventIntegrationAssociationsOutput`](crate::output::ListEventIntegrationAssociationsOutput)
        pub fn build(self) -> crate::output::ListEventIntegrationAssociationsOutput {
            crate::output::ListEventIntegrationAssociationsOutput {
                event_integration_associations: self.event_integration_associations,
                next_token: self.next_token,
            }
        }
    }
}
impl ListEventIntegrationAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`ListEventIntegrationAssociationsOutput`](crate::output::ListEventIntegrationAssociationsOutput)
    pub fn builder() -> crate::output::list_event_integration_associations_output::Builder {
        crate::output::list_event_integration_associations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListDataIntegrationsOutput {
    /// <p>The DataIntegrations associated with this account.</p>
    pub data_integrations: std::option::Option<std::vec::Vec<crate::model::DataIntegrationSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListDataIntegrationsOutput {
    /// <p>The DataIntegrations associated with this account.</p>
    pub fn data_integrations(
        &self,
    ) -> std::option::Option<&[crate::model::DataIntegrationSummary]> {
        self.data_integrations.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListDataIntegrationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListDataIntegrationsOutput");
        formatter.field("data_integrations", &self.data_integrations);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListDataIntegrationsOutput`](crate::output::ListDataIntegrationsOutput)
pub mod list_data_integrations_output {
    /// A builder for [`ListDataIntegrationsOutput`](crate::output::ListDataIntegrationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) data_integrations:
            std::option::Option<std::vec::Vec<crate::model::DataIntegrationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `data_integrations`.
        ///
        /// To override the contents of this collection use [`set_data_integrations`](Self::set_data_integrations).
        ///
        /// <p>The DataIntegrations associated with this account.</p>
        pub fn data_integrations(mut self, input: crate::model::DataIntegrationSummary) -> Self {
            let mut v = self.data_integrations.unwrap_or_default();
            v.push(input);
            self.data_integrations = Some(v);
            self
        }
        /// <p>The DataIntegrations associated with this account.</p>
        pub fn set_data_integrations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DataIntegrationSummary>>,
        ) -> Self {
            self.data_integrations = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDataIntegrationsOutput`](crate::output::ListDataIntegrationsOutput)
        pub fn build(self) -> crate::output::ListDataIntegrationsOutput {
            crate::output::ListDataIntegrationsOutput {
                data_integrations: self.data_integrations,
                next_token: self.next_token,
            }
        }
    }
}
impl ListDataIntegrationsOutput {
    /// Creates a new builder-style object to manufacture [`ListDataIntegrationsOutput`](crate::output::ListDataIntegrationsOutput)
    pub fn builder() -> crate::output::list_data_integrations_output::Builder {
        crate::output::list_data_integrations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListDataIntegrationAssociationsOutput {
    /// <p>The Amazon Resource Name (ARN) and unique ID of the DataIntegration association.</p>
    pub data_integration_associations:
        std::option::Option<std::vec::Vec<crate::model::DataIntegrationAssociationSummary>>,
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListDataIntegrationAssociationsOutput {
    /// <p>The Amazon Resource Name (ARN) and unique ID of the DataIntegration association.</p>
    pub fn data_integration_associations(
        &self,
    ) -> std::option::Option<&[crate::model::DataIntegrationAssociationSummary]> {
        self.data_integration_associations.as_deref()
    }
    /// <p>If there are additional results, this is the token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListDataIntegrationAssociationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListDataIntegrationAssociationsOutput");
        formatter.field(
            "data_integration_associations",
            &self.data_integration_associations,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListDataIntegrationAssociationsOutput`](crate::output::ListDataIntegrationAssociationsOutput)
pub mod list_data_integration_associations_output {
    /// A builder for [`ListDataIntegrationAssociationsOutput`](crate::output::ListDataIntegrationAssociationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) data_integration_associations:
            std::option::Option<std::vec::Vec<crate::model::DataIntegrationAssociationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `data_integration_associations`.
        ///
        /// To override the contents of this collection use [`set_data_integration_associations`](Self::set_data_integration_associations).
        ///
        /// <p>The Amazon Resource Name (ARN) and unique ID of the DataIntegration association.</p>
        pub fn data_integration_associations(
            mut self,
            input: crate::model::DataIntegrationAssociationSummary,
        ) -> Self {
            let mut v = self.data_integration_associations.unwrap_or_default();
            v.push(input);
            self.data_integration_associations = Some(v);
            self
        }
        /// <p>The Amazon Resource Name (ARN) and unique ID of the DataIntegration association.</p>
        pub fn set_data_integration_associations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::DataIntegrationAssociationSummary>,
            >,
        ) -> Self {
            self.data_integration_associations = input;
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are additional results, this is the token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDataIntegrationAssociationsOutput`](crate::output::ListDataIntegrationAssociationsOutput)
        pub fn build(self) -> crate::output::ListDataIntegrationAssociationsOutput {
            crate::output::ListDataIntegrationAssociationsOutput {
                data_integration_associations: self.data_integration_associations,
                next_token: self.next_token,
            }
        }
    }
}
impl ListDataIntegrationAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`ListDataIntegrationAssociationsOutput`](crate::output::ListDataIntegrationAssociationsOutput)
    pub fn builder() -> crate::output::list_data_integration_associations_output::Builder {
        crate::output::list_data_integration_associations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetEventIntegrationOutput {
    /// <p>The name of the event integration. </p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the event integration.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the event integration.</p>
    pub event_integration_arn: std::option::Option<std::string::String>,
    /// <p>The EventBridge bus.</p>
    pub event_bridge_bus: std::option::Option<std::string::String>,
    /// <p>The event filter.</p>
    pub event_filter: std::option::Option<crate::model::EventFilter>,
    /// <p>One or more tags.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetEventIntegrationOutput {
    /// <p>The name of the event integration. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the event integration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the event integration.</p>
    pub fn event_integration_arn(&self) -> std::option::Option<&str> {
        self.event_integration_arn.as_deref()
    }
    /// <p>The EventBridge bus.</p>
    pub fn event_bridge_bus(&self) -> std::option::Option<&str> {
        self.event_bridge_bus.as_deref()
    }
    /// <p>The event filter.</p>
    pub fn event_filter(&self) -> std::option::Option<&crate::model::EventFilter> {
        self.event_filter.as_ref()
    }
    /// <p>One or more tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for GetEventIntegrationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetEventIntegrationOutput");
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("event_integration_arn", &self.event_integration_arn);
        formatter.field("event_bridge_bus", &self.event_bridge_bus);
        formatter.field("event_filter", &self.event_filter);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`GetEventIntegrationOutput`](crate::output::GetEventIntegrationOutput)
pub mod get_event_integration_output {
    /// A builder for [`GetEventIntegrationOutput`](crate::output::GetEventIntegrationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) event_integration_arn: std::option::Option<std::string::String>,
        pub(crate) event_bridge_bus: std::option::Option<std::string::String>,
        pub(crate) event_filter: std::option::Option<crate::model::EventFilter>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>The name of the event integration. </p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the event integration. </p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The description of the event integration.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the event integration.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the event integration.</p>
        pub fn event_integration_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.event_integration_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the event integration.</p>
        pub fn set_event_integration_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.event_integration_arn = input;
            self
        }
        /// <p>The EventBridge bus.</p>
        pub fn event_bridge_bus(mut self, input: impl Into<std::string::String>) -> Self {
            self.event_bridge_bus = Some(input.into());
            self
        }
        /// <p>The EventBridge bus.</p>
        pub fn set_event_bridge_bus(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.event_bridge_bus = input;
            self
        }
        /// <p>The event filter.</p>
        pub fn event_filter(mut self, input: crate::model::EventFilter) -> Self {
            self.event_filter = Some(input);
            self
        }
        /// <p>The event filter.</p>
        pub fn set_event_filter(
            mut self,
            input: std::option::Option<crate::model::EventFilter>,
        ) -> Self {
            self.event_filter = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>One or more tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>One or more tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`GetEventIntegrationOutput`](crate::output::GetEventIntegrationOutput)
        pub fn build(self) -> crate::output::GetEventIntegrationOutput {
            crate::output::GetEventIntegrationOutput {
                name: self.name,
                description: self.description,
                event_integration_arn: self.event_integration_arn,
                event_bridge_bus: self.event_bridge_bus,
                event_filter: self.event_filter,
                tags: self.tags,
            }
        }
    }
}
impl GetEventIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`GetEventIntegrationOutput`](crate::output::GetEventIntegrationOutput)
    pub fn builder() -> crate::output::get_event_integration_output::Builder {
        crate::output::get_event_integration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDataIntegrationOutput {
    /// <p>The Amazon Resource Name (ARN) for the DataIntegration.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>A unique identifier.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the DataIntegration.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The KMS key for the DataIntegration.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The KMS key for the DataIntegration.</p>
    pub kms_key: std::option::Option<std::string::String>,
    /// <p>The URI of the data source.</p>
    pub source_uri: std::option::Option<std::string::String>,
    /// <p>The name of the data and how often it should be pulled from the source.</p>
    pub schedule_configuration: std::option::Option<crate::model::ScheduleConfiguration>,
    /// <p>One or more tags.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetDataIntegrationOutput {
    /// <p>The Amazon Resource Name (ARN) for the DataIntegration.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A unique identifier.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the DataIntegration.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The KMS key for the DataIntegration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The KMS key for the DataIntegration.</p>
    pub fn kms_key(&self) -> std::option::Option<&str> {
        self.kms_key.as_deref()
    }
    /// <p>The URI of the data source.</p>
    pub fn source_uri(&self) -> std::option::Option<&str> {
        self.source_uri.as_deref()
    }
    /// <p>The name of the data and how often it should be pulled from the source.</p>
    pub fn schedule_configuration(
        &self,
    ) -> std::option::Option<&crate::model::ScheduleConfiguration> {
        self.schedule_configuration.as_ref()
    }
    /// <p>One or more tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for GetDataIntegrationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDataIntegrationOutput");
        formatter.field("arn", &self.arn);
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("kms_key", &self.kms_key);
        formatter.field("source_uri", &self.source_uri);
        formatter.field("schedule_configuration", &self.schedule_configuration);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`GetDataIntegrationOutput`](crate::output::GetDataIntegrationOutput)
pub mod get_data_integration_output {
    /// A builder for [`GetDataIntegrationOutput`](crate::output::GetDataIntegrationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) kms_key: std::option::Option<std::string::String>,
        pub(crate) source_uri: std::option::Option<std::string::String>,
        pub(crate) schedule_configuration: std::option::Option<crate::model::ScheduleConfiguration>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) for the DataIntegration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the DataIntegration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>A unique identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>A unique identifier.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the DataIntegration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the DataIntegration.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The KMS key for the DataIntegration.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The KMS key for the DataIntegration.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The KMS key for the DataIntegration.</p>
        pub fn kms_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key = Some(input.into());
            self
        }
        /// <p>The KMS key for the DataIntegration.</p>
        pub fn set_kms_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key = input;
            self
        }
        /// <p>The URI of the data source.</p>
        pub fn source_uri(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_uri = Some(input.into());
            self
        }
        /// <p>The URI of the data source.</p>
        pub fn set_source_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.source_uri = input;
            self
        }
        /// <p>The name of the data and how often it should be pulled from the source.</p>
        pub fn schedule_configuration(
            mut self,
            input: crate::model::ScheduleConfiguration,
        ) -> Self {
            self.schedule_configuration = Some(input);
            self
        }
        /// <p>The name of the data and how often it should be pulled from the source.</p>
        pub fn set_schedule_configuration(
            mut self,
            input: std::option::Option<crate::model::ScheduleConfiguration>,
        ) -> Self {
            self.schedule_configuration = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>One or more tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>One or more tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDataIntegrationOutput`](crate::output::GetDataIntegrationOutput)
        pub fn build(self) -> crate::output::GetDataIntegrationOutput {
            crate::output::GetDataIntegrationOutput {
                arn: self.arn,
                id: self.id,
                name: self.name,
                description: self.description,
                kms_key: self.kms_key,
                source_uri: self.source_uri,
                schedule_configuration: self.schedule_configuration,
                tags: self.tags,
            }
        }
    }
}
impl GetDataIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`GetDataIntegrationOutput`](crate::output::GetDataIntegrationOutput)
    pub fn builder() -> crate::output::get_data_integration_output::Builder {
        crate::output::get_data_integration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteEventIntegrationOutput {}
impl std::fmt::Debug for DeleteEventIntegrationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteEventIntegrationOutput");
        formatter.finish()
    }
}
/// See [`DeleteEventIntegrationOutput`](crate::output::DeleteEventIntegrationOutput)
pub mod delete_event_integration_output {
    /// A builder for [`DeleteEventIntegrationOutput`](crate::output::DeleteEventIntegrationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteEventIntegrationOutput`](crate::output::DeleteEventIntegrationOutput)
        pub fn build(self) -> crate::output::DeleteEventIntegrationOutput {
            crate::output::DeleteEventIntegrationOutput {}
        }
    }
}
impl DeleteEventIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEventIntegrationOutput`](crate::output::DeleteEventIntegrationOutput)
    pub fn builder() -> crate::output::delete_event_integration_output::Builder {
        crate::output::delete_event_integration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDataIntegrationOutput {}
impl std::fmt::Debug for DeleteDataIntegrationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDataIntegrationOutput");
        formatter.finish()
    }
}
/// See [`DeleteDataIntegrationOutput`](crate::output::DeleteDataIntegrationOutput)
pub mod delete_data_integration_output {
    /// A builder for [`DeleteDataIntegrationOutput`](crate::output::DeleteDataIntegrationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteDataIntegrationOutput`](crate::output::DeleteDataIntegrationOutput)
        pub fn build(self) -> crate::output::DeleteDataIntegrationOutput {
            crate::output::DeleteDataIntegrationOutput {}
        }
    }
}
impl DeleteDataIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDataIntegrationOutput`](crate::output::DeleteDataIntegrationOutput)
    pub fn builder() -> crate::output::delete_data_integration_output::Builder {
        crate::output::delete_data_integration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateEventIntegrationOutput {
    /// <p>The Amazon Resource Name (ARN) of the event integration. </p>
    pub event_integration_arn: std::option::Option<std::string::String>,
}
impl CreateEventIntegrationOutput {
    /// <p>The Amazon Resource Name (ARN) of the event integration. </p>
    pub fn event_integration_arn(&self) -> std::option::Option<&str> {
        self.event_integration_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateEventIntegrationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateEventIntegrationOutput");
        formatter.field("event_integration_arn", &self.event_integration_arn);
        formatter.finish()
    }
}
/// See [`CreateEventIntegrationOutput`](crate::output::CreateEventIntegrationOutput)
pub mod create_event_integration_output {
    /// A builder for [`CreateEventIntegrationOutput`](crate::output::CreateEventIntegrationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_integration_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the event integration. </p>
        pub fn event_integration_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.event_integration_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the event integration. </p>
        pub fn set_event_integration_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.event_integration_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateEventIntegrationOutput`](crate::output::CreateEventIntegrationOutput)
        pub fn build(self) -> crate::output::CreateEventIntegrationOutput {
            crate::output::CreateEventIntegrationOutput {
                event_integration_arn: self.event_integration_arn,
            }
        }
    }
}
impl CreateEventIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`CreateEventIntegrationOutput`](crate::output::CreateEventIntegrationOutput)
    pub fn builder() -> crate::output::create_event_integration_output::Builder {
        crate::output::create_event_integration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDataIntegrationOutput {
    /// <p>The Amazon Resource Name (ARN)</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>A unique identifier.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the DataIntegration.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the DataIntegration.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The KMS key for the DataIntegration.</p>
    pub kms_key: std::option::Option<std::string::String>,
    /// <p>The URI of the data source.</p>
    pub source_uri: std::option::Option<std::string::String>,
    /// <p>The name of the data and how often it should be pulled from the source.</p>
    pub schedule_configuration: std::option::Option<crate::model::ScheduleConfiguration>,
    /// <p>One or more tags.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub client_token: std::option::Option<std::string::String>,
}
impl CreateDataIntegrationOutput {
    /// <p>The Amazon Resource Name (ARN)</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A unique identifier.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the DataIntegration.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the DataIntegration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The KMS key for the DataIntegration.</p>
    pub fn kms_key(&self) -> std::option::Option<&str> {
        self.kms_key.as_deref()
    }
    /// <p>The URI of the data source.</p>
    pub fn source_uri(&self) -> std::option::Option<&str> {
        self.source_uri.as_deref()
    }
    /// <p>The name of the data and how often it should be pulled from the source.</p>
    pub fn schedule_configuration(
        &self,
    ) -> std::option::Option<&crate::model::ScheduleConfiguration> {
        self.schedule_configuration.as_ref()
    }
    /// <p>One or more tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl std::fmt::Debug for CreateDataIntegrationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDataIntegrationOutput");
        formatter.field("arn", &self.arn);
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("kms_key", &self.kms_key);
        formatter.field("source_uri", &self.source_uri);
        formatter.field("schedule_configuration", &self.schedule_configuration);
        formatter.field("tags", &self.tags);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
/// See [`CreateDataIntegrationOutput`](crate::output::CreateDataIntegrationOutput)
pub mod create_data_integration_output {
    /// A builder for [`CreateDataIntegrationOutput`](crate::output::CreateDataIntegrationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) kms_key: std::option::Option<std::string::String>,
        pub(crate) source_uri: std::option::Option<std::string::String>,
        pub(crate) schedule_configuration: std::option::Option<crate::model::ScheduleConfiguration>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) client_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN)</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN)</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>A unique identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>A unique identifier.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the DataIntegration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the DataIntegration.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>A description of the DataIntegration.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>A description of the DataIntegration.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The KMS key for the DataIntegration.</p>
        pub fn kms_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key = Some(input.into());
            self
        }
        /// <p>The KMS key for the DataIntegration.</p>
        pub fn set_kms_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key = input;
            self
        }
        /// <p>The URI of the data source.</p>
        pub fn source_uri(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_uri = Some(input.into());
            self
        }
        /// <p>The URI of the data source.</p>
        pub fn set_source_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.source_uri = input;
            self
        }
        /// <p>The name of the data and how often it should be pulled from the source.</p>
        pub fn schedule_configuration(
            mut self,
            input: crate::model::ScheduleConfiguration,
        ) -> Self {
            self.schedule_configuration = Some(input);
            self
        }
        /// <p>The name of the data and how often it should be pulled from the source.</p>
        pub fn set_schedule_configuration(
            mut self,
            input: std::option::Option<crate::model::ScheduleConfiguration>,
        ) -> Self {
            self.schedule_configuration = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>One or more tags.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>One or more tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDataIntegrationOutput`](crate::output::CreateDataIntegrationOutput)
        pub fn build(self) -> crate::output::CreateDataIntegrationOutput {
            crate::output::CreateDataIntegrationOutput {
                arn: self.arn,
                id: self.id,
                name: self.name,
                description: self.description,
                kms_key: self.kms_key,
                source_uri: self.source_uri,
                schedule_configuration: self.schedule_configuration,
                tags: self.tags,
                client_token: self.client_token,
            }
        }
    }
}
impl CreateDataIntegrationOutput {
    /// Creates a new builder-style object to manufacture [`CreateDataIntegrationOutput`](crate::output::CreateDataIntegrationOutput)
    pub fn builder() -> crate::output::create_data_integration_output::Builder {
        crate::output::create_data_integration_output::Builder::default()
    }
}
