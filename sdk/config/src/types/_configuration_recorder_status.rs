// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The current status of the configuration recorder.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfigurationRecorderStatus {
    /// <p>The name of the configuration recorder.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The time the recorder was last started.</p>
    #[doc(hidden)]
    pub last_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the recorder was last stopped.</p>
    #[doc(hidden)]
    pub last_stop_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies whether or not the recorder is currently recording.</p>
    #[doc(hidden)]
    pub recording: bool,
    /// <p>The last (previous) status of the recorder.</p>
    #[doc(hidden)]
    pub last_status: std::option::Option<crate::types::RecorderStatus>,
    /// <p>The error code indicating that the recording failed.</p>
    #[doc(hidden)]
    pub last_error_code: std::option::Option<std::string::String>,
    /// <p>The message indicating that the recording failed due to an error.</p>
    #[doc(hidden)]
    pub last_error_message: std::option::Option<std::string::String>,
    /// <p>The time when the status was last changed.</p>
    #[doc(hidden)]
    pub last_status_change_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ConfigurationRecorderStatus {
    /// <p>The name of the configuration recorder.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The time the recorder was last started.</p>
    pub fn last_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_start_time.as_ref()
    }
    /// <p>The time the recorder was last stopped.</p>
    pub fn last_stop_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_stop_time.as_ref()
    }
    /// <p>Specifies whether or not the recorder is currently recording.</p>
    pub fn recording(&self) -> bool {
        self.recording
    }
    /// <p>The last (previous) status of the recorder.</p>
    pub fn last_status(&self) -> std::option::Option<&crate::types::RecorderStatus> {
        self.last_status.as_ref()
    }
    /// <p>The error code indicating that the recording failed.</p>
    pub fn last_error_code(&self) -> std::option::Option<&str> {
        self.last_error_code.as_deref()
    }
    /// <p>The message indicating that the recording failed due to an error.</p>
    pub fn last_error_message(&self) -> std::option::Option<&str> {
        self.last_error_message.as_deref()
    }
    /// <p>The time when the status was last changed.</p>
    pub fn last_status_change_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_status_change_time.as_ref()
    }
}
impl ConfigurationRecorderStatus {
    /// Creates a new builder-style object to manufacture [`ConfigurationRecorderStatus`](crate::types::ConfigurationRecorderStatus).
    pub fn builder() -> crate::types::builders::ConfigurationRecorderStatusBuilder {
        crate::types::builders::ConfigurationRecorderStatusBuilder::default()
    }
}

/// A builder for [`ConfigurationRecorderStatus`](crate::types::ConfigurationRecorderStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConfigurationRecorderStatusBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) last_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_stop_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) recording: std::option::Option<bool>,
    pub(crate) last_status: std::option::Option<crate::types::RecorderStatus>,
    pub(crate) last_error_code: std::option::Option<std::string::String>,
    pub(crate) last_error_message: std::option::Option<std::string::String>,
    pub(crate) last_status_change_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ConfigurationRecorderStatusBuilder {
    /// <p>The name of the configuration recorder.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the configuration recorder.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The time the recorder was last started.</p>
    pub fn last_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_start_time = Some(input);
        self
    }
    /// <p>The time the recorder was last started.</p>
    pub fn set_last_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_start_time = input;
        self
    }
    /// <p>The time the recorder was last stopped.</p>
    pub fn last_stop_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_stop_time = Some(input);
        self
    }
    /// <p>The time the recorder was last stopped.</p>
    pub fn set_last_stop_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_stop_time = input;
        self
    }
    /// <p>Specifies whether or not the recorder is currently recording.</p>
    pub fn recording(mut self, input: bool) -> Self {
        self.recording = Some(input);
        self
    }
    /// <p>Specifies whether or not the recorder is currently recording.</p>
    pub fn set_recording(mut self, input: std::option::Option<bool>) -> Self {
        self.recording = input;
        self
    }
    /// <p>The last (previous) status of the recorder.</p>
    pub fn last_status(mut self, input: crate::types::RecorderStatus) -> Self {
        self.last_status = Some(input);
        self
    }
    /// <p>The last (previous) status of the recorder.</p>
    pub fn set_last_status(
        mut self,
        input: std::option::Option<crate::types::RecorderStatus>,
    ) -> Self {
        self.last_status = input;
        self
    }
    /// <p>The error code indicating that the recording failed.</p>
    pub fn last_error_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_error_code = Some(input.into());
        self
    }
    /// <p>The error code indicating that the recording failed.</p>
    pub fn set_last_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_error_code = input;
        self
    }
    /// <p>The message indicating that the recording failed due to an error.</p>
    pub fn last_error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_error_message = Some(input.into());
        self
    }
    /// <p>The message indicating that the recording failed due to an error.</p>
    pub fn set_last_error_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_error_message = input;
        self
    }
    /// <p>The time when the status was last changed.</p>
    pub fn last_status_change_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_status_change_time = Some(input);
        self
    }
    /// <p>The time when the status was last changed.</p>
    pub fn set_last_status_change_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_status_change_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ConfigurationRecorderStatus`](crate::types::ConfigurationRecorderStatus).
    pub fn build(self) -> crate::types::ConfigurationRecorderStatus {
        crate::types::ConfigurationRecorderStatus {
            name: self.name,
            last_start_time: self.last_start_time,
            last_stop_time: self.last_stop_time,
            recording: self.recording.unwrap_or_default(),
            last_status: self.last_status,
            last_error_code: self.last_error_code,
            last_error_message: self.last_error_message,
            last_status_change_time: self.last_status_change_time,
        }
    }
}
