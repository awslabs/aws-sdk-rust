// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filters the results by resource account ID, region, resource ID, and resource name.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceFilters {
    /// <p>The 12-digit source account ID.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The ID of the resource.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The name of the resource.</p>
    #[doc(hidden)]
    pub resource_name: std::option::Option<std::string::String>,
    /// <p>The source region.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
}
impl ResourceFilters {
    /// <p>The 12-digit source account ID.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The ID of the resource.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The name of the resource.</p>
    pub fn resource_name(&self) -> std::option::Option<&str> {
        self.resource_name.as_deref()
    }
    /// <p>The source region.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
}
impl ResourceFilters {
    /// Creates a new builder-style object to manufacture [`ResourceFilters`](crate::types::ResourceFilters).
    pub fn builder() -> crate::types::builders::ResourceFiltersBuilder {
        crate::types::builders::ResourceFiltersBuilder::default()
    }
}

/// A builder for [`ResourceFilters`](crate::types::ResourceFilters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceFiltersBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) resource_name: std::option::Option<std::string::String>,
    pub(crate) region: std::option::Option<std::string::String>,
}
impl ResourceFiltersBuilder {
    /// <p>The 12-digit source account ID.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The 12-digit source account ID.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The ID of the resource.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The ID of the resource.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The name of the resource.</p>
    pub fn resource_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_name = Some(input.into());
        self
    }
    /// <p>The name of the resource.</p>
    pub fn set_resource_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_name = input;
        self
    }
    /// <p>The source region.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The source region.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceFilters`](crate::types::ResourceFilters).
    pub fn build(self) -> crate::types::ResourceFilters {
        crate::types::ResourceFilters {
            account_id: self.account_id,
            resource_id: self.resource_id,
            resource_name: self.resource_name,
            region: self.region,
        }
    }
}
