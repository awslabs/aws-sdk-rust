// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details about the configuration aggregator, including information about source accounts, regions, and metadata of the aggregator. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfigurationAggregator {
    /// <p>The name of the aggregator.</p>
    #[doc(hidden)]
    pub configuration_aggregator_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the aggregator.</p>
    #[doc(hidden)]
    pub configuration_aggregator_arn: std::option::Option<std::string::String>,
    /// <p>Provides a list of source accounts and regions to be aggregated.</p>
    #[doc(hidden)]
    pub account_aggregation_sources:
        std::option::Option<std::vec::Vec<crate::types::AccountAggregationSource>>,
    /// <p>Provides an organization and list of regions to be aggregated.</p>
    #[doc(hidden)]
    pub organization_aggregation_source:
        std::option::Option<crate::types::OrganizationAggregationSource>,
    /// <p>The time stamp when the configuration aggregator was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time of the last update.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Amazon Web Services service that created the configuration aggregator.</p>
    #[doc(hidden)]
    pub created_by: std::option::Option<std::string::String>,
}
impl ConfigurationAggregator {
    /// <p>The name of the aggregator.</p>
    pub fn configuration_aggregator_name(&self) -> std::option::Option<&str> {
        self.configuration_aggregator_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the aggregator.</p>
    pub fn configuration_aggregator_arn(&self) -> std::option::Option<&str> {
        self.configuration_aggregator_arn.as_deref()
    }
    /// <p>Provides a list of source accounts and regions to be aggregated.</p>
    pub fn account_aggregation_sources(
        &self,
    ) -> std::option::Option<&[crate::types::AccountAggregationSource]> {
        self.account_aggregation_sources.as_deref()
    }
    /// <p>Provides an organization and list of regions to be aggregated.</p>
    pub fn organization_aggregation_source(
        &self,
    ) -> std::option::Option<&crate::types::OrganizationAggregationSource> {
        self.organization_aggregation_source.as_ref()
    }
    /// <p>The time stamp when the configuration aggregator was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time of the last update.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>Amazon Web Services service that created the configuration aggregator.</p>
    pub fn created_by(&self) -> std::option::Option<&str> {
        self.created_by.as_deref()
    }
}
impl ConfigurationAggregator {
    /// Creates a new builder-style object to manufacture [`ConfigurationAggregator`](crate::types::ConfigurationAggregator).
    pub fn builder() -> crate::types::builders::ConfigurationAggregatorBuilder {
        crate::types::builders::ConfigurationAggregatorBuilder::default()
    }
}

/// A builder for [`ConfigurationAggregator`](crate::types::ConfigurationAggregator).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConfigurationAggregatorBuilder {
    pub(crate) configuration_aggregator_name: std::option::Option<std::string::String>,
    pub(crate) configuration_aggregator_arn: std::option::Option<std::string::String>,
    pub(crate) account_aggregation_sources:
        std::option::Option<std::vec::Vec<crate::types::AccountAggregationSource>>,
    pub(crate) organization_aggregation_source:
        std::option::Option<crate::types::OrganizationAggregationSource>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_by: std::option::Option<std::string::String>,
}
impl ConfigurationAggregatorBuilder {
    /// <p>The name of the aggregator.</p>
    pub fn configuration_aggregator_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_aggregator_name = Some(input.into());
        self
    }
    /// <p>The name of the aggregator.</p>
    pub fn set_configuration_aggregator_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_aggregator_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the aggregator.</p>
    pub fn configuration_aggregator_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_aggregator_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the aggregator.</p>
    pub fn set_configuration_aggregator_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_aggregator_arn = input;
        self
    }
    /// Appends an item to `account_aggregation_sources`.
    ///
    /// To override the contents of this collection use [`set_account_aggregation_sources`](Self::set_account_aggregation_sources).
    ///
    /// <p>Provides a list of source accounts and regions to be aggregated.</p>
    pub fn account_aggregation_sources(
        mut self,
        input: crate::types::AccountAggregationSource,
    ) -> Self {
        let mut v = self.account_aggregation_sources.unwrap_or_default();
        v.push(input);
        self.account_aggregation_sources = Some(v);
        self
    }
    /// <p>Provides a list of source accounts and regions to be aggregated.</p>
    pub fn set_account_aggregation_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AccountAggregationSource>>,
    ) -> Self {
        self.account_aggregation_sources = input;
        self
    }
    /// <p>Provides an organization and list of regions to be aggregated.</p>
    pub fn organization_aggregation_source(
        mut self,
        input: crate::types::OrganizationAggregationSource,
    ) -> Self {
        self.organization_aggregation_source = Some(input);
        self
    }
    /// <p>Provides an organization and list of regions to be aggregated.</p>
    pub fn set_organization_aggregation_source(
        mut self,
        input: std::option::Option<crate::types::OrganizationAggregationSource>,
    ) -> Self {
        self.organization_aggregation_source = input;
        self
    }
    /// <p>The time stamp when the configuration aggregator was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time stamp when the configuration aggregator was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time of the last update.</p>
    pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = Some(input);
        self
    }
    /// <p>The time of the last update.</p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>Amazon Web Services service that created the configuration aggregator.</p>
    pub fn created_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_by = Some(input.into());
        self
    }
    /// <p>Amazon Web Services service that created the configuration aggregator.</p>
    pub fn set_created_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// Consumes the builder and constructs a [`ConfigurationAggregator`](crate::types::ConfigurationAggregator).
    pub fn build(self) -> crate::types::ConfigurationAggregator {
        crate::types::ConfigurationAggregator {
            configuration_aggregator_name: self.configuration_aggregator_name,
            configuration_aggregator_arn: self.configuration_aggregator_arn,
            account_aggregation_sources: self.account_aggregation_sources,
            organization_aggregation_source: self.organization_aggregation_source,
            creation_time: self.creation_time,
            last_updated_time: self.last_updated_time,
            created_by: self.created_by,
        }
    }
}
