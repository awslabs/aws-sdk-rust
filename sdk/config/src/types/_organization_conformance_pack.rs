// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An organization conformance pack that has information about conformance packs that Config creates in member accounts. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OrganizationConformancePack {
    /// <p>The name you assign to an organization conformance pack.</p>
    #[doc(hidden)]
    pub organization_conformance_pack_name: std::option::Option<std::string::String>,
    /// <p>Amazon Resource Name (ARN) of organization conformance pack.</p>
    #[doc(hidden)]
    pub organization_conformance_pack_arn: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon S3 bucket where Config stores conformance pack templates. </p> <note>
    /// <p>This field is optional.</p>
    /// </note>
    #[doc(hidden)]
    pub delivery_s3_bucket: std::option::Option<std::string::String>,
    /// <p>Any folder structure you want to add to an Amazon S3 bucket.</p> <note>
    /// <p>This field is optional.</p>
    /// </note>
    #[doc(hidden)]
    pub delivery_s3_key_prefix: std::option::Option<std::string::String>,
    /// <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
    #[doc(hidden)]
    pub conformance_pack_input_parameters:
        std::option::Option<std::vec::Vec<crate::types::ConformancePackInputParameter>>,
    /// <p>A comma-separated list of accounts excluded from organization conformance pack.</p>
    #[doc(hidden)]
    pub excluded_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Last time when organization conformation pack was updated.</p>
    #[doc(hidden)]
    pub last_update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl OrganizationConformancePack {
    /// <p>The name you assign to an organization conformance pack.</p>
    pub fn organization_conformance_pack_name(&self) -> std::option::Option<&str> {
        self.organization_conformance_pack_name.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) of organization conformance pack.</p>
    pub fn organization_conformance_pack_arn(&self) -> std::option::Option<&str> {
        self.organization_conformance_pack_arn.as_deref()
    }
    /// <p>The name of the Amazon S3 bucket where Config stores conformance pack templates. </p> <note>
    /// <p>This field is optional.</p>
    /// </note>
    pub fn delivery_s3_bucket(&self) -> std::option::Option<&str> {
        self.delivery_s3_bucket.as_deref()
    }
    /// <p>Any folder structure you want to add to an Amazon S3 bucket.</p> <note>
    /// <p>This field is optional.</p>
    /// </note>
    pub fn delivery_s3_key_prefix(&self) -> std::option::Option<&str> {
        self.delivery_s3_key_prefix.as_deref()
    }
    /// <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
    pub fn conformance_pack_input_parameters(
        &self,
    ) -> std::option::Option<&[crate::types::ConformancePackInputParameter]> {
        self.conformance_pack_input_parameters.as_deref()
    }
    /// <p>A comma-separated list of accounts excluded from organization conformance pack.</p>
    pub fn excluded_accounts(&self) -> std::option::Option<&[std::string::String]> {
        self.excluded_accounts.as_deref()
    }
    /// <p>Last time when organization conformation pack was updated.</p>
    pub fn last_update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
}
impl OrganizationConformancePack {
    /// Creates a new builder-style object to manufacture [`OrganizationConformancePack`](crate::types::OrganizationConformancePack).
    pub fn builder() -> crate::types::builders::OrganizationConformancePackBuilder {
        crate::types::builders::OrganizationConformancePackBuilder::default()
    }
}

/// A builder for [`OrganizationConformancePack`](crate::types::OrganizationConformancePack).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OrganizationConformancePackBuilder {
    pub(crate) organization_conformance_pack_name: std::option::Option<std::string::String>,
    pub(crate) organization_conformance_pack_arn: std::option::Option<std::string::String>,
    pub(crate) delivery_s3_bucket: std::option::Option<std::string::String>,
    pub(crate) delivery_s3_key_prefix: std::option::Option<std::string::String>,
    pub(crate) conformance_pack_input_parameters:
        std::option::Option<std::vec::Vec<crate::types::ConformancePackInputParameter>>,
    pub(crate) excluded_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) last_update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl OrganizationConformancePackBuilder {
    /// <p>The name you assign to an organization conformance pack.</p>
    pub fn organization_conformance_pack_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.organization_conformance_pack_name = Some(input.into());
        self
    }
    /// <p>The name you assign to an organization conformance pack.</p>
    pub fn set_organization_conformance_pack_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.organization_conformance_pack_name = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of organization conformance pack.</p>
    pub fn organization_conformance_pack_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.organization_conformance_pack_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of organization conformance pack.</p>
    pub fn set_organization_conformance_pack_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.organization_conformance_pack_arn = input;
        self
    }
    /// <p>The name of the Amazon S3 bucket where Config stores conformance pack templates. </p> <note>
    /// <p>This field is optional.</p>
    /// </note>
    pub fn delivery_s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.delivery_s3_bucket = Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket where Config stores conformance pack templates. </p> <note>
    /// <p>This field is optional.</p>
    /// </note>
    pub fn set_delivery_s3_bucket(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.delivery_s3_bucket = input;
        self
    }
    /// <p>Any folder structure you want to add to an Amazon S3 bucket.</p> <note>
    /// <p>This field is optional.</p>
    /// </note>
    pub fn delivery_s3_key_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.delivery_s3_key_prefix = Some(input.into());
        self
    }
    /// <p>Any folder structure you want to add to an Amazon S3 bucket.</p> <note>
    /// <p>This field is optional.</p>
    /// </note>
    pub fn set_delivery_s3_key_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.delivery_s3_key_prefix = input;
        self
    }
    /// Appends an item to `conformance_pack_input_parameters`.
    ///
    /// To override the contents of this collection use [`set_conformance_pack_input_parameters`](Self::set_conformance_pack_input_parameters).
    ///
    /// <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
    pub fn conformance_pack_input_parameters(
        mut self,
        input: crate::types::ConformancePackInputParameter,
    ) -> Self {
        let mut v = self.conformance_pack_input_parameters.unwrap_or_default();
        v.push(input);
        self.conformance_pack_input_parameters = Some(v);
        self
    }
    /// <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
    pub fn set_conformance_pack_input_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConformancePackInputParameter>>,
    ) -> Self {
        self.conformance_pack_input_parameters = input;
        self
    }
    /// Appends an item to `excluded_accounts`.
    ///
    /// To override the contents of this collection use [`set_excluded_accounts`](Self::set_excluded_accounts).
    ///
    /// <p>A comma-separated list of accounts excluded from organization conformance pack.</p>
    pub fn excluded_accounts(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.excluded_accounts.unwrap_or_default();
        v.push(input.into());
        self.excluded_accounts = Some(v);
        self
    }
    /// <p>A comma-separated list of accounts excluded from organization conformance pack.</p>
    pub fn set_excluded_accounts(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.excluded_accounts = input;
        self
    }
    /// <p>Last time when organization conformation pack was updated.</p>
    pub fn last_update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_update_time = Some(input);
        self
    }
    /// <p>Last time when organization conformation pack was updated.</p>
    pub fn set_last_update_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_update_time = input;
        self
    }
    /// Consumes the builder and constructs a [`OrganizationConformancePack`](crate::types::OrganizationConformancePack).
    pub fn build(self) -> crate::types::OrganizationConformancePack {
        crate::types::OrganizationConformancePack {
            organization_conformance_pack_name: self.organization_conformance_pack_name,
            organization_conformance_pack_arn: self.organization_conformance_pack_arn,
            delivery_s3_bucket: self.delivery_s3_bucket,
            delivery_s3_key_prefix: self.delivery_s3_key_prefix,
            conformance_pack_input_parameters: self.conformance_pack_input_parameters,
            excluded_accounts: self.excluded_accounts,
            last_update_time: self.last_update_time,
        }
    }
}
