// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The count of resources that are grouped by the group name.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GroupedResourceCount {
    /// <p>The name of the group that can be region, account ID, or resource type. For example, region1, region2 if the region was chosen as <code>GroupByKey</code>.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>The number of resources in the group.</p>
    #[doc(hidden)]
    pub resource_count: i64,
}
impl GroupedResourceCount {
    /// <p>The name of the group that can be region, account ID, or resource type. For example, region1, region2 if the region was chosen as <code>GroupByKey</code>.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The number of resources in the group.</p>
    pub fn resource_count(&self) -> i64 {
        self.resource_count
    }
}
impl GroupedResourceCount {
    /// Creates a new builder-style object to manufacture [`GroupedResourceCount`](crate::types::GroupedResourceCount).
    pub fn builder() -> crate::types::builders::GroupedResourceCountBuilder {
        crate::types::builders::GroupedResourceCountBuilder::default()
    }
}

/// A builder for [`GroupedResourceCount`](crate::types::GroupedResourceCount).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GroupedResourceCountBuilder {
    pub(crate) group_name: std::option::Option<std::string::String>,
    pub(crate) resource_count: std::option::Option<i64>,
}
impl GroupedResourceCountBuilder {
    /// <p>The name of the group that can be region, account ID, or resource type. For example, region1, region2 if the region was chosen as <code>GroupByKey</code>.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>The name of the group that can be region, account ID, or resource type. For example, region1, region2 if the region was chosen as <code>GroupByKey</code>.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The number of resources in the group.</p>
    pub fn resource_count(mut self, input: i64) -> Self {
        self.resource_count = Some(input);
        self
    }
    /// <p>The number of resources in the group.</p>
    pub fn set_resource_count(mut self, input: std::option::Option<i64>) -> Self {
        self.resource_count = input;
        self
    }
    /// Consumes the builder and constructs a [`GroupedResourceCount`](crate::types::GroupedResourceCount).
    pub fn build(self) -> crate::types::GroupedResourceCount {
        crate::types::GroupedResourceCount {
            group_name: self.group_name,
            resource_count: self.resource_count.unwrap_or_default(),
        }
    }
}
