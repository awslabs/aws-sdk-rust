// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns details of a specific query. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StoredQueryMetadata {
    /// <p>The ID of the query. </p>
    #[doc(hidden)]
    pub query_id: std::option::Option<std::string::String>,
    /// <p>Amazon Resource Name (ARN) of the query. For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.</p>
    #[doc(hidden)]
    pub query_arn: std::option::Option<std::string::String>,
    /// <p>The name of the query.</p>
    #[doc(hidden)]
    pub query_name: std::option::Option<std::string::String>,
    /// <p>A unique description for the query.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl StoredQueryMetadata {
    /// <p>The ID of the query. </p>
    pub fn query_id(&self) -> std::option::Option<&str> {
        self.query_id.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) of the query. For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.</p>
    pub fn query_arn(&self) -> std::option::Option<&str> {
        self.query_arn.as_deref()
    }
    /// <p>The name of the query.</p>
    pub fn query_name(&self) -> std::option::Option<&str> {
        self.query_name.as_deref()
    }
    /// <p>A unique description for the query.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl StoredQueryMetadata {
    /// Creates a new builder-style object to manufacture [`StoredQueryMetadata`](crate::types::StoredQueryMetadata).
    pub fn builder() -> crate::types::builders::StoredQueryMetadataBuilder {
        crate::types::builders::StoredQueryMetadataBuilder::default()
    }
}

/// A builder for [`StoredQueryMetadata`](crate::types::StoredQueryMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StoredQueryMetadataBuilder {
    pub(crate) query_id: std::option::Option<std::string::String>,
    pub(crate) query_arn: std::option::Option<std::string::String>,
    pub(crate) query_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl StoredQueryMetadataBuilder {
    /// <p>The ID of the query. </p>
    pub fn query_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_id = Some(input.into());
        self
    }
    /// <p>The ID of the query. </p>
    pub fn set_query_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_id = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the query. For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.</p>
    pub fn query_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the query. For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.</p>
    pub fn set_query_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_arn = input;
        self
    }
    /// <p>The name of the query.</p>
    pub fn query_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_name = Some(input.into());
        self
    }
    /// <p>The name of the query.</p>
    pub fn set_query_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_name = input;
        self
    }
    /// <p>A unique description for the query.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A unique description for the query.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`StoredQueryMetadata`](crate::types::StoredQueryMetadata).
    pub fn build(self) -> crate::types::StoredQueryMetadata {
        crate::types::StoredQueryMetadata {
            query_id: self.query_id,
            query_arn: self.query_arn,
            query_name: self.query_name,
            description: self.description,
        }
    }
}
