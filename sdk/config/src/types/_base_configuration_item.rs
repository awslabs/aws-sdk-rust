// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The detailed configuration of a specified resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BaseConfigurationItem {
    /// <p>The version number of the resource configuration.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>The 12-digit Amazon Web Services account ID associated with the resource.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The time when the configuration recording was initiated.</p>
    #[doc(hidden)]
    pub configuration_item_capture_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The configuration item status. The valid values are:</p>
    /// <ul>
    /// <li> <p>OK – The resource configuration has been updated</p> </li>
    /// <li> <p>ResourceDiscovered – The resource was newly discovered</p> </li>
    /// <li> <p>ResourceNotRecorded – The resource was discovered but its configuration was not recorded since the recorder excludes the recording of resources of this type</p> </li>
    /// <li> <p>ResourceDeleted – The resource was deleted</p> </li>
    /// <li> <p>ResourceDeletedNotRecorded – The resource was deleted but its configuration was not recorded since the recorder excludes the recording of resources of this type</p> </li>
    /// </ul> <note>
    /// <p>The CIs do not incur any cost.</p>
    /// </note>
    #[doc(hidden)]
    pub configuration_item_status: std::option::Option<crate::types::ConfigurationItemStatus>,
    /// <p>An identifier that indicates the ordering of the configuration items of a resource.</p>
    #[doc(hidden)]
    pub configuration_state_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The type of Amazon Web Services resource.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p>The ID of the resource (for example., sg-xxxxxx).</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The custom name of the resource, if available.</p>
    #[doc(hidden)]
    pub resource_name: std::option::Option<std::string::String>,
    /// <p>The region where the resource resides.</p>
    #[doc(hidden)]
    pub aws_region: std::option::Option<std::string::String>,
    /// <p>The Availability Zone associated with the resource.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The time stamp when the resource was created.</p>
    #[doc(hidden)]
    pub resource_creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The description of the resource configuration.</p>
    #[doc(hidden)]
    pub configuration: std::option::Option<std::string::String>,
    /// <p>Configuration attributes that Config returns for certain resource types to supplement the information returned for the configuration parameter.</p>
    #[doc(hidden)]
    pub supplementary_configuration:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl BaseConfigurationItem {
    /// <p>The version number of the resource configuration.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The 12-digit Amazon Web Services account ID associated with the resource.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The time when the configuration recording was initiated.</p>
    pub fn configuration_item_capture_time(
        &self,
    ) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.configuration_item_capture_time.as_ref()
    }
    /// <p>The configuration item status. The valid values are:</p>
    /// <ul>
    /// <li> <p>OK – The resource configuration has been updated</p> </li>
    /// <li> <p>ResourceDiscovered – The resource was newly discovered</p> </li>
    /// <li> <p>ResourceNotRecorded – The resource was discovered but its configuration was not recorded since the recorder excludes the recording of resources of this type</p> </li>
    /// <li> <p>ResourceDeleted – The resource was deleted</p> </li>
    /// <li> <p>ResourceDeletedNotRecorded – The resource was deleted but its configuration was not recorded since the recorder excludes the recording of resources of this type</p> </li>
    /// </ul> <note>
    /// <p>The CIs do not incur any cost.</p>
    /// </note>
    pub fn configuration_item_status(
        &self,
    ) -> std::option::Option<&crate::types::ConfigurationItemStatus> {
        self.configuration_item_status.as_ref()
    }
    /// <p>An identifier that indicates the ordering of the configuration items of a resource.</p>
    pub fn configuration_state_id(&self) -> std::option::Option<&str> {
        self.configuration_state_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The type of Amazon Web Services resource.</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The ID of the resource (for example., sg-xxxxxx).</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The custom name of the resource, if available.</p>
    pub fn resource_name(&self) -> std::option::Option<&str> {
        self.resource_name.as_deref()
    }
    /// <p>The region where the resource resides.</p>
    pub fn aws_region(&self) -> std::option::Option<&str> {
        self.aws_region.as_deref()
    }
    /// <p>The Availability Zone associated with the resource.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The time stamp when the resource was created.</p>
    pub fn resource_creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.resource_creation_time.as_ref()
    }
    /// <p>The description of the resource configuration.</p>
    pub fn configuration(&self) -> std::option::Option<&str> {
        self.configuration.as_deref()
    }
    /// <p>Configuration attributes that Config returns for certain resource types to supplement the information returned for the configuration parameter.</p>
    pub fn supplementary_configuration(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.supplementary_configuration.as_ref()
    }
}
impl BaseConfigurationItem {
    /// Creates a new builder-style object to manufacture [`BaseConfigurationItem`](crate::types::BaseConfigurationItem).
    pub fn builder() -> crate::types::builders::BaseConfigurationItemBuilder {
        crate::types::builders::BaseConfigurationItemBuilder::default()
    }
}

/// A builder for [`BaseConfigurationItem`](crate::types::BaseConfigurationItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BaseConfigurationItemBuilder {
    pub(crate) version: std::option::Option<std::string::String>,
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) configuration_item_capture_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) configuration_item_status:
        std::option::Option<crate::types::ConfigurationItemStatus>,
    pub(crate) configuration_state_id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) resource_name: std::option::Option<std::string::String>,
    pub(crate) aws_region: std::option::Option<std::string::String>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) resource_creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) configuration: std::option::Option<std::string::String>,
    pub(crate) supplementary_configuration:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl BaseConfigurationItemBuilder {
    /// <p>The version number of the resource configuration.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version number of the resource configuration.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The 12-digit Amazon Web Services account ID associated with the resource.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The 12-digit Amazon Web Services account ID associated with the resource.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The time when the configuration recording was initiated.</p>
    pub fn configuration_item_capture_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.configuration_item_capture_time = Some(input);
        self
    }
    /// <p>The time when the configuration recording was initiated.</p>
    pub fn set_configuration_item_capture_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.configuration_item_capture_time = input;
        self
    }
    /// <p>The configuration item status. The valid values are:</p>
    /// <ul>
    /// <li> <p>OK – The resource configuration has been updated</p> </li>
    /// <li> <p>ResourceDiscovered – The resource was newly discovered</p> </li>
    /// <li> <p>ResourceNotRecorded – The resource was discovered but its configuration was not recorded since the recorder excludes the recording of resources of this type</p> </li>
    /// <li> <p>ResourceDeleted – The resource was deleted</p> </li>
    /// <li> <p>ResourceDeletedNotRecorded – The resource was deleted but its configuration was not recorded since the recorder excludes the recording of resources of this type</p> </li>
    /// </ul> <note>
    /// <p>The CIs do not incur any cost.</p>
    /// </note>
    pub fn configuration_item_status(
        mut self,
        input: crate::types::ConfigurationItemStatus,
    ) -> Self {
        self.configuration_item_status = Some(input);
        self
    }
    /// <p>The configuration item status. The valid values are:</p>
    /// <ul>
    /// <li> <p>OK – The resource configuration has been updated</p> </li>
    /// <li> <p>ResourceDiscovered – The resource was newly discovered</p> </li>
    /// <li> <p>ResourceNotRecorded – The resource was discovered but its configuration was not recorded since the recorder excludes the recording of resources of this type</p> </li>
    /// <li> <p>ResourceDeleted – The resource was deleted</p> </li>
    /// <li> <p>ResourceDeletedNotRecorded – The resource was deleted but its configuration was not recorded since the recorder excludes the recording of resources of this type</p> </li>
    /// </ul> <note>
    /// <p>The CIs do not incur any cost.</p>
    /// </note>
    pub fn set_configuration_item_status(
        mut self,
        input: std::option::Option<crate::types::ConfigurationItemStatus>,
    ) -> Self {
        self.configuration_item_status = input;
        self
    }
    /// <p>An identifier that indicates the ordering of the configuration items of a resource.</p>
    pub fn configuration_state_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_state_id = Some(input.into());
        self
    }
    /// <p>An identifier that indicates the ordering of the configuration items of a resource.</p>
    pub fn set_configuration_state_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_state_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The type of Amazon Web Services resource.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>The type of Amazon Web Services resource.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The ID of the resource (for example., sg-xxxxxx).</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The ID of the resource (for example., sg-xxxxxx).</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The custom name of the resource, if available.</p>
    pub fn resource_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_name = Some(input.into());
        self
    }
    /// <p>The custom name of the resource, if available.</p>
    pub fn set_resource_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_name = input;
        self
    }
    /// <p>The region where the resource resides.</p>
    pub fn aws_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_region = Some(input.into());
        self
    }
    /// <p>The region where the resource resides.</p>
    pub fn set_aws_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>The Availability Zone associated with the resource.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The Availability Zone associated with the resource.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The time stamp when the resource was created.</p>
    pub fn resource_creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.resource_creation_time = Some(input);
        self
    }
    /// <p>The time stamp when the resource was created.</p>
    pub fn set_resource_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.resource_creation_time = input;
        self
    }
    /// <p>The description of the resource configuration.</p>
    pub fn configuration(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration = Some(input.into());
        self
    }
    /// <p>The description of the resource configuration.</p>
    pub fn set_configuration(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.configuration = input;
        self
    }
    /// Adds a key-value pair to `supplementary_configuration`.
    ///
    /// To override the contents of this collection use [`set_supplementary_configuration`](Self::set_supplementary_configuration).
    ///
    /// <p>Configuration attributes that Config returns for certain resource types to supplement the information returned for the configuration parameter.</p>
    pub fn supplementary_configuration(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.supplementary_configuration.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.supplementary_configuration = Some(hash_map);
        self
    }
    /// <p>Configuration attributes that Config returns for certain resource types to supplement the information returned for the configuration parameter.</p>
    pub fn set_supplementary_configuration(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.supplementary_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`BaseConfigurationItem`](crate::types::BaseConfigurationItem).
    pub fn build(self) -> crate::types::BaseConfigurationItem {
        crate::types::BaseConfigurationItem {
            version: self.version,
            account_id: self.account_id,
            configuration_item_capture_time: self.configuration_item_capture_time,
            configuration_item_status: self.configuration_item_status,
            configuration_state_id: self.configuration_state_id,
            arn: self.arn,
            resource_type: self.resource_type,
            resource_id: self.resource_id,
            resource_name: self.resource_name,
            aws_region: self.aws_region,
            availability_zone: self.availability_zone,
            resource_creation_time: self.resource_creation_time,
            configuration: self.configuration,
            supplementary_configuration: self.supplementary_configuration,
        }
    }
}
