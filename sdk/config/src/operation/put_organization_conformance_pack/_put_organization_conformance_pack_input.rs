// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutOrganizationConformancePackInput {
    /// <p>Name of the organization conformance pack you want to create.</p>
    #[doc(hidden)]
    pub organization_conformance_pack_name: std::option::Option<std::string::String>,
    /// <p>Location of file containing the template body. The uri must point to the conformance pack template (max size: 300 KB).</p> <note>
    /// <p>You must have access to read Amazon S3 bucket.</p>
    /// </note>
    #[doc(hidden)]
    pub template_s3_uri: std::option::Option<std::string::String>,
    /// <p>A string containing full conformance pack template body. Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes.</p>
    #[doc(hidden)]
    pub template_body: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon S3 bucket where Config stores conformance pack templates.</p> <note>
    /// <p>This field is optional. If used, it must be prefixed with <code>awsconfigconforms</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub delivery_s3_bucket: std::option::Option<std::string::String>,
    /// <p>The prefix for the Amazon S3 bucket.</p> <note>
    /// <p>This field is optional.</p>
    /// </note>
    #[doc(hidden)]
    pub delivery_s3_key_prefix: std::option::Option<std::string::String>,
    /// <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
    #[doc(hidden)]
    pub conformance_pack_input_parameters:
        std::option::Option<std::vec::Vec<crate::types::ConformancePackInputParameter>>,
    /// <p>A list of Amazon Web Services accounts to be excluded from an organization conformance pack while deploying a conformance pack.</p>
    #[doc(hidden)]
    pub excluded_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PutOrganizationConformancePackInput {
    /// <p>Name of the organization conformance pack you want to create.</p>
    pub fn organization_conformance_pack_name(&self) -> std::option::Option<&str> {
        self.organization_conformance_pack_name.as_deref()
    }
    /// <p>Location of file containing the template body. The uri must point to the conformance pack template (max size: 300 KB).</p> <note>
    /// <p>You must have access to read Amazon S3 bucket.</p>
    /// </note>
    pub fn template_s3_uri(&self) -> std::option::Option<&str> {
        self.template_s3_uri.as_deref()
    }
    /// <p>A string containing full conformance pack template body. Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes.</p>
    pub fn template_body(&self) -> std::option::Option<&str> {
        self.template_body.as_deref()
    }
    /// <p>The name of the Amazon S3 bucket where Config stores conformance pack templates.</p> <note>
    /// <p>This field is optional. If used, it must be prefixed with <code>awsconfigconforms</code>.</p>
    /// </note>
    pub fn delivery_s3_bucket(&self) -> std::option::Option<&str> {
        self.delivery_s3_bucket.as_deref()
    }
    /// <p>The prefix for the Amazon S3 bucket.</p> <note>
    /// <p>This field is optional.</p>
    /// </note>
    pub fn delivery_s3_key_prefix(&self) -> std::option::Option<&str> {
        self.delivery_s3_key_prefix.as_deref()
    }
    /// <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
    pub fn conformance_pack_input_parameters(
        &self,
    ) -> std::option::Option<&[crate::types::ConformancePackInputParameter]> {
        self.conformance_pack_input_parameters.as_deref()
    }
    /// <p>A list of Amazon Web Services accounts to be excluded from an organization conformance pack while deploying a conformance pack.</p>
    pub fn excluded_accounts(&self) -> std::option::Option<&[std::string::String]> {
        self.excluded_accounts.as_deref()
    }
}
impl PutOrganizationConformancePackInput {
    /// Creates a new builder-style object to manufacture [`PutOrganizationConformancePackInput`](crate::operation::put_organization_conformance_pack::PutOrganizationConformancePackInput).
    pub fn builder() -> crate::operation::put_organization_conformance_pack::builders::PutOrganizationConformancePackInputBuilder{
        crate::operation::put_organization_conformance_pack::builders::PutOrganizationConformancePackInputBuilder::default()
    }
}

/// A builder for [`PutOrganizationConformancePackInput`](crate::operation::put_organization_conformance_pack::PutOrganizationConformancePackInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutOrganizationConformancePackInputBuilder {
    pub(crate) organization_conformance_pack_name: std::option::Option<std::string::String>,
    pub(crate) template_s3_uri: std::option::Option<std::string::String>,
    pub(crate) template_body: std::option::Option<std::string::String>,
    pub(crate) delivery_s3_bucket: std::option::Option<std::string::String>,
    pub(crate) delivery_s3_key_prefix: std::option::Option<std::string::String>,
    pub(crate) conformance_pack_input_parameters:
        std::option::Option<std::vec::Vec<crate::types::ConformancePackInputParameter>>,
    pub(crate) excluded_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PutOrganizationConformancePackInputBuilder {
    /// <p>Name of the organization conformance pack you want to create.</p>
    pub fn organization_conformance_pack_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.organization_conformance_pack_name = Some(input.into());
        self
    }
    /// <p>Name of the organization conformance pack you want to create.</p>
    pub fn set_organization_conformance_pack_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.organization_conformance_pack_name = input;
        self
    }
    /// <p>Location of file containing the template body. The uri must point to the conformance pack template (max size: 300 KB).</p> <note>
    /// <p>You must have access to read Amazon S3 bucket.</p>
    /// </note>
    pub fn template_s3_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_s3_uri = Some(input.into());
        self
    }
    /// <p>Location of file containing the template body. The uri must point to the conformance pack template (max size: 300 KB).</p> <note>
    /// <p>You must have access to read Amazon S3 bucket.</p>
    /// </note>
    pub fn set_template_s3_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_s3_uri = input;
        self
    }
    /// <p>A string containing full conformance pack template body. Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes.</p>
    pub fn template_body(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_body = Some(input.into());
        self
    }
    /// <p>A string containing full conformance pack template body. Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes.</p>
    pub fn set_template_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_body = input;
        self
    }
    /// <p>The name of the Amazon S3 bucket where Config stores conformance pack templates.</p> <note>
    /// <p>This field is optional. If used, it must be prefixed with <code>awsconfigconforms</code>.</p>
    /// </note>
    pub fn delivery_s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.delivery_s3_bucket = Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket where Config stores conformance pack templates.</p> <note>
    /// <p>This field is optional. If used, it must be prefixed with <code>awsconfigconforms</code>.</p>
    /// </note>
    pub fn set_delivery_s3_bucket(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.delivery_s3_bucket = input;
        self
    }
    /// <p>The prefix for the Amazon S3 bucket.</p> <note>
    /// <p>This field is optional.</p>
    /// </note>
    pub fn delivery_s3_key_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.delivery_s3_key_prefix = Some(input.into());
        self
    }
    /// <p>The prefix for the Amazon S3 bucket.</p> <note>
    /// <p>This field is optional.</p>
    /// </note>
    pub fn set_delivery_s3_key_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.delivery_s3_key_prefix = input;
        self
    }
    /// Appends an item to `conformance_pack_input_parameters`.
    ///
    /// To override the contents of this collection use [`set_conformance_pack_input_parameters`](Self::set_conformance_pack_input_parameters).
    ///
    /// <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
    pub fn conformance_pack_input_parameters(
        mut self,
        input: crate::types::ConformancePackInputParameter,
    ) -> Self {
        let mut v = self.conformance_pack_input_parameters.unwrap_or_default();
        v.push(input);
        self.conformance_pack_input_parameters = Some(v);
        self
    }
    /// <p>A list of <code>ConformancePackInputParameter</code> objects.</p>
    pub fn set_conformance_pack_input_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConformancePackInputParameter>>,
    ) -> Self {
        self.conformance_pack_input_parameters = input;
        self
    }
    /// Appends an item to `excluded_accounts`.
    ///
    /// To override the contents of this collection use [`set_excluded_accounts`](Self::set_excluded_accounts).
    ///
    /// <p>A list of Amazon Web Services accounts to be excluded from an organization conformance pack while deploying a conformance pack.</p>
    pub fn excluded_accounts(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.excluded_accounts.unwrap_or_default();
        v.push(input.into());
        self.excluded_accounts = Some(v);
        self
    }
    /// <p>A list of Amazon Web Services accounts to be excluded from an organization conformance pack while deploying a conformance pack.</p>
    pub fn set_excluded_accounts(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.excluded_accounts = input;
        self
    }
    /// Consumes the builder and constructs a [`PutOrganizationConformancePackInput`](crate::operation::put_organization_conformance_pack::PutOrganizationConformancePackInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_organization_conformance_pack::PutOrganizationConformancePackInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::put_organization_conformance_pack::PutOrganizationConformancePackInput {
                organization_conformance_pack_name: self.organization_conformance_pack_name
                ,
                template_s3_uri: self.template_s3_uri
                ,
                template_body: self.template_body
                ,
                delivery_s3_bucket: self.delivery_s3_bucket
                ,
                delivery_s3_key_prefix: self.delivery_s3_key_prefix
                ,
                conformance_pack_input_parameters: self.conformance_pack_input_parameters
                ,
                excluded_accounts: self.excluded_accounts
                ,
            }
        )
    }
}
