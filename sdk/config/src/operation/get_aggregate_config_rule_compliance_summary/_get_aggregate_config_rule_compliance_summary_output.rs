// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAggregateConfigRuleComplianceSummaryOutput {
    /// <p>Groups the result based on ACCOUNT_ID or AWS_REGION.</p>
    pub group_by_key: ::std::option::Option<::std::string::String>,
    /// <p>Returns a list of AggregateComplianceCounts object.</p>
    pub aggregate_compliance_counts: ::std::option::Option<::std::vec::Vec<crate::types::AggregateComplianceCount>>,
    /// <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetAggregateConfigRuleComplianceSummaryOutput {
    /// <p>Groups the result based on ACCOUNT_ID or AWS_REGION.</p>
    pub fn group_by_key(&self) -> ::std::option::Option<&str> {
        self.group_by_key.as_deref()
    }
    /// <p>Returns a list of AggregateComplianceCounts object.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aggregate_compliance_counts.is_none()`.
    pub fn aggregate_compliance_counts(&self) -> &[crate::types::AggregateComplianceCount] {
        self.aggregate_compliance_counts.as_deref().unwrap_or_default()
    }
    /// <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetAggregateConfigRuleComplianceSummaryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAggregateConfigRuleComplianceSummaryOutput {
    /// Creates a new builder-style object to manufacture [`GetAggregateConfigRuleComplianceSummaryOutput`](crate::operation::get_aggregate_config_rule_compliance_summary::GetAggregateConfigRuleComplianceSummaryOutput).
    pub fn builder() -> crate::operation::get_aggregate_config_rule_compliance_summary::builders::GetAggregateConfigRuleComplianceSummaryOutputBuilder
    {
        crate::operation::get_aggregate_config_rule_compliance_summary::builders::GetAggregateConfigRuleComplianceSummaryOutputBuilder::default()
    }
}

/// A builder for [`GetAggregateConfigRuleComplianceSummaryOutput`](crate::operation::get_aggregate_config_rule_compliance_summary::GetAggregateConfigRuleComplianceSummaryOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetAggregateConfigRuleComplianceSummaryOutputBuilder {
    pub(crate) group_by_key: ::std::option::Option<::std::string::String>,
    pub(crate) aggregate_compliance_counts: ::std::option::Option<::std::vec::Vec<crate::types::AggregateComplianceCount>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetAggregateConfigRuleComplianceSummaryOutputBuilder {
    /// <p>Groups the result based on ACCOUNT_ID or AWS_REGION.</p>
    pub fn group_by_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_by_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Groups the result based on ACCOUNT_ID or AWS_REGION.</p>
    pub fn set_group_by_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_by_key = input;
        self
    }
    /// <p>Groups the result based on ACCOUNT_ID or AWS_REGION.</p>
    pub fn get_group_by_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_by_key
    }
    /// Appends an item to `aggregate_compliance_counts`.
    ///
    /// To override the contents of this collection use [`set_aggregate_compliance_counts`](Self::set_aggregate_compliance_counts).
    ///
    /// <p>Returns a list of AggregateComplianceCounts object.</p>
    pub fn aggregate_compliance_counts(mut self, input: crate::types::AggregateComplianceCount) -> Self {
        let mut v = self.aggregate_compliance_counts.unwrap_or_default();
        v.push(input);
        self.aggregate_compliance_counts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Returns a list of AggregateComplianceCounts object.</p>
    pub fn set_aggregate_compliance_counts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AggregateComplianceCount>>) -> Self {
        self.aggregate_compliance_counts = input;
        self
    }
    /// <p>Returns a list of AggregateComplianceCounts object.</p>
    pub fn get_aggregate_compliance_counts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AggregateComplianceCount>> {
        &self.aggregate_compliance_counts
    }
    /// <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The <code>nextToken</code> string returned on a previous page that you use to get the next page of results in a paginated response.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAggregateConfigRuleComplianceSummaryOutput`](crate::operation::get_aggregate_config_rule_compliance_summary::GetAggregateConfigRuleComplianceSummaryOutput).
    pub fn build(self) -> crate::operation::get_aggregate_config_rule_compliance_summary::GetAggregateConfigRuleComplianceSummaryOutput {
        crate::operation::get_aggregate_config_rule_compliance_summary::GetAggregateConfigRuleComplianceSummaryOutput {
            group_by_key: self.group_by_key,
            aggregate_compliance_counts: self.aggregate_compliance_counts,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
