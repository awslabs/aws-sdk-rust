// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_remediation_exceptions::_put_remediation_exceptions_output::PutRemediationExceptionsOutputBuilder;

pub use crate::operation::put_remediation_exceptions::_put_remediation_exceptions_input::PutRemediationExceptionsInputBuilder;

/// Fluent builder constructing a request to `PutRemediationExceptions`.
///
/// <p>A remediation exception is when a specific resource is no longer considered for auto-remediation. This API adds a new exception or updates an existing exception for a specific resource with a specific Config rule. </p> <note>
/// <p>Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource. Remediation exceptions blocks auto-remediation until the exception is cleared.</p>
/// </note> <note>
/// <p>To place an exception on an Amazon Web Services resource, ensure remediation is set as manual remediation.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutRemediationExceptionsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::put_remediation_exceptions::builders::PutRemediationExceptionsInputBuilder
            }
impl PutRemediationExceptionsFluentBuilder {
    /// Creates a new `PutRemediationExceptions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_remediation_exceptions::PutRemediationExceptions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::put_remediation_exceptions::PutRemediationExceptionsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_remediation_exceptions::PutRemediationExceptionsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::put_remediation_exceptions::PutRemediationExceptionsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Config rule for which you want to create remediation exception.</p>
    pub fn config_rule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.config_rule_name(input.into());
        self
    }
    /// <p>The name of the Config rule for which you want to create remediation exception.</p>
    pub fn set_config_rule_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_config_rule_name(input);
        self
    }
    /// Appends an item to `ResourceKeys`.
    ///
    /// To override the contents of this collection use [`set_resource_keys`](Self::set_resource_keys).
    ///
    /// <p>An exception list of resource exception keys to be processed with the current request. Config adds exception for each resource key. For example, Config adds 3 exceptions for 3 resource keys. </p>
    pub fn resource_keys(mut self, input: crate::types::RemediationExceptionResourceKey) -> Self {
        self.inner = self.inner.resource_keys(input);
        self
    }
    /// <p>An exception list of resource exception keys to be processed with the current request. Config adds exception for each resource key. For example, Config adds 3 exceptions for 3 resource keys. </p>
    pub fn set_resource_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RemediationExceptionResourceKey>>,
    ) -> Self {
        self.inner = self.inner.set_resource_keys(input);
        self
    }
    /// <p>The message contains an explanation of the exception.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.message(input.into());
        self
    }
    /// <p>The message contains an explanation of the exception.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_message(input);
        self
    }
    /// <p>The exception is automatically deleted after the expiration date.</p>
    pub fn expiration_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.expiration_time(input);
        self
    }
    /// <p>The exception is automatically deleted after the expiration date.</p>
    pub fn set_expiration_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_expiration_time(input);
        self
    }
}
