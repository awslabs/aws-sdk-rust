// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_configuration_aggregator::_put_configuration_aggregator_output::PutConfigurationAggregatorOutputBuilder;

pub use crate::operation::put_configuration_aggregator::_put_configuration_aggregator_input::PutConfigurationAggregatorInputBuilder;

/// Fluent builder constructing a request to `PutConfigurationAggregator`.
///
/// <p>Creates and updates the configuration aggregator with the selected source accounts and regions. The source account can be individual account(s) or an organization.</p>
/// <p> <code>accountIds</code> that are passed will be replaced with existing accounts. If you want to add additional accounts into the aggregator, call <code>DescribeConfigurationAggregators</code> to get the previous accounts and then append new ones.</p> <note>
/// <p>Config should be enabled in source accounts and regions you want to aggregate.</p>
/// <p>If your source type is an organization, you must be signed in to the management account or a registered delegated administrator and all the features must be enabled in your organization. If the caller is a management account, Config calls <code>EnableAwsServiceAccess</code> API to enable integration between Config and Organizations. If the caller is a registered delegated administrator, Config calls <code>ListDelegatedAdministrators</code> API to verify whether the caller is a valid delegated administrator.</p>
/// <p>To register a delegated administrator, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/set-up-aggregator-cli.html#register-a-delegated-administrator-cli">Register a Delegated Administrator</a> in the <i>Config developer guide</i>. </p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutConfigurationAggregatorFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::put_configuration_aggregator::builders::PutConfigurationAggregatorInputBuilder
            }
impl PutConfigurationAggregatorFluentBuilder {
    /// Creates a new `PutConfigurationAggregator`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_configuration_aggregator::PutConfigurationAggregator,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::put_configuration_aggregator::PutConfigurationAggregatorError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_configuration_aggregator::PutConfigurationAggregatorOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::put_configuration_aggregator::PutConfigurationAggregatorError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the configuration aggregator.</p>
    pub fn configuration_aggregator_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.configuration_aggregator_name(input.into());
        self
    }
    /// <p>The name of the configuration aggregator.</p>
    pub fn set_configuration_aggregator_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_configuration_aggregator_name(input);
        self
    }
    /// Appends an item to `AccountAggregationSources`.
    ///
    /// To override the contents of this collection use [`set_account_aggregation_sources`](Self::set_account_aggregation_sources).
    ///
    /// <p>A list of AccountAggregationSource object. </p>
    pub fn account_aggregation_sources(
        mut self,
        input: crate::types::AccountAggregationSource,
    ) -> Self {
        self.inner = self.inner.account_aggregation_sources(input);
        self
    }
    /// <p>A list of AccountAggregationSource object. </p>
    pub fn set_account_aggregation_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AccountAggregationSource>>,
    ) -> Self {
        self.inner = self.inner.set_account_aggregation_sources(input);
        self
    }
    /// <p>An OrganizationAggregationSource object.</p>
    pub fn organization_aggregation_source(
        mut self,
        input: crate::types::OrganizationAggregationSource,
    ) -> Self {
        self.inner = self.inner.organization_aggregation_source(input);
        self
    }
    /// <p>An OrganizationAggregationSource object.</p>
    pub fn set_organization_aggregation_source(
        mut self,
        input: std::option::Option<crate::types::OrganizationAggregationSource>,
    ) -> Self {
        self.inner = self.inner.set_organization_aggregation_source(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of tag object.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of tag object.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
