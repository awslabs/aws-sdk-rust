// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetResourceConfigInput {
    /// <p>A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID.</p>
    pub resource_keys: ::std::option::Option<::std::vec::Vec<crate::types::ResourceKey>>,
}
impl BatchGetResourceConfigInput {
    /// <p>A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_keys.is_none()`.
    pub fn resource_keys(&self) -> &[crate::types::ResourceKey] {
        self.resource_keys.as_deref().unwrap_or_default()
    }
}
impl BatchGetResourceConfigInput {
    /// Creates a new builder-style object to manufacture [`BatchGetResourceConfigInput`](crate::operation::batch_get_resource_config::BatchGetResourceConfigInput).
    pub fn builder() -> crate::operation::batch_get_resource_config::builders::BatchGetResourceConfigInputBuilder {
        crate::operation::batch_get_resource_config::builders::BatchGetResourceConfigInputBuilder::default()
    }
}

/// A builder for [`BatchGetResourceConfigInput`](crate::operation::batch_get_resource_config::BatchGetResourceConfigInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetResourceConfigInputBuilder {
    pub(crate) resource_keys: ::std::option::Option<::std::vec::Vec<crate::types::ResourceKey>>,
}
impl BatchGetResourceConfigInputBuilder {
    /// Appends an item to `resource_keys`.
    ///
    /// To override the contents of this collection use [`set_resource_keys`](Self::set_resource_keys).
    ///
    /// <p>A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID.</p>
    pub fn resource_keys(mut self, input: crate::types::ResourceKey) -> Self {
        let mut v = self.resource_keys.unwrap_or_default();
        v.push(input);
        self.resource_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID.</p>
    pub fn set_resource_keys(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceKey>>) -> Self {
        self.resource_keys = input;
        self
    }
    /// <p>A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID.</p>
    pub fn get_resource_keys(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceKey>> {
        &self.resource_keys
    }
    /// Consumes the builder and constructs a [`BatchGetResourceConfigInput`](crate::operation::batch_get_resource_config::BatchGetResourceConfigInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_get_resource_config::BatchGetResourceConfigInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_get_resource_config::BatchGetResourceConfigInput {
            resource_keys: self.resource_keys,
        })
    }
}
