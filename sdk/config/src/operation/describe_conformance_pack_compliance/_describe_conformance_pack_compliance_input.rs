// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeConformancePackComplianceInput {
    /// <p>Name of the conformance pack.</p>
    #[doc(hidden)]
    pub conformance_pack_name: std::option::Option<std::string::String>,
    /// <p>A <code>ConformancePackComplianceFilters</code> object.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<crate::types::ConformancePackComplianceFilters>,
    /// <p>The maximum number of Config rules within a conformance pack are returned on each page.</p>
    #[doc(hidden)]
    pub limit: i32,
    /// <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeConformancePackComplianceInput {
    /// <p>Name of the conformance pack.</p>
    pub fn conformance_pack_name(&self) -> std::option::Option<&str> {
        self.conformance_pack_name.as_deref()
    }
    /// <p>A <code>ConformancePackComplianceFilters</code> object.</p>
    pub fn filters(&self) -> std::option::Option<&crate::types::ConformancePackComplianceFilters> {
        self.filters.as_ref()
    }
    /// <p>The maximum number of Config rules within a conformance pack are returned on each page.</p>
    pub fn limit(&self) -> i32 {
        self.limit
    }
    /// <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeConformancePackComplianceInput {
    /// Creates a new builder-style object to manufacture [`DescribeConformancePackComplianceInput`](crate::operation::describe_conformance_pack_compliance::DescribeConformancePackComplianceInput).
    pub fn builder() -> crate::operation::describe_conformance_pack_compliance::builders::DescribeConformancePackComplianceInputBuilder{
        crate::operation::describe_conformance_pack_compliance::builders::DescribeConformancePackComplianceInputBuilder::default()
    }
}

/// A builder for [`DescribeConformancePackComplianceInput`](crate::operation::describe_conformance_pack_compliance::DescribeConformancePackComplianceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeConformancePackComplianceInputBuilder {
    pub(crate) conformance_pack_name: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<crate::types::ConformancePackComplianceFilters>,
    pub(crate) limit: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl DescribeConformancePackComplianceInputBuilder {
    /// <p>Name of the conformance pack.</p>
    pub fn conformance_pack_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.conformance_pack_name = Some(input.into());
        self
    }
    /// <p>Name of the conformance pack.</p>
    pub fn set_conformance_pack_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.conformance_pack_name = input;
        self
    }
    /// <p>A <code>ConformancePackComplianceFilters</code> object.</p>
    pub fn filters(mut self, input: crate::types::ConformancePackComplianceFilters) -> Self {
        self.filters = Some(input);
        self
    }
    /// <p>A <code>ConformancePackComplianceFilters</code> object.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::types::ConformancePackComplianceFilters>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The maximum number of Config rules within a conformance pack are returned on each page.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = Some(input);
        self
    }
    /// <p>The maximum number of Config rules within a conformance pack are returned on each page.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The <code>nextToken</code> string returned in a previous request that you use to request the next page of results in a paginated response.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeConformancePackComplianceInput`](crate::operation::describe_conformance_pack_compliance::DescribeConformancePackComplianceInput).
    pub fn build(self) -> Result<crate::operation::describe_conformance_pack_compliance::DescribeConformancePackComplianceInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::describe_conformance_pack_compliance::DescribeConformancePackComplianceInput {
                conformance_pack_name: self.conformance_pack_name
                ,
                filters: self.filters
                ,
                limit: self.limit
                    .unwrap_or_default()
                ,
                next_token: self.next_token
                ,
            }
        )
    }
}
