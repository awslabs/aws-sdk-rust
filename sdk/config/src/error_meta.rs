// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You have specified a template that is invalid or supported.</p>
    ConformancePackTemplateValidationException(
        crate::error::ConformancePackTemplateValidationException,
    ),
    /// <p>Using the same client token with one or more different parameters. Specify a new client token with the parameter changes and try again.</p>
    IdempotentParameterMismatch(crate::error::IdempotentParameterMismatch),
    /// <p>Your Amazon S3 bucket policy does not permit Config to write to it.</p>
    InsufficientDeliveryPolicyException(crate::error::InsufficientDeliveryPolicyException),
    /// <p>Indicates one of the following errors:</p>
    /// <ul>
    /// <li> <p>For PutConfigRule, the rule cannot be created because the IAM role assigned to Config lacks permissions to perform the config:Put* action.</p> </li>
    /// <li> <p>For PutConfigRule, the Lambda function cannot be invoked. Check the function ARN, and check the function's permissions.</p> </li>
    /// <li> <p>For PutOrganizationConfigRule, organization Config rule cannot be created because you do not have permissions to call IAM <code>GetRole</code> action or create a service-linked role.</p> </li>
    /// <li> <p>For PutConformancePack and PutOrganizationConformancePack, a conformance pack cannot be created because you do not have the following permissions: </p>
    /// <ul>
    /// <li> <p>You do not have permission to call IAM <code>GetRole</code> action or create a service-linked role.</p> </li>
    /// <li> <p>You do not have permission to read Amazon S3 bucket or call SSM:GetDocument.</p> </li>
    /// </ul> </li>
    /// </ul>
    InsufficientPermissionsException(crate::error::InsufficientPermissionsException),
    /// <p>You have provided a configuration recorder name that is not valid.</p>
    InvalidConfigurationRecorderNameException(
        crate::error::InvalidConfigurationRecorderNameException,
    ),
    /// <p>The specified delivery channel name is invalid.</p>
    InvalidDeliveryChannelNameException(crate::error::InvalidDeliveryChannelNameException),
    /// <p>The syntax of the query is incorrect.</p>
    InvalidExpressionException(crate::error::InvalidExpressionException),
    /// <p>The specified limit is outside the allowable range.</p>
    InvalidLimitException(crate::error::InvalidLimitException),
    /// <p>The specified next token is invalid. Specify the <code>nextToken</code> string that was returned in the previous response to get the next page of results.</p>
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    /// <p>One or more of the specified parameters are invalid. Verify that your parameters are valid and try again.</p>
    InvalidParameterValueException(crate::error::InvalidParameterValueException),
    /// <p>Config throws an exception if the recording group does not contain a valid list of resource types. Invalid values might also be incorrectly formatted.</p>
    InvalidRecordingGroupException(crate::error::InvalidRecordingGroupException),
    /// <p>The specified <code>ResultToken</code> is invalid.</p>
    InvalidResultTokenException(crate::error::InvalidResultTokenException),
    /// <p>You have provided a null or empty role ARN.</p>
    InvalidRoleException(crate::error::InvalidRoleException),
    /// <p>The specified Amazon S3 key prefix is invalid.</p>
    InvalidS3KeyPrefixException(crate::error::InvalidS3KeyPrefixException),
    /// <p>The specified Amazon KMS Key ARN is invalid.</p>
    InvalidS3KmsKeyArnException(crate::error::InvalidS3KmsKeyArnException),
    /// <p>The specified Amazon SNS topic does not exist.</p>
    InvalidSnsTopicArnException(crate::error::InvalidSnsTopicArnException),
    /// <p>The specified time range is invalid. The earlier time is not chronologically before the later time.</p>
    InvalidTimeRangeException(crate::error::InvalidTimeRangeException),
    /// <p>You cannot delete the delivery channel you specified because the configuration recorder is running.</p>
    LastDeliveryChannelDeleteFailedException(
        crate::error::LastDeliveryChannelDeleteFailedException,
    ),
    /// <p>For <code>StartConfigRulesEvaluation</code> API, this exception is thrown if an evaluation is in progress or if you call the <code>StartConfigRulesEvaluation</code> API more than once per minute.</p>
    /// <p>For <code>PutConfigurationAggregator</code> API, this exception is thrown if the number of accounts and aggregators exceeds the limit.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>You have reached the limit of active custom resource types in your account. There is a limit of 100,000. Delete unused resources using <a href="https://docs.aws.amazon.com/config/latest/APIReference/API_DeleteResourceConfig.html">DeleteResourceConfig</a> <code></code>.</p>
    MaxActiveResourcesExceededException(crate::error::MaxActiveResourcesExceededException),
    /// <p>Failed to add the Config rule because the account already contains the maximum number of 150 rules. Consider deleting any deactivated rules before you add new rules.</p>
    MaxNumberOfConfigRulesExceededException(crate::error::MaxNumberOfConfigRulesExceededException),
    /// <p>You have reached the limit of the number of recorders you can create.</p>
    MaxNumberOfConfigurationRecordersExceededException(
        crate::error::MaxNumberOfConfigurationRecordersExceededException,
    ),
    /// <p>You have reached the limit of the number of conformance packs you can create in an account. For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html"> <b>Service Limits</b> </a> in the Config Developer Guide.</p>
    MaxNumberOfConformancePacksExceededException(
        crate::error::MaxNumberOfConformancePacksExceededException,
    ),
    /// <p>You have reached the limit of the number of delivery channels you can create.</p>
    MaxNumberOfDeliveryChannelsExceededException(
        crate::error::MaxNumberOfDeliveryChannelsExceededException,
    ),
    /// <p>You have reached the limit of the number of organization Config rules you can create. For more information, see see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html"> <b>Service Limits</b> </a> in the Config Developer Guide.</p>
    MaxNumberOfOrganizationConfigRulesExceededException(
        crate::error::MaxNumberOfOrganizationConfigRulesExceededException,
    ),
    /// <p>You have reached the limit of the number of organization conformance packs you can create in an account. For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html"> <b>Service Limits</b> </a> in the Config Developer Guide.</p>
    MaxNumberOfOrganizationConformancePacksExceededException(
        crate::error::MaxNumberOfOrganizationConformancePacksExceededException,
    ),
    /// <p>Failed to add the retention configuration because a retention configuration with that name already exists.</p>
    MaxNumberOfRetentionConfigurationsExceededException(
        crate::error::MaxNumberOfRetentionConfigurationsExceededException,
    ),
    /// <p>There are no configuration recorders available to provide the role needed to describe your resources. Create a configuration recorder.</p>
    NoAvailableConfigurationRecorderException(
        crate::error::NoAvailableConfigurationRecorderException,
    ),
    /// <p>There is no delivery channel available to record configurations.</p>
    NoAvailableDeliveryChannelException(crate::error::NoAvailableDeliveryChannelException),
    /// <p>Organization is no longer available.</p>
    NoAvailableOrganizationException(crate::error::NoAvailableOrganizationException),
    /// <p>There is no configuration recorder running.</p>
    NoRunningConfigurationRecorderException(crate::error::NoRunningConfigurationRecorderException),
    /// <p>The specified Amazon S3 bucket does not exist.</p>
    NoSuchBucketException(crate::error::NoSuchBucketException),
    /// <p>The Config rule in the request is invalid. Verify that the rule is an Config Custom Policy rule, that the rule name is correct, and that valid Amazon Resouce Names (ARNs) are used before trying again.</p>
    NoSuchConfigRuleException(crate::error::NoSuchConfigRuleException),
    /// <p>Config rule that you passed in the filter does not exist.</p>
    NoSuchConfigRuleInConformancePackException(
        crate::error::NoSuchConfigRuleInConformancePackException,
    ),
    /// <p>You have specified a configuration aggregator that does not exist.</p>
    NoSuchConfigurationAggregatorException(crate::error::NoSuchConfigurationAggregatorException),
    /// <p>You have specified a configuration recorder that does not exist.</p>
    NoSuchConfigurationRecorderException(crate::error::NoSuchConfigurationRecorderException),
    /// <p>You specified one or more conformance packs that do not exist.</p>
    NoSuchConformancePackException(crate::error::NoSuchConformancePackException),
    /// <p>You have specified a delivery channel that does not exist.</p>
    NoSuchDeliveryChannelException(crate::error::NoSuchDeliveryChannelException),
    /// <p>The Config rule in the request is invalid. Verify that the rule is an organization Config Custom Policy rule, that the rule name is correct, and that valid Amazon Resouce Names (ARNs) are used before trying again.</p>
    NoSuchOrganizationConfigRuleException(crate::error::NoSuchOrganizationConfigRuleException),
    /// <p>Config organization conformance pack that you passed in the filter does not exist.</p>
    /// <p>For DeleteOrganizationConformancePack, you tried to delete an organization conformance pack that does not exist.</p>
    NoSuchOrganizationConformancePackException(
        crate::error::NoSuchOrganizationConformancePackException,
    ),
    /// <p>You specified an Config rule without a remediation configuration.</p>
    NoSuchRemediationConfigurationException(crate::error::NoSuchRemediationConfigurationException),
    /// <p>You tried to delete a remediation exception that does not exist.</p>
    NoSuchRemediationExceptionException(crate::error::NoSuchRemediationExceptionException),
    /// <p>You have specified a retention configuration that does not exist.</p>
    NoSuchRetentionConfigurationException(crate::error::NoSuchRetentionConfigurationException),
    /// <p>For <code>PutConfigurationAggregator</code> API, you can see this exception for the following reasons:</p>
    /// <ul>
    /// <li> <p>No permission to call <code>EnableAWSServiceAccess</code> API</p> </li>
    /// <li> <p>The configuration aggregator cannot be updated because your Amazon Web Services Organization management account or the delegated administrator role changed. Delete this aggregator and create a new one with the current Amazon Web Services Organization.</p> </li>
    /// <li> <p>The configuration aggregator is associated with a previous Amazon Web Services Organization and Config cannot aggregate data with current Amazon Web Services Organization. Delete this aggregator and create a new one with the current Amazon Web Services Organization.</p> </li>
    /// <li> <p>You are not a registered delegated administrator for Config with permissions to call <code>ListDelegatedAdministrators</code> API. Ensure that the management account registers delagated administrator for Config service principle name before the delegated administrator creates an aggregator.</p> </li>
    /// </ul>
    /// <p>For all <code>OrganizationConfigRule</code> and <code>OrganizationConformancePack</code> APIs, Config throws an exception if APIs are called from member accounts. All APIs must be called from organization management account.</p>
    OrganizationAccessDeniedException(crate::error::OrganizationAccessDeniedException),
    /// <p>Config resource cannot be created because your organization does not have all features enabled.</p>
    OrganizationAllFeaturesNotEnabledException(
        crate::error::OrganizationAllFeaturesNotEnabledException,
    ),
    /// <p>You have specified a template that is invalid or supported.</p>
    OrganizationConformancePackTemplateValidationException(
        crate::error::OrganizationConformancePackTemplateValidationException,
    ),
    /// <p>The configuration item size is outside the allowable range.</p>
    OversizedConfigurationItemException(crate::error::OversizedConfigurationItemException),
    /// <p>Remediation action is in progress. You can either cancel execution in Amazon Web Services Systems Manager or wait and try again later. </p>
    RemediationInProgressException(crate::error::RemediationInProgressException),
    /// <p>Two users are trying to modify the same query at the same time. Wait for a moment and try again.</p>
    ResourceConcurrentModificationException(crate::error::ResourceConcurrentModificationException),
    /// <p>You see this exception in the following cases: </p>
    /// <ul>
    /// <li> <p>For DeleteConfigRule, Config is deleting this rule. Try your request again later.</p> </li>
    /// <li> <p>For DeleteConfigRule, the rule is deleting your evaluation results. Try your request again later.</p> </li>
    /// <li> <p>For DeleteConfigRule, a remediation action is associated with the rule and Config cannot delete this rule. Delete the remediation action associated with the rule before deleting the rule and try your request again later.</p> </li>
    /// <li> <p>For PutConfigOrganizationRule, organization Config rule deletion is in progress. Try your request again later.</p> </li>
    /// <li> <p>For DeleteOrganizationConfigRule, organization Config rule creation is in progress. Try your request again later.</p> </li>
    /// <li> <p>For PutConformancePack and PutOrganizationConformancePack, a conformance pack creation, update, and deletion is in progress. Try your request again later.</p> </li>
    /// <li> <p>For DeleteConformancePack, a conformance pack creation, update, and deletion is in progress. Try your request again later.</p> </li>
    /// </ul>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>You have specified a resource that is either unknown or has not been discovered.</p>
    ResourceNotDiscoveredException(crate::error::ResourceNotDiscoveredException),
    /// <p>You have specified a resource that does not exist.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>You have reached the limit of the number of tags you can use. For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html"> <b>Service Limits</b> </a> in the Config Developer Guide.</p>
    TooManyTagsException(crate::error::TooManyTagsException),
    /// <p>The requested action is invalid.</p>
    /// <p>For PutStoredQuery, you will see this exception if there are missing required fields or if the input value fails the validation, or if you are trying to create more than 300 queries.</p>
    /// <p>For GetStoredQuery, ListStoredQuery, and DeleteStoredQuery you will see this exception if there are missing required fields or if the input value fails the validation.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConformancePackTemplateValidationException(inner) => inner.fmt(f),
            Error::IdempotentParameterMismatch(inner) => inner.fmt(f),
            Error::InsufficientDeliveryPolicyException(inner) => inner.fmt(f),
            Error::InsufficientPermissionsException(inner) => inner.fmt(f),
            Error::InvalidConfigurationRecorderNameException(inner) => inner.fmt(f),
            Error::InvalidDeliveryChannelNameException(inner) => inner.fmt(f),
            Error::InvalidExpressionException(inner) => inner.fmt(f),
            Error::InvalidLimitException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidParameterValueException(inner) => inner.fmt(f),
            Error::InvalidRecordingGroupException(inner) => inner.fmt(f),
            Error::InvalidResultTokenException(inner) => inner.fmt(f),
            Error::InvalidRoleException(inner) => inner.fmt(f),
            Error::InvalidS3KeyPrefixException(inner) => inner.fmt(f),
            Error::InvalidS3KmsKeyArnException(inner) => inner.fmt(f),
            Error::InvalidSnsTopicArnException(inner) => inner.fmt(f),
            Error::InvalidTimeRangeException(inner) => inner.fmt(f),
            Error::LastDeliveryChannelDeleteFailedException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::MaxActiveResourcesExceededException(inner) => inner.fmt(f),
            Error::MaxNumberOfConfigRulesExceededException(inner) => inner.fmt(f),
            Error::MaxNumberOfConfigurationRecordersExceededException(inner) => inner.fmt(f),
            Error::MaxNumberOfConformancePacksExceededException(inner) => inner.fmt(f),
            Error::MaxNumberOfDeliveryChannelsExceededException(inner) => inner.fmt(f),
            Error::MaxNumberOfOrganizationConfigRulesExceededException(inner) => inner.fmt(f),
            Error::MaxNumberOfOrganizationConformancePacksExceededException(inner) => inner.fmt(f),
            Error::MaxNumberOfRetentionConfigurationsExceededException(inner) => inner.fmt(f),
            Error::NoAvailableConfigurationRecorderException(inner) => inner.fmt(f),
            Error::NoAvailableDeliveryChannelException(inner) => inner.fmt(f),
            Error::NoAvailableOrganizationException(inner) => inner.fmt(f),
            Error::NoRunningConfigurationRecorderException(inner) => inner.fmt(f),
            Error::NoSuchBucketException(inner) => inner.fmt(f),
            Error::NoSuchConfigRuleException(inner) => inner.fmt(f),
            Error::NoSuchConfigRuleInConformancePackException(inner) => inner.fmt(f),
            Error::NoSuchConfigurationAggregatorException(inner) => inner.fmt(f),
            Error::NoSuchConfigurationRecorderException(inner) => inner.fmt(f),
            Error::NoSuchConformancePackException(inner) => inner.fmt(f),
            Error::NoSuchDeliveryChannelException(inner) => inner.fmt(f),
            Error::NoSuchOrganizationConfigRuleException(inner) => inner.fmt(f),
            Error::NoSuchOrganizationConformancePackException(inner) => inner.fmt(f),
            Error::NoSuchRemediationConfigurationException(inner) => inner.fmt(f),
            Error::NoSuchRemediationExceptionException(inner) => inner.fmt(f),
            Error::NoSuchRetentionConfigurationException(inner) => inner.fmt(f),
            Error::OrganizationAccessDeniedException(inner) => inner.fmt(f),
            Error::OrganizationAllFeaturesNotEnabledException(inner) => inner.fmt(f),
            Error::OrganizationConformancePackTemplateValidationException(inner) => inner.fmt(f),
            Error::OversizedConfigurationItemException(inner) => inner.fmt(f),
            Error::RemediationInProgressException(inner) => inner.fmt(f),
            Error::ResourceConcurrentModificationException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotDiscoveredException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::BatchGetAggregateResourceConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::BatchGetAggregateResourceConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchGetAggregateResourceConfigError> for Error {
    fn from(err: crate::error::BatchGetAggregateResourceConfigError) -> Self {
        match err {
            crate::error::BatchGetAggregateResourceConfigError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::BatchGetAggregateResourceConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchGetAggregateResourceConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGetResourceConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchGetResourceConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchGetResourceConfigError> for Error {
    fn from(err: crate::error::BatchGetResourceConfigError) -> Self {
        match err {
            crate::error::BatchGetResourceConfigError::NoAvailableConfigurationRecorderException(inner) => Error::NoAvailableConfigurationRecorderException(inner),
            crate::error::BatchGetResourceConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchGetResourceConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteAggregationAuthorizationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteAggregationAuthorizationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAggregationAuthorizationError> for Error {
    fn from(err: crate::error::DeleteAggregationAuthorizationError) -> Self {
        match err {
            crate::error::DeleteAggregationAuthorizationError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DeleteAggregationAuthorizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteConfigRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteConfigRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteConfigRuleError> for Error {
    fn from(err: crate::error::DeleteConfigRuleError) -> Self {
        match err {
            crate::error::DeleteConfigRuleError::NoSuchConfigRuleException(inner) => {
                Error::NoSuchConfigRuleException(inner)
            }
            crate::error::DeleteConfigRuleError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteConfigRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteConfigurationAggregatorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteConfigurationAggregatorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteConfigurationAggregatorError> for Error {
    fn from(err: crate::error::DeleteConfigurationAggregatorError) -> Self {
        match err {
            crate::error::DeleteConfigurationAggregatorError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::DeleteConfigurationAggregatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteConfigurationRecorderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteConfigurationRecorderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteConfigurationRecorderError> for Error {
    fn from(err: crate::error::DeleteConfigurationRecorderError) -> Self {
        match err {
            crate::error::DeleteConfigurationRecorderError::NoSuchConfigurationRecorderException(inner) => Error::NoSuchConfigurationRecorderException(inner),
            crate::error::DeleteConfigurationRecorderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteConformancePackError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteConformancePackError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteConformancePackError> for Error {
    fn from(err: crate::error::DeleteConformancePackError) -> Self {
        match err {
            crate::error::DeleteConformancePackError::NoSuchConformancePackException(inner) => {
                Error::NoSuchConformancePackException(inner)
            }
            crate::error::DeleteConformancePackError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteConformancePackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDeliveryChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDeliveryChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDeliveryChannelError> for Error {
    fn from(err: crate::error::DeleteDeliveryChannelError) -> Self {
        match err {
            crate::error::DeleteDeliveryChannelError::LastDeliveryChannelDeleteFailedException(
                inner,
            ) => Error::LastDeliveryChannelDeleteFailedException(inner),
            crate::error::DeleteDeliveryChannelError::NoSuchDeliveryChannelException(inner) => {
                Error::NoSuchDeliveryChannelException(inner)
            }
            crate::error::DeleteDeliveryChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEvaluationResultsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEvaluationResultsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEvaluationResultsError> for Error {
    fn from(err: crate::error::DeleteEvaluationResultsError) -> Self {
        match err {
            crate::error::DeleteEvaluationResultsError::NoSuchConfigRuleException(inner) => {
                Error::NoSuchConfigRuleException(inner)
            }
            crate::error::DeleteEvaluationResultsError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteEvaluationResultsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteOrganizationConfigRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteOrganizationConfigRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteOrganizationConfigRuleError> for Error {
    fn from(err: crate::error::DeleteOrganizationConfigRuleError) -> Self {
        match err {
            crate::error::DeleteOrganizationConfigRuleError::NoSuchOrganizationConfigRuleException(inner) => Error::NoSuchOrganizationConfigRuleException(inner),
            crate::error::DeleteOrganizationConfigRuleError::OrganizationAccessDeniedException(inner) => Error::OrganizationAccessDeniedException(inner),
            crate::error::DeleteOrganizationConfigRuleError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteOrganizationConfigRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteOrganizationConformancePackError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteOrganizationConformancePackError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteOrganizationConformancePackError> for Error {
    fn from(err: crate::error::DeleteOrganizationConformancePackError) -> Self {
        match err {
            crate::error::DeleteOrganizationConformancePackError::NoSuchOrganizationConformancePackException(inner) => Error::NoSuchOrganizationConformancePackException(inner),
            crate::error::DeleteOrganizationConformancePackError::OrganizationAccessDeniedException(inner) => Error::OrganizationAccessDeniedException(inner),
            crate::error::DeleteOrganizationConformancePackError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::DeleteOrganizationConformancePackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeletePendingAggregationRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeletePendingAggregationRequestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePendingAggregationRequestError> for Error {
    fn from(err: crate::error::DeletePendingAggregationRequestError) -> Self {
        match err {
            crate::error::DeletePendingAggregationRequestError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DeletePendingAggregationRequestError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteRemediationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteRemediationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRemediationConfigurationError> for Error {
    fn from(err: crate::error::DeleteRemediationConfigurationError) -> Self {
        match err {
            crate::error::DeleteRemediationConfigurationError::InsufficientPermissionsException(inner) => Error::InsufficientPermissionsException(inner),
            crate::error::DeleteRemediationConfigurationError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DeleteRemediationConfigurationError::NoSuchRemediationConfigurationException(inner) => Error::NoSuchRemediationConfigurationException(inner),
            crate::error::DeleteRemediationConfigurationError::RemediationInProgressException(inner) => Error::RemediationInProgressException(inner),
            crate::error::DeleteRemediationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRemediationExceptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRemediationExceptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRemediationExceptionsError> for Error {
    fn from(err: crate::error::DeleteRemediationExceptionsError) -> Self {
        match err {
            crate::error::DeleteRemediationExceptionsError::NoSuchRemediationExceptionException(
                inner,
            ) => Error::NoSuchRemediationExceptionException(inner),
            crate::error::DeleteRemediationExceptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResourceConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteResourceConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResourceConfigError> for Error {
    fn from(err: crate::error::DeleteResourceConfigError) -> Self {
        match err {
            crate::error::DeleteResourceConfigError::NoRunningConfigurationRecorderException(
                inner,
            ) => Error::NoRunningConfigurationRecorderException(inner),
            crate::error::DeleteResourceConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteResourceConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRetentionConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRetentionConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRetentionConfigurationError> for Error {
    fn from(err: crate::error::DeleteRetentionConfigurationError) -> Self {
        match err {
            crate::error::DeleteRetentionConfigurationError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DeleteRetentionConfigurationError::NoSuchRetentionConfigurationException(inner) => Error::NoSuchRetentionConfigurationException(inner),
            crate::error::DeleteRetentionConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteStoredQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteStoredQueryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteStoredQueryError> for Error {
    fn from(err: crate::error::DeleteStoredQueryError) -> Self {
        match err {
            crate::error::DeleteStoredQueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteStoredQueryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteStoredQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeliverConfigSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeliverConfigSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeliverConfigSnapshotError> for Error {
    fn from(err: crate::error::DeliverConfigSnapshotError) -> Self {
        match err {
            crate::error::DeliverConfigSnapshotError::NoAvailableConfigurationRecorderException(
                inner,
            ) => Error::NoAvailableConfigurationRecorderException(inner),
            crate::error::DeliverConfigSnapshotError::NoRunningConfigurationRecorderException(
                inner,
            ) => Error::NoRunningConfigurationRecorderException(inner),
            crate::error::DeliverConfigSnapshotError::NoSuchDeliveryChannelException(inner) => {
                Error::NoSuchDeliveryChannelException(inner)
            }
            crate::error::DeliverConfigSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeAggregateComplianceByConfigRulesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeAggregateComplianceByConfigRulesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAggregateComplianceByConfigRulesError> for Error {
    fn from(err: crate::error::DescribeAggregateComplianceByConfigRulesError) -> Self {
        match err {
            crate::error::DescribeAggregateComplianceByConfigRulesError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::DescribeAggregateComplianceByConfigRulesError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeAggregateComplianceByConfigRulesError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::DescribeAggregateComplianceByConfigRulesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeAggregateComplianceByConfigRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeAggregateComplianceByConformancePacksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeAggregateComplianceByConformancePacksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAggregateComplianceByConformancePacksError> for Error {
    fn from(err: crate::error::DescribeAggregateComplianceByConformancePacksError) -> Self {
        match err {
            crate::error::DescribeAggregateComplianceByConformancePacksError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::DescribeAggregateComplianceByConformancePacksError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeAggregateComplianceByConformancePacksError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::DescribeAggregateComplianceByConformancePacksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeAggregateComplianceByConformancePacksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeAggregationAuthorizationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeAggregationAuthorizationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAggregationAuthorizationsError> for Error {
    fn from(err: crate::error::DescribeAggregationAuthorizationsError) -> Self {
        match err {
            crate::error::DescribeAggregationAuthorizationsError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::DescribeAggregationAuthorizationsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeAggregationAuthorizationsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeAggregationAuthorizationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeComplianceByConfigRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeComplianceByConfigRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeComplianceByConfigRuleError> for Error {
    fn from(err: crate::error::DescribeComplianceByConfigRuleError) -> Self {
        match err {
            crate::error::DescribeComplianceByConfigRuleError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeComplianceByConfigRuleError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeComplianceByConfigRuleError::NoSuchConfigRuleException(inner) => {
                Error::NoSuchConfigRuleException(inner)
            }
            crate::error::DescribeComplianceByConfigRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeComplianceByResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeComplianceByResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeComplianceByResourceError> for Error {
    fn from(err: crate::error::DescribeComplianceByResourceError) -> Self {
        match err {
            crate::error::DescribeComplianceByResourceError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeComplianceByResourceError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeComplianceByResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeConfigRuleEvaluationStatusError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeConfigRuleEvaluationStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConfigRuleEvaluationStatusError> for Error {
    fn from(err: crate::error::DescribeConfigRuleEvaluationStatusError) -> Self {
        match err {
            crate::error::DescribeConfigRuleEvaluationStatusError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeConfigRuleEvaluationStatusError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeConfigRuleEvaluationStatusError::NoSuchConfigRuleException(inner) => Error::NoSuchConfigRuleException(inner),
            crate::error::DescribeConfigRuleEvaluationStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeConfigRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeConfigRulesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConfigRulesError> for Error {
    fn from(err: crate::error::DescribeConfigRulesError) -> Self {
        match err {
            crate::error::DescribeConfigRulesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeConfigRulesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeConfigRulesError::NoSuchConfigRuleException(inner) => {
                Error::NoSuchConfigRuleException(inner)
            }
            crate::error::DescribeConfigRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeConfigurationAggregatorsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeConfigurationAggregatorsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConfigurationAggregatorsError> for Error {
    fn from(err: crate::error::DescribeConfigurationAggregatorsError) -> Self {
        match err {
            crate::error::DescribeConfigurationAggregatorsError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::DescribeConfigurationAggregatorsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeConfigurationAggregatorsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeConfigurationAggregatorsError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::DescribeConfigurationAggregatorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeConfigurationAggregatorSourcesStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeConfigurationAggregatorSourcesStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConfigurationAggregatorSourcesStatusError> for Error {
    fn from(err: crate::error::DescribeConfigurationAggregatorSourcesStatusError) -> Self {
        match err {
            crate::error::DescribeConfigurationAggregatorSourcesStatusError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::DescribeConfigurationAggregatorSourcesStatusError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeConfigurationAggregatorSourcesStatusError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeConfigurationAggregatorSourcesStatusError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::DescribeConfigurationAggregatorSourcesStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeConfigurationRecordersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeConfigurationRecordersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConfigurationRecordersError> for Error {
    fn from(err: crate::error::DescribeConfigurationRecordersError) -> Self {
        match err {
            crate::error::DescribeConfigurationRecordersError::NoSuchConfigurationRecorderException(inner) => Error::NoSuchConfigurationRecorderException(inner),
            crate::error::DescribeConfigurationRecordersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeConfigurationRecorderStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeConfigurationRecorderStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConfigurationRecorderStatusError> for Error {
    fn from(err: crate::error::DescribeConfigurationRecorderStatusError) -> Self {
        match err {
            crate::error::DescribeConfigurationRecorderStatusError::NoSuchConfigurationRecorderException(inner) => Error::NoSuchConfigurationRecorderException(inner),
            crate::error::DescribeConfigurationRecorderStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeConformancePackComplianceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeConformancePackComplianceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConformancePackComplianceError> for Error {
    fn from(err: crate::error::DescribeConformancePackComplianceError) -> Self {
        match err {
            crate::error::DescribeConformancePackComplianceError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::DescribeConformancePackComplianceError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeConformancePackComplianceError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeConformancePackComplianceError::NoSuchConfigRuleInConformancePackException(inner) => Error::NoSuchConfigRuleInConformancePackException(inner),
            crate::error::DescribeConformancePackComplianceError::NoSuchConformancePackException(inner) => Error::NoSuchConformancePackException(inner),
            crate::error::DescribeConformancePackComplianceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeConformancePacksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeConformancePacksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConformancePacksError> for Error {
    fn from(err: crate::error::DescribeConformancePacksError) -> Self {
        match err {
            crate::error::DescribeConformancePacksError::InvalidLimitException(inner) => {
                Error::InvalidLimitException(inner)
            }
            crate::error::DescribeConformancePacksError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeConformancePacksError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeConformancePacksError::NoSuchConformancePackException(inner) => {
                Error::NoSuchConformancePackException(inner)
            }
            crate::error::DescribeConformancePacksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeConformancePackStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeConformancePackStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConformancePackStatusError> for Error {
    fn from(err: crate::error::DescribeConformancePackStatusError) -> Self {
        match err {
            crate::error::DescribeConformancePackStatusError::InvalidLimitException(inner) => {
                Error::InvalidLimitException(inner)
            }
            crate::error::DescribeConformancePackStatusError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeConformancePackStatusError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeConformancePackStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDeliveryChannelsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDeliveryChannelsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDeliveryChannelsError> for Error {
    fn from(err: crate::error::DescribeDeliveryChannelsError) -> Self {
        match err {
            crate::error::DescribeDeliveryChannelsError::NoSuchDeliveryChannelException(inner) => {
                Error::NoSuchDeliveryChannelException(inner)
            }
            crate::error::DescribeDeliveryChannelsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDeliveryChannelStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDeliveryChannelStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDeliveryChannelStatusError> for Error {
    fn from(err: crate::error::DescribeDeliveryChannelStatusError) -> Self {
        match err {
            crate::error::DescribeDeliveryChannelStatusError::NoSuchDeliveryChannelException(
                inner,
            ) => Error::NoSuchDeliveryChannelException(inner),
            crate::error::DescribeDeliveryChannelStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeOrganizationConfigRulesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeOrganizationConfigRulesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOrganizationConfigRulesError> for Error {
    fn from(err: crate::error::DescribeOrganizationConfigRulesError) -> Self {
        match err {
            crate::error::DescribeOrganizationConfigRulesError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::DescribeOrganizationConfigRulesError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeOrganizationConfigRulesError::NoSuchOrganizationConfigRuleException(inner) => Error::NoSuchOrganizationConfigRuleException(inner),
            crate::error::DescribeOrganizationConfigRulesError::OrganizationAccessDeniedException(inner) => Error::OrganizationAccessDeniedException(inner),
            crate::error::DescribeOrganizationConfigRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeOrganizationConfigRuleStatusesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeOrganizationConfigRuleStatusesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOrganizationConfigRuleStatusesError> for Error {
    fn from(err: crate::error::DescribeOrganizationConfigRuleStatusesError) -> Self {
        match err {
            crate::error::DescribeOrganizationConfigRuleStatusesError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::DescribeOrganizationConfigRuleStatusesError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeOrganizationConfigRuleStatusesError::NoSuchOrganizationConfigRuleException(inner) => Error::NoSuchOrganizationConfigRuleException(inner),
            crate::error::DescribeOrganizationConfigRuleStatusesError::OrganizationAccessDeniedException(inner) => Error::OrganizationAccessDeniedException(inner),
            crate::error::DescribeOrganizationConfigRuleStatusesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeOrganizationConformancePacksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeOrganizationConformancePacksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOrganizationConformancePacksError> for Error {
    fn from(err: crate::error::DescribeOrganizationConformancePacksError) -> Self {
        match err {
            crate::error::DescribeOrganizationConformancePacksError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::DescribeOrganizationConformancePacksError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeOrganizationConformancePacksError::NoSuchOrganizationConformancePackException(inner) => Error::NoSuchOrganizationConformancePackException(inner),
            crate::error::DescribeOrganizationConformancePacksError::OrganizationAccessDeniedException(inner) => Error::OrganizationAccessDeniedException(inner),
            crate::error::DescribeOrganizationConformancePacksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeOrganizationConformancePackStatusesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeOrganizationConformancePackStatusesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOrganizationConformancePackStatusesError> for Error {
    fn from(err: crate::error::DescribeOrganizationConformancePackStatusesError) -> Self {
        match err {
            crate::error::DescribeOrganizationConformancePackStatusesError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::DescribeOrganizationConformancePackStatusesError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeOrganizationConformancePackStatusesError::NoSuchOrganizationConformancePackException(inner) => Error::NoSuchOrganizationConformancePackException(inner),
            crate::error::DescribeOrganizationConformancePackStatusesError::OrganizationAccessDeniedException(inner) => Error::OrganizationAccessDeniedException(inner),
            crate::error::DescribeOrganizationConformancePackStatusesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribePendingAggregationRequestsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribePendingAggregationRequestsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePendingAggregationRequestsError> for Error {
    fn from(err: crate::error::DescribePendingAggregationRequestsError) -> Self {
        match err {
            crate::error::DescribePendingAggregationRequestsError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::DescribePendingAggregationRequestsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribePendingAggregationRequestsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribePendingAggregationRequestsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeRemediationConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeRemediationConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRemediationConfigurationsError> for Error {
    fn from(err: crate::error::DescribeRemediationConfigurationsError) -> Self {
        match err {
            crate::error::DescribeRemediationConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRemediationExceptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRemediationExceptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRemediationExceptionsError> for Error {
    fn from(err: crate::error::DescribeRemediationExceptionsError) -> Self {
        match err {
            crate::error::DescribeRemediationExceptionsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeRemediationExceptionsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeRemediationExceptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeRemediationExecutionStatusError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeRemediationExecutionStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRemediationExecutionStatusError> for Error {
    fn from(err: crate::error::DescribeRemediationExecutionStatusError) -> Self {
        match err {
            crate::error::DescribeRemediationExecutionStatusError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeRemediationExecutionStatusError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeRemediationExecutionStatusError::NoSuchRemediationConfigurationException(inner) => Error::NoSuchRemediationConfigurationException(inner),
            crate::error::DescribeRemediationExecutionStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeRetentionConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeRetentionConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRetentionConfigurationsError> for Error {
    fn from(err: crate::error::DescribeRetentionConfigurationsError) -> Self {
        match err {
            crate::error::DescribeRetentionConfigurationsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeRetentionConfigurationsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeRetentionConfigurationsError::NoSuchRetentionConfigurationException(inner) => Error::NoSuchRetentionConfigurationException(inner),
            crate::error::DescribeRetentionConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetAggregateComplianceDetailsByConfigRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetAggregateComplianceDetailsByConfigRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAggregateComplianceDetailsByConfigRuleError> for Error {
    fn from(err: crate::error::GetAggregateComplianceDetailsByConfigRuleError) -> Self {
        match err {
            crate::error::GetAggregateComplianceDetailsByConfigRuleError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::GetAggregateComplianceDetailsByConfigRuleError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::GetAggregateComplianceDetailsByConfigRuleError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::GetAggregateComplianceDetailsByConfigRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetAggregateComplianceDetailsByConfigRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetAggregateConfigRuleComplianceSummaryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetAggregateConfigRuleComplianceSummaryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAggregateConfigRuleComplianceSummaryError> for Error {
    fn from(err: crate::error::GetAggregateConfigRuleComplianceSummaryError) -> Self {
        match err {
            crate::error::GetAggregateConfigRuleComplianceSummaryError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::GetAggregateConfigRuleComplianceSummaryError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::GetAggregateConfigRuleComplianceSummaryError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::GetAggregateConfigRuleComplianceSummaryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetAggregateConfigRuleComplianceSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetAggregateConformancePackComplianceSummaryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetAggregateConformancePackComplianceSummaryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAggregateConformancePackComplianceSummaryError> for Error {
    fn from(err: crate::error::GetAggregateConformancePackComplianceSummaryError) -> Self {
        match err {
            crate::error::GetAggregateConformancePackComplianceSummaryError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::GetAggregateConformancePackComplianceSummaryError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::GetAggregateConformancePackComplianceSummaryError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::GetAggregateConformancePackComplianceSummaryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetAggregateConformancePackComplianceSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetAggregateDiscoveredResourceCountsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetAggregateDiscoveredResourceCountsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAggregateDiscoveredResourceCountsError> for Error {
    fn from(err: crate::error::GetAggregateDiscoveredResourceCountsError) -> Self {
        match err {
            crate::error::GetAggregateDiscoveredResourceCountsError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::GetAggregateDiscoveredResourceCountsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::GetAggregateDiscoveredResourceCountsError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::GetAggregateDiscoveredResourceCountsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetAggregateDiscoveredResourceCountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAggregateResourceConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAggregateResourceConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAggregateResourceConfigError> for Error {
    fn from(err: crate::error::GetAggregateResourceConfigError) -> Self {
        match err {
            crate::error::GetAggregateResourceConfigError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::GetAggregateResourceConfigError::OversizedConfigurationItemException(inner) => Error::OversizedConfigurationItemException(inner),
            crate::error::GetAggregateResourceConfigError::ResourceNotDiscoveredException(inner) => Error::ResourceNotDiscoveredException(inner),
            crate::error::GetAggregateResourceConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetAggregateResourceConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetComplianceDetailsByConfigRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetComplianceDetailsByConfigRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetComplianceDetailsByConfigRuleError> for Error {
    fn from(err: crate::error::GetComplianceDetailsByConfigRuleError) -> Self {
        match err {
            crate::error::GetComplianceDetailsByConfigRuleError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::error::GetComplianceDetailsByConfigRuleError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::GetComplianceDetailsByConfigRuleError::NoSuchConfigRuleException(
                inner,
            ) => Error::NoSuchConfigRuleException(inner),
            crate::error::GetComplianceDetailsByConfigRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetComplianceDetailsByResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetComplianceDetailsByResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetComplianceDetailsByResourceError> for Error {
    fn from(err: crate::error::GetComplianceDetailsByResourceError) -> Self {
        match err {
            crate::error::GetComplianceDetailsByResourceError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::GetComplianceDetailsByResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetComplianceSummaryByConfigRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetComplianceSummaryByConfigRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetComplianceSummaryByConfigRuleError> for Error {
    fn from(err: crate::error::GetComplianceSummaryByConfigRuleError) -> Self {
        match err {
            crate::error::GetComplianceSummaryByConfigRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::GetComplianceSummaryByResourceTypeError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetComplianceSummaryByResourceTypeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetComplianceSummaryByResourceTypeError> for Error {
    fn from(err: crate::error::GetComplianceSummaryByResourceTypeError) -> Self {
        match err {
            crate::error::GetComplianceSummaryByResourceTypeError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::GetComplianceSummaryByResourceTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetConformancePackComplianceDetailsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetConformancePackComplianceDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConformancePackComplianceDetailsError> for Error {
    fn from(err: crate::error::GetConformancePackComplianceDetailsError) -> Self {
        match err {
            crate::error::GetConformancePackComplianceDetailsError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::GetConformancePackComplianceDetailsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::GetConformancePackComplianceDetailsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::GetConformancePackComplianceDetailsError::NoSuchConfigRuleInConformancePackException(inner) => Error::NoSuchConfigRuleInConformancePackException(inner),
            crate::error::GetConformancePackComplianceDetailsError::NoSuchConformancePackException(inner) => Error::NoSuchConformancePackException(inner),
            crate::error::GetConformancePackComplianceDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetConformancePackComplianceSummaryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetConformancePackComplianceSummaryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConformancePackComplianceSummaryError> for Error {
    fn from(err: crate::error::GetConformancePackComplianceSummaryError) -> Self {
        match err {
            crate::error::GetConformancePackComplianceSummaryError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::GetConformancePackComplianceSummaryError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::GetConformancePackComplianceSummaryError::NoSuchConformancePackException(inner) => Error::NoSuchConformancePackException(inner),
            crate::error::GetConformancePackComplianceSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCustomRulePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCustomRulePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCustomRulePolicyError> for Error {
    fn from(err: crate::error::GetCustomRulePolicyError) -> Self {
        match err {
            crate::error::GetCustomRulePolicyError::NoSuchConfigRuleException(inner) => {
                Error::NoSuchConfigRuleException(inner)
            }
            crate::error::GetCustomRulePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDiscoveredResourceCountsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDiscoveredResourceCountsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDiscoveredResourceCountsError> for Error {
    fn from(err: crate::error::GetDiscoveredResourceCountsError) -> Self {
        match err {
            crate::error::GetDiscoveredResourceCountsError::InvalidLimitException(inner) => {
                Error::InvalidLimitException(inner)
            }
            crate::error::GetDiscoveredResourceCountsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::GetDiscoveredResourceCountsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetDiscoveredResourceCountsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetOrganizationConfigRuleDetailedStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetOrganizationConfigRuleDetailedStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOrganizationConfigRuleDetailedStatusError> for Error {
    fn from(err: crate::error::GetOrganizationConfigRuleDetailedStatusError) -> Self {
        match err {
            crate::error::GetOrganizationConfigRuleDetailedStatusError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::GetOrganizationConfigRuleDetailedStatusError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::GetOrganizationConfigRuleDetailedStatusError::NoSuchOrganizationConfigRuleException(inner) => Error::NoSuchOrganizationConfigRuleException(inner),
            crate::error::GetOrganizationConfigRuleDetailedStatusError::OrganizationAccessDeniedException(inner) => Error::OrganizationAccessDeniedException(inner),
            crate::error::GetOrganizationConfigRuleDetailedStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetOrganizationConformancePackDetailedStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetOrganizationConformancePackDetailedStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOrganizationConformancePackDetailedStatusError> for Error {
    fn from(err: crate::error::GetOrganizationConformancePackDetailedStatusError) -> Self {
        match err {
            crate::error::GetOrganizationConformancePackDetailedStatusError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::GetOrganizationConformancePackDetailedStatusError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::GetOrganizationConformancePackDetailedStatusError::NoSuchOrganizationConformancePackException(inner) => Error::NoSuchOrganizationConformancePackException(inner),
            crate::error::GetOrganizationConformancePackDetailedStatusError::OrganizationAccessDeniedException(inner) => Error::OrganizationAccessDeniedException(inner),
            crate::error::GetOrganizationConformancePackDetailedStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetOrganizationCustomRulePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetOrganizationCustomRulePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOrganizationCustomRulePolicyError> for Error {
    fn from(err: crate::error::GetOrganizationCustomRulePolicyError) -> Self {
        match err {
            crate::error::GetOrganizationCustomRulePolicyError::NoSuchOrganizationConfigRuleException(inner) => Error::NoSuchOrganizationConfigRuleException(inner),
            crate::error::GetOrganizationCustomRulePolicyError::OrganizationAccessDeniedException(inner) => Error::OrganizationAccessDeniedException(inner),
            crate::error::GetOrganizationCustomRulePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResourceConfigHistoryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetResourceConfigHistoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResourceConfigHistoryError> for Error {
    fn from(err: crate::error::GetResourceConfigHistoryError) -> Self {
        match err {
            crate::error::GetResourceConfigHistoryError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::GetResourceConfigHistoryError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::GetResourceConfigHistoryError::InvalidTimeRangeException(inner) => Error::InvalidTimeRangeException(inner),
            crate::error::GetResourceConfigHistoryError::NoAvailableConfigurationRecorderException(inner) => Error::NoAvailableConfigurationRecorderException(inner),
            crate::error::GetResourceConfigHistoryError::ResourceNotDiscoveredException(inner) => Error::ResourceNotDiscoveredException(inner),
            crate::error::GetResourceConfigHistoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetResourceConfigHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResourceEvaluationSummaryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetResourceEvaluationSummaryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResourceEvaluationSummaryError> for Error {
    fn from(err: crate::error::GetResourceEvaluationSummaryError) -> Self {
        match err {
            crate::error::GetResourceEvaluationSummaryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetResourceEvaluationSummaryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetStoredQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetStoredQueryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetStoredQueryError> for Error {
    fn from(err: crate::error::GetStoredQueryError) -> Self {
        match err {
            crate::error::GetStoredQueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetStoredQueryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetStoredQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListAggregateDiscoveredResourcesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAggregateDiscoveredResourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAggregateDiscoveredResourcesError> for Error {
    fn from(err: crate::error::ListAggregateDiscoveredResourcesError) -> Self {
        match err {
            crate::error::ListAggregateDiscoveredResourcesError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::ListAggregateDiscoveredResourcesError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListAggregateDiscoveredResourcesError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::ListAggregateDiscoveredResourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListAggregateDiscoveredResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListConformancePackComplianceScoresError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListConformancePackComplianceScoresError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListConformancePackComplianceScoresError> for Error {
    fn from(err: crate::error::ListConformancePackComplianceScoresError) -> Self {
        match err {
            crate::error::ListConformancePackComplianceScoresError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::ListConformancePackComplianceScoresError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListConformancePackComplianceScoresError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::ListConformancePackComplianceScoresError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDiscoveredResourcesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDiscoveredResourcesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDiscoveredResourcesError> for Error {
    fn from(err: crate::error::ListDiscoveredResourcesError) -> Self {
        match err {
            crate::error::ListDiscoveredResourcesError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::ListDiscoveredResourcesError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListDiscoveredResourcesError::NoAvailableConfigurationRecorderException(inner) => Error::NoAvailableConfigurationRecorderException(inner),
            crate::error::ListDiscoveredResourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListDiscoveredResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourceEvaluationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResourceEvaluationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourceEvaluationsError> for Error {
    fn from(err: crate::error::ListResourceEvaluationsError) -> Self {
        match err {
            crate::error::ListResourceEvaluationsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListResourceEvaluationsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListResourceEvaluationsError::InvalidTimeRangeException(inner) => {
                Error::InvalidTimeRangeException(inner)
            }
            crate::error::ListResourceEvaluationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListStoredQueriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListStoredQueriesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListStoredQueriesError> for Error {
    fn from(err: crate::error::ListStoredQueriesError) -> Self {
        match err {
            crate::error::ListStoredQueriesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListStoredQueriesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListStoredQueriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InvalidLimitException(inner) => {
                Error::InvalidLimitException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAggregationAuthorizationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutAggregationAuthorizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAggregationAuthorizationError> for Error {
    fn from(err: crate::error::PutAggregationAuthorizationError) -> Self {
        match err {
            crate::error::PutAggregationAuthorizationError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::PutAggregationAuthorizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutConfigRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutConfigRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutConfigRuleError> for Error {
    fn from(err: crate::error::PutConfigRuleError) -> Self {
        match err {
            crate::error::PutConfigRuleError::InsufficientPermissionsException(inner) => {
                Error::InsufficientPermissionsException(inner)
            }
            crate::error::PutConfigRuleError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::PutConfigRuleError::MaxNumberOfConfigRulesExceededException(inner) => {
                Error::MaxNumberOfConfigRulesExceededException(inner)
            }
            crate::error::PutConfigRuleError::NoAvailableConfigurationRecorderException(inner) => {
                Error::NoAvailableConfigurationRecorderException(inner)
            }
            crate::error::PutConfigRuleError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::PutConfigRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutConfigurationAggregatorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutConfigurationAggregatorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutConfigurationAggregatorError> for Error {
    fn from(err: crate::error::PutConfigurationAggregatorError) -> Self {
        match err {
            crate::error::PutConfigurationAggregatorError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::PutConfigurationAggregatorError::InvalidRoleException(inner) => Error::InvalidRoleException(inner),
            crate::error::PutConfigurationAggregatorError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::PutConfigurationAggregatorError::NoAvailableOrganizationException(inner) => Error::NoAvailableOrganizationException(inner),
            crate::error::PutConfigurationAggregatorError::OrganizationAccessDeniedException(inner) => Error::OrganizationAccessDeniedException(inner),
            crate::error::PutConfigurationAggregatorError::OrganizationAllFeaturesNotEnabledException(inner) => Error::OrganizationAllFeaturesNotEnabledException(inner),
            crate::error::PutConfigurationAggregatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutConfigurationRecorderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutConfigurationRecorderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutConfigurationRecorderError> for Error {
    fn from(err: crate::error::PutConfigurationRecorderError) -> Self {
        match err {
            crate::error::PutConfigurationRecorderError::InvalidConfigurationRecorderNameException(inner) => Error::InvalidConfigurationRecorderNameException(inner),
            crate::error::PutConfigurationRecorderError::InvalidRecordingGroupException(inner) => Error::InvalidRecordingGroupException(inner),
            crate::error::PutConfigurationRecorderError::InvalidRoleException(inner) => Error::InvalidRoleException(inner),
            crate::error::PutConfigurationRecorderError::MaxNumberOfConfigurationRecordersExceededException(inner) => Error::MaxNumberOfConfigurationRecordersExceededException(inner),
            crate::error::PutConfigurationRecorderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutConformancePackError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutConformancePackError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutConformancePackError> for Error {
    fn from(err: crate::error::PutConformancePackError) -> Self {
        match err {
            crate::error::PutConformancePackError::ConformancePackTemplateValidationException(
                inner,
            ) => Error::ConformancePackTemplateValidationException(inner),
            crate::error::PutConformancePackError::InsufficientPermissionsException(inner) => {
                Error::InsufficientPermissionsException(inner)
            }
            crate::error::PutConformancePackError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::PutConformancePackError::MaxNumberOfConformancePacksExceededException(
                inner,
            ) => Error::MaxNumberOfConformancePacksExceededException(inner),
            crate::error::PutConformancePackError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::PutConformancePackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutDeliveryChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutDeliveryChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutDeliveryChannelError> for Error {
    fn from(err: crate::error::PutDeliveryChannelError) -> Self {
        match err {
            crate::error::PutDeliveryChannelError::InsufficientDeliveryPolicyException(inner) => {
                Error::InsufficientDeliveryPolicyException(inner)
            }
            crate::error::PutDeliveryChannelError::InvalidDeliveryChannelNameException(inner) => {
                Error::InvalidDeliveryChannelNameException(inner)
            }
            crate::error::PutDeliveryChannelError::InvalidS3KeyPrefixException(inner) => {
                Error::InvalidS3KeyPrefixException(inner)
            }
            crate::error::PutDeliveryChannelError::InvalidS3KmsKeyArnException(inner) => {
                Error::InvalidS3KmsKeyArnException(inner)
            }
            crate::error::PutDeliveryChannelError::InvalidSnsTopicArnException(inner) => {
                Error::InvalidSnsTopicArnException(inner)
            }
            crate::error::PutDeliveryChannelError::MaxNumberOfDeliveryChannelsExceededException(
                inner,
            ) => Error::MaxNumberOfDeliveryChannelsExceededException(inner),
            crate::error::PutDeliveryChannelError::NoAvailableConfigurationRecorderException(
                inner,
            ) => Error::NoAvailableConfigurationRecorderException(inner),
            crate::error::PutDeliveryChannelError::NoSuchBucketException(inner) => {
                Error::NoSuchBucketException(inner)
            }
            crate::error::PutDeliveryChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutEvaluationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutEvaluationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutEvaluationsError> for Error {
    fn from(err: crate::error::PutEvaluationsError) -> Self {
        match err {
            crate::error::PutEvaluationsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::PutEvaluationsError::InvalidResultTokenException(inner) => {
                Error::InvalidResultTokenException(inner)
            }
            crate::error::PutEvaluationsError::NoSuchConfigRuleException(inner) => {
                Error::NoSuchConfigRuleException(inner)
            }
            crate::error::PutEvaluationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutExternalEvaluationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutExternalEvaluationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutExternalEvaluationError> for Error {
    fn from(err: crate::error::PutExternalEvaluationError) -> Self {
        match err {
            crate::error::PutExternalEvaluationError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::PutExternalEvaluationError::NoSuchConfigRuleException(inner) => {
                Error::NoSuchConfigRuleException(inner)
            }
            crate::error::PutExternalEvaluationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutOrganizationConfigRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutOrganizationConfigRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutOrganizationConfigRuleError> for Error {
    fn from(err: crate::error::PutOrganizationConfigRuleError) -> Self {
        match err {
            crate::error::PutOrganizationConfigRuleError::InsufficientPermissionsException(inner) => Error::InsufficientPermissionsException(inner),
            crate::error::PutOrganizationConfigRuleError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::PutOrganizationConfigRuleError::MaxNumberOfOrganizationConfigRulesExceededException(inner) => Error::MaxNumberOfOrganizationConfigRulesExceededException(inner),
            crate::error::PutOrganizationConfigRuleError::NoAvailableOrganizationException(inner) => Error::NoAvailableOrganizationException(inner),
            crate::error::PutOrganizationConfigRuleError::OrganizationAccessDeniedException(inner) => Error::OrganizationAccessDeniedException(inner),
            crate::error::PutOrganizationConfigRuleError::OrganizationAllFeaturesNotEnabledException(inner) => Error::OrganizationAllFeaturesNotEnabledException(inner),
            crate::error::PutOrganizationConfigRuleError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::PutOrganizationConfigRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::PutOrganizationConfigRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::PutOrganizationConformancePackError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutOrganizationConformancePackError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutOrganizationConformancePackError> for Error {
    fn from(err: crate::error::PutOrganizationConformancePackError) -> Self {
        match err {
            crate::error::PutOrganizationConformancePackError::InsufficientPermissionsException(inner) => Error::InsufficientPermissionsException(inner),
            crate::error::PutOrganizationConformancePackError::MaxNumberOfOrganizationConformancePacksExceededException(inner) => Error::MaxNumberOfOrganizationConformancePacksExceededException(inner),
            crate::error::PutOrganizationConformancePackError::NoAvailableOrganizationException(inner) => Error::NoAvailableOrganizationException(inner),
            crate::error::PutOrganizationConformancePackError::OrganizationAccessDeniedException(inner) => Error::OrganizationAccessDeniedException(inner),
            crate::error::PutOrganizationConformancePackError::OrganizationAllFeaturesNotEnabledException(inner) => Error::OrganizationAllFeaturesNotEnabledException(inner),
            crate::error::PutOrganizationConformancePackError::OrganizationConformancePackTemplateValidationException(inner) => Error::OrganizationConformancePackTemplateValidationException(inner),
            crate::error::PutOrganizationConformancePackError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::PutOrganizationConformancePackError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::PutOrganizationConformancePackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRemediationConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutRemediationConfigurationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRemediationConfigurationsError> for Error {
    fn from(err: crate::error::PutRemediationConfigurationsError) -> Self {
        match err {
            crate::error::PutRemediationConfigurationsError::InsufficientPermissionsException(
                inner,
            ) => Error::InsufficientPermissionsException(inner),
            crate::error::PutRemediationConfigurationsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::PutRemediationConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRemediationExceptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutRemediationExceptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRemediationExceptionsError> for Error {
    fn from(err: crate::error::PutRemediationExceptionsError) -> Self {
        match err {
            crate::error::PutRemediationExceptionsError::InsufficientPermissionsException(
                inner,
            ) => Error::InsufficientPermissionsException(inner),
            crate::error::PutRemediationExceptionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::PutRemediationExceptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutResourceConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutResourceConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutResourceConfigError> for Error {
    fn from(err: crate::error::PutResourceConfigError) -> Self {
        match err {
            crate::error::PutResourceConfigError::InsufficientPermissionsException(inner) => {
                Error::InsufficientPermissionsException(inner)
            }
            crate::error::PutResourceConfigError::MaxActiveResourcesExceededException(inner) => {
                Error::MaxActiveResourcesExceededException(inner)
            }
            crate::error::PutResourceConfigError::NoRunningConfigurationRecorderException(
                inner,
            ) => Error::NoRunningConfigurationRecorderException(inner),
            crate::error::PutResourceConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutResourceConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRetentionConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutRetentionConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRetentionConfigurationError> for Error {
    fn from(err: crate::error::PutRetentionConfigurationError) -> Self {
        match err {
            crate::error::PutRetentionConfigurationError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::PutRetentionConfigurationError::MaxNumberOfRetentionConfigurationsExceededException(inner) => Error::MaxNumberOfRetentionConfigurationsExceededException(inner),
            crate::error::PutRetentionConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutStoredQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutStoredQueryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutStoredQueryError> for Error {
    fn from(err: crate::error::PutStoredQueryError) -> Self {
        match err {
            crate::error::PutStoredQueryError::ResourceConcurrentModificationException(inner) => {
                Error::ResourceConcurrentModificationException(inner)
            }
            crate::error::PutStoredQueryError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::PutStoredQueryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutStoredQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SelectAggregateResourceConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SelectAggregateResourceConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SelectAggregateResourceConfigError> for Error {
    fn from(err: crate::error::SelectAggregateResourceConfigError) -> Self {
        match err {
            crate::error::SelectAggregateResourceConfigError::InvalidExpressionException(inner) => Error::InvalidExpressionException(inner),
            crate::error::SelectAggregateResourceConfigError::InvalidLimitException(inner) => Error::InvalidLimitException(inner),
            crate::error::SelectAggregateResourceConfigError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::SelectAggregateResourceConfigError::NoSuchConfigurationAggregatorException(inner) => Error::NoSuchConfigurationAggregatorException(inner),
            crate::error::SelectAggregateResourceConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SelectResourceConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SelectResourceConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SelectResourceConfigError> for Error {
    fn from(err: crate::error::SelectResourceConfigError) -> Self {
        match err {
            crate::error::SelectResourceConfigError::InvalidExpressionException(inner) => {
                Error::InvalidExpressionException(inner)
            }
            crate::error::SelectResourceConfigError::InvalidLimitException(inner) => {
                Error::InvalidLimitException(inner)
            }
            crate::error::SelectResourceConfigError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::SelectResourceConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartConfigRulesEvaluationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartConfigRulesEvaluationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartConfigRulesEvaluationError> for Error {
    fn from(err: crate::error::StartConfigRulesEvaluationError) -> Self {
        match err {
            crate::error::StartConfigRulesEvaluationError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::StartConfigRulesEvaluationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartConfigRulesEvaluationError::NoSuchConfigRuleException(inner) => {
                Error::NoSuchConfigRuleException(inner)
            }
            crate::error::StartConfigRulesEvaluationError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::StartConfigRulesEvaluationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartConfigurationRecorderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartConfigurationRecorderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartConfigurationRecorderError> for Error {
    fn from(err: crate::error::StartConfigurationRecorderError) -> Self {
        match err {
            crate::error::StartConfigurationRecorderError::NoAvailableDeliveryChannelException(
                inner,
            ) => Error::NoAvailableDeliveryChannelException(inner),
            crate::error::StartConfigurationRecorderError::NoSuchConfigurationRecorderException(
                inner,
            ) => Error::NoSuchConfigurationRecorderException(inner),
            crate::error::StartConfigurationRecorderError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartRemediationExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartRemediationExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartRemediationExecutionError> for Error {
    fn from(err: crate::error::StartRemediationExecutionError) -> Self {
        match err {
            crate::error::StartRemediationExecutionError::InsufficientPermissionsException(inner) => Error::InsufficientPermissionsException(inner),
            crate::error::StartRemediationExecutionError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::StartRemediationExecutionError::NoSuchRemediationConfigurationException(inner) => Error::NoSuchRemediationConfigurationException(inner),
            crate::error::StartRemediationExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartResourceEvaluationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartResourceEvaluationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartResourceEvaluationError> for Error {
    fn from(err: crate::error::StartResourceEvaluationError) -> Self {
        match err {
            crate::error::StartResourceEvaluationError::IdempotentParameterMismatch(inner) => {
                Error::IdempotentParameterMismatch(inner)
            }
            crate::error::StartResourceEvaluationError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::StartResourceEvaluationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopConfigurationRecorderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopConfigurationRecorderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopConfigurationRecorderError> for Error {
    fn from(err: crate::error::StopConfigurationRecorderError) -> Self {
        match err {
            crate::error::StopConfigurationRecorderError::NoSuchConfigurationRecorderException(
                inner,
            ) => Error::NoSuchConfigurationRecorderException(inner),
            crate::error::StopConfigurationRecorderError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConformancePackTemplateValidationException(e) => e.request_id(),
            Self::IdempotentParameterMismatch(e) => e.request_id(),
            Self::InsufficientDeliveryPolicyException(e) => e.request_id(),
            Self::InsufficientPermissionsException(e) => e.request_id(),
            Self::InvalidConfigurationRecorderNameException(e) => e.request_id(),
            Self::InvalidDeliveryChannelNameException(e) => e.request_id(),
            Self::InvalidExpressionException(e) => e.request_id(),
            Self::InvalidLimitException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::InvalidParameterValueException(e) => e.request_id(),
            Self::InvalidRecordingGroupException(e) => e.request_id(),
            Self::InvalidResultTokenException(e) => e.request_id(),
            Self::InvalidRoleException(e) => e.request_id(),
            Self::InvalidS3KeyPrefixException(e) => e.request_id(),
            Self::InvalidS3KmsKeyArnException(e) => e.request_id(),
            Self::InvalidSnsTopicArnException(e) => e.request_id(),
            Self::InvalidTimeRangeException(e) => e.request_id(),
            Self::LastDeliveryChannelDeleteFailedException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::MaxActiveResourcesExceededException(e) => e.request_id(),
            Self::MaxNumberOfConfigRulesExceededException(e) => e.request_id(),
            Self::MaxNumberOfConfigurationRecordersExceededException(e) => e.request_id(),
            Self::MaxNumberOfConformancePacksExceededException(e) => e.request_id(),
            Self::MaxNumberOfDeliveryChannelsExceededException(e) => e.request_id(),
            Self::MaxNumberOfOrganizationConfigRulesExceededException(e) => e.request_id(),
            Self::MaxNumberOfOrganizationConformancePacksExceededException(e) => e.request_id(),
            Self::MaxNumberOfRetentionConfigurationsExceededException(e) => e.request_id(),
            Self::NoAvailableConfigurationRecorderException(e) => e.request_id(),
            Self::NoAvailableDeliveryChannelException(e) => e.request_id(),
            Self::NoAvailableOrganizationException(e) => e.request_id(),
            Self::NoRunningConfigurationRecorderException(e) => e.request_id(),
            Self::NoSuchBucketException(e) => e.request_id(),
            Self::NoSuchConfigRuleException(e) => e.request_id(),
            Self::NoSuchConfigRuleInConformancePackException(e) => e.request_id(),
            Self::NoSuchConfigurationAggregatorException(e) => e.request_id(),
            Self::NoSuchConfigurationRecorderException(e) => e.request_id(),
            Self::NoSuchConformancePackException(e) => e.request_id(),
            Self::NoSuchDeliveryChannelException(e) => e.request_id(),
            Self::NoSuchOrganizationConfigRuleException(e) => e.request_id(),
            Self::NoSuchOrganizationConformancePackException(e) => e.request_id(),
            Self::NoSuchRemediationConfigurationException(e) => e.request_id(),
            Self::NoSuchRemediationExceptionException(e) => e.request_id(),
            Self::NoSuchRetentionConfigurationException(e) => e.request_id(),
            Self::OrganizationAccessDeniedException(e) => e.request_id(),
            Self::OrganizationAllFeaturesNotEnabledException(e) => e.request_id(),
            Self::OrganizationConformancePackTemplateValidationException(e) => e.request_id(),
            Self::OversizedConfigurationItemException(e) => e.request_id(),
            Self::RemediationInProgressException(e) => e.request_id(),
            Self::ResourceConcurrentModificationException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotDiscoveredException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
