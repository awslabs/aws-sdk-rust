// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_get_aggregate_resource_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetAggregateResourceConfigInput,
) {
    if let Some(var_1) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_1);
    }
    if let Some(var_2) = &input.resource_identifiers {
        let mut array_3 = object.key("ResourceIdentifiers").start_array();
        for item_4 in var_2 {
            {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aggregate_resource_identifier(
                    &mut object_5,
                    item_4,
                );
                object_5.finish();
            }
        }
        array_3.finish();
    }
}

pub fn serialize_structure_crate_input_batch_get_resource_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetResourceConfigInput,
) {
    if let Some(var_6) = &input.resource_keys {
        let mut array_7 = object.key("resourceKeys").start_array();
        for item_8 in var_6 {
            {
                let mut object_9 = array_7.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_key(
                    &mut object_9,
                    item_8,
                );
                object_9.finish();
            }
        }
        array_7.finish();
    }
}

pub fn serialize_structure_crate_input_delete_aggregation_authorization_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAggregationAuthorizationInput,
) {
    if let Some(var_10) = &input.authorized_account_id {
        object.key("AuthorizedAccountId").string(var_10);
    }
    if let Some(var_11) = &input.authorized_aws_region {
        object.key("AuthorizedAwsRegion").string(var_11);
    }
}

pub fn serialize_structure_crate_input_delete_config_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConfigRuleInput,
) {
    if let Some(var_12) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_12);
    }
}

pub fn serialize_structure_crate_input_delete_configuration_aggregator_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConfigurationAggregatorInput,
) {
    if let Some(var_13) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_13);
    }
}

pub fn serialize_structure_crate_input_delete_configuration_recorder_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConfigurationRecorderInput,
) {
    if let Some(var_14) = &input.configuration_recorder_name {
        object.key("ConfigurationRecorderName").string(var_14);
    }
}

pub fn serialize_structure_crate_input_delete_conformance_pack_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConformancePackInput,
) {
    if let Some(var_15) = &input.conformance_pack_name {
        object.key("ConformancePackName").string(var_15);
    }
}

pub fn serialize_structure_crate_input_delete_delivery_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDeliveryChannelInput,
) {
    if let Some(var_16) = &input.delivery_channel_name {
        object.key("DeliveryChannelName").string(var_16);
    }
}

pub fn serialize_structure_crate_input_delete_evaluation_results_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEvaluationResultsInput,
) {
    if let Some(var_17) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_17);
    }
}

pub fn serialize_structure_crate_input_delete_organization_config_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOrganizationConfigRuleInput,
) {
    if let Some(var_18) = &input.organization_config_rule_name {
        object.key("OrganizationConfigRuleName").string(var_18);
    }
}

pub fn serialize_structure_crate_input_delete_organization_conformance_pack_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOrganizationConformancePackInput,
) {
    if let Some(var_19) = &input.organization_conformance_pack_name {
        object.key("OrganizationConformancePackName").string(var_19);
    }
}

pub fn serialize_structure_crate_input_delete_pending_aggregation_request_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePendingAggregationRequestInput,
) {
    if let Some(var_20) = &input.requester_account_id {
        object.key("RequesterAccountId").string(var_20);
    }
    if let Some(var_21) = &input.requester_aws_region {
        object.key("RequesterAwsRegion").string(var_21);
    }
}

pub fn serialize_structure_crate_input_delete_remediation_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRemediationConfigurationInput,
) {
    if let Some(var_22) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_22);
    }
    if let Some(var_23) = &input.resource_type {
        object.key("ResourceType").string(var_23);
    }
}

pub fn serialize_structure_crate_input_delete_remediation_exceptions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRemediationExceptionsInput,
) {
    if let Some(var_24) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_24);
    }
    if let Some(var_25) = &input.resource_keys {
        let mut array_26 = object.key("ResourceKeys").start_array();
        for item_27 in var_25 {
            {
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_crate_model_remediation_exception_resource_key(
                    &mut object_28,
                    item_27,
                );
                object_28.finish();
            }
        }
        array_26.finish();
    }
}

pub fn serialize_structure_crate_input_delete_resource_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourceConfigInput,
) {
    if let Some(var_29) = &input.resource_type {
        object.key("ResourceType").string(var_29);
    }
    if let Some(var_30) = &input.resource_id {
        object.key("ResourceId").string(var_30);
    }
}

pub fn serialize_structure_crate_input_delete_retention_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRetentionConfigurationInput,
) {
    if let Some(var_31) = &input.retention_configuration_name {
        object.key("RetentionConfigurationName").string(var_31);
    }
}

pub fn serialize_structure_crate_input_delete_stored_query_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStoredQueryInput,
) {
    if let Some(var_32) = &input.query_name {
        object.key("QueryName").string(var_32);
    }
}

pub fn serialize_structure_crate_input_deliver_config_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeliverConfigSnapshotInput,
) {
    if let Some(var_33) = &input.delivery_channel_name {
        object.key("deliveryChannelName").string(var_33);
    }
}

pub fn serialize_structure_crate_input_describe_aggregate_compliance_by_config_rules_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAggregateComplianceByConfigRulesInput,
) {
    if let Some(var_34) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_34);
    }
    if let Some(var_35) = &input.filters {
        let mut object_36 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_config_rule_compliance_filters(
            &mut object_36,
            var_35,
        );
        object_36.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_37) = &input.next_token {
        object.key("NextToken").string(var_37);
    }
}

pub fn serialize_structure_crate_input_describe_aggregate_compliance_by_conformance_packs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAggregateComplianceByConformancePacksInput,
) {
    if let Some(var_38) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_38);
    }
    if let Some(var_39) = &input.filters {
        let mut object_40 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregate_conformance_pack_compliance_filters(&mut object_40, var_39);
        object_40.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_41) = &input.next_token {
        object.key("NextToken").string(var_41);
    }
}

pub fn serialize_structure_crate_input_describe_aggregation_authorizations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAggregationAuthorizationsInput,
) {
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_42) = &input.next_token {
        object.key("NextToken").string(var_42);
    }
}

pub fn serialize_structure_crate_input_describe_compliance_by_config_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeComplianceByConfigRuleInput,
) {
    if let Some(var_43) = &input.config_rule_names {
        let mut array_44 = object.key("ConfigRuleNames").start_array();
        for item_45 in var_43 {
            {
                array_44.value().string(item_45);
            }
        }
        array_44.finish();
    }
    if let Some(var_46) = &input.compliance_types {
        let mut array_47 = object.key("ComplianceTypes").start_array();
        for item_48 in var_46 {
            {
                array_47.value().string(item_48.as_str());
            }
        }
        array_47.finish();
    }
    if let Some(var_49) = &input.next_token {
        object.key("NextToken").string(var_49);
    }
}

pub fn serialize_structure_crate_input_describe_compliance_by_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeComplianceByResourceInput,
) {
    if let Some(var_50) = &input.resource_type {
        object.key("ResourceType").string(var_50);
    }
    if let Some(var_51) = &input.resource_id {
        object.key("ResourceId").string(var_51);
    }
    if let Some(var_52) = &input.compliance_types {
        let mut array_53 = object.key("ComplianceTypes").start_array();
        for item_54 in var_52 {
            {
                array_53.value().string(item_54.as_str());
            }
        }
        array_53.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_55) = &input.next_token {
        object.key("NextToken").string(var_55);
    }
}

pub fn serialize_structure_crate_input_describe_config_rule_evaluation_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigRuleEvaluationStatusInput,
) {
    if let Some(var_56) = &input.config_rule_names {
        let mut array_57 = object.key("ConfigRuleNames").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58);
            }
        }
        array_57.finish();
    }
    if let Some(var_59) = &input.next_token {
        object.key("NextToken").string(var_59);
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_config_rules_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigRulesInput,
) {
    if let Some(var_60) = &input.config_rule_names {
        let mut array_61 = object.key("ConfigRuleNames").start_array();
        for item_62 in var_60 {
            {
                array_61.value().string(item_62);
            }
        }
        array_61.finish();
    }
    if let Some(var_63) = &input.next_token {
        object.key("NextToken").string(var_63);
    }
}

pub fn serialize_structure_crate_input_describe_configuration_aggregators_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigurationAggregatorsInput,
) {
    if let Some(var_64) = &input.configuration_aggregator_names {
        let mut array_65 = object.key("ConfigurationAggregatorNames").start_array();
        for item_66 in var_64 {
            {
                array_65.value().string(item_66);
            }
        }
        array_65.finish();
    }
    if let Some(var_67) = &input.next_token {
        object.key("NextToken").string(var_67);
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_configuration_aggregator_sources_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigurationAggregatorSourcesStatusInput,
) {
    if let Some(var_68) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_68);
    }
    if let Some(var_69) = &input.update_status {
        let mut array_70 = object.key("UpdateStatus").start_array();
        for item_71 in var_69 {
            {
                array_70.value().string(item_71.as_str());
            }
        }
        array_70.finish();
    }
    if let Some(var_72) = &input.next_token {
        object.key("NextToken").string(var_72);
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_configuration_recorders_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigurationRecordersInput,
) {
    if let Some(var_73) = &input.configuration_recorder_names {
        let mut array_74 = object.key("ConfigurationRecorderNames").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75);
            }
        }
        array_74.finish();
    }
}

pub fn serialize_structure_crate_input_describe_configuration_recorder_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigurationRecorderStatusInput,
) {
    if let Some(var_76) = &input.configuration_recorder_names {
        let mut array_77 = object.key("ConfigurationRecorderNames").start_array();
        for item_78 in var_76 {
            {
                array_77.value().string(item_78);
            }
        }
        array_77.finish();
    }
}

pub fn serialize_structure_crate_input_describe_conformance_pack_compliance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConformancePackComplianceInput,
) {
    if let Some(var_79) = &input.conformance_pack_name {
        object.key("ConformancePackName").string(var_79);
    }
    if let Some(var_80) = &input.filters {
        let mut object_81 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_conformance_pack_compliance_filters(
            &mut object_81,
            var_80,
        );
        object_81.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_82) = &input.next_token {
        object.key("NextToken").string(var_82);
    }
}

pub fn serialize_structure_crate_input_describe_conformance_packs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConformancePacksInput,
) {
    if let Some(var_83) = &input.conformance_pack_names {
        let mut array_84 = object.key("ConformancePackNames").start_array();
        for item_85 in var_83 {
            {
                array_84.value().string(item_85);
            }
        }
        array_84.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_86) = &input.next_token {
        object.key("NextToken").string(var_86);
    }
}

pub fn serialize_structure_crate_input_describe_conformance_pack_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConformancePackStatusInput,
) {
    if let Some(var_87) = &input.conformance_pack_names {
        let mut array_88 = object.key("ConformancePackNames").start_array();
        for item_89 in var_87 {
            {
                array_88.value().string(item_89);
            }
        }
        array_88.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_90) = &input.next_token {
        object.key("NextToken").string(var_90);
    }
}

pub fn serialize_structure_crate_input_describe_delivery_channels_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeliveryChannelsInput,
) {
    if let Some(var_91) = &input.delivery_channel_names {
        let mut array_92 = object.key("DeliveryChannelNames").start_array();
        for item_93 in var_91 {
            {
                array_92.value().string(item_93);
            }
        }
        array_92.finish();
    }
}

pub fn serialize_structure_crate_input_describe_delivery_channel_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeliveryChannelStatusInput,
) {
    if let Some(var_94) = &input.delivery_channel_names {
        let mut array_95 = object.key("DeliveryChannelNames").start_array();
        for item_96 in var_94 {
            {
                array_95.value().string(item_96);
            }
        }
        array_95.finish();
    }
}

pub fn serialize_structure_crate_input_describe_organization_config_rules_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrganizationConfigRulesInput,
) {
    if let Some(var_97) = &input.organization_config_rule_names {
        let mut array_98 = object.key("OrganizationConfigRuleNames").start_array();
        for item_99 in var_97 {
            {
                array_98.value().string(item_99);
            }
        }
        array_98.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_100) = &input.next_token {
        object.key("NextToken").string(var_100);
    }
}

pub fn serialize_structure_crate_input_describe_organization_config_rule_statuses_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrganizationConfigRuleStatusesInput,
) {
    if let Some(var_101) = &input.organization_config_rule_names {
        let mut array_102 = object.key("OrganizationConfigRuleNames").start_array();
        for item_103 in var_101 {
            {
                array_102.value().string(item_103);
            }
        }
        array_102.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_104) = &input.next_token {
        object.key("NextToken").string(var_104);
    }
}

pub fn serialize_structure_crate_input_describe_organization_conformance_packs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrganizationConformancePacksInput,
) {
    if let Some(var_105) = &input.organization_conformance_pack_names {
        let mut array_106 = object.key("OrganizationConformancePackNames").start_array();
        for item_107 in var_105 {
            {
                array_106.value().string(item_107);
            }
        }
        array_106.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_108) = &input.next_token {
        object.key("NextToken").string(var_108);
    }
}

pub fn serialize_structure_crate_input_describe_organization_conformance_pack_statuses_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrganizationConformancePackStatusesInput,
) {
    if let Some(var_109) = &input.organization_conformance_pack_names {
        let mut array_110 = object.key("OrganizationConformancePackNames").start_array();
        for item_111 in var_109 {
            {
                array_110.value().string(item_111);
            }
        }
        array_110.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_112) = &input.next_token {
        object.key("NextToken").string(var_112);
    }
}

pub fn serialize_structure_crate_input_describe_pending_aggregation_requests_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePendingAggregationRequestsInput,
) {
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_113) = &input.next_token {
        object.key("NextToken").string(var_113);
    }
}

pub fn serialize_structure_crate_input_describe_remediation_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRemediationConfigurationsInput,
) {
    if let Some(var_114) = &input.config_rule_names {
        let mut array_115 = object.key("ConfigRuleNames").start_array();
        for item_116 in var_114 {
            {
                array_115.value().string(item_116);
            }
        }
        array_115.finish();
    }
}

pub fn serialize_structure_crate_input_describe_remediation_exceptions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRemediationExceptionsInput,
) {
    if let Some(var_117) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_117);
    }
    if let Some(var_118) = &input.resource_keys {
        let mut array_119 = object.key("ResourceKeys").start_array();
        for item_120 in var_118 {
            {
                let mut object_121 = array_119.value().start_object();
                crate::json_ser::serialize_structure_crate_model_remediation_exception_resource_key(
                    &mut object_121,
                    item_120,
                );
                object_121.finish();
            }
        }
        array_119.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_122) = &input.next_token {
        object.key("NextToken").string(var_122);
    }
}

pub fn serialize_structure_crate_input_describe_remediation_execution_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRemediationExecutionStatusInput,
) {
    if let Some(var_123) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_123);
    }
    if let Some(var_124) = &input.resource_keys {
        let mut array_125 = object.key("ResourceKeys").start_array();
        for item_126 in var_124 {
            {
                let mut object_127 = array_125.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_key(
                    &mut object_127,
                    item_126,
                );
                object_127.finish();
            }
        }
        array_125.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_128) = &input.next_token {
        object.key("NextToken").string(var_128);
    }
}

pub fn serialize_structure_crate_input_describe_retention_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRetentionConfigurationsInput,
) {
    if let Some(var_129) = &input.retention_configuration_names {
        let mut array_130 = object.key("RetentionConfigurationNames").start_array();
        for item_131 in var_129 {
            {
                array_130.value().string(item_131);
            }
        }
        array_130.finish();
    }
    if let Some(var_132) = &input.next_token {
        object.key("NextToken").string(var_132);
    }
}

pub fn serialize_structure_crate_input_get_aggregate_compliance_details_by_config_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAggregateComplianceDetailsByConfigRuleInput,
) {
    if let Some(var_133) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_133);
    }
    if let Some(var_134) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_134);
    }
    if let Some(var_135) = &input.account_id {
        object.key("AccountId").string(var_135);
    }
    if let Some(var_136) = &input.aws_region {
        object.key("AwsRegion").string(var_136);
    }
    if let Some(var_137) = &input.compliance_type {
        object.key("ComplianceType").string(var_137.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_138) = &input.next_token {
        object.key("NextToken").string(var_138);
    }
}

pub fn serialize_structure_crate_input_get_aggregate_config_rule_compliance_summary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAggregateConfigRuleComplianceSummaryInput,
) {
    if let Some(var_139) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_139);
    }
    if let Some(var_140) = &input.filters {
        let mut object_141 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_config_rule_compliance_summary_filters(
            &mut object_141,
            var_140,
        );
        object_141.finish();
    }
    if let Some(var_142) = &input.group_by_key {
        object.key("GroupByKey").string(var_142.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_143) = &input.next_token {
        object.key("NextToken").string(var_143);
    }
}

pub fn serialize_structure_crate_input_get_aggregate_conformance_pack_compliance_summary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAggregateConformancePackComplianceSummaryInput,
) {
    if let Some(var_144) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_144);
    }
    if let Some(var_145) = &input.filters {
        let mut object_146 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregate_conformance_pack_compliance_summary_filters(&mut object_146, var_145);
        object_146.finish();
    }
    if let Some(var_147) = &input.group_by_key {
        object.key("GroupByKey").string(var_147.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_148) = &input.next_token {
        object.key("NextToken").string(var_148);
    }
}

pub fn serialize_structure_crate_input_get_aggregate_discovered_resource_counts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAggregateDiscoveredResourceCountsInput,
) {
    if let Some(var_149) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_149);
    }
    if let Some(var_150) = &input.filters {
        let mut object_151 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_count_filters(
            &mut object_151,
            var_150,
        );
        object_151.finish();
    }
    if let Some(var_152) = &input.group_by_key {
        object.key("GroupByKey").string(var_152.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_153) = &input.next_token {
        object.key("NextToken").string(var_153);
    }
}

pub fn serialize_structure_crate_input_get_aggregate_resource_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAggregateResourceConfigInput,
) {
    if let Some(var_154) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_154);
    }
    if let Some(var_155) = &input.resource_identifier {
        let mut object_156 = object.key("ResourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregate_resource_identifier(
            &mut object_156,
            var_155,
        );
        object_156.finish();
    }
}

pub fn serialize_structure_crate_input_get_compliance_details_by_config_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetComplianceDetailsByConfigRuleInput,
) {
    if let Some(var_157) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_157);
    }
    if let Some(var_158) = &input.compliance_types {
        let mut array_159 = object.key("ComplianceTypes").start_array();
        for item_160 in var_158 {
            {
                array_159.value().string(item_160.as_str());
            }
        }
        array_159.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_161) = &input.next_token {
        object.key("NextToken").string(var_161);
    }
}

pub fn serialize_structure_crate_input_get_compliance_details_by_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetComplianceDetailsByResourceInput,
) {
    if let Some(var_162) = &input.resource_type {
        object.key("ResourceType").string(var_162);
    }
    if let Some(var_163) = &input.resource_id {
        object.key("ResourceId").string(var_163);
    }
    if let Some(var_164) = &input.compliance_types {
        let mut array_165 = object.key("ComplianceTypes").start_array();
        for item_166 in var_164 {
            {
                array_165.value().string(item_166.as_str());
            }
        }
        array_165.finish();
    }
    if let Some(var_167) = &input.next_token {
        object.key("NextToken").string(var_167);
    }
}

pub fn serialize_structure_crate_input_get_compliance_summary_by_resource_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetComplianceSummaryByResourceTypeInput,
) {
    if let Some(var_168) = &input.resource_types {
        let mut array_169 = object.key("ResourceTypes").start_array();
        for item_170 in var_168 {
            {
                array_169.value().string(item_170);
            }
        }
        array_169.finish();
    }
}

pub fn serialize_structure_crate_input_get_conformance_pack_compliance_details_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConformancePackComplianceDetailsInput,
) {
    if let Some(var_171) = &input.conformance_pack_name {
        object.key("ConformancePackName").string(var_171);
    }
    if let Some(var_172) = &input.filters {
        let mut object_173 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_conformance_pack_evaluation_filters(
            &mut object_173,
            var_172,
        );
        object_173.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_174) = &input.next_token {
        object.key("NextToken").string(var_174);
    }
}

pub fn serialize_structure_crate_input_get_conformance_pack_compliance_summary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConformancePackComplianceSummaryInput,
) {
    if let Some(var_175) = &input.conformance_pack_names {
        let mut array_176 = object.key("ConformancePackNames").start_array();
        for item_177 in var_175 {
            {
                array_176.value().string(item_177);
            }
        }
        array_176.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_178) = &input.next_token {
        object.key("NextToken").string(var_178);
    }
}

pub fn serialize_structure_crate_input_get_discovered_resource_counts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDiscoveredResourceCountsInput,
) {
    if let Some(var_179) = &input.resource_types {
        let mut array_180 = object.key("resourceTypes").start_array();
        for item_181 in var_179 {
            {
                array_180.value().string(item_181);
            }
        }
        array_180.finish();
    }
    if input.limit != 0 {
        object.key("limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_182) = &input.next_token {
        object.key("nextToken").string(var_182);
    }
}

pub fn serialize_structure_crate_input_get_organization_config_rule_detailed_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOrganizationConfigRuleDetailedStatusInput,
) {
    if let Some(var_183) = &input.organization_config_rule_name {
        object.key("OrganizationConfigRuleName").string(var_183);
    }
    if let Some(var_184) = &input.filters {
        let mut object_185 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_status_detail_filters(
            &mut object_185,
            var_184,
        );
        object_185.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_186) = &input.next_token {
        object.key("NextToken").string(var_186);
    }
}

pub fn serialize_structure_crate_input_get_organization_conformance_pack_detailed_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOrganizationConformancePackDetailedStatusInput,
) {
    if let Some(var_187) = &input.organization_conformance_pack_name {
        object
            .key("OrganizationConformancePackName")
            .string(var_187);
    }
    if let Some(var_188) = &input.filters {
        let mut object_189 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_resource_detailed_status_filters(&mut object_189, var_188);
        object_189.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_190) = &input.next_token {
        object.key("NextToken").string(var_190);
    }
}

pub fn serialize_structure_crate_input_get_resource_config_history_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourceConfigHistoryInput,
) {
    if let Some(var_191) = &input.resource_type {
        object.key("resourceType").string(var_191.as_str());
    }
    if let Some(var_192) = &input.resource_id {
        object.key("resourceId").string(var_192);
    }
    if let Some(var_193) = &input.later_time {
        object
            .key("laterTime")
            .instant(var_193, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_194) = &input.earlier_time {
        object
            .key("earlierTime")
            .instant(var_194, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_195) = &input.chronological_order {
        object.key("chronologicalOrder").string(var_195.as_str());
    }
    if input.limit != 0 {
        object.key("limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_196) = &input.next_token {
        object.key("nextToken").string(var_196);
    }
}

pub fn serialize_structure_crate_input_get_stored_query_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStoredQueryInput,
) {
    if let Some(var_197) = &input.query_name {
        object.key("QueryName").string(var_197);
    }
}

pub fn serialize_structure_crate_input_list_aggregate_discovered_resources_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAggregateDiscoveredResourcesInput,
) {
    if let Some(var_198) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_198);
    }
    if let Some(var_199) = &input.resource_type {
        object.key("ResourceType").string(var_199.as_str());
    }
    if let Some(var_200) = &input.filters {
        let mut object_201 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_filters(&mut object_201, var_200);
        object_201.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_202) = &input.next_token {
        object.key("NextToken").string(var_202);
    }
}

pub fn serialize_structure_crate_input_list_discovered_resources_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDiscoveredResourcesInput,
) {
    if let Some(var_203) = &input.resource_type {
        object.key("resourceType").string(var_203.as_str());
    }
    if let Some(var_204) = &input.resource_ids {
        let mut array_205 = object.key("resourceIds").start_array();
        for item_206 in var_204 {
            {
                array_205.value().string(item_206);
            }
        }
        array_205.finish();
    }
    if let Some(var_207) = &input.resource_name {
        object.key("resourceName").string(var_207);
    }
    if input.limit != 0 {
        object.key("limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if input.include_deleted_resources {
        object
            .key("includeDeletedResources")
            .boolean(input.include_deleted_resources);
    }
    if let Some(var_208) = &input.next_token {
        object.key("nextToken").string(var_208);
    }
}

pub fn serialize_structure_crate_input_list_stored_queries_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStoredQueriesInput,
) {
    if let Some(var_209) = &input.next_token {
        object.key("NextToken").string(var_209);
    }
    if let Some(var_210) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_210).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_211) = &input.resource_arn {
        object.key("ResourceArn").string(var_211);
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_212) = &input.next_token {
        object.key("NextToken").string(var_212);
    }
}

pub fn serialize_structure_crate_input_put_aggregation_authorization_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAggregationAuthorizationInput,
) {
    if let Some(var_213) = &input.authorized_account_id {
        object.key("AuthorizedAccountId").string(var_213);
    }
    if let Some(var_214) = &input.authorized_aws_region {
        object.key("AuthorizedAwsRegion").string(var_214);
    }
    if let Some(var_215) = &input.tags {
        let mut array_216 = object.key("Tags").start_array();
        for item_217 in var_215 {
            {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_218, item_217);
                object_218.finish();
            }
        }
        array_216.finish();
    }
}

pub fn serialize_structure_crate_input_put_config_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConfigRuleInput,
) {
    if let Some(var_219) = &input.config_rule {
        let mut object_220 = object.key("ConfigRule").start_object();
        crate::json_ser::serialize_structure_crate_model_config_rule(&mut object_220, var_219);
        object_220.finish();
    }
    if let Some(var_221) = &input.tags {
        let mut array_222 = object.key("Tags").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_224, item_223);
                object_224.finish();
            }
        }
        array_222.finish();
    }
}

pub fn serialize_structure_crate_input_put_configuration_aggregator_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConfigurationAggregatorInput,
) {
    if let Some(var_225) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_225);
    }
    if let Some(var_226) = &input.account_aggregation_sources {
        let mut array_227 = object.key("AccountAggregationSources").start_array();
        for item_228 in var_226 {
            {
                let mut object_229 = array_227.value().start_object();
                crate::json_ser::serialize_structure_crate_model_account_aggregation_source(
                    &mut object_229,
                    item_228,
                );
                object_229.finish();
            }
        }
        array_227.finish();
    }
    if let Some(var_230) = &input.organization_aggregation_source {
        let mut object_231 = object.key("OrganizationAggregationSource").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_aggregation_source(
            &mut object_231,
            var_230,
        );
        object_231.finish();
    }
    if let Some(var_232) = &input.tags {
        let mut array_233 = object.key("Tags").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_235, item_234);
                object_235.finish();
            }
        }
        array_233.finish();
    }
}

pub fn serialize_structure_crate_input_put_configuration_recorder_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConfigurationRecorderInput,
) {
    if let Some(var_236) = &input.configuration_recorder {
        let mut object_237 = object.key("ConfigurationRecorder").start_object();
        crate::json_ser::serialize_structure_crate_model_configuration_recorder(
            &mut object_237,
            var_236,
        );
        object_237.finish();
    }
}

pub fn serialize_structure_crate_input_put_conformance_pack_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConformancePackInput,
) {
    if let Some(var_238) = &input.conformance_pack_name {
        object.key("ConformancePackName").string(var_238);
    }
    if let Some(var_239) = &input.template_s3_uri {
        object.key("TemplateS3Uri").string(var_239);
    }
    if let Some(var_240) = &input.template_body {
        object.key("TemplateBody").string(var_240);
    }
    if let Some(var_241) = &input.delivery_s3_bucket {
        object.key("DeliveryS3Bucket").string(var_241);
    }
    if let Some(var_242) = &input.delivery_s3_key_prefix {
        object.key("DeliveryS3KeyPrefix").string(var_242);
    }
    if let Some(var_243) = &input.conformance_pack_input_parameters {
        let mut array_244 = object.key("ConformancePackInputParameters").start_array();
        for item_245 in var_243 {
            {
                let mut object_246 = array_244.value().start_object();
                crate::json_ser::serialize_structure_crate_model_conformance_pack_input_parameter(
                    &mut object_246,
                    item_245,
                );
                object_246.finish();
            }
        }
        array_244.finish();
    }
}

pub fn serialize_structure_crate_input_put_delivery_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDeliveryChannelInput,
) {
    if let Some(var_247) = &input.delivery_channel {
        let mut object_248 = object.key("DeliveryChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_delivery_channel(&mut object_248, var_247);
        object_248.finish();
    }
}

pub fn serialize_structure_crate_input_put_evaluations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutEvaluationsInput,
) {
    if let Some(var_249) = &input.evaluations {
        let mut array_250 = object.key("Evaluations").start_array();
        for item_251 in var_249 {
            {
                let mut object_252 = array_250.value().start_object();
                crate::json_ser::serialize_structure_crate_model_evaluation(
                    &mut object_252,
                    item_251,
                );
                object_252.finish();
            }
        }
        array_250.finish();
    }
    if let Some(var_253) = &input.result_token {
        object.key("ResultToken").string(var_253);
    }
    if input.test_mode {
        object.key("TestMode").boolean(input.test_mode);
    }
}

pub fn serialize_structure_crate_input_put_external_evaluation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutExternalEvaluationInput,
) {
    if let Some(var_254) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_254);
    }
    if let Some(var_255) = &input.external_evaluation {
        let mut object_256 = object.key("ExternalEvaluation").start_object();
        crate::json_ser::serialize_structure_crate_model_external_evaluation(
            &mut object_256,
            var_255,
        );
        object_256.finish();
    }
}

pub fn serialize_structure_crate_input_put_organization_config_rule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutOrganizationConfigRuleInput,
) {
    if let Some(var_257) = &input.organization_config_rule_name {
        object.key("OrganizationConfigRuleName").string(var_257);
    }
    if let Some(var_258) = &input.organization_managed_rule_metadata {
        let mut object_259 = object.key("OrganizationManagedRuleMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_managed_rule_metadata(
            &mut object_259,
            var_258,
        );
        object_259.finish();
    }
    if let Some(var_260) = &input.organization_custom_rule_metadata {
        let mut object_261 = object.key("OrganizationCustomRuleMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_custom_rule_metadata(
            &mut object_261,
            var_260,
        );
        object_261.finish();
    }
    if let Some(var_262) = &input.excluded_accounts {
        let mut array_263 = object.key("ExcludedAccounts").start_array();
        for item_264 in var_262 {
            {
                array_263.value().string(item_264);
            }
        }
        array_263.finish();
    }
}

pub fn serialize_structure_crate_input_put_organization_conformance_pack_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutOrganizationConformancePackInput,
) {
    if let Some(var_265) = &input.organization_conformance_pack_name {
        object
            .key("OrganizationConformancePackName")
            .string(var_265);
    }
    if let Some(var_266) = &input.template_s3_uri {
        object.key("TemplateS3Uri").string(var_266);
    }
    if let Some(var_267) = &input.template_body {
        object.key("TemplateBody").string(var_267);
    }
    if let Some(var_268) = &input.delivery_s3_bucket {
        object.key("DeliveryS3Bucket").string(var_268);
    }
    if let Some(var_269) = &input.delivery_s3_key_prefix {
        object.key("DeliveryS3KeyPrefix").string(var_269);
    }
    if let Some(var_270) = &input.conformance_pack_input_parameters {
        let mut array_271 = object.key("ConformancePackInputParameters").start_array();
        for item_272 in var_270 {
            {
                let mut object_273 = array_271.value().start_object();
                crate::json_ser::serialize_structure_crate_model_conformance_pack_input_parameter(
                    &mut object_273,
                    item_272,
                );
                object_273.finish();
            }
        }
        array_271.finish();
    }
    if let Some(var_274) = &input.excluded_accounts {
        let mut array_275 = object.key("ExcludedAccounts").start_array();
        for item_276 in var_274 {
            {
                array_275.value().string(item_276);
            }
        }
        array_275.finish();
    }
}

pub fn serialize_structure_crate_input_put_remediation_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRemediationConfigurationsInput,
) {
    if let Some(var_277) = &input.remediation_configurations {
        let mut array_278 = object.key("RemediationConfigurations").start_array();
        for item_279 in var_277 {
            {
                let mut object_280 = array_278.value().start_object();
                crate::json_ser::serialize_structure_crate_model_remediation_configuration(
                    &mut object_280,
                    item_279,
                );
                object_280.finish();
            }
        }
        array_278.finish();
    }
}

pub fn serialize_structure_crate_input_put_remediation_exceptions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRemediationExceptionsInput,
) {
    if let Some(var_281) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_281);
    }
    if let Some(var_282) = &input.resource_keys {
        let mut array_283 = object.key("ResourceKeys").start_array();
        for item_284 in var_282 {
            {
                let mut object_285 = array_283.value().start_object();
                crate::json_ser::serialize_structure_crate_model_remediation_exception_resource_key(
                    &mut object_285,
                    item_284,
                );
                object_285.finish();
            }
        }
        array_283.finish();
    }
    if let Some(var_286) = &input.message {
        object.key("Message").string(var_286);
    }
    if let Some(var_287) = &input.expiration_time {
        object
            .key("ExpirationTime")
            .instant(var_287, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_input_put_resource_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourceConfigInput,
) {
    if let Some(var_288) = &input.resource_type {
        object.key("ResourceType").string(var_288);
    }
    if let Some(var_289) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_289);
    }
    if let Some(var_290) = &input.resource_id {
        object.key("ResourceId").string(var_290);
    }
    if let Some(var_291) = &input.resource_name {
        object.key("ResourceName").string(var_291);
    }
    if let Some(var_292) = &input.configuration {
        object.key("Configuration").string(var_292);
    }
    if let Some(var_293) = &input.tags {
        let mut object_294 = object.key("Tags").start_object();
        for (key_295, value_296) in var_293 {
            {
                object_294.key(key_295).string(value_296);
            }
        }
        object_294.finish();
    }
}

pub fn serialize_structure_crate_input_put_retention_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRetentionConfigurationInput,
) {
    {
        object.key("RetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.retention_period_in_days).into()),
        );
    }
}

pub fn serialize_structure_crate_input_put_stored_query_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutStoredQueryInput,
) {
    if let Some(var_297) = &input.stored_query {
        let mut object_298 = object.key("StoredQuery").start_object();
        crate::json_ser::serialize_structure_crate_model_stored_query(&mut object_298, var_297);
        object_298.finish();
    }
    if let Some(var_299) = &input.tags {
        let mut array_300 = object.key("Tags").start_array();
        for item_301 in var_299 {
            {
                let mut object_302 = array_300.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_302, item_301);
                object_302.finish();
            }
        }
        array_300.finish();
    }
}

pub fn serialize_structure_crate_input_select_aggregate_resource_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SelectAggregateResourceConfigInput,
) {
    if let Some(var_303) = &input.expression {
        object.key("Expression").string(var_303);
    }
    if let Some(var_304) = &input.configuration_aggregator_name {
        object.key("ConfigurationAggregatorName").string(var_304);
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_305) = &input.next_token {
        object.key("NextToken").string(var_305);
    }
}

pub fn serialize_structure_crate_input_select_resource_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SelectResourceConfigInput,
) {
    if let Some(var_306) = &input.expression {
        object.key("Expression").string(var_306);
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_307) = &input.next_token {
        object.key("NextToken").string(var_307);
    }
}

pub fn serialize_structure_crate_input_start_config_rules_evaluation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartConfigRulesEvaluationInput,
) {
    if let Some(var_308) = &input.config_rule_names {
        let mut array_309 = object.key("ConfigRuleNames").start_array();
        for item_310 in var_308 {
            {
                array_309.value().string(item_310);
            }
        }
        array_309.finish();
    }
}

pub fn serialize_structure_crate_input_start_configuration_recorder_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartConfigurationRecorderInput,
) {
    if let Some(var_311) = &input.configuration_recorder_name {
        object.key("ConfigurationRecorderName").string(var_311);
    }
}

pub fn serialize_structure_crate_input_start_remediation_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartRemediationExecutionInput,
) {
    if let Some(var_312) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_312);
    }
    if let Some(var_313) = &input.resource_keys {
        let mut array_314 = object.key("ResourceKeys").start_array();
        for item_315 in var_313 {
            {
                let mut object_316 = array_314.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_key(
                    &mut object_316,
                    item_315,
                );
                object_316.finish();
            }
        }
        array_314.finish();
    }
}

pub fn serialize_structure_crate_input_stop_configuration_recorder_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopConfigurationRecorderInput,
) {
    if let Some(var_317) = &input.configuration_recorder_name {
        object.key("ConfigurationRecorderName").string(var_317);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_318) = &input.resource_arn {
        object.key("ResourceArn").string(var_318);
    }
    if let Some(var_319) = &input.tags {
        let mut array_320 = object.key("Tags").start_array();
        for item_321 in var_319 {
            {
                let mut object_322 = array_320.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_322, item_321);
                object_322.finish();
            }
        }
        array_320.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_323) = &input.resource_arn {
        object.key("ResourceArn").string(var_323);
    }
    if let Some(var_324) = &input.tag_keys {
        let mut array_325 = object.key("TagKeys").start_array();
        for item_326 in var_324 {
            {
                array_325.value().string(item_326);
            }
        }
        array_325.finish();
    }
}

pub fn serialize_structure_crate_model_aggregate_resource_identifier(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregateResourceIdentifier,
) {
    if let Some(var_327) = &input.source_account_id {
        object.key("SourceAccountId").string(var_327);
    }
    if let Some(var_328) = &input.source_region {
        object.key("SourceRegion").string(var_328);
    }
    if let Some(var_329) = &input.resource_id {
        object.key("ResourceId").string(var_329);
    }
    if let Some(var_330) = &input.resource_type {
        object.key("ResourceType").string(var_330.as_str());
    }
    if let Some(var_331) = &input.resource_name {
        object.key("ResourceName").string(var_331);
    }
}

pub fn serialize_structure_crate_model_resource_key(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceKey,
) {
    if let Some(var_332) = &input.resource_type {
        object.key("resourceType").string(var_332.as_str());
    }
    if let Some(var_333) = &input.resource_id {
        object.key("resourceId").string(var_333);
    }
}

pub fn serialize_structure_crate_model_remediation_exception_resource_key(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RemediationExceptionResourceKey,
) {
    if let Some(var_334) = &input.resource_type {
        object.key("ResourceType").string(var_334);
    }
    if let Some(var_335) = &input.resource_id {
        object.key("ResourceId").string(var_335);
    }
}

pub fn serialize_structure_crate_model_config_rule_compliance_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfigRuleComplianceFilters,
) {
    if let Some(var_336) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_336);
    }
    if let Some(var_337) = &input.compliance_type {
        object.key("ComplianceType").string(var_337.as_str());
    }
    if let Some(var_338) = &input.account_id {
        object.key("AccountId").string(var_338);
    }
    if let Some(var_339) = &input.aws_region {
        object.key("AwsRegion").string(var_339);
    }
}

pub fn serialize_structure_crate_model_aggregate_conformance_pack_compliance_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregateConformancePackComplianceFilters,
) {
    if let Some(var_340) = &input.conformance_pack_name {
        object.key("ConformancePackName").string(var_340);
    }
    if let Some(var_341) = &input.compliance_type {
        object.key("ComplianceType").string(var_341.as_str());
    }
    if let Some(var_342) = &input.account_id {
        object.key("AccountId").string(var_342);
    }
    if let Some(var_343) = &input.aws_region {
        object.key("AwsRegion").string(var_343);
    }
}

pub fn serialize_structure_crate_model_conformance_pack_compliance_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConformancePackComplianceFilters,
) {
    if let Some(var_344) = &input.config_rule_names {
        let mut array_345 = object.key("ConfigRuleNames").start_array();
        for item_346 in var_344 {
            {
                array_345.value().string(item_346);
            }
        }
        array_345.finish();
    }
    if let Some(var_347) = &input.compliance_type {
        object.key("ComplianceType").string(var_347.as_str());
    }
}

pub fn serialize_structure_crate_model_config_rule_compliance_summary_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfigRuleComplianceSummaryFilters,
) {
    if let Some(var_348) = &input.account_id {
        object.key("AccountId").string(var_348);
    }
    if let Some(var_349) = &input.aws_region {
        object.key("AwsRegion").string(var_349);
    }
}

pub fn serialize_structure_crate_model_aggregate_conformance_pack_compliance_summary_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregateConformancePackComplianceSummaryFilters,
) {
    if let Some(var_350) = &input.account_id {
        object.key("AccountId").string(var_350);
    }
    if let Some(var_351) = &input.aws_region {
        object.key("AwsRegion").string(var_351);
    }
}

pub fn serialize_structure_crate_model_resource_count_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceCountFilters,
) {
    if let Some(var_352) = &input.resource_type {
        object.key("ResourceType").string(var_352.as_str());
    }
    if let Some(var_353) = &input.account_id {
        object.key("AccountId").string(var_353);
    }
    if let Some(var_354) = &input.region {
        object.key("Region").string(var_354);
    }
}

pub fn serialize_structure_crate_model_conformance_pack_evaluation_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConformancePackEvaluationFilters,
) {
    if let Some(var_355) = &input.config_rule_names {
        let mut array_356 = object.key("ConfigRuleNames").start_array();
        for item_357 in var_355 {
            {
                array_356.value().string(item_357);
            }
        }
        array_356.finish();
    }
    if let Some(var_358) = &input.compliance_type {
        object.key("ComplianceType").string(var_358.as_str());
    }
    if let Some(var_359) = &input.resource_type {
        object.key("ResourceType").string(var_359);
    }
    if let Some(var_360) = &input.resource_ids {
        let mut array_361 = object.key("ResourceIds").start_array();
        for item_362 in var_360 {
            {
                array_361.value().string(item_362);
            }
        }
        array_361.finish();
    }
}

pub fn serialize_structure_crate_model_status_detail_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatusDetailFilters,
) {
    if let Some(var_363) = &input.account_id {
        object.key("AccountId").string(var_363);
    }
    if let Some(var_364) = &input.member_account_rule_status {
        object
            .key("MemberAccountRuleStatus")
            .string(var_364.as_str());
    }
}

pub fn serialize_structure_crate_model_organization_resource_detailed_status_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationResourceDetailedStatusFilters,
) {
    if let Some(var_365) = &input.account_id {
        object.key("AccountId").string(var_365);
    }
    if let Some(var_366) = &input.status {
        object.key("Status").string(var_366.as_str());
    }
}

pub fn serialize_structure_crate_model_resource_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceFilters,
) {
    if let Some(var_367) = &input.account_id {
        object.key("AccountId").string(var_367);
    }
    if let Some(var_368) = &input.resource_id {
        object.key("ResourceId").string(var_368);
    }
    if let Some(var_369) = &input.resource_name {
        object.key("ResourceName").string(var_369);
    }
    if let Some(var_370) = &input.region {
        object.key("Region").string(var_370);
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_371) = &input.key {
        object.key("Key").string(var_371);
    }
    if let Some(var_372) = &input.value {
        object.key("Value").string(var_372);
    }
}

pub fn serialize_structure_crate_model_config_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfigRule,
) {
    if let Some(var_373) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_373);
    }
    if let Some(var_374) = &input.config_rule_arn {
        object.key("ConfigRuleArn").string(var_374);
    }
    if let Some(var_375) = &input.config_rule_id {
        object.key("ConfigRuleId").string(var_375);
    }
    if let Some(var_376) = &input.description {
        object.key("Description").string(var_376);
    }
    if let Some(var_377) = &input.scope {
        let mut object_378 = object.key("Scope").start_object();
        crate::json_ser::serialize_structure_crate_model_scope(&mut object_378, var_377);
        object_378.finish();
    }
    if let Some(var_379) = &input.source {
        let mut object_380 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_source(&mut object_380, var_379);
        object_380.finish();
    }
    if let Some(var_381) = &input.input_parameters {
        object.key("InputParameters").string(var_381);
    }
    if let Some(var_382) = &input.maximum_execution_frequency {
        object
            .key("MaximumExecutionFrequency")
            .string(var_382.as_str());
    }
    if let Some(var_383) = &input.config_rule_state {
        object.key("ConfigRuleState").string(var_383.as_str());
    }
    if let Some(var_384) = &input.created_by {
        object.key("CreatedBy").string(var_384);
    }
}

pub fn serialize_structure_crate_model_account_aggregation_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountAggregationSource,
) {
    if let Some(var_385) = &input.account_ids {
        let mut array_386 = object.key("AccountIds").start_array();
        for item_387 in var_385 {
            {
                array_386.value().string(item_387);
            }
        }
        array_386.finish();
    }
    if input.all_aws_regions {
        object.key("AllAwsRegions").boolean(input.all_aws_regions);
    }
    if let Some(var_388) = &input.aws_regions {
        let mut array_389 = object.key("AwsRegions").start_array();
        for item_390 in var_388 {
            {
                array_389.value().string(item_390);
            }
        }
        array_389.finish();
    }
}

pub fn serialize_structure_crate_model_organization_aggregation_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationAggregationSource,
) {
    if let Some(var_391) = &input.role_arn {
        object.key("RoleArn").string(var_391);
    }
    if let Some(var_392) = &input.aws_regions {
        let mut array_393 = object.key("AwsRegions").start_array();
        for item_394 in var_392 {
            {
                array_393.value().string(item_394);
            }
        }
        array_393.finish();
    }
    if input.all_aws_regions {
        object.key("AllAwsRegions").boolean(input.all_aws_regions);
    }
}

pub fn serialize_structure_crate_model_configuration_recorder(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfigurationRecorder,
) {
    if let Some(var_395) = &input.name {
        object.key("name").string(var_395);
    }
    if let Some(var_396) = &input.role_arn {
        object.key("roleARN").string(var_396);
    }
    if let Some(var_397) = &input.recording_group {
        let mut object_398 = object.key("recordingGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_recording_group(&mut object_398, var_397);
        object_398.finish();
    }
}

pub fn serialize_structure_crate_model_conformance_pack_input_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConformancePackInputParameter,
) {
    if let Some(var_399) = &input.parameter_name {
        object.key("ParameterName").string(var_399);
    }
    if let Some(var_400) = &input.parameter_value {
        object.key("ParameterValue").string(var_400);
    }
}

pub fn serialize_structure_crate_model_delivery_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeliveryChannel,
) {
    if let Some(var_401) = &input.name {
        object.key("name").string(var_401);
    }
    if let Some(var_402) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_402);
    }
    if let Some(var_403) = &input.s3_key_prefix {
        object.key("s3KeyPrefix").string(var_403);
    }
    if let Some(var_404) = &input.s3_kms_key_arn {
        object.key("s3KmsKeyArn").string(var_404);
    }
    if let Some(var_405) = &input.sns_topic_arn {
        object.key("snsTopicARN").string(var_405);
    }
    if let Some(var_406) = &input.config_snapshot_delivery_properties {
        let mut object_407 = object
            .key("configSnapshotDeliveryProperties")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_config_snapshot_delivery_properties(
            &mut object_407,
            var_406,
        );
        object_407.finish();
    }
}

pub fn serialize_structure_crate_model_evaluation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Evaluation,
) {
    if let Some(var_408) = &input.compliance_resource_type {
        object.key("ComplianceResourceType").string(var_408);
    }
    if let Some(var_409) = &input.compliance_resource_id {
        object.key("ComplianceResourceId").string(var_409);
    }
    if let Some(var_410) = &input.compliance_type {
        object.key("ComplianceType").string(var_410.as_str());
    }
    if let Some(var_411) = &input.annotation {
        object.key("Annotation").string(var_411);
    }
    if let Some(var_412) = &input.ordering_timestamp {
        object
            .key("OrderingTimestamp")
            .instant(var_412, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_model_external_evaluation(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExternalEvaluation,
) {
    if let Some(var_413) = &input.compliance_resource_type {
        object.key("ComplianceResourceType").string(var_413);
    }
    if let Some(var_414) = &input.compliance_resource_id {
        object.key("ComplianceResourceId").string(var_414);
    }
    if let Some(var_415) = &input.compliance_type {
        object.key("ComplianceType").string(var_415.as_str());
    }
    if let Some(var_416) = &input.annotation {
        object.key("Annotation").string(var_416);
    }
    if let Some(var_417) = &input.ordering_timestamp {
        object
            .key("OrderingTimestamp")
            .instant(var_417, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_crate_model_organization_managed_rule_metadata(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationManagedRuleMetadata,
) {
    if let Some(var_418) = &input.description {
        object.key("Description").string(var_418);
    }
    if let Some(var_419) = &input.rule_identifier {
        object.key("RuleIdentifier").string(var_419);
    }
    if let Some(var_420) = &input.input_parameters {
        object.key("InputParameters").string(var_420);
    }
    if let Some(var_421) = &input.maximum_execution_frequency {
        object
            .key("MaximumExecutionFrequency")
            .string(var_421.as_str());
    }
    if let Some(var_422) = &input.resource_types_scope {
        let mut array_423 = object.key("ResourceTypesScope").start_array();
        for item_424 in var_422 {
            {
                array_423.value().string(item_424);
            }
        }
        array_423.finish();
    }
    if let Some(var_425) = &input.resource_id_scope {
        object.key("ResourceIdScope").string(var_425);
    }
    if let Some(var_426) = &input.tag_key_scope {
        object.key("TagKeyScope").string(var_426);
    }
    if let Some(var_427) = &input.tag_value_scope {
        object.key("TagValueScope").string(var_427);
    }
}

pub fn serialize_structure_crate_model_organization_custom_rule_metadata(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationCustomRuleMetadata,
) {
    if let Some(var_428) = &input.description {
        object.key("Description").string(var_428);
    }
    if let Some(var_429) = &input.lambda_function_arn {
        object.key("LambdaFunctionArn").string(var_429);
    }
    if let Some(var_430) = &input.organization_config_rule_trigger_types {
        let mut array_431 = object
            .key("OrganizationConfigRuleTriggerTypes")
            .start_array();
        for item_432 in var_430 {
            {
                array_431.value().string(item_432.as_str());
            }
        }
        array_431.finish();
    }
    if let Some(var_433) = &input.input_parameters {
        object.key("InputParameters").string(var_433);
    }
    if let Some(var_434) = &input.maximum_execution_frequency {
        object
            .key("MaximumExecutionFrequency")
            .string(var_434.as_str());
    }
    if let Some(var_435) = &input.resource_types_scope {
        let mut array_436 = object.key("ResourceTypesScope").start_array();
        for item_437 in var_435 {
            {
                array_436.value().string(item_437);
            }
        }
        array_436.finish();
    }
    if let Some(var_438) = &input.resource_id_scope {
        object.key("ResourceIdScope").string(var_438);
    }
    if let Some(var_439) = &input.tag_key_scope {
        object.key("TagKeyScope").string(var_439);
    }
    if let Some(var_440) = &input.tag_value_scope {
        object.key("TagValueScope").string(var_440);
    }
}

pub fn serialize_structure_crate_model_remediation_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RemediationConfiguration,
) {
    if let Some(var_441) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_441);
    }
    if let Some(var_442) = &input.target_type {
        object.key("TargetType").string(var_442.as_str());
    }
    if let Some(var_443) = &input.target_id {
        object.key("TargetId").string(var_443);
    }
    if let Some(var_444) = &input.target_version {
        object.key("TargetVersion").string(var_444);
    }
    if let Some(var_445) = &input.parameters {
        let mut object_446 = object.key("Parameters").start_object();
        for (key_447, value_448) in var_445 {
            {
                let mut object_449 = object_446.key(key_447).start_object();
                crate::json_ser::serialize_structure_crate_model_remediation_parameter_value(
                    &mut object_449,
                    value_448,
                );
                object_449.finish();
            }
        }
        object_446.finish();
    }
    if let Some(var_450) = &input.resource_type {
        object.key("ResourceType").string(var_450);
    }
    if input.automatic {
        object.key("Automatic").boolean(input.automatic);
    }
    if let Some(var_451) = &input.execution_controls {
        let mut object_452 = object.key("ExecutionControls").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_controls(
            &mut object_452,
            var_451,
        );
        object_452.finish();
    }
    if let Some(var_453) = &input.maximum_automatic_attempts {
        object.key("MaximumAutomaticAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_453).into()),
        );
    }
    if let Some(var_454) = &input.retry_attempt_seconds {
        object.key("RetryAttemptSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_454).into()),
        );
    }
    if let Some(var_455) = &input.arn {
        object.key("Arn").string(var_455);
    }
    if let Some(var_456) = &input.created_by_service {
        object.key("CreatedByService").string(var_456);
    }
}

pub fn serialize_structure_crate_model_stored_query(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StoredQuery,
) {
    if let Some(var_457) = &input.query_id {
        object.key("QueryId").string(var_457);
    }
    if let Some(var_458) = &input.query_arn {
        object.key("QueryArn").string(var_458);
    }
    if let Some(var_459) = &input.query_name {
        object.key("QueryName").string(var_459);
    }
    if let Some(var_460) = &input.description {
        object.key("Description").string(var_460);
    }
    if let Some(var_461) = &input.expression {
        object.key("Expression").string(var_461);
    }
}

pub fn serialize_structure_crate_model_scope(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scope,
) {
    if let Some(var_462) = &input.compliance_resource_types {
        let mut array_463 = object.key("ComplianceResourceTypes").start_array();
        for item_464 in var_462 {
            {
                array_463.value().string(item_464);
            }
        }
        array_463.finish();
    }
    if let Some(var_465) = &input.tag_key {
        object.key("TagKey").string(var_465);
    }
    if let Some(var_466) = &input.tag_value {
        object.key("TagValue").string(var_466);
    }
    if let Some(var_467) = &input.compliance_resource_id {
        object.key("ComplianceResourceId").string(var_467);
    }
}

pub fn serialize_structure_crate_model_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Source,
) {
    if let Some(var_468) = &input.owner {
        object.key("Owner").string(var_468.as_str());
    }
    if let Some(var_469) = &input.source_identifier {
        object.key("SourceIdentifier").string(var_469);
    }
    if let Some(var_470) = &input.source_details {
        let mut array_471 = object.key("SourceDetails").start_array();
        for item_472 in var_470 {
            {
                let mut object_473 = array_471.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_detail(
                    &mut object_473,
                    item_472,
                );
                object_473.finish();
            }
        }
        array_471.finish();
    }
}

pub fn serialize_structure_crate_model_recording_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecordingGroup,
) {
    if input.all_supported {
        object.key("allSupported").boolean(input.all_supported);
    }
    if input.include_global_resource_types {
        object
            .key("includeGlobalResourceTypes")
            .boolean(input.include_global_resource_types);
    }
    if let Some(var_474) = &input.resource_types {
        let mut array_475 = object.key("resourceTypes").start_array();
        for item_476 in var_474 {
            {
                array_475.value().string(item_476.as_str());
            }
        }
        array_475.finish();
    }
}

pub fn serialize_structure_crate_model_config_snapshot_delivery_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfigSnapshotDeliveryProperties,
) {
    if let Some(var_477) = &input.delivery_frequency {
        object.key("deliveryFrequency").string(var_477.as_str());
    }
}

pub fn serialize_structure_crate_model_remediation_parameter_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RemediationParameterValue,
) {
    if let Some(var_478) = &input.resource_value {
        let mut object_479 = object.key("ResourceValue").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_value(&mut object_479, var_478);
        object_479.finish();
    }
    if let Some(var_480) = &input.static_value {
        let mut object_481 = object.key("StaticValue").start_object();
        crate::json_ser::serialize_structure_crate_model_static_value(&mut object_481, var_480);
        object_481.finish();
    }
}

pub fn serialize_structure_crate_model_execution_controls(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionControls,
) {
    if let Some(var_482) = &input.ssm_controls {
        let mut object_483 = object.key("SsmControls").start_object();
        crate::json_ser::serialize_structure_crate_model_ssm_controls(&mut object_483, var_482);
        object_483.finish();
    }
}

pub fn serialize_structure_crate_model_source_detail(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceDetail,
) {
    if let Some(var_484) = &input.event_source {
        object.key("EventSource").string(var_484.as_str());
    }
    if let Some(var_485) = &input.message_type {
        object.key("MessageType").string(var_485.as_str());
    }
    if let Some(var_486) = &input.maximum_execution_frequency {
        object
            .key("MaximumExecutionFrequency")
            .string(var_486.as_str());
    }
}

pub fn serialize_structure_crate_model_resource_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceValue,
) {
    if let Some(var_487) = &input.value {
        object.key("Value").string(var_487.as_str());
    }
}

pub fn serialize_structure_crate_model_static_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StaticValue,
) {
    if let Some(var_488) = &input.values {
        let mut array_489 = object.key("Values").start_array();
        for item_490 in var_488 {
            {
                array_489.value().string(item_490);
            }
        }
        array_489.finish();
    }
}

pub fn serialize_structure_crate_model_ssm_controls(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SsmControls,
) {
    if let Some(var_491) = &input.concurrent_execution_rate_percentage {
        object.key("ConcurrentExecutionRatePercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_491).into()),
        );
    }
    if let Some(var_492) = &input.error_percentage {
        object.key("ErrorPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_492).into()),
        );
    }
}
