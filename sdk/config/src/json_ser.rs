// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_get_aggregate_resource_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetAggregateResourceConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_identifiers {
        let mut array_3 = object.key("ResourceIdentifiers").start_array();
        for item_4 in var_2 {
            {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aggregate_resource_identifier(
                    &mut object_5,
                    item_4,
                )?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_resource_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetResourceConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.resource_keys {
        let mut array_7 = object.key("resourceKeys").start_array();
        for item_8 in var_6 {
            {
                let mut object_9 = array_7.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_key(
                    &mut object_9,
                    item_8,
                )?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_aggregation_authorization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAggregationAuthorizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.authorized_account_id {
        object.key("AuthorizedAccountId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.authorized_aws_region {
        object.key("AuthorizedAwsRegion").string(var_11.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_config_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConfigRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_12.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_configuration_aggregator_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConfigurationAggregatorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_13.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_configuration_recorder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConfigurationRecorderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.configuration_recorder_name {
        object
            .key("ConfigurationRecorderName")
            .string(var_14.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_conformance_pack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConformancePackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.conformance_pack_name {
        object.key("ConformancePackName").string(var_15.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_delivery_channel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDeliveryChannelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.delivery_channel_name {
        object.key("DeliveryChannelName").string(var_16.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_evaluation_results_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEvaluationResultsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_17) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_17.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_organization_config_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOrganizationConfigRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.organization_config_rule_name {
        object
            .key("OrganizationConfigRuleName")
            .string(var_18.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_organization_conformance_pack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOrganizationConformancePackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.organization_conformance_pack_name {
        object
            .key("OrganizationConformancePackName")
            .string(var_19.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_pending_aggregation_request_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePendingAggregationRequestInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.requester_account_id {
        object.key("RequesterAccountId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.requester_aws_region {
        object.key("RequesterAwsRegion").string(var_21.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_remediation_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRemediationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_22) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_22.as_str());
    }
    if let Some(var_23) = &input.resource_type {
        object.key("ResourceType").string(var_23.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_remediation_exceptions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRemediationExceptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_24.as_str());
    }
    if let Some(var_25) = &input.resource_keys {
        let mut array_26 = object.key("ResourceKeys").start_array();
        for item_27 in var_25 {
            {
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_crate_model_remediation_exception_resource_key(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourceConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_29) = &input.resource_type {
        object.key("ResourceType").string(var_29.as_str());
    }
    if let Some(var_30) = &input.resource_id {
        object.key("ResourceId").string(var_30.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_retention_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRetentionConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.retention_configuration_name {
        object
            .key("RetentionConfigurationName")
            .string(var_31.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_stored_query_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStoredQueryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.query_name {
        object.key("QueryName").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deliver_config_snapshot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeliverConfigSnapshotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.delivery_channel_name {
        object.key("deliveryChannelName").string(var_33.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_aggregate_compliance_by_config_rules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAggregateComplianceByConfigRulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_34) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_34.as_str());
    }
    if let Some(var_35) = &input.filters {
        let mut object_36 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_config_rule_compliance_filters(
            &mut object_36,
            var_35,
        )?;
        object_36.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_37) = &input.next_token {
        object.key("NextToken").string(var_37.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_aggregate_compliance_by_conformance_packs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAggregateComplianceByConformancePacksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_38) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_38.as_str());
    }
    if let Some(var_39) = &input.filters {
        let mut object_40 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregate_conformance_pack_compliance_filters(&mut object_40, var_39)?;
        object_40.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_41) = &input.next_token {
        object.key("NextToken").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_aggregation_authorizations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAggregationAuthorizationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_42) = &input.next_token {
        object.key("NextToken").string(var_42.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_compliance_by_config_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeComplianceByConfigRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.config_rule_names {
        let mut array_44 = object.key("ConfigRuleNames").start_array();
        for item_45 in var_43 {
            {
                array_44.value().string(item_45.as_str());
            }
        }
        array_44.finish();
    }
    if let Some(var_46) = &input.compliance_types {
        let mut array_47 = object.key("ComplianceTypes").start_array();
        for item_48 in var_46 {
            {
                array_47.value().string(item_48.as_str());
            }
        }
        array_47.finish();
    }
    if let Some(var_49) = &input.next_token {
        object.key("NextToken").string(var_49.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_compliance_by_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeComplianceByResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.resource_type {
        object.key("ResourceType").string(var_50.as_str());
    }
    if let Some(var_51) = &input.resource_id {
        object.key("ResourceId").string(var_51.as_str());
    }
    if let Some(var_52) = &input.compliance_types {
        let mut array_53 = object.key("ComplianceTypes").start_array();
        for item_54 in var_52 {
            {
                array_53.value().string(item_54.as_str());
            }
        }
        array_53.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_55) = &input.next_token {
        object.key("NextToken").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_config_rule_evaluation_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigRuleEvaluationStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.config_rule_names {
        let mut array_57 = object.key("ConfigRuleNames").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58.as_str());
            }
        }
        array_57.finish();
    }
    if let Some(var_59) = &input.next_token {
        object.key("NextToken").string(var_59.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_config_rules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigRulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.config_rule_names {
        let mut array_61 = object.key("ConfigRuleNames").start_array();
        for item_62 in var_60 {
            {
                array_61.value().string(item_62.as_str());
            }
        }
        array_61.finish();
    }
    if let Some(var_63) = &input.next_token {
        object.key("NextToken").string(var_63.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_configuration_aggregators_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigurationAggregatorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.configuration_aggregator_names {
        let mut array_65 = object.key("ConfigurationAggregatorNames").start_array();
        for item_66 in var_64 {
            {
                array_65.value().string(item_66.as_str());
            }
        }
        array_65.finish();
    }
    if let Some(var_67) = &input.next_token {
        object.key("NextToken").string(var_67.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_configuration_aggregator_sources_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigurationAggregatorSourcesStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_68.as_str());
    }
    if let Some(var_69) = &input.update_status {
        let mut array_70 = object.key("UpdateStatus").start_array();
        for item_71 in var_69 {
            {
                array_70.value().string(item_71.as_str());
            }
        }
        array_70.finish();
    }
    if let Some(var_72) = &input.next_token {
        object.key("NextToken").string(var_72.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_configuration_recorders_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigurationRecordersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.configuration_recorder_names {
        let mut array_74 = object.key("ConfigurationRecorderNames").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75.as_str());
            }
        }
        array_74.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_configuration_recorder_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigurationRecorderStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.configuration_recorder_names {
        let mut array_77 = object.key("ConfigurationRecorderNames").start_array();
        for item_78 in var_76 {
            {
                array_77.value().string(item_78.as_str());
            }
        }
        array_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_conformance_pack_compliance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConformancePackComplianceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.conformance_pack_name {
        object.key("ConformancePackName").string(var_79.as_str());
    }
    if let Some(var_80) = &input.filters {
        let mut object_81 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_conformance_pack_compliance_filters(
            &mut object_81,
            var_80,
        )?;
        object_81.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_82) = &input.next_token {
        object.key("NextToken").string(var_82.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_conformance_packs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConformancePacksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.conformance_pack_names {
        let mut array_84 = object.key("ConformancePackNames").start_array();
        for item_85 in var_83 {
            {
                array_84.value().string(item_85.as_str());
            }
        }
        array_84.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_86) = &input.next_token {
        object.key("NextToken").string(var_86.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_conformance_pack_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConformancePackStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.conformance_pack_names {
        let mut array_88 = object.key("ConformancePackNames").start_array();
        for item_89 in var_87 {
            {
                array_88.value().string(item_89.as_str());
            }
        }
        array_88.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_90) = &input.next_token {
        object.key("NextToken").string(var_90.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_delivery_channels_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeliveryChannelsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.delivery_channel_names {
        let mut array_92 = object.key("DeliveryChannelNames").start_array();
        for item_93 in var_91 {
            {
                array_92.value().string(item_93.as_str());
            }
        }
        array_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_delivery_channel_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeliveryChannelStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.delivery_channel_names {
        let mut array_95 = object.key("DeliveryChannelNames").start_array();
        for item_96 in var_94 {
            {
                array_95.value().string(item_96.as_str());
            }
        }
        array_95.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_organization_config_rules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrganizationConfigRulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.organization_config_rule_names {
        let mut array_98 = object.key("OrganizationConfigRuleNames").start_array();
        for item_99 in var_97 {
            {
                array_98.value().string(item_99.as_str());
            }
        }
        array_98.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_100) = &input.next_token {
        object.key("NextToken").string(var_100.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_organization_config_rule_statuses_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrganizationConfigRuleStatusesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.organization_config_rule_names {
        let mut array_102 = object.key("OrganizationConfigRuleNames").start_array();
        for item_103 in var_101 {
            {
                array_102.value().string(item_103.as_str());
            }
        }
        array_102.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_104) = &input.next_token {
        object.key("NextToken").string(var_104.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_organization_conformance_packs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrganizationConformancePacksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_105) = &input.organization_conformance_pack_names {
        let mut array_106 = object.key("OrganizationConformancePackNames").start_array();
        for item_107 in var_105 {
            {
                array_106.value().string(item_107.as_str());
            }
        }
        array_106.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_108) = &input.next_token {
        object.key("NextToken").string(var_108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_organization_conformance_pack_statuses_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrganizationConformancePackStatusesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.organization_conformance_pack_names {
        let mut array_110 = object.key("OrganizationConformancePackNames").start_array();
        for item_111 in var_109 {
            {
                array_110.value().string(item_111.as_str());
            }
        }
        array_110.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_112) = &input.next_token {
        object.key("NextToken").string(var_112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pending_aggregation_requests_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePendingAggregationRequestsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_113) = &input.next_token {
        object.key("NextToken").string(var_113.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_remediation_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRemediationConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_114) = &input.config_rule_names {
        let mut array_115 = object.key("ConfigRuleNames").start_array();
        for item_116 in var_114 {
            {
                array_115.value().string(item_116.as_str());
            }
        }
        array_115.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_remediation_exceptions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRemediationExceptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_117.as_str());
    }
    if let Some(var_118) = &input.resource_keys {
        let mut array_119 = object.key("ResourceKeys").start_array();
        for item_120 in var_118 {
            {
                let mut object_121 = array_119.value().start_object();
                crate::json_ser::serialize_structure_crate_model_remediation_exception_resource_key(&mut object_121, item_120)?;
                object_121.finish();
            }
        }
        array_119.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_122) = &input.next_token {
        object.key("NextToken").string(var_122.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_remediation_execution_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRemediationExecutionStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_123.as_str());
    }
    if let Some(var_124) = &input.resource_keys {
        let mut array_125 = object.key("ResourceKeys").start_array();
        for item_126 in var_124 {
            {
                let mut object_127 = array_125.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_key(
                    &mut object_127,
                    item_126,
                )?;
                object_127.finish();
            }
        }
        array_125.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_128) = &input.next_token {
        object.key("NextToken").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_retention_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRetentionConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.retention_configuration_names {
        let mut array_130 = object.key("RetentionConfigurationNames").start_array();
        for item_131 in var_129 {
            {
                array_130.value().string(item_131.as_str());
            }
        }
        array_130.finish();
    }
    if let Some(var_132) = &input.next_token {
        object.key("NextToken").string(var_132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_aggregate_compliance_details_by_config_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAggregateComplianceDetailsByConfigRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_133.as_str());
    }
    if let Some(var_134) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_134.as_str());
    }
    if let Some(var_135) = &input.account_id {
        object.key("AccountId").string(var_135.as_str());
    }
    if let Some(var_136) = &input.aws_region {
        object.key("AwsRegion").string(var_136.as_str());
    }
    if let Some(var_137) = &input.compliance_type {
        object.key("ComplianceType").string(var_137.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_138) = &input.next_token {
        object.key("NextToken").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_aggregate_config_rule_compliance_summary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAggregateConfigRuleComplianceSummaryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_139.as_str());
    }
    if let Some(var_140) = &input.filters {
        let mut object_141 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_config_rule_compliance_summary_filters(
            &mut object_141,
            var_140,
        )?;
        object_141.finish();
    }
    if let Some(var_142) = &input.group_by_key {
        object.key("GroupByKey").string(var_142.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_143) = &input.next_token {
        object.key("NextToken").string(var_143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_aggregate_conformance_pack_compliance_summary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAggregateConformancePackComplianceSummaryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_144.as_str());
    }
    if let Some(var_145) = &input.filters {
        let mut object_146 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregate_conformance_pack_compliance_summary_filters(&mut object_146, var_145)?;
        object_146.finish();
    }
    if let Some(var_147) = &input.group_by_key {
        object.key("GroupByKey").string(var_147.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_148) = &input.next_token {
        object.key("NextToken").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_aggregate_discovered_resource_counts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAggregateDiscoveredResourceCountsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_149.as_str());
    }
    if let Some(var_150) = &input.filters {
        let mut object_151 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_count_filters(
            &mut object_151,
            var_150,
        )?;
        object_151.finish();
    }
    if let Some(var_152) = &input.group_by_key {
        object.key("GroupByKey").string(var_152.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_153) = &input.next_token {
        object.key("NextToken").string(var_153.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_aggregate_resource_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAggregateResourceConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_154) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_154.as_str());
    }
    if let Some(var_155) = &input.resource_identifier {
        let mut object_156 = object.key("ResourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregate_resource_identifier(
            &mut object_156,
            var_155,
        )?;
        object_156.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_compliance_details_by_config_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetComplianceDetailsByConfigRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_157.as_str());
    }
    if let Some(var_158) = &input.compliance_types {
        let mut array_159 = object.key("ComplianceTypes").start_array();
        for item_160 in var_158 {
            {
                array_159.value().string(item_160.as_str());
            }
        }
        array_159.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_161) = &input.next_token {
        object.key("NextToken").string(var_161.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_compliance_details_by_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetComplianceDetailsByResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_162) = &input.resource_type {
        object.key("ResourceType").string(var_162.as_str());
    }
    if let Some(var_163) = &input.resource_id {
        object.key("ResourceId").string(var_163.as_str());
    }
    if let Some(var_164) = &input.compliance_types {
        let mut array_165 = object.key("ComplianceTypes").start_array();
        for item_166 in var_164 {
            {
                array_165.value().string(item_166.as_str());
            }
        }
        array_165.finish();
    }
    if let Some(var_167) = &input.next_token {
        object.key("NextToken").string(var_167.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_compliance_summary_by_resource_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetComplianceSummaryByResourceTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_168) = &input.resource_types {
        let mut array_169 = object.key("ResourceTypes").start_array();
        for item_170 in var_168 {
            {
                array_169.value().string(item_170.as_str());
            }
        }
        array_169.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_conformance_pack_compliance_details_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConformancePackComplianceDetailsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.conformance_pack_name {
        object.key("ConformancePackName").string(var_171.as_str());
    }
    if let Some(var_172) = &input.filters {
        let mut object_173 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_conformance_pack_evaluation_filters(
            &mut object_173,
            var_172,
        )?;
        object_173.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_174) = &input.next_token {
        object.key("NextToken").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_conformance_pack_compliance_summary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConformancePackComplianceSummaryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.conformance_pack_names {
        let mut array_176 = object.key("ConformancePackNames").start_array();
        for item_177 in var_175 {
            {
                array_176.value().string(item_177.as_str());
            }
        }
        array_176.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_178) = &input.next_token {
        object.key("NextToken").string(var_178.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_custom_rule_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCustomRulePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_179.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_discovered_resource_counts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDiscoveredResourceCountsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.resource_types {
        let mut array_181 = object.key("resourceTypes").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182.as_str());
            }
        }
        array_181.finish();
    }
    if input.limit != 0 {
        object.key("limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_183) = &input.next_token {
        object.key("nextToken").string(var_183.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_organization_config_rule_detailed_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOrganizationConfigRuleDetailedStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.organization_config_rule_name {
        object
            .key("OrganizationConfigRuleName")
            .string(var_184.as_str());
    }
    if let Some(var_185) = &input.filters {
        let mut object_186 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_status_detail_filters(
            &mut object_186,
            var_185,
        )?;
        object_186.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_187) = &input.next_token {
        object.key("NextToken").string(var_187.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_organization_conformance_pack_detailed_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOrganizationConformancePackDetailedStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.organization_conformance_pack_name {
        object
            .key("OrganizationConformancePackName")
            .string(var_188.as_str());
    }
    if let Some(var_189) = &input.filters {
        let mut object_190 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_resource_detailed_status_filters(&mut object_190, var_189)?;
        object_190.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_191) = &input.next_token {
        object.key("NextToken").string(var_191.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_organization_custom_rule_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOrganizationCustomRulePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.organization_config_rule_name {
        object
            .key("OrganizationConfigRuleName")
            .string(var_192.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_config_history_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourceConfigHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_193) = &input.resource_type {
        object.key("resourceType").string(var_193.as_str());
    }
    if let Some(var_194) = &input.resource_id {
        object.key("resourceId").string(var_194.as_str());
    }
    if let Some(var_195) = &input.later_time {
        object
            .key("laterTime")
            .date_time(var_195, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_196) = &input.earlier_time {
        object
            .key("earlierTime")
            .date_time(var_196, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_197) = &input.chronological_order {
        object.key("chronologicalOrder").string(var_197.as_str());
    }
    if input.limit != 0 {
        object.key("limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_198) = &input.next_token {
        object.key("nextToken").string(var_198.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_stored_query_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStoredQueryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_199) = &input.query_name {
        object.key("QueryName").string(var_199.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_aggregate_discovered_resources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAggregateDiscoveredResourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_200) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_200.as_str());
    }
    if let Some(var_201) = &input.resource_type {
        object.key("ResourceType").string(var_201.as_str());
    }
    if let Some(var_202) = &input.filters {
        let mut object_203 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_filters(
            &mut object_203,
            var_202,
        )?;
        object_203.finish();
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_204) = &input.next_token {
        object.key("NextToken").string(var_204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_discovered_resources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDiscoveredResourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.resource_type {
        object.key("resourceType").string(var_205.as_str());
    }
    if let Some(var_206) = &input.resource_ids {
        let mut array_207 = object.key("resourceIds").start_array();
        for item_208 in var_206 {
            {
                array_207.value().string(item_208.as_str());
            }
        }
        array_207.finish();
    }
    if let Some(var_209) = &input.resource_name {
        object.key("resourceName").string(var_209.as_str());
    }
    if input.limit != 0 {
        object.key("limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if input.include_deleted_resources {
        object
            .key("includeDeletedResources")
            .boolean(input.include_deleted_resources);
    }
    if let Some(var_210) = &input.next_token {
        object.key("nextToken").string(var_210.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_stored_queries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStoredQueriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.next_token {
        object.key("NextToken").string(var_211.as_str());
    }
    if let Some(var_212) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_212).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.resource_arn {
        object.key("ResourceArn").string(var_213.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_214) = &input.next_token {
        object.key("NextToken").string(var_214.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_aggregation_authorization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAggregationAuthorizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_215) = &input.authorized_account_id {
        object.key("AuthorizedAccountId").string(var_215.as_str());
    }
    if let Some(var_216) = &input.authorized_aws_region {
        object.key("AuthorizedAwsRegion").string(var_216.as_str());
    }
    if let Some(var_217) = &input.tags {
        let mut array_218 = object.key("Tags").start_array();
        for item_219 in var_217 {
            {
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_220, item_219)?;
                object_220.finish();
            }
        }
        array_218.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_config_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConfigRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.config_rule {
        let mut object_222 = object.key("ConfigRule").start_object();
        crate::json_ser::serialize_structure_crate_model_config_rule(&mut object_222, var_221)?;
        object_222.finish();
    }
    if let Some(var_223) = &input.tags {
        let mut array_224 = object.key("Tags").start_array();
        for item_225 in var_223 {
            {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_226, item_225)?;
                object_226.finish();
            }
        }
        array_224.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_configuration_aggregator_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConfigurationAggregatorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_227.as_str());
    }
    if let Some(var_228) = &input.account_aggregation_sources {
        let mut array_229 = object.key("AccountAggregationSources").start_array();
        for item_230 in var_228 {
            {
                let mut object_231 = array_229.value().start_object();
                crate::json_ser::serialize_structure_crate_model_account_aggregation_source(
                    &mut object_231,
                    item_230,
                )?;
                object_231.finish();
            }
        }
        array_229.finish();
    }
    if let Some(var_232) = &input.organization_aggregation_source {
        let mut object_233 = object.key("OrganizationAggregationSource").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_aggregation_source(
            &mut object_233,
            var_232,
        )?;
        object_233.finish();
    }
    if let Some(var_234) = &input.tags {
        let mut array_235 = object.key("Tags").start_array();
        for item_236 in var_234 {
            {
                let mut object_237 = array_235.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_237, item_236)?;
                object_237.finish();
            }
        }
        array_235.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_configuration_recorder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConfigurationRecorderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_238) = &input.configuration_recorder {
        let mut object_239 = object.key("ConfigurationRecorder").start_object();
        crate::json_ser::serialize_structure_crate_model_configuration_recorder(
            &mut object_239,
            var_238,
        )?;
        object_239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_conformance_pack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutConformancePackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_240) = &input.conformance_pack_name {
        object.key("ConformancePackName").string(var_240.as_str());
    }
    if let Some(var_241) = &input.template_s3_uri {
        object.key("TemplateS3Uri").string(var_241.as_str());
    }
    if let Some(var_242) = &input.template_body {
        object.key("TemplateBody").string(var_242.as_str());
    }
    if let Some(var_243) = &input.delivery_s3_bucket {
        object.key("DeliveryS3Bucket").string(var_243.as_str());
    }
    if let Some(var_244) = &input.delivery_s3_key_prefix {
        object.key("DeliveryS3KeyPrefix").string(var_244.as_str());
    }
    if let Some(var_245) = &input.conformance_pack_input_parameters {
        let mut array_246 = object.key("ConformancePackInputParameters").start_array();
        for item_247 in var_245 {
            {
                let mut object_248 = array_246.value().start_object();
                crate::json_ser::serialize_structure_crate_model_conformance_pack_input_parameter(
                    &mut object_248,
                    item_247,
                )?;
                object_248.finish();
            }
        }
        array_246.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_delivery_channel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDeliveryChannelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_249) = &input.delivery_channel {
        let mut object_250 = object.key("DeliveryChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_delivery_channel(
            &mut object_250,
            var_249,
        )?;
        object_250.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_evaluations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutEvaluationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_251) = &input.evaluations {
        let mut array_252 = object.key("Evaluations").start_array();
        for item_253 in var_251 {
            {
                let mut object_254 = array_252.value().start_object();
                crate::json_ser::serialize_structure_crate_model_evaluation(
                    &mut object_254,
                    item_253,
                )?;
                object_254.finish();
            }
        }
        array_252.finish();
    }
    if let Some(var_255) = &input.result_token {
        object.key("ResultToken").string(var_255.as_str());
    }
    if input.test_mode {
        object.key("TestMode").boolean(input.test_mode);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_external_evaluation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutExternalEvaluationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_256) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_256.as_str());
    }
    if let Some(var_257) = &input.external_evaluation {
        let mut object_258 = object.key("ExternalEvaluation").start_object();
        crate::json_ser::serialize_structure_crate_model_external_evaluation(
            &mut object_258,
            var_257,
        )?;
        object_258.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_organization_config_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutOrganizationConfigRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_259) = &input.organization_config_rule_name {
        object
            .key("OrganizationConfigRuleName")
            .string(var_259.as_str());
    }
    if let Some(var_260) = &input.organization_managed_rule_metadata {
        let mut object_261 = object.key("OrganizationManagedRuleMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_managed_rule_metadata(
            &mut object_261,
            var_260,
        )?;
        object_261.finish();
    }
    if let Some(var_262) = &input.organization_custom_rule_metadata {
        let mut object_263 = object.key("OrganizationCustomRuleMetadata").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_custom_rule_metadata(
            &mut object_263,
            var_262,
        )?;
        object_263.finish();
    }
    if let Some(var_264) = &input.excluded_accounts {
        let mut array_265 = object.key("ExcludedAccounts").start_array();
        for item_266 in var_264 {
            {
                array_265.value().string(item_266.as_str());
            }
        }
        array_265.finish();
    }
    if let Some(var_267) = &input.organization_custom_policy_rule_metadata {
        let mut object_268 = object
            .key("OrganizationCustomPolicyRuleMetadata")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_organization_custom_policy_rule_metadata(
            &mut object_268,
            var_267,
        )?;
        object_268.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_organization_conformance_pack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutOrganizationConformancePackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.organization_conformance_pack_name {
        object
            .key("OrganizationConformancePackName")
            .string(var_269.as_str());
    }
    if let Some(var_270) = &input.template_s3_uri {
        object.key("TemplateS3Uri").string(var_270.as_str());
    }
    if let Some(var_271) = &input.template_body {
        object.key("TemplateBody").string(var_271.as_str());
    }
    if let Some(var_272) = &input.delivery_s3_bucket {
        object.key("DeliveryS3Bucket").string(var_272.as_str());
    }
    if let Some(var_273) = &input.delivery_s3_key_prefix {
        object.key("DeliveryS3KeyPrefix").string(var_273.as_str());
    }
    if let Some(var_274) = &input.conformance_pack_input_parameters {
        let mut array_275 = object.key("ConformancePackInputParameters").start_array();
        for item_276 in var_274 {
            {
                let mut object_277 = array_275.value().start_object();
                crate::json_ser::serialize_structure_crate_model_conformance_pack_input_parameter(
                    &mut object_277,
                    item_276,
                )?;
                object_277.finish();
            }
        }
        array_275.finish();
    }
    if let Some(var_278) = &input.excluded_accounts {
        let mut array_279 = object.key("ExcludedAccounts").start_array();
        for item_280 in var_278 {
            {
                array_279.value().string(item_280.as_str());
            }
        }
        array_279.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_remediation_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRemediationConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.remediation_configurations {
        let mut array_282 = object.key("RemediationConfigurations").start_array();
        for item_283 in var_281 {
            {
                let mut object_284 = array_282.value().start_object();
                crate::json_ser::serialize_structure_crate_model_remediation_configuration(
                    &mut object_284,
                    item_283,
                )?;
                object_284.finish();
            }
        }
        array_282.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_remediation_exceptions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRemediationExceptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_285.as_str());
    }
    if let Some(var_286) = &input.resource_keys {
        let mut array_287 = object.key("ResourceKeys").start_array();
        for item_288 in var_286 {
            {
                let mut object_289 = array_287.value().start_object();
                crate::json_ser::serialize_structure_crate_model_remediation_exception_resource_key(&mut object_289, item_288)?;
                object_289.finish();
            }
        }
        array_287.finish();
    }
    if let Some(var_290) = &input.message {
        object.key("Message").string(var_290.as_str());
    }
    if let Some(var_291) = &input.expiration_time {
        object
            .key("ExpirationTime")
            .date_time(var_291, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourceConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.resource_type {
        object.key("ResourceType").string(var_292.as_str());
    }
    if let Some(var_293) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_293.as_str());
    }
    if let Some(var_294) = &input.resource_id {
        object.key("ResourceId").string(var_294.as_str());
    }
    if let Some(var_295) = &input.resource_name {
        object.key("ResourceName").string(var_295.as_str());
    }
    if let Some(var_296) = &input.configuration {
        object.key("Configuration").string(var_296.as_str());
    }
    if let Some(var_297) = &input.tags {
        let mut object_298 = object.key("Tags").start_object();
        for (key_299, value_300) in var_297 {
            {
                object_298.key(key_299).string(value_300.as_str());
            }
        }
        object_298.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_retention_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRetentionConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("RetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_period_in_days).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_stored_query_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutStoredQueryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_301) = &input.stored_query {
        let mut object_302 = object.key("StoredQuery").start_object();
        crate::json_ser::serialize_structure_crate_model_stored_query(&mut object_302, var_301)?;
        object_302.finish();
    }
    if let Some(var_303) = &input.tags {
        let mut array_304 = object.key("Tags").start_array();
        for item_305 in var_303 {
            {
                let mut object_306 = array_304.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_306, item_305)?;
                object_306.finish();
            }
        }
        array_304.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_select_aggregate_resource_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SelectAggregateResourceConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_307) = &input.expression {
        object.key("Expression").string(var_307.as_str());
    }
    if let Some(var_308) = &input.configuration_aggregator_name {
        object
            .key("ConfigurationAggregatorName")
            .string(var_308.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_309) = &input.next_token {
        object.key("NextToken").string(var_309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_select_resource_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SelectResourceConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.expression {
        object.key("Expression").string(var_310.as_str());
    }
    if input.limit != 0 {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.limit).into()),
        );
    }
    if let Some(var_311) = &input.next_token {
        object.key("NextToken").string(var_311.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_config_rules_evaluation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartConfigRulesEvaluationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.config_rule_names {
        let mut array_313 = object.key("ConfigRuleNames").start_array();
        for item_314 in var_312 {
            {
                array_313.value().string(item_314.as_str());
            }
        }
        array_313.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_configuration_recorder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartConfigurationRecorderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_315) = &input.configuration_recorder_name {
        object
            .key("ConfigurationRecorderName")
            .string(var_315.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_remediation_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartRemediationExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_316.as_str());
    }
    if let Some(var_317) = &input.resource_keys {
        let mut array_318 = object.key("ResourceKeys").start_array();
        for item_319 in var_317 {
            {
                let mut object_320 = array_318.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_key(
                    &mut object_320,
                    item_319,
                )?;
                object_320.finish();
            }
        }
        array_318.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_configuration_recorder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopConfigurationRecorderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_321) = &input.configuration_recorder_name {
        object
            .key("ConfigurationRecorderName")
            .string(var_321.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.resource_arn {
        object.key("ResourceArn").string(var_322.as_str());
    }
    if let Some(var_323) = &input.tags {
        let mut array_324 = object.key("Tags").start_array();
        for item_325 in var_323 {
            {
                let mut object_326 = array_324.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_326, item_325)?;
                object_326.finish();
            }
        }
        array_324.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_327) = &input.resource_arn {
        object.key("ResourceArn").string(var_327.as_str());
    }
    if let Some(var_328) = &input.tag_keys {
        let mut array_329 = object.key("TagKeys").start_array();
        for item_330 in var_328 {
            {
                array_329.value().string(item_330.as_str());
            }
        }
        array_329.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregate_resource_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregateResourceIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.source_account_id {
        object.key("SourceAccountId").string(var_331.as_str());
    }
    if let Some(var_332) = &input.source_region {
        object.key("SourceRegion").string(var_332.as_str());
    }
    if let Some(var_333) = &input.resource_id {
        object.key("ResourceId").string(var_333.as_str());
    }
    if let Some(var_334) = &input.resource_type {
        object.key("ResourceType").string(var_334.as_str());
    }
    if let Some(var_335) = &input.resource_name {
        object.key("ResourceName").string(var_335.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_key(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceKey,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.resource_type {
        object.key("resourceType").string(var_336.as_str());
    }
    if let Some(var_337) = &input.resource_id {
        object.key("resourceId").string(var_337.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_remediation_exception_resource_key(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RemediationExceptionResourceKey,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.resource_type {
        object.key("ResourceType").string(var_338.as_str());
    }
    if let Some(var_339) = &input.resource_id {
        object.key("ResourceId").string(var_339.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_config_rule_compliance_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfigRuleComplianceFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_340.as_str());
    }
    if let Some(var_341) = &input.compliance_type {
        object.key("ComplianceType").string(var_341.as_str());
    }
    if let Some(var_342) = &input.account_id {
        object.key("AccountId").string(var_342.as_str());
    }
    if let Some(var_343) = &input.aws_region {
        object.key("AwsRegion").string(var_343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregate_conformance_pack_compliance_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregateConformancePackComplianceFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.conformance_pack_name {
        object.key("ConformancePackName").string(var_344.as_str());
    }
    if let Some(var_345) = &input.compliance_type {
        object.key("ComplianceType").string(var_345.as_str());
    }
    if let Some(var_346) = &input.account_id {
        object.key("AccountId").string(var_346.as_str());
    }
    if let Some(var_347) = &input.aws_region {
        object.key("AwsRegion").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conformance_pack_compliance_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConformancePackComplianceFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_348) = &input.config_rule_names {
        let mut array_349 = object.key("ConfigRuleNames").start_array();
        for item_350 in var_348 {
            {
                array_349.value().string(item_350.as_str());
            }
        }
        array_349.finish();
    }
    if let Some(var_351) = &input.compliance_type {
        object.key("ComplianceType").string(var_351.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_config_rule_compliance_summary_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfigRuleComplianceSummaryFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_352) = &input.account_id {
        object.key("AccountId").string(var_352.as_str());
    }
    if let Some(var_353) = &input.aws_region {
        object.key("AwsRegion").string(var_353.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregate_conformance_pack_compliance_summary_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregateConformancePackComplianceSummaryFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_354) = &input.account_id {
        object.key("AccountId").string(var_354.as_str());
    }
    if let Some(var_355) = &input.aws_region {
        object.key("AwsRegion").string(var_355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_count_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceCountFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.resource_type {
        object.key("ResourceType").string(var_356.as_str());
    }
    if let Some(var_357) = &input.account_id {
        object.key("AccountId").string(var_357.as_str());
    }
    if let Some(var_358) = &input.region {
        object.key("Region").string(var_358.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conformance_pack_evaluation_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConformancePackEvaluationFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_359) = &input.config_rule_names {
        let mut array_360 = object.key("ConfigRuleNames").start_array();
        for item_361 in var_359 {
            {
                array_360.value().string(item_361.as_str());
            }
        }
        array_360.finish();
    }
    if let Some(var_362) = &input.compliance_type {
        object.key("ComplianceType").string(var_362.as_str());
    }
    if let Some(var_363) = &input.resource_type {
        object.key("ResourceType").string(var_363.as_str());
    }
    if let Some(var_364) = &input.resource_ids {
        let mut array_365 = object.key("ResourceIds").start_array();
        for item_366 in var_364 {
            {
                array_365.value().string(item_366.as_str());
            }
        }
        array_365.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_status_detail_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatusDetailFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.account_id {
        object.key("AccountId").string(var_367.as_str());
    }
    if let Some(var_368) = &input.member_account_rule_status {
        object
            .key("MemberAccountRuleStatus")
            .string(var_368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_organization_resource_detailed_status_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationResourceDetailedStatusFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.account_id {
        object.key("AccountId").string(var_369.as_str());
    }
    if let Some(var_370) = &input.status {
        object.key("Status").string(var_370.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.account_id {
        object.key("AccountId").string(var_371.as_str());
    }
    if let Some(var_372) = &input.resource_id {
        object.key("ResourceId").string(var_372.as_str());
    }
    if let Some(var_373) = &input.resource_name {
        object.key("ResourceName").string(var_373.as_str());
    }
    if let Some(var_374) = &input.region {
        object.key("Region").string(var_374.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.key {
        object.key("Key").string(var_375.as_str());
    }
    if let Some(var_376) = &input.value {
        object.key("Value").string(var_376.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_config_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfigRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_377.as_str());
    }
    if let Some(var_378) = &input.config_rule_arn {
        object.key("ConfigRuleArn").string(var_378.as_str());
    }
    if let Some(var_379) = &input.config_rule_id {
        object.key("ConfigRuleId").string(var_379.as_str());
    }
    if let Some(var_380) = &input.description {
        object.key("Description").string(var_380.as_str());
    }
    if let Some(var_381) = &input.scope {
        let mut object_382 = object.key("Scope").start_object();
        crate::json_ser::serialize_structure_crate_model_scope(&mut object_382, var_381)?;
        object_382.finish();
    }
    if let Some(var_383) = &input.source {
        let mut object_384 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_source(&mut object_384, var_383)?;
        object_384.finish();
    }
    if let Some(var_385) = &input.input_parameters {
        object.key("InputParameters").string(var_385.as_str());
    }
    if let Some(var_386) = &input.maximum_execution_frequency {
        object
            .key("MaximumExecutionFrequency")
            .string(var_386.as_str());
    }
    if let Some(var_387) = &input.config_rule_state {
        object.key("ConfigRuleState").string(var_387.as_str());
    }
    if let Some(var_388) = &input.created_by {
        object.key("CreatedBy").string(var_388.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_aggregation_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountAggregationSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.account_ids {
        let mut array_390 = object.key("AccountIds").start_array();
        for item_391 in var_389 {
            {
                array_390.value().string(item_391.as_str());
            }
        }
        array_390.finish();
    }
    if input.all_aws_regions {
        object.key("AllAwsRegions").boolean(input.all_aws_regions);
    }
    if let Some(var_392) = &input.aws_regions {
        let mut array_393 = object.key("AwsRegions").start_array();
        for item_394 in var_392 {
            {
                array_393.value().string(item_394.as_str());
            }
        }
        array_393.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_organization_aggregation_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationAggregationSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.role_arn {
        object.key("RoleArn").string(var_395.as_str());
    }
    if let Some(var_396) = &input.aws_regions {
        let mut array_397 = object.key("AwsRegions").start_array();
        for item_398 in var_396 {
            {
                array_397.value().string(item_398.as_str());
            }
        }
        array_397.finish();
    }
    if input.all_aws_regions {
        object.key("AllAwsRegions").boolean(input.all_aws_regions);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_configuration_recorder(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfigurationRecorder,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_399) = &input.name {
        object.key("name").string(var_399.as_str());
    }
    if let Some(var_400) = &input.role_arn {
        object.key("roleARN").string(var_400.as_str());
    }
    if let Some(var_401) = &input.recording_group {
        let mut object_402 = object.key("recordingGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_recording_group(&mut object_402, var_401)?;
        object_402.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conformance_pack_input_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConformancePackInputParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_403) = &input.parameter_name {
        object.key("ParameterName").string(var_403.as_str());
    }
    if let Some(var_404) = &input.parameter_value {
        object.key("ParameterValue").string(var_404.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delivery_channel(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeliveryChannel,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_405) = &input.name {
        object.key("name").string(var_405.as_str());
    }
    if let Some(var_406) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_406.as_str());
    }
    if let Some(var_407) = &input.s3_key_prefix {
        object.key("s3KeyPrefix").string(var_407.as_str());
    }
    if let Some(var_408) = &input.s3_kms_key_arn {
        object.key("s3KmsKeyArn").string(var_408.as_str());
    }
    if let Some(var_409) = &input.sns_topic_arn {
        object.key("snsTopicARN").string(var_409.as_str());
    }
    if let Some(var_410) = &input.config_snapshot_delivery_properties {
        let mut object_411 = object
            .key("configSnapshotDeliveryProperties")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_config_snapshot_delivery_properties(
            &mut object_411,
            var_410,
        )?;
        object_411.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_evaluation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Evaluation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_412) = &input.compliance_resource_type {
        object
            .key("ComplianceResourceType")
            .string(var_412.as_str());
    }
    if let Some(var_413) = &input.compliance_resource_id {
        object.key("ComplianceResourceId").string(var_413.as_str());
    }
    if let Some(var_414) = &input.compliance_type {
        object.key("ComplianceType").string(var_414.as_str());
    }
    if let Some(var_415) = &input.annotation {
        object.key("Annotation").string(var_415.as_str());
    }
    if let Some(var_416) = &input.ordering_timestamp {
        object
            .key("OrderingTimestamp")
            .date_time(var_416, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_external_evaluation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExternalEvaluation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_417) = &input.compliance_resource_type {
        object
            .key("ComplianceResourceType")
            .string(var_417.as_str());
    }
    if let Some(var_418) = &input.compliance_resource_id {
        object.key("ComplianceResourceId").string(var_418.as_str());
    }
    if let Some(var_419) = &input.compliance_type {
        object.key("ComplianceType").string(var_419.as_str());
    }
    if let Some(var_420) = &input.annotation {
        object.key("Annotation").string(var_420.as_str());
    }
    if let Some(var_421) = &input.ordering_timestamp {
        object
            .key("OrderingTimestamp")
            .date_time(var_421, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_organization_managed_rule_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationManagedRuleMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_422) = &input.description {
        object.key("Description").string(var_422.as_str());
    }
    if let Some(var_423) = &input.rule_identifier {
        object.key("RuleIdentifier").string(var_423.as_str());
    }
    if let Some(var_424) = &input.input_parameters {
        object.key("InputParameters").string(var_424.as_str());
    }
    if let Some(var_425) = &input.maximum_execution_frequency {
        object
            .key("MaximumExecutionFrequency")
            .string(var_425.as_str());
    }
    if let Some(var_426) = &input.resource_types_scope {
        let mut array_427 = object.key("ResourceTypesScope").start_array();
        for item_428 in var_426 {
            {
                array_427.value().string(item_428.as_str());
            }
        }
        array_427.finish();
    }
    if let Some(var_429) = &input.resource_id_scope {
        object.key("ResourceIdScope").string(var_429.as_str());
    }
    if let Some(var_430) = &input.tag_key_scope {
        object.key("TagKeyScope").string(var_430.as_str());
    }
    if let Some(var_431) = &input.tag_value_scope {
        object.key("TagValueScope").string(var_431.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_organization_custom_rule_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationCustomRuleMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.description {
        object.key("Description").string(var_432.as_str());
    }
    if let Some(var_433) = &input.lambda_function_arn {
        object.key("LambdaFunctionArn").string(var_433.as_str());
    }
    if let Some(var_434) = &input.organization_config_rule_trigger_types {
        let mut array_435 = object
            .key("OrganizationConfigRuleTriggerTypes")
            .start_array();
        for item_436 in var_434 {
            {
                array_435.value().string(item_436.as_str());
            }
        }
        array_435.finish();
    }
    if let Some(var_437) = &input.input_parameters {
        object.key("InputParameters").string(var_437.as_str());
    }
    if let Some(var_438) = &input.maximum_execution_frequency {
        object
            .key("MaximumExecutionFrequency")
            .string(var_438.as_str());
    }
    if let Some(var_439) = &input.resource_types_scope {
        let mut array_440 = object.key("ResourceTypesScope").start_array();
        for item_441 in var_439 {
            {
                array_440.value().string(item_441.as_str());
            }
        }
        array_440.finish();
    }
    if let Some(var_442) = &input.resource_id_scope {
        object.key("ResourceIdScope").string(var_442.as_str());
    }
    if let Some(var_443) = &input.tag_key_scope {
        object.key("TagKeyScope").string(var_443.as_str());
    }
    if let Some(var_444) = &input.tag_value_scope {
        object.key("TagValueScope").string(var_444.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_organization_custom_policy_rule_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationCustomPolicyRuleMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_445) = &input.description {
        object.key("Description").string(var_445.as_str());
    }
    if let Some(var_446) = &input.organization_config_rule_trigger_types {
        let mut array_447 = object
            .key("OrganizationConfigRuleTriggerTypes")
            .start_array();
        for item_448 in var_446 {
            {
                array_447.value().string(item_448.as_str());
            }
        }
        array_447.finish();
    }
    if let Some(var_449) = &input.input_parameters {
        object.key("InputParameters").string(var_449.as_str());
    }
    if let Some(var_450) = &input.maximum_execution_frequency {
        object
            .key("MaximumExecutionFrequency")
            .string(var_450.as_str());
    }
    if let Some(var_451) = &input.resource_types_scope {
        let mut array_452 = object.key("ResourceTypesScope").start_array();
        for item_453 in var_451 {
            {
                array_452.value().string(item_453.as_str());
            }
        }
        array_452.finish();
    }
    if let Some(var_454) = &input.resource_id_scope {
        object.key("ResourceIdScope").string(var_454.as_str());
    }
    if let Some(var_455) = &input.tag_key_scope {
        object.key("TagKeyScope").string(var_455.as_str());
    }
    if let Some(var_456) = &input.tag_value_scope {
        object.key("TagValueScope").string(var_456.as_str());
    }
    if let Some(var_457) = &input.policy_runtime {
        object.key("PolicyRuntime").string(var_457.as_str());
    }
    if let Some(var_458) = &input.policy_text {
        object.key("PolicyText").string(var_458.as_str());
    }
    if let Some(var_459) = &input.debug_log_delivery_accounts {
        let mut array_460 = object.key("DebugLogDeliveryAccounts").start_array();
        for item_461 in var_459 {
            {
                array_460.value().string(item_461.as_str());
            }
        }
        array_460.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_remediation_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RemediationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_462) = &input.config_rule_name {
        object.key("ConfigRuleName").string(var_462.as_str());
    }
    if let Some(var_463) = &input.target_type {
        object.key("TargetType").string(var_463.as_str());
    }
    if let Some(var_464) = &input.target_id {
        object.key("TargetId").string(var_464.as_str());
    }
    if let Some(var_465) = &input.target_version {
        object.key("TargetVersion").string(var_465.as_str());
    }
    if let Some(var_466) = &input.parameters {
        let mut object_467 = object.key("Parameters").start_object();
        for (key_468, value_469) in var_466 {
            {
                let mut object_470 = object_467.key(key_468).start_object();
                crate::json_ser::serialize_structure_crate_model_remediation_parameter_value(
                    &mut object_470,
                    value_469,
                )?;
                object_470.finish();
            }
        }
        object_467.finish();
    }
    if let Some(var_471) = &input.resource_type {
        object.key("ResourceType").string(var_471.as_str());
    }
    if input.automatic {
        object.key("Automatic").boolean(input.automatic);
    }
    if let Some(var_472) = &input.execution_controls {
        let mut object_473 = object.key("ExecutionControls").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_controls(
            &mut object_473,
            var_472,
        )?;
        object_473.finish();
    }
    if let Some(var_474) = &input.maximum_automatic_attempts {
        object.key("MaximumAutomaticAttempts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_474).into()),
        );
    }
    if let Some(var_475) = &input.retry_attempt_seconds {
        object.key("RetryAttemptSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_475).into()),
        );
    }
    if let Some(var_476) = &input.arn {
        object.key("Arn").string(var_476.as_str());
    }
    if let Some(var_477) = &input.created_by_service {
        object.key("CreatedByService").string(var_477.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stored_query(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StoredQuery,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.query_id {
        object.key("QueryId").string(var_478.as_str());
    }
    if let Some(var_479) = &input.query_arn {
        object.key("QueryArn").string(var_479.as_str());
    }
    if let Some(var_480) = &input.query_name {
        object.key("QueryName").string(var_480.as_str());
    }
    if let Some(var_481) = &input.description {
        object.key("Description").string(var_481.as_str());
    }
    if let Some(var_482) = &input.expression {
        object.key("Expression").string(var_482.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scope(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scope,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_483) = &input.compliance_resource_types {
        let mut array_484 = object.key("ComplianceResourceTypes").start_array();
        for item_485 in var_483 {
            {
                array_484.value().string(item_485.as_str());
            }
        }
        array_484.finish();
    }
    if let Some(var_486) = &input.tag_key {
        object.key("TagKey").string(var_486.as_str());
    }
    if let Some(var_487) = &input.tag_value {
        object.key("TagValue").string(var_487.as_str());
    }
    if let Some(var_488) = &input.compliance_resource_id {
        object.key("ComplianceResourceId").string(var_488.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Source,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_489) = &input.owner {
        object.key("Owner").string(var_489.as_str());
    }
    if let Some(var_490) = &input.source_identifier {
        object.key("SourceIdentifier").string(var_490.as_str());
    }
    if let Some(var_491) = &input.source_details {
        let mut array_492 = object.key("SourceDetails").start_array();
        for item_493 in var_491 {
            {
                let mut object_494 = array_492.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_detail(
                    &mut object_494,
                    item_493,
                )?;
                object_494.finish();
            }
        }
        array_492.finish();
    }
    if let Some(var_495) = &input.custom_policy_details {
        let mut object_496 = object.key("CustomPolicyDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_policy_details(
            &mut object_496,
            var_495,
        )?;
        object_496.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recording_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecordingGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.all_supported {
        object.key("allSupported").boolean(input.all_supported);
    }
    if input.include_global_resource_types {
        object
            .key("includeGlobalResourceTypes")
            .boolean(input.include_global_resource_types);
    }
    if let Some(var_497) = &input.resource_types {
        let mut array_498 = object.key("resourceTypes").start_array();
        for item_499 in var_497 {
            {
                array_498.value().string(item_499.as_str());
            }
        }
        array_498.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_config_snapshot_delivery_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfigSnapshotDeliveryProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_500) = &input.delivery_frequency {
        object.key("deliveryFrequency").string(var_500.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_remediation_parameter_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RemediationParameterValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_501) = &input.resource_value {
        let mut object_502 = object.key("ResourceValue").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_value(&mut object_502, var_501)?;
        object_502.finish();
    }
    if let Some(var_503) = &input.static_value {
        let mut object_504 = object.key("StaticValue").start_object();
        crate::json_ser::serialize_structure_crate_model_static_value(&mut object_504, var_503)?;
        object_504.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execution_controls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionControls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_505) = &input.ssm_controls {
        let mut object_506 = object.key("SsmControls").start_object();
        crate::json_ser::serialize_structure_crate_model_ssm_controls(&mut object_506, var_505)?;
        object_506.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_507) = &input.event_source {
        object.key("EventSource").string(var_507.as_str());
    }
    if let Some(var_508) = &input.message_type {
        object.key("MessageType").string(var_508.as_str());
    }
    if let Some(var_509) = &input.maximum_execution_frequency {
        object
            .key("MaximumExecutionFrequency")
            .string(var_509.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_510) = &input.policy_runtime {
        object.key("PolicyRuntime").string(var_510.as_str());
    }
    if let Some(var_511) = &input.policy_text {
        object.key("PolicyText").string(var_511.as_str());
    }
    if input.enable_debug_log_delivery {
        object
            .key("EnableDebugLogDelivery")
            .boolean(input.enable_debug_log_delivery);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_512) = &input.value {
        object.key("Value").string(var_512.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_static_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StaticValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_513) = &input.values {
        let mut array_514 = object.key("Values").start_array();
        for item_515 in var_513 {
            {
                array_514.value().string(item_515.as_str());
            }
        }
        array_514.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ssm_controls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SsmControls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_516) = &input.concurrent_execution_rate_percentage {
        object.key("ConcurrentExecutionRatePercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_516).into()),
        );
    }
    if let Some(var_517) = &input.error_percentage {
        object.key("ErrorPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_517).into()),
        );
    }
    Ok(())
}
