// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_aggregate_compliance_by_config_rules_output_next_token(
    input: &crate::operation::describe_aggregate_compliance_by_config_rules::DescribeAggregateComplianceByConfigRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_aggregate_compliance_by_conformance_packs_output_next_token(
    input: &crate::operation::describe_aggregate_compliance_by_conformance_packs::DescribeAggregateComplianceByConformancePacksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_aggregation_authorizations_output_next_token(
    input: &crate::operation::describe_aggregation_authorizations::DescribeAggregationAuthorizationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_compliance_by_config_rule_output_next_token(
    input: &crate::operation::describe_compliance_by_config_rule::DescribeComplianceByConfigRuleOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_compliance_by_resource_output_next_token(
    input: &crate::operation::describe_compliance_by_resource::DescribeComplianceByResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_config_rule_evaluation_status_output_next_token(
    input: &crate::operation::describe_config_rule_evaluation_status::DescribeConfigRuleEvaluationStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_config_rules_output_next_token(
    input: &crate::operation::describe_config_rules::DescribeConfigRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_configuration_aggregator_sources_status_output_next_token(
    input: &crate::operation::describe_configuration_aggregator_sources_status::DescribeConfigurationAggregatorSourcesStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_configuration_aggregators_output_next_token(
    input: &crate::operation::describe_configuration_aggregators::DescribeConfigurationAggregatorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_conformance_pack_compliance_output_next_token(
    input: &crate::operation::describe_conformance_pack_compliance::DescribeConformancePackComplianceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_conformance_pack_status_output_next_token(
    input: &crate::operation::describe_conformance_pack_status::DescribeConformancePackStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_conformance_packs_output_next_token(
    input: &crate::operation::describe_conformance_packs::DescribeConformancePacksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_organization_config_rule_statuses_output_next_token(
    input: &crate::operation::describe_organization_config_rule_statuses::DescribeOrganizationConfigRuleStatusesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_organization_config_rules_output_next_token(
    input: &crate::operation::describe_organization_config_rules::DescribeOrganizationConfigRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_organization_conformance_pack_statuses_output_next_token(
    input: &crate::operation::describe_organization_conformance_pack_statuses::DescribeOrganizationConformancePackStatusesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_organization_conformance_packs_output_next_token(
    input: &crate::operation::describe_organization_conformance_packs::DescribeOrganizationConformancePacksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_pending_aggregation_requests_output_next_token(
    input: &crate::operation::describe_pending_aggregation_requests::DescribePendingAggregationRequestsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_remediation_exceptions_output_next_token(
    input: &crate::operation::describe_remediation_exceptions::DescribeRemediationExceptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_remediation_execution_status_output_next_token(
    input: &crate::operation::describe_remediation_execution_status::DescribeRemediationExecutionStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_retention_configurations_output_next_token(
    input: &crate::operation::describe_retention_configurations::DescribeRetentionConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_aggregate_compliance_details_by_config_rule_output_next_token(
    input: &crate::operation::get_aggregate_compliance_details_by_config_rule::GetAggregateComplianceDetailsByConfigRuleOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_aggregate_config_rule_compliance_summary_output_next_token(
    input: &crate::operation::get_aggregate_config_rule_compliance_summary::GetAggregateConfigRuleComplianceSummaryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_aggregate_conformance_pack_compliance_summary_output_next_token(
    input: &crate::operation::get_aggregate_conformance_pack_compliance_summary::GetAggregateConformancePackComplianceSummaryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_aggregate_discovered_resource_counts_output_next_token(
    input: &crate::operation::get_aggregate_discovered_resource_counts::GetAggregateDiscoveredResourceCountsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_compliance_details_by_config_rule_output_next_token(
    input: &crate::operation::get_compliance_details_by_config_rule::GetComplianceDetailsByConfigRuleOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_compliance_details_by_resource_output_next_token(
    input: &crate::operation::get_compliance_details_by_resource::GetComplianceDetailsByResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_conformance_pack_compliance_details_output_next_token(
    input: &crate::operation::get_conformance_pack_compliance_details::GetConformancePackComplianceDetailsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_conformance_pack_compliance_summary_output_next_token(
    input: &crate::operation::get_conformance_pack_compliance_summary::GetConformancePackComplianceSummaryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_discovered_resource_counts_output_next_token(
    input: &crate::operation::get_discovered_resource_counts::GetDiscoveredResourceCountsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_organization_config_rule_detailed_status_output_next_token(
    input: &crate::operation::get_organization_config_rule_detailed_status::GetOrganizationConfigRuleDetailedStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_organization_conformance_pack_detailed_status_output_next_token(
    input: &crate::operation::get_organization_conformance_pack_detailed_status::GetOrganizationConformancePackDetailedStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_resource_config_history_output_next_token(
    input: &crate::operation::get_resource_config_history::GetResourceConfigHistoryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_aggregate_discovered_resources_output_next_token(
    input: &crate::operation::list_aggregate_discovered_resources::ListAggregateDiscoveredResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_conformance_pack_compliance_scores_output_next_token(
    input: &crate::operation::list_conformance_pack_compliance_scores::ListConformancePackComplianceScoresOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_discovered_resources_output_next_token(
    input: &crate::operation::list_discovered_resources::ListDiscoveredResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resource_evaluations_output_next_token(
    input: &crate::operation::list_resource_evaluations::ListResourceEvaluationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_stored_queries_output_next_token(
    input: &crate::operation::list_stored_queries::ListStoredQueriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_tags_for_resource_output_next_token(
    input: &crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_select_aggregate_resource_config_output_next_token(
    input: &crate::operation::select_aggregate_resource_config::SelectAggregateResourceConfigOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_select_resource_config_output_next_token(
    input: &crate::operation::select_resource_config::SelectResourceConfigOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_aggregate_compliance_by_conformance_packs_output_aggregate_compliance_by_conformance_packs(
    input: crate::operation::describe_aggregate_compliance_by_conformance_packs::DescribeAggregateComplianceByConformancePacksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AggregateComplianceByConformancePack>> {
    let input = match input.aggregate_compliance_by_conformance_packs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_aggregation_authorizations_output_aggregation_authorizations(
    input: crate::operation::describe_aggregation_authorizations::DescribeAggregationAuthorizationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AggregationAuthorization>> {
    let input = match input.aggregation_authorizations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_compliance_by_config_rule_output_compliance_by_config_rules(
    input: crate::operation::describe_compliance_by_config_rule::DescribeComplianceByConfigRuleOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ComplianceByConfigRule>> {
    let input = match input.compliance_by_config_rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_compliance_by_resource_output_compliance_by_resources(
    input: crate::operation::describe_compliance_by_resource::DescribeComplianceByResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ComplianceByResource>> {
    let input = match input.compliance_by_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_config_rule_evaluation_status_output_config_rules_evaluation_status(
    input: crate::operation::describe_config_rule_evaluation_status::DescribeConfigRuleEvaluationStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConfigRuleEvaluationStatus>> {
    let input = match input.config_rules_evaluation_status {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_config_rules_output_config_rules(
    input: crate::operation::describe_config_rules::DescribeConfigRulesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConfigRule>> {
    let input = match input.config_rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_configuration_aggregator_sources_status_output_aggregated_source_status_list(
    input: crate::operation::describe_configuration_aggregator_sources_status::DescribeConfigurationAggregatorSourcesStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AggregatedSourceStatus>> {
    let input = match input.aggregated_source_status_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_configuration_aggregators_output_configuration_aggregators(
    input: crate::operation::describe_configuration_aggregators::DescribeConfigurationAggregatorsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConfigurationAggregator>> {
    let input = match input.configuration_aggregators {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_conformance_pack_status_output_conformance_pack_status_details(
    input: crate::operation::describe_conformance_pack_status::DescribeConformancePackStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConformancePackStatusDetail>> {
    let input = match input.conformance_pack_status_details {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_conformance_packs_output_conformance_pack_details(
    input: crate::operation::describe_conformance_packs::DescribeConformancePacksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConformancePackDetail>> {
    let input = match input.conformance_pack_details {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_organization_config_rule_statuses_output_organization_config_rule_statuses(
    input: crate::operation::describe_organization_config_rule_statuses::DescribeOrganizationConfigRuleStatusesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OrganizationConfigRuleStatus>> {
    let input = match input.organization_config_rule_statuses {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_organization_config_rules_output_organization_config_rules(
    input: crate::operation::describe_organization_config_rules::DescribeOrganizationConfigRulesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OrganizationConfigRule>> {
    let input = match input.organization_config_rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_organization_conformance_pack_statuses_output_organization_conformance_pack_statuses(
    input: crate::operation::describe_organization_conformance_pack_statuses::DescribeOrganizationConformancePackStatusesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OrganizationConformancePackStatus>> {
    let input = match input.organization_conformance_pack_statuses {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_organization_conformance_packs_output_organization_conformance_packs(
    input: crate::operation::describe_organization_conformance_packs::DescribeOrganizationConformancePacksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OrganizationConformancePack>> {
    let input = match input.organization_conformance_packs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_pending_aggregation_requests_output_pending_aggregation_requests(
    input: crate::operation::describe_pending_aggregation_requests::DescribePendingAggregationRequestsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PendingAggregationRequest>> {
    let input = match input.pending_aggregation_requests {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_remediation_execution_status_output_remediation_execution_statuses(
    input: crate::operation::describe_remediation_execution_status::DescribeRemediationExecutionStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RemediationExecutionStatus>> {
    let input = match input.remediation_execution_statuses {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_retention_configurations_output_retention_configurations(
    input: crate::operation::describe_retention_configurations::DescribeRetentionConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RetentionConfiguration>> {
    let input = match input.retention_configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_aggregate_compliance_details_by_config_rule_output_aggregate_evaluation_results(
    input: crate::operation::get_aggregate_compliance_details_by_config_rule::GetAggregateComplianceDetailsByConfigRuleOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AggregateEvaluationResult>> {
    let input = match input.aggregate_evaluation_results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_compliance_details_by_config_rule_output_evaluation_results(
    input: crate::operation::get_compliance_details_by_config_rule::GetComplianceDetailsByConfigRuleOutput,
) -> std::option::Option<std::vec::Vec<crate::types::EvaluationResult>> {
    let input = match input.evaluation_results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_compliance_details_by_resource_output_evaluation_results(
    input: crate::operation::get_compliance_details_by_resource::GetComplianceDetailsByResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::types::EvaluationResult>> {
    let input = match input.evaluation_results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_conformance_pack_compliance_summary_output_conformance_pack_compliance_summary_list(
    input: crate::operation::get_conformance_pack_compliance_summary::GetConformancePackComplianceSummaryOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConformancePackComplianceSummary>> {
    let input = match input.conformance_pack_compliance_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_organization_config_rule_detailed_status_output_organization_config_rule_detailed_status(
    input: crate::operation::get_organization_config_rule_detailed_status::GetOrganizationConfigRuleDetailedStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MemberAccountStatus>> {
    let input = match input.organization_config_rule_detailed_status {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_organization_conformance_pack_detailed_status_output_organization_conformance_pack_detailed_statuses(
    input: crate::operation::get_organization_conformance_pack_detailed_status::GetOrganizationConformancePackDetailedStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OrganizationConformancePackDetailedStatus>> {
    let input = match input.organization_conformance_pack_detailed_statuses {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_resource_config_history_output_configuration_items(
    input: crate::operation::get_resource_config_history::GetResourceConfigHistoryOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConfigurationItem>> {
    let input = match input.configuration_items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_aggregate_discovered_resources_output_resource_identifiers(
    input: crate::operation::list_aggregate_discovered_resources::ListAggregateDiscoveredResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AggregateResourceIdentifier>> {
    let input = match input.resource_identifiers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_discovered_resources_output_resource_identifiers(
    input: crate::operation::list_discovered_resources::ListDiscoveredResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ResourceIdentifier>> {
    let input = match input.resource_identifiers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_resource_evaluations_output_resource_evaluations(
    input: crate::operation::list_resource_evaluations::ListResourceEvaluationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ResourceEvaluation>> {
    let input = match input.resource_evaluations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_tags_for_resource_output_tags(
    input: crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Tag>> {
    let input = match input.tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_select_aggregate_resource_config_output_results(
    input: crate::operation::select_aggregate_resource_config::SelectAggregateResourceConfigOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_select_resource_config_output_results(
    input: crate::operation::select_resource_config::SelectResourceConfigOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
