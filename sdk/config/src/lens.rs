// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_aggregate_compliance_by_config_rules_output_next_token(
    input: &crate::output::DescribeAggregateComplianceByConfigRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_aggregate_compliance_by_conformance_packs_output_next_token(
    input: &crate::output::DescribeAggregateComplianceByConformancePacksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_aggregation_authorizations_output_next_token(
    input: &crate::output::DescribeAggregationAuthorizationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_compliance_by_config_rule_output_next_token(
    input: &crate::output::DescribeComplianceByConfigRuleOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_compliance_by_resource_output_next_token(
    input: &crate::output::DescribeComplianceByResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_config_rule_evaluation_status_output_next_token(
    input: &crate::output::DescribeConfigRuleEvaluationStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_config_rules_output_next_token(
    input: &crate::output::DescribeConfigRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_configuration_aggregators_output_next_token(
    input: &crate::output::DescribeConfigurationAggregatorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_configuration_aggregator_sources_status_output_next_token(
    input: &crate::output::DescribeConfigurationAggregatorSourcesStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_conformance_pack_compliance_output_next_token(
    input: &crate::output::DescribeConformancePackComplianceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_conformance_packs_output_next_token(
    input: &crate::output::DescribeConformancePacksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_conformance_pack_status_output_next_token(
    input: &crate::output::DescribeConformancePackStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_organization_config_rules_output_next_token(
    input: &crate::output::DescribeOrganizationConfigRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_organization_config_rule_statuses_output_next_token(
    input: &crate::output::DescribeOrganizationConfigRuleStatusesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_organization_conformance_packs_output_next_token(
    input: &crate::output::DescribeOrganizationConformancePacksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_organization_conformance_pack_statuses_output_next_token(
    input: &crate::output::DescribeOrganizationConformancePackStatusesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_pending_aggregation_requests_output_next_token(
    input: &crate::output::DescribePendingAggregationRequestsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_remediation_exceptions_output_next_token(
    input: &crate::output::DescribeRemediationExceptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_remediation_execution_status_output_next_token(
    input: &crate::output::DescribeRemediationExecutionStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_retention_configurations_output_next_token(
    input: &crate::output::DescribeRetentionConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_aggregate_compliance_details_by_config_rule_output_next_token(
    input: &crate::output::GetAggregateComplianceDetailsByConfigRuleOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_aggregate_config_rule_compliance_summary_output_next_token(
    input: &crate::output::GetAggregateConfigRuleComplianceSummaryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_aggregate_conformance_pack_compliance_summary_output_next_token(
    input: &crate::output::GetAggregateConformancePackComplianceSummaryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_aggregate_discovered_resource_counts_output_next_token(
    input: &crate::output::GetAggregateDiscoveredResourceCountsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_compliance_details_by_config_rule_output_next_token(
    input: &crate::output::GetComplianceDetailsByConfigRuleOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_compliance_details_by_resource_output_next_token(
    input: &crate::output::GetComplianceDetailsByResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_conformance_pack_compliance_details_output_next_token(
    input: &crate::output::GetConformancePackComplianceDetailsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_conformance_pack_compliance_summary_output_next_token(
    input: &crate::output::GetConformancePackComplianceSummaryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_discovered_resource_counts_output_next_token(
    input: &crate::output::GetDiscoveredResourceCountsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_organization_config_rule_detailed_status_output_next_token(
    input: &crate::output::GetOrganizationConfigRuleDetailedStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_organization_conformance_pack_detailed_status_output_next_token(
    input: &crate::output::GetOrganizationConformancePackDetailedStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_resource_config_history_output_next_token(
    input: &crate::output::GetResourceConfigHistoryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_aggregate_discovered_resources_output_next_token(
    input: &crate::output::ListAggregateDiscoveredResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_discovered_resources_output_next_token(
    input: &crate::output::ListDiscoveredResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_stored_queries_output_next_token(
    input: &crate::output::ListStoredQueriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_tags_for_resource_output_next_token(
    input: &crate::output::ListTagsForResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_select_aggregate_resource_config_output_next_token(
    input: &crate::output::SelectAggregateResourceConfigOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_select_resource_config_output_next_token(
    input: &crate::output::SelectResourceConfigOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_aggregate_compliance_by_conformance_packs_output_aggregate_compliance_by_conformance_packs(
    input: crate::output::DescribeAggregateComplianceByConformancePacksOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AggregateComplianceByConformancePack>> {
    let input = match input.aggregate_compliance_by_conformance_packs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_aggregation_authorizations_output_aggregation_authorizations(
    input: crate::output::DescribeAggregationAuthorizationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AggregationAuthorization>> {
    let input = match input.aggregation_authorizations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_compliance_by_config_rule_output_compliance_by_config_rules(
    input: crate::output::DescribeComplianceByConfigRuleOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ComplianceByConfigRule>> {
    let input = match input.compliance_by_config_rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_compliance_by_resource_output_compliance_by_resources(
    input: crate::output::DescribeComplianceByResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ComplianceByResource>> {
    let input = match input.compliance_by_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_config_rule_evaluation_status_output_config_rules_evaluation_status(
    input: crate::output::DescribeConfigRuleEvaluationStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ConfigRuleEvaluationStatus>> {
    let input = match input.config_rules_evaluation_status {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_config_rules_output_config_rules(
    input: crate::output::DescribeConfigRulesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ConfigRule>> {
    let input = match input.config_rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_configuration_aggregators_output_configuration_aggregators(
    input: crate::output::DescribeConfigurationAggregatorsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ConfigurationAggregator>> {
    let input = match input.configuration_aggregators {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_configuration_aggregator_sources_status_output_aggregated_source_status_list(
    input: crate::output::DescribeConfigurationAggregatorSourcesStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AggregatedSourceStatus>> {
    let input = match input.aggregated_source_status_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_conformance_packs_output_conformance_pack_details(
    input: crate::output::DescribeConformancePacksOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ConformancePackDetail>> {
    let input = match input.conformance_pack_details {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_conformance_pack_status_output_conformance_pack_status_details(
    input: crate::output::DescribeConformancePackStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ConformancePackStatusDetail>> {
    let input = match input.conformance_pack_status_details {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_organization_config_rules_output_organization_config_rules(
    input: crate::output::DescribeOrganizationConfigRulesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::OrganizationConfigRule>> {
    let input = match input.organization_config_rules {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_organization_config_rule_statuses_output_organization_config_rule_statuses(
    input: crate::output::DescribeOrganizationConfigRuleStatusesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::OrganizationConfigRuleStatus>> {
    let input = match input.organization_config_rule_statuses {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_organization_conformance_packs_output_organization_conformance_packs(
    input: crate::output::DescribeOrganizationConformancePacksOutput,
) -> std::option::Option<std::vec::Vec<crate::model::OrganizationConformancePack>> {
    let input = match input.organization_conformance_packs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_organization_conformance_pack_statuses_output_organization_conformance_pack_statuses(
    input: crate::output::DescribeOrganizationConformancePackStatusesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::OrganizationConformancePackStatus>> {
    let input = match input.organization_conformance_pack_statuses {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_pending_aggregation_requests_output_pending_aggregation_requests(
    input: crate::output::DescribePendingAggregationRequestsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PendingAggregationRequest>> {
    let input = match input.pending_aggregation_requests {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_remediation_execution_status_output_remediation_execution_statuses(
    input: crate::output::DescribeRemediationExecutionStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RemediationExecutionStatus>> {
    let input = match input.remediation_execution_statuses {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_retention_configurations_output_retention_configurations(
    input: crate::output::DescribeRetentionConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RetentionConfiguration>> {
    let input = match input.retention_configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_aggregate_compliance_details_by_config_rule_output_aggregate_evaluation_results(
    input: crate::output::GetAggregateComplianceDetailsByConfigRuleOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AggregateEvaluationResult>> {
    let input = match input.aggregate_evaluation_results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_compliance_details_by_config_rule_output_evaluation_results(
    input: crate::output::GetComplianceDetailsByConfigRuleOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EvaluationResult>> {
    let input = match input.evaluation_results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_compliance_details_by_resource_output_evaluation_results(
    input: crate::output::GetComplianceDetailsByResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EvaluationResult>> {
    let input = match input.evaluation_results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_conformance_pack_compliance_summary_output_conformance_pack_compliance_summary_list(
    input: crate::output::GetConformancePackComplianceSummaryOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ConformancePackComplianceSummary>> {
    let input = match input.conformance_pack_compliance_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_organization_config_rule_detailed_status_output_organization_config_rule_detailed_status(
    input: crate::output::GetOrganizationConfigRuleDetailedStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::model::MemberAccountStatus>> {
    let input = match input.organization_config_rule_detailed_status {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_organization_conformance_pack_detailed_status_output_organization_conformance_pack_detailed_statuses(
    input: crate::output::GetOrganizationConformancePackDetailedStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::model::OrganizationConformancePackDetailedStatus>> {
    let input = match input.organization_conformance_pack_detailed_statuses {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_resource_config_history_output_configuration_items(
    input: crate::output::GetResourceConfigHistoryOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ConfigurationItem>> {
    let input = match input.configuration_items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_aggregate_discovered_resources_output_resource_identifiers(
    input: crate::output::ListAggregateDiscoveredResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AggregateResourceIdentifier>> {
    let input = match input.resource_identifiers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_discovered_resources_output_resource_identifiers(
    input: crate::output::ListDiscoveredResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ResourceIdentifier>> {
    let input = match input.resource_identifiers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_tags_for_resource_output_tags(
    input: crate::output::ListTagsForResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Tag>> {
    let input = match input.tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_select_aggregate_resource_config_output_results(
    input: crate::output::SelectAggregateResourceConfigOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_select_resource_config_output_results(
    input: crate::output::SelectResourceConfigOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
