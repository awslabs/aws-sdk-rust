// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn describe_conformance_pack_compliance_output_correct_errors(
    mut builder: crate::operation::describe_conformance_pack_compliance::builders::DescribeConformancePackComplianceOutputBuilder,
) -> crate::operation::describe_conformance_pack_compliance::builders::DescribeConformancePackComplianceOutputBuilder {
    if builder.conformance_pack_name.is_none() {
        builder.conformance_pack_name = Some(Default::default())
    }
    if builder.conformance_pack_rule_compliance_list.is_none() {
        builder.conformance_pack_rule_compliance_list = Some(Default::default())
    }
    builder
}

pub(crate) fn get_aggregate_discovered_resource_counts_output_correct_errors(
    mut builder: crate::operation::get_aggregate_discovered_resource_counts::builders::GetAggregateDiscoveredResourceCountsOutputBuilder,
) -> crate::operation::get_aggregate_discovered_resource_counts::builders::GetAggregateDiscoveredResourceCountsOutputBuilder {
    if builder.total_discovered_resources.is_none() {
        builder.total_discovered_resources = Some(Default::default())
    }
    builder
}

pub(crate) fn get_conformance_pack_compliance_details_output_correct_errors(
    mut builder: crate::operation::get_conformance_pack_compliance_details::builders::GetConformancePackComplianceDetailsOutputBuilder,
) -> crate::operation::get_conformance_pack_compliance_details::builders::GetConformancePackComplianceDetailsOutputBuilder {
    if builder.conformance_pack_name.is_none() {
        builder.conformance_pack_name = Some(Default::default())
    }
    builder
}

pub(crate) fn list_conformance_pack_compliance_scores_output_correct_errors(
    mut builder: crate::operation::list_conformance_pack_compliance_scores::builders::ListConformancePackComplianceScoresOutputBuilder,
) -> crate::operation::list_conformance_pack_compliance_scores::builders::ListConformancePackComplianceScoresOutputBuilder {
    if builder.conformance_pack_compliance_scores.is_none() {
        builder.conformance_pack_compliance_scores = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_status_correct_errors(
    mut builder: crate::types::builders::EvaluationStatusBuilder,
) -> crate::types::builders::EvaluationStatusBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResourceEvaluationStatus>().ok()
    }
    builder
}

pub(crate) fn resource_details_correct_errors(
    mut builder: crate::types::builders::ResourceDetailsBuilder,
) -> crate::types::builders::ResourceDetailsBuilder {
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.resource_configuration.is_none() {
        builder.resource_configuration = Some(Default::default())
    }
    builder
}

pub(crate) fn retention_configuration_correct_errors(
    mut builder: crate::types::builders::RetentionConfigurationBuilder,
) -> crate::types::builders::RetentionConfigurationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.retention_period_in_days.is_none() {
        builder.retention_period_in_days = Some(Default::default())
    }
    builder
}

pub(crate) fn stored_query_correct_errors(mut builder: crate::types::builders::StoredQueryBuilder) -> crate::types::builders::StoredQueryBuilder {
    if builder.query_name.is_none() {
        builder.query_name = Some(Default::default())
    }
    builder
}

pub(crate) fn aggregate_resource_identifier_correct_errors(
    mut builder: crate::types::builders::AggregateResourceIdentifierBuilder,
) -> crate::types::builders::AggregateResourceIdentifierBuilder {
    if builder.source_account_id.is_none() {
        builder.source_account_id = Some(Default::default())
    }
    if builder.source_region.is_none() {
        builder.source_region = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    builder
}

pub(crate) fn config_rule_correct_errors(mut builder: crate::types::builders::ConfigRuleBuilder) -> crate::types::builders::ConfigRuleBuilder {
    if builder.source.is_none() {
        builder.source = {
            let builder = crate::types::builders::SourceBuilder::default();
            crate::serde_util::source_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn conformance_pack_compliance_summary_correct_errors(
    mut builder: crate::types::builders::ConformancePackComplianceSummaryBuilder,
) -> crate::types::builders::ConformancePackComplianceSummaryBuilder {
    if builder.conformance_pack_name.is_none() {
        builder.conformance_pack_name = Some(Default::default())
    }
    if builder.conformance_pack_compliance_status.is_none() {
        builder.conformance_pack_compliance_status = "no value was set".parse::<crate::types::ConformancePackComplianceType>().ok()
    }
    builder
}

pub(crate) fn conformance_pack_detail_correct_errors(
    mut builder: crate::types::builders::ConformancePackDetailBuilder,
) -> crate::types::builders::ConformancePackDetailBuilder {
    if builder.conformance_pack_name.is_none() {
        builder.conformance_pack_name = Some(Default::default())
    }
    if builder.conformance_pack_arn.is_none() {
        builder.conformance_pack_arn = Some(Default::default())
    }
    if builder.conformance_pack_id.is_none() {
        builder.conformance_pack_id = Some(Default::default())
    }
    builder
}

pub(crate) fn conformance_pack_evaluation_result_correct_errors(
    mut builder: crate::types::builders::ConformancePackEvaluationResultBuilder,
) -> crate::types::builders::ConformancePackEvaluationResultBuilder {
    if builder.compliance_type.is_none() {
        builder.compliance_type = "no value was set".parse::<crate::types::ConformancePackComplianceType>().ok()
    }
    if builder.evaluation_result_identifier.is_none() {
        builder.evaluation_result_identifier = {
            let builder = crate::types::builders::EvaluationResultIdentifierBuilder::default();
            Some(builder.build())
        }
    }
    if builder.config_rule_invoked_time.is_none() {
        builder.config_rule_invoked_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.result_recorded_time.is_none() {
        builder.result_recorded_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn conformance_pack_status_detail_correct_errors(
    mut builder: crate::types::builders::ConformancePackStatusDetailBuilder,
) -> crate::types::builders::ConformancePackStatusDetailBuilder {
    if builder.conformance_pack_name.is_none() {
        builder.conformance_pack_name = Some(Default::default())
    }
    if builder.conformance_pack_id.is_none() {
        builder.conformance_pack_id = Some(Default::default())
    }
    if builder.conformance_pack_arn.is_none() {
        builder.conformance_pack_arn = Some(Default::default())
    }
    if builder.conformance_pack_state.is_none() {
        builder.conformance_pack_state = "no value was set".parse::<crate::types::ConformancePackState>().ok()
    }
    if builder.stack_arn.is_none() {
        builder.stack_arn = Some(Default::default())
    }
    if builder.last_update_requested_time.is_none() {
        builder.last_update_requested_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn evaluation_correct_errors(mut builder: crate::types::builders::EvaluationBuilder) -> crate::types::builders::EvaluationBuilder {
    if builder.compliance_resource_type.is_none() {
        builder.compliance_resource_type = Some(Default::default())
    }
    if builder.compliance_resource_id.is_none() {
        builder.compliance_resource_id = Some(Default::default())
    }
    if builder.compliance_type.is_none() {
        builder.compliance_type = "no value was set".parse::<crate::types::ComplianceType>().ok()
    }
    if builder.ordering_timestamp.is_none() {
        builder.ordering_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn grouped_resource_count_correct_errors(
    mut builder: crate::types::builders::GroupedResourceCountBuilder,
) -> crate::types::builders::GroupedResourceCountBuilder {
    if builder.group_name.is_none() {
        builder.group_name = Some(Default::default())
    }
    if builder.resource_count.is_none() {
        builder.resource_count = Some(Default::default())
    }
    builder
}

pub(crate) fn member_account_status_correct_errors(
    mut builder: crate::types::builders::MemberAccountStatusBuilder,
) -> crate::types::builders::MemberAccountStatusBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.config_rule_name.is_none() {
        builder.config_rule_name = Some(Default::default())
    }
    if builder.member_account_rule_status.is_none() {
        builder.member_account_rule_status = "no value was set".parse::<crate::types::MemberAccountRuleStatus>().ok()
    }
    builder
}

pub(crate) fn organization_aggregation_source_correct_errors(
    mut builder: crate::types::builders::OrganizationAggregationSourceBuilder,
) -> crate::types::builders::OrganizationAggregationSourceBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn organization_config_rule_correct_errors(
    mut builder: crate::types::builders::OrganizationConfigRuleBuilder,
) -> crate::types::builders::OrganizationConfigRuleBuilder {
    if builder.organization_config_rule_name.is_none() {
        builder.organization_config_rule_name = Some(Default::default())
    }
    if builder.organization_config_rule_arn.is_none() {
        builder.organization_config_rule_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn organization_config_rule_status_correct_errors(
    mut builder: crate::types::builders::OrganizationConfigRuleStatusBuilder,
) -> crate::types::builders::OrganizationConfigRuleStatusBuilder {
    if builder.organization_config_rule_name.is_none() {
        builder.organization_config_rule_name = Some(Default::default())
    }
    if builder.organization_rule_status.is_none() {
        builder.organization_rule_status = "no value was set".parse::<crate::types::OrganizationRuleStatus>().ok()
    }
    builder
}

pub(crate) fn organization_conformance_pack_correct_errors(
    mut builder: crate::types::builders::OrganizationConformancePackBuilder,
) -> crate::types::builders::OrganizationConformancePackBuilder {
    if builder.organization_conformance_pack_name.is_none() {
        builder.organization_conformance_pack_name = Some(Default::default())
    }
    if builder.organization_conformance_pack_arn.is_none() {
        builder.organization_conformance_pack_arn = Some(Default::default())
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn organization_conformance_pack_detailed_status_correct_errors(
    mut builder: crate::types::builders::OrganizationConformancePackDetailedStatusBuilder,
) -> crate::types::builders::OrganizationConformancePackDetailedStatusBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.conformance_pack_name.is_none() {
        builder.conformance_pack_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::OrganizationResourceDetailedStatus>().ok()
    }
    builder
}

pub(crate) fn organization_conformance_pack_status_correct_errors(
    mut builder: crate::types::builders::OrganizationConformancePackStatusBuilder,
) -> crate::types::builders::OrganizationConformancePackStatusBuilder {
    if builder.organization_conformance_pack_name.is_none() {
        builder.organization_conformance_pack_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::OrganizationResourceStatus>().ok()
    }
    builder
}

pub(crate) fn remediation_configuration_correct_errors(
    mut builder: crate::types::builders::RemediationConfigurationBuilder,
) -> crate::types::builders::RemediationConfigurationBuilder {
    if builder.config_rule_name.is_none() {
        builder.config_rule_name = Some(Default::default())
    }
    if builder.target_type.is_none() {
        builder.target_type = "no value was set".parse::<crate::types::RemediationTargetType>().ok()
    }
    if builder.target_id.is_none() {
        builder.target_id = Some(Default::default())
    }
    builder
}

pub(crate) fn remediation_exception_correct_errors(
    mut builder: crate::types::builders::RemediationExceptionBuilder,
) -> crate::types::builders::RemediationExceptionBuilder {
    if builder.config_rule_name.is_none() {
        builder.config_rule_name = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_key_correct_errors(mut builder: crate::types::builders::ResourceKeyBuilder) -> crate::types::builders::ResourceKeyBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    builder
}

pub(crate) fn stored_query_metadata_correct_errors(
    mut builder: crate::types::builders::StoredQueryMetadataBuilder,
) -> crate::types::builders::StoredQueryMetadataBuilder {
    if builder.query_id.is_none() {
        builder.query_id = Some(Default::default())
    }
    if builder.query_arn.is_none() {
        builder.query_arn = Some(Default::default())
    }
    if builder.query_name.is_none() {
        builder.query_name = Some(Default::default())
    }
    builder
}

pub(crate) fn account_aggregation_source_correct_errors(
    mut builder: crate::types::builders::AccountAggregationSourceBuilder,
) -> crate::types::builders::AccountAggregationSourceBuilder {
    if builder.account_ids.is_none() {
        builder.account_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn organization_custom_rule_metadata_correct_errors(
    mut builder: crate::types::builders::OrganizationCustomRuleMetadataBuilder,
) -> crate::types::builders::OrganizationCustomRuleMetadataBuilder {
    if builder.lambda_function_arn.is_none() {
        builder.lambda_function_arn = Some(Default::default())
    }
    if builder.organization_config_rule_trigger_types.is_none() {
        builder.organization_config_rule_trigger_types = Some(Default::default())
    }
    builder
}

pub(crate) fn organization_managed_rule_metadata_correct_errors(
    mut builder: crate::types::builders::OrganizationManagedRuleMetadataBuilder,
) -> crate::types::builders::OrganizationManagedRuleMetadataBuilder {
    if builder.rule_identifier.is_none() {
        builder.rule_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn source_correct_errors(mut builder: crate::types::builders::SourceBuilder) -> crate::types::builders::SourceBuilder {
    if builder.owner.is_none() {
        builder.owner = "no value was set".parse::<crate::types::Owner>().ok()
    }
    builder
}

pub(crate) fn template_ssm_document_details_correct_errors(
    mut builder: crate::types::builders::TemplateSsmDocumentDetailsBuilder,
) -> crate::types::builders::TemplateSsmDocumentDetailsBuilder {
    if builder.document_name.is_none() {
        builder.document_name = Some(Default::default())
    }
    builder
}

pub(crate) fn conformance_pack_input_parameter_correct_errors(
    mut builder: crate::types::builders::ConformancePackInputParameterBuilder,
) -> crate::types::builders::ConformancePackInputParameterBuilder {
    if builder.parameter_name.is_none() {
        builder.parameter_name = Some(Default::default())
    }
    if builder.parameter_value.is_none() {
        builder.parameter_value = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_policy_details_correct_errors(
    mut builder: crate::types::builders::CustomPolicyDetailsBuilder,
) -> crate::types::builders::CustomPolicyDetailsBuilder {
    if builder.policy_runtime.is_none() {
        builder.policy_runtime = Some(Default::default())
    }
    if builder.policy_text.is_none() {
        builder.policy_text = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_value_correct_errors(
    mut builder: crate::types::builders::ResourceValueBuilder,
) -> crate::types::builders::ResourceValueBuilder {
    if builder.value.is_none() {
        builder.value = "no value was set".parse::<crate::types::ResourceValueType>().ok()
    }
    builder
}

pub(crate) fn static_value_correct_errors(mut builder: crate::types::builders::StaticValueBuilder) -> crate::types::builders::StaticValueBuilder {
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}
