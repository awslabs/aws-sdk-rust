// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_conformance_pack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_conformance_pack::PutConformancePackInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.conformance_pack_name {
        object.key("ConformancePackName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.template_s3_uri {
        object.key("TemplateS3Uri").string(var_2.as_str());
    }
    if let Some(var_3) = &input.template_body {
        object.key("TemplateBody").string(var_3.as_str());
    }
    if let Some(var_4) = &input.delivery_s3_bucket {
        object.key("DeliveryS3Bucket").string(var_4.as_str());
    }
    if let Some(var_5) = &input.delivery_s3_key_prefix {
        object.key("DeliveryS3KeyPrefix").string(var_5.as_str());
    }
    if let Some(var_6) = &input.conformance_pack_input_parameters {
        let mut array_7 = object.key("ConformancePackInputParameters").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_conformance_pack_input_parameter::ser_conformance_pack_input_parameter(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.template_ssm_document_details {
        #[allow(unused_mut)]
        let mut object_11 = object.key("TemplateSSMDocumentDetails").start_object();
        crate::protocol_serde::shape_template_ssm_document_details::ser_template_ssm_document_details(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
