// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_batch_write_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BatchWriteOperation,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.create_object {
        #[allow(unused_mut)]
        let mut object_2 = object.key("CreateObject").start_object();
        crate::protocol_serde::shape_batch_create_object::ser_batch_create_object(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.attach_object {
        #[allow(unused_mut)]
        let mut object_4 = object.key("AttachObject").start_object();
        crate::protocol_serde::shape_batch_attach_object::ser_batch_attach_object(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.detach_object {
        #[allow(unused_mut)]
        let mut object_6 = object.key("DetachObject").start_object();
        crate::protocol_serde::shape_batch_detach_object::ser_batch_detach_object(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.update_object_attributes {
        #[allow(unused_mut)]
        let mut object_8 = object.key("UpdateObjectAttributes").start_object();
        crate::protocol_serde::shape_batch_update_object_attributes::ser_batch_update_object_attributes(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.delete_object {
        #[allow(unused_mut)]
        let mut object_10 = object.key("DeleteObject").start_object();
        crate::protocol_serde::shape_batch_delete_object::ser_batch_delete_object(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.add_facet_to_object {
        #[allow(unused_mut)]
        let mut object_12 = object.key("AddFacetToObject").start_object();
        crate::protocol_serde::shape_batch_add_facet_to_object::ser_batch_add_facet_to_object(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.remove_facet_from_object {
        #[allow(unused_mut)]
        let mut object_14 = object.key("RemoveFacetFromObject").start_object();
        crate::protocol_serde::shape_batch_remove_facet_from_object::ser_batch_remove_facet_from_object(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.attach_policy {
        #[allow(unused_mut)]
        let mut object_16 = object.key("AttachPolicy").start_object();
        crate::protocol_serde::shape_batch_attach_policy::ser_batch_attach_policy(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.detach_policy {
        #[allow(unused_mut)]
        let mut object_18 = object.key("DetachPolicy").start_object();
        crate::protocol_serde::shape_batch_detach_policy::ser_batch_detach_policy(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if let Some(var_19) = &input.create_index {
        #[allow(unused_mut)]
        let mut object_20 = object.key("CreateIndex").start_object();
        crate::protocol_serde::shape_batch_create_index::ser_batch_create_index(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    if let Some(var_21) = &input.attach_to_index {
        #[allow(unused_mut)]
        let mut object_22 = object.key("AttachToIndex").start_object();
        crate::protocol_serde::shape_batch_attach_to_index::ser_batch_attach_to_index(
            &mut object_22,
            var_21,
        )?;
        object_22.finish();
    }
    if let Some(var_23) = &input.detach_from_index {
        #[allow(unused_mut)]
        let mut object_24 = object.key("DetachFromIndex").start_object();
        crate::protocol_serde::shape_batch_detach_from_index::ser_batch_detach_from_index(
            &mut object_24,
            var_23,
        )?;
        object_24.finish();
    }
    if let Some(var_25) = &input.attach_typed_link {
        #[allow(unused_mut)]
        let mut object_26 = object.key("AttachTypedLink").start_object();
        crate::protocol_serde::shape_batch_attach_typed_link::ser_batch_attach_typed_link(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.detach_typed_link {
        #[allow(unused_mut)]
        let mut object_28 = object.key("DetachTypedLink").start_object();
        crate::protocol_serde::shape_batch_detach_typed_link::ser_batch_detach_typed_link(
            &mut object_28,
            var_27,
        )?;
        object_28.finish();
    }
    if let Some(var_29) = &input.update_link_attributes {
        #[allow(unused_mut)]
        let mut object_30 = object.key("UpdateLinkAttributes").start_object();
        crate::protocol_serde::shape_batch_update_link_attributes::ser_batch_update_link_attributes(&mut object_30, var_29)?;
        object_30.finish();
    }
    Ok(())
}
