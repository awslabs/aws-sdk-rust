// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_outgoing_typed_links_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_outgoing_typed_links::ListOutgoingTypedLinksInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.consistency_level {
        object.key("ConsistencyLevel").string(var_1.as_str());
    }
    if let Some(var_2) = &input.filter_attribute_ranges {
        let mut array_3 = object.key("FilterAttributeRanges").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_typed_link_attribute_range::ser_typed_link_attribute_range(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.filter_typed_link {
        #[allow(unused_mut)]
        let mut object_7 = object.key("FilterTypedLink").start_object();
        crate::protocol_serde::shape_typed_link_schema_and_facet_name::ser_typed_link_schema_and_facet_name(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.next_token {
        object.key("NextToken").string(var_9.as_str());
    }
    if let Some(var_10) = &input.object_reference {
        #[allow(unused_mut)]
        let mut object_11 = object.key("ObjectReference").start_object();
        crate::protocol_serde::shape_object_reference::ser_object_reference(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    Ok(())
}
