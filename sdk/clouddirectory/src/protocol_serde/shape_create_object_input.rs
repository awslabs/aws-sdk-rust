// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_object_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_object::CreateObjectInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.link_name {
        object.key("LinkName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.object_attribute_list {
        let mut array_3 = object.key("ObjectAttributeList").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_attribute_key_and_value::ser_attribute_key_and_value(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.parent_reference {
        #[allow(unused_mut)]
        let mut object_7 = object.key("ParentReference").start_object();
        crate::protocol_serde::shape_object_reference::ser_object_reference(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.schema_facets {
        let mut array_9 = object.key("SchemaFacets").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_schema_facet::ser_schema_facet(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
