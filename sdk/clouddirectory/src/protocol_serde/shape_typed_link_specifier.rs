// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_typed_link_specifier<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::TypedLinkSpecifier>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TypedLinkSpecifierBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "TypedLinkFacet" => {
                                builder = builder.set_typed_link_facet(
                                    crate::protocol_serde::shape_typed_link_schema_and_facet_name::de_typed_link_schema_and_facet_name(tokens)?
                                );
                            }
                            "SourceObjectReference" => {
                                builder = builder.set_source_object_reference(
                                    crate::protocol_serde::shape_object_reference::de_object_reference(tokens)?
                                );
                            }
                            "TargetObjectReference" => {
                                builder = builder.set_target_object_reference(
                                    crate::protocol_serde::shape_object_reference::de_object_reference(tokens)?
                                );
                            }
                            "IdentityAttributeValues" => {
                                builder = builder.set_identity_attribute_values(
                                    crate::protocol_serde::shape_attribute_name_and_value_list::de_attribute_name_and_value_list(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}

pub fn ser_typed_link_specifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TypedLinkSpecifier,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.typed_link_facet {
        #[allow(unused_mut)]
        let mut object_2 = object.key("TypedLinkFacet").start_object();
        crate::protocol_serde::shape_typed_link_schema_and_facet_name::ser_typed_link_schema_and_facet_name(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.source_object_reference {
        #[allow(unused_mut)]
        let mut object_4 = object.key("SourceObjectReference").start_object();
        crate::protocol_serde::shape_object_reference::ser_object_reference(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.target_object_reference {
        #[allow(unused_mut)]
        let mut object_6 = object.key("TargetObjectReference").start_object();
        crate::protocol_serde::shape_object_reference::ser_object_reference(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.identity_attribute_values {
        let mut array_8 = object.key("IdentityAttributeValues").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_attribute_name_and_value::ser_attribute_name_and_value(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}
