// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_batch_create_object(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BatchCreateObject,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        let mut array_1 = object.key("SchemaFacet").start_array();
        for item_2 in &input.schema_facet {
            {
                #[allow(unused_mut)]
                let mut object_3 = array_1.value().start_object();
                crate::protocol_serde::shape_schema_facet::ser_schema_facet(&mut object_3, item_2)?;
                object_3.finish();
            }
        }
        array_1.finish();
    }
    {
        let mut array_4 = object.key("ObjectAttributeList").start_array();
        for item_5 in &input.object_attribute_list {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_attribute_key_and_value::ser_attribute_key_and_value(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.parent_reference {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ParentReference").start_object();
        crate::protocol_serde::shape_object_reference::ser_object_reference(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.link_name {
        object.key("LinkName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.batch_reference_name {
        object.key("BatchReferenceName").string(var_10.as_str());
    }
    Ok(())
}
