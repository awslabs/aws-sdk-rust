// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AddFacetToObject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`add_facet_to_object`](crate::client::fluent_builders::AddFacetToObject).
///
/// `ParseStrictResponse` impl for `AddFacetToObject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AddFacetToObject {
    _private: (),
}
impl AddFacetToObject {
    /// Creates a new builder-style object to manufacture [`AddFacetToObjectInput`](crate::input::AddFacetToObjectInput).
    pub fn builder() -> crate::input::add_facet_to_object_input::Builder {
        crate::input::add_facet_to_object_input::Builder::default()
    }
    /// Creates a new `AddFacetToObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AddFacetToObject {
    type Output = std::result::Result<
        crate::output::AddFacetToObjectOutput,
        crate::error::AddFacetToObjectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_add_facet_to_object::de_add_facet_to_object_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_add_facet_to_object::de_add_facet_to_object_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ApplySchema`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`apply_schema`](crate::client::fluent_builders::ApplySchema).
///
/// `ParseStrictResponse` impl for `ApplySchema`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ApplySchema {
    _private: (),
}
impl ApplySchema {
    /// Creates a new builder-style object to manufacture [`ApplySchemaInput`](crate::input::ApplySchemaInput).
    pub fn builder() -> crate::input::apply_schema_input::Builder {
        crate::input::apply_schema_input::Builder::default()
    }
    /// Creates a new `ApplySchema` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ApplySchema {
    type Output =
        std::result::Result<crate::output::ApplySchemaOutput, crate::error::ApplySchemaError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_apply_schema::de_apply_schema_http_error(response)
        } else {
            crate::protocol_serde::shape_apply_schema::de_apply_schema_http_response(response)
        }
    }
}

/// Operation shape for `AttachObject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`attach_object`](crate::client::fluent_builders::AttachObject).
///
/// `ParseStrictResponse` impl for `AttachObject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AttachObject {
    _private: (),
}
impl AttachObject {
    /// Creates a new builder-style object to manufacture [`AttachObjectInput`](crate::input::AttachObjectInput).
    pub fn builder() -> crate::input::attach_object_input::Builder {
        crate::input::attach_object_input::Builder::default()
    }
    /// Creates a new `AttachObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AttachObject {
    type Output =
        std::result::Result<crate::output::AttachObjectOutput, crate::error::AttachObjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_attach_object::de_attach_object_http_error(response)
        } else {
            crate::protocol_serde::shape_attach_object::de_attach_object_http_response(response)
        }
    }
}

/// Operation shape for `AttachPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`attach_policy`](crate::client::fluent_builders::AttachPolicy).
///
/// `ParseStrictResponse` impl for `AttachPolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AttachPolicy {
    _private: (),
}
impl AttachPolicy {
    /// Creates a new builder-style object to manufacture [`AttachPolicyInput`](crate::input::AttachPolicyInput).
    pub fn builder() -> crate::input::attach_policy_input::Builder {
        crate::input::attach_policy_input::Builder::default()
    }
    /// Creates a new `AttachPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AttachPolicy {
    type Output =
        std::result::Result<crate::output::AttachPolicyOutput, crate::error::AttachPolicyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_attach_policy::de_attach_policy_http_error(response)
        } else {
            crate::protocol_serde::shape_attach_policy::de_attach_policy_http_response(response)
        }
    }
}

/// Operation shape for `AttachToIndex`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`attach_to_index`](crate::client::fluent_builders::AttachToIndex).
///
/// `ParseStrictResponse` impl for `AttachToIndex`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AttachToIndex {
    _private: (),
}
impl AttachToIndex {
    /// Creates a new builder-style object to manufacture [`AttachToIndexInput`](crate::input::AttachToIndexInput).
    pub fn builder() -> crate::input::attach_to_index_input::Builder {
        crate::input::attach_to_index_input::Builder::default()
    }
    /// Creates a new `AttachToIndex` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AttachToIndex {
    type Output =
        std::result::Result<crate::output::AttachToIndexOutput, crate::error::AttachToIndexError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_attach_to_index::de_attach_to_index_http_error(response)
        } else {
            crate::protocol_serde::shape_attach_to_index::de_attach_to_index_http_response(response)
        }
    }
}

/// Operation shape for `AttachTypedLink`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`attach_typed_link`](crate::client::fluent_builders::AttachTypedLink).
///
/// `ParseStrictResponse` impl for `AttachTypedLink`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AttachTypedLink {
    _private: (),
}
impl AttachTypedLink {
    /// Creates a new builder-style object to manufacture [`AttachTypedLinkInput`](crate::input::AttachTypedLinkInput).
    pub fn builder() -> crate::input::attach_typed_link_input::Builder {
        crate::input::attach_typed_link_input::Builder::default()
    }
    /// Creates a new `AttachTypedLink` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AttachTypedLink {
    type Output = std::result::Result<
        crate::output::AttachTypedLinkOutput,
        crate::error::AttachTypedLinkError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_attach_typed_link::de_attach_typed_link_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_attach_typed_link::de_attach_typed_link_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `BatchRead`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_read`](crate::client::fluent_builders::BatchRead).
///
/// `ParseStrictResponse` impl for `BatchRead`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchRead {
    _private: (),
}
impl BatchRead {
    /// Creates a new builder-style object to manufacture [`BatchReadInput`](crate::input::BatchReadInput).
    pub fn builder() -> crate::input::batch_read_input::Builder {
        crate::input::batch_read_input::Builder::default()
    }
    /// Creates a new `BatchRead` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchRead {
    type Output = std::result::Result<crate::output::BatchReadOutput, crate::error::BatchReadError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_read::de_batch_read_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_read::de_batch_read_http_response(response)
        }
    }
}

/// Operation shape for `BatchWrite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_write`](crate::client::fluent_builders::BatchWrite).
///
/// `ParseStrictResponse` impl for `BatchWrite`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchWrite {
    _private: (),
}
impl BatchWrite {
    /// Creates a new builder-style object to manufacture [`BatchWriteInput`](crate::input::BatchWriteInput).
    pub fn builder() -> crate::input::batch_write_input::Builder {
        crate::input::batch_write_input::Builder::default()
    }
    /// Creates a new `BatchWrite` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchWrite {
    type Output =
        std::result::Result<crate::output::BatchWriteOutput, crate::error::BatchWriteError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_write::de_batch_write_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_write::de_batch_write_http_response(response)
        }
    }
}

/// Operation shape for `CreateDirectory`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_directory`](crate::client::fluent_builders::CreateDirectory).
///
/// `ParseStrictResponse` impl for `CreateDirectory`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateDirectory {
    _private: (),
}
impl CreateDirectory {
    /// Creates a new builder-style object to manufacture [`CreateDirectoryInput`](crate::input::CreateDirectoryInput).
    pub fn builder() -> crate::input::create_directory_input::Builder {
        crate::input::create_directory_input::Builder::default()
    }
    /// Creates a new `CreateDirectory` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateDirectory {
    type Output = std::result::Result<
        crate::output::CreateDirectoryOutput,
        crate::error::CreateDirectoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_directory::de_create_directory_http_error(response)
        } else {
            crate::protocol_serde::shape_create_directory::de_create_directory_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateFacet`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_facet`](crate::client::fluent_builders::CreateFacet).
///
/// `ParseStrictResponse` impl for `CreateFacet`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateFacet {
    _private: (),
}
impl CreateFacet {
    /// Creates a new builder-style object to manufacture [`CreateFacetInput`](crate::input::CreateFacetInput).
    pub fn builder() -> crate::input::create_facet_input::Builder {
        crate::input::create_facet_input::Builder::default()
    }
    /// Creates a new `CreateFacet` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateFacet {
    type Output =
        std::result::Result<crate::output::CreateFacetOutput, crate::error::CreateFacetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_facet::de_create_facet_http_error(response)
        } else {
            crate::protocol_serde::shape_create_facet::de_create_facet_http_response(response)
        }
    }
}

/// Operation shape for `CreateIndex`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_index`](crate::client::fluent_builders::CreateIndex).
///
/// `ParseStrictResponse` impl for `CreateIndex`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateIndex {
    _private: (),
}
impl CreateIndex {
    /// Creates a new builder-style object to manufacture [`CreateIndexInput`](crate::input::CreateIndexInput).
    pub fn builder() -> crate::input::create_index_input::Builder {
        crate::input::create_index_input::Builder::default()
    }
    /// Creates a new `CreateIndex` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateIndex {
    type Output =
        std::result::Result<crate::output::CreateIndexOutput, crate::error::CreateIndexError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_index::de_create_index_http_error(response)
        } else {
            crate::protocol_serde::shape_create_index::de_create_index_http_response(response)
        }
    }
}

/// Operation shape for `CreateObject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_object`](crate::client::fluent_builders::CreateObject).
///
/// `ParseStrictResponse` impl for `CreateObject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateObject {
    _private: (),
}
impl CreateObject {
    /// Creates a new builder-style object to manufacture [`CreateObjectInput`](crate::input::CreateObjectInput).
    pub fn builder() -> crate::input::create_object_input::Builder {
        crate::input::create_object_input::Builder::default()
    }
    /// Creates a new `CreateObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateObject {
    type Output =
        std::result::Result<crate::output::CreateObjectOutput, crate::error::CreateObjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_object::de_create_object_http_error(response)
        } else {
            crate::protocol_serde::shape_create_object::de_create_object_http_response(response)
        }
    }
}

/// Operation shape for `CreateSchema`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_schema`](crate::client::fluent_builders::CreateSchema).
///
/// `ParseStrictResponse` impl for `CreateSchema`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateSchema {
    _private: (),
}
impl CreateSchema {
    /// Creates a new builder-style object to manufacture [`CreateSchemaInput`](crate::input::CreateSchemaInput).
    pub fn builder() -> crate::input::create_schema_input::Builder {
        crate::input::create_schema_input::Builder::default()
    }
    /// Creates a new `CreateSchema` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateSchema {
    type Output =
        std::result::Result<crate::output::CreateSchemaOutput, crate::error::CreateSchemaError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_schema::de_create_schema_http_error(response)
        } else {
            crate::protocol_serde::shape_create_schema::de_create_schema_http_response(response)
        }
    }
}

/// Operation shape for `CreateTypedLinkFacet`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_typed_link_facet`](crate::client::fluent_builders::CreateTypedLinkFacet).
///
/// `ParseStrictResponse` impl for `CreateTypedLinkFacet`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateTypedLinkFacet {
    _private: (),
}
impl CreateTypedLinkFacet {
    /// Creates a new builder-style object to manufacture [`CreateTypedLinkFacetInput`](crate::input::CreateTypedLinkFacetInput).
    pub fn builder() -> crate::input::create_typed_link_facet_input::Builder {
        crate::input::create_typed_link_facet_input::Builder::default()
    }
    /// Creates a new `CreateTypedLinkFacet` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateTypedLinkFacet {
    type Output = std::result::Result<
        crate::output::CreateTypedLinkFacetOutput,
        crate::error::CreateTypedLinkFacetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_typed_link_facet::de_create_typed_link_facet_http_error(response)
        } else {
            crate::protocol_serde::shape_create_typed_link_facet::de_create_typed_link_facet_http_response(response)
        }
    }
}

/// Operation shape for `DeleteDirectory`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_directory`](crate::client::fluent_builders::DeleteDirectory).
///
/// `ParseStrictResponse` impl for `DeleteDirectory`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteDirectory {
    _private: (),
}
impl DeleteDirectory {
    /// Creates a new builder-style object to manufacture [`DeleteDirectoryInput`](crate::input::DeleteDirectoryInput).
    pub fn builder() -> crate::input::delete_directory_input::Builder {
        crate::input::delete_directory_input::Builder::default()
    }
    /// Creates a new `DeleteDirectory` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteDirectory {
    type Output = std::result::Result<
        crate::output::DeleteDirectoryOutput,
        crate::error::DeleteDirectoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_directory::de_delete_directory_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_directory::de_delete_directory_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteFacet`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_facet`](crate::client::fluent_builders::DeleteFacet).
///
/// `ParseStrictResponse` impl for `DeleteFacet`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteFacet {
    _private: (),
}
impl DeleteFacet {
    /// Creates a new builder-style object to manufacture [`DeleteFacetInput`](crate::input::DeleteFacetInput).
    pub fn builder() -> crate::input::delete_facet_input::Builder {
        crate::input::delete_facet_input::Builder::default()
    }
    /// Creates a new `DeleteFacet` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteFacet {
    type Output =
        std::result::Result<crate::output::DeleteFacetOutput, crate::error::DeleteFacetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_facet::de_delete_facet_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_facet::de_delete_facet_http_response(response)
        }
    }
}

/// Operation shape for `DeleteObject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_object`](crate::client::fluent_builders::DeleteObject).
///
/// `ParseStrictResponse` impl for `DeleteObject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteObject {
    _private: (),
}
impl DeleteObject {
    /// Creates a new builder-style object to manufacture [`DeleteObjectInput`](crate::input::DeleteObjectInput).
    pub fn builder() -> crate::input::delete_object_input::Builder {
        crate::input::delete_object_input::Builder::default()
    }
    /// Creates a new `DeleteObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteObject {
    type Output =
        std::result::Result<crate::output::DeleteObjectOutput, crate::error::DeleteObjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_object::de_delete_object_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_object::de_delete_object_http_response(response)
        }
    }
}

/// Operation shape for `DeleteSchema`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_schema`](crate::client::fluent_builders::DeleteSchema).
///
/// `ParseStrictResponse` impl for `DeleteSchema`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteSchema {
    _private: (),
}
impl DeleteSchema {
    /// Creates a new builder-style object to manufacture [`DeleteSchemaInput`](crate::input::DeleteSchemaInput).
    pub fn builder() -> crate::input::delete_schema_input::Builder {
        crate::input::delete_schema_input::Builder::default()
    }
    /// Creates a new `DeleteSchema` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSchema {
    type Output =
        std::result::Result<crate::output::DeleteSchemaOutput, crate::error::DeleteSchemaError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_schema::de_delete_schema_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_schema::de_delete_schema_http_response(response)
        }
    }
}

/// Operation shape for `DeleteTypedLinkFacet`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_typed_link_facet`](crate::client::fluent_builders::DeleteTypedLinkFacet).
///
/// `ParseStrictResponse` impl for `DeleteTypedLinkFacet`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteTypedLinkFacet {
    _private: (),
}
impl DeleteTypedLinkFacet {
    /// Creates a new builder-style object to manufacture [`DeleteTypedLinkFacetInput`](crate::input::DeleteTypedLinkFacetInput).
    pub fn builder() -> crate::input::delete_typed_link_facet_input::Builder {
        crate::input::delete_typed_link_facet_input::Builder::default()
    }
    /// Creates a new `DeleteTypedLinkFacet` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteTypedLinkFacet {
    type Output = std::result::Result<
        crate::output::DeleteTypedLinkFacetOutput,
        crate::error::DeleteTypedLinkFacetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_typed_link_facet::de_delete_typed_link_facet_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_typed_link_facet::de_delete_typed_link_facet_http_response(response)
        }
    }
}

/// Operation shape for `DetachFromIndex`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`detach_from_index`](crate::client::fluent_builders::DetachFromIndex).
///
/// `ParseStrictResponse` impl for `DetachFromIndex`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DetachFromIndex {
    _private: (),
}
impl DetachFromIndex {
    /// Creates a new builder-style object to manufacture [`DetachFromIndexInput`](crate::input::DetachFromIndexInput).
    pub fn builder() -> crate::input::detach_from_index_input::Builder {
        crate::input::detach_from_index_input::Builder::default()
    }
    /// Creates a new `DetachFromIndex` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DetachFromIndex {
    type Output = std::result::Result<
        crate::output::DetachFromIndexOutput,
        crate::error::DetachFromIndexError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_detach_from_index::de_detach_from_index_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_detach_from_index::de_detach_from_index_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DetachObject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`detach_object`](crate::client::fluent_builders::DetachObject).
///
/// `ParseStrictResponse` impl for `DetachObject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DetachObject {
    _private: (),
}
impl DetachObject {
    /// Creates a new builder-style object to manufacture [`DetachObjectInput`](crate::input::DetachObjectInput).
    pub fn builder() -> crate::input::detach_object_input::Builder {
        crate::input::detach_object_input::Builder::default()
    }
    /// Creates a new `DetachObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DetachObject {
    type Output =
        std::result::Result<crate::output::DetachObjectOutput, crate::error::DetachObjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_detach_object::de_detach_object_http_error(response)
        } else {
            crate::protocol_serde::shape_detach_object::de_detach_object_http_response(response)
        }
    }
}

/// Operation shape for `DetachPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`detach_policy`](crate::client::fluent_builders::DetachPolicy).
///
/// `ParseStrictResponse` impl for `DetachPolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DetachPolicy {
    _private: (),
}
impl DetachPolicy {
    /// Creates a new builder-style object to manufacture [`DetachPolicyInput`](crate::input::DetachPolicyInput).
    pub fn builder() -> crate::input::detach_policy_input::Builder {
        crate::input::detach_policy_input::Builder::default()
    }
    /// Creates a new `DetachPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DetachPolicy {
    type Output =
        std::result::Result<crate::output::DetachPolicyOutput, crate::error::DetachPolicyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_detach_policy::de_detach_policy_http_error(response)
        } else {
            crate::protocol_serde::shape_detach_policy::de_detach_policy_http_response(response)
        }
    }
}

/// Operation shape for `DetachTypedLink`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`detach_typed_link`](crate::client::fluent_builders::DetachTypedLink).
///
/// `ParseStrictResponse` impl for `DetachTypedLink`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DetachTypedLink {
    _private: (),
}
impl DetachTypedLink {
    /// Creates a new builder-style object to manufacture [`DetachTypedLinkInput`](crate::input::DetachTypedLinkInput).
    pub fn builder() -> crate::input::detach_typed_link_input::Builder {
        crate::input::detach_typed_link_input::Builder::default()
    }
    /// Creates a new `DetachTypedLink` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DetachTypedLink {
    type Output = std::result::Result<
        crate::output::DetachTypedLinkOutput,
        crate::error::DetachTypedLinkError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_detach_typed_link::de_detach_typed_link_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_detach_typed_link::de_detach_typed_link_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DisableDirectory`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disable_directory`](crate::client::fluent_builders::DisableDirectory).
///
/// `ParseStrictResponse` impl for `DisableDirectory`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisableDirectory {
    _private: (),
}
impl DisableDirectory {
    /// Creates a new builder-style object to manufacture [`DisableDirectoryInput`](crate::input::DisableDirectoryInput).
    pub fn builder() -> crate::input::disable_directory_input::Builder {
        crate::input::disable_directory_input::Builder::default()
    }
    /// Creates a new `DisableDirectory` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisableDirectory {
    type Output = std::result::Result<
        crate::output::DisableDirectoryOutput,
        crate::error::DisableDirectoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disable_directory::de_disable_directory_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_disable_directory::de_disable_directory_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `EnableDirectory`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`enable_directory`](crate::client::fluent_builders::EnableDirectory).
///
/// `ParseStrictResponse` impl for `EnableDirectory`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct EnableDirectory {
    _private: (),
}
impl EnableDirectory {
    /// Creates a new builder-style object to manufacture [`EnableDirectoryInput`](crate::input::EnableDirectoryInput).
    pub fn builder() -> crate::input::enable_directory_input::Builder {
        crate::input::enable_directory_input::Builder::default()
    }
    /// Creates a new `EnableDirectory` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for EnableDirectory {
    type Output = std::result::Result<
        crate::output::EnableDirectoryOutput,
        crate::error::EnableDirectoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_enable_directory::de_enable_directory_http_error(response)
        } else {
            crate::protocol_serde::shape_enable_directory::de_enable_directory_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetAppliedSchemaVersion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_applied_schema_version`](crate::client::fluent_builders::GetAppliedSchemaVersion).
///
/// `ParseStrictResponse` impl for `GetAppliedSchemaVersion`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetAppliedSchemaVersion {
    _private: (),
}
impl GetAppliedSchemaVersion {
    /// Creates a new builder-style object to manufacture [`GetAppliedSchemaVersionInput`](crate::input::GetAppliedSchemaVersionInput).
    pub fn builder() -> crate::input::get_applied_schema_version_input::Builder {
        crate::input::get_applied_schema_version_input::Builder::default()
    }
    /// Creates a new `GetAppliedSchemaVersion` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetAppliedSchemaVersion {
    type Output = std::result::Result<
        crate::output::GetAppliedSchemaVersionOutput,
        crate::error::GetAppliedSchemaVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_applied_schema_version::de_get_applied_schema_version_http_error(response)
        } else {
            crate::protocol_serde::shape_get_applied_schema_version::de_get_applied_schema_version_http_response(response)
        }
    }
}

/// Operation shape for `GetDirectory`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_directory`](crate::client::fluent_builders::GetDirectory).
///
/// `ParseStrictResponse` impl for `GetDirectory`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetDirectory {
    _private: (),
}
impl GetDirectory {
    /// Creates a new builder-style object to manufacture [`GetDirectoryInput`](crate::input::GetDirectoryInput).
    pub fn builder() -> crate::input::get_directory_input::Builder {
        crate::input::get_directory_input::Builder::default()
    }
    /// Creates a new `GetDirectory` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetDirectory {
    type Output =
        std::result::Result<crate::output::GetDirectoryOutput, crate::error::GetDirectoryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_directory::de_get_directory_http_error(response)
        } else {
            crate::protocol_serde::shape_get_directory::de_get_directory_http_response(response)
        }
    }
}

/// Operation shape for `GetFacet`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_facet`](crate::client::fluent_builders::GetFacet).
///
/// `ParseStrictResponse` impl for `GetFacet`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetFacet {
    _private: (),
}
impl GetFacet {
    /// Creates a new builder-style object to manufacture [`GetFacetInput`](crate::input::GetFacetInput).
    pub fn builder() -> crate::input::get_facet_input::Builder {
        crate::input::get_facet_input::Builder::default()
    }
    /// Creates a new `GetFacet` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetFacet {
    type Output = std::result::Result<crate::output::GetFacetOutput, crate::error::GetFacetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_facet::de_get_facet_http_error(response)
        } else {
            crate::protocol_serde::shape_get_facet::de_get_facet_http_response(response)
        }
    }
}

/// Operation shape for `GetLinkAttributes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_link_attributes`](crate::client::fluent_builders::GetLinkAttributes).
///
/// `ParseStrictResponse` impl for `GetLinkAttributes`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetLinkAttributes {
    _private: (),
}
impl GetLinkAttributes {
    /// Creates a new builder-style object to manufacture [`GetLinkAttributesInput`](crate::input::GetLinkAttributesInput).
    pub fn builder() -> crate::input::get_link_attributes_input::Builder {
        crate::input::get_link_attributes_input::Builder::default()
    }
    /// Creates a new `GetLinkAttributes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetLinkAttributes {
    type Output = std::result::Result<
        crate::output::GetLinkAttributesOutput,
        crate::error::GetLinkAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_link_attributes::de_get_link_attributes_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_link_attributes::de_get_link_attributes_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetObjectAttributes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_object_attributes`](crate::client::fluent_builders::GetObjectAttributes).
///
/// `ParseStrictResponse` impl for `GetObjectAttributes`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetObjectAttributes {
    _private: (),
}
impl GetObjectAttributes {
    /// Creates a new builder-style object to manufacture [`GetObjectAttributesInput`](crate::input::GetObjectAttributesInput).
    pub fn builder() -> crate::input::get_object_attributes_input::Builder {
        crate::input::get_object_attributes_input::Builder::default()
    }
    /// Creates a new `GetObjectAttributes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetObjectAttributes {
    type Output = std::result::Result<
        crate::output::GetObjectAttributesOutput,
        crate::error::GetObjectAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_object_attributes::de_get_object_attributes_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_object_attributes::de_get_object_attributes_http_response(response)
        }
    }
}

/// Operation shape for `GetObjectInformation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_object_information`](crate::client::fluent_builders::GetObjectInformation).
///
/// `ParseStrictResponse` impl for `GetObjectInformation`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetObjectInformation {
    _private: (),
}
impl GetObjectInformation {
    /// Creates a new builder-style object to manufacture [`GetObjectInformationInput`](crate::input::GetObjectInformationInput).
    pub fn builder() -> crate::input::get_object_information_input::Builder {
        crate::input::get_object_information_input::Builder::default()
    }
    /// Creates a new `GetObjectInformation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetObjectInformation {
    type Output = std::result::Result<
        crate::output::GetObjectInformationOutput,
        crate::error::GetObjectInformationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_object_information::de_get_object_information_http_error(response)
        } else {
            crate::protocol_serde::shape_get_object_information::de_get_object_information_http_response(response)
        }
    }
}

/// Operation shape for `GetSchemaAsJson`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_schema_as_json`](crate::client::fluent_builders::GetSchemaAsJson).
///
/// `ParseStrictResponse` impl for `GetSchemaAsJson`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetSchemaAsJson {
    _private: (),
}
impl GetSchemaAsJson {
    /// Creates a new builder-style object to manufacture [`GetSchemaAsJsonInput`](crate::input::GetSchemaAsJsonInput).
    pub fn builder() -> crate::input::get_schema_as_json_input::Builder {
        crate::input::get_schema_as_json_input::Builder::default()
    }
    /// Creates a new `GetSchemaAsJson` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetSchemaAsJson {
    type Output = std::result::Result<
        crate::output::GetSchemaAsJsonOutput,
        crate::error::GetSchemaAsJsonError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_schema_as_json::de_get_schema_as_json_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_schema_as_json::de_get_schema_as_json_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetTypedLinkFacetInformation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_typed_link_facet_information`](crate::client::fluent_builders::GetTypedLinkFacetInformation).
///
/// `ParseStrictResponse` impl for `GetTypedLinkFacetInformation`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetTypedLinkFacetInformation {
    _private: (),
}
impl GetTypedLinkFacetInformation {
    /// Creates a new builder-style object to manufacture [`GetTypedLinkFacetInformationInput`](crate::input::GetTypedLinkFacetInformationInput).
    pub fn builder() -> crate::input::get_typed_link_facet_information_input::Builder {
        crate::input::get_typed_link_facet_information_input::Builder::default()
    }
    /// Creates a new `GetTypedLinkFacetInformation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetTypedLinkFacetInformation {
    type Output = std::result::Result<
        crate::output::GetTypedLinkFacetInformationOutput,
        crate::error::GetTypedLinkFacetInformationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_typed_link_facet_information::de_get_typed_link_facet_information_http_error(response)
        } else {
            crate::protocol_serde::shape_get_typed_link_facet_information::de_get_typed_link_facet_information_http_response(response)
        }
    }
}

/// Operation shape for `ListAppliedSchemaArns`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_applied_schema_arns`](crate::client::fluent_builders::ListAppliedSchemaArns).
///
/// `ParseStrictResponse` impl for `ListAppliedSchemaArns`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAppliedSchemaArns {
    _private: (),
}
impl ListAppliedSchemaArns {
    /// Creates a new builder-style object to manufacture [`ListAppliedSchemaArnsInput`](crate::input::ListAppliedSchemaArnsInput).
    pub fn builder() -> crate::input::list_applied_schema_arns_input::Builder {
        crate::input::list_applied_schema_arns_input::Builder::default()
    }
    /// Creates a new `ListAppliedSchemaArns` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAppliedSchemaArns {
    type Output = std::result::Result<
        crate::output::ListAppliedSchemaArnsOutput,
        crate::error::ListAppliedSchemaArnsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_applied_schema_arns::de_list_applied_schema_arns_http_error(response)
        } else {
            crate::protocol_serde::shape_list_applied_schema_arns::de_list_applied_schema_arns_http_response(response)
        }
    }
}

/// Operation shape for `ListAttachedIndices`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_attached_indices`](crate::client::fluent_builders::ListAttachedIndices).
///
/// `ParseStrictResponse` impl for `ListAttachedIndices`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAttachedIndices {
    _private: (),
}
impl ListAttachedIndices {
    /// Creates a new builder-style object to manufacture [`ListAttachedIndicesInput`](crate::input::ListAttachedIndicesInput).
    pub fn builder() -> crate::input::list_attached_indices_input::Builder {
        crate::input::list_attached_indices_input::Builder::default()
    }
    /// Creates a new `ListAttachedIndices` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAttachedIndices {
    type Output = std::result::Result<
        crate::output::ListAttachedIndicesOutput,
        crate::error::ListAttachedIndicesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_attached_indices::de_list_attached_indices_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_attached_indices::de_list_attached_indices_http_response(response)
        }
    }
}

/// Operation shape for `ListDevelopmentSchemaArns`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_development_schema_arns`](crate::client::fluent_builders::ListDevelopmentSchemaArns).
///
/// `ParseStrictResponse` impl for `ListDevelopmentSchemaArns`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListDevelopmentSchemaArns {
    _private: (),
}
impl ListDevelopmentSchemaArns {
    /// Creates a new builder-style object to manufacture [`ListDevelopmentSchemaArnsInput`](crate::input::ListDevelopmentSchemaArnsInput).
    pub fn builder() -> crate::input::list_development_schema_arns_input::Builder {
        crate::input::list_development_schema_arns_input::Builder::default()
    }
    /// Creates a new `ListDevelopmentSchemaArns` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListDevelopmentSchemaArns {
    type Output = std::result::Result<
        crate::output::ListDevelopmentSchemaArnsOutput,
        crate::error::ListDevelopmentSchemaArnsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_development_schema_arns::de_list_development_schema_arns_http_error(response)
        } else {
            crate::protocol_serde::shape_list_development_schema_arns::de_list_development_schema_arns_http_response(response)
        }
    }
}

/// Operation shape for `ListDirectories`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_directories`](crate::client::fluent_builders::ListDirectories).
///
/// `ParseStrictResponse` impl for `ListDirectories`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListDirectories {
    _private: (),
}
impl ListDirectories {
    /// Creates a new builder-style object to manufacture [`ListDirectoriesInput`](crate::input::ListDirectoriesInput).
    pub fn builder() -> crate::input::list_directories_input::Builder {
        crate::input::list_directories_input::Builder::default()
    }
    /// Creates a new `ListDirectories` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListDirectories {
    type Output = std::result::Result<
        crate::output::ListDirectoriesOutput,
        crate::error::ListDirectoriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_directories::de_list_directories_http_error(response)
        } else {
            crate::protocol_serde::shape_list_directories::de_list_directories_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListFacetAttributes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_facet_attributes`](crate::client::fluent_builders::ListFacetAttributes).
///
/// `ParseStrictResponse` impl for `ListFacetAttributes`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListFacetAttributes {
    _private: (),
}
impl ListFacetAttributes {
    /// Creates a new builder-style object to manufacture [`ListFacetAttributesInput`](crate::input::ListFacetAttributesInput).
    pub fn builder() -> crate::input::list_facet_attributes_input::Builder {
        crate::input::list_facet_attributes_input::Builder::default()
    }
    /// Creates a new `ListFacetAttributes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListFacetAttributes {
    type Output = std::result::Result<
        crate::output::ListFacetAttributesOutput,
        crate::error::ListFacetAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_facet_attributes::de_list_facet_attributes_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_facet_attributes::de_list_facet_attributes_http_response(response)
        }
    }
}

/// Operation shape for `ListFacetNames`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_facet_names`](crate::client::fluent_builders::ListFacetNames).
///
/// `ParseStrictResponse` impl for `ListFacetNames`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListFacetNames {
    _private: (),
}
impl ListFacetNames {
    /// Creates a new builder-style object to manufacture [`ListFacetNamesInput`](crate::input::ListFacetNamesInput).
    pub fn builder() -> crate::input::list_facet_names_input::Builder {
        crate::input::list_facet_names_input::Builder::default()
    }
    /// Creates a new `ListFacetNames` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListFacetNames {
    type Output =
        std::result::Result<crate::output::ListFacetNamesOutput, crate::error::ListFacetNamesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_facet_names::de_list_facet_names_http_error(response)
        } else {
            crate::protocol_serde::shape_list_facet_names::de_list_facet_names_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListIncomingTypedLinks`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_incoming_typed_links`](crate::client::fluent_builders::ListIncomingTypedLinks).
///
/// `ParseStrictResponse` impl for `ListIncomingTypedLinks`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListIncomingTypedLinks {
    _private: (),
}
impl ListIncomingTypedLinks {
    /// Creates a new builder-style object to manufacture [`ListIncomingTypedLinksInput`](crate::input::ListIncomingTypedLinksInput).
    pub fn builder() -> crate::input::list_incoming_typed_links_input::Builder {
        crate::input::list_incoming_typed_links_input::Builder::default()
    }
    /// Creates a new `ListIncomingTypedLinks` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListIncomingTypedLinks {
    type Output = std::result::Result<
        crate::output::ListIncomingTypedLinksOutput,
        crate::error::ListIncomingTypedLinksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_incoming_typed_links::de_list_incoming_typed_links_http_error(response)
        } else {
            crate::protocol_serde::shape_list_incoming_typed_links::de_list_incoming_typed_links_http_response(response)
        }
    }
}

/// Operation shape for `ListIndex`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_index`](crate::client::fluent_builders::ListIndex).
///
/// `ParseStrictResponse` impl for `ListIndex`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListIndex {
    _private: (),
}
impl ListIndex {
    /// Creates a new builder-style object to manufacture [`ListIndexInput`](crate::input::ListIndexInput).
    pub fn builder() -> crate::input::list_index_input::Builder {
        crate::input::list_index_input::Builder::default()
    }
    /// Creates a new `ListIndex` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListIndex {
    type Output = std::result::Result<crate::output::ListIndexOutput, crate::error::ListIndexError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_index::de_list_index_http_error(response)
        } else {
            crate::protocol_serde::shape_list_index::de_list_index_http_response(response)
        }
    }
}

/// Operation shape for `ListManagedSchemaArns`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_managed_schema_arns`](crate::client::fluent_builders::ListManagedSchemaArns).
///
/// `ParseStrictResponse` impl for `ListManagedSchemaArns`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListManagedSchemaArns {
    _private: (),
}
impl ListManagedSchemaArns {
    /// Creates a new builder-style object to manufacture [`ListManagedSchemaArnsInput`](crate::input::ListManagedSchemaArnsInput).
    pub fn builder() -> crate::input::list_managed_schema_arns_input::Builder {
        crate::input::list_managed_schema_arns_input::Builder::default()
    }
    /// Creates a new `ListManagedSchemaArns` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListManagedSchemaArns {
    type Output = std::result::Result<
        crate::output::ListManagedSchemaArnsOutput,
        crate::error::ListManagedSchemaArnsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_managed_schema_arns::de_list_managed_schema_arns_http_error(response)
        } else {
            crate::protocol_serde::shape_list_managed_schema_arns::de_list_managed_schema_arns_http_response(response)
        }
    }
}

/// Operation shape for `ListObjectAttributes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_object_attributes`](crate::client::fluent_builders::ListObjectAttributes).
///
/// `ParseStrictResponse` impl for `ListObjectAttributes`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListObjectAttributes {
    _private: (),
}
impl ListObjectAttributes {
    /// Creates a new builder-style object to manufacture [`ListObjectAttributesInput`](crate::input::ListObjectAttributesInput).
    pub fn builder() -> crate::input::list_object_attributes_input::Builder {
        crate::input::list_object_attributes_input::Builder::default()
    }
    /// Creates a new `ListObjectAttributes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListObjectAttributes {
    type Output = std::result::Result<
        crate::output::ListObjectAttributesOutput,
        crate::error::ListObjectAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_object_attributes::de_list_object_attributes_http_error(response)
        } else {
            crate::protocol_serde::shape_list_object_attributes::de_list_object_attributes_http_response(response)
        }
    }
}

/// Operation shape for `ListObjectChildren`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_object_children`](crate::client::fluent_builders::ListObjectChildren).
///
/// `ParseStrictResponse` impl for `ListObjectChildren`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListObjectChildren {
    _private: (),
}
impl ListObjectChildren {
    /// Creates a new builder-style object to manufacture [`ListObjectChildrenInput`](crate::input::ListObjectChildrenInput).
    pub fn builder() -> crate::input::list_object_children_input::Builder {
        crate::input::list_object_children_input::Builder::default()
    }
    /// Creates a new `ListObjectChildren` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListObjectChildren {
    type Output = std::result::Result<
        crate::output::ListObjectChildrenOutput,
        crate::error::ListObjectChildrenError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_object_children::de_list_object_children_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_object_children::de_list_object_children_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListObjectParentPaths`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_object_parent_paths`](crate::client::fluent_builders::ListObjectParentPaths).
///
/// `ParseStrictResponse` impl for `ListObjectParentPaths`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListObjectParentPaths {
    _private: (),
}
impl ListObjectParentPaths {
    /// Creates a new builder-style object to manufacture [`ListObjectParentPathsInput`](crate::input::ListObjectParentPathsInput).
    pub fn builder() -> crate::input::list_object_parent_paths_input::Builder {
        crate::input::list_object_parent_paths_input::Builder::default()
    }
    /// Creates a new `ListObjectParentPaths` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListObjectParentPaths {
    type Output = std::result::Result<
        crate::output::ListObjectParentPathsOutput,
        crate::error::ListObjectParentPathsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_object_parent_paths::de_list_object_parent_paths_http_error(response)
        } else {
            crate::protocol_serde::shape_list_object_parent_paths::de_list_object_parent_paths_http_response(response)
        }
    }
}

/// Operation shape for `ListObjectParents`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_object_parents`](crate::client::fluent_builders::ListObjectParents).
///
/// `ParseStrictResponse` impl for `ListObjectParents`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListObjectParents {
    _private: (),
}
impl ListObjectParents {
    /// Creates a new builder-style object to manufacture [`ListObjectParentsInput`](crate::input::ListObjectParentsInput).
    pub fn builder() -> crate::input::list_object_parents_input::Builder {
        crate::input::list_object_parents_input::Builder::default()
    }
    /// Creates a new `ListObjectParents` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListObjectParents {
    type Output = std::result::Result<
        crate::output::ListObjectParentsOutput,
        crate::error::ListObjectParentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_object_parents::de_list_object_parents_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_object_parents::de_list_object_parents_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListObjectPolicies`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_object_policies`](crate::client::fluent_builders::ListObjectPolicies).
///
/// `ParseStrictResponse` impl for `ListObjectPolicies`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListObjectPolicies {
    _private: (),
}
impl ListObjectPolicies {
    /// Creates a new builder-style object to manufacture [`ListObjectPoliciesInput`](crate::input::ListObjectPoliciesInput).
    pub fn builder() -> crate::input::list_object_policies_input::Builder {
        crate::input::list_object_policies_input::Builder::default()
    }
    /// Creates a new `ListObjectPolicies` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListObjectPolicies {
    type Output = std::result::Result<
        crate::output::ListObjectPoliciesOutput,
        crate::error::ListObjectPoliciesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_object_policies::de_list_object_policies_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_object_policies::de_list_object_policies_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListOutgoingTypedLinks`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_outgoing_typed_links`](crate::client::fluent_builders::ListOutgoingTypedLinks).
///
/// `ParseStrictResponse` impl for `ListOutgoingTypedLinks`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListOutgoingTypedLinks {
    _private: (),
}
impl ListOutgoingTypedLinks {
    /// Creates a new builder-style object to manufacture [`ListOutgoingTypedLinksInput`](crate::input::ListOutgoingTypedLinksInput).
    pub fn builder() -> crate::input::list_outgoing_typed_links_input::Builder {
        crate::input::list_outgoing_typed_links_input::Builder::default()
    }
    /// Creates a new `ListOutgoingTypedLinks` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListOutgoingTypedLinks {
    type Output = std::result::Result<
        crate::output::ListOutgoingTypedLinksOutput,
        crate::error::ListOutgoingTypedLinksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_outgoing_typed_links::de_list_outgoing_typed_links_http_error(response)
        } else {
            crate::protocol_serde::shape_list_outgoing_typed_links::de_list_outgoing_typed_links_http_response(response)
        }
    }
}

/// Operation shape for `ListPolicyAttachments`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_policy_attachments`](crate::client::fluent_builders::ListPolicyAttachments).
///
/// `ParseStrictResponse` impl for `ListPolicyAttachments`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListPolicyAttachments {
    _private: (),
}
impl ListPolicyAttachments {
    /// Creates a new builder-style object to manufacture [`ListPolicyAttachmentsInput`](crate::input::ListPolicyAttachmentsInput).
    pub fn builder() -> crate::input::list_policy_attachments_input::Builder {
        crate::input::list_policy_attachments_input::Builder::default()
    }
    /// Creates a new `ListPolicyAttachments` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListPolicyAttachments {
    type Output = std::result::Result<
        crate::output::ListPolicyAttachmentsOutput,
        crate::error::ListPolicyAttachmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_policy_attachments::de_list_policy_attachments_http_error(response)
        } else {
            crate::protocol_serde::shape_list_policy_attachments::de_list_policy_attachments_http_response(response)
        }
    }
}

/// Operation shape for `ListPublishedSchemaArns`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_published_schema_arns`](crate::client::fluent_builders::ListPublishedSchemaArns).
///
/// `ParseStrictResponse` impl for `ListPublishedSchemaArns`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListPublishedSchemaArns {
    _private: (),
}
impl ListPublishedSchemaArns {
    /// Creates a new builder-style object to manufacture [`ListPublishedSchemaArnsInput`](crate::input::ListPublishedSchemaArnsInput).
    pub fn builder() -> crate::input::list_published_schema_arns_input::Builder {
        crate::input::list_published_schema_arns_input::Builder::default()
    }
    /// Creates a new `ListPublishedSchemaArns` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListPublishedSchemaArns {
    type Output = std::result::Result<
        crate::output::ListPublishedSchemaArnsOutput,
        crate::error::ListPublishedSchemaArnsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_published_schema_arns::de_list_published_schema_arns_http_error(response)
        } else {
            crate::protocol_serde::shape_list_published_schema_arns::de_list_published_schema_arns_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `ListTypedLinkFacetAttributes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_typed_link_facet_attributes`](crate::client::fluent_builders::ListTypedLinkFacetAttributes).
///
/// `ParseStrictResponse` impl for `ListTypedLinkFacetAttributes`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTypedLinkFacetAttributes {
    _private: (),
}
impl ListTypedLinkFacetAttributes {
    /// Creates a new builder-style object to manufacture [`ListTypedLinkFacetAttributesInput`](crate::input::ListTypedLinkFacetAttributesInput).
    pub fn builder() -> crate::input::list_typed_link_facet_attributes_input::Builder {
        crate::input::list_typed_link_facet_attributes_input::Builder::default()
    }
    /// Creates a new `ListTypedLinkFacetAttributes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTypedLinkFacetAttributes {
    type Output = std::result::Result<
        crate::output::ListTypedLinkFacetAttributesOutput,
        crate::error::ListTypedLinkFacetAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_typed_link_facet_attributes::de_list_typed_link_facet_attributes_http_error(response)
        } else {
            crate::protocol_serde::shape_list_typed_link_facet_attributes::de_list_typed_link_facet_attributes_http_response(response)
        }
    }
}

/// Operation shape for `ListTypedLinkFacetNames`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_typed_link_facet_names`](crate::client::fluent_builders::ListTypedLinkFacetNames).
///
/// `ParseStrictResponse` impl for `ListTypedLinkFacetNames`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTypedLinkFacetNames {
    _private: (),
}
impl ListTypedLinkFacetNames {
    /// Creates a new builder-style object to manufacture [`ListTypedLinkFacetNamesInput`](crate::input::ListTypedLinkFacetNamesInput).
    pub fn builder() -> crate::input::list_typed_link_facet_names_input::Builder {
        crate::input::list_typed_link_facet_names_input::Builder::default()
    }
    /// Creates a new `ListTypedLinkFacetNames` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTypedLinkFacetNames {
    type Output = std::result::Result<
        crate::output::ListTypedLinkFacetNamesOutput,
        crate::error::ListTypedLinkFacetNamesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_typed_link_facet_names::de_list_typed_link_facet_names_http_error(response)
        } else {
            crate::protocol_serde::shape_list_typed_link_facet_names::de_list_typed_link_facet_names_http_response(response)
        }
    }
}

/// Operation shape for `LookupPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`lookup_policy`](crate::client::fluent_builders::LookupPolicy).
///
/// `ParseStrictResponse` impl for `LookupPolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct LookupPolicy {
    _private: (),
}
impl LookupPolicy {
    /// Creates a new builder-style object to manufacture [`LookupPolicyInput`](crate::input::LookupPolicyInput).
    pub fn builder() -> crate::input::lookup_policy_input::Builder {
        crate::input::lookup_policy_input::Builder::default()
    }
    /// Creates a new `LookupPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for LookupPolicy {
    type Output =
        std::result::Result<crate::output::LookupPolicyOutput, crate::error::LookupPolicyError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_lookup_policy::de_lookup_policy_http_error(response)
        } else {
            crate::protocol_serde::shape_lookup_policy::de_lookup_policy_http_response(response)
        }
    }
}

/// Operation shape for `PublishSchema`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`publish_schema`](crate::client::fluent_builders::PublishSchema).
///
/// `ParseStrictResponse` impl for `PublishSchema`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PublishSchema {
    _private: (),
}
impl PublishSchema {
    /// Creates a new builder-style object to manufacture [`PublishSchemaInput`](crate::input::PublishSchemaInput).
    pub fn builder() -> crate::input::publish_schema_input::Builder {
        crate::input::publish_schema_input::Builder::default()
    }
    /// Creates a new `PublishSchema` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PublishSchema {
    type Output =
        std::result::Result<crate::output::PublishSchemaOutput, crate::error::PublishSchemaError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_publish_schema::de_publish_schema_http_error(response)
        } else {
            crate::protocol_serde::shape_publish_schema::de_publish_schema_http_response(response)
        }
    }
}

/// Operation shape for `PutSchemaFromJson`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_schema_from_json`](crate::client::fluent_builders::PutSchemaFromJson).
///
/// `ParseStrictResponse` impl for `PutSchemaFromJson`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutSchemaFromJson {
    _private: (),
}
impl PutSchemaFromJson {
    /// Creates a new builder-style object to manufacture [`PutSchemaFromJsonInput`](crate::input::PutSchemaFromJsonInput).
    pub fn builder() -> crate::input::put_schema_from_json_input::Builder {
        crate::input::put_schema_from_json_input::Builder::default()
    }
    /// Creates a new `PutSchemaFromJson` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutSchemaFromJson {
    type Output = std::result::Result<
        crate::output::PutSchemaFromJsonOutput,
        crate::error::PutSchemaFromJsonError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_schema_from_json::de_put_schema_from_json_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_put_schema_from_json::de_put_schema_from_json_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `RemoveFacetFromObject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_facet_from_object`](crate::client::fluent_builders::RemoveFacetFromObject).
///
/// `ParseStrictResponse` impl for `RemoveFacetFromObject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RemoveFacetFromObject {
    _private: (),
}
impl RemoveFacetFromObject {
    /// Creates a new builder-style object to manufacture [`RemoveFacetFromObjectInput`](crate::input::RemoveFacetFromObjectInput).
    pub fn builder() -> crate::input::remove_facet_from_object_input::Builder {
        crate::input::remove_facet_from_object_input::Builder::default()
    }
    /// Creates a new `RemoveFacetFromObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveFacetFromObject {
    type Output = std::result::Result<
        crate::output::RemoveFacetFromObjectOutput,
        crate::error::RemoveFacetFromObjectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_remove_facet_from_object::de_remove_facet_from_object_http_error(response)
        } else {
            crate::protocol_serde::shape_remove_facet_from_object::de_remove_facet_from_object_http_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateFacet`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_facet`](crate::client::fluent_builders::UpdateFacet).
///
/// `ParseStrictResponse` impl for `UpdateFacet`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateFacet {
    _private: (),
}
impl UpdateFacet {
    /// Creates a new builder-style object to manufacture [`UpdateFacetInput`](crate::input::UpdateFacetInput).
    pub fn builder() -> crate::input::update_facet_input::Builder {
        crate::input::update_facet_input::Builder::default()
    }
    /// Creates a new `UpdateFacet` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateFacet {
    type Output =
        std::result::Result<crate::output::UpdateFacetOutput, crate::error::UpdateFacetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_facet::de_update_facet_http_error(response)
        } else {
            crate::protocol_serde::shape_update_facet::de_update_facet_http_response(response)
        }
    }
}

/// Operation shape for `UpdateLinkAttributes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_link_attributes`](crate::client::fluent_builders::UpdateLinkAttributes).
///
/// `ParseStrictResponse` impl for `UpdateLinkAttributes`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateLinkAttributes {
    _private: (),
}
impl UpdateLinkAttributes {
    /// Creates a new builder-style object to manufacture [`UpdateLinkAttributesInput`](crate::input::UpdateLinkAttributesInput).
    pub fn builder() -> crate::input::update_link_attributes_input::Builder {
        crate::input::update_link_attributes_input::Builder::default()
    }
    /// Creates a new `UpdateLinkAttributes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateLinkAttributes {
    type Output = std::result::Result<
        crate::output::UpdateLinkAttributesOutput,
        crate::error::UpdateLinkAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_link_attributes::de_update_link_attributes_http_error(response)
        } else {
            crate::protocol_serde::shape_update_link_attributes::de_update_link_attributes_http_response(response)
        }
    }
}

/// Operation shape for `UpdateObjectAttributes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_object_attributes`](crate::client::fluent_builders::UpdateObjectAttributes).
///
/// `ParseStrictResponse` impl for `UpdateObjectAttributes`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateObjectAttributes {
    _private: (),
}
impl UpdateObjectAttributes {
    /// Creates a new builder-style object to manufacture [`UpdateObjectAttributesInput`](crate::input::UpdateObjectAttributesInput).
    pub fn builder() -> crate::input::update_object_attributes_input::Builder {
        crate::input::update_object_attributes_input::Builder::default()
    }
    /// Creates a new `UpdateObjectAttributes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateObjectAttributes {
    type Output = std::result::Result<
        crate::output::UpdateObjectAttributesOutput,
        crate::error::UpdateObjectAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_object_attributes::de_update_object_attributes_http_error(response)
        } else {
            crate::protocol_serde::shape_update_object_attributes::de_update_object_attributes_http_response(response)
        }
    }
}

/// Operation shape for `UpdateSchema`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_schema`](crate::client::fluent_builders::UpdateSchema).
///
/// `ParseStrictResponse` impl for `UpdateSchema`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateSchema {
    _private: (),
}
impl UpdateSchema {
    /// Creates a new builder-style object to manufacture [`UpdateSchemaInput`](crate::input::UpdateSchemaInput).
    pub fn builder() -> crate::input::update_schema_input::Builder {
        crate::input::update_schema_input::Builder::default()
    }
    /// Creates a new `UpdateSchema` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateSchema {
    type Output =
        std::result::Result<crate::output::UpdateSchemaOutput, crate::error::UpdateSchemaError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_schema::de_update_schema_http_error(response)
        } else {
            crate::protocol_serde::shape_update_schema::de_update_schema_http_response(response)
        }
    }
}

/// Operation shape for `UpdateTypedLinkFacet`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_typed_link_facet`](crate::client::fluent_builders::UpdateTypedLinkFacet).
///
/// `ParseStrictResponse` impl for `UpdateTypedLinkFacet`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateTypedLinkFacet {
    _private: (),
}
impl UpdateTypedLinkFacet {
    /// Creates a new builder-style object to manufacture [`UpdateTypedLinkFacetInput`](crate::input::UpdateTypedLinkFacetInput).
    pub fn builder() -> crate::input::update_typed_link_facet_input::Builder {
        crate::input::update_typed_link_facet_input::Builder::default()
    }
    /// Creates a new `UpdateTypedLinkFacet` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateTypedLinkFacet {
    type Output = std::result::Result<
        crate::output::UpdateTypedLinkFacetOutput,
        crate::error::UpdateTypedLinkFacetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_typed_link_facet::de_update_typed_link_facet_http_error(response)
        } else {
            crate::protocol_serde::shape_update_typed_link_facet::de_update_typed_link_facet_http_response(response)
        }
    }
}

/// Operation shape for `UpgradeAppliedSchema`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`upgrade_applied_schema`](crate::client::fluent_builders::UpgradeAppliedSchema).
///
/// `ParseStrictResponse` impl for `UpgradeAppliedSchema`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpgradeAppliedSchema {
    _private: (),
}
impl UpgradeAppliedSchema {
    /// Creates a new builder-style object to manufacture [`UpgradeAppliedSchemaInput`](crate::input::UpgradeAppliedSchemaInput).
    pub fn builder() -> crate::input::upgrade_applied_schema_input::Builder {
        crate::input::upgrade_applied_schema_input::Builder::default()
    }
    /// Creates a new `UpgradeAppliedSchema` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpgradeAppliedSchema {
    type Output = std::result::Result<
        crate::output::UpgradeAppliedSchemaOutput,
        crate::error::UpgradeAppliedSchemaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_upgrade_applied_schema::de_upgrade_applied_schema_http_error(response)
        } else {
            crate::protocol_serde::shape_upgrade_applied_schema::de_upgrade_applied_schema_http_response(response)
        }
    }
}

/// Operation shape for `UpgradePublishedSchema`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`upgrade_published_schema`](crate::client::fluent_builders::UpgradePublishedSchema).
///
/// `ParseStrictResponse` impl for `UpgradePublishedSchema`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpgradePublishedSchema {
    _private: (),
}
impl UpgradePublishedSchema {
    /// Creates a new builder-style object to manufacture [`UpgradePublishedSchemaInput`](crate::input::UpgradePublishedSchemaInput).
    pub fn builder() -> crate::input::upgrade_published_schema_input::Builder {
        crate::input::upgrade_published_schema_input::Builder::default()
    }
    /// Creates a new `UpgradePublishedSchema` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpgradePublishedSchema {
    type Output = std::result::Result<
        crate::output::UpgradePublishedSchemaOutput,
        crate::error::UpgradePublishedSchemaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_upgrade_published_schema::de_upgrade_published_schema_http_error(response)
        } else {
            crate::protocol_serde::shape_upgrade_published_schema::de_upgrade_published_schema_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
