// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn add_headers_add_facet_to_object(
    input: &crate::input::AddFacetToObjectInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_1) = &input.directory_arn {
        let formatted_2 = AsRef::<str>::as_ref(inner_1);
        if !formatted_2.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_2;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_apply_schema(
    input: &crate::input::ApplySchemaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_3) = &input.directory_arn {
        let formatted_4 = AsRef::<str>::as_ref(inner_3);
        if !formatted_4.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_4;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_attach_object(
    input: &crate::input::AttachObjectInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_5) = &input.directory_arn {
        let formatted_6 = AsRef::<str>::as_ref(inner_5);
        if !formatted_6.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_6;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_attach_policy(
    input: &crate::input::AttachPolicyInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_7) = &input.directory_arn {
        let formatted_8 = AsRef::<str>::as_ref(inner_7);
        if !formatted_8.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_8;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_attach_to_index(
    input: &crate::input::AttachToIndexInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_9) = &input.directory_arn {
        let formatted_10 = AsRef::<str>::as_ref(inner_9);
        if !formatted_10.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_10;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_attach_typed_link(
    input: &crate::input::AttachTypedLinkInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_11) = &input.directory_arn {
        let formatted_12 = AsRef::<str>::as_ref(inner_11);
        if !formatted_12.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_12;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_batch_read(
    input: &crate::input::BatchReadInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_13) = &input.directory_arn {
        let formatted_14 = AsRef::<str>::as_ref(inner_13);
        if !formatted_14.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_14;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    if let Some(inner_15) = &input.consistency_level {
        let formatted_16 = AsRef::<str>::as_ref(inner_15);
        if !formatted_16.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_16;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "consistency_level",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-consistency-level", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_batch_write(
    input: &crate::input::BatchWriteInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_17) = &input.directory_arn {
        let formatted_18 = AsRef::<str>::as_ref(inner_17);
        if !formatted_18.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_18;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_create_directory(
    input: &crate::input::CreateDirectoryInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_19) = &input.schema_arn {
        let formatted_20 = AsRef::<str>::as_ref(inner_19);
        if !formatted_20.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_20;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_create_facet(
    input: &crate::input::CreateFacetInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_21) = &input.schema_arn {
        let formatted_22 = AsRef::<str>::as_ref(inner_21);
        if !formatted_22.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_22;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_create_index(
    input: &crate::input::CreateIndexInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_23) = &input.directory_arn {
        let formatted_24 = AsRef::<str>::as_ref(inner_23);
        if !formatted_24.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_24;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_create_object(
    input: &crate::input::CreateObjectInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_25) = &input.directory_arn {
        let formatted_26 = AsRef::<str>::as_ref(inner_25);
        if !formatted_26.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_26;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_create_typed_link_facet(
    input: &crate::input::CreateTypedLinkFacetInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_27) = &input.schema_arn {
        let formatted_28 = AsRef::<str>::as_ref(inner_27);
        if !formatted_28.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_28;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_directory(
    input: &crate::input::DeleteDirectoryInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_29) = &input.directory_arn {
        let formatted_30 = AsRef::<str>::as_ref(inner_29);
        if !formatted_30.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_30;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_facet(
    input: &crate::input::DeleteFacetInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_31) = &input.schema_arn {
        let formatted_32 = AsRef::<str>::as_ref(inner_31);
        if !formatted_32.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_32;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_object(
    input: &crate::input::DeleteObjectInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_33) = &input.directory_arn {
        let formatted_34 = AsRef::<str>::as_ref(inner_33);
        if !formatted_34.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_34;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_schema(
    input: &crate::input::DeleteSchemaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_35) = &input.schema_arn {
        let formatted_36 = AsRef::<str>::as_ref(inner_35);
        if !formatted_36.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_36;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_typed_link_facet(
    input: &crate::input::DeleteTypedLinkFacetInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_37) = &input.schema_arn {
        let formatted_38 = AsRef::<str>::as_ref(inner_37);
        if !formatted_38.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_38;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_detach_from_index(
    input: &crate::input::DetachFromIndexInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_39) = &input.directory_arn {
        let formatted_40 = AsRef::<str>::as_ref(inner_39);
        if !formatted_40.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_40;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_detach_object(
    input: &crate::input::DetachObjectInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_41) = &input.directory_arn {
        let formatted_42 = AsRef::<str>::as_ref(inner_41);
        if !formatted_42.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_42;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_detach_policy(
    input: &crate::input::DetachPolicyInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_43) = &input.directory_arn {
        let formatted_44 = AsRef::<str>::as_ref(inner_43);
        if !formatted_44.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_44;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_detach_typed_link(
    input: &crate::input::DetachTypedLinkInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_45) = &input.directory_arn {
        let formatted_46 = AsRef::<str>::as_ref(inner_45);
        if !formatted_46.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_46;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_disable_directory(
    input: &crate::input::DisableDirectoryInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_47) = &input.directory_arn {
        let formatted_48 = AsRef::<str>::as_ref(inner_47);
        if !formatted_48.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_48;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_enable_directory(
    input: &crate::input::EnableDirectoryInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_49) = &input.directory_arn {
        let formatted_50 = AsRef::<str>::as_ref(inner_49);
        if !formatted_50.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_50;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_directory(
    input: &crate::input::GetDirectoryInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_51) = &input.directory_arn {
        let formatted_52 = AsRef::<str>::as_ref(inner_51);
        if !formatted_52.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_52;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_facet(
    input: &crate::input::GetFacetInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_53) = &input.schema_arn {
        let formatted_54 = AsRef::<str>::as_ref(inner_53);
        if !formatted_54.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_54;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_link_attributes(
    input: &crate::input::GetLinkAttributesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_55) = &input.directory_arn {
        let formatted_56 = AsRef::<str>::as_ref(inner_55);
        if !formatted_56.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_56;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_object_attributes(
    input: &crate::input::GetObjectAttributesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_57) = &input.directory_arn {
        let formatted_58 = AsRef::<str>::as_ref(inner_57);
        if !formatted_58.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_58;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    if let Some(inner_59) = &input.consistency_level {
        let formatted_60 = AsRef::<str>::as_ref(inner_59);
        if !formatted_60.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_60;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "consistency_level",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-consistency-level", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_object_information(
    input: &crate::input::GetObjectInformationInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_61) = &input.directory_arn {
        let formatted_62 = AsRef::<str>::as_ref(inner_61);
        if !formatted_62.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_62;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    if let Some(inner_63) = &input.consistency_level {
        let formatted_64 = AsRef::<str>::as_ref(inner_63);
        if !formatted_64.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_64;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "consistency_level",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-consistency-level", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_schema_as_json(
    input: &crate::input::GetSchemaAsJsonInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_65) = &input.schema_arn {
        let formatted_66 = AsRef::<str>::as_ref(inner_65);
        if !formatted_66.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_66;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_typed_link_facet_information(
    input: &crate::input::GetTypedLinkFacetInformationInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_67) = &input.schema_arn {
        let formatted_68 = AsRef::<str>::as_ref(inner_67);
        if !formatted_68.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_68;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_attached_indices(
    input: &crate::input::ListAttachedIndicesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_69) = &input.directory_arn {
        let formatted_70 = AsRef::<str>::as_ref(inner_69);
        if !formatted_70.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_70;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    if let Some(inner_71) = &input.consistency_level {
        let formatted_72 = AsRef::<str>::as_ref(inner_71);
        if !formatted_72.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_72;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "consistency_level",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-consistency-level", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_facet_attributes(
    input: &crate::input::ListFacetAttributesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_73) = &input.schema_arn {
        let formatted_74 = AsRef::<str>::as_ref(inner_73);
        if !formatted_74.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_74;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_facet_names(
    input: &crate::input::ListFacetNamesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_75) = &input.schema_arn {
        let formatted_76 = AsRef::<str>::as_ref(inner_75);
        if !formatted_76.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_76;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_incoming_typed_links(
    input: &crate::input::ListIncomingTypedLinksInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_77) = &input.directory_arn {
        let formatted_78 = AsRef::<str>::as_ref(inner_77);
        if !formatted_78.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_78;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_index(
    input: &crate::input::ListIndexInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_79) = &input.directory_arn {
        let formatted_80 = AsRef::<str>::as_ref(inner_79);
        if !formatted_80.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_80;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    if let Some(inner_81) = &input.consistency_level {
        let formatted_82 = AsRef::<str>::as_ref(inner_81);
        if !formatted_82.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_82;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "consistency_level",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-consistency-level", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_object_attributes(
    input: &crate::input::ListObjectAttributesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_83) = &input.directory_arn {
        let formatted_84 = AsRef::<str>::as_ref(inner_83);
        if !formatted_84.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_84;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    if let Some(inner_85) = &input.consistency_level {
        let formatted_86 = AsRef::<str>::as_ref(inner_85);
        if !formatted_86.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_86;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "consistency_level",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-consistency-level", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_object_children(
    input: &crate::input::ListObjectChildrenInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_87) = &input.directory_arn {
        let formatted_88 = AsRef::<str>::as_ref(inner_87);
        if !formatted_88.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_88;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    if let Some(inner_89) = &input.consistency_level {
        let formatted_90 = AsRef::<str>::as_ref(inner_89);
        if !formatted_90.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_90;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "consistency_level",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-consistency-level", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_object_parent_paths(
    input: &crate::input::ListObjectParentPathsInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_91) = &input.directory_arn {
        let formatted_92 = AsRef::<str>::as_ref(inner_91);
        if !formatted_92.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_92;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_object_parents(
    input: &crate::input::ListObjectParentsInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_93) = &input.directory_arn {
        let formatted_94 = AsRef::<str>::as_ref(inner_93);
        if !formatted_94.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_94;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    if let Some(inner_95) = &input.consistency_level {
        let formatted_96 = AsRef::<str>::as_ref(inner_95);
        if !formatted_96.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_96;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "consistency_level",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-consistency-level", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_object_policies(
    input: &crate::input::ListObjectPoliciesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_97) = &input.directory_arn {
        let formatted_98 = AsRef::<str>::as_ref(inner_97);
        if !formatted_98.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_98;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    if let Some(inner_99) = &input.consistency_level {
        let formatted_100 = AsRef::<str>::as_ref(inner_99);
        if !formatted_100.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_100;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "consistency_level",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-consistency-level", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_outgoing_typed_links(
    input: &crate::input::ListOutgoingTypedLinksInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_101) = &input.directory_arn {
        let formatted_102 = AsRef::<str>::as_ref(inner_101);
        if !formatted_102.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_102;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_policy_attachments(
    input: &crate::input::ListPolicyAttachmentsInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_103) = &input.directory_arn {
        let formatted_104 = AsRef::<str>::as_ref(inner_103);
        if !formatted_104.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_104;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    if let Some(inner_105) = &input.consistency_level {
        let formatted_106 = AsRef::<str>::as_ref(inner_105);
        if !formatted_106.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_106;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "consistency_level",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-consistency-level", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_typed_link_facet_attributes(
    input: &crate::input::ListTypedLinkFacetAttributesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_107) = &input.schema_arn {
        let formatted_108 = AsRef::<str>::as_ref(inner_107);
        if !formatted_108.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_108;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_typed_link_facet_names(
    input: &crate::input::ListTypedLinkFacetNamesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_109) = &input.schema_arn {
        let formatted_110 = AsRef::<str>::as_ref(inner_109);
        if !formatted_110.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_110;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_lookup_policy(
    input: &crate::input::LookupPolicyInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_111) = &input.directory_arn {
        let formatted_112 = AsRef::<str>::as_ref(inner_111);
        if !formatted_112.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_112;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_publish_schema(
    input: &crate::input::PublishSchemaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_113) = &input.development_schema_arn {
        let formatted_114 = AsRef::<str>::as_ref(inner_113);
        if !formatted_114.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_114;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "development_schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_put_schema_from_json(
    input: &crate::input::PutSchemaFromJsonInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_115) = &input.schema_arn {
        let formatted_116 = AsRef::<str>::as_ref(inner_115);
        if !formatted_116.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_116;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_remove_facet_from_object(
    input: &crate::input::RemoveFacetFromObjectInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_117) = &input.directory_arn {
        let formatted_118 = AsRef::<str>::as_ref(inner_117);
        if !formatted_118.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_118;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_update_facet(
    input: &crate::input::UpdateFacetInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_119) = &input.schema_arn {
        let formatted_120 = AsRef::<str>::as_ref(inner_119);
        if !formatted_120.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_120;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_update_link_attributes(
    input: &crate::input::UpdateLinkAttributesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_121) = &input.directory_arn {
        let formatted_122 = AsRef::<str>::as_ref(inner_121);
        if !formatted_122.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_122;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_update_object_attributes(
    input: &crate::input::UpdateObjectAttributesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_123) = &input.directory_arn {
        let formatted_124 = AsRef::<str>::as_ref(inner_123);
        if !formatted_124.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_124;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "directory_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_update_schema(
    input: &crate::input::UpdateSchemaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_125) = &input.schema_arn {
        let formatted_126 = AsRef::<str>::as_ref(inner_125);
        if !formatted_126.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_126;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_update_typed_link_facet(
    input: &crate::input::UpdateTypedLinkFacetInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_127) = &input.schema_arn {
        let formatted_128 = AsRef::<str>::as_ref(inner_127);
        if !formatted_128.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_128;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "schema_arn",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-data-partition", header_value);
        }
    }
    Ok(builder)
}
