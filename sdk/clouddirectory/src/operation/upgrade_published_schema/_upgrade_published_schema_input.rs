// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpgradePublishedSchemaInput {
    /// <p>The ARN of the development schema with the changes used for the upgrade.</p>
    #[doc(hidden)]
    pub development_schema_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the published schema to be upgraded.</p>
    #[doc(hidden)]
    pub published_schema_arn: std::option::Option<std::string::String>,
    /// <p>Identifies the minor version of the published schema that will be created. This parameter is NOT optional.</p>
    #[doc(hidden)]
    pub minor_version: std::option::Option<std::string::String>,
    /// <p>Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.</p>
    #[doc(hidden)]
    pub dry_run: bool,
}
impl UpgradePublishedSchemaInput {
    /// <p>The ARN of the development schema with the changes used for the upgrade.</p>
    pub fn development_schema_arn(&self) -> std::option::Option<&str> {
        self.development_schema_arn.as_deref()
    }
    /// <p>The ARN of the published schema to be upgraded.</p>
    pub fn published_schema_arn(&self) -> std::option::Option<&str> {
        self.published_schema_arn.as_deref()
    }
    /// <p>Identifies the minor version of the published schema that will be created. This parameter is NOT optional.</p>
    pub fn minor_version(&self) -> std::option::Option<&str> {
        self.minor_version.as_deref()
    }
    /// <p>Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.</p>
    pub fn dry_run(&self) -> bool {
        self.dry_run
    }
}
impl UpgradePublishedSchemaInput {
    /// Creates a new builder-style object to manufacture [`UpgradePublishedSchemaInput`](crate::operation::upgrade_published_schema::UpgradePublishedSchemaInput).
    pub fn builder(
    ) -> crate::operation::upgrade_published_schema::builders::UpgradePublishedSchemaInputBuilder
    {
        crate::operation::upgrade_published_schema::builders::UpgradePublishedSchemaInputBuilder::default()
    }
}

/// A builder for [`UpgradePublishedSchemaInput`](crate::operation::upgrade_published_schema::UpgradePublishedSchemaInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpgradePublishedSchemaInputBuilder {
    pub(crate) development_schema_arn: std::option::Option<std::string::String>,
    pub(crate) published_schema_arn: std::option::Option<std::string::String>,
    pub(crate) minor_version: std::option::Option<std::string::String>,
    pub(crate) dry_run: std::option::Option<bool>,
}
impl UpgradePublishedSchemaInputBuilder {
    /// <p>The ARN of the development schema with the changes used for the upgrade.</p>
    pub fn development_schema_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.development_schema_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the development schema with the changes used for the upgrade.</p>
    pub fn set_development_schema_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.development_schema_arn = input;
        self
    }
    /// <p>The ARN of the published schema to be upgraded.</p>
    pub fn published_schema_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.published_schema_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the published schema to be upgraded.</p>
    pub fn set_published_schema_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.published_schema_arn = input;
        self
    }
    /// <p>Identifies the minor version of the published schema that will be created. This parameter is NOT optional.</p>
    pub fn minor_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.minor_version = Some(input.into());
        self
    }
    /// <p>Identifies the minor version of the published schema that will be created. This parameter is NOT optional.</p>
    pub fn set_minor_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.minor_version = input;
        self
    }
    /// <p>Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// Consumes the builder and constructs a [`UpgradePublishedSchemaInput`](crate::operation::upgrade_published_schema::UpgradePublishedSchemaInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::upgrade_published_schema::UpgradePublishedSchemaInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::upgrade_published_schema::UpgradePublishedSchemaInput {
                development_schema_arn: self.development_schema_arn,
                published_schema_arn: self.published_schema_arn,
                minor_version: self.minor_version,
                dry_run: self.dry_run.unwrap_or_default(),
            },
        )
    }
}
