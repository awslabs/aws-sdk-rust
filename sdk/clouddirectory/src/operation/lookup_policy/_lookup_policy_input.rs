// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LookupPolicyInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    #[doc(hidden)]
    pub directory_arn: std::option::Option<std::string::String>,
    /// <p>Reference that identifies the object whose policies will be looked up.</p>
    #[doc(hidden)]
    pub object_reference: std::option::Option<crate::types::ObjectReference>,
    /// <p>The token to request the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl LookupPolicyInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(&self) -> std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>Reference that identifies the object whose policies will be looked up.</p>
    pub fn object_reference(&self) -> std::option::Option<&crate::types::ObjectReference> {
        self.object_reference.as_ref()
    }
    /// <p>The token to request the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl LookupPolicyInput {
    /// Creates a new builder-style object to manufacture [`LookupPolicyInput`](crate::operation::lookup_policy::LookupPolicyInput).
    pub fn builder() -> crate::operation::lookup_policy::builders::LookupPolicyInputBuilder {
        crate::operation::lookup_policy::builders::LookupPolicyInputBuilder::default()
    }
}

/// A builder for [`LookupPolicyInput`](crate::operation::lookup_policy::LookupPolicyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LookupPolicyInputBuilder {
    pub(crate) directory_arn: std::option::Option<std::string::String>,
    pub(crate) object_reference: std::option::Option<crate::types::ObjectReference>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl LookupPolicyInputBuilder {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    pub fn set_directory_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// <p>Reference that identifies the object whose policies will be looked up.</p>
    pub fn object_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.object_reference = Some(input);
        self
    }
    /// <p>Reference that identifies the object whose policies will be looked up.</p>
    pub fn set_object_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.object_reference = input;
        self
    }
    /// <p>The token to request the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to request the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`LookupPolicyInput`](crate::operation::lookup_policy::LookupPolicyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::lookup_policy::LookupPolicyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::lookup_policy::LookupPolicyInput {
            directory_arn: self.directory_arn,
            object_reference: self.object_reference,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
