// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_index::_create_index_output::CreateIndexOutputBuilder;

pub use crate::operation::create_index::_create_index_input::CreateIndexInputBuilder;

/// Fluent builder constructing a request to `CreateIndex`.
///
/// <p>Creates an index object. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/indexing_search.html">Indexing and search</a> for more information.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateIndexFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_index::builders::CreateIndexInputBuilder,
}
impl CreateIndexFluentBuilder {
    /// Creates a new `CreateIndex`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_index::CreateIndex,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_index::CreateIndexError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_index::CreateIndexOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_index::CreateIndexError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the directory where the index should be created.</p>
    pub fn directory_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.directory_arn(input.into());
        self
    }
    /// <p>The ARN of the directory where the index should be created.</p>
    pub fn set_directory_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_directory_arn(input);
        self
    }
    /// Appends an item to `OrderedIndexedAttributeList`.
    ///
    /// To override the contents of this collection use [`set_ordered_indexed_attribute_list`](Self::set_ordered_indexed_attribute_list).
    ///
    /// <p>Specifies the attributes that should be indexed on. Currently only a single attribute is supported.</p>
    pub fn ordered_indexed_attribute_list(mut self, input: crate::types::AttributeKey) -> Self {
        self.inner = self.inner.ordered_indexed_attribute_list(input);
        self
    }
    /// <p>Specifies the attributes that should be indexed on. Currently only a single attribute is supported.</p>
    pub fn set_ordered_indexed_attribute_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AttributeKey>>,
    ) -> Self {
        self.inner = self.inner.set_ordered_indexed_attribute_list(input);
        self
    }
    /// <p>Indicates whether the attribute that is being indexed has unique values or not.</p>
    pub fn is_unique(mut self, input: bool) -> Self {
        self.inner = self.inner.is_unique(input);
        self
    }
    /// <p>Indicates whether the attribute that is being indexed has unique values or not.</p>
    pub fn set_is_unique(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_unique(input);
        self
    }
    /// <p>A reference to the parent object that contains the index object.</p>
    pub fn parent_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.inner = self.inner.parent_reference(input);
        self
    }
    /// <p>A reference to the parent object that contains the index object.</p>
    pub fn set_parent_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.inner = self.inner.set_parent_reference(input);
        self
    }
    /// <p>The name of the link between the parent object and the index object.</p>
    pub fn link_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.link_name(input.into());
        self
    }
    /// <p>The name of the link between the parent object and the index object.</p>
    pub fn set_link_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_link_name(input);
        self
    }
}
