// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachObjectInput {
    /// <p>Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where both objects reside. For more information, see <code>arns</code>.</p>
    #[doc(hidden)]
    pub directory_arn: std::option::Option<std::string::String>,
    /// <p>The parent object reference.</p>
    #[doc(hidden)]
    pub parent_reference: std::option::Option<crate::types::ObjectReference>,
    /// <p>The child object reference to be attached to the object.</p>
    #[doc(hidden)]
    pub child_reference: std::option::Option<crate::types::ObjectReference>,
    /// <p>The link name with which the child object is attached to the parent.</p>
    #[doc(hidden)]
    pub link_name: std::option::Option<std::string::String>,
}
impl AttachObjectInput {
    /// <p>Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where both objects reside. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(&self) -> std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>The parent object reference.</p>
    pub fn parent_reference(&self) -> std::option::Option<&crate::types::ObjectReference> {
        self.parent_reference.as_ref()
    }
    /// <p>The child object reference to be attached to the object.</p>
    pub fn child_reference(&self) -> std::option::Option<&crate::types::ObjectReference> {
        self.child_reference.as_ref()
    }
    /// <p>The link name with which the child object is attached to the parent.</p>
    pub fn link_name(&self) -> std::option::Option<&str> {
        self.link_name.as_deref()
    }
}
impl AttachObjectInput {
    /// Creates a new builder-style object to manufacture [`AttachObjectInput`](crate::operation::attach_object::AttachObjectInput).
    pub fn builder() -> crate::operation::attach_object::builders::AttachObjectInputBuilder {
        crate::operation::attach_object::builders::AttachObjectInputBuilder::default()
    }
}

/// A builder for [`AttachObjectInput`](crate::operation::attach_object::AttachObjectInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AttachObjectInputBuilder {
    pub(crate) directory_arn: std::option::Option<std::string::String>,
    pub(crate) parent_reference: std::option::Option<crate::types::ObjectReference>,
    pub(crate) child_reference: std::option::Option<crate::types::ObjectReference>,
    pub(crate) link_name: std::option::Option<std::string::String>,
}
impl AttachObjectInputBuilder {
    /// <p>Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where both objects reside. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where both objects reside. For more information, see <code>arns</code>.</p>
    pub fn set_directory_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// <p>The parent object reference.</p>
    pub fn parent_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.parent_reference = Some(input);
        self
    }
    /// <p>The parent object reference.</p>
    pub fn set_parent_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.parent_reference = input;
        self
    }
    /// <p>The child object reference to be attached to the object.</p>
    pub fn child_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.child_reference = Some(input);
        self
    }
    /// <p>The child object reference to be attached to the object.</p>
    pub fn set_child_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.child_reference = input;
        self
    }
    /// <p>The link name with which the child object is attached to the parent.</p>
    pub fn link_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.link_name = Some(input.into());
        self
    }
    /// <p>The link name with which the child object is attached to the parent.</p>
    pub fn set_link_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.link_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AttachObjectInput`](crate::operation::attach_object::AttachObjectInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::attach_object::AttachObjectInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::attach_object::AttachObjectInput {
            directory_arn: self.directory_arn,
            parent_reference: self.parent_reference,
            child_reference: self.child_reference,
            link_name: self.link_name,
        })
    }
}
