// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTypedLinkFacetInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <code>arns</code>.</p>
    pub schema_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique name of the typed link facet.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Attributes update structure.</p>
    pub attribute_updates: ::std::option::Option<::std::vec::Vec<crate::types::TypedLinkFacetAttributeUpdate>>,
    /// <p>The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    pub identity_attribute_order: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateTypedLinkFacetInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <code>arns</code>.</p>
    pub fn schema_arn(&self) -> ::std::option::Option<&str> {
        self.schema_arn.as_deref()
    }
    /// <p>The unique name of the typed link facet.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Attributes update structure.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attribute_updates.is_none()`.
    pub fn attribute_updates(&self) -> &[crate::types::TypedLinkFacetAttributeUpdate] {
        self.attribute_updates.as_deref().unwrap_or_default()
    }
    /// <p>The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.identity_attribute_order.is_none()`.
    pub fn identity_attribute_order(&self) -> &[::std::string::String] {
        self.identity_attribute_order.as_deref().unwrap_or_default()
    }
}
impl UpdateTypedLinkFacetInput {
    /// Creates a new builder-style object to manufacture [`UpdateTypedLinkFacetInput`](crate::operation::update_typed_link_facet::UpdateTypedLinkFacetInput).
    pub fn builder() -> crate::operation::update_typed_link_facet::builders::UpdateTypedLinkFacetInputBuilder {
        crate::operation::update_typed_link_facet::builders::UpdateTypedLinkFacetInputBuilder::default()
    }
}

/// A builder for [`UpdateTypedLinkFacetInput`](crate::operation::update_typed_link_facet::UpdateTypedLinkFacetInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateTypedLinkFacetInputBuilder {
    pub(crate) schema_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_updates: ::std::option::Option<::std::vec::Vec<crate::types::TypedLinkFacetAttributeUpdate>>,
    pub(crate) identity_attribute_order: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateTypedLinkFacetInputBuilder {
    /// <p>The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <code>arns</code>.</p>
    /// This field is required.
    pub fn schema_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <code>arns</code>.</p>
    pub fn set_schema_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the schema. For more information, see <code>arns</code>.</p>
    pub fn get_schema_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_arn
    }
    /// <p>The unique name of the typed link facet.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the typed link facet.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The unique name of the typed link facet.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `attribute_updates`.
    ///
    /// To override the contents of this collection use [`set_attribute_updates`](Self::set_attribute_updates).
    ///
    /// <p>Attributes update structure.</p>
    pub fn attribute_updates(mut self, input: crate::types::TypedLinkFacetAttributeUpdate) -> Self {
        let mut v = self.attribute_updates.unwrap_or_default();
        v.push(input);
        self.attribute_updates = ::std::option::Option::Some(v);
        self
    }
    /// <p>Attributes update structure.</p>
    pub fn set_attribute_updates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TypedLinkFacetAttributeUpdate>>) -> Self {
        self.attribute_updates = input;
        self
    }
    /// <p>Attributes update structure.</p>
    pub fn get_attribute_updates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TypedLinkFacetAttributeUpdate>> {
        &self.attribute_updates
    }
    /// Appends an item to `identity_attribute_order`.
    ///
    /// To override the contents of this collection use [`set_identity_attribute_order`](Self::set_identity_attribute_order).
    ///
    /// <p>The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    pub fn identity_attribute_order(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.identity_attribute_order.unwrap_or_default();
        v.push(input.into());
        self.identity_attribute_order = ::std::option::Option::Some(v);
        self
    }
    /// <p>The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    pub fn set_identity_attribute_order(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.identity_attribute_order = input;
        self
    }
    /// <p>The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    pub fn get_identity_attribute_order(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.identity_attribute_order
    }
    /// Consumes the builder and constructs a [`UpdateTypedLinkFacetInput`](crate::operation::update_typed_link_facet::UpdateTypedLinkFacetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_typed_link_facet::UpdateTypedLinkFacetInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_typed_link_facet::UpdateTypedLinkFacetInput {
            schema_arn: self.schema_arn,
            name: self.name,
            attribute_updates: self.attribute_updates,
            identity_attribute_order: self.identity_attribute_order,
        })
    }
}
