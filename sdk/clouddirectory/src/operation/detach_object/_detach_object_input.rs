// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetachObjectInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where objects reside. For more information, see <code>arns</code>.</p>
    pub directory_arn: ::std::option::Option<::std::string::String>,
    /// <p>The parent reference from which the object with the specified link name is detached.</p>
    pub parent_reference: ::std::option::Option<crate::types::ObjectReference>,
    /// <p>The link name associated with the object that needs to be detached.</p>
    pub link_name: ::std::option::Option<::std::string::String>,
}
impl DetachObjectInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where objects reside. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(&self) -> ::std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>The parent reference from which the object with the specified link name is detached.</p>
    pub fn parent_reference(&self) -> ::std::option::Option<&crate::types::ObjectReference> {
        self.parent_reference.as_ref()
    }
    /// <p>The link name associated with the object that needs to be detached.</p>
    pub fn link_name(&self) -> ::std::option::Option<&str> {
        self.link_name.as_deref()
    }
}
impl DetachObjectInput {
    /// Creates a new builder-style object to manufacture [`DetachObjectInput`](crate::operation::detach_object::DetachObjectInput).
    pub fn builder() -> crate::operation::detach_object::builders::DetachObjectInputBuilder {
        crate::operation::detach_object::builders::DetachObjectInputBuilder::default()
    }
}

/// A builder for [`DetachObjectInput`](crate::operation::detach_object::DetachObjectInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DetachObjectInputBuilder {
    pub(crate) directory_arn: ::std::option::Option<::std::string::String>,
    pub(crate) parent_reference: ::std::option::Option<crate::types::ObjectReference>,
    pub(crate) link_name: ::std::option::Option<::std::string::String>,
}
impl DetachObjectInputBuilder {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where objects reside. For more information, see <code>arns</code>.</p>
    /// This field is required.
    pub fn directory_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where objects reside. For more information, see <code>arns</code>.</p>
    pub fn set_directory_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where objects reside. For more information, see <code>arns</code>.</p>
    pub fn get_directory_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_arn
    }
    /// <p>The parent reference from which the object with the specified link name is detached.</p>
    /// This field is required.
    pub fn parent_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.parent_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parent reference from which the object with the specified link name is detached.</p>
    pub fn set_parent_reference(mut self, input: ::std::option::Option<crate::types::ObjectReference>) -> Self {
        self.parent_reference = input;
        self
    }
    /// <p>The parent reference from which the object with the specified link name is detached.</p>
    pub fn get_parent_reference(&self) -> &::std::option::Option<crate::types::ObjectReference> {
        &self.parent_reference
    }
    /// <p>The link name associated with the object that needs to be detached.</p>
    /// This field is required.
    pub fn link_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.link_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The link name associated with the object that needs to be detached.</p>
    pub fn set_link_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.link_name = input;
        self
    }
    /// <p>The link name associated with the object that needs to be detached.</p>
    pub fn get_link_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.link_name
    }
    /// Consumes the builder and constructs a [`DetachObjectInput`](crate::operation::detach_object::DetachObjectInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::detach_object::DetachObjectInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::detach_object::DetachObjectInput {
            directory_arn: self.directory_arn,
            parent_reference: self.parent_reference,
            link_name: self.link_name,
        })
    }
}
