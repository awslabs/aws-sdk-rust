// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListOutgoingTypedLinksInput {
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed links.</p>
    #[doc(hidden)]
    pub directory_arn: std::option::Option<std::string::String>,
    /// <p>A reference that identifies the object whose attributes will be listed.</p>
    #[doc(hidden)]
    pub object_reference: std::option::Option<crate::types::ObjectReference>,
    /// <p>Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.</p>
    #[doc(hidden)]
    pub filter_attribute_ranges:
        std::option::Option<std::vec::Vec<crate::types::TypedLinkAttributeRange>>,
    /// <p>Filters are interpreted in the order of the attributes defined on the typed link facet, not the order they are supplied to any API calls.</p>
    #[doc(hidden)]
    pub filter_typed_link: std::option::Option<crate::types::TypedLinkSchemaAndFacetName>,
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to retrieve.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The consistency level to execute the request at.</p>
    #[doc(hidden)]
    pub consistency_level: std::option::Option<crate::types::ConsistencyLevel>,
}
impl ListOutgoingTypedLinksInput {
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed links.</p>
    pub fn directory_arn(&self) -> std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>A reference that identifies the object whose attributes will be listed.</p>
    pub fn object_reference(&self) -> std::option::Option<&crate::types::ObjectReference> {
        self.object_reference.as_ref()
    }
    /// <p>Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.</p>
    pub fn filter_attribute_ranges(
        &self,
    ) -> std::option::Option<&[crate::types::TypedLinkAttributeRange]> {
        self.filter_attribute_ranges.as_deref()
    }
    /// <p>Filters are interpreted in the order of the attributes defined on the typed link facet, not the order they are supplied to any API calls.</p>
    pub fn filter_typed_link(
        &self,
    ) -> std::option::Option<&crate::types::TypedLinkSchemaAndFacetName> {
        self.filter_typed_link.as_ref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to retrieve.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The consistency level to execute the request at.</p>
    pub fn consistency_level(&self) -> std::option::Option<&crate::types::ConsistencyLevel> {
        self.consistency_level.as_ref()
    }
}
impl ListOutgoingTypedLinksInput {
    /// Creates a new builder-style object to manufacture [`ListOutgoingTypedLinksInput`](crate::operation::list_outgoing_typed_links::ListOutgoingTypedLinksInput).
    pub fn builder(
    ) -> crate::operation::list_outgoing_typed_links::builders::ListOutgoingTypedLinksInputBuilder
    {
        crate::operation::list_outgoing_typed_links::builders::ListOutgoingTypedLinksInputBuilder::default()
    }
}

/// A builder for [`ListOutgoingTypedLinksInput`](crate::operation::list_outgoing_typed_links::ListOutgoingTypedLinksInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListOutgoingTypedLinksInputBuilder {
    pub(crate) directory_arn: std::option::Option<std::string::String>,
    pub(crate) object_reference: std::option::Option<crate::types::ObjectReference>,
    pub(crate) filter_attribute_ranges:
        std::option::Option<std::vec::Vec<crate::types::TypedLinkAttributeRange>>,
    pub(crate) filter_typed_link: std::option::Option<crate::types::TypedLinkSchemaAndFacetName>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) consistency_level: std::option::Option<crate::types::ConsistencyLevel>,
}
impl ListOutgoingTypedLinksInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed links.</p>
    pub fn directory_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed links.</p>
    pub fn set_directory_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// <p>A reference that identifies the object whose attributes will be listed.</p>
    pub fn object_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.object_reference = Some(input);
        self
    }
    /// <p>A reference that identifies the object whose attributes will be listed.</p>
    pub fn set_object_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.object_reference = input;
        self
    }
    /// Appends an item to `filter_attribute_ranges`.
    ///
    /// To override the contents of this collection use [`set_filter_attribute_ranges`](Self::set_filter_attribute_ranges).
    ///
    /// <p>Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.</p>
    pub fn filter_attribute_ranges(mut self, input: crate::types::TypedLinkAttributeRange) -> Self {
        let mut v = self.filter_attribute_ranges.unwrap_or_default();
        v.push(input);
        self.filter_attribute_ranges = Some(v);
        self
    }
    /// <p>Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.</p>
    pub fn set_filter_attribute_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TypedLinkAttributeRange>>,
    ) -> Self {
        self.filter_attribute_ranges = input;
        self
    }
    /// <p>Filters are interpreted in the order of the attributes defined on the typed link facet, not the order they are supplied to any API calls.</p>
    pub fn filter_typed_link(mut self, input: crate::types::TypedLinkSchemaAndFacetName) -> Self {
        self.filter_typed_link = Some(input);
        self
    }
    /// <p>Filters are interpreted in the order of the attributes defined on the typed link facet, not the order they are supplied to any API calls.</p>
    pub fn set_filter_typed_link(
        mut self,
        input: std::option::Option<crate::types::TypedLinkSchemaAndFacetName>,
    ) -> Self {
        self.filter_typed_link = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to retrieve.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to retrieve.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The consistency level to execute the request at.</p>
    pub fn consistency_level(mut self, input: crate::types::ConsistencyLevel) -> Self {
        self.consistency_level = Some(input);
        self
    }
    /// <p>The consistency level to execute the request at.</p>
    pub fn set_consistency_level(
        mut self,
        input: std::option::Option<crate::types::ConsistencyLevel>,
    ) -> Self {
        self.consistency_level = input;
        self
    }
    /// Consumes the builder and constructs a [`ListOutgoingTypedLinksInput`](crate::operation::list_outgoing_typed_links::ListOutgoingTypedLinksInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_outgoing_typed_links::ListOutgoingTypedLinksInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_outgoing_typed_links::ListOutgoingTypedLinksInput {
                directory_arn: self.directory_arn,
                object_reference: self.object_reference,
                filter_attribute_ranges: self.filter_attribute_ranges,
                filter_typed_link: self.filter_typed_link,
                next_token: self.next_token,
                max_results: self.max_results,
                consistency_level: self.consistency_level,
            },
        )
    }
}
