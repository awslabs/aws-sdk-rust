// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListIncomingTypedLinksInput {
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed links.</p>
    pub directory_arn: ::std::option::Option<::std::string::String>,
    /// <p>Reference that identifies the object whose attributes will be listed.</p>
    pub object_reference: ::std::option::Option<crate::types::ObjectReference>,
    /// <p>Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.</p>
    pub filter_attribute_ranges: ::std::option::Option<::std::vec::Vec<crate::types::TypedLinkAttributeRange>>,
    /// <p>Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.</p>
    pub filter_typed_link: ::std::option::Option<crate::types::TypedLinkSchemaAndFacetName>,
    /// <p>The pagination token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to retrieve.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The consistency level to execute the request at.</p>
    pub consistency_level: ::std::option::Option<crate::types::ConsistencyLevel>,
}
impl ListIncomingTypedLinksInput {
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed links.</p>
    pub fn directory_arn(&self) -> ::std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>Reference that identifies the object whose attributes will be listed.</p>
    pub fn object_reference(&self) -> ::std::option::Option<&crate::types::ObjectReference> {
        self.object_reference.as_ref()
    }
    /// <p>Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_attribute_ranges.is_none()`.
    pub fn filter_attribute_ranges(&self) -> &[crate::types::TypedLinkAttributeRange] {
        self.filter_attribute_ranges.as_deref().unwrap_or_default()
    }
    /// <p>Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.</p>
    pub fn filter_typed_link(&self) -> ::std::option::Option<&crate::types::TypedLinkSchemaAndFacetName> {
        self.filter_typed_link.as_ref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to retrieve.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The consistency level to execute the request at.</p>
    pub fn consistency_level(&self) -> ::std::option::Option<&crate::types::ConsistencyLevel> {
        self.consistency_level.as_ref()
    }
}
impl ListIncomingTypedLinksInput {
    /// Creates a new builder-style object to manufacture [`ListIncomingTypedLinksInput`](crate::operation::list_incoming_typed_links::ListIncomingTypedLinksInput).
    pub fn builder() -> crate::operation::list_incoming_typed_links::builders::ListIncomingTypedLinksInputBuilder {
        crate::operation::list_incoming_typed_links::builders::ListIncomingTypedLinksInputBuilder::default()
    }
}

/// A builder for [`ListIncomingTypedLinksInput`](crate::operation::list_incoming_typed_links::ListIncomingTypedLinksInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListIncomingTypedLinksInputBuilder {
    pub(crate) directory_arn: ::std::option::Option<::std::string::String>,
    pub(crate) object_reference: ::std::option::Option<crate::types::ObjectReference>,
    pub(crate) filter_attribute_ranges: ::std::option::Option<::std::vec::Vec<crate::types::TypedLinkAttributeRange>>,
    pub(crate) filter_typed_link: ::std::option::Option<crate::types::TypedLinkSchemaAndFacetName>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) consistency_level: ::std::option::Option<crate::types::ConsistencyLevel>,
}
impl ListIncomingTypedLinksInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed links.</p>
    /// This field is required.
    pub fn directory_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed links.</p>
    pub fn set_directory_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed links.</p>
    pub fn get_directory_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_arn
    }
    /// <p>Reference that identifies the object whose attributes will be listed.</p>
    /// This field is required.
    pub fn object_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.object_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reference that identifies the object whose attributes will be listed.</p>
    pub fn set_object_reference(mut self, input: ::std::option::Option<crate::types::ObjectReference>) -> Self {
        self.object_reference = input;
        self
    }
    /// <p>Reference that identifies the object whose attributes will be listed.</p>
    pub fn get_object_reference(&self) -> &::std::option::Option<crate::types::ObjectReference> {
        &self.object_reference
    }
    /// Appends an item to `filter_attribute_ranges`.
    ///
    /// To override the contents of this collection use [`set_filter_attribute_ranges`](Self::set_filter_attribute_ranges).
    ///
    /// <p>Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.</p>
    pub fn filter_attribute_ranges(mut self, input: crate::types::TypedLinkAttributeRange) -> Self {
        let mut v = self.filter_attribute_ranges.unwrap_or_default();
        v.push(input);
        self.filter_attribute_ranges = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.</p>
    pub fn set_filter_attribute_ranges(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TypedLinkAttributeRange>>) -> Self {
        self.filter_attribute_ranges = input;
        self
    }
    /// <p>Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.</p>
    pub fn get_filter_attribute_ranges(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TypedLinkAttributeRange>> {
        &self.filter_attribute_ranges
    }
    /// <p>Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.</p>
    pub fn filter_typed_link(mut self, input: crate::types::TypedLinkSchemaAndFacetName) -> Self {
        self.filter_typed_link = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.</p>
    pub fn set_filter_typed_link(mut self, input: ::std::option::Option<crate::types::TypedLinkSchemaAndFacetName>) -> Self {
        self.filter_typed_link = input;
        self
    }
    /// <p>Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.</p>
    pub fn get_filter_typed_link(&self) -> &::std::option::Option<crate::types::TypedLinkSchemaAndFacetName> {
        &self.filter_typed_link
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to retrieve.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to retrieve.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to retrieve.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The consistency level to execute the request at.</p>
    pub fn consistency_level(mut self, input: crate::types::ConsistencyLevel) -> Self {
        self.consistency_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The consistency level to execute the request at.</p>
    pub fn set_consistency_level(mut self, input: ::std::option::Option<crate::types::ConsistencyLevel>) -> Self {
        self.consistency_level = input;
        self
    }
    /// <p>The consistency level to execute the request at.</p>
    pub fn get_consistency_level(&self) -> &::std::option::Option<crate::types::ConsistencyLevel> {
        &self.consistency_level
    }
    /// Consumes the builder and constructs a [`ListIncomingTypedLinksInput`](crate::operation::list_incoming_typed_links::ListIncomingTypedLinksInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_incoming_typed_links::ListIncomingTypedLinksInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_incoming_typed_links::ListIncomingTypedLinksInput {
            directory_arn: self.directory_arn,
            object_reference: self.object_reference,
            filter_attribute_ranges: self.filter_attribute_ranges,
            filter_typed_link: self.filter_typed_link,
            next_token: self.next_token,
            max_results: self.max_results,
            consistency_level: self.consistency_level,
        })
    }
}
