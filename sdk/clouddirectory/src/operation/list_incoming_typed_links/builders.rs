// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_incoming_typed_links::_list_incoming_typed_links_output::ListIncomingTypedLinksOutputBuilder;

pub use crate::operation::list_incoming_typed_links::_list_incoming_typed_links_input::ListIncomingTypedLinksInputBuilder;

/// Fluent builder constructing a request to `ListIncomingTypedLinks`.
///
/// <p>Returns a paginated list of all the incoming <code>TypedLinkSpecifier</code> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListIncomingTypedLinksFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::list_incoming_typed_links::builders::ListIncomingTypedLinksInputBuilder,
}
impl ListIncomingTypedLinksFluentBuilder {
    /// Creates a new `ListIncomingTypedLinks`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_incoming_typed_links::ListIncomingTypedLinks,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_incoming_typed_links::ListIncomingTypedLinksError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_incoming_typed_links::ListIncomingTypedLinksOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_incoming_typed_links::ListIncomingTypedLinksError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed links.</p>
    pub fn directory_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.directory_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to list the typed links.</p>
    pub fn set_directory_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_directory_arn(input);
        self
    }
    /// <p>Reference that identifies the object whose attributes will be listed.</p>
    pub fn object_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.inner = self.inner.object_reference(input);
        self
    }
    /// <p>Reference that identifies the object whose attributes will be listed.</p>
    pub fn set_object_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.inner = self.inner.set_object_reference(input);
        self
    }
    /// Appends an item to `FilterAttributeRanges`.
    ///
    /// To override the contents of this collection use [`set_filter_attribute_ranges`](Self::set_filter_attribute_ranges).
    ///
    /// <p>Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.</p>
    pub fn filter_attribute_ranges(mut self, input: crate::types::TypedLinkAttributeRange) -> Self {
        self.inner = self.inner.filter_attribute_ranges(input);
        self
    }
    /// <p>Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.</p>
    pub fn set_filter_attribute_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TypedLinkAttributeRange>>,
    ) -> Self {
        self.inner = self.inner.set_filter_attribute_ranges(input);
        self
    }
    /// <p>Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.</p>
    pub fn filter_typed_link(mut self, input: crate::types::TypedLinkSchemaAndFacetName) -> Self {
        self.inner = self.inner.filter_typed_link(input);
        self
    }
    /// <p>Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.</p>
    pub fn set_filter_typed_link(
        mut self,
        input: std::option::Option<crate::types::TypedLinkSchemaAndFacetName>,
    ) -> Self {
        self.inner = self.inner.set_filter_typed_link(input);
        self
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to retrieve.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to retrieve.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The consistency level to execute the request at.</p>
    pub fn consistency_level(mut self, input: crate::types::ConsistencyLevel) -> Self {
        self.inner = self.inner.consistency_level(input);
        self
    }
    /// <p>The consistency level to execute the request at.</p>
    pub fn set_consistency_level(
        mut self,
        input: std::option::Option<crate::types::ConsistencyLevel>,
    ) -> Self {
        self.inner = self.inner.set_consistency_level(input);
        self
    }
}
