// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateObjectInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> in which the object will be created. For more information, see <code>arns</code>.</p>
    #[doc(hidden)]
    pub directory_arn: std::option::Option<std::string::String>,
    /// <p>A list of schema facets to be associated with the object. Do not provide minor version components. See <code>SchemaFacet</code> for details.</p>
    #[doc(hidden)]
    pub schema_facets: std::option::Option<std::vec::Vec<crate::types::SchemaFacet>>,
    /// <p>The attribute map whose attribute ARN contains the key and attribute value as the map value.</p>
    #[doc(hidden)]
    pub object_attribute_list:
        std::option::Option<std::vec::Vec<crate::types::AttributeKeyAndValue>>,
    /// <p>If specified, the parent reference to which this object will be attached.</p>
    #[doc(hidden)]
    pub parent_reference: std::option::Option<crate::types::ObjectReference>,
    /// <p>The name of link that is used to attach this object to a parent.</p>
    #[doc(hidden)]
    pub link_name: std::option::Option<std::string::String>,
}
impl CreateObjectInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> in which the object will be created. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(&self) -> std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>A list of schema facets to be associated with the object. Do not provide minor version components. See <code>SchemaFacet</code> for details.</p>
    pub fn schema_facets(&self) -> std::option::Option<&[crate::types::SchemaFacet]> {
        self.schema_facets.as_deref()
    }
    /// <p>The attribute map whose attribute ARN contains the key and attribute value as the map value.</p>
    pub fn object_attribute_list(
        &self,
    ) -> std::option::Option<&[crate::types::AttributeKeyAndValue]> {
        self.object_attribute_list.as_deref()
    }
    /// <p>If specified, the parent reference to which this object will be attached.</p>
    pub fn parent_reference(&self) -> std::option::Option<&crate::types::ObjectReference> {
        self.parent_reference.as_ref()
    }
    /// <p>The name of link that is used to attach this object to a parent.</p>
    pub fn link_name(&self) -> std::option::Option<&str> {
        self.link_name.as_deref()
    }
}
impl CreateObjectInput {
    /// Creates a new builder-style object to manufacture [`CreateObjectInput`](crate::operation::create_object::CreateObjectInput).
    pub fn builder() -> crate::operation::create_object::builders::CreateObjectInputBuilder {
        crate::operation::create_object::builders::CreateObjectInputBuilder::default()
    }
}

/// A builder for [`CreateObjectInput`](crate::operation::create_object::CreateObjectInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateObjectInputBuilder {
    pub(crate) directory_arn: std::option::Option<std::string::String>,
    pub(crate) schema_facets: std::option::Option<std::vec::Vec<crate::types::SchemaFacet>>,
    pub(crate) object_attribute_list:
        std::option::Option<std::vec::Vec<crate::types::AttributeKeyAndValue>>,
    pub(crate) parent_reference: std::option::Option<crate::types::ObjectReference>,
    pub(crate) link_name: std::option::Option<std::string::String>,
}
impl CreateObjectInputBuilder {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> in which the object will be created. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> in which the object will be created. For more information, see <code>arns</code>.</p>
    pub fn set_directory_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// Appends an item to `schema_facets`.
    ///
    /// To override the contents of this collection use [`set_schema_facets`](Self::set_schema_facets).
    ///
    /// <p>A list of schema facets to be associated with the object. Do not provide minor version components. See <code>SchemaFacet</code> for details.</p>
    pub fn schema_facets(mut self, input: crate::types::SchemaFacet) -> Self {
        let mut v = self.schema_facets.unwrap_or_default();
        v.push(input);
        self.schema_facets = Some(v);
        self
    }
    /// <p>A list of schema facets to be associated with the object. Do not provide minor version components. See <code>SchemaFacet</code> for details.</p>
    pub fn set_schema_facets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SchemaFacet>>,
    ) -> Self {
        self.schema_facets = input;
        self
    }
    /// Appends an item to `object_attribute_list`.
    ///
    /// To override the contents of this collection use [`set_object_attribute_list`](Self::set_object_attribute_list).
    ///
    /// <p>The attribute map whose attribute ARN contains the key and attribute value as the map value.</p>
    pub fn object_attribute_list(mut self, input: crate::types::AttributeKeyAndValue) -> Self {
        let mut v = self.object_attribute_list.unwrap_or_default();
        v.push(input);
        self.object_attribute_list = Some(v);
        self
    }
    /// <p>The attribute map whose attribute ARN contains the key and attribute value as the map value.</p>
    pub fn set_object_attribute_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AttributeKeyAndValue>>,
    ) -> Self {
        self.object_attribute_list = input;
        self
    }
    /// <p>If specified, the parent reference to which this object will be attached.</p>
    pub fn parent_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.parent_reference = Some(input);
        self
    }
    /// <p>If specified, the parent reference to which this object will be attached.</p>
    pub fn set_parent_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.parent_reference = input;
        self
    }
    /// <p>The name of link that is used to attach this object to a parent.</p>
    pub fn link_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.link_name = Some(input.into());
        self
    }
    /// <p>The name of link that is used to attach this object to a parent.</p>
    pub fn set_link_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.link_name = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateObjectInput`](crate::operation::create_object::CreateObjectInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_object::CreateObjectInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_object::CreateObjectInput {
            directory_arn: self.directory_arn,
            schema_facets: self.schema_facets,
            object_attribute_list: self.object_attribute_list,
            parent_reference: self.parent_reference,
            link_name: self.link_name,
        })
    }
}
