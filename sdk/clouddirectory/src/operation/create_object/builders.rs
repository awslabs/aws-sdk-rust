// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_object::_create_object_output::CreateObjectOutputBuilder;

pub use crate::operation::create_object::_create_object_input::CreateObjectInputBuilder;

impl CreateObjectInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_object::CreateObjectOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_object::CreateObjectError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_object();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateObject`.
///
/// <p>Creates an object in a <code>Directory</code>. Additionally attaches the object to a parent, if a parent reference and <code>LinkName</code> is specified. An object is simply a collection of <code>Facet</code> attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateObjectFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_object::builders::CreateObjectInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_object::CreateObjectOutput,
        crate::operation::create_object::CreateObjectError,
    > for CreateObjectFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_object::CreateObjectOutput,
            crate::operation::create_object::CreateObjectError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateObjectFluentBuilder {
    /// Creates a new `CreateObject`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateObject as a reference.
    pub fn as_input(&self) -> &crate::operation::create_object::builders::CreateObjectInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_object::CreateObjectOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_object::CreateObjectError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_object::CreateObject::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_object::CreateObject::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_object::CreateObjectOutput,
        crate::operation::create_object::CreateObjectError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> in which the object will be created. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.directory_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> in which the object will be created. For more information, see <code>arns</code>.</p>
    pub fn set_directory_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_directory_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> in which the object will be created. For more information, see <code>arns</code>.</p>
    pub fn get_directory_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_directory_arn()
    }
    /// Appends an item to `SchemaFacets`.
    ///
    /// To override the contents of this collection use [`set_schema_facets`](Self::set_schema_facets).
    ///
    /// <p>A list of schema facets to be associated with the object. Do not provide minor version components. See <code>SchemaFacet</code> for details.</p>
    pub fn schema_facets(mut self, input: crate::types::SchemaFacet) -> Self {
        self.inner = self.inner.schema_facets(input);
        self
    }
    /// <p>A list of schema facets to be associated with the object. Do not provide minor version components. See <code>SchemaFacet</code> for details.</p>
    pub fn set_schema_facets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SchemaFacet>>) -> Self {
        self.inner = self.inner.set_schema_facets(input);
        self
    }
    /// <p>A list of schema facets to be associated with the object. Do not provide minor version components. See <code>SchemaFacet</code> for details.</p>
    pub fn get_schema_facets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SchemaFacet>> {
        self.inner.get_schema_facets()
    }
    /// Appends an item to `ObjectAttributeList`.
    ///
    /// To override the contents of this collection use [`set_object_attribute_list`](Self::set_object_attribute_list).
    ///
    /// <p>The attribute map whose attribute ARN contains the key and attribute value as the map value.</p>
    pub fn object_attribute_list(mut self, input: crate::types::AttributeKeyAndValue) -> Self {
        self.inner = self.inner.object_attribute_list(input);
        self
    }
    /// <p>The attribute map whose attribute ARN contains the key and attribute value as the map value.</p>
    pub fn set_object_attribute_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttributeKeyAndValue>>) -> Self {
        self.inner = self.inner.set_object_attribute_list(input);
        self
    }
    /// <p>The attribute map whose attribute ARN contains the key and attribute value as the map value.</p>
    pub fn get_object_attribute_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttributeKeyAndValue>> {
        self.inner.get_object_attribute_list()
    }
    /// <p>If specified, the parent reference to which this object will be attached.</p>
    pub fn parent_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.inner = self.inner.parent_reference(input);
        self
    }
    /// <p>If specified, the parent reference to which this object will be attached.</p>
    pub fn set_parent_reference(mut self, input: ::std::option::Option<crate::types::ObjectReference>) -> Self {
        self.inner = self.inner.set_parent_reference(input);
        self
    }
    /// <p>If specified, the parent reference to which this object will be attached.</p>
    pub fn get_parent_reference(&self) -> &::std::option::Option<crate::types::ObjectReference> {
        self.inner.get_parent_reference()
    }
    /// <p>The name of link that is used to attach this object to a parent.</p>
    pub fn link_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.link_name(input.into());
        self
    }
    /// <p>The name of link that is used to attach this object to a parent.</p>
    pub fn set_link_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_link_name(input);
        self
    }
    /// <p>The name of link that is used to attach this object to a parent.</p>
    pub fn get_link_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_link_name()
    }
}
