// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetachFromIndexInput {
    /// <p>The Amazon Resource Name (ARN) of the directory the index and object exist in.</p>
    #[doc(hidden)]
    pub directory_arn: std::option::Option<std::string::String>,
    /// <p>A reference to the index object.</p>
    #[doc(hidden)]
    pub index_reference: std::option::Option<crate::types::ObjectReference>,
    /// <p>A reference to the object being detached from the index.</p>
    #[doc(hidden)]
    pub target_reference: std::option::Option<crate::types::ObjectReference>,
}
impl DetachFromIndexInput {
    /// <p>The Amazon Resource Name (ARN) of the directory the index and object exist in.</p>
    pub fn directory_arn(&self) -> std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>A reference to the index object.</p>
    pub fn index_reference(&self) -> std::option::Option<&crate::types::ObjectReference> {
        self.index_reference.as_ref()
    }
    /// <p>A reference to the object being detached from the index.</p>
    pub fn target_reference(&self) -> std::option::Option<&crate::types::ObjectReference> {
        self.target_reference.as_ref()
    }
}
impl DetachFromIndexInput {
    /// Creates a new builder-style object to manufacture [`DetachFromIndexInput`](crate::operation::detach_from_index::DetachFromIndexInput).
    pub fn builder() -> crate::operation::detach_from_index::builders::DetachFromIndexInputBuilder {
        crate::operation::detach_from_index::builders::DetachFromIndexInputBuilder::default()
    }
}

/// A builder for [`DetachFromIndexInput`](crate::operation::detach_from_index::DetachFromIndexInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetachFromIndexInputBuilder {
    pub(crate) directory_arn: std::option::Option<std::string::String>,
    pub(crate) index_reference: std::option::Option<crate::types::ObjectReference>,
    pub(crate) target_reference: std::option::Option<crate::types::ObjectReference>,
}
impl DetachFromIndexInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the directory the index and object exist in.</p>
    pub fn directory_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the directory the index and object exist in.</p>
    pub fn set_directory_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// <p>A reference to the index object.</p>
    pub fn index_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.index_reference = Some(input);
        self
    }
    /// <p>A reference to the index object.</p>
    pub fn set_index_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.index_reference = input;
        self
    }
    /// <p>A reference to the object being detached from the index.</p>
    pub fn target_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.target_reference = Some(input);
        self
    }
    /// <p>A reference to the object being detached from the index.</p>
    pub fn set_target_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.target_reference = input;
        self
    }
    /// Consumes the builder and constructs a [`DetachFromIndexInput`](crate::operation::detach_from_index::DetachFromIndexInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::detach_from_index::DetachFromIndexInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::detach_from_index::DetachFromIndexInput {
            directory_arn: self.directory_arn,
            index_reference: self.index_reference,
            target_reference: self.target_reference,
        })
    }
}
