// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpgradeAppliedSchemaInput {
    /// <p>The revision of the published schema to upgrade the directory to.</p>
    #[doc(hidden)]
    pub published_schema_arn: std::option::Option<std::string::String>,
    /// <p>The ARN for the directory to which the upgraded schema will be applied.</p>
    #[doc(hidden)]
    pub directory_arn: std::option::Option<std::string::String>,
    /// <p>Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.</p>
    #[doc(hidden)]
    pub dry_run: bool,
}
impl UpgradeAppliedSchemaInput {
    /// <p>The revision of the published schema to upgrade the directory to.</p>
    pub fn published_schema_arn(&self) -> std::option::Option<&str> {
        self.published_schema_arn.as_deref()
    }
    /// <p>The ARN for the directory to which the upgraded schema will be applied.</p>
    pub fn directory_arn(&self) -> std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.</p>
    pub fn dry_run(&self) -> bool {
        self.dry_run
    }
}
impl UpgradeAppliedSchemaInput {
    /// Creates a new builder-style object to manufacture [`UpgradeAppliedSchemaInput`](crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaInput).
    pub fn builder(
    ) -> crate::operation::upgrade_applied_schema::builders::UpgradeAppliedSchemaInputBuilder {
        crate::operation::upgrade_applied_schema::builders::UpgradeAppliedSchemaInputBuilder::default()
    }
}

/// A builder for [`UpgradeAppliedSchemaInput`](crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpgradeAppliedSchemaInputBuilder {
    pub(crate) published_schema_arn: std::option::Option<std::string::String>,
    pub(crate) directory_arn: std::option::Option<std::string::String>,
    pub(crate) dry_run: std::option::Option<bool>,
}
impl UpgradeAppliedSchemaInputBuilder {
    /// <p>The revision of the published schema to upgrade the directory to.</p>
    pub fn published_schema_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.published_schema_arn = Some(input.into());
        self
    }
    /// <p>The revision of the published schema to upgrade the directory to.</p>
    pub fn set_published_schema_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.published_schema_arn = input;
        self
    }
    /// <p>The ARN for the directory to which the upgraded schema will be applied.</p>
    pub fn directory_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_arn = Some(input.into());
        self
    }
    /// <p>The ARN for the directory to which the upgraded schema will be applied.</p>
    pub fn set_directory_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// <p>Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// Consumes the builder and constructs a [`UpgradeAppliedSchemaInput`](crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaInput {
                published_schema_arn: self.published_schema_arn,
                directory_arn: self.directory_arn,
                dry_run: self.dry_run.unwrap_or_default(),
            },
        )
    }
}
