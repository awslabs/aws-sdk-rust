// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::upgrade_applied_schema::_upgrade_applied_schema_output::UpgradeAppliedSchemaOutputBuilder;

pub use crate::operation::upgrade_applied_schema::_upgrade_applied_schema_input::UpgradeAppliedSchemaInputBuilder;

impl UpgradeAppliedSchemaInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.upgrade_applied_schema();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpgradeAppliedSchema`.
///
/// <p>Upgrades a single directory in-place using the <code>PublishedSchemaArn</code> with schema updates found in <code>MinorVersion</code>. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpgradeAppliedSchemaFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::upgrade_applied_schema::builders::UpgradeAppliedSchemaInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaOutput,
        crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaError,
    > for UpgradeAppliedSchemaFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaOutput,
            crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpgradeAppliedSchemaFluentBuilder {
    /// Creates a new `UpgradeAppliedSchema`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpgradeAppliedSchema as a reference.
    pub fn as_input(&self) -> &crate::operation::upgrade_applied_schema::builders::UpgradeAppliedSchemaInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::upgrade_applied_schema::UpgradeAppliedSchema::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::upgrade_applied_schema::UpgradeAppliedSchema::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaOutput,
        crate::operation::upgrade_applied_schema::UpgradeAppliedSchemaError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The revision of the published schema to upgrade the directory to.</p>
    pub fn published_schema_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.published_schema_arn(input.into());
        self
    }
    /// <p>The revision of the published schema to upgrade the directory to.</p>
    pub fn set_published_schema_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_published_schema_arn(input);
        self
    }
    /// <p>The revision of the published schema to upgrade the directory to.</p>
    pub fn get_published_schema_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_published_schema_arn()
    }
    /// <p>The ARN for the directory to which the upgraded schema will be applied.</p>
    pub fn directory_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.directory_arn(input.into());
        self
    }
    /// <p>The ARN for the directory to which the upgraded schema will be applied.</p>
    pub fn set_directory_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_directory_arn(input);
        self
    }
    /// <p>The ARN for the directory to which the upgraded schema will be applied.</p>
    pub fn get_directory_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_directory_arn()
    }
    /// <p>Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
}
