// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttachTypedLinkInput {
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to attach the typed link.</p>
    pub directory_arn: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the source object that the typed link will attach to.</p>
    pub source_object_reference: ::std::option::Option<crate::types::ObjectReference>,
    /// <p>Identifies the target object that the typed link will attach to.</p>
    pub target_object_reference: ::std::option::Option<crate::types::ObjectReference>,
    /// <p>Identifies the typed link facet that is associated with the typed link.</p>
    pub typed_link_facet: ::std::option::Option<crate::types::TypedLinkSchemaAndFacetName>,
    /// <p>A set of attributes that are associated with the typed link.</p>
    pub attributes: ::std::option::Option<::std::vec::Vec<crate::types::AttributeNameAndValue>>,
}
impl AttachTypedLinkInput {
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to attach the typed link.</p>
    pub fn directory_arn(&self) -> ::std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>Identifies the source object that the typed link will attach to.</p>
    pub fn source_object_reference(&self) -> ::std::option::Option<&crate::types::ObjectReference> {
        self.source_object_reference.as_ref()
    }
    /// <p>Identifies the target object that the typed link will attach to.</p>
    pub fn target_object_reference(&self) -> ::std::option::Option<&crate::types::ObjectReference> {
        self.target_object_reference.as_ref()
    }
    /// <p>Identifies the typed link facet that is associated with the typed link.</p>
    pub fn typed_link_facet(&self) -> ::std::option::Option<&crate::types::TypedLinkSchemaAndFacetName> {
        self.typed_link_facet.as_ref()
    }
    /// <p>A set of attributes that are associated with the typed link.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attributes.is_none()`.
    pub fn attributes(&self) -> &[crate::types::AttributeNameAndValue] {
        self.attributes.as_deref().unwrap_or_default()
    }
}
impl AttachTypedLinkInput {
    /// Creates a new builder-style object to manufacture [`AttachTypedLinkInput`](crate::operation::attach_typed_link::AttachTypedLinkInput).
    pub fn builder() -> crate::operation::attach_typed_link::builders::AttachTypedLinkInputBuilder {
        crate::operation::attach_typed_link::builders::AttachTypedLinkInputBuilder::default()
    }
}

/// A builder for [`AttachTypedLinkInput`](crate::operation::attach_typed_link::AttachTypedLinkInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AttachTypedLinkInputBuilder {
    pub(crate) directory_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_object_reference: ::std::option::Option<crate::types::ObjectReference>,
    pub(crate) target_object_reference: ::std::option::Option<crate::types::ObjectReference>,
    pub(crate) typed_link_facet: ::std::option::Option<crate::types::TypedLinkSchemaAndFacetName>,
    pub(crate) attributes: ::std::option::Option<::std::vec::Vec<crate::types::AttributeNameAndValue>>,
}
impl AttachTypedLinkInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to attach the typed link.</p>
    /// This field is required.
    pub fn directory_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to attach the typed link.</p>
    pub fn set_directory_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the directory where you want to attach the typed link.</p>
    pub fn get_directory_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_arn
    }
    /// <p>Identifies the source object that the typed link will attach to.</p>
    /// This field is required.
    pub fn source_object_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.source_object_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the source object that the typed link will attach to.</p>
    pub fn set_source_object_reference(mut self, input: ::std::option::Option<crate::types::ObjectReference>) -> Self {
        self.source_object_reference = input;
        self
    }
    /// <p>Identifies the source object that the typed link will attach to.</p>
    pub fn get_source_object_reference(&self) -> &::std::option::Option<crate::types::ObjectReference> {
        &self.source_object_reference
    }
    /// <p>Identifies the target object that the typed link will attach to.</p>
    /// This field is required.
    pub fn target_object_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.target_object_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the target object that the typed link will attach to.</p>
    pub fn set_target_object_reference(mut self, input: ::std::option::Option<crate::types::ObjectReference>) -> Self {
        self.target_object_reference = input;
        self
    }
    /// <p>Identifies the target object that the typed link will attach to.</p>
    pub fn get_target_object_reference(&self) -> &::std::option::Option<crate::types::ObjectReference> {
        &self.target_object_reference
    }
    /// <p>Identifies the typed link facet that is associated with the typed link.</p>
    /// This field is required.
    pub fn typed_link_facet(mut self, input: crate::types::TypedLinkSchemaAndFacetName) -> Self {
        self.typed_link_facet = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the typed link facet that is associated with the typed link.</p>
    pub fn set_typed_link_facet(mut self, input: ::std::option::Option<crate::types::TypedLinkSchemaAndFacetName>) -> Self {
        self.typed_link_facet = input;
        self
    }
    /// <p>Identifies the typed link facet that is associated with the typed link.</p>
    pub fn get_typed_link_facet(&self) -> &::std::option::Option<crate::types::TypedLinkSchemaAndFacetName> {
        &self.typed_link_facet
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A set of attributes that are associated with the typed link.</p>
    pub fn attributes(mut self, input: crate::types::AttributeNameAndValue) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A set of attributes that are associated with the typed link.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttributeNameAndValue>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>A set of attributes that are associated with the typed link.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttributeNameAndValue>> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`AttachTypedLinkInput`](crate::operation::attach_typed_link::AttachTypedLinkInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::attach_typed_link::AttachTypedLinkInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::attach_typed_link::AttachTypedLinkInput {
            directory_arn: self.directory_arn,
            source_object_reference: self.source_object_reference,
            target_object_reference: self.target_object_reference,
            typed_link_facet: self.typed_link_facet,
            attributes: self.attributes,
        })
    }
}
