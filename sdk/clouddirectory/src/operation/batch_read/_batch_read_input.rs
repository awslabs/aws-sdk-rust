// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchReadInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    pub directory_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of operations that are part of the batch.</p>
    pub operations: ::std::option::Option<::std::vec::Vec<crate::types::BatchReadOperation>>,
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    pub consistency_level: ::std::option::Option<crate::types::ConsistencyLevel>,
}
impl BatchReadInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(&self) -> ::std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>A list of operations that are part of the batch.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.operations.is_none()`.
    pub fn operations(&self) -> &[crate::types::BatchReadOperation] {
        self.operations.as_deref().unwrap_or_default()
    }
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    pub fn consistency_level(&self) -> ::std::option::Option<&crate::types::ConsistencyLevel> {
        self.consistency_level.as_ref()
    }
}
impl BatchReadInput {
    /// Creates a new builder-style object to manufacture [`BatchReadInput`](crate::operation::batch_read::BatchReadInput).
    pub fn builder() -> crate::operation::batch_read::builders::BatchReadInputBuilder {
        crate::operation::batch_read::builders::BatchReadInputBuilder::default()
    }
}

/// A builder for [`BatchReadInput`](crate::operation::batch_read::BatchReadInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchReadInputBuilder {
    pub(crate) directory_arn: ::std::option::Option<::std::string::String>,
    pub(crate) operations: ::std::option::Option<::std::vec::Vec<crate::types::BatchReadOperation>>,
    pub(crate) consistency_level: ::std::option::Option<crate::types::ConsistencyLevel>,
}
impl BatchReadInputBuilder {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    /// This field is required.
    pub fn directory_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    pub fn set_directory_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    pub fn get_directory_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_arn
    }
    /// Appends an item to `operations`.
    ///
    /// To override the contents of this collection use [`set_operations`](Self::set_operations).
    ///
    /// <p>A list of operations that are part of the batch.</p>
    pub fn operations(mut self, input: crate::types::BatchReadOperation) -> Self {
        let mut v = self.operations.unwrap_or_default();
        v.push(input);
        self.operations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of operations that are part of the batch.</p>
    pub fn set_operations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BatchReadOperation>>) -> Self {
        self.operations = input;
        self
    }
    /// <p>A list of operations that are part of the batch.</p>
    pub fn get_operations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchReadOperation>> {
        &self.operations
    }
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    pub fn consistency_level(mut self, input: crate::types::ConsistencyLevel) -> Self {
        self.consistency_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    pub fn set_consistency_level(mut self, input: ::std::option::Option<crate::types::ConsistencyLevel>) -> Self {
        self.consistency_level = input;
        self
    }
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    pub fn get_consistency_level(&self) -> &::std::option::Option<crate::types::ConsistencyLevel> {
        &self.consistency_level
    }
    /// Consumes the builder and constructs a [`BatchReadInput`](crate::operation::batch_read::BatchReadInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::batch_read::BatchReadInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::batch_read::BatchReadInput {
            directory_arn: self.directory_arn,
            operations: self.operations,
            consistency_level: self.consistency_level,
        })
    }
}
