// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchReadInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    #[doc(hidden)]
    pub directory_arn: std::option::Option<std::string::String>,
    /// <p>A list of operations that are part of the batch.</p>
    #[doc(hidden)]
    pub operations: std::option::Option<std::vec::Vec<crate::types::BatchReadOperation>>,
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    #[doc(hidden)]
    pub consistency_level: std::option::Option<crate::types::ConsistencyLevel>,
}
impl BatchReadInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(&self) -> std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>A list of operations that are part of the batch.</p>
    pub fn operations(&self) -> std::option::Option<&[crate::types::BatchReadOperation]> {
        self.operations.as_deref()
    }
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    pub fn consistency_level(&self) -> std::option::Option<&crate::types::ConsistencyLevel> {
        self.consistency_level.as_ref()
    }
}
impl BatchReadInput {
    /// Creates a new builder-style object to manufacture [`BatchReadInput`](crate::operation::batch_read::BatchReadInput).
    pub fn builder() -> crate::operation::batch_read::builders::BatchReadInputBuilder {
        crate::operation::batch_read::builders::BatchReadInputBuilder::default()
    }
}

/// A builder for [`BatchReadInput`](crate::operation::batch_read::BatchReadInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchReadInputBuilder {
    pub(crate) directory_arn: std::option::Option<std::string::String>,
    pub(crate) operations: std::option::Option<std::vec::Vec<crate::types::BatchReadOperation>>,
    pub(crate) consistency_level: std::option::Option<crate::types::ConsistencyLevel>,
}
impl BatchReadInputBuilder {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code>. For more information, see <code>arns</code>.</p>
    pub fn set_directory_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// Appends an item to `operations`.
    ///
    /// To override the contents of this collection use [`set_operations`](Self::set_operations).
    ///
    /// <p>A list of operations that are part of the batch.</p>
    pub fn operations(mut self, input: crate::types::BatchReadOperation) -> Self {
        let mut v = self.operations.unwrap_or_default();
        v.push(input);
        self.operations = Some(v);
        self
    }
    /// <p>A list of operations that are part of the batch.</p>
    pub fn set_operations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BatchReadOperation>>,
    ) -> Self {
        self.operations = input;
        self
    }
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    pub fn consistency_level(mut self, input: crate::types::ConsistencyLevel) -> Self {
        self.consistency_level = Some(input);
        self
    }
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    pub fn set_consistency_level(
        mut self,
        input: std::option::Option<crate::types::ConsistencyLevel>,
    ) -> Self {
        self.consistency_level = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchReadInput`](crate::operation::batch_read::BatchReadInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::batch_read::BatchReadInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::batch_read::BatchReadInput {
            directory_arn: self.directory_arn,
            operations: self.operations,
            consistency_level: self.consistency_level,
        })
    }
}
