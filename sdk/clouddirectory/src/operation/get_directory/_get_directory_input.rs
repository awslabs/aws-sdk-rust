// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDirectoryInput {
    /// <p>The ARN of the directory.</p>
    #[doc(hidden)]
    pub directory_arn: std::option::Option<std::string::String>,
}
impl GetDirectoryInput {
    /// <p>The ARN of the directory.</p>
    pub fn directory_arn(&self) -> std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
}
impl GetDirectoryInput {
    /// Creates a new builder-style object to manufacture [`GetDirectoryInput`](crate::operation::get_directory::GetDirectoryInput).
    pub fn builder() -> crate::operation::get_directory::builders::GetDirectoryInputBuilder {
        crate::operation::get_directory::builders::GetDirectoryInputBuilder::default()
    }
}

/// A builder for [`GetDirectoryInput`](crate::operation::get_directory::GetDirectoryInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDirectoryInputBuilder {
    pub(crate) directory_arn: std::option::Option<std::string::String>,
}
impl GetDirectoryInputBuilder {
    /// <p>The ARN of the directory.</p>
    pub fn directory_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the directory.</p>
    pub fn set_directory_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`GetDirectoryInput`](crate::operation::get_directory::GetDirectoryInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_directory::GetDirectoryInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_directory::GetDirectoryInput {
            directory_arn: self.directory_arn,
        })
    }
}
