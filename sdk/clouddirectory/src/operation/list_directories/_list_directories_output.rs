// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDirectoriesOutput {
    /// <p>Lists all directories that are associated with your account in pagination fashion.</p>
    pub directories: ::std::vec::Vec<crate::types::Directory>,
    /// <p>The pagination token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListDirectoriesOutput {
    /// <p>Lists all directories that are associated with your account in pagination fashion.</p>
    pub fn directories(&self) -> &[crate::types::Directory] {
        use std::ops::Deref;
        self.directories.deref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListDirectoriesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListDirectoriesOutput {
    /// Creates a new builder-style object to manufacture [`ListDirectoriesOutput`](crate::operation::list_directories::ListDirectoriesOutput).
    pub fn builder() -> crate::operation::list_directories::builders::ListDirectoriesOutputBuilder {
        crate::operation::list_directories::builders::ListDirectoriesOutputBuilder::default()
    }
}

/// A builder for [`ListDirectoriesOutput`](crate::operation::list_directories::ListDirectoriesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListDirectoriesOutputBuilder {
    pub(crate) directories: ::std::option::Option<::std::vec::Vec<crate::types::Directory>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListDirectoriesOutputBuilder {
    /// Appends an item to `directories`.
    ///
    /// To override the contents of this collection use [`set_directories`](Self::set_directories).
    ///
    /// <p>Lists all directories that are associated with your account in pagination fashion.</p>
    pub fn directories(mut self, input: crate::types::Directory) -> Self {
        let mut v = self.directories.unwrap_or_default();
        v.push(input);
        self.directories = ::std::option::Option::Some(v);
        self
    }
    /// <p>Lists all directories that are associated with your account in pagination fashion.</p>
    pub fn set_directories(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Directory>>) -> Self {
        self.directories = input;
        self
    }
    /// <p>Lists all directories that are associated with your account in pagination fashion.</p>
    pub fn get_directories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Directory>> {
        &self.directories
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListDirectoriesOutput`](crate::operation::list_directories::ListDirectoriesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`directories`](crate::operation::list_directories::builders::ListDirectoriesOutputBuilder::directories)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_directories::ListDirectoriesOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_directories::ListDirectoriesOutput {
            directories: self.directories.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "directories",
                    "directories was not specified but it is required when building ListDirectoriesOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
