// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListObjectParentsInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where the object resides. For more information, see <code>arns</code>.</p>
    #[doc(hidden)]
    pub directory_arn: std::option::Option<std::string::String>,
    /// <p>The reference that identifies the object for which parent objects are being listed.</p>
    #[doc(hidden)]
    pub object_reference: std::option::Option<crate::types::ObjectReference>,
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    #[doc(hidden)]
    pub consistency_level: std::option::Option<crate::types::ConsistencyLevel>,
    /// <p>When set to True, returns all <code>ListObjectParentsResponse$ParentLinks</code>. There could be multiple links between a parent-child pair.</p>
    #[doc(hidden)]
    pub include_all_links_to_each_parent: bool,
}
impl ListObjectParentsInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where the object resides. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(&self) -> std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>The reference that identifies the object for which parent objects are being listed.</p>
    pub fn object_reference(&self) -> std::option::Option<&crate::types::ObjectReference> {
        self.object_reference.as_ref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    pub fn consistency_level(&self) -> std::option::Option<&crate::types::ConsistencyLevel> {
        self.consistency_level.as_ref()
    }
    /// <p>When set to True, returns all <code>ListObjectParentsResponse$ParentLinks</code>. There could be multiple links between a parent-child pair.</p>
    pub fn include_all_links_to_each_parent(&self) -> bool {
        self.include_all_links_to_each_parent
    }
}
impl ListObjectParentsInput {
    /// Creates a new builder-style object to manufacture [`ListObjectParentsInput`](crate::operation::list_object_parents::ListObjectParentsInput).
    pub fn builder(
    ) -> crate::operation::list_object_parents::builders::ListObjectParentsInputBuilder {
        crate::operation::list_object_parents::builders::ListObjectParentsInputBuilder::default()
    }
}

/// A builder for [`ListObjectParentsInput`](crate::operation::list_object_parents::ListObjectParentsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListObjectParentsInputBuilder {
    pub(crate) directory_arn: std::option::Option<std::string::String>,
    pub(crate) object_reference: std::option::Option<crate::types::ObjectReference>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) consistency_level: std::option::Option<crate::types::ConsistencyLevel>,
    pub(crate) include_all_links_to_each_parent: std::option::Option<bool>,
}
impl ListObjectParentsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where the object resides. For more information, see <code>arns</code>.</p>
    pub fn directory_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Directory</code> where the object resides. For more information, see <code>arns</code>.</p>
    pub fn set_directory_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// <p>The reference that identifies the object for which parent objects are being listed.</p>
    pub fn object_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.object_reference = Some(input);
        self
    }
    /// <p>The reference that identifies the object for which parent objects are being listed.</p>
    pub fn set_object_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.object_reference = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    pub fn consistency_level(mut self, input: crate::types::ConsistencyLevel) -> Self {
        self.consistency_level = Some(input);
        self
    }
    /// <p>Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.</p>
    pub fn set_consistency_level(
        mut self,
        input: std::option::Option<crate::types::ConsistencyLevel>,
    ) -> Self {
        self.consistency_level = input;
        self
    }
    /// <p>When set to True, returns all <code>ListObjectParentsResponse$ParentLinks</code>. There could be multiple links between a parent-child pair.</p>
    pub fn include_all_links_to_each_parent(mut self, input: bool) -> Self {
        self.include_all_links_to_each_parent = Some(input);
        self
    }
    /// <p>When set to True, returns all <code>ListObjectParentsResponse$ParentLinks</code>. There could be multiple links between a parent-child pair.</p>
    pub fn set_include_all_links_to_each_parent(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.include_all_links_to_each_parent = input;
        self
    }
    /// Consumes the builder and constructs a [`ListObjectParentsInput`](crate::operation::list_object_parents::ListObjectParentsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_object_parents::ListObjectParentsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_object_parents::ListObjectParentsInput {
                directory_arn: self.directory_arn,
                object_reference: self.object_reference,
                next_token: self.next_token,
                max_results: self.max_results,
                consistency_level: self.consistency_level,
                include_all_links_to_each_parent: self
                    .include_all_links_to_each_parent
                    .unwrap_or_default(),
            },
        )
    }
}
