// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListObjectParentsOutput {
    /// <p>The parent structure, which is a map with key as the <code>ObjectIdentifier</code> and LinkName as the value.</p>
    pub parents: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The pagination token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Returns a list of parent reference and LinkName Tuples.</p>
    pub parent_links: ::std::option::Option<::std::vec::Vec<crate::types::ObjectIdentifierAndLinkNameTuple>>,
    _request_id: Option<String>,
}
impl ListObjectParentsOutput {
    /// <p>The parent structure, which is a map with key as the <code>ObjectIdentifier</code> and LinkName as the value.</p>
    pub fn parents(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.parents.as_ref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Returns a list of parent reference and LinkName Tuples.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parent_links.is_none()`.
    pub fn parent_links(&self) -> &[crate::types::ObjectIdentifierAndLinkNameTuple] {
        self.parent_links.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for ListObjectParentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListObjectParentsOutput {
    /// Creates a new builder-style object to manufacture [`ListObjectParentsOutput`](crate::operation::list_object_parents::ListObjectParentsOutput).
    pub fn builder() -> crate::operation::list_object_parents::builders::ListObjectParentsOutputBuilder {
        crate::operation::list_object_parents::builders::ListObjectParentsOutputBuilder::default()
    }
}

/// A builder for [`ListObjectParentsOutput`](crate::operation::list_object_parents::ListObjectParentsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListObjectParentsOutputBuilder {
    pub(crate) parents: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) parent_links: ::std::option::Option<::std::vec::Vec<crate::types::ObjectIdentifierAndLinkNameTuple>>,
    _request_id: Option<String>,
}
impl ListObjectParentsOutputBuilder {
    /// Adds a key-value pair to `parents`.
    ///
    /// To override the contents of this collection use [`set_parents`](Self::set_parents).
    ///
    /// <p>The parent structure, which is a map with key as the <code>ObjectIdentifier</code> and LinkName as the value.</p>
    pub fn parents(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.parents.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parents = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The parent structure, which is a map with key as the <code>ObjectIdentifier</code> and LinkName as the value.</p>
    pub fn set_parents(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.parents = input;
        self
    }
    /// <p>The parent structure, which is a map with key as the <code>ObjectIdentifier</code> and LinkName as the value.</p>
    pub fn get_parents(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.parents
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `parent_links`.
    ///
    /// To override the contents of this collection use [`set_parent_links`](Self::set_parent_links).
    ///
    /// <p>Returns a list of parent reference and LinkName Tuples.</p>
    pub fn parent_links(mut self, input: crate::types::ObjectIdentifierAndLinkNameTuple) -> Self {
        let mut v = self.parent_links.unwrap_or_default();
        v.push(input);
        self.parent_links = ::std::option::Option::Some(v);
        self
    }
    /// <p>Returns a list of parent reference and LinkName Tuples.</p>
    pub fn set_parent_links(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ObjectIdentifierAndLinkNameTuple>>) -> Self {
        self.parent_links = input;
        self
    }
    /// <p>Returns a list of parent reference and LinkName Tuples.</p>
    pub fn get_parent_links(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ObjectIdentifierAndLinkNameTuple>> {
        &self.parent_links
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListObjectParentsOutput`](crate::operation::list_object_parents::ListObjectParentsOutput).
    pub fn build(self) -> crate::operation::list_object_parents::ListObjectParentsOutput {
        crate::operation::list_object_parents::ListObjectParentsOutput {
            parents: self.parents,
            next_token: self.next_token,
            parent_links: self.parent_links,
            _request_id: self._request_id,
        }
    }
}
