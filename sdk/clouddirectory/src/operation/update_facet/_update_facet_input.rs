// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateFacetInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Facet</code>. For more information, see <code>arns</code>.</p>
    pub schema_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the facet.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>List of attributes that need to be updated in a given schema <code>Facet</code>. Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update operation to perform. </p>
    pub attribute_updates: ::std::option::Option<::std::vec::Vec<crate::types::FacetAttributeUpdate>>,
    /// <p>The object type that is associated with the facet. See <code>CreateFacetRequest$ObjectType</code> for more details.</p>
    pub object_type: ::std::option::Option<crate::types::ObjectType>,
}
impl UpdateFacetInput {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Facet</code>. For more information, see <code>arns</code>.</p>
    pub fn schema_arn(&self) -> ::std::option::Option<&str> {
        self.schema_arn.as_deref()
    }
    /// <p>The name of the facet.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>List of attributes that need to be updated in a given schema <code>Facet</code>. Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update operation to perform. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attribute_updates.is_none()`.
    pub fn attribute_updates(&self) -> &[crate::types::FacetAttributeUpdate] {
        self.attribute_updates.as_deref().unwrap_or_default()
    }
    /// <p>The object type that is associated with the facet. See <code>CreateFacetRequest$ObjectType</code> for more details.</p>
    pub fn object_type(&self) -> ::std::option::Option<&crate::types::ObjectType> {
        self.object_type.as_ref()
    }
}
impl UpdateFacetInput {
    /// Creates a new builder-style object to manufacture [`UpdateFacetInput`](crate::operation::update_facet::UpdateFacetInput).
    pub fn builder() -> crate::operation::update_facet::builders::UpdateFacetInputBuilder {
        crate::operation::update_facet::builders::UpdateFacetInputBuilder::default()
    }
}

/// A builder for [`UpdateFacetInput`](crate::operation::update_facet::UpdateFacetInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateFacetInputBuilder {
    pub(crate) schema_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_updates: ::std::option::Option<::std::vec::Vec<crate::types::FacetAttributeUpdate>>,
    pub(crate) object_type: ::std::option::Option<crate::types::ObjectType>,
}
impl UpdateFacetInputBuilder {
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Facet</code>. For more information, see <code>arns</code>.</p>
    /// This field is required.
    pub fn schema_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Facet</code>. For more information, see <code>arns</code>.</p>
    pub fn set_schema_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is associated with the <code>Facet</code>. For more information, see <code>arns</code>.</p>
    pub fn get_schema_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_arn
    }
    /// <p>The name of the facet.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the facet.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the facet.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `attribute_updates`.
    ///
    /// To override the contents of this collection use [`set_attribute_updates`](Self::set_attribute_updates).
    ///
    /// <p>List of attributes that need to be updated in a given schema <code>Facet</code>. Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update operation to perform. </p>
    pub fn attribute_updates(mut self, input: crate::types::FacetAttributeUpdate) -> Self {
        let mut v = self.attribute_updates.unwrap_or_default();
        v.push(input);
        self.attribute_updates = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of attributes that need to be updated in a given schema <code>Facet</code>. Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update operation to perform. </p>
    pub fn set_attribute_updates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FacetAttributeUpdate>>) -> Self {
        self.attribute_updates = input;
        self
    }
    /// <p>List of attributes that need to be updated in a given schema <code>Facet</code>. Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update operation to perform. </p>
    pub fn get_attribute_updates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FacetAttributeUpdate>> {
        &self.attribute_updates
    }
    /// <p>The object type that is associated with the facet. See <code>CreateFacetRequest$ObjectType</code> for more details.</p>
    pub fn object_type(mut self, input: crate::types::ObjectType) -> Self {
        self.object_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The object type that is associated with the facet. See <code>CreateFacetRequest$ObjectType</code> for more details.</p>
    pub fn set_object_type(mut self, input: ::std::option::Option<crate::types::ObjectType>) -> Self {
        self.object_type = input;
        self
    }
    /// <p>The object type that is associated with the facet. See <code>CreateFacetRequest$ObjectType</code> for more details.</p>
    pub fn get_object_type(&self) -> &::std::option::Option<crate::types::ObjectType> {
        &self.object_type
    }
    /// Consumes the builder and constructs a [`UpdateFacetInput`](crate::operation::update_facet::UpdateFacetInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_facet::UpdateFacetInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_facet::UpdateFacetInput {
            schema_arn: self.schema_arn,
            name: self.name,
            attribute_updates: self.attribute_updates,
            object_type: self.object_type,
        })
    }
}
