// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListIndexInput {
    /// <p>The ARN of the directory that the index exists in.</p>
    #[doc(hidden)]
    pub directory_arn: std::option::Option<std::string::String>,
    /// <p>Specifies the ranges of indexed values that you want to query.</p>
    #[doc(hidden)]
    pub ranges_on_indexed_values:
        std::option::Option<std::vec::Vec<crate::types::ObjectAttributeRange>>,
    /// <p>The reference to the index to list.</p>
    #[doc(hidden)]
    pub index_reference: std::option::Option<crate::types::ObjectReference>,
    /// <p>The maximum number of objects in a single page to retrieve from the index during a request. For more information, see <a href="http://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Amazon Cloud Directory Limits</a>.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The consistency level to execute the request at.</p>
    #[doc(hidden)]
    pub consistency_level: std::option::Option<crate::types::ConsistencyLevel>,
}
impl ListIndexInput {
    /// <p>The ARN of the directory that the index exists in.</p>
    pub fn directory_arn(&self) -> std::option::Option<&str> {
        self.directory_arn.as_deref()
    }
    /// <p>Specifies the ranges of indexed values that you want to query.</p>
    pub fn ranges_on_indexed_values(
        &self,
    ) -> std::option::Option<&[crate::types::ObjectAttributeRange]> {
        self.ranges_on_indexed_values.as_deref()
    }
    /// <p>The reference to the index to list.</p>
    pub fn index_reference(&self) -> std::option::Option<&crate::types::ObjectReference> {
        self.index_reference.as_ref()
    }
    /// <p>The maximum number of objects in a single page to retrieve from the index during a request. For more information, see <a href="http://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Amazon Cloud Directory Limits</a>.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The consistency level to execute the request at.</p>
    pub fn consistency_level(&self) -> std::option::Option<&crate::types::ConsistencyLevel> {
        self.consistency_level.as_ref()
    }
}
impl ListIndexInput {
    /// Creates a new builder-style object to manufacture [`ListIndexInput`](crate::operation::list_index::ListIndexInput).
    pub fn builder() -> crate::operation::list_index::builders::ListIndexInputBuilder {
        crate::operation::list_index::builders::ListIndexInputBuilder::default()
    }
}

/// A builder for [`ListIndexInput`](crate::operation::list_index::ListIndexInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListIndexInputBuilder {
    pub(crate) directory_arn: std::option::Option<std::string::String>,
    pub(crate) ranges_on_indexed_values:
        std::option::Option<std::vec::Vec<crate::types::ObjectAttributeRange>>,
    pub(crate) index_reference: std::option::Option<crate::types::ObjectReference>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) consistency_level: std::option::Option<crate::types::ConsistencyLevel>,
}
impl ListIndexInputBuilder {
    /// <p>The ARN of the directory that the index exists in.</p>
    pub fn directory_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the directory that the index exists in.</p>
    pub fn set_directory_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_arn = input;
        self
    }
    /// Appends an item to `ranges_on_indexed_values`.
    ///
    /// To override the contents of this collection use [`set_ranges_on_indexed_values`](Self::set_ranges_on_indexed_values).
    ///
    /// <p>Specifies the ranges of indexed values that you want to query.</p>
    pub fn ranges_on_indexed_values(mut self, input: crate::types::ObjectAttributeRange) -> Self {
        let mut v = self.ranges_on_indexed_values.unwrap_or_default();
        v.push(input);
        self.ranges_on_indexed_values = Some(v);
        self
    }
    /// <p>Specifies the ranges of indexed values that you want to query.</p>
    pub fn set_ranges_on_indexed_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ObjectAttributeRange>>,
    ) -> Self {
        self.ranges_on_indexed_values = input;
        self
    }
    /// <p>The reference to the index to list.</p>
    pub fn index_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.index_reference = Some(input);
        self
    }
    /// <p>The reference to the index to list.</p>
    pub fn set_index_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.index_reference = input;
        self
    }
    /// <p>The maximum number of objects in a single page to retrieve from the index during a request. For more information, see <a href="http://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Amazon Cloud Directory Limits</a>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of objects in a single page to retrieve from the index during a request. For more information, see <a href="http://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Amazon Cloud Directory Limits</a>.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The consistency level to execute the request at.</p>
    pub fn consistency_level(mut self, input: crate::types::ConsistencyLevel) -> Self {
        self.consistency_level = Some(input);
        self
    }
    /// <p>The consistency level to execute the request at.</p>
    pub fn set_consistency_level(
        mut self,
        input: std::option::Option<crate::types::ConsistencyLevel>,
    ) -> Self {
        self.consistency_level = input;
        self
    }
    /// Consumes the builder and constructs a [`ListIndexInput`](crate::operation::list_index::ListIndexInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_index::ListIndexInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_index::ListIndexInput {
            directory_arn: self.directory_arn,
            ranges_on_indexed_values: self.ranges_on_indexed_values,
            index_reference: self.index_reference,
            max_results: self.max_results,
            next_token: self.next_token,
            consistency_level: self.consistency_level,
        })
    }
}
