// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_directory_output_correct_errors(
    mut builder: crate::operation::create_directory::builders::CreateDirectoryOutputBuilder,
) -> crate::operation::create_directory::builders::CreateDirectoryOutputBuilder {
    if builder.directory_arn.is_none() {
        builder.directory_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.object_identifier.is_none() {
        builder.object_identifier = Some(Default::default())
    }
    if builder.applied_schema_arn.is_none() {
        builder.applied_schema_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_directory_output_correct_errors(
    mut builder: crate::operation::delete_directory::builders::DeleteDirectoryOutputBuilder,
) -> crate::operation::delete_directory::builders::DeleteDirectoryOutputBuilder {
    if builder.directory_arn.is_none() {
        builder.directory_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn disable_directory_output_correct_errors(
    mut builder: crate::operation::disable_directory::builders::DisableDirectoryOutputBuilder,
) -> crate::operation::disable_directory::builders::DisableDirectoryOutputBuilder {
    if builder.directory_arn.is_none() {
        builder.directory_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn enable_directory_output_correct_errors(
    mut builder: crate::operation::enable_directory::builders::EnableDirectoryOutputBuilder,
) -> crate::operation::enable_directory::builders::EnableDirectoryOutputBuilder {
    if builder.directory_arn.is_none() {
        builder.directory_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_directory_output_correct_errors(
    mut builder: crate::operation::get_directory::builders::GetDirectoryOutputBuilder,
) -> crate::operation::get_directory::builders::GetDirectoryOutputBuilder {
    if builder.directory.is_none() {
        builder.directory = {
            let builder = crate::types::builders::DirectoryBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn list_directories_output_correct_errors(
    mut builder: crate::operation::list_directories::builders::ListDirectoriesOutputBuilder,
) -> crate::operation::list_directories::builders::ListDirectoriesOutputBuilder {
    if builder.directories.is_none() {
        builder.directories = Some(Default::default())
    }
    builder
}

pub(crate) fn typed_link_specifier_correct_errors(
    mut builder: crate::types::builders::TypedLinkSpecifierBuilder,
) -> crate::types::builders::TypedLinkSpecifierBuilder {
    if builder.typed_link_facet.is_none() {
        builder.typed_link_facet = {
            let builder = crate::types::builders::TypedLinkSchemaAndFacetNameBuilder::default();
            crate::serde_util::typed_link_schema_and_facet_name_correct_errors(builder).build().ok()
        }
    }
    if builder.source_object_reference.is_none() {
        builder.source_object_reference = {
            let builder = crate::types::builders::ObjectReferenceBuilder::default();
            Some(builder.build())
        }
    }
    if builder.target_object_reference.is_none() {
        builder.target_object_reference = {
            let builder = crate::types::builders::ObjectReferenceBuilder::default();
            Some(builder.build())
        }
    }
    if builder.identity_attribute_values.is_none() {
        builder.identity_attribute_values = Some(Default::default())
    }
    builder
}

pub(crate) fn attribute_key_and_value_correct_errors(
    mut builder: crate::types::builders::AttributeKeyAndValueBuilder,
) -> crate::types::builders::AttributeKeyAndValueBuilder {
    if builder.key.is_none() {
        builder.key = {
            let builder = crate::types::builders::AttributeKeyBuilder::default();
            crate::serde_util::attribute_key_correct_errors(builder).build().ok()
        }
    }
    if builder.value.is_none() {
        builder.value = Some(crate::types::TypedAttributeValue::Unknown)
    }
    builder
}

pub(crate) fn facet_attribute_correct_errors(
    mut builder: crate::types::builders::FacetAttributeBuilder,
) -> crate::types::builders::FacetAttributeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn typed_link_attribute_definition_correct_errors(
    mut builder: crate::types::builders::TypedLinkAttributeDefinitionBuilder,
) -> crate::types::builders::TypedLinkAttributeDefinitionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FacetAttributeType>().ok()
    }
    if builder.required_behavior.is_none() {
        builder.required_behavior = "no value was set".parse::<crate::types::RequiredAttributeBehavior>().ok()
    }
    builder
}

pub(crate) fn typed_link_schema_and_facet_name_correct_errors(
    mut builder: crate::types::builders::TypedLinkSchemaAndFacetNameBuilder,
) -> crate::types::builders::TypedLinkSchemaAndFacetNameBuilder {
    if builder.schema_arn.is_none() {
        builder.schema_arn = Some(Default::default())
    }
    if builder.typed_link_name.is_none() {
        builder.typed_link_name = Some(Default::default())
    }
    builder
}

pub(crate) fn attribute_key_correct_errors(mut builder: crate::types::builders::AttributeKeyBuilder) -> crate::types::builders::AttributeKeyBuilder {
    if builder.schema_arn.is_none() {
        builder.schema_arn = Some(Default::default())
    }
    if builder.facet_name.is_none() {
        builder.facet_name = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn attribute_name_and_value_correct_errors(
    mut builder: crate::types::builders::AttributeNameAndValueBuilder,
) -> crate::types::builders::AttributeNameAndValueBuilder {
    if builder.attribute_name.is_none() {
        builder.attribute_name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(crate::types::TypedAttributeValue::Unknown)
    }
    builder
}

pub(crate) fn facet_attribute_definition_correct_errors(
    mut builder: crate::types::builders::FacetAttributeDefinitionBuilder,
) -> crate::types::builders::FacetAttributeDefinitionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FacetAttributeType>().ok()
    }
    builder
}

pub(crate) fn facet_attribute_reference_correct_errors(
    mut builder: crate::types::builders::FacetAttributeReferenceBuilder,
) -> crate::types::builders::FacetAttributeReferenceBuilder {
    if builder.target_facet_name.is_none() {
        builder.target_facet_name = Some(Default::default())
    }
    if builder.target_attribute_name.is_none() {
        builder.target_attribute_name = Some(Default::default())
    }
    builder
}
