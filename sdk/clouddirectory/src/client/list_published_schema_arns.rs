// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListPublishedSchemaArns`](crate::client::fluent_builders::ListPublishedSchemaArns) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPublishedSchemaArns::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`schema_arn(impl Into<String>)`](crate::client::fluent_builders::ListPublishedSchemaArns::schema_arn) / [`set_schema_arn(Option<String>)`](crate::client::fluent_builders::ListPublishedSchemaArns::set_schema_arn): <p>The response for <code>ListPublishedSchemaArns</code> when this parameter is used will list all minor version ARNs for a major version.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPublishedSchemaArns::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPublishedSchemaArns::set_next_token): <p>The pagination token.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPublishedSchemaArns::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPublishedSchemaArns::set_max_results): <p>The maximum number of results to retrieve.</p>
    /// - On success, responds with [`ListPublishedSchemaArnsOutput`](crate::output::ListPublishedSchemaArnsOutput) with field(s):
    ///   - [`schema_arns(Option<Vec<String>>)`](crate::output::ListPublishedSchemaArnsOutput::schema_arns): <p>The ARNs of published schemas.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPublishedSchemaArnsOutput::next_token): <p>The pagination token.</p>
    /// - On failure, responds with [`SdkError<ListPublishedSchemaArnsError>`](crate::error::ListPublishedSchemaArnsError)
    pub fn list_published_schema_arns(
        &self,
    ) -> crate::client::fluent_builders::ListPublishedSchemaArns {
        crate::client::fluent_builders::ListPublishedSchemaArns::new(self.handle.clone())
    }
}
