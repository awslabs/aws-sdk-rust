// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains <code>Name</code>, <code>ARN</code>, <code>Attributes</code>, <code> <code>Rule</code>s</code>, and <code>ObjectTypes</code>. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_whatarefacets.html">Facets</a> for more information.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Facet {
    /// <p>The name of the <code>Facet</code>.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The object type that is associated with the facet. See <code>CreateFacetRequest$ObjectType</code> for more details.</p>
    #[doc(hidden)]
    pub object_type: std::option::Option<crate::types::ObjectType>,
    /// <p>There are two different styles that you can define on any given facet, <code>Static</code> and <code>Dynamic</code>. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.</p>
    #[doc(hidden)]
    pub facet_style: std::option::Option<crate::types::FacetStyle>,
}
impl Facet {
    /// <p>The name of the <code>Facet</code>.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The object type that is associated with the facet. See <code>CreateFacetRequest$ObjectType</code> for more details.</p>
    pub fn object_type(&self) -> std::option::Option<&crate::types::ObjectType> {
        self.object_type.as_ref()
    }
    /// <p>There are two different styles that you can define on any given facet, <code>Static</code> and <code>Dynamic</code>. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.</p>
    pub fn facet_style(&self) -> std::option::Option<&crate::types::FacetStyle> {
        self.facet_style.as_ref()
    }
}
impl Facet {
    /// Creates a new builder-style object to manufacture [`Facet`](crate::types::Facet).
    pub fn builder() -> crate::types::builders::FacetBuilder {
        crate::types::builders::FacetBuilder::default()
    }
}

/// A builder for [`Facet`](crate::types::Facet).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FacetBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) object_type: std::option::Option<crate::types::ObjectType>,
    pub(crate) facet_style: std::option::Option<crate::types::FacetStyle>,
}
impl FacetBuilder {
    /// <p>The name of the <code>Facet</code>.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the <code>Facet</code>.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The object type that is associated with the facet. See <code>CreateFacetRequest$ObjectType</code> for more details.</p>
    pub fn object_type(mut self, input: crate::types::ObjectType) -> Self {
        self.object_type = Some(input);
        self
    }
    /// <p>The object type that is associated with the facet. See <code>CreateFacetRequest$ObjectType</code> for more details.</p>
    pub fn set_object_type(mut self, input: std::option::Option<crate::types::ObjectType>) -> Self {
        self.object_type = input;
        self
    }
    /// <p>There are two different styles that you can define on any given facet, <code>Static</code> and <code>Dynamic</code>. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.</p>
    pub fn facet_style(mut self, input: crate::types::FacetStyle) -> Self {
        self.facet_style = Some(input);
        self
    }
    /// <p>There are two different styles that you can define on any given facet, <code>Static</code> and <code>Dynamic</code>. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.</p>
    pub fn set_facet_style(mut self, input: std::option::Option<crate::types::FacetStyle>) -> Self {
        self.facet_style = input;
        self
    }
    /// Consumes the builder and constructs a [`Facet`](crate::types::Facet).
    pub fn build(self) -> crate::types::Facet {
        crate::types::Facet {
            name: self.name,
            object_type: self.object_type,
            facet_style: self.facet_style,
        }
    }
}
