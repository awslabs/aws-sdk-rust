// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of a <code>ListObjectAttributes</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchListObjectAttributes {
    /// <p>Reference of the object whose attributes need to be listed.</p>
    pub object_reference: ::std::option::Option<crate::types::ObjectReference>,
    /// <p>The pagination token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Used to filter the list of object attributes that are associated with a certain facet.</p>
    pub facet_filter: ::std::option::Option<crate::types::SchemaFacet>,
}
impl BatchListObjectAttributes {
    /// <p>Reference of the object whose attributes need to be listed.</p>
    pub fn object_reference(&self) -> ::std::option::Option<&crate::types::ObjectReference> {
        self.object_reference.as_ref()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Used to filter the list of object attributes that are associated with a certain facet.</p>
    pub fn facet_filter(&self) -> ::std::option::Option<&crate::types::SchemaFacet> {
        self.facet_filter.as_ref()
    }
}
impl BatchListObjectAttributes {
    /// Creates a new builder-style object to manufacture [`BatchListObjectAttributes`](crate::types::BatchListObjectAttributes).
    pub fn builder() -> crate::types::builders::BatchListObjectAttributesBuilder {
        crate::types::builders::BatchListObjectAttributesBuilder::default()
    }
}

/// A builder for [`BatchListObjectAttributes`](crate::types::BatchListObjectAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchListObjectAttributesBuilder {
    pub(crate) object_reference: ::std::option::Option<crate::types::ObjectReference>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) facet_filter: ::std::option::Option<crate::types::SchemaFacet>,
}
impl BatchListObjectAttributesBuilder {
    /// <p>Reference of the object whose attributes need to be listed.</p>
    /// This field is required.
    pub fn object_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.object_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reference of the object whose attributes need to be listed.</p>
    pub fn set_object_reference(mut self, input: ::std::option::Option<crate::types::ObjectReference>) -> Self {
        self.object_reference = input;
        self
    }
    /// <p>Reference of the object whose attributes need to be listed.</p>
    pub fn get_object_reference(&self) -> &::std::option::Option<crate::types::ObjectReference> {
        &self.object_reference
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to be retrieved in a single call. This is an approximate number.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Used to filter the list of object attributes that are associated with a certain facet.</p>
    pub fn facet_filter(mut self, input: crate::types::SchemaFacet) -> Self {
        self.facet_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Used to filter the list of object attributes that are associated with a certain facet.</p>
    pub fn set_facet_filter(mut self, input: ::std::option::Option<crate::types::SchemaFacet>) -> Self {
        self.facet_filter = input;
        self
    }
    /// <p>Used to filter the list of object attributes that are associated with a certain facet.</p>
    pub fn get_facet_filter(&self) -> &::std::option::Option<crate::types::SchemaFacet> {
        &self.facet_filter
    }
    /// Consumes the builder and constructs a [`BatchListObjectAttributes`](crate::types::BatchListObjectAttributes).
    pub fn build(self) -> crate::types::BatchListObjectAttributes {
        crate::types::BatchListObjectAttributes {
            object_reference: self.object_reference,
            next_token: self.next_token,
            max_results: self.max_results,
            facet_filter: self.facet_filter,
        }
    }
}
