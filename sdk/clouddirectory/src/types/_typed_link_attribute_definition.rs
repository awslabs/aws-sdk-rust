// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A typed link attribute definition.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TypedLinkAttributeDefinition {
    /// <p>The unique name of the typed link attribute.</p>
    pub name: ::std::string::String,
    /// <p>The type of the attribute.</p>
    pub r#type: crate::types::FacetAttributeType,
    /// <p>The default value of the attribute (if configured).</p>
    pub default_value: ::std::option::Option<crate::types::TypedAttributeValue>,
    /// <p>Whether the attribute is mutable or not.</p>
    pub is_immutable: bool,
    /// <p>Validation rules that are attached to the attribute definition.</p>
    pub rules: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Rule>>,
    /// <p>The required behavior of the <code>TypedLinkAttributeDefinition</code>.</p>
    pub required_behavior: crate::types::RequiredAttributeBehavior,
}
impl TypedLinkAttributeDefinition {
    /// <p>The unique name of the typed link attribute.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type of the attribute.</p>
    pub fn r#type(&self) -> &crate::types::FacetAttributeType {
        &self.r#type
    }
    /// <p>The default value of the attribute (if configured).</p>
    pub fn default_value(&self) -> ::std::option::Option<&crate::types::TypedAttributeValue> {
        self.default_value.as_ref()
    }
    /// <p>Whether the attribute is mutable or not.</p>
    pub fn is_immutable(&self) -> bool {
        self.is_immutable
    }
    /// <p>Validation rules that are attached to the attribute definition.</p>
    pub fn rules(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::Rule>> {
        self.rules.as_ref()
    }
    /// <p>The required behavior of the <code>TypedLinkAttributeDefinition</code>.</p>
    pub fn required_behavior(&self) -> &crate::types::RequiredAttributeBehavior {
        &self.required_behavior
    }
}
impl TypedLinkAttributeDefinition {
    /// Creates a new builder-style object to manufacture [`TypedLinkAttributeDefinition`](crate::types::TypedLinkAttributeDefinition).
    pub fn builder() -> crate::types::builders::TypedLinkAttributeDefinitionBuilder {
        crate::types::builders::TypedLinkAttributeDefinitionBuilder::default()
    }
}

/// A builder for [`TypedLinkAttributeDefinition`](crate::types::TypedLinkAttributeDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TypedLinkAttributeDefinitionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::FacetAttributeType>,
    pub(crate) default_value: ::std::option::Option<crate::types::TypedAttributeValue>,
    pub(crate) is_immutable: ::std::option::Option<bool>,
    pub(crate) rules: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Rule>>,
    pub(crate) required_behavior: ::std::option::Option<crate::types::RequiredAttributeBehavior>,
}
impl TypedLinkAttributeDefinitionBuilder {
    /// <p>The unique name of the typed link attribute.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the typed link attribute.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The unique name of the typed link attribute.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of the attribute.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::FacetAttributeType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the attribute.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::FacetAttributeType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the attribute.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::FacetAttributeType> {
        &self.r#type
    }
    /// <p>The default value of the attribute (if configured).</p>
    pub fn default_value(mut self, input: crate::types::TypedAttributeValue) -> Self {
        self.default_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default value of the attribute (if configured).</p>
    pub fn set_default_value(mut self, input: ::std::option::Option<crate::types::TypedAttributeValue>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The default value of the attribute (if configured).</p>
    pub fn get_default_value(&self) -> &::std::option::Option<crate::types::TypedAttributeValue> {
        &self.default_value
    }
    /// <p>Whether the attribute is mutable or not.</p>
    pub fn is_immutable(mut self, input: bool) -> Self {
        self.is_immutable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the attribute is mutable or not.</p>
    pub fn set_is_immutable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_immutable = input;
        self
    }
    /// <p>Whether the attribute is mutable or not.</p>
    pub fn get_is_immutable(&self) -> &::std::option::Option<bool> {
        &self.is_immutable
    }
    /// Adds a key-value pair to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>Validation rules that are attached to the attribute definition.</p>
    pub fn rules(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Rule) -> Self {
        let mut hash_map = self.rules.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.rules = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Validation rules that are attached to the attribute definition.</p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Rule>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>Validation rules that are attached to the attribute definition.</p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Rule>> {
        &self.rules
    }
    /// <p>The required behavior of the <code>TypedLinkAttributeDefinition</code>.</p>
    /// This field is required.
    pub fn required_behavior(mut self, input: crate::types::RequiredAttributeBehavior) -> Self {
        self.required_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>The required behavior of the <code>TypedLinkAttributeDefinition</code>.</p>
    pub fn set_required_behavior(mut self, input: ::std::option::Option<crate::types::RequiredAttributeBehavior>) -> Self {
        self.required_behavior = input;
        self
    }
    /// <p>The required behavior of the <code>TypedLinkAttributeDefinition</code>.</p>
    pub fn get_required_behavior(&self) -> &::std::option::Option<crate::types::RequiredAttributeBehavior> {
        &self.required_behavior
    }
    /// Consumes the builder and constructs a [`TypedLinkAttributeDefinition`](crate::types::TypedLinkAttributeDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::TypedLinkAttributeDefinitionBuilder::name)
    /// - [`r#type`](crate::types::builders::TypedLinkAttributeDefinitionBuilder::r#type)
    /// - [`required_behavior`](crate::types::builders::TypedLinkAttributeDefinitionBuilder::required_behavior)
    pub fn build(self) -> ::std::result::Result<crate::types::TypedLinkAttributeDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TypedLinkAttributeDefinition {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building TypedLinkAttributeDefinition",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building TypedLinkAttributeDefinition",
                )
            })?,
            default_value: self.default_value,
            is_immutable: self.is_immutable.unwrap_or_default(),
            rules: self.rules,
            required_behavior: self.required_behavior.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "required_behavior",
                    "required_behavior was not specified but it is required when building TypedLinkAttributeDefinition",
                )
            })?,
        })
    }
}
