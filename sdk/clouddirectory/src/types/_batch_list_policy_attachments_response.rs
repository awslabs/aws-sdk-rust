// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of a <code>ListPolicyAttachments</code> response operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchListPolicyAttachmentsResponse {
    /// <p>A list of <code>ObjectIdentifiers</code> to which the policy is attached.</p>
    pub object_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The pagination token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl BatchListPolicyAttachmentsResponse {
    /// <p>A list of <code>ObjectIdentifiers</code> to which the policy is attached.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.object_identifiers.is_none()`.
    pub fn object_identifiers(&self) -> &[::std::string::String] {
        self.object_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl BatchListPolicyAttachmentsResponse {
    /// Creates a new builder-style object to manufacture [`BatchListPolicyAttachmentsResponse`](crate::types::BatchListPolicyAttachmentsResponse).
    pub fn builder() -> crate::types::builders::BatchListPolicyAttachmentsResponseBuilder {
        crate::types::builders::BatchListPolicyAttachmentsResponseBuilder::default()
    }
}

/// A builder for [`BatchListPolicyAttachmentsResponse`](crate::types::BatchListPolicyAttachmentsResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchListPolicyAttachmentsResponseBuilder {
    pub(crate) object_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl BatchListPolicyAttachmentsResponseBuilder {
    /// Appends an item to `object_identifiers`.
    ///
    /// To override the contents of this collection use [`set_object_identifiers`](Self::set_object_identifiers).
    ///
    /// <p>A list of <code>ObjectIdentifiers</code> to which the policy is attached.</p>
    pub fn object_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.object_identifiers.unwrap_or_default();
        v.push(input.into());
        self.object_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>ObjectIdentifiers</code> to which the policy is attached.</p>
    pub fn set_object_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.object_identifiers = input;
        self
    }
    /// <p>A list of <code>ObjectIdentifiers</code> to which the policy is attached.</p>
    pub fn get_object_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.object_identifiers
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`BatchListPolicyAttachmentsResponse`](crate::types::BatchListPolicyAttachmentsResponse).
    pub fn build(self) -> crate::types::BatchListPolicyAttachmentsResponse {
        crate::types::BatchListPolicyAttachmentsResponse {
            object_identifiers: self.object_identifiers,
            next_token: self.next_token,
        }
    }
}
