// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of a <code>DetachObject</code> response operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDetachObjectResponse {
    /// <p>The <code>ObjectIdentifier</code> of the detached object.</p>
    #[doc(hidden)]
    pub detached_object_identifier: std::option::Option<std::string::String>,
}
impl BatchDetachObjectResponse {
    /// <p>The <code>ObjectIdentifier</code> of the detached object.</p>
    pub fn detached_object_identifier(&self) -> std::option::Option<&str> {
        self.detached_object_identifier.as_deref()
    }
}
impl BatchDetachObjectResponse {
    /// Creates a new builder-style object to manufacture [`BatchDetachObjectResponse`](crate::types::BatchDetachObjectResponse).
    pub fn builder() -> crate::types::builders::BatchDetachObjectResponseBuilder {
        crate::types::builders::BatchDetachObjectResponseBuilder::default()
    }
}

/// A builder for [`BatchDetachObjectResponse`](crate::types::BatchDetachObjectResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchDetachObjectResponseBuilder {
    pub(crate) detached_object_identifier: std::option::Option<std::string::String>,
}
impl BatchDetachObjectResponseBuilder {
    /// <p>The <code>ObjectIdentifier</code> of the detached object.</p>
    pub fn detached_object_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.detached_object_identifier = Some(input.into());
        self
    }
    /// <p>The <code>ObjectIdentifier</code> of the detached object.</p>
    pub fn set_detached_object_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.detached_object_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchDetachObjectResponse`](crate::types::BatchDetachObjectResponse).
    pub fn build(self) -> crate::types::BatchDetachObjectResponse {
        crate::types::BatchDetachObjectResponse {
            detached_object_identifier: self.detached_object_identifier,
        }
    }
}
