// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of a <code>LookupPolicy</code> response operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchLookupPolicyResponse {
    /// <p>Provides list of path to policies. Policies contain <code>PolicyId</code>, <code>ObjectIdentifier</code>, and <code>PolicyType</code>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
    pub policy_to_path_list: ::std::option::Option<::std::vec::Vec<crate::types::PolicyToPath>>,
    /// <p>The pagination token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl BatchLookupPolicyResponse {
    /// <p>Provides list of path to policies. Policies contain <code>PolicyId</code>, <code>ObjectIdentifier</code>, and <code>PolicyType</code>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.policy_to_path_list.is_none()`.
    pub fn policy_to_path_list(&self) -> &[crate::types::PolicyToPath] {
        self.policy_to_path_list.as_deref().unwrap_or_default()
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl BatchLookupPolicyResponse {
    /// Creates a new builder-style object to manufacture [`BatchLookupPolicyResponse`](crate::types::BatchLookupPolicyResponse).
    pub fn builder() -> crate::types::builders::BatchLookupPolicyResponseBuilder {
        crate::types::builders::BatchLookupPolicyResponseBuilder::default()
    }
}

/// A builder for [`BatchLookupPolicyResponse`](crate::types::BatchLookupPolicyResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchLookupPolicyResponseBuilder {
    pub(crate) policy_to_path_list: ::std::option::Option<::std::vec::Vec<crate::types::PolicyToPath>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl BatchLookupPolicyResponseBuilder {
    /// Appends an item to `policy_to_path_list`.
    ///
    /// To override the contents of this collection use [`set_policy_to_path_list`](Self::set_policy_to_path_list).
    ///
    /// <p>Provides list of path to policies. Policies contain <code>PolicyId</code>, <code>ObjectIdentifier</code>, and <code>PolicyType</code>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
    pub fn policy_to_path_list(mut self, input: crate::types::PolicyToPath) -> Self {
        let mut v = self.policy_to_path_list.unwrap_or_default();
        v.push(input);
        self.policy_to_path_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provides list of path to policies. Policies contain <code>PolicyId</code>, <code>ObjectIdentifier</code>, and <code>PolicyType</code>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
    pub fn set_policy_to_path_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PolicyToPath>>) -> Self {
        self.policy_to_path_list = input;
        self
    }
    /// <p>Provides list of path to policies. Policies contain <code>PolicyId</code>, <code>ObjectIdentifier</code>, and <code>PolicyType</code>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
    pub fn get_policy_to_path_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PolicyToPath>> {
        &self.policy_to_path_list
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`BatchLookupPolicyResponse`](crate::types::BatchLookupPolicyResponse).
    pub fn build(self) -> crate::types::BatchLookupPolicyResponse {
        crate::types::BatchLookupPolicyResponse {
            policy_to_path_list: self.policy_to_path_list,
            next_token: self.next_token,
        }
    }
}
