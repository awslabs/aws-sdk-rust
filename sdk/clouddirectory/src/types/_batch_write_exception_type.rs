// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `BatchWriteExceptionType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let batchwriteexceptiontype = unimplemented!();
/// match batchwriteexceptiontype {
///     BatchWriteExceptionType::AccessDeniedException => { /* ... */ },
///     BatchWriteExceptionType::DirectoryNotEnabledException => { /* ... */ },
///     BatchWriteExceptionType::FacetValidationException => { /* ... */ },
///     BatchWriteExceptionType::IndexedAttributeMissingException => { /* ... */ },
///     BatchWriteExceptionType::InternalServiceException => { /* ... */ },
///     BatchWriteExceptionType::InvalidArnException => { /* ... */ },
///     BatchWriteExceptionType::InvalidAttachmentException => { /* ... */ },
///     BatchWriteExceptionType::LimitExceededException => { /* ... */ },
///     BatchWriteExceptionType::LinkNameAlreadyInUseException => { /* ... */ },
///     BatchWriteExceptionType::NotIndexException => { /* ... */ },
///     BatchWriteExceptionType::NotNodeException => { /* ... */ },
///     BatchWriteExceptionType::NotPolicyException => { /* ... */ },
///     BatchWriteExceptionType::ObjectAlreadyDetachedException => { /* ... */ },
///     BatchWriteExceptionType::ObjectNotDetachedException => { /* ... */ },
///     BatchWriteExceptionType::ResourceNotFoundException => { /* ... */ },
///     BatchWriteExceptionType::StillContainsLinksException => { /* ... */ },
///     BatchWriteExceptionType::UnsupportedIndexTypeException => { /* ... */ },
///     BatchWriteExceptionType::ValidationException => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `batchwriteexceptiontype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `BatchWriteExceptionType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `BatchWriteExceptionType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `BatchWriteExceptionType::NewFeature` is defined.
/// Specifically, when `batchwriteexceptiontype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `BatchWriteExceptionType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum BatchWriteExceptionType {
    #[allow(missing_docs)] // documentation missing in model
    AccessDeniedException,
    #[allow(missing_docs)] // documentation missing in model
    DirectoryNotEnabledException,
    #[allow(missing_docs)] // documentation missing in model
    FacetValidationException,
    #[allow(missing_docs)] // documentation missing in model
    IndexedAttributeMissingException,
    #[allow(missing_docs)] // documentation missing in model
    InternalServiceException,
    #[allow(missing_docs)] // documentation missing in model
    InvalidArnException,
    #[allow(missing_docs)] // documentation missing in model
    InvalidAttachmentException,
    #[allow(missing_docs)] // documentation missing in model
    LimitExceededException,
    #[allow(missing_docs)] // documentation missing in model
    LinkNameAlreadyInUseException,
    #[allow(missing_docs)] // documentation missing in model
    NotIndexException,
    #[allow(missing_docs)] // documentation missing in model
    NotNodeException,
    #[allow(missing_docs)] // documentation missing in model
    NotPolicyException,
    #[allow(missing_docs)] // documentation missing in model
    ObjectAlreadyDetachedException,
    #[allow(missing_docs)] // documentation missing in model
    ObjectNotDetachedException,
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotFoundException,
    #[allow(missing_docs)] // documentation missing in model
    StillContainsLinksException,
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedIndexTypeException,
    #[allow(missing_docs)] // documentation missing in model
    ValidationException,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for BatchWriteExceptionType {
    fn from(s: &str) -> Self {
        match s {
            "AccessDeniedException" => BatchWriteExceptionType::AccessDeniedException,
            "DirectoryNotEnabledException" => BatchWriteExceptionType::DirectoryNotEnabledException,
            "FacetValidationException" => BatchWriteExceptionType::FacetValidationException,
            "IndexedAttributeMissingException" => {
                BatchWriteExceptionType::IndexedAttributeMissingException
            }
            "InternalServiceException" => BatchWriteExceptionType::InternalServiceException,
            "InvalidArnException" => BatchWriteExceptionType::InvalidArnException,
            "InvalidAttachmentException" => BatchWriteExceptionType::InvalidAttachmentException,
            "LimitExceededException" => BatchWriteExceptionType::LimitExceededException,
            "LinkNameAlreadyInUseException" => {
                BatchWriteExceptionType::LinkNameAlreadyInUseException
            }
            "NotIndexException" => BatchWriteExceptionType::NotIndexException,
            "NotNodeException" => BatchWriteExceptionType::NotNodeException,
            "NotPolicyException" => BatchWriteExceptionType::NotPolicyException,
            "ObjectAlreadyDetachedException" => {
                BatchWriteExceptionType::ObjectAlreadyDetachedException
            }
            "ObjectNotDetachedException" => BatchWriteExceptionType::ObjectNotDetachedException,
            "ResourceNotFoundException" => BatchWriteExceptionType::ResourceNotFoundException,
            "StillContainsLinksException" => BatchWriteExceptionType::StillContainsLinksException,
            "UnsupportedIndexTypeException" => {
                BatchWriteExceptionType::UnsupportedIndexTypeException
            }
            "ValidationException" => BatchWriteExceptionType::ValidationException,
            other => BatchWriteExceptionType::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for BatchWriteExceptionType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(BatchWriteExceptionType::from(s))
    }
}
impl BatchWriteExceptionType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            BatchWriteExceptionType::AccessDeniedException => "AccessDeniedException",
            BatchWriteExceptionType::DirectoryNotEnabledException => "DirectoryNotEnabledException",
            BatchWriteExceptionType::FacetValidationException => "FacetValidationException",
            BatchWriteExceptionType::IndexedAttributeMissingException => {
                "IndexedAttributeMissingException"
            }
            BatchWriteExceptionType::InternalServiceException => "InternalServiceException",
            BatchWriteExceptionType::InvalidArnException => "InvalidArnException",
            BatchWriteExceptionType::InvalidAttachmentException => "InvalidAttachmentException",
            BatchWriteExceptionType::LimitExceededException => "LimitExceededException",
            BatchWriteExceptionType::LinkNameAlreadyInUseException => {
                "LinkNameAlreadyInUseException"
            }
            BatchWriteExceptionType::NotIndexException => "NotIndexException",
            BatchWriteExceptionType::NotNodeException => "NotNodeException",
            BatchWriteExceptionType::NotPolicyException => "NotPolicyException",
            BatchWriteExceptionType::ObjectAlreadyDetachedException => {
                "ObjectAlreadyDetachedException"
            }
            BatchWriteExceptionType::ObjectNotDetachedException => "ObjectNotDetachedException",
            BatchWriteExceptionType::ResourceNotFoundException => "ResourceNotFoundException",
            BatchWriteExceptionType::StillContainsLinksException => "StillContainsLinksException",
            BatchWriteExceptionType::UnsupportedIndexTypeException => {
                "UnsupportedIndexTypeException"
            }
            BatchWriteExceptionType::ValidationException => "ValidationException",
            BatchWriteExceptionType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AccessDeniedException",
            "DirectoryNotEnabledException",
            "FacetValidationException",
            "IndexedAttributeMissingException",
            "InternalServiceException",
            "InvalidArnException",
            "InvalidAttachmentException",
            "LimitExceededException",
            "LinkNameAlreadyInUseException",
            "NotIndexException",
            "NotNodeException",
            "NotPolicyException",
            "ObjectAlreadyDetachedException",
            "ObjectNotDetachedException",
            "ResourceNotFoundException",
            "StillContainsLinksException",
            "UnsupportedIndexTypeException",
            "ValidationException",
        ]
    }
}
impl AsRef<str> for BatchWriteExceptionType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
