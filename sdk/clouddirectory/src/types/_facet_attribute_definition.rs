// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A facet attribute definition. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_attributereferences.html">Attribute References</a> for more information.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FacetAttributeDefinition {
    /// <p>The type of the attribute.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::FacetAttributeType>,
    /// <p>The default value of the attribute (if configured).</p>
    #[doc(hidden)]
    pub default_value: std::option::Option<crate::types::TypedAttributeValue>,
    /// <p>Whether the attribute is mutable or not.</p>
    #[doc(hidden)]
    pub is_immutable: bool,
    /// <p>Validation rules attached to the attribute definition.</p>
    #[doc(hidden)]
    pub rules:
        std::option::Option<std::collections::HashMap<std::string::String, crate::types::Rule>>,
}
impl FacetAttributeDefinition {
    /// <p>The type of the attribute.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::FacetAttributeType> {
        self.r#type.as_ref()
    }
    /// <p>The default value of the attribute (if configured).</p>
    pub fn default_value(&self) -> std::option::Option<&crate::types::TypedAttributeValue> {
        self.default_value.as_ref()
    }
    /// <p>Whether the attribute is mutable or not.</p>
    pub fn is_immutable(&self) -> bool {
        self.is_immutable
    }
    /// <p>Validation rules attached to the attribute definition.</p>
    pub fn rules(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, crate::types::Rule>>
    {
        self.rules.as_ref()
    }
}
impl FacetAttributeDefinition {
    /// Creates a new builder-style object to manufacture [`FacetAttributeDefinition`](crate::types::FacetAttributeDefinition).
    pub fn builder() -> crate::types::builders::FacetAttributeDefinitionBuilder {
        crate::types::builders::FacetAttributeDefinitionBuilder::default()
    }
}

/// A builder for [`FacetAttributeDefinition`](crate::types::FacetAttributeDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FacetAttributeDefinitionBuilder {
    pub(crate) r#type: std::option::Option<crate::types::FacetAttributeType>,
    pub(crate) default_value: std::option::Option<crate::types::TypedAttributeValue>,
    pub(crate) is_immutable: std::option::Option<bool>,
    pub(crate) rules:
        std::option::Option<std::collections::HashMap<std::string::String, crate::types::Rule>>,
}
impl FacetAttributeDefinitionBuilder {
    /// <p>The type of the attribute.</p>
    pub fn r#type(mut self, input: crate::types::FacetAttributeType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the attribute.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::FacetAttributeType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The default value of the attribute (if configured).</p>
    pub fn default_value(mut self, input: crate::types::TypedAttributeValue) -> Self {
        self.default_value = Some(input);
        self
    }
    /// <p>The default value of the attribute (if configured).</p>
    pub fn set_default_value(
        mut self,
        input: std::option::Option<crate::types::TypedAttributeValue>,
    ) -> Self {
        self.default_value = input;
        self
    }
    /// <p>Whether the attribute is mutable or not.</p>
    pub fn is_immutable(mut self, input: bool) -> Self {
        self.is_immutable = Some(input);
        self
    }
    /// <p>Whether the attribute is mutable or not.</p>
    pub fn set_is_immutable(mut self, input: std::option::Option<bool>) -> Self {
        self.is_immutable = input;
        self
    }
    /// Adds a key-value pair to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>Validation rules attached to the attribute definition.</p>
    pub fn rules(mut self, k: impl Into<std::string::String>, v: crate::types::Rule) -> Self {
        let mut hash_map = self.rules.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.rules = Some(hash_map);
        self
    }
    /// <p>Validation rules attached to the attribute definition.</p>
    pub fn set_rules(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::Rule>,
        >,
    ) -> Self {
        self.rules = input;
        self
    }
    /// Consumes the builder and constructs a [`FacetAttributeDefinition`](crate::types::FacetAttributeDefinition).
    pub fn build(self) -> crate::types::FacetAttributeDefinition {
        crate::types::FacetAttributeDefinition {
            r#type: self.r#type,
            default_value: self.default_value,
            is_immutable: self.is_immutable.unwrap_or_default(),
            rules: self.rules,
        }
    }
}
