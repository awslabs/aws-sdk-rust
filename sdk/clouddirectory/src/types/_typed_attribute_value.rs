// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the data for a typed attribute. You can set one, and only one, of the elements. Each attribute in an item is a name-value pair. Attributes have a single value.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum TypedAttributeValue {
    /// <p>A binary data value.</p>
    BinaryValue(aws_smithy_types::Blob),
    /// <p>A Boolean data value.</p>
    BooleanValue(bool),
    /// <p>A date and time value.</p>
    DatetimeValue(aws_smithy_types::DateTime),
    /// <p>A number data value.</p>
    NumberValue(std::string::String),
    /// <p>A string data value.</p>
    StringValue(std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl TypedAttributeValue {
    /// Tries to convert the enum instance into [`BinaryValue`](crate::types::TypedAttributeValue::BinaryValue), extracting the inner [`Blob`](aws_smithy_types::Blob).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_binary_value(&self) -> std::result::Result<&aws_smithy_types::Blob, &Self> {
        if let TypedAttributeValue::BinaryValue(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`BinaryValue`](crate::types::TypedAttributeValue::BinaryValue).
    pub fn is_binary_value(&self) -> bool {
        self.as_binary_value().is_ok()
    }
    /// Tries to convert the enum instance into [`BooleanValue`](crate::types::TypedAttributeValue::BooleanValue), extracting the inner [`bool`](bool).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_boolean_value(&self) -> std::result::Result<&bool, &Self> {
        if let TypedAttributeValue::BooleanValue(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`BooleanValue`](crate::types::TypedAttributeValue::BooleanValue).
    pub fn is_boolean_value(&self) -> bool {
        self.as_boolean_value().is_ok()
    }
    /// Tries to convert the enum instance into [`DatetimeValue`](crate::types::TypedAttributeValue::DatetimeValue), extracting the inner [`DateTime`](aws_smithy_types::DateTime).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_datetime_value(&self) -> std::result::Result<&aws_smithy_types::DateTime, &Self> {
        if let TypedAttributeValue::DatetimeValue(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`DatetimeValue`](crate::types::TypedAttributeValue::DatetimeValue).
    pub fn is_datetime_value(&self) -> bool {
        self.as_datetime_value().is_ok()
    }
    /// Tries to convert the enum instance into [`NumberValue`](crate::types::TypedAttributeValue::NumberValue), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_number_value(&self) -> std::result::Result<&std::string::String, &Self> {
        if let TypedAttributeValue::NumberValue(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`NumberValue`](crate::types::TypedAttributeValue::NumberValue).
    pub fn is_number_value(&self) -> bool {
        self.as_number_value().is_ok()
    }
    /// Tries to convert the enum instance into [`StringValue`](crate::types::TypedAttributeValue::StringValue), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string_value(&self) -> std::result::Result<&std::string::String, &Self> {
        if let TypedAttributeValue::StringValue(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`StringValue`](crate::types::TypedAttributeValue::StringValue).
    pub fn is_string_value(&self) -> bool {
        self.as_string_value().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
