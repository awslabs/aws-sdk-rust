// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Attaches the specified object to the specified index inside a <code>BatchRead</code> operation. For more information, see <code>AttachToIndex</code> and <code>BatchReadRequest$Operations</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchAttachToIndex {
    /// <p>A reference to the index that you are attaching the object to.</p>
    pub index_reference: ::std::option::Option<crate::types::ObjectReference>,
    /// <p>A reference to the object that you are attaching to the index.</p>
    pub target_reference: ::std::option::Option<crate::types::ObjectReference>,
}
impl BatchAttachToIndex {
    /// <p>A reference to the index that you are attaching the object to.</p>
    pub fn index_reference(&self) -> ::std::option::Option<&crate::types::ObjectReference> {
        self.index_reference.as_ref()
    }
    /// <p>A reference to the object that you are attaching to the index.</p>
    pub fn target_reference(&self) -> ::std::option::Option<&crate::types::ObjectReference> {
        self.target_reference.as_ref()
    }
}
impl BatchAttachToIndex {
    /// Creates a new builder-style object to manufacture [`BatchAttachToIndex`](crate::types::BatchAttachToIndex).
    pub fn builder() -> crate::types::builders::BatchAttachToIndexBuilder {
        crate::types::builders::BatchAttachToIndexBuilder::default()
    }
}

/// A builder for [`BatchAttachToIndex`](crate::types::BatchAttachToIndex).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchAttachToIndexBuilder {
    pub(crate) index_reference: ::std::option::Option<crate::types::ObjectReference>,
    pub(crate) target_reference: ::std::option::Option<crate::types::ObjectReference>,
}
impl BatchAttachToIndexBuilder {
    /// <p>A reference to the index that you are attaching the object to.</p>
    /// This field is required.
    pub fn index_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.index_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>A reference to the index that you are attaching the object to.</p>
    pub fn set_index_reference(mut self, input: ::std::option::Option<crate::types::ObjectReference>) -> Self {
        self.index_reference = input;
        self
    }
    /// <p>A reference to the index that you are attaching the object to.</p>
    pub fn get_index_reference(&self) -> &::std::option::Option<crate::types::ObjectReference> {
        &self.index_reference
    }
    /// <p>A reference to the object that you are attaching to the index.</p>
    /// This field is required.
    pub fn target_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.target_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>A reference to the object that you are attaching to the index.</p>
    pub fn set_target_reference(mut self, input: ::std::option::Option<crate::types::ObjectReference>) -> Self {
        self.target_reference = input;
        self
    }
    /// <p>A reference to the object that you are attaching to the index.</p>
    pub fn get_target_reference(&self) -> &::std::option::Option<crate::types::ObjectReference> {
        &self.target_reference
    }
    /// Consumes the builder and constructs a [`BatchAttachToIndex`](crate::types::BatchAttachToIndex).
    pub fn build(self) -> crate::types::BatchAttachToIndex {
        crate::types::BatchAttachToIndex {
            index_reference: self.index_reference,
            target_reference: self.target_reference,
        }
    }
}
