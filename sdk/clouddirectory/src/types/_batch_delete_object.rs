// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of a <code>DeleteObject</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDeleteObject {
    /// <p>The reference that identifies the object.</p>
    pub object_reference: ::std::option::Option<crate::types::ObjectReference>,
}
impl BatchDeleteObject {
    /// <p>The reference that identifies the object.</p>
    pub fn object_reference(&self) -> ::std::option::Option<&crate::types::ObjectReference> {
        self.object_reference.as_ref()
    }
}
impl BatchDeleteObject {
    /// Creates a new builder-style object to manufacture [`BatchDeleteObject`](crate::types::BatchDeleteObject).
    pub fn builder() -> crate::types::builders::BatchDeleteObjectBuilder {
        crate::types::builders::BatchDeleteObjectBuilder::default()
    }
}

/// A builder for [`BatchDeleteObject`](crate::types::BatchDeleteObject).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDeleteObjectBuilder {
    pub(crate) object_reference: ::std::option::Option<crate::types::ObjectReference>,
}
impl BatchDeleteObjectBuilder {
    /// <p>The reference that identifies the object.</p>
    /// This field is required.
    pub fn object_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.object_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reference that identifies the object.</p>
    pub fn set_object_reference(mut self, input: ::std::option::Option<crate::types::ObjectReference>) -> Self {
        self.object_reference = input;
        self
    }
    /// <p>The reference that identifies the object.</p>
    pub fn get_object_reference(&self) -> &::std::option::Option<crate::types::ObjectReference> {
        &self.object_reference
    }
    /// Consumes the builder and constructs a [`BatchDeleteObject`](crate::types::BatchDeleteObject).
    pub fn build(self) -> crate::types::BatchDeleteObject {
        crate::types::BatchDeleteObject {
            object_reference: self.object_reference,
        }
    }
}
