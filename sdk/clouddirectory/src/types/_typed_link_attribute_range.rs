// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifies the range of attributes that are used by a specified filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TypedLinkAttributeRange {
    /// <p>The unique name of the typed link attribute.</p>
    pub attribute_name: ::std::option::Option<::std::string::String>,
    /// <p>The range of attribute values that are being selected.</p>
    pub range: ::std::option::Option<crate::types::TypedAttributeValueRange>,
}
impl TypedLinkAttributeRange {
    /// <p>The unique name of the typed link attribute.</p>
    pub fn attribute_name(&self) -> ::std::option::Option<&str> {
        self.attribute_name.as_deref()
    }
    /// <p>The range of attribute values that are being selected.</p>
    pub fn range(&self) -> ::std::option::Option<&crate::types::TypedAttributeValueRange> {
        self.range.as_ref()
    }
}
impl TypedLinkAttributeRange {
    /// Creates a new builder-style object to manufacture [`TypedLinkAttributeRange`](crate::types::TypedLinkAttributeRange).
    pub fn builder() -> crate::types::builders::TypedLinkAttributeRangeBuilder {
        crate::types::builders::TypedLinkAttributeRangeBuilder::default()
    }
}

/// A builder for [`TypedLinkAttributeRange`](crate::types::TypedLinkAttributeRange).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TypedLinkAttributeRangeBuilder {
    pub(crate) attribute_name: ::std::option::Option<::std::string::String>,
    pub(crate) range: ::std::option::Option<crate::types::TypedAttributeValueRange>,
}
impl TypedLinkAttributeRangeBuilder {
    /// <p>The unique name of the typed link attribute.</p>
    pub fn attribute_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the typed link attribute.</p>
    pub fn set_attribute_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The unique name of the typed link attribute.</p>
    pub fn get_attribute_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute_name
    }
    /// <p>The range of attribute values that are being selected.</p>
    /// This field is required.
    pub fn range(mut self, input: crate::types::TypedAttributeValueRange) -> Self {
        self.range = ::std::option::Option::Some(input);
        self
    }
    /// <p>The range of attribute values that are being selected.</p>
    pub fn set_range(mut self, input: ::std::option::Option<crate::types::TypedAttributeValueRange>) -> Self {
        self.range = input;
        self
    }
    /// <p>The range of attribute values that are being selected.</p>
    pub fn get_range(&self) -> &::std::option::Option<crate::types::TypedAttributeValueRange> {
        &self.range
    }
    /// Consumes the builder and constructs a [`TypedLinkAttributeRange`](crate::types::TypedLinkAttributeRange).
    pub fn build(self) -> crate::types::TypedLinkAttributeRange {
        crate::types::TypedLinkAttributeRange {
            attribute_name: self.attribute_name,
            range: self.range,
        }
    }
}
