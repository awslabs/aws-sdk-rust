// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an index and an attached object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IndexAttachment {
    /// <p>The indexed attribute values.</p>
    #[doc(hidden)]
    pub indexed_attributes: std::option::Option<std::vec::Vec<crate::types::AttributeKeyAndValue>>,
    /// <p>In response to <code>ListIndex</code>, the <code>ObjectIdentifier</code> of the object attached to the index. In response to <code>ListAttachedIndices</code>, the <code>ObjectIdentifier</code> of the index attached to the object. This field will always contain the <code>ObjectIdentifier</code> of the object on the opposite side of the attachment specified in the query.</p>
    #[doc(hidden)]
    pub object_identifier: std::option::Option<std::string::String>,
}
impl IndexAttachment {
    /// <p>The indexed attribute values.</p>
    pub fn indexed_attributes(&self) -> std::option::Option<&[crate::types::AttributeKeyAndValue]> {
        self.indexed_attributes.as_deref()
    }
    /// <p>In response to <code>ListIndex</code>, the <code>ObjectIdentifier</code> of the object attached to the index. In response to <code>ListAttachedIndices</code>, the <code>ObjectIdentifier</code> of the index attached to the object. This field will always contain the <code>ObjectIdentifier</code> of the object on the opposite side of the attachment specified in the query.</p>
    pub fn object_identifier(&self) -> std::option::Option<&str> {
        self.object_identifier.as_deref()
    }
}
impl IndexAttachment {
    /// Creates a new builder-style object to manufacture [`IndexAttachment`](crate::types::IndexAttachment).
    pub fn builder() -> crate::types::builders::IndexAttachmentBuilder {
        crate::types::builders::IndexAttachmentBuilder::default()
    }
}

/// A builder for [`IndexAttachment`](crate::types::IndexAttachment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IndexAttachmentBuilder {
    pub(crate) indexed_attributes:
        std::option::Option<std::vec::Vec<crate::types::AttributeKeyAndValue>>,
    pub(crate) object_identifier: std::option::Option<std::string::String>,
}
impl IndexAttachmentBuilder {
    /// Appends an item to `indexed_attributes`.
    ///
    /// To override the contents of this collection use [`set_indexed_attributes`](Self::set_indexed_attributes).
    ///
    /// <p>The indexed attribute values.</p>
    pub fn indexed_attributes(mut self, input: crate::types::AttributeKeyAndValue) -> Self {
        let mut v = self.indexed_attributes.unwrap_or_default();
        v.push(input);
        self.indexed_attributes = Some(v);
        self
    }
    /// <p>The indexed attribute values.</p>
    pub fn set_indexed_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AttributeKeyAndValue>>,
    ) -> Self {
        self.indexed_attributes = input;
        self
    }
    /// <p>In response to <code>ListIndex</code>, the <code>ObjectIdentifier</code> of the object attached to the index. In response to <code>ListAttachedIndices</code>, the <code>ObjectIdentifier</code> of the index attached to the object. This field will always contain the <code>ObjectIdentifier</code> of the object on the opposite side of the attachment specified in the query.</p>
    pub fn object_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.object_identifier = Some(input.into());
        self
    }
    /// <p>In response to <code>ListIndex</code>, the <code>ObjectIdentifier</code> of the object attached to the index. In response to <code>ListAttachedIndices</code>, the <code>ObjectIdentifier</code> of the index attached to the object. This field will always contain the <code>ObjectIdentifier</code> of the object on the opposite side of the attachment specified in the query.</p>
    pub fn set_object_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.object_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`IndexAttachment`](crate::types::IndexAttachment).
    pub fn build(self) -> crate::types::IndexAttachment {
        crate::types::IndexAttachment {
            indexed_attributes: self.indexed_attributes,
            object_identifier: self.object_identifier,
        }
    }
}
