// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A unique identifier for an attribute.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttributeKey {
    /// <p>The Amazon Resource Name (ARN) of the schema that contains the facet and attribute.</p>
    #[doc(hidden)]
    pub schema_arn: std::option::Option<std::string::String>,
    /// <p>The name of the facet that the attribute exists within.</p>
    #[doc(hidden)]
    pub facet_name: std::option::Option<std::string::String>,
    /// <p>The name of the attribute.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl AttributeKey {
    /// <p>The Amazon Resource Name (ARN) of the schema that contains the facet and attribute.</p>
    pub fn schema_arn(&self) -> std::option::Option<&str> {
        self.schema_arn.as_deref()
    }
    /// <p>The name of the facet that the attribute exists within.</p>
    pub fn facet_name(&self) -> std::option::Option<&str> {
        self.facet_name.as_deref()
    }
    /// <p>The name of the attribute.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl AttributeKey {
    /// Creates a new builder-style object to manufacture [`AttributeKey`](crate::types::AttributeKey).
    pub fn builder() -> crate::types::builders::AttributeKeyBuilder {
        crate::types::builders::AttributeKeyBuilder::default()
    }
}

/// A builder for [`AttributeKey`](crate::types::AttributeKey).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AttributeKeyBuilder {
    pub(crate) schema_arn: std::option::Option<std::string::String>,
    pub(crate) facet_name: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl AttributeKeyBuilder {
    /// <p>The Amazon Resource Name (ARN) of the schema that contains the facet and attribute.</p>
    pub fn schema_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the schema that contains the facet and attribute.</p>
    pub fn set_schema_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_arn = input;
        self
    }
    /// <p>The name of the facet that the attribute exists within.</p>
    pub fn facet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.facet_name = Some(input.into());
        self
    }
    /// <p>The name of the facet that the attribute exists within.</p>
    pub fn set_facet_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.facet_name = input;
        self
    }
    /// <p>The name of the attribute.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the attribute.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`AttributeKey`](crate::types::AttributeKey).
    pub fn build(self) -> crate::types::AttributeKey {
        crate::types::AttributeKey {
            schema_arn: self.schema_arn,
            facet_name: self.facet_name,
            name: self.name,
        }
    }
}
