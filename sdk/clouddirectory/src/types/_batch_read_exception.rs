// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The batch read exception structure, which contains the exception type and message.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchReadException {
    /// <p>A type of exception, such as <code>InvalidArnException</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::BatchReadExceptionType>,
    /// <p>An exception message that is associated with the failure.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
}
impl BatchReadException {
    /// <p>A type of exception, such as <code>InvalidArnException</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::BatchReadExceptionType> {
        self.r#type.as_ref()
    }
    /// <p>An exception message that is associated with the failure.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl BatchReadException {
    /// Creates a new builder-style object to manufacture [`BatchReadException`](crate::types::BatchReadException).
    pub fn builder() -> crate::types::builders::BatchReadExceptionBuilder {
        crate::types::builders::BatchReadExceptionBuilder::default()
    }
}

/// A builder for [`BatchReadException`](crate::types::BatchReadException).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchReadExceptionBuilder {
    pub(crate) r#type: std::option::Option<crate::types::BatchReadExceptionType>,
    pub(crate) message: std::option::Option<std::string::String>,
}
impl BatchReadExceptionBuilder {
    /// <p>A type of exception, such as <code>InvalidArnException</code>.</p>
    pub fn r#type(mut self, input: crate::types::BatchReadExceptionType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>A type of exception, such as <code>InvalidArnException</code>.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::BatchReadExceptionType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>An exception message that is associated with the failure.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>An exception message that is associated with the failure.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchReadException`](crate::types::BatchReadException).
    pub fn build(self) -> crate::types::BatchReadException {
        crate::types::BatchReadException {
            r#type: self.r#type,
            message: self.message,
        }
    }
}
