// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the <code>PolicyType</code>, <code>PolicyId</code>, and the <code>ObjectIdentifier</code> to which it is attached. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PolicyAttachment {
    /// <p>The ID of <code>PolicyAttachment</code>.</p>
    #[doc(hidden)]
    pub policy_id: std::option::Option<std::string::String>,
    /// <p>The <code>ObjectIdentifier</code> that is associated with <code>PolicyAttachment</code>.</p>
    #[doc(hidden)]
    pub object_identifier: std::option::Option<std::string::String>,
    /// <p>The type of policy that can be associated with <code>PolicyAttachment</code>.</p>
    #[doc(hidden)]
    pub policy_type: std::option::Option<std::string::String>,
}
impl PolicyAttachment {
    /// <p>The ID of <code>PolicyAttachment</code>.</p>
    pub fn policy_id(&self) -> std::option::Option<&str> {
        self.policy_id.as_deref()
    }
    /// <p>The <code>ObjectIdentifier</code> that is associated with <code>PolicyAttachment</code>.</p>
    pub fn object_identifier(&self) -> std::option::Option<&str> {
        self.object_identifier.as_deref()
    }
    /// <p>The type of policy that can be associated with <code>PolicyAttachment</code>.</p>
    pub fn policy_type(&self) -> std::option::Option<&str> {
        self.policy_type.as_deref()
    }
}
impl PolicyAttachment {
    /// Creates a new builder-style object to manufacture [`PolicyAttachment`](crate::types::PolicyAttachment).
    pub fn builder() -> crate::types::builders::PolicyAttachmentBuilder {
        crate::types::builders::PolicyAttachmentBuilder::default()
    }
}

/// A builder for [`PolicyAttachment`](crate::types::PolicyAttachment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PolicyAttachmentBuilder {
    pub(crate) policy_id: std::option::Option<std::string::String>,
    pub(crate) object_identifier: std::option::Option<std::string::String>,
    pub(crate) policy_type: std::option::Option<std::string::String>,
}
impl PolicyAttachmentBuilder {
    /// <p>The ID of <code>PolicyAttachment</code>.</p>
    pub fn policy_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy_id = Some(input.into());
        self
    }
    /// <p>The ID of <code>PolicyAttachment</code>.</p>
    pub fn set_policy_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy_id = input;
        self
    }
    /// <p>The <code>ObjectIdentifier</code> that is associated with <code>PolicyAttachment</code>.</p>
    pub fn object_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.object_identifier = Some(input.into());
        self
    }
    /// <p>The <code>ObjectIdentifier</code> that is associated with <code>PolicyAttachment</code>.</p>
    pub fn set_object_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.object_identifier = input;
        self
    }
    /// <p>The type of policy that can be associated with <code>PolicyAttachment</code>.</p>
    pub fn policy_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy_type = Some(input.into());
        self
    }
    /// <p>The type of policy that can be associated with <code>PolicyAttachment</code>.</p>
    pub fn set_policy_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy_type = input;
        self
    }
    /// Consumes the builder and constructs a [`PolicyAttachment`](crate::types::PolicyAttachment).
    pub fn build(self) -> crate::types::PolicyAttachment {
        crate::types::PolicyAttachment {
            policy_id: self.policy_id,
            object_identifier: self.object_identifier,
            policy_type: self.policy_type,
        }
    }
}
