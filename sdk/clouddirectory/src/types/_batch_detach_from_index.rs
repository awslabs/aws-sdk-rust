// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detaches the specified object from the specified index inside a <code>BatchRead</code> operation. For more information, see <code>DetachFromIndex</code> and <code>BatchReadRequest$Operations</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDetachFromIndex {
    /// <p>A reference to the index object.</p>
    #[doc(hidden)]
    pub index_reference: std::option::Option<crate::types::ObjectReference>,
    /// <p>A reference to the object being detached from the index.</p>
    #[doc(hidden)]
    pub target_reference: std::option::Option<crate::types::ObjectReference>,
}
impl BatchDetachFromIndex {
    /// <p>A reference to the index object.</p>
    pub fn index_reference(&self) -> std::option::Option<&crate::types::ObjectReference> {
        self.index_reference.as_ref()
    }
    /// <p>A reference to the object being detached from the index.</p>
    pub fn target_reference(&self) -> std::option::Option<&crate::types::ObjectReference> {
        self.target_reference.as_ref()
    }
}
impl BatchDetachFromIndex {
    /// Creates a new builder-style object to manufacture [`BatchDetachFromIndex`](crate::types::BatchDetachFromIndex).
    pub fn builder() -> crate::types::builders::BatchDetachFromIndexBuilder {
        crate::types::builders::BatchDetachFromIndexBuilder::default()
    }
}

/// A builder for [`BatchDetachFromIndex`](crate::types::BatchDetachFromIndex).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchDetachFromIndexBuilder {
    pub(crate) index_reference: std::option::Option<crate::types::ObjectReference>,
    pub(crate) target_reference: std::option::Option<crate::types::ObjectReference>,
}
impl BatchDetachFromIndexBuilder {
    /// <p>A reference to the index object.</p>
    pub fn index_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.index_reference = Some(input);
        self
    }
    /// <p>A reference to the index object.</p>
    pub fn set_index_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.index_reference = input;
        self
    }
    /// <p>A reference to the object being detached from the index.</p>
    pub fn target_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.target_reference = Some(input);
        self
    }
    /// <p>A reference to the object being detached from the index.</p>
    pub fn set_target_reference(
        mut self,
        input: std::option::Option<crate::types::ObjectReference>,
    ) -> Self {
        self.target_reference = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchDetachFromIndex`](crate::types::BatchDetachFromIndex).
    pub fn build(self) -> crate::types::BatchDetachFromIndex {
        crate::types::BatchDetachFromIndex {
            index_reference: self.index_reference,
            target_reference: self.target_reference,
        }
    }
}
