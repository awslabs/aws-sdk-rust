// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A facet.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SchemaFacet {
    /// <p>The ARN of the schema that contains the facet with no minor component. See <code>arns</code> and <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_inplaceschemaupgrade.html">In-Place Schema Upgrade</a> for a description of when to provide minor versions. If this value is set, FacetName must also be set.</p>
    #[doc(hidden)]
    pub schema_arn: std::option::Option<std::string::String>,
    /// <p>The name of the facet. If this value is set, SchemaArn must also be set.</p>
    #[doc(hidden)]
    pub facet_name: std::option::Option<std::string::String>,
}
impl SchemaFacet {
    /// <p>The ARN of the schema that contains the facet with no minor component. See <code>arns</code> and <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_inplaceschemaupgrade.html">In-Place Schema Upgrade</a> for a description of when to provide minor versions. If this value is set, FacetName must also be set.</p>
    pub fn schema_arn(&self) -> std::option::Option<&str> {
        self.schema_arn.as_deref()
    }
    /// <p>The name of the facet. If this value is set, SchemaArn must also be set.</p>
    pub fn facet_name(&self) -> std::option::Option<&str> {
        self.facet_name.as_deref()
    }
}
impl SchemaFacet {
    /// Creates a new builder-style object to manufacture [`SchemaFacet`](crate::types::SchemaFacet).
    pub fn builder() -> crate::types::builders::SchemaFacetBuilder {
        crate::types::builders::SchemaFacetBuilder::default()
    }
}

/// A builder for [`SchemaFacet`](crate::types::SchemaFacet).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SchemaFacetBuilder {
    pub(crate) schema_arn: std::option::Option<std::string::String>,
    pub(crate) facet_name: std::option::Option<std::string::String>,
}
impl SchemaFacetBuilder {
    /// <p>The ARN of the schema that contains the facet with no minor component. See <code>arns</code> and <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_inplaceschemaupgrade.html">In-Place Schema Upgrade</a> for a description of when to provide minor versions. If this value is set, FacetName must also be set.</p>
    pub fn schema_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the schema that contains the facet with no minor component. See <code>arns</code> and <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_inplaceschemaupgrade.html">In-Place Schema Upgrade</a> for a description of when to provide minor versions. If this value is set, FacetName must also be set.</p>
    pub fn set_schema_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_arn = input;
        self
    }
    /// <p>The name of the facet. If this value is set, SchemaArn must also be set.</p>
    pub fn facet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.facet_name = Some(input.into());
        self
    }
    /// <p>The name of the facet. If this value is set, SchemaArn must also be set.</p>
    pub fn set_facet_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.facet_name = input;
        self
    }
    /// Consumes the builder and constructs a [`SchemaFacet`](crate::types::SchemaFacet).
    pub fn build(self) -> crate::types::SchemaFacet {
        crate::types::SchemaFacet {
            schema_arn: self.schema_arn,
            facet_name: self.facet_name,
        }
    }
}
