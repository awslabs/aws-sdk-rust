// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the typed links structure and its attributes. To create a typed link facet, use the <code>CreateTypedLinkFacet</code> API.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TypedLinkFacet {
    /// <p>The unique name of the typed link facet.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A set of key-value pairs associated with the typed link. Typed link attributes are used when you have data values that are related to the link itself, and not to one of the two objects being linked. Identity attributes also serve to distinguish the link from others of the same type between the same objects.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<std::vec::Vec<crate::types::TypedLinkAttributeDefinition>>,
    /// <p>The set of attributes that distinguish links made from this facet from each other, in the order of significance. Listing typed links can filter on the values of these attributes. See <code>ListOutgoingTypedLinks</code> and <code>ListIncomingTypedLinks</code> for details.</p>
    #[doc(hidden)]
    pub identity_attribute_order: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TypedLinkFacet {
    /// <p>The unique name of the typed link facet.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A set of key-value pairs associated with the typed link. Typed link attributes are used when you have data values that are related to the link itself, and not to one of the two objects being linked. Identity attributes also serve to distinguish the link from others of the same type between the same objects.</p>
    pub fn attributes(&self) -> std::option::Option<&[crate::types::TypedLinkAttributeDefinition]> {
        self.attributes.as_deref()
    }
    /// <p>The set of attributes that distinguish links made from this facet from each other, in the order of significance. Listing typed links can filter on the values of these attributes. See <code>ListOutgoingTypedLinks</code> and <code>ListIncomingTypedLinks</code> for details.</p>
    pub fn identity_attribute_order(&self) -> std::option::Option<&[std::string::String]> {
        self.identity_attribute_order.as_deref()
    }
}
impl TypedLinkFacet {
    /// Creates a new builder-style object to manufacture [`TypedLinkFacet`](crate::types::TypedLinkFacet).
    pub fn builder() -> crate::types::builders::TypedLinkFacetBuilder {
        crate::types::builders::TypedLinkFacetBuilder::default()
    }
}

/// A builder for [`TypedLinkFacet`](crate::types::TypedLinkFacet).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TypedLinkFacetBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) attributes:
        std::option::Option<std::vec::Vec<crate::types::TypedLinkAttributeDefinition>>,
    pub(crate) identity_attribute_order: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TypedLinkFacetBuilder {
    /// <p>The unique name of the typed link facet.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The unique name of the typed link facet.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A set of key-value pairs associated with the typed link. Typed link attributes are used when you have data values that are related to the link itself, and not to one of the two objects being linked. Identity attributes also serve to distinguish the link from others of the same type between the same objects.</p>
    pub fn attributes(mut self, input: crate::types::TypedLinkAttributeDefinition) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = Some(v);
        self
    }
    /// <p>A set of key-value pairs associated with the typed link. Typed link attributes are used when you have data values that are related to the link itself, and not to one of the two objects being linked. Identity attributes also serve to distinguish the link from others of the same type between the same objects.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TypedLinkAttributeDefinition>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// Appends an item to `identity_attribute_order`.
    ///
    /// To override the contents of this collection use [`set_identity_attribute_order`](Self::set_identity_attribute_order).
    ///
    /// <p>The set of attributes that distinguish links made from this facet from each other, in the order of significance. Listing typed links can filter on the values of these attributes. See <code>ListOutgoingTypedLinks</code> and <code>ListIncomingTypedLinks</code> for details.</p>
    pub fn identity_attribute_order(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.identity_attribute_order.unwrap_or_default();
        v.push(input.into());
        self.identity_attribute_order = Some(v);
        self
    }
    /// <p>The set of attributes that distinguish links made from this facet from each other, in the order of significance. Listing typed links can filter on the values of these attributes. See <code>ListOutgoingTypedLinks</code> and <code>ListIncomingTypedLinks</code> for details.</p>
    pub fn set_identity_attribute_order(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.identity_attribute_order = input;
        self
    }
    /// Consumes the builder and constructs a [`TypedLinkFacet`](crate::types::TypedLinkFacet).
    pub fn build(self) -> crate::types::TypedLinkFacet {
        crate::types::TypedLinkFacet {
            name: self.name,
            attributes: self.attributes,
            identity_attribute_order: self.identity_attribute_order,
        }
    }
}
