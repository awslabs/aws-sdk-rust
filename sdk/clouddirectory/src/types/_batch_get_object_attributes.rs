// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Retrieves attributes within a facet that are associated with an object inside an <code>BatchRead</code> operation. For more information, see <code>GetObjectAttributes</code> and <code>BatchReadRequest$Operations</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetObjectAttributes {
    /// <p>Reference that identifies the object whose attributes will be retrieved.</p>
    pub object_reference: ::std::option::Option<crate::types::ObjectReference>,
    /// <p>Identifier for the facet whose attributes will be retrieved. See <code>SchemaFacet</code> for details.</p>
    pub schema_facet: ::std::option::Option<crate::types::SchemaFacet>,
    /// <p>List of attribute names whose values will be retrieved.</p>
    pub attribute_names: ::std::vec::Vec<::std::string::String>,
}
impl BatchGetObjectAttributes {
    /// <p>Reference that identifies the object whose attributes will be retrieved.</p>
    pub fn object_reference(&self) -> ::std::option::Option<&crate::types::ObjectReference> {
        self.object_reference.as_ref()
    }
    /// <p>Identifier for the facet whose attributes will be retrieved. See <code>SchemaFacet</code> for details.</p>
    pub fn schema_facet(&self) -> ::std::option::Option<&crate::types::SchemaFacet> {
        self.schema_facet.as_ref()
    }
    /// <p>List of attribute names whose values will be retrieved.</p>
    pub fn attribute_names(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.attribute_names.deref()
    }
}
impl BatchGetObjectAttributes {
    /// Creates a new builder-style object to manufacture [`BatchGetObjectAttributes`](crate::types::BatchGetObjectAttributes).
    pub fn builder() -> crate::types::builders::BatchGetObjectAttributesBuilder {
        crate::types::builders::BatchGetObjectAttributesBuilder::default()
    }
}

/// A builder for [`BatchGetObjectAttributes`](crate::types::BatchGetObjectAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetObjectAttributesBuilder {
    pub(crate) object_reference: ::std::option::Option<crate::types::ObjectReference>,
    pub(crate) schema_facet: ::std::option::Option<crate::types::SchemaFacet>,
    pub(crate) attribute_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchGetObjectAttributesBuilder {
    /// <p>Reference that identifies the object whose attributes will be retrieved.</p>
    /// This field is required.
    pub fn object_reference(mut self, input: crate::types::ObjectReference) -> Self {
        self.object_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reference that identifies the object whose attributes will be retrieved.</p>
    pub fn set_object_reference(mut self, input: ::std::option::Option<crate::types::ObjectReference>) -> Self {
        self.object_reference = input;
        self
    }
    /// <p>Reference that identifies the object whose attributes will be retrieved.</p>
    pub fn get_object_reference(&self) -> &::std::option::Option<crate::types::ObjectReference> {
        &self.object_reference
    }
    /// <p>Identifier for the facet whose attributes will be retrieved. See <code>SchemaFacet</code> for details.</p>
    /// This field is required.
    pub fn schema_facet(mut self, input: crate::types::SchemaFacet) -> Self {
        self.schema_facet = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifier for the facet whose attributes will be retrieved. See <code>SchemaFacet</code> for details.</p>
    pub fn set_schema_facet(mut self, input: ::std::option::Option<crate::types::SchemaFacet>) -> Self {
        self.schema_facet = input;
        self
    }
    /// <p>Identifier for the facet whose attributes will be retrieved. See <code>SchemaFacet</code> for details.</p>
    pub fn get_schema_facet(&self) -> &::std::option::Option<crate::types::SchemaFacet> {
        &self.schema_facet
    }
    /// Appends an item to `attribute_names`.
    ///
    /// To override the contents of this collection use [`set_attribute_names`](Self::set_attribute_names).
    ///
    /// <p>List of attribute names whose values will be retrieved.</p>
    pub fn attribute_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.attribute_names.unwrap_or_default();
        v.push(input.into());
        self.attribute_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of attribute names whose values will be retrieved.</p>
    pub fn set_attribute_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.attribute_names = input;
        self
    }
    /// <p>List of attribute names whose values will be retrieved.</p>
    pub fn get_attribute_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.attribute_names
    }
    /// Consumes the builder and constructs a [`BatchGetObjectAttributes`](crate::types::BatchGetObjectAttributes).
    /// This method will fail if any of the following fields are not set:
    /// - [`attribute_names`](crate::types::builders::BatchGetObjectAttributesBuilder::attribute_names)
    pub fn build(self) -> ::std::result::Result<crate::types::BatchGetObjectAttributes, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchGetObjectAttributes {
            object_reference: self.object_reference,
            schema_facet: self.schema_facet,
            attribute_names: self.attribute_names.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attribute_names",
                    "attribute_names was not specified but it is required when building BatchGetObjectAttributes",
                )
            })?,
        })
    }
}
