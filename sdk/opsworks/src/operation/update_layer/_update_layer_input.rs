// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateLayerInput {
    /// <p>The layer ID.</p>
    pub layer_id: ::std::option::Option<::std::string::String>,
    /// <p>The layer name, which is used by the console.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters and must be in the following format: /\A[a-z0-9\-\_\.]+\Z/.</p>
    /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a> </p>
    pub shortname: ::std::option::Option<::std::string::String>,
    /// <p>One or more user-defined key/value pairs to be added to the stack attributes.</p>
    pub attributes: ::std::option::Option<::std::collections::HashMap<crate::types::LayerAttributesKeys, ::std::string::String>>,
    /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <code>CloudWatchLogsLogStream</code>.</p>
    pub cloud_watch_logs_configuration: ::std::option::Option<crate::types::CloudWatchLogsConfiguration>,
    /// <p>The ARN of an IAM profile to be used for all of the layer's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub custom_instance_profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html"> Using Custom JSON</a>. </p>
    pub custom_json: ::std::option::Option<::std::string::String>,
    /// <p>An array containing the layer's custom security group IDs.</p>
    pub custom_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An array of <code>Package</code> objects that describe the layer's packages.</p>
    pub packages: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
    pub volume_configurations: ::std::option::Option<::std::vec::Vec<crate::types::VolumeConfiguration>>,
    /// <p>Whether to disable auto healing for the layer.</p>
    pub enable_auto_healing: ::std::option::Option<bool>,
    /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub auto_assign_elastic_ips: ::std::option::Option<bool>,
    /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub auto_assign_public_ips: ::std::option::Option<bool>,
    /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer's custom recipes.</p>
    pub custom_recipes: ::std::option::Option<crate::types::Recipes>,
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. To control when updates are installed, set this value to <code>false</code>. You must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>We strongly recommend using the default value of <code>true</code>, to ensure that your instances have the latest security updates.</p>
    /// </note>
    pub install_updates_on_boot: ::std::option::Option<bool>,
    /// <p>Whether to use Amazon EBS-optimized instances.</p>
    pub use_ebs_optimized_instances: ::std::option::Option<bool>,
    /// <p></p>
    pub lifecycle_event_configuration: ::std::option::Option<crate::types::LifecycleEventConfiguration>,
}
impl UpdateLayerInput {
    /// <p>The layer ID.</p>
    pub fn layer_id(&self) -> ::std::option::Option<&str> {
        self.layer_id.as_deref()
    }
    /// <p>The layer name, which is used by the console.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters and must be in the following format: /\A[a-z0-9\-\_\.]+\Z/.</p>
    /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a> </p>
    pub fn shortname(&self) -> ::std::option::Option<&str> {
        self.shortname.as_deref()
    }
    /// <p>One or more user-defined key/value pairs to be added to the stack attributes.</p>
    pub fn attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::LayerAttributesKeys, ::std::string::String>> {
        self.attributes.as_ref()
    }
    /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <code>CloudWatchLogsLogStream</code>.</p>
    pub fn cloud_watch_logs_configuration(&self) -> ::std::option::Option<&crate::types::CloudWatchLogsConfiguration> {
        self.cloud_watch_logs_configuration.as_ref()
    }
    /// <p>The ARN of an IAM profile to be used for all of the layer's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn custom_instance_profile_arn(&self) -> ::std::option::Option<&str> {
        self.custom_instance_profile_arn.as_deref()
    }
    /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html"> Using Custom JSON</a>. </p>
    pub fn custom_json(&self) -> ::std::option::Option<&str> {
        self.custom_json.as_deref()
    }
    /// <p>An array containing the layer's custom security group IDs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.custom_security_group_ids.is_none()`.
    pub fn custom_security_group_ids(&self) -> &[::std::string::String] {
        self.custom_security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>An array of <code>Package</code> objects that describe the layer's packages.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.packages.is_none()`.
    pub fn packages(&self) -> &[::std::string::String] {
        self.packages.as_deref().unwrap_or_default()
    }
    /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.volume_configurations.is_none()`.
    pub fn volume_configurations(&self) -> &[crate::types::VolumeConfiguration] {
        self.volume_configurations.as_deref().unwrap_or_default()
    }
    /// <p>Whether to disable auto healing for the layer.</p>
    pub fn enable_auto_healing(&self) -> ::std::option::Option<bool> {
        self.enable_auto_healing
    }
    /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn auto_assign_elastic_ips(&self) -> ::std::option::Option<bool> {
        self.auto_assign_elastic_ips
    }
    /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn auto_assign_public_ips(&self) -> ::std::option::Option<bool> {
        self.auto_assign_public_ips
    }
    /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer's custom recipes.</p>
    pub fn custom_recipes(&self) -> ::std::option::Option<&crate::types::Recipes> {
        self.custom_recipes.as_ref()
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. To control when updates are installed, set this value to <code>false</code>. You must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>We strongly recommend using the default value of <code>true</code>, to ensure that your instances have the latest security updates.</p>
    /// </note>
    pub fn install_updates_on_boot(&self) -> ::std::option::Option<bool> {
        self.install_updates_on_boot
    }
    /// <p>Whether to use Amazon EBS-optimized instances.</p>
    pub fn use_ebs_optimized_instances(&self) -> ::std::option::Option<bool> {
        self.use_ebs_optimized_instances
    }
    /// <p></p>
    pub fn lifecycle_event_configuration(&self) -> ::std::option::Option<&crate::types::LifecycleEventConfiguration> {
        self.lifecycle_event_configuration.as_ref()
    }
}
impl UpdateLayerInput {
    /// Creates a new builder-style object to manufacture [`UpdateLayerInput`](crate::operation::update_layer::UpdateLayerInput).
    pub fn builder() -> crate::operation::update_layer::builders::UpdateLayerInputBuilder {
        crate::operation::update_layer::builders::UpdateLayerInputBuilder::default()
    }
}

/// A builder for [`UpdateLayerInput`](crate::operation::update_layer::UpdateLayerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateLayerInputBuilder {
    pub(crate) layer_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) shortname: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<crate::types::LayerAttributesKeys, ::std::string::String>>,
    pub(crate) cloud_watch_logs_configuration: ::std::option::Option<crate::types::CloudWatchLogsConfiguration>,
    pub(crate) custom_instance_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) custom_json: ::std::option::Option<::std::string::String>,
    pub(crate) custom_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) packages: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) volume_configurations: ::std::option::Option<::std::vec::Vec<crate::types::VolumeConfiguration>>,
    pub(crate) enable_auto_healing: ::std::option::Option<bool>,
    pub(crate) auto_assign_elastic_ips: ::std::option::Option<bool>,
    pub(crate) auto_assign_public_ips: ::std::option::Option<bool>,
    pub(crate) custom_recipes: ::std::option::Option<crate::types::Recipes>,
    pub(crate) install_updates_on_boot: ::std::option::Option<bool>,
    pub(crate) use_ebs_optimized_instances: ::std::option::Option<bool>,
    pub(crate) lifecycle_event_configuration: ::std::option::Option<crate::types::LifecycleEventConfiguration>,
}
impl UpdateLayerInputBuilder {
    /// <p>The layer ID.</p>
    /// This field is required.
    pub fn layer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.layer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The layer ID.</p>
    pub fn set_layer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.layer_id = input;
        self
    }
    /// <p>The layer ID.</p>
    pub fn get_layer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.layer_id
    }
    /// <p>The layer name, which is used by the console.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The layer name, which is used by the console.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The layer name, which is used by the console.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters and must be in the following format: /\A[a-z0-9\-\_\.]+\Z/.</p>
    /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a> </p>
    pub fn shortname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shortname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters and must be in the following format: /\A[a-z0-9\-\_\.]+\Z/.</p>
    /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a> </p>
    pub fn set_shortname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shortname = input;
        self
    }
    /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters and must be in the following format: /\A[a-z0-9\-\_\.]+\Z/.</p>
    /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a> </p>
    pub fn get_shortname(&self) -> &::std::option::Option<::std::string::String> {
        &self.shortname
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>One or more user-defined key/value pairs to be added to the stack attributes.</p>
    pub fn attributes(mut self, k: crate::types::LayerAttributesKeys, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>One or more user-defined key/value pairs to be added to the stack attributes.</p>
    pub fn set_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::LayerAttributesKeys, ::std::string::String>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>One or more user-defined key/value pairs to be added to the stack attributes.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::LayerAttributesKeys, ::std::string::String>> {
        &self.attributes
    }
    /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <code>CloudWatchLogsLogStream</code>.</p>
    pub fn cloud_watch_logs_configuration(mut self, input: crate::types::CloudWatchLogsConfiguration) -> Self {
        self.cloud_watch_logs_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <code>CloudWatchLogsLogStream</code>.</p>
    pub fn set_cloud_watch_logs_configuration(mut self, input: ::std::option::Option<crate::types::CloudWatchLogsConfiguration>) -> Self {
        self.cloud_watch_logs_configuration = input;
        self
    }
    /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <code>CloudWatchLogsLogStream</code>.</p>
    pub fn get_cloud_watch_logs_configuration(&self) -> &::std::option::Option<crate::types::CloudWatchLogsConfiguration> {
        &self.cloud_watch_logs_configuration
    }
    /// <p>The ARN of an IAM profile to be used for all of the layer's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn custom_instance_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_instance_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an IAM profile to be used for all of the layer's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn set_custom_instance_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_instance_profile_arn = input;
        self
    }
    /// <p>The ARN of an IAM profile to be used for all of the layer's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn get_custom_instance_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_instance_profile_arn
    }
    /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html"> Using Custom JSON</a>. </p>
    pub fn custom_json(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_json = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html"> Using Custom JSON</a>. </p>
    pub fn set_custom_json(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_json = input;
        self
    }
    /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html"> Using Custom JSON</a>. </p>
    pub fn get_custom_json(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_json
    }
    /// Appends an item to `custom_security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_custom_security_group_ids`](Self::set_custom_security_group_ids).
    ///
    /// <p>An array containing the layer's custom security group IDs.</p>
    pub fn custom_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.custom_security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.custom_security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array containing the layer's custom security group IDs.</p>
    pub fn set_custom_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.custom_security_group_ids = input;
        self
    }
    /// <p>An array containing the layer's custom security group IDs.</p>
    pub fn get_custom_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.custom_security_group_ids
    }
    /// Appends an item to `packages`.
    ///
    /// To override the contents of this collection use [`set_packages`](Self::set_packages).
    ///
    /// <p>An array of <code>Package</code> objects that describe the layer's packages.</p>
    pub fn packages(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.packages.unwrap_or_default();
        v.push(input.into());
        self.packages = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>Package</code> objects that describe the layer's packages.</p>
    pub fn set_packages(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.packages = input;
        self
    }
    /// <p>An array of <code>Package</code> objects that describe the layer's packages.</p>
    pub fn get_packages(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.packages
    }
    /// Appends an item to `volume_configurations`.
    ///
    /// To override the contents of this collection use [`set_volume_configurations`](Self::set_volume_configurations).
    ///
    /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
    pub fn volume_configurations(mut self, input: crate::types::VolumeConfiguration) -> Self {
        let mut v = self.volume_configurations.unwrap_or_default();
        v.push(input);
        self.volume_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
    pub fn set_volume_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VolumeConfiguration>>) -> Self {
        self.volume_configurations = input;
        self
    }
    /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
    pub fn get_volume_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VolumeConfiguration>> {
        &self.volume_configurations
    }
    /// <p>Whether to disable auto healing for the layer.</p>
    pub fn enable_auto_healing(mut self, input: bool) -> Self {
        self.enable_auto_healing = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to disable auto healing for the layer.</p>
    pub fn set_enable_auto_healing(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_auto_healing = input;
        self
    }
    /// <p>Whether to disable auto healing for the layer.</p>
    pub fn get_enable_auto_healing(&self) -> &::std::option::Option<bool> {
        &self.enable_auto_healing
    }
    /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn auto_assign_elastic_ips(mut self, input: bool) -> Self {
        self.auto_assign_elastic_ips = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn set_auto_assign_elastic_ips(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_assign_elastic_ips = input;
        self
    }
    /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn get_auto_assign_elastic_ips(&self) -> &::std::option::Option<bool> {
        &self.auto_assign_elastic_ips
    }
    /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn auto_assign_public_ips(mut self, input: bool) -> Self {
        self.auto_assign_public_ips = ::std::option::Option::Some(input);
        self
    }
    /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn set_auto_assign_public_ips(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_assign_public_ips = input;
        self
    }
    /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn get_auto_assign_public_ips(&self) -> &::std::option::Option<bool> {
        &self.auto_assign_public_ips
    }
    /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer's custom recipes.</p>
    pub fn custom_recipes(mut self, input: crate::types::Recipes) -> Self {
        self.custom_recipes = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer's custom recipes.</p>
    pub fn set_custom_recipes(mut self, input: ::std::option::Option<crate::types::Recipes>) -> Self {
        self.custom_recipes = input;
        self
    }
    /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer's custom recipes.</p>
    pub fn get_custom_recipes(&self) -> &::std::option::Option<crate::types::Recipes> {
        &self.custom_recipes
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. To control when updates are installed, set this value to <code>false</code>. You must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>We strongly recommend using the default value of <code>true</code>, to ensure that your instances have the latest security updates.</p>
    /// </note>
    pub fn install_updates_on_boot(mut self, input: bool) -> Self {
        self.install_updates_on_boot = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. To control when updates are installed, set this value to <code>false</code>. You must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>We strongly recommend using the default value of <code>true</code>, to ensure that your instances have the latest security updates.</p>
    /// </note>
    pub fn set_install_updates_on_boot(mut self, input: ::std::option::Option<bool>) -> Self {
        self.install_updates_on_boot = input;
        self
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. To control when updates are installed, set this value to <code>false</code>. You must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>We strongly recommend using the default value of <code>true</code>, to ensure that your instances have the latest security updates.</p>
    /// </note>
    pub fn get_install_updates_on_boot(&self) -> &::std::option::Option<bool> {
        &self.install_updates_on_boot
    }
    /// <p>Whether to use Amazon EBS-optimized instances.</p>
    pub fn use_ebs_optimized_instances(mut self, input: bool) -> Self {
        self.use_ebs_optimized_instances = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to use Amazon EBS-optimized instances.</p>
    pub fn set_use_ebs_optimized_instances(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_ebs_optimized_instances = input;
        self
    }
    /// <p>Whether to use Amazon EBS-optimized instances.</p>
    pub fn get_use_ebs_optimized_instances(&self) -> &::std::option::Option<bool> {
        &self.use_ebs_optimized_instances
    }
    /// <p></p>
    pub fn lifecycle_event_configuration(mut self, input: crate::types::LifecycleEventConfiguration) -> Self {
        self.lifecycle_event_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_lifecycle_event_configuration(mut self, input: ::std::option::Option<crate::types::LifecycleEventConfiguration>) -> Self {
        self.lifecycle_event_configuration = input;
        self
    }
    /// <p></p>
    pub fn get_lifecycle_event_configuration(&self) -> &::std::option::Option<crate::types::LifecycleEventConfiguration> {
        &self.lifecycle_event_configuration
    }
    /// Consumes the builder and constructs a [`UpdateLayerInput`](crate::operation::update_layer::UpdateLayerInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_layer::UpdateLayerInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_layer::UpdateLayerInput {
            layer_id: self.layer_id,
            name: self.name,
            shortname: self.shortname,
            attributes: self.attributes,
            cloud_watch_logs_configuration: self.cloud_watch_logs_configuration,
            custom_instance_profile_arn: self.custom_instance_profile_arn,
            custom_json: self.custom_json,
            custom_security_group_ids: self.custom_security_group_ids,
            packages: self.packages,
            volume_configurations: self.volume_configurations,
            enable_auto_healing: self.enable_auto_healing,
            auto_assign_elastic_ips: self.auto_assign_elastic_ips,
            auto_assign_public_ips: self.auto_assign_public_ips,
            custom_recipes: self.custom_recipes,
            install_updates_on_boot: self.install_updates_on_boot,
            use_ebs_optimized_instances: self.use_ebs_optimized_instances,
            lifecycle_event_configuration: self.lifecycle_event_configuration,
        })
    }
}
