// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the response to a <code>DescribeElasticIps</code> request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeElasticIpsOutput {
    /// <p>An <code>ElasticIps</code> object that describes the specified Elastic IP addresses.</p>
    #[doc(hidden)]
    pub elastic_ips: std::option::Option<std::vec::Vec<crate::types::ElasticIp>>,
    _request_id: Option<String>,
}
impl DescribeElasticIpsOutput {
    /// <p>An <code>ElasticIps</code> object that describes the specified Elastic IP addresses.</p>
    pub fn elastic_ips(&self) -> std::option::Option<&[crate::types::ElasticIp]> {
        self.elastic_ips.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeElasticIpsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeElasticIpsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeElasticIpsOutput`](crate::operation::describe_elastic_ips::DescribeElasticIpsOutput).
    pub fn builder(
    ) -> crate::operation::describe_elastic_ips::builders::DescribeElasticIpsOutputBuilder {
        crate::operation::describe_elastic_ips::builders::DescribeElasticIpsOutputBuilder::default()
    }
}

/// A builder for [`DescribeElasticIpsOutput`](crate::operation::describe_elastic_ips::DescribeElasticIpsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeElasticIpsOutputBuilder {
    pub(crate) elastic_ips: std::option::Option<std::vec::Vec<crate::types::ElasticIp>>,
    _request_id: Option<String>,
}
impl DescribeElasticIpsOutputBuilder {
    /// Appends an item to `elastic_ips`.
    ///
    /// To override the contents of this collection use [`set_elastic_ips`](Self::set_elastic_ips).
    ///
    /// <p>An <code>ElasticIps</code> object that describes the specified Elastic IP addresses.</p>
    pub fn elastic_ips(mut self, input: crate::types::ElasticIp) -> Self {
        let mut v = self.elastic_ips.unwrap_or_default();
        v.push(input);
        self.elastic_ips = Some(v);
        self
    }
    /// <p>An <code>ElasticIps</code> object that describes the specified Elastic IP addresses.</p>
    pub fn set_elastic_ips(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ElasticIp>>,
    ) -> Self {
        self.elastic_ips = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeElasticIpsOutput`](crate::operation::describe_elastic_ips::DescribeElasticIpsOutput).
    pub fn build(self) -> crate::operation::describe_elastic_ips::DescribeElasticIpsOutput {
        crate::operation::describe_elastic_ips::DescribeElasticIpsOutput {
            elastic_ips: self.elastic_ips,
            _request_id: self._request_id,
        }
    }
}
