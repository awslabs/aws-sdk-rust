// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SetLoadBasedAutoScalingInput {
    /// <p>The layer ID.</p>
    pub layer_id: ::std::option::Option<::std::string::String>,
    /// <p>Enables load-based auto scaling for the layer.</p>
    pub enable: ::std::option::Option<bool>,
    /// <p>An <code>AutoScalingThresholds</code> object with the upscaling threshold configuration. If the load exceeds these thresholds for a specified amount of time, AWS OpsWorks Stacks starts a specified number of instances.</p>
    pub up_scaling: ::std::option::Option<crate::types::AutoScalingThresholds>,
    /// <p>An <code>AutoScalingThresholds</code> object with the downscaling threshold configuration. If the load falls below these thresholds for a specified amount of time, AWS OpsWorks Stacks stops a specified number of instances.</p>
    pub down_scaling: ::std::option::Option<crate::types::AutoScalingThresholds>,
}
impl SetLoadBasedAutoScalingInput {
    /// <p>The layer ID.</p>
    pub fn layer_id(&self) -> ::std::option::Option<&str> {
        self.layer_id.as_deref()
    }
    /// <p>Enables load-based auto scaling for the layer.</p>
    pub fn enable(&self) -> ::std::option::Option<bool> {
        self.enable
    }
    /// <p>An <code>AutoScalingThresholds</code> object with the upscaling threshold configuration. If the load exceeds these thresholds for a specified amount of time, AWS OpsWorks Stacks starts a specified number of instances.</p>
    pub fn up_scaling(&self) -> ::std::option::Option<&crate::types::AutoScalingThresholds> {
        self.up_scaling.as_ref()
    }
    /// <p>An <code>AutoScalingThresholds</code> object with the downscaling threshold configuration. If the load falls below these thresholds for a specified amount of time, AWS OpsWorks Stacks stops a specified number of instances.</p>
    pub fn down_scaling(&self) -> ::std::option::Option<&crate::types::AutoScalingThresholds> {
        self.down_scaling.as_ref()
    }
}
impl SetLoadBasedAutoScalingInput {
    /// Creates a new builder-style object to manufacture [`SetLoadBasedAutoScalingInput`](crate::operation::set_load_based_auto_scaling::SetLoadBasedAutoScalingInput).
    pub fn builder() -> crate::operation::set_load_based_auto_scaling::builders::SetLoadBasedAutoScalingInputBuilder {
        crate::operation::set_load_based_auto_scaling::builders::SetLoadBasedAutoScalingInputBuilder::default()
    }
}

/// A builder for [`SetLoadBasedAutoScalingInput`](crate::operation::set_load_based_auto_scaling::SetLoadBasedAutoScalingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SetLoadBasedAutoScalingInputBuilder {
    pub(crate) layer_id: ::std::option::Option<::std::string::String>,
    pub(crate) enable: ::std::option::Option<bool>,
    pub(crate) up_scaling: ::std::option::Option<crate::types::AutoScalingThresholds>,
    pub(crate) down_scaling: ::std::option::Option<crate::types::AutoScalingThresholds>,
}
impl SetLoadBasedAutoScalingInputBuilder {
    /// <p>The layer ID.</p>
    /// This field is required.
    pub fn layer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.layer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The layer ID.</p>
    pub fn set_layer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.layer_id = input;
        self
    }
    /// <p>The layer ID.</p>
    pub fn get_layer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.layer_id
    }
    /// <p>Enables load-based auto scaling for the layer.</p>
    pub fn enable(mut self, input: bool) -> Self {
        self.enable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables load-based auto scaling for the layer.</p>
    pub fn set_enable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable = input;
        self
    }
    /// <p>Enables load-based auto scaling for the layer.</p>
    pub fn get_enable(&self) -> &::std::option::Option<bool> {
        &self.enable
    }
    /// <p>An <code>AutoScalingThresholds</code> object with the upscaling threshold configuration. If the load exceeds these thresholds for a specified amount of time, AWS OpsWorks Stacks starts a specified number of instances.</p>
    pub fn up_scaling(mut self, input: crate::types::AutoScalingThresholds) -> Self {
        self.up_scaling = ::std::option::Option::Some(input);
        self
    }
    /// <p>An <code>AutoScalingThresholds</code> object with the upscaling threshold configuration. If the load exceeds these thresholds for a specified amount of time, AWS OpsWorks Stacks starts a specified number of instances.</p>
    pub fn set_up_scaling(mut self, input: ::std::option::Option<crate::types::AutoScalingThresholds>) -> Self {
        self.up_scaling = input;
        self
    }
    /// <p>An <code>AutoScalingThresholds</code> object with the upscaling threshold configuration. If the load exceeds these thresholds for a specified amount of time, AWS OpsWorks Stacks starts a specified number of instances.</p>
    pub fn get_up_scaling(&self) -> &::std::option::Option<crate::types::AutoScalingThresholds> {
        &self.up_scaling
    }
    /// <p>An <code>AutoScalingThresholds</code> object with the downscaling threshold configuration. If the load falls below these thresholds for a specified amount of time, AWS OpsWorks Stacks stops a specified number of instances.</p>
    pub fn down_scaling(mut self, input: crate::types::AutoScalingThresholds) -> Self {
        self.down_scaling = ::std::option::Option::Some(input);
        self
    }
    /// <p>An <code>AutoScalingThresholds</code> object with the downscaling threshold configuration. If the load falls below these thresholds for a specified amount of time, AWS OpsWorks Stacks stops a specified number of instances.</p>
    pub fn set_down_scaling(mut self, input: ::std::option::Option<crate::types::AutoScalingThresholds>) -> Self {
        self.down_scaling = input;
        self
    }
    /// <p>An <code>AutoScalingThresholds</code> object with the downscaling threshold configuration. If the load falls below these thresholds for a specified amount of time, AWS OpsWorks Stacks stops a specified number of instances.</p>
    pub fn get_down_scaling(&self) -> &::std::option::Option<crate::types::AutoScalingThresholds> {
        &self.down_scaling
    }
    /// Consumes the builder and constructs a [`SetLoadBasedAutoScalingInput`](crate::operation::set_load_based_auto_scaling::SetLoadBasedAutoScalingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::set_load_based_auto_scaling::SetLoadBasedAutoScalingInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::set_load_based_auto_scaling::SetLoadBasedAutoScalingInput {
            layer_id: self.layer_id,
            enable: self.enable,
            up_scaling: self.up_scaling,
            down_scaling: self.down_scaling,
        })
    }
}
