// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_layer::_create_layer_output::CreateLayerOutputBuilder;

pub use crate::operation::create_layer::_create_layer_input::CreateLayerInputBuilder;

impl crate::operation::create_layer::builders::CreateLayerInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_layer::CreateLayerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_layer::CreateLayerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_layer();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateLayer`.
///
/// <p>Creates a layer. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-create.html">How to Create a Layer</a>.</p><note>
/// <p>You should use <b>CreateLayer</b> for noncustom layer types such as PHP App Server only if the stack does not have an existing layer of that type. A stack can have at most one instance of each noncustom layer; if you attempt to create a second instance, <b>CreateLayer</b> fails. A stack can have an arbitrary number of custom layers, so you can call <b>CreateLayer</b> as many times as you like for that layer type.</p>
/// </note>
/// <p><b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User Permissions</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateLayerFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_layer::builders::CreateLayerInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_layer::CreateLayerOutput,
        crate::operation::create_layer::CreateLayerError,
    > for CreateLayerFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_layer::CreateLayerOutput,
            crate::operation::create_layer::CreateLayerError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateLayerFluentBuilder {
    /// Creates a new `CreateLayer`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateLayer as a reference.
    pub fn as_input(&self) -> &crate::operation::create_layer::builders::CreateLayerInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_layer::CreateLayerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_layer::CreateLayerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_layer::CreateLayer::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_layer::CreateLayer::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_layer::CreateLayerOutput,
        crate::operation::create_layer::CreateLayerError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The layer stack ID.</p>
    pub fn stack_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.stack_id(input.into());
        self
    }
    /// <p>The layer stack ID.</p>
    pub fn set_stack_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_stack_id(input);
        self
    }
    /// <p>The layer stack ID.</p>
    pub fn get_stack_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_stack_id()
    }
    /// <p>The layer type. A stack cannot have more than one built-in layer of the same type. It can have any number of custom layers. Built-in layers are not available in Chef 12 stacks.</p>
    pub fn r#type(mut self, input: crate::types::LayerType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The layer type. A stack cannot have more than one built-in layer of the same type. It can have any number of custom layers. Built-in layers are not available in Chef 12 stacks.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::LayerType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The layer type. A stack cannot have more than one built-in layer of the same type. It can have any number of custom layers. Built-in layers are not available in Chef 12 stacks.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::LayerType> {
        self.inner.get_type()
    }
    /// <p>The layer name, which is used by the console.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The layer name, which is used by the console.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The layer name, which is used by the console.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef recipes. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters, which are limited to the alphanumeric characters, '-', '_', and '.'.</p>
    /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a>.</p>
    pub fn shortname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.shortname(input.into());
        self
    }
    /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef recipes. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters, which are limited to the alphanumeric characters, '-', '_', and '.'.</p>
    /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a>.</p>
    pub fn set_shortname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_shortname(input);
        self
    }
    /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef recipes. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters, which are limited to the alphanumeric characters, '-', '_', and '.'.</p>
    /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a>.</p>
    pub fn get_shortname(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_shortname()
    }
    ///
    /// Adds a key-value pair to `Attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>One or more user-defined key-value pairs to be added to the stack attributes.</p>
    /// <p>To create a cluster layer, set the <code>EcsClusterArn</code> attribute to the cluster's ARN.</p>
    pub fn attributes(mut self, k: crate::types::LayerAttributesKeys, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.attributes(k, v.into());
        self
    }
    /// <p>One or more user-defined key-value pairs to be added to the stack attributes.</p>
    /// <p>To create a cluster layer, set the <code>EcsClusterArn</code> attribute to the cluster's ARN.</p>
    pub fn set_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::LayerAttributesKeys, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_attributes(input);
        self
    }
    /// <p>One or more user-defined key-value pairs to be added to the stack attributes.</p>
    /// <p>To create a cluster layer, set the <code>EcsClusterArn</code> attribute to the cluster's ARN.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::LayerAttributesKeys, ::std::string::String>> {
        self.inner.get_attributes()
    }
    /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <code>CloudWatchLogsLogStream</code>.</p>
    pub fn cloud_watch_logs_configuration(mut self, input: crate::types::CloudWatchLogsConfiguration) -> Self {
        self.inner = self.inner.cloud_watch_logs_configuration(input);
        self
    }
    /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <code>CloudWatchLogsLogStream</code>.</p>
    pub fn set_cloud_watch_logs_configuration(mut self, input: ::std::option::Option<crate::types::CloudWatchLogsConfiguration>) -> Self {
        self.inner = self.inner.set_cloud_watch_logs_configuration(input);
        self
    }
    /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <code>CloudWatchLogsLogStream</code>.</p>
    pub fn get_cloud_watch_logs_configuration(&self) -> &::std::option::Option<crate::types::CloudWatchLogsConfiguration> {
        self.inner.get_cloud_watch_logs_configuration()
    }
    /// <p>The ARN of an IAM profile to be used for the layer's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn custom_instance_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.custom_instance_profile_arn(input.into());
        self
    }
    /// <p>The ARN of an IAM profile to be used for the layer's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn set_custom_instance_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_custom_instance_profile_arn(input);
        self
    }
    /// <p>The ARN of an IAM profile to be used for the layer's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn get_custom_instance_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_custom_instance_profile_arn()
    }
    /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html"> Using Custom JSON</a>. This feature is supported as of version 1.7.42 of the AWS CLI.</p>
    pub fn custom_json(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.custom_json(input.into());
        self
    }
    /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html"> Using Custom JSON</a>. This feature is supported as of version 1.7.42 of the AWS CLI.</p>
    pub fn set_custom_json(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_custom_json(input);
        self
    }
    /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html"> Using Custom JSON</a>. This feature is supported as of version 1.7.42 of the AWS CLI.</p>
    pub fn get_custom_json(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_custom_json()
    }
    ///
    /// Appends an item to `CustomSecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_custom_security_group_ids`](Self::set_custom_security_group_ids).
    ///
    /// <p>An array containing the layer custom security group IDs.</p>
    pub fn custom_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.custom_security_group_ids(input.into());
        self
    }
    /// <p>An array containing the layer custom security group IDs.</p>
    pub fn set_custom_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_custom_security_group_ids(input);
        self
    }
    /// <p>An array containing the layer custom security group IDs.</p>
    pub fn get_custom_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_custom_security_group_ids()
    }
    ///
    /// Appends an item to `Packages`.
    ///
    /// To override the contents of this collection use [`set_packages`](Self::set_packages).
    ///
    /// <p>An array of <code>Package</code> objects that describes the layer packages.</p>
    pub fn packages(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.packages(input.into());
        self
    }
    /// <p>An array of <code>Package</code> objects that describes the layer packages.</p>
    pub fn set_packages(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_packages(input);
        self
    }
    /// <p>An array of <code>Package</code> objects that describes the layer packages.</p>
    pub fn get_packages(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_packages()
    }
    ///
    /// Appends an item to `VolumeConfigurations`.
    ///
    /// To override the contents of this collection use [`set_volume_configurations`](Self::set_volume_configurations).
    ///
    /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
    pub fn volume_configurations(mut self, input: crate::types::VolumeConfiguration) -> Self {
        self.inner = self.inner.volume_configurations(input);
        self
    }
    /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
    pub fn set_volume_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VolumeConfiguration>>) -> Self {
        self.inner = self.inner.set_volume_configurations(input);
        self
    }
    /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
    pub fn get_volume_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VolumeConfiguration>> {
        self.inner.get_volume_configurations()
    }
    /// <p>Whether to disable auto healing for the layer.</p>
    pub fn enable_auto_healing(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_auto_healing(input);
        self
    }
    /// <p>Whether to disable auto healing for the layer.</p>
    pub fn set_enable_auto_healing(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_auto_healing(input);
        self
    }
    /// <p>Whether to disable auto healing for the layer.</p>
    pub fn get_enable_auto_healing(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_auto_healing()
    }
    /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn auto_assign_elastic_ips(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_assign_elastic_ips(input);
        self
    }
    /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn set_auto_assign_elastic_ips(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_assign_elastic_ips(input);
        self
    }
    /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn get_auto_assign_elastic_ips(&self) -> &::std::option::Option<bool> {
        self.inner.get_auto_assign_elastic_ips()
    }
    /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn auto_assign_public_ips(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_assign_public_ips(input);
        self
    }
    /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn set_auto_assign_public_ips(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_assign_public_ips(input);
        self
    }
    /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn get_auto_assign_public_ips(&self) -> &::std::option::Option<bool> {
        self.inner.get_auto_assign_public_ips()
    }
    /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer custom recipes.</p>
    pub fn custom_recipes(mut self, input: crate::types::Recipes) -> Self {
        self.inner = self.inner.custom_recipes(input);
        self
    }
    /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer custom recipes.</p>
    pub fn set_custom_recipes(mut self, input: ::std::option::Option<crate::types::Recipes>) -> Self {
        self.inner = self.inner.set_custom_recipes(input);
        self
    }
    /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer custom recipes.</p>
    pub fn get_custom_recipes(&self) -> &::std::option::Option<crate::types::Recipes> {
        self.inner.get_custom_recipes()
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. To control when updates are installed, set this value to <code>false</code>. You must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances.</p><note>
    /// <p>To ensure that your instances have the latest security updates, we strongly recommend using the default value of <code>true</code>.</p>
    /// </note>
    pub fn install_updates_on_boot(mut self, input: bool) -> Self {
        self.inner = self.inner.install_updates_on_boot(input);
        self
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. To control when updates are installed, set this value to <code>false</code>. You must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances.</p><note>
    /// <p>To ensure that your instances have the latest security updates, we strongly recommend using the default value of <code>true</code>.</p>
    /// </note>
    pub fn set_install_updates_on_boot(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_install_updates_on_boot(input);
        self
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. To control when updates are installed, set this value to <code>false</code>. You must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances.</p><note>
    /// <p>To ensure that your instances have the latest security updates, we strongly recommend using the default value of <code>true</code>.</p>
    /// </note>
    pub fn get_install_updates_on_boot(&self) -> &::std::option::Option<bool> {
        self.inner.get_install_updates_on_boot()
    }
    /// <p>Whether to use Amazon EBS-optimized instances.</p>
    pub fn use_ebs_optimized_instances(mut self, input: bool) -> Self {
        self.inner = self.inner.use_ebs_optimized_instances(input);
        self
    }
    /// <p>Whether to use Amazon EBS-optimized instances.</p>
    pub fn set_use_ebs_optimized_instances(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_use_ebs_optimized_instances(input);
        self
    }
    /// <p>Whether to use Amazon EBS-optimized instances.</p>
    pub fn get_use_ebs_optimized_instances(&self) -> &::std::option::Option<bool> {
        self.inner.get_use_ebs_optimized_instances()
    }
    /// <p>A <code>LifeCycleEventConfiguration</code> object that you can use to configure the Shutdown event to specify an execution timeout and enable or disable Elastic Load Balancer connection draining.</p>
    pub fn lifecycle_event_configuration(mut self, input: crate::types::LifecycleEventConfiguration) -> Self {
        self.inner = self.inner.lifecycle_event_configuration(input);
        self
    }
    /// <p>A <code>LifeCycleEventConfiguration</code> object that you can use to configure the Shutdown event to specify an execution timeout and enable or disable Elastic Load Balancer connection draining.</p>
    pub fn set_lifecycle_event_configuration(mut self, input: ::std::option::Option<crate::types::LifecycleEventConfiguration>) -> Self {
        self.inner = self.inner.set_lifecycle_event_configuration(input);
        self
    }
    /// <p>A <code>LifeCycleEventConfiguration</code> object that you can use to configure the Shutdown event to specify an execution timeout and enable or disable Elastic Load Balancer connection draining.</p>
    pub fn get_lifecycle_event_configuration(&self) -> &::std::option::Option<crate::types::LifecycleEventConfiguration> {
        self.inner.get_lifecycle_event_configuration()
    }
}
