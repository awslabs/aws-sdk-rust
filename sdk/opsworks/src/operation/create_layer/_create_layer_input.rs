// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLayerInput {
    /// <p>The layer stack ID.</p>
    #[doc(hidden)]
    pub stack_id: std::option::Option<std::string::String>,
    /// <p>The layer type. A stack cannot have more than one built-in layer of the same type. It can have any number of custom layers. Built-in layers are not available in Chef 12 stacks.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::LayerType>,
    /// <p>The layer name, which is used by the console.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef recipes. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters, which are limited to the alphanumeric characters, '-', '_', and '.'.</p>
    /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a>.</p>
    #[doc(hidden)]
    pub shortname: std::option::Option<std::string::String>,
    /// <p>One or more user-defined key-value pairs to be added to the stack attributes.</p>
    /// <p>To create a cluster layer, set the <code>EcsClusterArn</code> attribute to the cluster's ARN.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<
        std::collections::HashMap<crate::types::LayerAttributesKeys, std::string::String>,
    >,
    /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <code>CloudWatchLogsLogStream</code>.</p>
    #[doc(hidden)]
    pub cloud_watch_logs_configuration:
        std::option::Option<crate::types::CloudWatchLogsConfiguration>,
    /// <p>The ARN of an IAM profile to be used for the layer's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    #[doc(hidden)]
    pub custom_instance_profile_arn: std::option::Option<std::string::String>,
    /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html"> Using Custom JSON</a>. This feature is supported as of version 1.7.42 of the AWS CLI. </p>
    #[doc(hidden)]
    pub custom_json: std::option::Option<std::string::String>,
    /// <p>An array containing the layer custom security group IDs.</p>
    #[doc(hidden)]
    pub custom_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An array of <code>Package</code> objects that describes the layer packages.</p>
    #[doc(hidden)]
    pub packages: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
    #[doc(hidden)]
    pub volume_configurations:
        std::option::Option<std::vec::Vec<crate::types::VolumeConfiguration>>,
    /// <p>Whether to disable auto healing for the layer.</p>
    #[doc(hidden)]
    pub enable_auto_healing: std::option::Option<bool>,
    /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    #[doc(hidden)]
    pub auto_assign_elastic_ips: std::option::Option<bool>,
    /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    #[doc(hidden)]
    pub auto_assign_public_ips: std::option::Option<bool>,
    /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer custom recipes.</p>
    #[doc(hidden)]
    pub custom_recipes: std::option::Option<crate::types::Recipes>,
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. To control when updates are installed, set this value to <code>false</code>. You must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>To ensure that your instances have the latest security updates, we strongly recommend using the default value of <code>true</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub install_updates_on_boot: std::option::Option<bool>,
    /// <p>Whether to use Amazon EBS-optimized instances.</p>
    #[doc(hidden)]
    pub use_ebs_optimized_instances: std::option::Option<bool>,
    /// <p>A <code>LifeCycleEventConfiguration</code> object that you can use to configure the Shutdown event to specify an execution timeout and enable or disable Elastic Load Balancer connection draining.</p>
    #[doc(hidden)]
    pub lifecycle_event_configuration:
        std::option::Option<crate::types::LifecycleEventConfiguration>,
}
impl CreateLayerInput {
    /// <p>The layer stack ID.</p>
    pub fn stack_id(&self) -> std::option::Option<&str> {
        self.stack_id.as_deref()
    }
    /// <p>The layer type. A stack cannot have more than one built-in layer of the same type. It can have any number of custom layers. Built-in layers are not available in Chef 12 stacks.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::LayerType> {
        self.r#type.as_ref()
    }
    /// <p>The layer name, which is used by the console.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef recipes. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters, which are limited to the alphanumeric characters, '-', '_', and '.'.</p>
    /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a>.</p>
    pub fn shortname(&self) -> std::option::Option<&str> {
        self.shortname.as_deref()
    }
    /// <p>One or more user-defined key-value pairs to be added to the stack attributes.</p>
    /// <p>To create a cluster layer, set the <code>EcsClusterArn</code> attribute to the cluster's ARN.</p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<crate::types::LayerAttributesKeys, std::string::String>,
    > {
        self.attributes.as_ref()
    }
    /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <code>CloudWatchLogsLogStream</code>.</p>
    pub fn cloud_watch_logs_configuration(
        &self,
    ) -> std::option::Option<&crate::types::CloudWatchLogsConfiguration> {
        self.cloud_watch_logs_configuration.as_ref()
    }
    /// <p>The ARN of an IAM profile to be used for the layer's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn custom_instance_profile_arn(&self) -> std::option::Option<&str> {
        self.custom_instance_profile_arn.as_deref()
    }
    /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html"> Using Custom JSON</a>. This feature is supported as of version 1.7.42 of the AWS CLI. </p>
    pub fn custom_json(&self) -> std::option::Option<&str> {
        self.custom_json.as_deref()
    }
    /// <p>An array containing the layer custom security group IDs.</p>
    pub fn custom_security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.custom_security_group_ids.as_deref()
    }
    /// <p>An array of <code>Package</code> objects that describes the layer packages.</p>
    pub fn packages(&self) -> std::option::Option<&[std::string::String]> {
        self.packages.as_deref()
    }
    /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
    pub fn volume_configurations(
        &self,
    ) -> std::option::Option<&[crate::types::VolumeConfiguration]> {
        self.volume_configurations.as_deref()
    }
    /// <p>Whether to disable auto healing for the layer.</p>
    pub fn enable_auto_healing(&self) -> std::option::Option<bool> {
        self.enable_auto_healing
    }
    /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn auto_assign_elastic_ips(&self) -> std::option::Option<bool> {
        self.auto_assign_elastic_ips
    }
    /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn auto_assign_public_ips(&self) -> std::option::Option<bool> {
        self.auto_assign_public_ips
    }
    /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer custom recipes.</p>
    pub fn custom_recipes(&self) -> std::option::Option<&crate::types::Recipes> {
        self.custom_recipes.as_ref()
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. To control when updates are installed, set this value to <code>false</code>. You must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>To ensure that your instances have the latest security updates, we strongly recommend using the default value of <code>true</code>.</p>
    /// </note>
    pub fn install_updates_on_boot(&self) -> std::option::Option<bool> {
        self.install_updates_on_boot
    }
    /// <p>Whether to use Amazon EBS-optimized instances.</p>
    pub fn use_ebs_optimized_instances(&self) -> std::option::Option<bool> {
        self.use_ebs_optimized_instances
    }
    /// <p>A <code>LifeCycleEventConfiguration</code> object that you can use to configure the Shutdown event to specify an execution timeout and enable or disable Elastic Load Balancer connection draining.</p>
    pub fn lifecycle_event_configuration(
        &self,
    ) -> std::option::Option<&crate::types::LifecycleEventConfiguration> {
        self.lifecycle_event_configuration.as_ref()
    }
}
impl CreateLayerInput {
    /// Creates a new builder-style object to manufacture [`CreateLayerInput`](crate::operation::create_layer::CreateLayerInput).
    pub fn builder() -> crate::operation::create_layer::builders::CreateLayerInputBuilder {
        crate::operation::create_layer::builders::CreateLayerInputBuilder::default()
    }
}

/// A builder for [`CreateLayerInput`](crate::operation::create_layer::CreateLayerInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateLayerInputBuilder {
    pub(crate) stack_id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::LayerType>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) shortname: std::option::Option<std::string::String>,
    pub(crate) attributes: std::option::Option<
        std::collections::HashMap<crate::types::LayerAttributesKeys, std::string::String>,
    >,
    pub(crate) cloud_watch_logs_configuration:
        std::option::Option<crate::types::CloudWatchLogsConfiguration>,
    pub(crate) custom_instance_profile_arn: std::option::Option<std::string::String>,
    pub(crate) custom_json: std::option::Option<std::string::String>,
    pub(crate) custom_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) packages: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) volume_configurations:
        std::option::Option<std::vec::Vec<crate::types::VolumeConfiguration>>,
    pub(crate) enable_auto_healing: std::option::Option<bool>,
    pub(crate) auto_assign_elastic_ips: std::option::Option<bool>,
    pub(crate) auto_assign_public_ips: std::option::Option<bool>,
    pub(crate) custom_recipes: std::option::Option<crate::types::Recipes>,
    pub(crate) install_updates_on_boot: std::option::Option<bool>,
    pub(crate) use_ebs_optimized_instances: std::option::Option<bool>,
    pub(crate) lifecycle_event_configuration:
        std::option::Option<crate::types::LifecycleEventConfiguration>,
}
impl CreateLayerInputBuilder {
    /// <p>The layer stack ID.</p>
    pub fn stack_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_id = Some(input.into());
        self
    }
    /// <p>The layer stack ID.</p>
    pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_id = input;
        self
    }
    /// <p>The layer type. A stack cannot have more than one built-in layer of the same type. It can have any number of custom layers. Built-in layers are not available in Chef 12 stacks.</p>
    pub fn r#type(mut self, input: crate::types::LayerType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The layer type. A stack cannot have more than one built-in layer of the same type. It can have any number of custom layers. Built-in layers are not available in Chef 12 stacks.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::LayerType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The layer name, which is used by the console.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The layer name, which is used by the console.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef recipes. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters, which are limited to the alphanumeric characters, '-', '_', and '.'.</p>
    /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a>.</p>
    pub fn shortname(mut self, input: impl Into<std::string::String>) -> Self {
        self.shortname = Some(input.into());
        self
    }
    /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef recipes. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters, which are limited to the alphanumeric characters, '-', '_', and '.'.</p>
    /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a>.</p>
    pub fn set_shortname(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.shortname = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>One or more user-defined key-value pairs to be added to the stack attributes.</p>
    /// <p>To create a cluster layer, set the <code>EcsClusterArn</code> attribute to the cluster's ARN.</p>
    pub fn attributes(
        mut self,
        k: crate::types::LayerAttributesKeys,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.attributes = Some(hash_map);
        self
    }
    /// <p>One or more user-defined key-value pairs to be added to the stack attributes.</p>
    /// <p>To create a cluster layer, set the <code>EcsClusterArn</code> attribute to the cluster's ARN.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<crate::types::LayerAttributesKeys, std::string::String>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <code>CloudWatchLogsLogStream</code>.</p>
    pub fn cloud_watch_logs_configuration(
        mut self,
        input: crate::types::CloudWatchLogsConfiguration,
    ) -> Self {
        self.cloud_watch_logs_configuration = Some(input);
        self
    }
    /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <code>CloudWatchLogsLogStream</code>.</p>
    pub fn set_cloud_watch_logs_configuration(
        mut self,
        input: std::option::Option<crate::types::CloudWatchLogsConfiguration>,
    ) -> Self {
        self.cloud_watch_logs_configuration = input;
        self
    }
    /// <p>The ARN of an IAM profile to be used for the layer's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn custom_instance_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_instance_profile_arn = Some(input.into());
        self
    }
    /// <p>The ARN of an IAM profile to be used for the layer's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn set_custom_instance_profile_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.custom_instance_profile_arn = input;
        self
    }
    /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html"> Using Custom JSON</a>. This feature is supported as of version 1.7.42 of the AWS CLI. </p>
    pub fn custom_json(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_json = Some(input.into());
        self
    }
    /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html"> Using Custom JSON</a>. This feature is supported as of version 1.7.42 of the AWS CLI. </p>
    pub fn set_custom_json(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.custom_json = input;
        self
    }
    /// Appends an item to `custom_security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_custom_security_group_ids`](Self::set_custom_security_group_ids).
    ///
    /// <p>An array containing the layer custom security group IDs.</p>
    pub fn custom_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.custom_security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.custom_security_group_ids = Some(v);
        self
    }
    /// <p>An array containing the layer custom security group IDs.</p>
    pub fn set_custom_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.custom_security_group_ids = input;
        self
    }
    /// Appends an item to `packages`.
    ///
    /// To override the contents of this collection use [`set_packages`](Self::set_packages).
    ///
    /// <p>An array of <code>Package</code> objects that describes the layer packages.</p>
    pub fn packages(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.packages.unwrap_or_default();
        v.push(input.into());
        self.packages = Some(v);
        self
    }
    /// <p>An array of <code>Package</code> objects that describes the layer packages.</p>
    pub fn set_packages(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.packages = input;
        self
    }
    /// Appends an item to `volume_configurations`.
    ///
    /// To override the contents of this collection use [`set_volume_configurations`](Self::set_volume_configurations).
    ///
    /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
    pub fn volume_configurations(mut self, input: crate::types::VolumeConfiguration) -> Self {
        let mut v = self.volume_configurations.unwrap_or_default();
        v.push(input);
        self.volume_configurations = Some(v);
        self
    }
    /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
    pub fn set_volume_configurations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::VolumeConfiguration>>,
    ) -> Self {
        self.volume_configurations = input;
        self
    }
    /// <p>Whether to disable auto healing for the layer.</p>
    pub fn enable_auto_healing(mut self, input: bool) -> Self {
        self.enable_auto_healing = Some(input);
        self
    }
    /// <p>Whether to disable auto healing for the layer.</p>
    pub fn set_enable_auto_healing(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_auto_healing = input;
        self
    }
    /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn auto_assign_elastic_ips(mut self, input: bool) -> Self {
        self.auto_assign_elastic_ips = Some(input);
        self
    }
    /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn set_auto_assign_elastic_ips(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_assign_elastic_ips = input;
        self
    }
    /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn auto_assign_public_ips(mut self, input: bool) -> Self {
        self.auto_assign_public_ips = Some(input);
        self
    }
    /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit a Layer</a>.</p>
    pub fn set_auto_assign_public_ips(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_assign_public_ips = input;
        self
    }
    /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer custom recipes.</p>
    pub fn custom_recipes(mut self, input: crate::types::Recipes) -> Self {
        self.custom_recipes = Some(input);
        self
    }
    /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer custom recipes.</p>
    pub fn set_custom_recipes(mut self, input: std::option::Option<crate::types::Recipes>) -> Self {
        self.custom_recipes = input;
        self
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. To control when updates are installed, set this value to <code>false</code>. You must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>To ensure that your instances have the latest security updates, we strongly recommend using the default value of <code>true</code>.</p>
    /// </note>
    pub fn install_updates_on_boot(mut self, input: bool) -> Self {
        self.install_updates_on_boot = Some(input);
        self
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. To control when updates are installed, set this value to <code>false</code>. You must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>To ensure that your instances have the latest security updates, we strongly recommend using the default value of <code>true</code>.</p>
    /// </note>
    pub fn set_install_updates_on_boot(mut self, input: std::option::Option<bool>) -> Self {
        self.install_updates_on_boot = input;
        self
    }
    /// <p>Whether to use Amazon EBS-optimized instances.</p>
    pub fn use_ebs_optimized_instances(mut self, input: bool) -> Self {
        self.use_ebs_optimized_instances = Some(input);
        self
    }
    /// <p>Whether to use Amazon EBS-optimized instances.</p>
    pub fn set_use_ebs_optimized_instances(mut self, input: std::option::Option<bool>) -> Self {
        self.use_ebs_optimized_instances = input;
        self
    }
    /// <p>A <code>LifeCycleEventConfiguration</code> object that you can use to configure the Shutdown event to specify an execution timeout and enable or disable Elastic Load Balancer connection draining.</p>
    pub fn lifecycle_event_configuration(
        mut self,
        input: crate::types::LifecycleEventConfiguration,
    ) -> Self {
        self.lifecycle_event_configuration = Some(input);
        self
    }
    /// <p>A <code>LifeCycleEventConfiguration</code> object that you can use to configure the Shutdown event to specify an execution timeout and enable or disable Elastic Load Balancer connection draining.</p>
    pub fn set_lifecycle_event_configuration(
        mut self,
        input: std::option::Option<crate::types::LifecycleEventConfiguration>,
    ) -> Self {
        self.lifecycle_event_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateLayerInput`](crate::operation::create_layer::CreateLayerInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_layer::CreateLayerInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_layer::CreateLayerInput {
            stack_id: self.stack_id,
            r#type: self.r#type,
            name: self.name,
            shortname: self.shortname,
            attributes: self.attributes,
            cloud_watch_logs_configuration: self.cloud_watch_logs_configuration,
            custom_instance_profile_arn: self.custom_instance_profile_arn,
            custom_json: self.custom_json,
            custom_security_group_ids: self.custom_security_group_ids,
            packages: self.packages,
            volume_configurations: self.volume_configurations,
            enable_auto_healing: self.enable_auto_healing,
            auto_assign_elastic_ips: self.auto_assign_elastic_ips,
            auto_assign_public_ips: self.auto_assign_public_ips,
            custom_recipes: self.custom_recipes,
            install_updates_on_boot: self.install_updates_on_boot,
            use_ebs_optimized_instances: self.use_ebs_optimized_instances,
            lifecycle_event_configuration: self.lifecycle_event_configuration,
        })
    }
}
