// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeVolumesInput {
    /// <p>The instance ID. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the volumes associated with the specified instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>A stack ID. The action describes the stack's registered Amazon EBS volumes.</p>
    pub stack_id: ::std::option::Option<::std::string::String>,
    /// <p>The RAID array ID. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the volumes associated with the specified RAID array.</p>
    pub raid_array_id: ::std::option::Option<::std::string::String>,
    /// <p>Am array of volume IDs. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the specified volumes. Otherwise, it returns a description of every volume.</p>
    pub volume_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DescribeVolumesInput {
    /// <p>The instance ID. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the volumes associated with the specified instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>A stack ID. The action describes the stack's registered Amazon EBS volumes.</p>
    pub fn stack_id(&self) -> ::std::option::Option<&str> {
        self.stack_id.as_deref()
    }
    /// <p>The RAID array ID. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the volumes associated with the specified RAID array.</p>
    pub fn raid_array_id(&self) -> ::std::option::Option<&str> {
        self.raid_array_id.as_deref()
    }
    /// <p>Am array of volume IDs. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the specified volumes. Otherwise, it returns a description of every volume.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.volume_ids.is_none()`.
    pub fn volume_ids(&self) -> &[::std::string::String] {
        self.volume_ids.as_deref().unwrap_or_default()
    }
}
impl DescribeVolumesInput {
    /// Creates a new builder-style object to manufacture [`DescribeVolumesInput`](crate::operation::describe_volumes::DescribeVolumesInput).
    pub fn builder() -> crate::operation::describe_volumes::builders::DescribeVolumesInputBuilder {
        crate::operation::describe_volumes::builders::DescribeVolumesInputBuilder::default()
    }
}

/// A builder for [`DescribeVolumesInput`](crate::operation::describe_volumes::DescribeVolumesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeVolumesInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) stack_id: ::std::option::Option<::std::string::String>,
    pub(crate) raid_array_id: ::std::option::Option<::std::string::String>,
    pub(crate) volume_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DescribeVolumesInputBuilder {
    /// <p>The instance ID. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the volumes associated with the specified instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance ID. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the volumes associated with the specified instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The instance ID. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the volumes associated with the specified instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>A stack ID. The action describes the stack's registered Amazon EBS volumes.</p>
    pub fn stack_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A stack ID. The action describes the stack's registered Amazon EBS volumes.</p>
    pub fn set_stack_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_id = input;
        self
    }
    /// <p>A stack ID. The action describes the stack's registered Amazon EBS volumes.</p>
    pub fn get_stack_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_id
    }
    /// <p>The RAID array ID. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the volumes associated with the specified RAID array.</p>
    pub fn raid_array_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.raid_array_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The RAID array ID. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the volumes associated with the specified RAID array.</p>
    pub fn set_raid_array_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.raid_array_id = input;
        self
    }
    /// <p>The RAID array ID. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the volumes associated with the specified RAID array.</p>
    pub fn get_raid_array_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.raid_array_id
    }
    /// Appends an item to `volume_ids`.
    ///
    /// To override the contents of this collection use [`set_volume_ids`](Self::set_volume_ids).
    ///
    /// <p>Am array of volume IDs. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the specified volumes. Otherwise, it returns a description of every volume.</p>
    pub fn volume_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.volume_ids.unwrap_or_default();
        v.push(input.into());
        self.volume_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>Am array of volume IDs. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the specified volumes. Otherwise, it returns a description of every volume.</p>
    pub fn set_volume_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.volume_ids = input;
        self
    }
    /// <p>Am array of volume IDs. If you use this parameter, <code>DescribeVolumes</code> returns descriptions of the specified volumes. Otherwise, it returns a description of every volume.</p>
    pub fn get_volume_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.volume_ids
    }
    /// Consumes the builder and constructs a [`DescribeVolumesInput`](crate::operation::describe_volumes::DescribeVolumesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_volumes::DescribeVolumesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_volumes::DescribeVolumesInput {
            instance_id: self.instance_id,
            stack_id: self.stack_id,
            raid_array_id: self.raid_array_id,
            volume_ids: self.volume_ids,
        })
    }
}
