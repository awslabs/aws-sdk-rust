// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteLayerInput {
    /// <p>The layer ID.</p>
    pub layer_id: ::std::option::Option<::std::string::String>,
}
impl DeleteLayerInput {
    /// <p>The layer ID.</p>
    pub fn layer_id(&self) -> ::std::option::Option<&str> {
        self.layer_id.as_deref()
    }
}
impl DeleteLayerInput {
    /// Creates a new builder-style object to manufacture [`DeleteLayerInput`](crate::operation::delete_layer::DeleteLayerInput).
    pub fn builder() -> crate::operation::delete_layer::builders::DeleteLayerInputBuilder {
        crate::operation::delete_layer::builders::DeleteLayerInputBuilder::default()
    }
}

/// A builder for [`DeleteLayerInput`](crate::operation::delete_layer::DeleteLayerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteLayerInputBuilder {
    pub(crate) layer_id: ::std::option::Option<::std::string::String>,
}
impl DeleteLayerInputBuilder {
    /// <p>The layer ID.</p>
    /// This field is required.
    pub fn layer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.layer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The layer ID.</p>
    pub fn set_layer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.layer_id = input;
        self
    }
    /// <p>The layer ID.</p>
    pub fn get_layer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.layer_id
    }
    /// Consumes the builder and constructs a [`DeleteLayerInput`](crate::operation::delete_layer::DeleteLayerInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::delete_layer::DeleteLayerInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_layer::DeleteLayerInput { layer_id: self.layer_id })
    }
}
