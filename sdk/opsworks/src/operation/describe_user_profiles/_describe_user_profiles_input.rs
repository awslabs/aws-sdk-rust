// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeUserProfilesInput {
    /// <p>An array of IAM or federated user ARNs that identify the users to be described.</p>
    #[doc(hidden)]
    pub iam_user_arns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DescribeUserProfilesInput {
    /// <p>An array of IAM or federated user ARNs that identify the users to be described.</p>
    pub fn iam_user_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.iam_user_arns.as_deref()
    }
}
impl DescribeUserProfilesInput {
    /// Creates a new builder-style object to manufacture [`DescribeUserProfilesInput`](crate::operation::describe_user_profiles::DescribeUserProfilesInput).
    pub fn builder(
    ) -> crate::operation::describe_user_profiles::builders::DescribeUserProfilesInputBuilder {
        crate::operation::describe_user_profiles::builders::DescribeUserProfilesInputBuilder::default()
    }
}

/// A builder for [`DescribeUserProfilesInput`](crate::operation::describe_user_profiles::DescribeUserProfilesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeUserProfilesInputBuilder {
    pub(crate) iam_user_arns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DescribeUserProfilesInputBuilder {
    /// Appends an item to `iam_user_arns`.
    ///
    /// To override the contents of this collection use [`set_iam_user_arns`](Self::set_iam_user_arns).
    ///
    /// <p>An array of IAM or federated user ARNs that identify the users to be described.</p>
    pub fn iam_user_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.iam_user_arns.unwrap_or_default();
        v.push(input.into());
        self.iam_user_arns = Some(v);
        self
    }
    /// <p>An array of IAM or federated user ARNs that identify the users to be described.</p>
    pub fn set_iam_user_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.iam_user_arns = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeUserProfilesInput`](crate::operation::describe_user_profiles::DescribeUserProfilesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_user_profiles::DescribeUserProfilesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_user_profiles::DescribeUserProfilesInput {
                iam_user_arns: self.iam_user_arns,
            },
        )
    }
}
