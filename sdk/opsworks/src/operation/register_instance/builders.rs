// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_instance::_register_instance_output::RegisterInstanceOutputBuilder;

pub use crate::operation::register_instance::_register_instance_input::RegisterInstanceInputBuilder;

/// Fluent builder constructing a request to `RegisterInstance`.
///
/// <p>Registers instances that were created outside of AWS OpsWorks Stacks with a specified stack.</p> <note>
/// <p>We do not recommend using this action to register instances. The complete registration operation includes two tasks: installing the AWS OpsWorks Stacks agent on the instance, and registering the instance with the stack. <code>RegisterInstance</code> handles only the second step. You should instead use the AWS CLI <code>register</code> command, which performs the entire registration operation. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/registered-instances-register.html"> Registering an Instance with an AWS OpsWorks Stacks Stack</a>.</p>
/// </note>
/// <p>Registered instances have the same requirements as instances that are created by using the <code>CreateInstance</code> API. For example, registered instances must be running a supported Linux-based operating system, and they must have a supported instance type. For more information about requirements for instances that you want to register, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/registered-instances-register-registering-preparer.html"> Preparing the Instance</a>.</p>
/// <p> <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User Permissions</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RegisterInstanceFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::register_instance::builders::RegisterInstanceInputBuilder,
}
impl RegisterInstanceFluentBuilder {
    /// Creates a new `RegisterInstance`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::register_instance::RegisterInstance,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::register_instance::RegisterInstanceError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::register_instance::RegisterInstanceOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::register_instance::RegisterInstanceError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the stack that the instance is to be registered with.</p>
    pub fn stack_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stack_id(input.into());
        self
    }
    /// <p>The ID of the stack that the instance is to be registered with.</p>
    pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stack_id(input);
        self
    }
    /// <p>The instance's hostname.</p>
    pub fn hostname(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.hostname(input.into());
        self
    }
    /// <p>The instance's hostname.</p>
    pub fn set_hostname(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_hostname(input);
        self
    }
    /// <p>The instance's public IP address.</p>
    pub fn public_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.public_ip(input.into());
        self
    }
    /// <p>The instance's public IP address.</p>
    pub fn set_public_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_public_ip(input);
        self
    }
    /// <p>The instance's private IP address.</p>
    pub fn private_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.private_ip(input.into());
        self
    }
    /// <p>The instance's private IP address.</p>
    pub fn set_private_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_private_ip(input);
        self
    }
    /// <p>The instances public RSA key. This key is used to encrypt communication between the instance and the service.</p>
    pub fn rsa_public_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.rsa_public_key(input.into());
        self
    }
    /// <p>The instances public RSA key. This key is used to encrypt communication between the instance and the service.</p>
    pub fn set_rsa_public_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_rsa_public_key(input);
        self
    }
    /// <p>The instances public RSA key fingerprint.</p>
    pub fn rsa_public_key_fingerprint(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.rsa_public_key_fingerprint(input.into());
        self
    }
    /// <p>The instances public RSA key fingerprint.</p>
    pub fn set_rsa_public_key_fingerprint(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_rsa_public_key_fingerprint(input);
        self
    }
    /// <p>An InstanceIdentity object that contains the instance's identity.</p>
    pub fn instance_identity(mut self, input: crate::types::InstanceIdentity) -> Self {
        self.inner = self.inner.instance_identity(input);
        self
    }
    /// <p>An InstanceIdentity object that contains the instance's identity.</p>
    pub fn set_instance_identity(
        mut self,
        input: std::option::Option<crate::types::InstanceIdentity>,
    ) -> Self {
        self.inner = self.inner.set_instance_identity(input);
        self
    }
}
