// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::grant_access::_grant_access_output::GrantAccessOutputBuilder;

pub use crate::operation::grant_access::_grant_access_input::GrantAccessInputBuilder;

/// Fluent builder constructing a request to `GrantAccess`.
///
/// <note>
/// <p>This action can be used only with Windows stacks.</p>
/// </note>
/// <p>Grants RDP access to a Windows instance for a specified time period.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GrantAccessFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::grant_access::builders::GrantAccessInputBuilder,
}
impl GrantAccessFluentBuilder {
    /// Creates a new `GrantAccess`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::grant_access::GrantAccess,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::grant_access::GrantAccessError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::grant_access::GrantAccessOutput,
        aws_smithy_http::result::SdkError<crate::operation::grant_access::GrantAccessError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The instance's AWS OpsWorks Stacks ID.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>The instance's AWS OpsWorks Stacks ID.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>The length of time (in minutes) that the grant is valid. When the grant expires at the end of this period, the user will no longer be able to use the credentials to log in. If the user is logged in at the time, he or she automatically will be logged out.</p>
    pub fn valid_for_in_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.valid_for_in_minutes(input);
        self
    }
    /// <p>The length of time (in minutes) that the grant is valid. When the grant expires at the end of this period, the user will no longer be able to use the credentials to log in. If the user is logged in at the time, he or she automatically will be logged out.</p>
    pub fn set_valid_for_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_valid_for_in_minutes(input);
        self
    }
}
