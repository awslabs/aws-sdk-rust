// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the response to a <code>RegisterElasticIp</code> request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterElasticIpOutput {
    /// <p>The Elastic IP address.</p>
    #[doc(hidden)]
    pub elastic_ip: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RegisterElasticIpOutput {
    /// <p>The Elastic IP address.</p>
    pub fn elastic_ip(&self) -> std::option::Option<&str> {
        self.elastic_ip.as_deref()
    }
}
impl aws_http::request_id::RequestId for RegisterElasticIpOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RegisterElasticIpOutput {
    /// Creates a new builder-style object to manufacture [`RegisterElasticIpOutput`](crate::operation::register_elastic_ip::RegisterElasticIpOutput).
    pub fn builder(
    ) -> crate::operation::register_elastic_ip::builders::RegisterElasticIpOutputBuilder {
        crate::operation::register_elastic_ip::builders::RegisterElasticIpOutputBuilder::default()
    }
}

/// A builder for [`RegisterElasticIpOutput`](crate::operation::register_elastic_ip::RegisterElasticIpOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisterElasticIpOutputBuilder {
    pub(crate) elastic_ip: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RegisterElasticIpOutputBuilder {
    /// <p>The Elastic IP address.</p>
    pub fn elastic_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.elastic_ip = Some(input.into());
        self
    }
    /// <p>The Elastic IP address.</p>
    pub fn set_elastic_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.elastic_ip = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RegisterElasticIpOutput`](crate::operation::register_elastic_ip::RegisterElasticIpOutput).
    pub fn build(self) -> crate::operation::register_elastic_ip::RegisterElasticIpOutput {
        crate::operation::register_elastic_ip::RegisterElasticIpOutput {
            elastic_ip: self.elastic_ip,
            _request_id: self._request_id,
        }
    }
}
