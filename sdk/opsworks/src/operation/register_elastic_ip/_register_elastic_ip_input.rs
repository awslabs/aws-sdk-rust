// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegisterElasticIpInput {
    /// <p>The Elastic IP address.</p>
    pub elastic_ip: ::std::option::Option<::std::string::String>,
    /// <p>The stack ID.</p>
    pub stack_id: ::std::option::Option<::std::string::String>,
}
impl RegisterElasticIpInput {
    /// <p>The Elastic IP address.</p>
    pub fn elastic_ip(&self) -> ::std::option::Option<&str> {
        self.elastic_ip.as_deref()
    }
    /// <p>The stack ID.</p>
    pub fn stack_id(&self) -> ::std::option::Option<&str> {
        self.stack_id.as_deref()
    }
}
impl RegisterElasticIpInput {
    /// Creates a new builder-style object to manufacture [`RegisterElasticIpInput`](crate::operation::register_elastic_ip::RegisterElasticIpInput).
    pub fn builder() -> crate::operation::register_elastic_ip::builders::RegisterElasticIpInputBuilder {
        crate::operation::register_elastic_ip::builders::RegisterElasticIpInputBuilder::default()
    }
}

/// A builder for [`RegisterElasticIpInput`](crate::operation::register_elastic_ip::RegisterElasticIpInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegisterElasticIpInputBuilder {
    pub(crate) elastic_ip: ::std::option::Option<::std::string::String>,
    pub(crate) stack_id: ::std::option::Option<::std::string::String>,
}
impl RegisterElasticIpInputBuilder {
    /// <p>The Elastic IP address.</p>
    /// This field is required.
    pub fn elastic_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.elastic_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Elastic IP address.</p>
    pub fn set_elastic_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.elastic_ip = input;
        self
    }
    /// <p>The Elastic IP address.</p>
    pub fn get_elastic_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.elastic_ip
    }
    /// <p>The stack ID.</p>
    /// This field is required.
    pub fn stack_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stack ID.</p>
    pub fn set_stack_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_id = input;
        self
    }
    /// <p>The stack ID.</p>
    pub fn get_stack_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_id
    }
    /// Consumes the builder and constructs a [`RegisterElasticIpInput`](crate::operation::register_elastic_ip::RegisterElasticIpInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::register_elastic_ip::RegisterElasticIpInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::register_elastic_ip::RegisterElasticIpInput {
            elastic_ip: self.elastic_ip,
            stack_id: self.stack_id,
        })
    }
}
