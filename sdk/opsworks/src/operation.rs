// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Assign a registered instance to a layer.</p>
/// <ul>
/// <li>
/// <p>You can assign registered on-premises instances to any layer type.</p>
/// </li>
/// <li>
/// <p>You can assign registered Amazon EC2 instances only to custom layers.</p>
/// </li>
/// <li>
/// <p>You cannot use this action with instances that were created with AWS OpsWorks Stacks.</p>
/// </li>
/// </ul>
/// <p>
/// <b>Required Permissions</b>: To use this action, an AWS Identity and Access Management
/// (IAM) user must have a Manage permissions
/// level for the stack or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssignInstance {
    _private: (),
}
impl AssignInstance {
    /// Creates a new builder-style object to manufacture [`AssignInstanceInput`](crate::input::AssignInstanceInput)
    pub fn builder() -> crate::input::assign_instance_input::Builder {
        crate::input::assign_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssignInstance {
    type Output =
        std::result::Result<crate::output::AssignInstanceOutput, crate::error::AssignInstanceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_assign_instance_error(response)
        } else {
            crate::operation_deser::parse_assign_instance_response(response)
        }
    }
}

/// <p>Assigns one of the stack's registered Amazon EBS volumes to a specified instance. The volume must
/// first be registered with the stack by calling <a>RegisterVolume</a>. After you register the
/// volume, you must call <a>UpdateVolume</a> to specify a mount point before calling
/// <code>AssignVolume</code>. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssignVolume {
    _private: (),
}
impl AssignVolume {
    /// Creates a new builder-style object to manufacture [`AssignVolumeInput`](crate::input::AssignVolumeInput)
    pub fn builder() -> crate::input::assign_volume_input::Builder {
        crate::input::assign_volume_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssignVolume {
    type Output =
        std::result::Result<crate::output::AssignVolumeOutput, crate::error::AssignVolumeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_assign_volume_error(response)
        } else {
            crate::operation_deser::parse_assign_volume_response(response)
        }
    }
}

/// <p>Associates one of the stack's registered Elastic IP addresses with a specified instance. The
/// address must first be registered with the stack by calling <a>RegisterElasticIp</a>. For more
/// information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource
/// Management</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateElasticIp {
    _private: (),
}
impl AssociateElasticIp {
    /// Creates a new builder-style object to manufacture [`AssociateElasticIpInput`](crate::input::AssociateElasticIpInput)
    pub fn builder() -> crate::input::associate_elastic_ip_input::Builder {
        crate::input::associate_elastic_ip_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateElasticIp {
    type Output = std::result::Result<
        crate::output::AssociateElasticIpOutput,
        crate::error::AssociateElasticIpError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_elastic_ip_error(response)
        } else {
            crate::operation_deser::parse_associate_elastic_ip_response(response)
        }
    }
}

/// <p>Attaches an Elastic Load Balancing load balancer to a specified layer. AWS OpsWorks Stacks does not support
/// Application Load Balancer. You can only use Classic Load Balancer with AWS OpsWorks Stacks.
/// For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers-elb.html">Elastic Load
/// Balancing</a>.</p>
/// <note>
/// <p>You must create the Elastic Load Balancing instance separately, by using the Elastic Load Balancing console, API, or CLI. For
/// more information, see <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/Welcome.html"> Elastic
/// Load Balancing Developer Guide</a>.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AttachElasticLoadBalancer {
    _private: (),
}
impl AttachElasticLoadBalancer {
    /// Creates a new builder-style object to manufacture [`AttachElasticLoadBalancerInput`](crate::input::AttachElasticLoadBalancerInput)
    pub fn builder() -> crate::input::attach_elastic_load_balancer_input::Builder {
        crate::input::attach_elastic_load_balancer_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AttachElasticLoadBalancer {
    type Output = std::result::Result<
        crate::output::AttachElasticLoadBalancerOutput,
        crate::error::AttachElasticLoadBalancerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_attach_elastic_load_balancer_error(response)
        } else {
            crate::operation_deser::parse_attach_elastic_load_balancer_response(response)
        }
    }
}

/// <p>Creates a clone of a specified stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-cloning.html">Clone a
/// Stack</a>. By default, all parameters are set to the values used by the parent stack.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have an attached policy
/// that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CloneStack {
    _private: (),
}
impl CloneStack {
    /// Creates a new builder-style object to manufacture [`CloneStackInput`](crate::input::CloneStackInput)
    pub fn builder() -> crate::input::clone_stack_input::Builder {
        crate::input::clone_stack_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CloneStack {
    type Output =
        std::result::Result<crate::output::CloneStackOutput, crate::error::CloneStackError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_clone_stack_error(response)
        } else {
            crate::operation_deser::parse_clone_stack_response(response)
        }
    }
}

/// <p>Creates an app for a specified stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html">Creating
/// Apps</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateApp {
    _private: (),
}
impl CreateApp {
    /// Creates a new builder-style object to manufacture [`CreateAppInput`](crate::input::CreateAppInput)
    pub fn builder() -> crate::input::create_app_input::Builder {
        crate::input::create_app_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateApp {
    type Output = std::result::Result<crate::output::CreateAppOutput, crate::error::CreateAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_app_error(response)
        } else {
            crate::operation_deser::parse_create_app_response(response)
        }
    }
}

/// <p>Runs deployment or stack commands. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-deploying.html">Deploying
/// Apps</a> and <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-commands.html">Run Stack Commands</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Deploy or Manage
/// permissions level for the stack, or an attached policy that explicitly grants permissions. For
/// more information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDeployment {
    _private: (),
}
impl CreateDeployment {
    /// Creates a new builder-style object to manufacture [`CreateDeploymentInput`](crate::input::CreateDeploymentInput)
    pub fn builder() -> crate::input::create_deployment_input::Builder {
        crate::input::create_deployment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDeployment {
    type Output = std::result::Result<
        crate::output::CreateDeploymentOutput,
        crate::error::CreateDeploymentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_deployment_error(response)
        } else {
            crate::operation_deser::parse_create_deployment_response(response)
        }
    }
}

/// <p>Creates an instance in a specified stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-add.html">Adding an
/// Instance to a Layer</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateInstance {
    _private: (),
}
impl CreateInstance {
    /// Creates a new builder-style object to manufacture [`CreateInstanceInput`](crate::input::CreateInstanceInput)
    pub fn builder() -> crate::input::create_instance_input::Builder {
        crate::input::create_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateInstance {
    type Output =
        std::result::Result<crate::output::CreateInstanceOutput, crate::error::CreateInstanceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_instance_error(response)
        } else {
            crate::operation_deser::parse_create_instance_response(response)
        }
    }
}

/// <p>Creates a layer. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-create.html">How to
/// Create a Layer</a>.</p>
/// <note>
/// <p>You should use <b>CreateLayer</b> for noncustom layer types such as PHP App Server only if the stack
/// does not have an existing layer of that type. A stack can have at most one instance of each
/// noncustom layer; if you attempt to create a second instance, <b>CreateLayer</b> fails. A
/// stack can have an arbitrary number of custom layers, so you can call <b>CreateLayer</b> as
/// many times as you like for that layer type.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateLayer {
    _private: (),
}
impl CreateLayer {
    /// Creates a new builder-style object to manufacture [`CreateLayerInput`](crate::input::CreateLayerInput)
    pub fn builder() -> crate::input::create_layer_input::Builder {
        crate::input::create_layer_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateLayer {
    type Output =
        std::result::Result<crate::output::CreateLayerOutput, crate::error::CreateLayerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_layer_error(response)
        } else {
            crate::operation_deser::parse_create_layer_response(response)
        }
    }
}

/// <p>Creates a new stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-edit.html">Create a New
/// Stack</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have an attached policy
/// that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateStack {
    _private: (),
}
impl CreateStack {
    /// Creates a new builder-style object to manufacture [`CreateStackInput`](crate::input::CreateStackInput)
    pub fn builder() -> crate::input::create_stack_input::Builder {
        crate::input::create_stack_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateStack {
    type Output =
        std::result::Result<crate::output::CreateStackOutput, crate::error::CreateStackError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_stack_error(response)
        } else {
            crate::operation_deser::parse_create_stack_response(response)
        }
    }
}

/// <p>Creates a new user profile.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have an attached policy
/// that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateUserProfile {
    _private: (),
}
impl CreateUserProfile {
    /// Creates a new builder-style object to manufacture [`CreateUserProfileInput`](crate::input::CreateUserProfileInput)
    pub fn builder() -> crate::input::create_user_profile_input::Builder {
        crate::input::create_user_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateUserProfile {
    type Output = std::result::Result<
        crate::output::CreateUserProfileOutput,
        crate::error::CreateUserProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_user_profile_error(response)
        } else {
            crate::operation_deser::parse_create_user_profile_response(response)
        }
    }
}

/// <p>Deletes a specified app.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteApp {
    _private: (),
}
impl DeleteApp {
    /// Creates a new builder-style object to manufacture [`DeleteAppInput`](crate::input::DeleteAppInput)
    pub fn builder() -> crate::input::delete_app_input::Builder {
        crate::input::delete_app_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteApp {
    type Output = std::result::Result<crate::output::DeleteAppOutput, crate::error::DeleteAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_app_error(response)
        } else {
            crate::operation_deser::parse_delete_app_response(response)
        }
    }
}

/// <p>Deletes a specified instance, which terminates the associated Amazon EC2 instance. You must stop an instance before you can delete it.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-delete.html">Deleting
/// Instances</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInstance {
    _private: (),
}
impl DeleteInstance {
    /// Creates a new builder-style object to manufacture [`DeleteInstanceInput`](crate::input::DeleteInstanceInput)
    pub fn builder() -> crate::input::delete_instance_input::Builder {
        crate::input::delete_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteInstance {
    type Output =
        std::result::Result<crate::output::DeleteInstanceOutput, crate::error::DeleteInstanceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_instance_error(response)
        } else {
            crate::operation_deser::parse_delete_instance_response(response)
        }
    }
}

/// <p>Deletes a specified layer. You must first stop and then delete all associated instances or
/// unassign registered instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-delete.html">How to
/// Delete a Layer</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteLayer {
    _private: (),
}
impl DeleteLayer {
    /// Creates a new builder-style object to manufacture [`DeleteLayerInput`](crate::input::DeleteLayerInput)
    pub fn builder() -> crate::input::delete_layer_input::Builder {
        crate::input::delete_layer_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteLayer {
    type Output =
        std::result::Result<crate::output::DeleteLayerOutput, crate::error::DeleteLayerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_layer_error(response)
        } else {
            crate::operation_deser::parse_delete_layer_response(response)
        }
    }
}

/// <p>Deletes a specified stack. You must first delete all instances, layers, and apps or
/// deregister registered instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-shutting.html">Shut Down a
/// Stack</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteStack {
    _private: (),
}
impl DeleteStack {
    /// Creates a new builder-style object to manufacture [`DeleteStackInput`](crate::input::DeleteStackInput)
    pub fn builder() -> crate::input::delete_stack_input::Builder {
        crate::input::delete_stack_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteStack {
    type Output =
        std::result::Result<crate::output::DeleteStackOutput, crate::error::DeleteStackError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_stack_error(response)
        } else {
            crate::operation_deser::parse_delete_stack_response(response)
        }
    }
}

/// <p>Deletes a user profile.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have an attached policy
/// that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteUserProfile {
    _private: (),
}
impl DeleteUserProfile {
    /// Creates a new builder-style object to manufacture [`DeleteUserProfileInput`](crate::input::DeleteUserProfileInput)
    pub fn builder() -> crate::input::delete_user_profile_input::Builder {
        crate::input::delete_user_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteUserProfile {
    type Output = std::result::Result<
        crate::output::DeleteUserProfileOutput,
        crate::error::DeleteUserProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_user_profile_error(response)
        } else {
            crate::operation_deser::parse_delete_user_profile_response(response)
        }
    }
}

/// <p>Deregisters a specified Amazon ECS cluster from a stack.
/// For more information, see
/// <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-ecscluster.html#workinglayers-ecscluster-delete">
/// Resource Management</a>.</p>  
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see
/// <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterEcsCluster {
    _private: (),
}
impl DeregisterEcsCluster {
    /// Creates a new builder-style object to manufacture [`DeregisterEcsClusterInput`](crate::input::DeregisterEcsClusterInput)
    pub fn builder() -> crate::input::deregister_ecs_cluster_input::Builder {
        crate::input::deregister_ecs_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterEcsCluster {
    type Output = std::result::Result<
        crate::output::DeregisterEcsClusterOutput,
        crate::error::DeregisterEcsClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_ecs_cluster_error(response)
        } else {
            crate::operation_deser::parse_deregister_ecs_cluster_response(response)
        }
    }
}

/// <p>Deregisters a specified Elastic IP address. The address can then be registered by another
/// stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterElasticIp {
    _private: (),
}
impl DeregisterElasticIp {
    /// Creates a new builder-style object to manufacture [`DeregisterElasticIpInput`](crate::input::DeregisterElasticIpInput)
    pub fn builder() -> crate::input::deregister_elastic_ip_input::Builder {
        crate::input::deregister_elastic_ip_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterElasticIp {
    type Output = std::result::Result<
        crate::output::DeregisterElasticIpOutput,
        crate::error::DeregisterElasticIpError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_elastic_ip_error(response)
        } else {
            crate::operation_deser::parse_deregister_elastic_ip_response(response)
        }
    }
}

/// <p>Deregister a registered Amazon EC2 or on-premises instance. This action removes the
/// instance from the stack and returns it to your control. This action cannot be used with
/// instances that were created with AWS OpsWorks Stacks.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterInstance {
    _private: (),
}
impl DeregisterInstance {
    /// Creates a new builder-style object to manufacture [`DeregisterInstanceInput`](crate::input::DeregisterInstanceInput)
    pub fn builder() -> crate::input::deregister_instance_input::Builder {
        crate::input::deregister_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterInstance {
    type Output = std::result::Result<
        crate::output::DeregisterInstanceOutput,
        crate::error::DeregisterInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_instance_error(response)
        } else {
            crate::operation_deser::parse_deregister_instance_response(response)
        }
    }
}

/// <p>Deregisters an Amazon RDS instance.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterRdsDbInstance {
    _private: (),
}
impl DeregisterRdsDbInstance {
    /// Creates a new builder-style object to manufacture [`DeregisterRdsDbInstanceInput`](crate::input::DeregisterRdsDbInstanceInput)
    pub fn builder() -> crate::input::deregister_rds_db_instance_input::Builder {
        crate::input::deregister_rds_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterRdsDbInstance {
    type Output = std::result::Result<
        crate::output::DeregisterRdsDbInstanceOutput,
        crate::error::DeregisterRdsDbInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_rds_db_instance_error(response)
        } else {
            crate::operation_deser::parse_deregister_rds_db_instance_response(response)
        }
    }
}

/// <p>Deregisters an Amazon EBS volume. The volume can then be registered by another stack. For more
/// information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource
/// Management</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterVolume {
    _private: (),
}
impl DeregisterVolume {
    /// Creates a new builder-style object to manufacture [`DeregisterVolumeInput`](crate::input::DeregisterVolumeInput)
    pub fn builder() -> crate::input::deregister_volume_input::Builder {
        crate::input::deregister_volume_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterVolume {
    type Output = std::result::Result<
        crate::output::DeregisterVolumeOutput,
        crate::error::DeregisterVolumeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_volume_error(response)
        } else {
            crate::operation_deser::parse_deregister_volume_response(response)
        }
    }
}

/// <p>Describes the available AWS OpsWorks Stacks agent versions. You must specify a stack ID or a
/// configuration manager. <code>DescribeAgentVersions</code> returns a list of available
/// agent versions for the specified stack or configuration manager.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAgentVersions {
    _private: (),
}
impl DescribeAgentVersions {
    /// Creates a new builder-style object to manufacture [`DescribeAgentVersionsInput`](crate::input::DescribeAgentVersionsInput)
    pub fn builder() -> crate::input::describe_agent_versions_input::Builder {
        crate::input::describe_agent_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAgentVersions {
    type Output = std::result::Result<
        crate::output::DescribeAgentVersionsOutput,
        crate::error::DescribeAgentVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_agent_versions_error(response)
        } else {
            crate::operation_deser::parse_describe_agent_versions_response(response)
        }
    }
}

/// <p>Requests a description of a specified set of apps.</p>
/// <note>
/// <p>This call accepts only one resource-identifying parameter.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeApps {
    _private: (),
}
impl DescribeApps {
    /// Creates a new builder-style object to manufacture [`DescribeAppsInput`](crate::input::DescribeAppsInput)
    pub fn builder() -> crate::input::describe_apps_input::Builder {
        crate::input::describe_apps_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeApps {
    type Output =
        std::result::Result<crate::output::DescribeAppsOutput, crate::error::DescribeAppsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_apps_error(response)
        } else {
            crate::operation_deser::parse_describe_apps_response(response)
        }
    }
}

/// <p>Describes the results of specified commands.</p>
/// <note>
/// <p>This call accepts only one resource-identifying parameter.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCommands {
    _private: (),
}
impl DescribeCommands {
    /// Creates a new builder-style object to manufacture [`DescribeCommandsInput`](crate::input::DescribeCommandsInput)
    pub fn builder() -> crate::input::describe_commands_input::Builder {
        crate::input::describe_commands_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCommands {
    type Output = std::result::Result<
        crate::output::DescribeCommandsOutput,
        crate::error::DescribeCommandsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_commands_error(response)
        } else {
            crate::operation_deser::parse_describe_commands_response(response)
        }
    }
}

/// <p>Requests a description of a specified set of deployments.</p>
/// <note>
/// <p>This call accepts only one resource-identifying parameter.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDeployments {
    _private: (),
}
impl DescribeDeployments {
    /// Creates a new builder-style object to manufacture [`DescribeDeploymentsInput`](crate::input::DescribeDeploymentsInput)
    pub fn builder() -> crate::input::describe_deployments_input::Builder {
        crate::input::describe_deployments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDeployments {
    type Output = std::result::Result<
        crate::output::DescribeDeploymentsOutput,
        crate::error::DescribeDeploymentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_deployments_error(response)
        } else {
            crate::operation_deser::parse_describe_deployments_response(response)
        }
    }
}

/// <p>Describes Amazon ECS clusters that are registered with a stack. If you specify only a stack ID,
/// you can use the <code>MaxResults</code> and <code>NextToken</code> parameters to paginate the
/// response. However, AWS OpsWorks Stacks currently supports only one cluster per layer, so the result
/// set has a maximum of one element.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack or an attached policy that explicitly grants
/// permission. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
/// <p>This call accepts only one resource-identifying parameter.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEcsClusters {
    _private: (),
}
impl DescribeEcsClusters {
    /// Creates a new builder-style object to manufacture [`DescribeEcsClustersInput`](crate::input::DescribeEcsClustersInput)
    pub fn builder() -> crate::input::describe_ecs_clusters_input::Builder {
        crate::input::describe_ecs_clusters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEcsClusters {
    type Output = std::result::Result<
        crate::output::DescribeEcsClustersOutput,
        crate::error::DescribeEcsClustersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_ecs_clusters_error(response)
        } else {
            crate::operation_deser::parse_describe_ecs_clusters_response(response)
        }
    }
}

/// <p>Describes <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP addresses</a>.</p>
/// <note>
/// <p>This call accepts only one resource-identifying parameter.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeElasticIps {
    _private: (),
}
impl DescribeElasticIps {
    /// Creates a new builder-style object to manufacture [`DescribeElasticIpsInput`](crate::input::DescribeElasticIpsInput)
    pub fn builder() -> crate::input::describe_elastic_ips_input::Builder {
        crate::input::describe_elastic_ips_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeElasticIps {
    type Output = std::result::Result<
        crate::output::DescribeElasticIpsOutput,
        crate::error::DescribeElasticIpsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_elastic_ips_error(response)
        } else {
            crate::operation_deser::parse_describe_elastic_ips_response(response)
        }
    }
}

/// <p>Describes a stack's Elastic Load Balancing instances.</p>
/// <note>
/// <p>This call accepts only one resource-identifying parameter.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeElasticLoadBalancers {
    _private: (),
}
impl DescribeElasticLoadBalancers {
    /// Creates a new builder-style object to manufacture [`DescribeElasticLoadBalancersInput`](crate::input::DescribeElasticLoadBalancersInput)
    pub fn builder() -> crate::input::describe_elastic_load_balancers_input::Builder {
        crate::input::describe_elastic_load_balancers_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeElasticLoadBalancers {
    type Output = std::result::Result<
        crate::output::DescribeElasticLoadBalancersOutput,
        crate::error::DescribeElasticLoadBalancersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_elastic_load_balancers_error(response)
        } else {
            crate::operation_deser::parse_describe_elastic_load_balancers_response(response)
        }
    }
}

/// <p>Requests a description of a set of instances.</p>
/// <note>
/// <p>This call accepts only one resource-identifying parameter.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstances {
    _private: (),
}
impl DescribeInstances {
    /// Creates a new builder-style object to manufacture [`DescribeInstancesInput`](crate::input::DescribeInstancesInput)
    pub fn builder() -> crate::input::describe_instances_input::Builder {
        crate::input::describe_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstances {
    type Output = std::result::Result<
        crate::output::DescribeInstancesOutput,
        crate::error::DescribeInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_instances_response(response)
        }
    }
}

/// <p>Requests a description of one or more layers in a specified stack.</p>
/// <note>
/// <p>This call accepts only one resource-identifying parameter.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLayers {
    _private: (),
}
impl DescribeLayers {
    /// Creates a new builder-style object to manufacture [`DescribeLayersInput`](crate::input::DescribeLayersInput)
    pub fn builder() -> crate::input::describe_layers_input::Builder {
        crate::input::describe_layers_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLayers {
    type Output =
        std::result::Result<crate::output::DescribeLayersOutput, crate::error::DescribeLayersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_layers_error(response)
        } else {
            crate::operation_deser::parse_describe_layers_response(response)
        }
    }
}

/// <p>Describes load-based auto scaling configurations for specified layers.</p>
/// <note>
/// <p>You must specify at least one of the parameters.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLoadBasedAutoScaling {
    _private: (),
}
impl DescribeLoadBasedAutoScaling {
    /// Creates a new builder-style object to manufacture [`DescribeLoadBasedAutoScalingInput`](crate::input::DescribeLoadBasedAutoScalingInput)
    pub fn builder() -> crate::input::describe_load_based_auto_scaling_input::Builder {
        crate::input::describe_load_based_auto_scaling_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLoadBasedAutoScaling {
    type Output = std::result::Result<
        crate::output::DescribeLoadBasedAutoScalingOutput,
        crate::error::DescribeLoadBasedAutoScalingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_load_based_auto_scaling_error(response)
        } else {
            crate::operation_deser::parse_describe_load_based_auto_scaling_response(response)
        }
    }
}

/// <p>Describes a user's SSH information.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have self-management
/// enabled or an attached policy that explicitly grants permissions. For more information about user
/// permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMyUserProfile {
    _private: (),
}
impl DescribeMyUserProfile {
    /// Creates a new builder-style object to manufacture [`DescribeMyUserProfileInput`](crate::input::DescribeMyUserProfileInput)
    pub fn builder() -> crate::input::describe_my_user_profile_input::Builder {
        crate::input::describe_my_user_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMyUserProfile {
    type Output = std::result::Result<
        crate::output::DescribeMyUserProfileOutput,
        crate::error::DescribeMyUserProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_my_user_profile_error(response)
        } else {
            crate::operation_deser::parse_describe_my_user_profile_response(response)
        }
    }
}

/// <p>Describes the operating systems that are supported by AWS OpsWorks Stacks.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeOperatingSystems {
    _private: (),
}
impl DescribeOperatingSystems {
    /// Creates a new builder-style object to manufacture [`DescribeOperatingSystemsInput`](crate::input::DescribeOperatingSystemsInput)
    pub fn builder() -> crate::input::describe_operating_systems_input::Builder {
        crate::input::describe_operating_systems_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeOperatingSystems {
    type Output = std::result::Result<
        crate::output::DescribeOperatingSystemsOutput,
        crate::error::DescribeOperatingSystemsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_operating_systems_error(response)
        } else {
            crate::operation_deser::parse_describe_operating_systems_response(response)
        }
    }
}

/// <p>Describes the permissions for a specified stack.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePermissions {
    _private: (),
}
impl DescribePermissions {
    /// Creates a new builder-style object to manufacture [`DescribePermissionsInput`](crate::input::DescribePermissionsInput)
    pub fn builder() -> crate::input::describe_permissions_input::Builder {
        crate::input::describe_permissions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePermissions {
    type Output = std::result::Result<
        crate::output::DescribePermissionsOutput,
        crate::error::DescribePermissionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_permissions_error(response)
        } else {
            crate::operation_deser::parse_describe_permissions_response(response)
        }
    }
}

/// <p>Describe an instance's RAID arrays.</p>
/// <note>
/// <p>This call accepts only one resource-identifying parameter.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRaidArrays {
    _private: (),
}
impl DescribeRaidArrays {
    /// Creates a new builder-style object to manufacture [`DescribeRaidArraysInput`](crate::input::DescribeRaidArraysInput)
    pub fn builder() -> crate::input::describe_raid_arrays_input::Builder {
        crate::input::describe_raid_arrays_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeRaidArrays {
    type Output = std::result::Result<
        crate::output::DescribeRaidArraysOutput,
        crate::error::DescribeRaidArraysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_raid_arrays_error(response)
        } else {
            crate::operation_deser::parse_describe_raid_arrays_response(response)
        }
    }
}

/// <p>Describes Amazon RDS instances.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
/// <p>This call accepts only one resource-identifying parameter.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRdsDbInstances {
    _private: (),
}
impl DescribeRdsDbInstances {
    /// Creates a new builder-style object to manufacture [`DescribeRdsDbInstancesInput`](crate::input::DescribeRdsDbInstancesInput)
    pub fn builder() -> crate::input::describe_rds_db_instances_input::Builder {
        crate::input::describe_rds_db_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeRdsDbInstances {
    type Output = std::result::Result<
        crate::output::DescribeRdsDbInstancesOutput,
        crate::error::DescribeRdsDbInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_rds_db_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_rds_db_instances_response(response)
        }
    }
}

/// <p>Describes AWS OpsWorks Stacks service errors.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
/// <p>This call accepts only one resource-identifying parameter.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeServiceErrors {
    _private: (),
}
impl DescribeServiceErrors {
    /// Creates a new builder-style object to manufacture [`DescribeServiceErrorsInput`](crate::input::DescribeServiceErrorsInput)
    pub fn builder() -> crate::input::describe_service_errors_input::Builder {
        crate::input::describe_service_errors_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeServiceErrors {
    type Output = std::result::Result<
        crate::output::DescribeServiceErrorsOutput,
        crate::error::DescribeServiceErrorsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_service_errors_error(response)
        } else {
            crate::operation_deser::parse_describe_service_errors_response(response)
        }
    }
}

/// <p>Requests a description of a stack's provisioning parameters.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStackProvisioningParameters {
    _private: (),
}
impl DescribeStackProvisioningParameters {
    /// Creates a new builder-style object to manufacture [`DescribeStackProvisioningParametersInput`](crate::input::DescribeStackProvisioningParametersInput)
    pub fn builder() -> crate::input::describe_stack_provisioning_parameters_input::Builder {
        crate::input::describe_stack_provisioning_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeStackProvisioningParameters {
    type Output = std::result::Result<
        crate::output::DescribeStackProvisioningParametersOutput,
        crate::error::DescribeStackProvisioningParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_stack_provisioning_parameters_error(response)
        } else {
            crate::operation_deser::parse_describe_stack_provisioning_parameters_response(response)
        }
    }
}

/// <p>Requests a description of one or more stacks.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStacks {
    _private: (),
}
impl DescribeStacks {
    /// Creates a new builder-style object to manufacture [`DescribeStacksInput`](crate::input::DescribeStacksInput)
    pub fn builder() -> crate::input::describe_stacks_input::Builder {
        crate::input::describe_stacks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeStacks {
    type Output =
        std::result::Result<crate::output::DescribeStacksOutput, crate::error::DescribeStacksError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_stacks_error(response)
        } else {
            crate::operation_deser::parse_describe_stacks_response(response)
        }
    }
}

/// <p>Describes the number of layers and apps in a specified stack, and the number of instances in
/// each state, such as <code>running_setup</code> or <code>online</code>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStackSummary {
    _private: (),
}
impl DescribeStackSummary {
    /// Creates a new builder-style object to manufacture [`DescribeStackSummaryInput`](crate::input::DescribeStackSummaryInput)
    pub fn builder() -> crate::input::describe_stack_summary_input::Builder {
        crate::input::describe_stack_summary_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeStackSummary {
    type Output = std::result::Result<
        crate::output::DescribeStackSummaryOutput,
        crate::error::DescribeStackSummaryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_stack_summary_error(response)
        } else {
            crate::operation_deser::parse_describe_stack_summary_response(response)
        }
    }
}

/// <p>Describes time-based auto scaling configurations for specified instances.</p>
/// <note>
/// <p>You must specify at least one of the parameters.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTimeBasedAutoScaling {
    _private: (),
}
impl DescribeTimeBasedAutoScaling {
    /// Creates a new builder-style object to manufacture [`DescribeTimeBasedAutoScalingInput`](crate::input::DescribeTimeBasedAutoScalingInput)
    pub fn builder() -> crate::input::describe_time_based_auto_scaling_input::Builder {
        crate::input::describe_time_based_auto_scaling_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTimeBasedAutoScaling {
    type Output = std::result::Result<
        crate::output::DescribeTimeBasedAutoScalingOutput,
        crate::error::DescribeTimeBasedAutoScalingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_time_based_auto_scaling_error(response)
        } else {
            crate::operation_deser::parse_describe_time_based_auto_scaling_response(response)
        }
    }
}

/// <p>Describe specified users.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have an attached policy
/// that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeUserProfiles {
    _private: (),
}
impl DescribeUserProfiles {
    /// Creates a new builder-style object to manufacture [`DescribeUserProfilesInput`](crate::input::DescribeUserProfilesInput)
    pub fn builder() -> crate::input::describe_user_profiles_input::Builder {
        crate::input::describe_user_profiles_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeUserProfiles {
    type Output = std::result::Result<
        crate::output::DescribeUserProfilesOutput,
        crate::error::DescribeUserProfilesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_user_profiles_error(response)
        } else {
            crate::operation_deser::parse_describe_user_profiles_response(response)
        }
    }
}

/// <p>Describes an instance's Amazon EBS volumes.</p>
/// <note>
/// <p>This call accepts only one resource-identifying parameter.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Show, Deploy, or
/// Manage permissions level for the stack, or an attached policy that explicitly grants
/// permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVolumes {
    _private: (),
}
impl DescribeVolumes {
    /// Creates a new builder-style object to manufacture [`DescribeVolumesInput`](crate::input::DescribeVolumesInput)
    pub fn builder() -> crate::input::describe_volumes_input::Builder {
        crate::input::describe_volumes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVolumes {
    type Output = std::result::Result<
        crate::output::DescribeVolumesOutput,
        crate::error::DescribeVolumesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_volumes_error(response)
        } else {
            crate::operation_deser::parse_describe_volumes_response(response)
        }
    }
}

/// <p>Detaches a specified Elastic Load Balancing instance from its layer.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DetachElasticLoadBalancer {
    _private: (),
}
impl DetachElasticLoadBalancer {
    /// Creates a new builder-style object to manufacture [`DetachElasticLoadBalancerInput`](crate::input::DetachElasticLoadBalancerInput)
    pub fn builder() -> crate::input::detach_elastic_load_balancer_input::Builder {
        crate::input::detach_elastic_load_balancer_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DetachElasticLoadBalancer {
    type Output = std::result::Result<
        crate::output::DetachElasticLoadBalancerOutput,
        crate::error::DetachElasticLoadBalancerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_detach_elastic_load_balancer_error(response)
        } else {
            crate::operation_deser::parse_detach_elastic_load_balancer_response(response)
        }
    }
}

/// <p>Disassociates an Elastic IP address from its instance. The address remains registered with
/// the stack. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateElasticIp {
    _private: (),
}
impl DisassociateElasticIp {
    /// Creates a new builder-style object to manufacture [`DisassociateElasticIpInput`](crate::input::DisassociateElasticIpInput)
    pub fn builder() -> crate::input::disassociate_elastic_ip_input::Builder {
        crate::input::disassociate_elastic_ip_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateElasticIp {
    type Output = std::result::Result<
        crate::output::DisassociateElasticIpOutput,
        crate::error::DisassociateElasticIpError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_elastic_ip_error(response)
        } else {
            crate::operation_deser::parse_disassociate_elastic_ip_response(response)
        }
    }
}

/// <p>Gets a generated host name for the specified layer, based on the current host name theme.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetHostnameSuggestion {
    _private: (),
}
impl GetHostnameSuggestion {
    /// Creates a new builder-style object to manufacture [`GetHostnameSuggestionInput`](crate::input::GetHostnameSuggestionInput)
    pub fn builder() -> crate::input::get_hostname_suggestion_input::Builder {
        crate::input::get_hostname_suggestion_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetHostnameSuggestion {
    type Output = std::result::Result<
        crate::output::GetHostnameSuggestionOutput,
        crate::error::GetHostnameSuggestionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_hostname_suggestion_error(response)
        } else {
            crate::operation_deser::parse_get_hostname_suggestion_response(response)
        }
    }
}

/// <note>
/// <p>This action can be used only with Windows stacks.</p>
/// </note>
/// <p>Grants RDP access to a Windows instance for a specified time period.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GrantAccess {
    _private: (),
}
impl GrantAccess {
    /// Creates a new builder-style object to manufacture [`GrantAccessInput`](crate::input::GrantAccessInput)
    pub fn builder() -> crate::input::grant_access_input::Builder {
        crate::input::grant_access_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GrantAccess {
    type Output =
        std::result::Result<crate::output::GrantAccessOutput, crate::error::GrantAccessError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_grant_access_error(response)
        } else {
            crate::operation_deser::parse_grant_access_response(response)
        }
    }
}

/// <p>Returns a list of tags that are applied to the specified stack or layer.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTags {
    _private: (),
}
impl ListTags {
    /// Creates a new builder-style object to manufacture [`ListTagsInput`](crate::input::ListTagsInput)
    pub fn builder() -> crate::input::list_tags_input::Builder {
        crate::input::list_tags_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTags {
    type Output = std::result::Result<crate::output::ListTagsOutput, crate::error::ListTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_error(response)
        } else {
            crate::operation_deser::parse_list_tags_response(response)
        }
    }
}

/// <p>Reboots a specified instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-starting.html">Starting,
/// Stopping, and Rebooting Instances</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RebootInstance {
    _private: (),
}
impl RebootInstance {
    /// Creates a new builder-style object to manufacture [`RebootInstanceInput`](crate::input::RebootInstanceInput)
    pub fn builder() -> crate::input::reboot_instance_input::Builder {
        crate::input::reboot_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RebootInstance {
    type Output =
        std::result::Result<crate::output::RebootInstanceOutput, crate::error::RebootInstanceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reboot_instance_error(response)
        } else {
            crate::operation_deser::parse_reboot_instance_response(response)
        }
    }
}

/// <p>Registers a specified Amazon ECS cluster with a stack. You can register only one
/// cluster with a stack. A cluster can be registered with only one stack.
/// For more information, see
/// <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-ecscluster.html">
/// Resource Management</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see
/// <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">
/// Managing User Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterEcsCluster {
    _private: (),
}
impl RegisterEcsCluster {
    /// Creates a new builder-style object to manufacture [`RegisterEcsClusterInput`](crate::input::RegisterEcsClusterInput)
    pub fn builder() -> crate::input::register_ecs_cluster_input::Builder {
        crate::input::register_ecs_cluster_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterEcsCluster {
    type Output = std::result::Result<
        crate::output::RegisterEcsClusterOutput,
        crate::error::RegisterEcsClusterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_ecs_cluster_error(response)
        } else {
            crate::operation_deser::parse_register_ecs_cluster_response(response)
        }
    }
}

/// <p>Registers an Elastic IP address with a specified stack. An address can be registered with
/// only one stack at a time. If the address is already registered, you must first deregister it
/// by calling <a>DeregisterElasticIp</a>. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterElasticIp {
    _private: (),
}
impl RegisterElasticIp {
    /// Creates a new builder-style object to manufacture [`RegisterElasticIpInput`](crate::input::RegisterElasticIpInput)
    pub fn builder() -> crate::input::register_elastic_ip_input::Builder {
        crate::input::register_elastic_ip_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterElasticIp {
    type Output = std::result::Result<
        crate::output::RegisterElasticIpOutput,
        crate::error::RegisterElasticIpError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_elastic_ip_error(response)
        } else {
            crate::operation_deser::parse_register_elastic_ip_response(response)
        }
    }
}

/// <p>Registers instances that were created outside of AWS OpsWorks Stacks with a specified stack.</p>
/// <note>
/// <p>We do not recommend using this action to register instances. The complete registration
/// operation includes two tasks: installing the AWS OpsWorks Stacks agent on the instance, and registering
/// the instance with the stack. <code>RegisterInstance</code> handles only the second step. You
/// should instead use the AWS CLI <code>register</code> command, which performs the entire
/// registration operation. For more information,
/// see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/registered-instances-register.html">
/// Registering an Instance with an AWS OpsWorks Stacks Stack</a>.</p>
/// </note>
/// <p>Registered instances have the same requirements as instances that are created by using the <a>CreateInstance</a> API.
/// For example, registered instances must be running a supported Linux-based operating system, and they must have a supported instance
/// type. For more information about requirements for instances that you want to register, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/registered-instances-register-registering-preparer.html">
/// Preparing the Instance</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterInstance {
    _private: (),
}
impl RegisterInstance {
    /// Creates a new builder-style object to manufacture [`RegisterInstanceInput`](crate::input::RegisterInstanceInput)
    pub fn builder() -> crate::input::register_instance_input::Builder {
        crate::input::register_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterInstance {
    type Output = std::result::Result<
        crate::output::RegisterInstanceOutput,
        crate::error::RegisterInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_instance_error(response)
        } else {
            crate::operation_deser::parse_register_instance_response(response)
        }
    }
}

/// <p>Registers an Amazon RDS instance with a stack.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterRdsDbInstance {
    _private: (),
}
impl RegisterRdsDbInstance {
    /// Creates a new builder-style object to manufacture [`RegisterRdsDbInstanceInput`](crate::input::RegisterRdsDbInstanceInput)
    pub fn builder() -> crate::input::register_rds_db_instance_input::Builder {
        crate::input::register_rds_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterRdsDbInstance {
    type Output = std::result::Result<
        crate::output::RegisterRdsDbInstanceOutput,
        crate::error::RegisterRdsDbInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_rds_db_instance_error(response)
        } else {
            crate::operation_deser::parse_register_rds_db_instance_response(response)
        }
    }
}

/// <p>Registers an Amazon EBS volume with a specified stack. A volume can be registered with only one
/// stack at a time. If the volume is already registered, you must first deregister it by calling
/// <a>DeregisterVolume</a>. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterVolume {
    _private: (),
}
impl RegisterVolume {
    /// Creates a new builder-style object to manufacture [`RegisterVolumeInput`](crate::input::RegisterVolumeInput)
    pub fn builder() -> crate::input::register_volume_input::Builder {
        crate::input::register_volume_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterVolume {
    type Output =
        std::result::Result<crate::output::RegisterVolumeOutput, crate::error::RegisterVolumeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_volume_error(response)
        } else {
            crate::operation_deser::parse_register_volume_response(response)
        }
    }
}

/// <p>Specify the load-based auto scaling configuration for a specified layer. For more
/// information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-autoscaling.html">Managing
/// Load with Time-based and Load-based Instances</a>.</p>
/// <note>
/// <p>To use load-based auto scaling, you must create a set of load-based auto scaling instances. Load-based auto scaling operates only on the instances from that set, so you must ensure that you have created enough instances to handle the maximum anticipated load.</p>
/// </note>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SetLoadBasedAutoScaling {
    _private: (),
}
impl SetLoadBasedAutoScaling {
    /// Creates a new builder-style object to manufacture [`SetLoadBasedAutoScalingInput`](crate::input::SetLoadBasedAutoScalingInput)
    pub fn builder() -> crate::input::set_load_based_auto_scaling_input::Builder {
        crate::input::set_load_based_auto_scaling_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SetLoadBasedAutoScaling {
    type Output = std::result::Result<
        crate::output::SetLoadBasedAutoScalingOutput,
        crate::error::SetLoadBasedAutoScalingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_set_load_based_auto_scaling_error(response)
        } else {
            crate::operation_deser::parse_set_load_based_auto_scaling_response(response)
        }
    }
}

/// <p>Specifies a user's permissions. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingsecurity.html">Security and
/// Permissions</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SetPermission {
    _private: (),
}
impl SetPermission {
    /// Creates a new builder-style object to manufacture [`SetPermissionInput`](crate::input::SetPermissionInput)
    pub fn builder() -> crate::input::set_permission_input::Builder {
        crate::input::set_permission_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SetPermission {
    type Output =
        std::result::Result<crate::output::SetPermissionOutput, crate::error::SetPermissionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_set_permission_error(response)
        } else {
            crate::operation_deser::parse_set_permission_response(response)
        }
    }
}

/// <p>Specify the time-based auto scaling configuration for a specified instance. For more
/// information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-autoscaling.html">Managing
/// Load with Time-based and Load-based Instances</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SetTimeBasedAutoScaling {
    _private: (),
}
impl SetTimeBasedAutoScaling {
    /// Creates a new builder-style object to manufacture [`SetTimeBasedAutoScalingInput`](crate::input::SetTimeBasedAutoScalingInput)
    pub fn builder() -> crate::input::set_time_based_auto_scaling_input::Builder {
        crate::input::set_time_based_auto_scaling_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SetTimeBasedAutoScaling {
    type Output = std::result::Result<
        crate::output::SetTimeBasedAutoScalingOutput,
        crate::error::SetTimeBasedAutoScalingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_set_time_based_auto_scaling_error(response)
        } else {
            crate::operation_deser::parse_set_time_based_auto_scaling_response(response)
        }
    }
}

/// <p>Starts a specified instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-starting.html">Starting,
/// Stopping, and Rebooting Instances</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartInstance {
    _private: (),
}
impl StartInstance {
    /// Creates a new builder-style object to manufacture [`StartInstanceInput`](crate::input::StartInstanceInput)
    pub fn builder() -> crate::input::start_instance_input::Builder {
        crate::input::start_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartInstance {
    type Output =
        std::result::Result<crate::output::StartInstanceOutput, crate::error::StartInstanceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_instance_error(response)
        } else {
            crate::operation_deser::parse_start_instance_response(response)
        }
    }
}

/// <p>Starts a stack's instances.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartStack {
    _private: (),
}
impl StartStack {
    /// Creates a new builder-style object to manufacture [`StartStackInput`](crate::input::StartStackInput)
    pub fn builder() -> crate::input::start_stack_input::Builder {
        crate::input::start_stack_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartStack {
    type Output =
        std::result::Result<crate::output::StartStackOutput, crate::error::StartStackError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_stack_error(response)
        } else {
            crate::operation_deser::parse_start_stack_response(response)
        }
    }
}

/// <p>Stops a specified instance. When you stop a standard instance, the data disappears and must
/// be reinstalled when you restart the instance. You can stop an Amazon EBS-backed instance without
/// losing data. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-starting.html">Starting,
/// Stopping, and Rebooting Instances</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopInstance {
    _private: (),
}
impl StopInstance {
    /// Creates a new builder-style object to manufacture [`StopInstanceInput`](crate::input::StopInstanceInput)
    pub fn builder() -> crate::input::stop_instance_input::Builder {
        crate::input::stop_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopInstance {
    type Output =
        std::result::Result<crate::output::StopInstanceOutput, crate::error::StopInstanceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_instance_error(response)
        } else {
            crate::operation_deser::parse_stop_instance_response(response)
        }
    }
}

/// <p>Stops a specified stack.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopStack {
    _private: (),
}
impl StopStack {
    /// Creates a new builder-style object to manufacture [`StopStackInput`](crate::input::StopStackInput)
    pub fn builder() -> crate::input::stop_stack_input::Builder {
        crate::input::stop_stack_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopStack {
    type Output = std::result::Result<crate::output::StopStackOutput, crate::error::StopStackError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_stack_error(response)
        } else {
            crate::operation_deser::parse_stop_stack_response(response)
        }
    }
}

/// <p>Apply cost-allocation tags to a specified stack or layer in AWS OpsWorks Stacks. For more information about how tagging works, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/tagging.html">Tags</a> in the AWS OpsWorks User Guide.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Unassigns a registered instance from all layers that are using the instance.
/// The instance remains in the stack as an unassigned instance, and can be assigned to
/// another layer as needed. You cannot use this action with instances that were created
/// with AWS OpsWorks Stacks.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must
/// have a Manage permissions level for the stack or an attached policy that explicitly
/// grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnassignInstance {
    _private: (),
}
impl UnassignInstance {
    /// Creates a new builder-style object to manufacture [`UnassignInstanceInput`](crate::input::UnassignInstanceInput)
    pub fn builder() -> crate::input::unassign_instance_input::Builder {
        crate::input::unassign_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UnassignInstance {
    type Output = std::result::Result<
        crate::output::UnassignInstanceOutput,
        crate::error::UnassignInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_unassign_instance_error(response)
        } else {
            crate::operation_deser::parse_unassign_instance_response(response)
        }
    }
}

/// <p>Unassigns an assigned Amazon EBS volume. The volume remains registered with the stack. For more
/// information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource
/// Management</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnassignVolume {
    _private: (),
}
impl UnassignVolume {
    /// Creates a new builder-style object to manufacture [`UnassignVolumeInput`](crate::input::UnassignVolumeInput)
    pub fn builder() -> crate::input::unassign_volume_input::Builder {
        crate::input::unassign_volume_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UnassignVolume {
    type Output =
        std::result::Result<crate::output::UnassignVolumeOutput, crate::error::UnassignVolumeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_unassign_volume_error(response)
        } else {
            crate::operation_deser::parse_unassign_volume_response(response)
        }
    }
}

/// <p>Removes tags from a specified stack or layer.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates a specified app.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Deploy or Manage
/// permissions level for the stack, or an attached policy that explicitly grants permissions. For
/// more information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateApp {
    _private: (),
}
impl UpdateApp {
    /// Creates a new builder-style object to manufacture [`UpdateAppInput`](crate::input::UpdateAppInput)
    pub fn builder() -> crate::input::update_app_input::Builder {
        crate::input::update_app_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateApp {
    type Output = std::result::Result<crate::output::UpdateAppOutput, crate::error::UpdateAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_app_error(response)
        } else {
            crate::operation_deser::parse_update_app_response(response)
        }
    }
}

/// <p>Updates a registered Elastic IP address's name. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateElasticIp {
    _private: (),
}
impl UpdateElasticIp {
    /// Creates a new builder-style object to manufacture [`UpdateElasticIpInput`](crate::input::UpdateElasticIpInput)
    pub fn builder() -> crate::input::update_elastic_ip_input::Builder {
        crate::input::update_elastic_ip_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateElasticIp {
    type Output = std::result::Result<
        crate::output::UpdateElasticIpOutput,
        crate::error::UpdateElasticIpError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_elastic_ip_error(response)
        } else {
            crate::operation_deser::parse_update_elastic_ip_response(response)
        }
    }
}

/// <p>Updates a specified instance.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateInstance {
    _private: (),
}
impl UpdateInstance {
    /// Creates a new builder-style object to manufacture [`UpdateInstanceInput`](crate::input::UpdateInstanceInput)
    pub fn builder() -> crate::input::update_instance_input::Builder {
        crate::input::update_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateInstance {
    type Output =
        std::result::Result<crate::output::UpdateInstanceOutput, crate::error::UpdateInstanceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_instance_error(response)
        } else {
            crate::operation_deser::parse_update_instance_response(response)
        }
    }
}

/// <p>Updates a specified layer.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateLayer {
    _private: (),
}
impl UpdateLayer {
    /// Creates a new builder-style object to manufacture [`UpdateLayerInput`](crate::input::UpdateLayerInput)
    pub fn builder() -> crate::input::update_layer_input::Builder {
        crate::input::update_layer_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateLayer {
    type Output =
        std::result::Result<crate::output::UpdateLayerOutput, crate::error::UpdateLayerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_layer_error(response)
        } else {
            crate::operation_deser::parse_update_layer_response(response)
        }
    }
}

/// <p>Updates a user's SSH public key.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have self-management
/// enabled or an attached policy that explicitly grants permissions. For more information about user
/// permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMyUserProfile {
    _private: (),
}
impl UpdateMyUserProfile {
    /// Creates a new builder-style object to manufacture [`UpdateMyUserProfileInput`](crate::input::UpdateMyUserProfileInput)
    pub fn builder() -> crate::input::update_my_user_profile_input::Builder {
        crate::input::update_my_user_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateMyUserProfile {
    type Output = std::result::Result<
        crate::output::UpdateMyUserProfileOutput,
        crate::error::UpdateMyUserProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_my_user_profile_error(response)
        } else {
            crate::operation_deser::parse_update_my_user_profile_response(response)
        }
    }
}

/// <p>Updates an Amazon RDS instance.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRdsDbInstance {
    _private: (),
}
impl UpdateRdsDbInstance {
    /// Creates a new builder-style object to manufacture [`UpdateRdsDbInstanceInput`](crate::input::UpdateRdsDbInstanceInput)
    pub fn builder() -> crate::input::update_rds_db_instance_input::Builder {
        crate::input::update_rds_db_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateRdsDbInstance {
    type Output = std::result::Result<
        crate::output::UpdateRdsDbInstanceOutput,
        crate::error::UpdateRdsDbInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_rds_db_instance_error(response)
        } else {
            crate::operation_deser::parse_update_rds_db_instance_response(response)
        }
    }
}

/// <p>Updates a specified stack.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateStack {
    _private: (),
}
impl UpdateStack {
    /// Creates a new builder-style object to manufacture [`UpdateStackInput`](crate::input::UpdateStackInput)
    pub fn builder() -> crate::input::update_stack_input::Builder {
        crate::input::update_stack_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateStack {
    type Output =
        std::result::Result<crate::output::UpdateStackOutput, crate::error::UpdateStackError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_stack_error(response)
        } else {
            crate::operation_deser::parse_update_stack_response(response)
        }
    }
}

/// <p>Updates a specified user profile.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have an attached policy
/// that explicitly grants permissions. For more information about user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateUserProfile {
    _private: (),
}
impl UpdateUserProfile {
    /// Creates a new builder-style object to manufacture [`UpdateUserProfileInput`](crate::input::UpdateUserProfileInput)
    pub fn builder() -> crate::input::update_user_profile_input::Builder {
        crate::input::update_user_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateUserProfile {
    type Output = std::result::Result<
        crate::output::UpdateUserProfileOutput,
        crate::error::UpdateUserProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_user_profile_error(response)
        } else {
            crate::operation_deser::parse_update_user_profile_response(response)
        }
    }
}

/// <p>Updates an Amazon EBS volume's name or mount point. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/resources.html">Resource Management</a>.</p>
/// <p>
/// <b>Required Permissions</b>: To use this action, an IAM user must have a Manage permissions
/// level for the stack, or an attached policy that explicitly grants permissions. For more
/// information on user permissions, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User
/// Permissions</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVolume {
    _private: (),
}
impl UpdateVolume {
    /// Creates a new builder-style object to manufacture [`UpdateVolumeInput`](crate::input::UpdateVolumeInput)
    pub fn builder() -> crate::input::update_volume_input::Builder {
        crate::input::update_volume_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateVolume {
    type Output =
        std::result::Result<crate::output::UpdateVolumeOutput, crate::error::UpdateVolumeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_volume_error(response)
        } else {
            crate::operation_deser::parse_update_volume_response(response)
        }
    }
}
