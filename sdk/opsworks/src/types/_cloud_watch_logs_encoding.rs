// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `CloudWatchLogsEncoding`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let cloudwatchlogsencoding = unimplemented!();
/// match cloudwatchlogsencoding {
///     CloudWatchLogsEncoding::Ascii => { /* ... */ },
///     CloudWatchLogsEncoding::Big5 => { /* ... */ },
///     CloudWatchLogsEncoding::Big5hkscs => { /* ... */ },
///     CloudWatchLogsEncoding::Cp037 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp1006 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp1026 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp1140 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp1250 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp1251 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp1252 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp1253 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp1254 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp1255 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp1256 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp1257 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp1258 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp424 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp437 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp500 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp720 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp737 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp775 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp850 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp852 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp855 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp856 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp857 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp858 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp860 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp861 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp862 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp863 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp864 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp865 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp866 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp869 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp874 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp875 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp932 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp949 => { /* ... */ },
///     CloudWatchLogsEncoding::Cp950 => { /* ... */ },
///     CloudWatchLogsEncoding::EucJis2004 => { /* ... */ },
///     CloudWatchLogsEncoding::EucJisx0213 => { /* ... */ },
///     CloudWatchLogsEncoding::EucJp => { /* ... */ },
///     CloudWatchLogsEncoding::EucKr => { /* ... */ },
///     CloudWatchLogsEncoding::Gb18030 => { /* ... */ },
///     CloudWatchLogsEncoding::Gb2312 => { /* ... */ },
///     CloudWatchLogsEncoding::Gbk => { /* ... */ },
///     CloudWatchLogsEncoding::Hz => { /* ... */ },
///     CloudWatchLogsEncoding::Iso2022Jp => { /* ... */ },
///     CloudWatchLogsEncoding::Iso2022Jp1 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso2022Jp2 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso2022Jp2004 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso2022Jp3 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso2022JpExt => { /* ... */ },
///     CloudWatchLogsEncoding::Iso2022Kr => { /* ... */ },
///     CloudWatchLogsEncoding::Iso885910 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso885913 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso885914 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso885915 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso885916 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso88592 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso88593 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso88594 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso88595 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso88596 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso88597 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso88598 => { /* ... */ },
///     CloudWatchLogsEncoding::Iso88599 => { /* ... */ },
///     CloudWatchLogsEncoding::Johab => { /* ... */ },
///     CloudWatchLogsEncoding::Koi8R => { /* ... */ },
///     CloudWatchLogsEncoding::Koi8U => { /* ... */ },
///     CloudWatchLogsEncoding::Latin1 => { /* ... */ },
///     CloudWatchLogsEncoding::MacCyrillic => { /* ... */ },
///     CloudWatchLogsEncoding::MacGreek => { /* ... */ },
///     CloudWatchLogsEncoding::MacIceland => { /* ... */ },
///     CloudWatchLogsEncoding::MacLatin2 => { /* ... */ },
///     CloudWatchLogsEncoding::MacRoman => { /* ... */ },
///     CloudWatchLogsEncoding::MacTurkish => { /* ... */ },
///     CloudWatchLogsEncoding::Ptcp154 => { /* ... */ },
///     CloudWatchLogsEncoding::ShiftJis => { /* ... */ },
///     CloudWatchLogsEncoding::ShiftJis2004 => { /* ... */ },
///     CloudWatchLogsEncoding::ShiftJisx0213 => { /* ... */ },
///     CloudWatchLogsEncoding::Utf16 => { /* ... */ },
///     CloudWatchLogsEncoding::Utf16Be => { /* ... */ },
///     CloudWatchLogsEncoding::Utf16Le => { /* ... */ },
///     CloudWatchLogsEncoding::Utf32 => { /* ... */ },
///     CloudWatchLogsEncoding::Utf32Be => { /* ... */ },
///     CloudWatchLogsEncoding::Utf32Le => { /* ... */ },
///     CloudWatchLogsEncoding::Utf7 => { /* ... */ },
///     CloudWatchLogsEncoding::Utf8 => { /* ... */ },
///     CloudWatchLogsEncoding::Utf8Sig => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `cloudwatchlogsencoding` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `CloudWatchLogsEncoding::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `CloudWatchLogsEncoding::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `CloudWatchLogsEncoding::NewFeature` is defined.
/// Specifically, when `cloudwatchlogsencoding` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `CloudWatchLogsEncoding::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// <p>Specifies the encoding of the log file so that the file can be read correctly. The default is <code>utf_8</code>. Encodings supported by Python <code>codecs.decode()</code> can be used here.</p>
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CloudWatchLogsEncoding {
    #[allow(missing_docs)] // documentation missing in model
    Ascii,
    #[allow(missing_docs)] // documentation missing in model
    Big5,
    #[allow(missing_docs)] // documentation missing in model
    Big5hkscs,
    #[allow(missing_docs)] // documentation missing in model
    Cp037,
    #[allow(missing_docs)] // documentation missing in model
    Cp1006,
    #[allow(missing_docs)] // documentation missing in model
    Cp1026,
    #[allow(missing_docs)] // documentation missing in model
    Cp1140,
    #[allow(missing_docs)] // documentation missing in model
    Cp1250,
    #[allow(missing_docs)] // documentation missing in model
    Cp1251,
    #[allow(missing_docs)] // documentation missing in model
    Cp1252,
    #[allow(missing_docs)] // documentation missing in model
    Cp1253,
    #[allow(missing_docs)] // documentation missing in model
    Cp1254,
    #[allow(missing_docs)] // documentation missing in model
    Cp1255,
    #[allow(missing_docs)] // documentation missing in model
    Cp1256,
    #[allow(missing_docs)] // documentation missing in model
    Cp1257,
    #[allow(missing_docs)] // documentation missing in model
    Cp1258,
    #[allow(missing_docs)] // documentation missing in model
    Cp424,
    #[allow(missing_docs)] // documentation missing in model
    Cp437,
    #[allow(missing_docs)] // documentation missing in model
    Cp500,
    #[allow(missing_docs)] // documentation missing in model
    Cp720,
    #[allow(missing_docs)] // documentation missing in model
    Cp737,
    #[allow(missing_docs)] // documentation missing in model
    Cp775,
    #[allow(missing_docs)] // documentation missing in model
    Cp850,
    #[allow(missing_docs)] // documentation missing in model
    Cp852,
    #[allow(missing_docs)] // documentation missing in model
    Cp855,
    #[allow(missing_docs)] // documentation missing in model
    Cp856,
    #[allow(missing_docs)] // documentation missing in model
    Cp857,
    #[allow(missing_docs)] // documentation missing in model
    Cp858,
    #[allow(missing_docs)] // documentation missing in model
    Cp860,
    #[allow(missing_docs)] // documentation missing in model
    Cp861,
    #[allow(missing_docs)] // documentation missing in model
    Cp862,
    #[allow(missing_docs)] // documentation missing in model
    Cp863,
    #[allow(missing_docs)] // documentation missing in model
    Cp864,
    #[allow(missing_docs)] // documentation missing in model
    Cp865,
    #[allow(missing_docs)] // documentation missing in model
    Cp866,
    #[allow(missing_docs)] // documentation missing in model
    Cp869,
    #[allow(missing_docs)] // documentation missing in model
    Cp874,
    #[allow(missing_docs)] // documentation missing in model
    Cp875,
    #[allow(missing_docs)] // documentation missing in model
    Cp932,
    #[allow(missing_docs)] // documentation missing in model
    Cp949,
    #[allow(missing_docs)] // documentation missing in model
    Cp950,
    #[allow(missing_docs)] // documentation missing in model
    EucJis2004,
    #[allow(missing_docs)] // documentation missing in model
    EucJisx0213,
    #[allow(missing_docs)] // documentation missing in model
    EucJp,
    #[allow(missing_docs)] // documentation missing in model
    EucKr,
    #[allow(missing_docs)] // documentation missing in model
    Gb18030,
    #[allow(missing_docs)] // documentation missing in model
    Gb2312,
    #[allow(missing_docs)] // documentation missing in model
    Gbk,
    #[allow(missing_docs)] // documentation missing in model
    Hz,
    #[allow(missing_docs)] // documentation missing in model
    Iso2022Jp,
    #[allow(missing_docs)] // documentation missing in model
    Iso2022Jp1,
    #[allow(missing_docs)] // documentation missing in model
    Iso2022Jp2,
    #[allow(missing_docs)] // documentation missing in model
    Iso2022Jp2004,
    #[allow(missing_docs)] // documentation missing in model
    Iso2022Jp3,
    #[allow(missing_docs)] // documentation missing in model
    Iso2022JpExt,
    #[allow(missing_docs)] // documentation missing in model
    Iso2022Kr,
    #[allow(missing_docs)] // documentation missing in model
    Iso885910,
    #[allow(missing_docs)] // documentation missing in model
    Iso885913,
    #[allow(missing_docs)] // documentation missing in model
    Iso885914,
    #[allow(missing_docs)] // documentation missing in model
    Iso885915,
    #[allow(missing_docs)] // documentation missing in model
    Iso885916,
    #[allow(missing_docs)] // documentation missing in model
    Iso88592,
    #[allow(missing_docs)] // documentation missing in model
    Iso88593,
    #[allow(missing_docs)] // documentation missing in model
    Iso88594,
    #[allow(missing_docs)] // documentation missing in model
    Iso88595,
    #[allow(missing_docs)] // documentation missing in model
    Iso88596,
    #[allow(missing_docs)] // documentation missing in model
    Iso88597,
    #[allow(missing_docs)] // documentation missing in model
    Iso88598,
    #[allow(missing_docs)] // documentation missing in model
    Iso88599,
    #[allow(missing_docs)] // documentation missing in model
    Johab,
    #[allow(missing_docs)] // documentation missing in model
    Koi8R,
    #[allow(missing_docs)] // documentation missing in model
    Koi8U,
    #[allow(missing_docs)] // documentation missing in model
    Latin1,
    #[allow(missing_docs)] // documentation missing in model
    MacCyrillic,
    #[allow(missing_docs)] // documentation missing in model
    MacGreek,
    #[allow(missing_docs)] // documentation missing in model
    MacIceland,
    #[allow(missing_docs)] // documentation missing in model
    MacLatin2,
    #[allow(missing_docs)] // documentation missing in model
    MacRoman,
    #[allow(missing_docs)] // documentation missing in model
    MacTurkish,
    #[allow(missing_docs)] // documentation missing in model
    Ptcp154,
    #[allow(missing_docs)] // documentation missing in model
    ShiftJis,
    #[allow(missing_docs)] // documentation missing in model
    ShiftJis2004,
    #[allow(missing_docs)] // documentation missing in model
    ShiftJisx0213,
    #[allow(missing_docs)] // documentation missing in model
    Utf16,
    #[allow(missing_docs)] // documentation missing in model
    Utf16Be,
    #[allow(missing_docs)] // documentation missing in model
    Utf16Le,
    #[allow(missing_docs)] // documentation missing in model
    Utf32,
    #[allow(missing_docs)] // documentation missing in model
    Utf32Be,
    #[allow(missing_docs)] // documentation missing in model
    Utf32Le,
    #[allow(missing_docs)] // documentation missing in model
    Utf7,
    #[allow(missing_docs)] // documentation missing in model
    Utf8,
    #[allow(missing_docs)] // documentation missing in model
    Utf8Sig,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for CloudWatchLogsEncoding {
    fn from(s: &str) -> Self {
        match s {
            "ascii" => CloudWatchLogsEncoding::Ascii,
            "big5" => CloudWatchLogsEncoding::Big5,
            "big5hkscs" => CloudWatchLogsEncoding::Big5hkscs,
            "cp037" => CloudWatchLogsEncoding::Cp037,
            "cp1006" => CloudWatchLogsEncoding::Cp1006,
            "cp1026" => CloudWatchLogsEncoding::Cp1026,
            "cp1140" => CloudWatchLogsEncoding::Cp1140,
            "cp1250" => CloudWatchLogsEncoding::Cp1250,
            "cp1251" => CloudWatchLogsEncoding::Cp1251,
            "cp1252" => CloudWatchLogsEncoding::Cp1252,
            "cp1253" => CloudWatchLogsEncoding::Cp1253,
            "cp1254" => CloudWatchLogsEncoding::Cp1254,
            "cp1255" => CloudWatchLogsEncoding::Cp1255,
            "cp1256" => CloudWatchLogsEncoding::Cp1256,
            "cp1257" => CloudWatchLogsEncoding::Cp1257,
            "cp1258" => CloudWatchLogsEncoding::Cp1258,
            "cp424" => CloudWatchLogsEncoding::Cp424,
            "cp437" => CloudWatchLogsEncoding::Cp437,
            "cp500" => CloudWatchLogsEncoding::Cp500,
            "cp720" => CloudWatchLogsEncoding::Cp720,
            "cp737" => CloudWatchLogsEncoding::Cp737,
            "cp775" => CloudWatchLogsEncoding::Cp775,
            "cp850" => CloudWatchLogsEncoding::Cp850,
            "cp852" => CloudWatchLogsEncoding::Cp852,
            "cp855" => CloudWatchLogsEncoding::Cp855,
            "cp856" => CloudWatchLogsEncoding::Cp856,
            "cp857" => CloudWatchLogsEncoding::Cp857,
            "cp858" => CloudWatchLogsEncoding::Cp858,
            "cp860" => CloudWatchLogsEncoding::Cp860,
            "cp861" => CloudWatchLogsEncoding::Cp861,
            "cp862" => CloudWatchLogsEncoding::Cp862,
            "cp863" => CloudWatchLogsEncoding::Cp863,
            "cp864" => CloudWatchLogsEncoding::Cp864,
            "cp865" => CloudWatchLogsEncoding::Cp865,
            "cp866" => CloudWatchLogsEncoding::Cp866,
            "cp869" => CloudWatchLogsEncoding::Cp869,
            "cp874" => CloudWatchLogsEncoding::Cp874,
            "cp875" => CloudWatchLogsEncoding::Cp875,
            "cp932" => CloudWatchLogsEncoding::Cp932,
            "cp949" => CloudWatchLogsEncoding::Cp949,
            "cp950" => CloudWatchLogsEncoding::Cp950,
            "euc_jis_2004" => CloudWatchLogsEncoding::EucJis2004,
            "euc_jisx0213" => CloudWatchLogsEncoding::EucJisx0213,
            "euc_jp" => CloudWatchLogsEncoding::EucJp,
            "euc_kr" => CloudWatchLogsEncoding::EucKr,
            "gb18030" => CloudWatchLogsEncoding::Gb18030,
            "gb2312" => CloudWatchLogsEncoding::Gb2312,
            "gbk" => CloudWatchLogsEncoding::Gbk,
            "hz" => CloudWatchLogsEncoding::Hz,
            "iso2022_jp" => CloudWatchLogsEncoding::Iso2022Jp,
            "iso2022_jp_1" => CloudWatchLogsEncoding::Iso2022Jp1,
            "iso2022_jp_2" => CloudWatchLogsEncoding::Iso2022Jp2,
            "iso2022_jp_2004" => CloudWatchLogsEncoding::Iso2022Jp2004,
            "iso2022_jp_3" => CloudWatchLogsEncoding::Iso2022Jp3,
            "iso2022_jp_ext" => CloudWatchLogsEncoding::Iso2022JpExt,
            "iso2022_kr" => CloudWatchLogsEncoding::Iso2022Kr,
            "iso8859_10" => CloudWatchLogsEncoding::Iso885910,
            "iso8859_13" => CloudWatchLogsEncoding::Iso885913,
            "iso8859_14" => CloudWatchLogsEncoding::Iso885914,
            "iso8859_15" => CloudWatchLogsEncoding::Iso885915,
            "iso8859_16" => CloudWatchLogsEncoding::Iso885916,
            "iso8859_2" => CloudWatchLogsEncoding::Iso88592,
            "iso8859_3" => CloudWatchLogsEncoding::Iso88593,
            "iso8859_4" => CloudWatchLogsEncoding::Iso88594,
            "iso8859_5" => CloudWatchLogsEncoding::Iso88595,
            "iso8859_6" => CloudWatchLogsEncoding::Iso88596,
            "iso8859_7" => CloudWatchLogsEncoding::Iso88597,
            "iso8859_8" => CloudWatchLogsEncoding::Iso88598,
            "iso8859_9" => CloudWatchLogsEncoding::Iso88599,
            "johab" => CloudWatchLogsEncoding::Johab,
            "koi8_r" => CloudWatchLogsEncoding::Koi8R,
            "koi8_u" => CloudWatchLogsEncoding::Koi8U,
            "latin_1" => CloudWatchLogsEncoding::Latin1,
            "mac_cyrillic" => CloudWatchLogsEncoding::MacCyrillic,
            "mac_greek" => CloudWatchLogsEncoding::MacGreek,
            "mac_iceland" => CloudWatchLogsEncoding::MacIceland,
            "mac_latin2" => CloudWatchLogsEncoding::MacLatin2,
            "mac_roman" => CloudWatchLogsEncoding::MacRoman,
            "mac_turkish" => CloudWatchLogsEncoding::MacTurkish,
            "ptcp154" => CloudWatchLogsEncoding::Ptcp154,
            "shift_jis" => CloudWatchLogsEncoding::ShiftJis,
            "shift_jis_2004" => CloudWatchLogsEncoding::ShiftJis2004,
            "shift_jisx0213" => CloudWatchLogsEncoding::ShiftJisx0213,
            "utf_16" => CloudWatchLogsEncoding::Utf16,
            "utf_16_be" => CloudWatchLogsEncoding::Utf16Be,
            "utf_16_le" => CloudWatchLogsEncoding::Utf16Le,
            "utf_32" => CloudWatchLogsEncoding::Utf32,
            "utf_32_be" => CloudWatchLogsEncoding::Utf32Be,
            "utf_32_le" => CloudWatchLogsEncoding::Utf32Le,
            "utf_7" => CloudWatchLogsEncoding::Utf7,
            "utf_8" => CloudWatchLogsEncoding::Utf8,
            "utf_8_sig" => CloudWatchLogsEncoding::Utf8Sig,
            other => CloudWatchLogsEncoding::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for CloudWatchLogsEncoding {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CloudWatchLogsEncoding::from(s))
    }
}
impl CloudWatchLogsEncoding {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            CloudWatchLogsEncoding::Ascii => "ascii",
            CloudWatchLogsEncoding::Big5 => "big5",
            CloudWatchLogsEncoding::Big5hkscs => "big5hkscs",
            CloudWatchLogsEncoding::Cp037 => "cp037",
            CloudWatchLogsEncoding::Cp1006 => "cp1006",
            CloudWatchLogsEncoding::Cp1026 => "cp1026",
            CloudWatchLogsEncoding::Cp1140 => "cp1140",
            CloudWatchLogsEncoding::Cp1250 => "cp1250",
            CloudWatchLogsEncoding::Cp1251 => "cp1251",
            CloudWatchLogsEncoding::Cp1252 => "cp1252",
            CloudWatchLogsEncoding::Cp1253 => "cp1253",
            CloudWatchLogsEncoding::Cp1254 => "cp1254",
            CloudWatchLogsEncoding::Cp1255 => "cp1255",
            CloudWatchLogsEncoding::Cp1256 => "cp1256",
            CloudWatchLogsEncoding::Cp1257 => "cp1257",
            CloudWatchLogsEncoding::Cp1258 => "cp1258",
            CloudWatchLogsEncoding::Cp424 => "cp424",
            CloudWatchLogsEncoding::Cp437 => "cp437",
            CloudWatchLogsEncoding::Cp500 => "cp500",
            CloudWatchLogsEncoding::Cp720 => "cp720",
            CloudWatchLogsEncoding::Cp737 => "cp737",
            CloudWatchLogsEncoding::Cp775 => "cp775",
            CloudWatchLogsEncoding::Cp850 => "cp850",
            CloudWatchLogsEncoding::Cp852 => "cp852",
            CloudWatchLogsEncoding::Cp855 => "cp855",
            CloudWatchLogsEncoding::Cp856 => "cp856",
            CloudWatchLogsEncoding::Cp857 => "cp857",
            CloudWatchLogsEncoding::Cp858 => "cp858",
            CloudWatchLogsEncoding::Cp860 => "cp860",
            CloudWatchLogsEncoding::Cp861 => "cp861",
            CloudWatchLogsEncoding::Cp862 => "cp862",
            CloudWatchLogsEncoding::Cp863 => "cp863",
            CloudWatchLogsEncoding::Cp864 => "cp864",
            CloudWatchLogsEncoding::Cp865 => "cp865",
            CloudWatchLogsEncoding::Cp866 => "cp866",
            CloudWatchLogsEncoding::Cp869 => "cp869",
            CloudWatchLogsEncoding::Cp874 => "cp874",
            CloudWatchLogsEncoding::Cp875 => "cp875",
            CloudWatchLogsEncoding::Cp932 => "cp932",
            CloudWatchLogsEncoding::Cp949 => "cp949",
            CloudWatchLogsEncoding::Cp950 => "cp950",
            CloudWatchLogsEncoding::EucJis2004 => "euc_jis_2004",
            CloudWatchLogsEncoding::EucJisx0213 => "euc_jisx0213",
            CloudWatchLogsEncoding::EucJp => "euc_jp",
            CloudWatchLogsEncoding::EucKr => "euc_kr",
            CloudWatchLogsEncoding::Gb18030 => "gb18030",
            CloudWatchLogsEncoding::Gb2312 => "gb2312",
            CloudWatchLogsEncoding::Gbk => "gbk",
            CloudWatchLogsEncoding::Hz => "hz",
            CloudWatchLogsEncoding::Iso2022Jp => "iso2022_jp",
            CloudWatchLogsEncoding::Iso2022Jp1 => "iso2022_jp_1",
            CloudWatchLogsEncoding::Iso2022Jp2 => "iso2022_jp_2",
            CloudWatchLogsEncoding::Iso2022Jp2004 => "iso2022_jp_2004",
            CloudWatchLogsEncoding::Iso2022Jp3 => "iso2022_jp_3",
            CloudWatchLogsEncoding::Iso2022JpExt => "iso2022_jp_ext",
            CloudWatchLogsEncoding::Iso2022Kr => "iso2022_kr",
            CloudWatchLogsEncoding::Iso885910 => "iso8859_10",
            CloudWatchLogsEncoding::Iso885913 => "iso8859_13",
            CloudWatchLogsEncoding::Iso885914 => "iso8859_14",
            CloudWatchLogsEncoding::Iso885915 => "iso8859_15",
            CloudWatchLogsEncoding::Iso885916 => "iso8859_16",
            CloudWatchLogsEncoding::Iso88592 => "iso8859_2",
            CloudWatchLogsEncoding::Iso88593 => "iso8859_3",
            CloudWatchLogsEncoding::Iso88594 => "iso8859_4",
            CloudWatchLogsEncoding::Iso88595 => "iso8859_5",
            CloudWatchLogsEncoding::Iso88596 => "iso8859_6",
            CloudWatchLogsEncoding::Iso88597 => "iso8859_7",
            CloudWatchLogsEncoding::Iso88598 => "iso8859_8",
            CloudWatchLogsEncoding::Iso88599 => "iso8859_9",
            CloudWatchLogsEncoding::Johab => "johab",
            CloudWatchLogsEncoding::Koi8R => "koi8_r",
            CloudWatchLogsEncoding::Koi8U => "koi8_u",
            CloudWatchLogsEncoding::Latin1 => "latin_1",
            CloudWatchLogsEncoding::MacCyrillic => "mac_cyrillic",
            CloudWatchLogsEncoding::MacGreek => "mac_greek",
            CloudWatchLogsEncoding::MacIceland => "mac_iceland",
            CloudWatchLogsEncoding::MacLatin2 => "mac_latin2",
            CloudWatchLogsEncoding::MacRoman => "mac_roman",
            CloudWatchLogsEncoding::MacTurkish => "mac_turkish",
            CloudWatchLogsEncoding::Ptcp154 => "ptcp154",
            CloudWatchLogsEncoding::ShiftJis => "shift_jis",
            CloudWatchLogsEncoding::ShiftJis2004 => "shift_jis_2004",
            CloudWatchLogsEncoding::ShiftJisx0213 => "shift_jisx0213",
            CloudWatchLogsEncoding::Utf16 => "utf_16",
            CloudWatchLogsEncoding::Utf16Be => "utf_16_be",
            CloudWatchLogsEncoding::Utf16Le => "utf_16_le",
            CloudWatchLogsEncoding::Utf32 => "utf_32",
            CloudWatchLogsEncoding::Utf32Be => "utf_32_be",
            CloudWatchLogsEncoding::Utf32Le => "utf_32_le",
            CloudWatchLogsEncoding::Utf7 => "utf_7",
            CloudWatchLogsEncoding::Utf8 => "utf_8",
            CloudWatchLogsEncoding::Utf8Sig => "utf_8_sig",
            CloudWatchLogsEncoding::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ascii",
            "big5",
            "big5hkscs",
            "cp037",
            "cp1006",
            "cp1026",
            "cp1140",
            "cp1250",
            "cp1251",
            "cp1252",
            "cp1253",
            "cp1254",
            "cp1255",
            "cp1256",
            "cp1257",
            "cp1258",
            "cp424",
            "cp437",
            "cp500",
            "cp720",
            "cp737",
            "cp775",
            "cp850",
            "cp852",
            "cp855",
            "cp856",
            "cp857",
            "cp858",
            "cp860",
            "cp861",
            "cp862",
            "cp863",
            "cp864",
            "cp865",
            "cp866",
            "cp869",
            "cp874",
            "cp875",
            "cp932",
            "cp949",
            "cp950",
            "euc_jis_2004",
            "euc_jisx0213",
            "euc_jp",
            "euc_kr",
            "gb18030",
            "gb2312",
            "gbk",
            "hz",
            "iso2022_jp",
            "iso2022_jp_1",
            "iso2022_jp_2",
            "iso2022_jp_2004",
            "iso2022_jp_3",
            "iso2022_jp_ext",
            "iso2022_kr",
            "iso8859_10",
            "iso8859_13",
            "iso8859_14",
            "iso8859_15",
            "iso8859_16",
            "iso8859_2",
            "iso8859_3",
            "iso8859_4",
            "iso8859_5",
            "iso8859_6",
            "iso8859_7",
            "iso8859_8",
            "iso8859_9",
            "johab",
            "koi8_r",
            "koi8_u",
            "latin_1",
            "mac_cyrillic",
            "mac_greek",
            "mac_iceland",
            "mac_latin2",
            "mac_roman",
            "mac_turkish",
            "ptcp154",
            "shift_jis",
            "shift_jis_2004",
            "shift_jisx0213",
            "utf_16",
            "utf_16_be",
            "utf_16_le",
            "utf_32",
            "utf_32_be",
            "utf_32_le",
            "utf_7",
            "utf_8",
            "utf_8_sig",
        ]
    }
}
impl AsRef<str> for CloudWatchLogsEncoding {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
