// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration manager.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StackConfigurationManager {
    /// <p>The name. This parameter must be set to "Chef".</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Chef version. This parameter must be set to 12, 11.10, or 11.4 for Linux stacks, and to 12.2 for Windows stacks. The default value for Linux stacks is 11.4.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl StackConfigurationManager {
    /// <p>The name. This parameter must be set to "Chef".</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Chef version. This parameter must be set to 12, 11.10, or 11.4 for Linux stacks, and to 12.2 for Windows stacks. The default value for Linux stacks is 11.4.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl StackConfigurationManager {
    /// Creates a new builder-style object to manufacture [`StackConfigurationManager`](crate::types::StackConfigurationManager).
    pub fn builder() -> crate::types::builders::StackConfigurationManagerBuilder {
        crate::types::builders::StackConfigurationManagerBuilder::default()
    }
}

/// A builder for [`StackConfigurationManager`](crate::types::StackConfigurationManager).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StackConfigurationManagerBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
}
impl StackConfigurationManagerBuilder {
    /// <p>The name. This parameter must be set to "Chef".</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name. This parameter must be set to "Chef".</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Chef version. This parameter must be set to 12, 11.10, or 11.4 for Linux stacks, and to 12.2 for Windows stacks. The default value for Linux stacks is 11.4.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The Chef version. This parameter must be set to 12, 11.10, or 11.4 for Linux stacks, and to 12.2 for Windows stacks. The default value for Linux stacks is 11.4.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`StackConfigurationManager`](crate::types::StackConfigurationManager).
    pub fn build(self) -> crate::types::StackConfigurationManager {
        crate::types::StackConfigurationManager {
            name: self.name,
            version: self.version,
        }
    }
}
