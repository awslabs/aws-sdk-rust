// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an app's SSL configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SslConfiguration {
    /// <p>The contents of the certificate's domain.crt file.</p>
    #[doc(hidden)]
    pub certificate: std::option::Option<std::string::String>,
    /// <p>The private key; the contents of the certificate's domain.kex file.</p>
    #[doc(hidden)]
    pub private_key: std::option::Option<std::string::String>,
    /// <p>Optional. Can be used to specify an intermediate certificate authority key or client authentication.</p>
    #[doc(hidden)]
    pub chain: std::option::Option<std::string::String>,
}
impl SslConfiguration {
    /// <p>The contents of the certificate's domain.crt file.</p>
    pub fn certificate(&self) -> std::option::Option<&str> {
        self.certificate.as_deref()
    }
    /// <p>The private key; the contents of the certificate's domain.kex file.</p>
    pub fn private_key(&self) -> std::option::Option<&str> {
        self.private_key.as_deref()
    }
    /// <p>Optional. Can be used to specify an intermediate certificate authority key or client authentication.</p>
    pub fn chain(&self) -> std::option::Option<&str> {
        self.chain.as_deref()
    }
}
impl SslConfiguration {
    /// Creates a new builder-style object to manufacture [`SslConfiguration`](crate::types::SslConfiguration).
    pub fn builder() -> crate::types::builders::SslConfigurationBuilder {
        crate::types::builders::SslConfigurationBuilder::default()
    }
}

/// A builder for [`SslConfiguration`](crate::types::SslConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SslConfigurationBuilder {
    pub(crate) certificate: std::option::Option<std::string::String>,
    pub(crate) private_key: std::option::Option<std::string::String>,
    pub(crate) chain: std::option::Option<std::string::String>,
}
impl SslConfigurationBuilder {
    /// <p>The contents of the certificate's domain.crt file.</p>
    pub fn certificate(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate = Some(input.into());
        self
    }
    /// <p>The contents of the certificate's domain.crt file.</p>
    pub fn set_certificate(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate = input;
        self
    }
    /// <p>The private key; the contents of the certificate's domain.kex file.</p>
    pub fn private_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_key = Some(input.into());
        self
    }
    /// <p>The private key; the contents of the certificate's domain.kex file.</p>
    pub fn set_private_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.private_key = input;
        self
    }
    /// <p>Optional. Can be used to specify an intermediate certificate authority key or client authentication.</p>
    pub fn chain(mut self, input: impl Into<std::string::String>) -> Self {
        self.chain = Some(input.into());
        self
    }
    /// <p>Optional. Can be used to specify an intermediate certificate authority key or client authentication.</p>
    pub fn set_chain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.chain = input;
        self
    }
    /// Consumes the builder and constructs a [`SslConfiguration`](crate::types::SslConfiguration).
    pub fn build(self) -> crate::types::SslConfiguration {
        crate::types::SslConfiguration {
            certificate: self.certificate,
            private_key: self.private_key,
            chain: self.chain,
        }
    }
}
