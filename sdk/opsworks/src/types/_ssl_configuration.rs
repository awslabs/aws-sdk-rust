// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an app's SSL configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SslConfiguration {
    /// <p>The contents of the certificate's domain.crt file.</p>
    pub certificate: ::std::string::String,
    /// <p>The private key; the contents of the certificate's domain.kex file.</p>
    pub private_key: ::std::string::String,
    /// <p>Optional. Can be used to specify an intermediate certificate authority key or client authentication.</p>
    pub chain: ::std::option::Option<::std::string::String>,
}
impl SslConfiguration {
    /// <p>The contents of the certificate's domain.crt file.</p>
    pub fn certificate(&self) -> &str {
        use std::ops::Deref;
        self.certificate.deref()
    }
    /// <p>The private key; the contents of the certificate's domain.kex file.</p>
    pub fn private_key(&self) -> &str {
        use std::ops::Deref;
        self.private_key.deref()
    }
    /// <p>Optional. Can be used to specify an intermediate certificate authority key or client authentication.</p>
    pub fn chain(&self) -> ::std::option::Option<&str> {
        self.chain.as_deref()
    }
}
impl SslConfiguration {
    /// Creates a new builder-style object to manufacture [`SslConfiguration`](crate::types::SslConfiguration).
    pub fn builder() -> crate::types::builders::SslConfigurationBuilder {
        crate::types::builders::SslConfigurationBuilder::default()
    }
}

/// A builder for [`SslConfiguration`](crate::types::SslConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SslConfigurationBuilder {
    pub(crate) certificate: ::std::option::Option<::std::string::String>,
    pub(crate) private_key: ::std::option::Option<::std::string::String>,
    pub(crate) chain: ::std::option::Option<::std::string::String>,
}
impl SslConfigurationBuilder {
    /// <p>The contents of the certificate's domain.crt file.</p>
    /// This field is required.
    pub fn certificate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contents of the certificate's domain.crt file.</p>
    pub fn set_certificate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate = input;
        self
    }
    /// <p>The contents of the certificate's domain.crt file.</p>
    pub fn get_certificate(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate
    }
    /// <p>The private key; the contents of the certificate's domain.kex file.</p>
    /// This field is required.
    pub fn private_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.private_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The private key; the contents of the certificate's domain.kex file.</p>
    pub fn set_private_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.private_key = input;
        self
    }
    /// <p>The private key; the contents of the certificate's domain.kex file.</p>
    pub fn get_private_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.private_key
    }
    /// <p>Optional. Can be used to specify an intermediate certificate authority key or client authentication.</p>
    pub fn chain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.chain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional. Can be used to specify an intermediate certificate authority key or client authentication.</p>
    pub fn set_chain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.chain = input;
        self
    }
    /// <p>Optional. Can be used to specify an intermediate certificate authority key or client authentication.</p>
    pub fn get_chain(&self) -> &::std::option::Option<::std::string::String> {
        &self.chain
    }
    /// Consumes the builder and constructs a [`SslConfiguration`](crate::types::SslConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`certificate`](crate::types::builders::SslConfigurationBuilder::certificate)
    /// - [`private_key`](crate::types::builders::SslConfigurationBuilder::private_key)
    pub fn build(self) -> ::std::result::Result<crate::types::SslConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SslConfiguration {
            certificate: self.certificate.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "certificate",
                    "certificate was not specified but it is required when building SslConfiguration",
                )
            })?,
            private_key: self.private_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "private_key",
                    "private_key was not specified but it is required when building SslConfiguration",
                )
            })?,
            chain: self.chain,
        })
    }
}
