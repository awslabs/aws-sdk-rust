// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an instance's RAID array.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RaidArray {
    /// <p>The array ID.</p>
    #[doc(hidden)]
    pub raid_array_id: std::option::Option<std::string::String>,
    /// <p>The instance ID.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The array name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The <a href="http://en.wikipedia.org/wiki/Standard_RAID_levels">RAID level</a>.</p>
    #[doc(hidden)]
    pub raid_level: std::option::Option<i32>,
    /// <p>The number of disks in the array.</p>
    #[doc(hidden)]
    pub number_of_disks: std::option::Option<i32>,
    /// <p>The array's size.</p>
    #[doc(hidden)]
    pub size: std::option::Option<i32>,
    /// <p>The array's Linux device. For example /dev/mdadm0.</p>
    #[doc(hidden)]
    pub device: std::option::Option<std::string::String>,
    /// <p>The array's mount point.</p>
    #[doc(hidden)]
    pub mount_point: std::option::Option<std::string::String>,
    /// <p>The array's Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>When the RAID array was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<std::string::String>,
    /// <p>The stack ID.</p>
    #[doc(hidden)]
    pub stack_id: std::option::Option<std::string::String>,
    /// <p>The volume type, standard or PIOPS.</p>
    #[doc(hidden)]
    pub volume_type: std::option::Option<std::string::String>,
    /// <p>For PIOPS volumes, the IOPS per disk.</p>
    #[doc(hidden)]
    pub iops: std::option::Option<i32>,
}
impl RaidArray {
    /// <p>The array ID.</p>
    pub fn raid_array_id(&self) -> std::option::Option<&str> {
        self.raid_array_id.as_deref()
    }
    /// <p>The instance ID.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The array name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The <a href="http://en.wikipedia.org/wiki/Standard_RAID_levels">RAID level</a>.</p>
    pub fn raid_level(&self) -> std::option::Option<i32> {
        self.raid_level
    }
    /// <p>The number of disks in the array.</p>
    pub fn number_of_disks(&self) -> std::option::Option<i32> {
        self.number_of_disks
    }
    /// <p>The array's size.</p>
    pub fn size(&self) -> std::option::Option<i32> {
        self.size
    }
    /// <p>The array's Linux device. For example /dev/mdadm0.</p>
    pub fn device(&self) -> std::option::Option<&str> {
        self.device.as_deref()
    }
    /// <p>The array's mount point.</p>
    pub fn mount_point(&self) -> std::option::Option<&str> {
        self.mount_point.as_deref()
    }
    /// <p>The array's Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>When the RAID array was created.</p>
    pub fn created_at(&self) -> std::option::Option<&str> {
        self.created_at.as_deref()
    }
    /// <p>The stack ID.</p>
    pub fn stack_id(&self) -> std::option::Option<&str> {
        self.stack_id.as_deref()
    }
    /// <p>The volume type, standard or PIOPS.</p>
    pub fn volume_type(&self) -> std::option::Option<&str> {
        self.volume_type.as_deref()
    }
    /// <p>For PIOPS volumes, the IOPS per disk.</p>
    pub fn iops(&self) -> std::option::Option<i32> {
        self.iops
    }
}
impl RaidArray {
    /// Creates a new builder-style object to manufacture [`RaidArray`](crate::types::RaidArray).
    pub fn builder() -> crate::types::builders::RaidArrayBuilder {
        crate::types::builders::RaidArrayBuilder::default()
    }
}

/// A builder for [`RaidArray`](crate::types::RaidArray).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RaidArrayBuilder {
    pub(crate) raid_array_id: std::option::Option<std::string::String>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) raid_level: std::option::Option<i32>,
    pub(crate) number_of_disks: std::option::Option<i32>,
    pub(crate) size: std::option::Option<i32>,
    pub(crate) device: std::option::Option<std::string::String>,
    pub(crate) mount_point: std::option::Option<std::string::String>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<std::string::String>,
    pub(crate) stack_id: std::option::Option<std::string::String>,
    pub(crate) volume_type: std::option::Option<std::string::String>,
    pub(crate) iops: std::option::Option<i32>,
}
impl RaidArrayBuilder {
    /// <p>The array ID.</p>
    pub fn raid_array_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.raid_array_id = Some(input.into());
        self
    }
    /// <p>The array ID.</p>
    pub fn set_raid_array_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.raid_array_id = input;
        self
    }
    /// <p>The instance ID.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The instance ID.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The array name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The array name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The <a href="http://en.wikipedia.org/wiki/Standard_RAID_levels">RAID level</a>.</p>
    pub fn raid_level(mut self, input: i32) -> Self {
        self.raid_level = Some(input);
        self
    }
    /// <p>The <a href="http://en.wikipedia.org/wiki/Standard_RAID_levels">RAID level</a>.</p>
    pub fn set_raid_level(mut self, input: std::option::Option<i32>) -> Self {
        self.raid_level = input;
        self
    }
    /// <p>The number of disks in the array.</p>
    pub fn number_of_disks(mut self, input: i32) -> Self {
        self.number_of_disks = Some(input);
        self
    }
    /// <p>The number of disks in the array.</p>
    pub fn set_number_of_disks(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_disks = input;
        self
    }
    /// <p>The array's size.</p>
    pub fn size(mut self, input: i32) -> Self {
        self.size = Some(input);
        self
    }
    /// <p>The array's size.</p>
    pub fn set_size(mut self, input: std::option::Option<i32>) -> Self {
        self.size = input;
        self
    }
    /// <p>The array's Linux device. For example /dev/mdadm0.</p>
    pub fn device(mut self, input: impl Into<std::string::String>) -> Self {
        self.device = Some(input.into());
        self
    }
    /// <p>The array's Linux device. For example /dev/mdadm0.</p>
    pub fn set_device(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device = input;
        self
    }
    /// <p>The array's mount point.</p>
    pub fn mount_point(mut self, input: impl Into<std::string::String>) -> Self {
        self.mount_point = Some(input.into());
        self
    }
    /// <p>The array's mount point.</p>
    pub fn set_mount_point(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mount_point = input;
        self
    }
    /// <p>The array's Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The array's Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>When the RAID array was created.</p>
    pub fn created_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_at = Some(input.into());
        self
    }
    /// <p>When the RAID array was created.</p>
    pub fn set_created_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The stack ID.</p>
    pub fn stack_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_id = Some(input.into());
        self
    }
    /// <p>The stack ID.</p>
    pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_id = input;
        self
    }
    /// <p>The volume type, standard or PIOPS.</p>
    pub fn volume_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_type = Some(input.into());
        self
    }
    /// <p>The volume type, standard or PIOPS.</p>
    pub fn set_volume_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_type = input;
        self
    }
    /// <p>For PIOPS volumes, the IOPS per disk.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = Some(input);
        self
    }
    /// <p>For PIOPS volumes, the IOPS per disk.</p>
    pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// Consumes the builder and constructs a [`RaidArray`](crate::types::RaidArray).
    pub fn build(self) -> crate::types::RaidArray {
        crate::types::RaidArray {
            raid_array_id: self.raid_array_id,
            instance_id: self.instance_id,
            name: self.name,
            raid_level: self.raid_level,
            number_of_disks: self.number_of_disks,
            size: self.size,
            device: self.device,
            mount_point: self.mount_point,
            availability_zone: self.availability_zone,
            created_at: self.created_at,
            stack_id: self.stack_id,
            volume_type: self.volume_type,
            iops: self.iops,
        }
    }
}
