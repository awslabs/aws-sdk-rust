// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Instance {
    /// <p>The agent version. This parameter is set to <code>INHERIT</code> if the instance inherits the default stack setting or to a a version number for a fixed agent version.</p>
    #[doc(hidden)]
    pub agent_version: std::option::Option<std::string::String>,
    /// <p>A custom AMI ID to be used to create the instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-custom-ami.html">Instances</a> </p>
    #[doc(hidden)]
    pub ami_id: std::option::Option<std::string::String>,
    /// <p>The instance architecture: "i386" or "x86_64".</p>
    #[doc(hidden)]
    pub architecture: std::option::Option<crate::types::Architecture>,
    /// <p>The instance's Amazon Resource Number (ARN).</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>For load-based or time-based instances, the type.</p>
    #[doc(hidden)]
    pub auto_scaling_type: std::option::Option<crate::types::AutoScalingType>,
    /// <p>The instance Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>An array of <code>BlockDeviceMapping</code> objects that specify the instance's block device mappings.</p>
    #[doc(hidden)]
    pub block_device_mappings: std::option::Option<std::vec::Vec<crate::types::BlockDeviceMapping>>,
    /// <p>The time that the instance was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<std::string::String>,
    /// <p>Whether this is an Amazon EBS-optimized instance.</p>
    #[doc(hidden)]
    pub ebs_optimized: std::option::Option<bool>,
    /// <p>The ID of the associated Amazon EC2 instance.</p>
    #[doc(hidden)]
    pub ec2_instance_id: std::option::Option<std::string::String>,
    /// <p>For container instances, the Amazon ECS cluster's ARN.</p>
    #[doc(hidden)]
    pub ecs_cluster_arn: std::option::Option<std::string::String>,
    /// <p>For container instances, the instance's ARN.</p>
    #[doc(hidden)]
    pub ecs_container_instance_arn: std::option::Option<std::string::String>,
    /// <p>The instance <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address </a>.</p>
    #[doc(hidden)]
    pub elastic_ip: std::option::Option<std::string::String>,
    /// <p>The instance host name.</p>
    #[doc(hidden)]
    pub hostname: std::option::Option<std::string::String>,
    /// <p>For registered instances, the infrastructure class: <code>ec2</code> or <code>on-premises</code>.</p>
    #[doc(hidden)]
    pub infrastructure_class: std::option::Option<std::string::String>,
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. If this value is set to <code>false</code>, you must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>We strongly recommend using the default value of <code>true</code>, to ensure that your instances have the latest security updates.</p>
    /// </note>
    #[doc(hidden)]
    pub install_updates_on_boot: std::option::Option<bool>,
    /// <p>The instance ID.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The ARN of the instance's IAM profile. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    #[doc(hidden)]
    pub instance_profile_arn: std::option::Option<std::string::String>,
    /// <p>The instance type, such as <code>t2.micro</code>.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The ID of the last service error. For more information, call <code>DescribeServiceErrors</code>.</p>
    #[doc(hidden)]
    pub last_service_error_id: std::option::Option<std::string::String>,
    /// <p>An array containing the instance layer IDs.</p>
    #[doc(hidden)]
    pub layer_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The instance's operating system.</p>
    #[doc(hidden)]
    pub os: std::option::Option<std::string::String>,
    /// <p>The instance's platform.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<std::string::String>,
    /// <p>The instance's private DNS name.</p>
    #[doc(hidden)]
    pub private_dns: std::option::Option<std::string::String>,
    /// <p>The instance's private IP address.</p>
    #[doc(hidden)]
    pub private_ip: std::option::Option<std::string::String>,
    /// <p>The instance public DNS name.</p>
    #[doc(hidden)]
    pub public_dns: std::option::Option<std::string::String>,
    /// <p>The instance public IP address.</p>
    #[doc(hidden)]
    pub public_ip: std::option::Option<std::string::String>,
    /// <p>For registered instances, who performed the registration.</p>
    #[doc(hidden)]
    pub registered_by: std::option::Option<std::string::String>,
    /// <p>The instance's reported AWS OpsWorks Stacks agent version.</p>
    #[doc(hidden)]
    pub reported_agent_version: std::option::Option<std::string::String>,
    /// <p>For registered instances, the reported operating system.</p>
    #[doc(hidden)]
    pub reported_os: std::option::Option<crate::types::ReportedOs>,
    /// <p>The instance's root device type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
    #[doc(hidden)]
    pub root_device_type: std::option::Option<crate::types::RootDeviceType>,
    /// <p>The root device volume ID.</p>
    #[doc(hidden)]
    pub root_device_volume_id: std::option::Option<std::string::String>,
    /// <p>An array containing the instance security group IDs.</p>
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The SSH key's Deep Security Agent (DSA) fingerprint.</p>
    #[doc(hidden)]
    pub ssh_host_dsa_key_fingerprint: std::option::Option<std::string::String>,
    /// <p>The SSH key's RSA fingerprint.</p>
    #[doc(hidden)]
    pub ssh_host_rsa_key_fingerprint: std::option::Option<std::string::String>,
    /// <p>The instance's Amazon EC2 key-pair name.</p>
    #[doc(hidden)]
    pub ssh_key_name: std::option::Option<std::string::String>,
    /// <p>The stack ID.</p>
    #[doc(hidden)]
    pub stack_id: std::option::Option<std::string::String>,
    /// <p>The instance status:</p>
    /// <ul>
    /// <li> <p> <code>booting</code> </p> </li>
    /// <li> <p> <code>connection_lost</code> </p> </li>
    /// <li> <p> <code>online</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// <li> <p> <code>rebooting</code> </p> </li>
    /// <li> <p> <code>requested</code> </p> </li>
    /// <li> <p> <code>running_setup</code> </p> </li>
    /// <li> <p> <code>setup_failed</code> </p> </li>
    /// <li> <p> <code>shutting_down</code> </p> </li>
    /// <li> <p> <code>start_failed</code> </p> </li>
    /// <li> <p> <code>stop_failed</code> </p> </li>
    /// <li> <p> <code>stopped</code> </p> </li>
    /// <li> <p> <code>stopping</code> </p> </li>
    /// <li> <p> <code>terminated</code> </p> </li>
    /// <li> <p> <code>terminating</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The instance's subnet ID; applicable only if the stack is running in a VPC.</p>
    #[doc(hidden)]
    pub subnet_id: std::option::Option<std::string::String>,
    /// <p>The instance's tenancy option, such as <code>dedicated</code> or <code>host</code>.</p>
    #[doc(hidden)]
    pub tenancy: std::option::Option<std::string::String>,
    /// <p>The instance's virtualization type: <code>paravirtual</code> or <code>hvm</code>.</p>
    #[doc(hidden)]
    pub virtualization_type: std::option::Option<crate::types::VirtualizationType>,
}
impl Instance {
    /// <p>The agent version. This parameter is set to <code>INHERIT</code> if the instance inherits the default stack setting or to a a version number for a fixed agent version.</p>
    pub fn agent_version(&self) -> std::option::Option<&str> {
        self.agent_version.as_deref()
    }
    /// <p>A custom AMI ID to be used to create the instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-custom-ami.html">Instances</a> </p>
    pub fn ami_id(&self) -> std::option::Option<&str> {
        self.ami_id.as_deref()
    }
    /// <p>The instance architecture: "i386" or "x86_64".</p>
    pub fn architecture(&self) -> std::option::Option<&crate::types::Architecture> {
        self.architecture.as_ref()
    }
    /// <p>The instance's Amazon Resource Number (ARN).</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>For load-based or time-based instances, the type.</p>
    pub fn auto_scaling_type(&self) -> std::option::Option<&crate::types::AutoScalingType> {
        self.auto_scaling_type.as_ref()
    }
    /// <p>The instance Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>An array of <code>BlockDeviceMapping</code> objects that specify the instance's block device mappings.</p>
    pub fn block_device_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::BlockDeviceMapping]> {
        self.block_device_mappings.as_deref()
    }
    /// <p>The time that the instance was created.</p>
    pub fn created_at(&self) -> std::option::Option<&str> {
        self.created_at.as_deref()
    }
    /// <p>Whether this is an Amazon EBS-optimized instance.</p>
    pub fn ebs_optimized(&self) -> std::option::Option<bool> {
        self.ebs_optimized
    }
    /// <p>The ID of the associated Amazon EC2 instance.</p>
    pub fn ec2_instance_id(&self) -> std::option::Option<&str> {
        self.ec2_instance_id.as_deref()
    }
    /// <p>For container instances, the Amazon ECS cluster's ARN.</p>
    pub fn ecs_cluster_arn(&self) -> std::option::Option<&str> {
        self.ecs_cluster_arn.as_deref()
    }
    /// <p>For container instances, the instance's ARN.</p>
    pub fn ecs_container_instance_arn(&self) -> std::option::Option<&str> {
        self.ecs_container_instance_arn.as_deref()
    }
    /// <p>The instance <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address </a>.</p>
    pub fn elastic_ip(&self) -> std::option::Option<&str> {
        self.elastic_ip.as_deref()
    }
    /// <p>The instance host name.</p>
    pub fn hostname(&self) -> std::option::Option<&str> {
        self.hostname.as_deref()
    }
    /// <p>For registered instances, the infrastructure class: <code>ec2</code> or <code>on-premises</code>.</p>
    pub fn infrastructure_class(&self) -> std::option::Option<&str> {
        self.infrastructure_class.as_deref()
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. If this value is set to <code>false</code>, you must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>We strongly recommend using the default value of <code>true</code>, to ensure that your instances have the latest security updates.</p>
    /// </note>
    pub fn install_updates_on_boot(&self) -> std::option::Option<bool> {
        self.install_updates_on_boot
    }
    /// <p>The instance ID.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The ARN of the instance's IAM profile. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn instance_profile_arn(&self) -> std::option::Option<&str> {
        self.instance_profile_arn.as_deref()
    }
    /// <p>The instance type, such as <code>t2.micro</code>.</p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The ID of the last service error. For more information, call <code>DescribeServiceErrors</code>.</p>
    pub fn last_service_error_id(&self) -> std::option::Option<&str> {
        self.last_service_error_id.as_deref()
    }
    /// <p>An array containing the instance layer IDs.</p>
    pub fn layer_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.layer_ids.as_deref()
    }
    /// <p>The instance's operating system.</p>
    pub fn os(&self) -> std::option::Option<&str> {
        self.os.as_deref()
    }
    /// <p>The instance's platform.</p>
    pub fn platform(&self) -> std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>The instance's private DNS name.</p>
    pub fn private_dns(&self) -> std::option::Option<&str> {
        self.private_dns.as_deref()
    }
    /// <p>The instance's private IP address.</p>
    pub fn private_ip(&self) -> std::option::Option<&str> {
        self.private_ip.as_deref()
    }
    /// <p>The instance public DNS name.</p>
    pub fn public_dns(&self) -> std::option::Option<&str> {
        self.public_dns.as_deref()
    }
    /// <p>The instance public IP address.</p>
    pub fn public_ip(&self) -> std::option::Option<&str> {
        self.public_ip.as_deref()
    }
    /// <p>For registered instances, who performed the registration.</p>
    pub fn registered_by(&self) -> std::option::Option<&str> {
        self.registered_by.as_deref()
    }
    /// <p>The instance's reported AWS OpsWorks Stacks agent version.</p>
    pub fn reported_agent_version(&self) -> std::option::Option<&str> {
        self.reported_agent_version.as_deref()
    }
    /// <p>For registered instances, the reported operating system.</p>
    pub fn reported_os(&self) -> std::option::Option<&crate::types::ReportedOs> {
        self.reported_os.as_ref()
    }
    /// <p>The instance's root device type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
    pub fn root_device_type(&self) -> std::option::Option<&crate::types::RootDeviceType> {
        self.root_device_type.as_ref()
    }
    /// <p>The root device volume ID.</p>
    pub fn root_device_volume_id(&self) -> std::option::Option<&str> {
        self.root_device_volume_id.as_deref()
    }
    /// <p>An array containing the instance security group IDs.</p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// <p>The SSH key's Deep Security Agent (DSA) fingerprint.</p>
    pub fn ssh_host_dsa_key_fingerprint(&self) -> std::option::Option<&str> {
        self.ssh_host_dsa_key_fingerprint.as_deref()
    }
    /// <p>The SSH key's RSA fingerprint.</p>
    pub fn ssh_host_rsa_key_fingerprint(&self) -> std::option::Option<&str> {
        self.ssh_host_rsa_key_fingerprint.as_deref()
    }
    /// <p>The instance's Amazon EC2 key-pair name.</p>
    pub fn ssh_key_name(&self) -> std::option::Option<&str> {
        self.ssh_key_name.as_deref()
    }
    /// <p>The stack ID.</p>
    pub fn stack_id(&self) -> std::option::Option<&str> {
        self.stack_id.as_deref()
    }
    /// <p>The instance status:</p>
    /// <ul>
    /// <li> <p> <code>booting</code> </p> </li>
    /// <li> <p> <code>connection_lost</code> </p> </li>
    /// <li> <p> <code>online</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// <li> <p> <code>rebooting</code> </p> </li>
    /// <li> <p> <code>requested</code> </p> </li>
    /// <li> <p> <code>running_setup</code> </p> </li>
    /// <li> <p> <code>setup_failed</code> </p> </li>
    /// <li> <p> <code>shutting_down</code> </p> </li>
    /// <li> <p> <code>start_failed</code> </p> </li>
    /// <li> <p> <code>stop_failed</code> </p> </li>
    /// <li> <p> <code>stopped</code> </p> </li>
    /// <li> <p> <code>stopping</code> </p> </li>
    /// <li> <p> <code>terminated</code> </p> </li>
    /// <li> <p> <code>terminating</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The instance's subnet ID; applicable only if the stack is running in a VPC.</p>
    pub fn subnet_id(&self) -> std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The instance's tenancy option, such as <code>dedicated</code> or <code>host</code>.</p>
    pub fn tenancy(&self) -> std::option::Option<&str> {
        self.tenancy.as_deref()
    }
    /// <p>The instance's virtualization type: <code>paravirtual</code> or <code>hvm</code>.</p>
    pub fn virtualization_type(&self) -> std::option::Option<&crate::types::VirtualizationType> {
        self.virtualization_type.as_ref()
    }
}
impl Instance {
    /// Creates a new builder-style object to manufacture [`Instance`](crate::types::Instance).
    pub fn builder() -> crate::types::builders::InstanceBuilder {
        crate::types::builders::InstanceBuilder::default()
    }
}

/// A builder for [`Instance`](crate::types::Instance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceBuilder {
    pub(crate) agent_version: std::option::Option<std::string::String>,
    pub(crate) ami_id: std::option::Option<std::string::String>,
    pub(crate) architecture: std::option::Option<crate::types::Architecture>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) auto_scaling_type: std::option::Option<crate::types::AutoScalingType>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) block_device_mappings:
        std::option::Option<std::vec::Vec<crate::types::BlockDeviceMapping>>,
    pub(crate) created_at: std::option::Option<std::string::String>,
    pub(crate) ebs_optimized: std::option::Option<bool>,
    pub(crate) ec2_instance_id: std::option::Option<std::string::String>,
    pub(crate) ecs_cluster_arn: std::option::Option<std::string::String>,
    pub(crate) ecs_container_instance_arn: std::option::Option<std::string::String>,
    pub(crate) elastic_ip: std::option::Option<std::string::String>,
    pub(crate) hostname: std::option::Option<std::string::String>,
    pub(crate) infrastructure_class: std::option::Option<std::string::String>,
    pub(crate) install_updates_on_boot: std::option::Option<bool>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) instance_profile_arn: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) last_service_error_id: std::option::Option<std::string::String>,
    pub(crate) layer_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) os: std::option::Option<std::string::String>,
    pub(crate) platform: std::option::Option<std::string::String>,
    pub(crate) private_dns: std::option::Option<std::string::String>,
    pub(crate) private_ip: std::option::Option<std::string::String>,
    pub(crate) public_dns: std::option::Option<std::string::String>,
    pub(crate) public_ip: std::option::Option<std::string::String>,
    pub(crate) registered_by: std::option::Option<std::string::String>,
    pub(crate) reported_agent_version: std::option::Option<std::string::String>,
    pub(crate) reported_os: std::option::Option<crate::types::ReportedOs>,
    pub(crate) root_device_type: std::option::Option<crate::types::RootDeviceType>,
    pub(crate) root_device_volume_id: std::option::Option<std::string::String>,
    pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) ssh_host_dsa_key_fingerprint: std::option::Option<std::string::String>,
    pub(crate) ssh_host_rsa_key_fingerprint: std::option::Option<std::string::String>,
    pub(crate) ssh_key_name: std::option::Option<std::string::String>,
    pub(crate) stack_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) subnet_id: std::option::Option<std::string::String>,
    pub(crate) tenancy: std::option::Option<std::string::String>,
    pub(crate) virtualization_type: std::option::Option<crate::types::VirtualizationType>,
}
impl InstanceBuilder {
    /// <p>The agent version. This parameter is set to <code>INHERIT</code> if the instance inherits the default stack setting or to a a version number for a fixed agent version.</p>
    pub fn agent_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.agent_version = Some(input.into());
        self
    }
    /// <p>The agent version. This parameter is set to <code>INHERIT</code> if the instance inherits the default stack setting or to a a version number for a fixed agent version.</p>
    pub fn set_agent_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>A custom AMI ID to be used to create the instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-custom-ami.html">Instances</a> </p>
    pub fn ami_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ami_id = Some(input.into());
        self
    }
    /// <p>A custom AMI ID to be used to create the instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-custom-ami.html">Instances</a> </p>
    pub fn set_ami_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ami_id = input;
        self
    }
    /// <p>The instance architecture: "i386" or "x86_64".</p>
    pub fn architecture(mut self, input: crate::types::Architecture) -> Self {
        self.architecture = Some(input);
        self
    }
    /// <p>The instance architecture: "i386" or "x86_64".</p>
    pub fn set_architecture(
        mut self,
        input: std::option::Option<crate::types::Architecture>,
    ) -> Self {
        self.architecture = input;
        self
    }
    /// <p>The instance's Amazon Resource Number (ARN).</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The instance's Amazon Resource Number (ARN).</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>For load-based or time-based instances, the type.</p>
    pub fn auto_scaling_type(mut self, input: crate::types::AutoScalingType) -> Self {
        self.auto_scaling_type = Some(input);
        self
    }
    /// <p>For load-based or time-based instances, the type.</p>
    pub fn set_auto_scaling_type(
        mut self,
        input: std::option::Option<crate::types::AutoScalingType>,
    ) -> Self {
        self.auto_scaling_type = input;
        self
    }
    /// <p>The instance Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The instance Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// Appends an item to `block_device_mappings`.
    ///
    /// To override the contents of this collection use [`set_block_device_mappings`](Self::set_block_device_mappings).
    ///
    /// <p>An array of <code>BlockDeviceMapping</code> objects that specify the instance's block device mappings.</p>
    pub fn block_device_mappings(mut self, input: crate::types::BlockDeviceMapping) -> Self {
        let mut v = self.block_device_mappings.unwrap_or_default();
        v.push(input);
        self.block_device_mappings = Some(v);
        self
    }
    /// <p>An array of <code>BlockDeviceMapping</code> objects that specify the instance's block device mappings.</p>
    pub fn set_block_device_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BlockDeviceMapping>>,
    ) -> Self {
        self.block_device_mappings = input;
        self
    }
    /// <p>The time that the instance was created.</p>
    pub fn created_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_at = Some(input.into());
        self
    }
    /// <p>The time that the instance was created.</p>
    pub fn set_created_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Whether this is an Amazon EBS-optimized instance.</p>
    pub fn ebs_optimized(mut self, input: bool) -> Self {
        self.ebs_optimized = Some(input);
        self
    }
    /// <p>Whether this is an Amazon EBS-optimized instance.</p>
    pub fn set_ebs_optimized(mut self, input: std::option::Option<bool>) -> Self {
        self.ebs_optimized = input;
        self
    }
    /// <p>The ID of the associated Amazon EC2 instance.</p>
    pub fn ec2_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ec2_instance_id = Some(input.into());
        self
    }
    /// <p>The ID of the associated Amazon EC2 instance.</p>
    pub fn set_ec2_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ec2_instance_id = input;
        self
    }
    /// <p>For container instances, the Amazon ECS cluster's ARN.</p>
    pub fn ecs_cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.ecs_cluster_arn = Some(input.into());
        self
    }
    /// <p>For container instances, the Amazon ECS cluster's ARN.</p>
    pub fn set_ecs_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ecs_cluster_arn = input;
        self
    }
    /// <p>For container instances, the instance's ARN.</p>
    pub fn ecs_container_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.ecs_container_instance_arn = Some(input.into());
        self
    }
    /// <p>For container instances, the instance's ARN.</p>
    pub fn set_ecs_container_instance_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ecs_container_instance_arn = input;
        self
    }
    /// <p>The instance <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address </a>.</p>
    pub fn elastic_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.elastic_ip = Some(input.into());
        self
    }
    /// <p>The instance <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP address </a>.</p>
    pub fn set_elastic_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.elastic_ip = input;
        self
    }
    /// <p>The instance host name.</p>
    pub fn hostname(mut self, input: impl Into<std::string::String>) -> Self {
        self.hostname = Some(input.into());
        self
    }
    /// <p>The instance host name.</p>
    pub fn set_hostname(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hostname = input;
        self
    }
    /// <p>For registered instances, the infrastructure class: <code>ec2</code> or <code>on-premises</code>.</p>
    pub fn infrastructure_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.infrastructure_class = Some(input.into());
        self
    }
    /// <p>For registered instances, the infrastructure class: <code>ec2</code> or <code>on-premises</code>.</p>
    pub fn set_infrastructure_class(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.infrastructure_class = input;
        self
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. If this value is set to <code>false</code>, you must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>We strongly recommend using the default value of <code>true</code>, to ensure that your instances have the latest security updates.</p>
    /// </note>
    pub fn install_updates_on_boot(mut self, input: bool) -> Self {
        self.install_updates_on_boot = Some(input);
        self
    }
    /// <p>Whether to install operating system and package updates when the instance boots. The default value is <code>true</code>. If this value is set to <code>false</code>, you must then update your instances manually by using <code>CreateDeployment</code> to run the <code>update_dependencies</code> stack command or by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the instances. </p> <note>
    /// <p>We strongly recommend using the default value of <code>true</code>, to ensure that your instances have the latest security updates.</p>
    /// </note>
    pub fn set_install_updates_on_boot(mut self, input: std::option::Option<bool>) -> Self {
        self.install_updates_on_boot = input;
        self
    }
    /// <p>The instance ID.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The instance ID.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ARN of the instance's IAM profile. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn instance_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_profile_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the instance's IAM profile. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn set_instance_profile_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.instance_profile_arn = input;
        self
    }
    /// <p>The instance type, such as <code>t2.micro</code>.</p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The instance type, such as <code>t2.micro</code>.</p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The ID of the last service error. For more information, call <code>DescribeServiceErrors</code>.</p>
    pub fn last_service_error_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_service_error_id = Some(input.into());
        self
    }
    /// <p>The ID of the last service error. For more information, call <code>DescribeServiceErrors</code>.</p>
    pub fn set_last_service_error_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_service_error_id = input;
        self
    }
    /// Appends an item to `layer_ids`.
    ///
    /// To override the contents of this collection use [`set_layer_ids`](Self::set_layer_ids).
    ///
    /// <p>An array containing the instance layer IDs.</p>
    pub fn layer_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.layer_ids.unwrap_or_default();
        v.push(input.into());
        self.layer_ids = Some(v);
        self
    }
    /// <p>An array containing the instance layer IDs.</p>
    pub fn set_layer_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.layer_ids = input;
        self
    }
    /// <p>The instance's operating system.</p>
    pub fn os(mut self, input: impl Into<std::string::String>) -> Self {
        self.os = Some(input.into());
        self
    }
    /// <p>The instance's operating system.</p>
    pub fn set_os(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.os = input;
        self
    }
    /// <p>The instance's platform.</p>
    pub fn platform(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform = Some(input.into());
        self
    }
    /// <p>The instance's platform.</p>
    pub fn set_platform(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The instance's private DNS name.</p>
    pub fn private_dns(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_dns = Some(input.into());
        self
    }
    /// <p>The instance's private DNS name.</p>
    pub fn set_private_dns(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.private_dns = input;
        self
    }
    /// <p>The instance's private IP address.</p>
    pub fn private_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_ip = Some(input.into());
        self
    }
    /// <p>The instance's private IP address.</p>
    pub fn set_private_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.private_ip = input;
        self
    }
    /// <p>The instance public DNS name.</p>
    pub fn public_dns(mut self, input: impl Into<std::string::String>) -> Self {
        self.public_dns = Some(input.into());
        self
    }
    /// <p>The instance public DNS name.</p>
    pub fn set_public_dns(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.public_dns = input;
        self
    }
    /// <p>The instance public IP address.</p>
    pub fn public_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.public_ip = Some(input.into());
        self
    }
    /// <p>The instance public IP address.</p>
    pub fn set_public_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.public_ip = input;
        self
    }
    /// <p>For registered instances, who performed the registration.</p>
    pub fn registered_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.registered_by = Some(input.into());
        self
    }
    /// <p>For registered instances, who performed the registration.</p>
    pub fn set_registered_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registered_by = input;
        self
    }
    /// <p>The instance's reported AWS OpsWorks Stacks agent version.</p>
    pub fn reported_agent_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.reported_agent_version = Some(input.into());
        self
    }
    /// <p>The instance's reported AWS OpsWorks Stacks agent version.</p>
    pub fn set_reported_agent_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reported_agent_version = input;
        self
    }
    /// <p>For registered instances, the reported operating system.</p>
    pub fn reported_os(mut self, input: crate::types::ReportedOs) -> Self {
        self.reported_os = Some(input);
        self
    }
    /// <p>For registered instances, the reported operating system.</p>
    pub fn set_reported_os(mut self, input: std::option::Option<crate::types::ReportedOs>) -> Self {
        self.reported_os = input;
        self
    }
    /// <p>The instance's root device type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
    pub fn root_device_type(mut self, input: crate::types::RootDeviceType) -> Self {
        self.root_device_type = Some(input);
        self
    }
    /// <p>The instance's root device type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
    pub fn set_root_device_type(
        mut self,
        input: std::option::Option<crate::types::RootDeviceType>,
    ) -> Self {
        self.root_device_type = input;
        self
    }
    /// <p>The root device volume ID.</p>
    pub fn root_device_volume_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.root_device_volume_id = Some(input.into());
        self
    }
    /// <p>The root device volume ID.</p>
    pub fn set_root_device_volume_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.root_device_volume_id = input;
        self
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>An array containing the instance security group IDs.</p>
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = Some(v);
        self
    }
    /// <p>An array containing the instance security group IDs.</p>
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The SSH key's Deep Security Agent (DSA) fingerprint.</p>
    pub fn ssh_host_dsa_key_fingerprint(mut self, input: impl Into<std::string::String>) -> Self {
        self.ssh_host_dsa_key_fingerprint = Some(input.into());
        self
    }
    /// <p>The SSH key's Deep Security Agent (DSA) fingerprint.</p>
    pub fn set_ssh_host_dsa_key_fingerprint(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ssh_host_dsa_key_fingerprint = input;
        self
    }
    /// <p>The SSH key's RSA fingerprint.</p>
    pub fn ssh_host_rsa_key_fingerprint(mut self, input: impl Into<std::string::String>) -> Self {
        self.ssh_host_rsa_key_fingerprint = Some(input.into());
        self
    }
    /// <p>The SSH key's RSA fingerprint.</p>
    pub fn set_ssh_host_rsa_key_fingerprint(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ssh_host_rsa_key_fingerprint = input;
        self
    }
    /// <p>The instance's Amazon EC2 key-pair name.</p>
    pub fn ssh_key_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.ssh_key_name = Some(input.into());
        self
    }
    /// <p>The instance's Amazon EC2 key-pair name.</p>
    pub fn set_ssh_key_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ssh_key_name = input;
        self
    }
    /// <p>The stack ID.</p>
    pub fn stack_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_id = Some(input.into());
        self
    }
    /// <p>The stack ID.</p>
    pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_id = input;
        self
    }
    /// <p>The instance status:</p>
    /// <ul>
    /// <li> <p> <code>booting</code> </p> </li>
    /// <li> <p> <code>connection_lost</code> </p> </li>
    /// <li> <p> <code>online</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// <li> <p> <code>rebooting</code> </p> </li>
    /// <li> <p> <code>requested</code> </p> </li>
    /// <li> <p> <code>running_setup</code> </p> </li>
    /// <li> <p> <code>setup_failed</code> </p> </li>
    /// <li> <p> <code>shutting_down</code> </p> </li>
    /// <li> <p> <code>start_failed</code> </p> </li>
    /// <li> <p> <code>stop_failed</code> </p> </li>
    /// <li> <p> <code>stopped</code> </p> </li>
    /// <li> <p> <code>stopping</code> </p> </li>
    /// <li> <p> <code>terminated</code> </p> </li>
    /// <li> <p> <code>terminating</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The instance status:</p>
    /// <ul>
    /// <li> <p> <code>booting</code> </p> </li>
    /// <li> <p> <code>connection_lost</code> </p> </li>
    /// <li> <p> <code>online</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// <li> <p> <code>rebooting</code> </p> </li>
    /// <li> <p> <code>requested</code> </p> </li>
    /// <li> <p> <code>running_setup</code> </p> </li>
    /// <li> <p> <code>setup_failed</code> </p> </li>
    /// <li> <p> <code>shutting_down</code> </p> </li>
    /// <li> <p> <code>start_failed</code> </p> </li>
    /// <li> <p> <code>stop_failed</code> </p> </li>
    /// <li> <p> <code>stopped</code> </p> </li>
    /// <li> <p> <code>stopping</code> </p> </li>
    /// <li> <p> <code>terminated</code> </p> </li>
    /// <li> <p> <code>terminating</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The instance's subnet ID; applicable only if the stack is running in a VPC.</p>
    pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_id = Some(input.into());
        self
    }
    /// <p>The instance's subnet ID; applicable only if the stack is running in a VPC.</p>
    pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The instance's tenancy option, such as <code>dedicated</code> or <code>host</code>.</p>
    pub fn tenancy(mut self, input: impl Into<std::string::String>) -> Self {
        self.tenancy = Some(input.into());
        self
    }
    /// <p>The instance's tenancy option, such as <code>dedicated</code> or <code>host</code>.</p>
    pub fn set_tenancy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tenancy = input;
        self
    }
    /// <p>The instance's virtualization type: <code>paravirtual</code> or <code>hvm</code>.</p>
    pub fn virtualization_type(mut self, input: crate::types::VirtualizationType) -> Self {
        self.virtualization_type = Some(input);
        self
    }
    /// <p>The instance's virtualization type: <code>paravirtual</code> or <code>hvm</code>.</p>
    pub fn set_virtualization_type(
        mut self,
        input: std::option::Option<crate::types::VirtualizationType>,
    ) -> Self {
        self.virtualization_type = input;
        self
    }
    /// Consumes the builder and constructs a [`Instance`](crate::types::Instance).
    pub fn build(self) -> crate::types::Instance {
        crate::types::Instance {
            agent_version: self.agent_version,
            ami_id: self.ami_id,
            architecture: self.architecture,
            arn: self.arn,
            auto_scaling_type: self.auto_scaling_type,
            availability_zone: self.availability_zone,
            block_device_mappings: self.block_device_mappings,
            created_at: self.created_at,
            ebs_optimized: self.ebs_optimized,
            ec2_instance_id: self.ec2_instance_id,
            ecs_cluster_arn: self.ecs_cluster_arn,
            ecs_container_instance_arn: self.ecs_container_instance_arn,
            elastic_ip: self.elastic_ip,
            hostname: self.hostname,
            infrastructure_class: self.infrastructure_class,
            install_updates_on_boot: self.install_updates_on_boot,
            instance_id: self.instance_id,
            instance_profile_arn: self.instance_profile_arn,
            instance_type: self.instance_type,
            last_service_error_id: self.last_service_error_id,
            layer_ids: self.layer_ids,
            os: self.os,
            platform: self.platform,
            private_dns: self.private_dns,
            private_ip: self.private_ip,
            public_dns: self.public_dns,
            public_ip: self.public_ip,
            registered_by: self.registered_by,
            reported_agent_version: self.reported_agent_version,
            reported_os: self.reported_os,
            root_device_type: self.root_device_type,
            root_device_volume_id: self.root_device_volume_id,
            security_group_ids: self.security_group_ids,
            ssh_host_dsa_key_fingerprint: self.ssh_host_dsa_key_fingerprint,
            ssh_host_rsa_key_fingerprint: self.ssh_host_rsa_key_fingerprint,
            ssh_key_name: self.ssh_key_name,
            stack_id: self.stack_id,
            status: self.status,
            subnet_id: self.subnet_id,
            tenancy: self.tenancy,
            virtualization_type: self.virtualization_type,
        }
    }
}
