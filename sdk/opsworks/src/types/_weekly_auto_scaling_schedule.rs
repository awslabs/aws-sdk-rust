// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a time-based instance's auto scaling schedule. The schedule consists of a set of key-value pairs.</p>
/// <ul>
/// <li> <p>The key is the time period (a UTC hour) and must be an integer from 0 - 23.</p> </li>
/// <li> <p>The value indicates whether the instance should be online or offline for the specified period, and must be set to "on" or "off"</p> </li>
/// </ul>
/// <p>The default setting for all time periods is off, so you use the following parameters primarily to specify the online periods. You don't have to explicitly specify offline periods unless you want to change an online period to an offline period.</p>
/// <p>The following example specifies that the instance should be online for four hours, from UTC 1200 - 1600. It will be off for the remainder of the day.</p>
/// <p> <code> { "12":"on", "13":"on", "14":"on", "15":"on" } </code> </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WeeklyAutoScalingSchedule {
    /// <p>The schedule for Monday.</p>
    #[doc(hidden)]
    pub monday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The schedule for Tuesday.</p>
    #[doc(hidden)]
    pub tuesday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The schedule for Wednesday.</p>
    #[doc(hidden)]
    pub wednesday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The schedule for Thursday.</p>
    #[doc(hidden)]
    pub thursday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The schedule for Friday.</p>
    #[doc(hidden)]
    pub friday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The schedule for Saturday.</p>
    #[doc(hidden)]
    pub saturday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The schedule for Sunday.</p>
    #[doc(hidden)]
    pub sunday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl WeeklyAutoScalingSchedule {
    /// <p>The schedule for Monday.</p>
    pub fn monday(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.monday.as_ref()
    }
    /// <p>The schedule for Tuesday.</p>
    pub fn tuesday(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tuesday.as_ref()
    }
    /// <p>The schedule for Wednesday.</p>
    pub fn wednesday(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.wednesday.as_ref()
    }
    /// <p>The schedule for Thursday.</p>
    pub fn thursday(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.thursday.as_ref()
    }
    /// <p>The schedule for Friday.</p>
    pub fn friday(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.friday.as_ref()
    }
    /// <p>The schedule for Saturday.</p>
    pub fn saturday(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.saturday.as_ref()
    }
    /// <p>The schedule for Sunday.</p>
    pub fn sunday(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.sunday.as_ref()
    }
}
impl WeeklyAutoScalingSchedule {
    /// Creates a new builder-style object to manufacture [`WeeklyAutoScalingSchedule`](crate::types::WeeklyAutoScalingSchedule).
    pub fn builder() -> crate::types::builders::WeeklyAutoScalingScheduleBuilder {
        crate::types::builders::WeeklyAutoScalingScheduleBuilder::default()
    }
}

/// A builder for [`WeeklyAutoScalingSchedule`](crate::types::WeeklyAutoScalingSchedule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WeeklyAutoScalingScheduleBuilder {
    pub(crate) monday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) tuesday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) wednesday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) thursday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) friday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) saturday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) sunday:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl WeeklyAutoScalingScheduleBuilder {
    /// Adds a key-value pair to `monday`.
    ///
    /// To override the contents of this collection use [`set_monday`](Self::set_monday).
    ///
    /// <p>The schedule for Monday.</p>
    pub fn monday(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.monday.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.monday = Some(hash_map);
        self
    }
    /// <p>The schedule for Monday.</p>
    pub fn set_monday(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.monday = input;
        self
    }
    /// Adds a key-value pair to `tuesday`.
    ///
    /// To override the contents of this collection use [`set_tuesday`](Self::set_tuesday).
    ///
    /// <p>The schedule for Tuesday.</p>
    pub fn tuesday(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tuesday.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tuesday = Some(hash_map);
        self
    }
    /// <p>The schedule for Tuesday.</p>
    pub fn set_tuesday(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tuesday = input;
        self
    }
    /// Adds a key-value pair to `wednesday`.
    ///
    /// To override the contents of this collection use [`set_wednesday`](Self::set_wednesday).
    ///
    /// <p>The schedule for Wednesday.</p>
    pub fn wednesday(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.wednesday.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.wednesday = Some(hash_map);
        self
    }
    /// <p>The schedule for Wednesday.</p>
    pub fn set_wednesday(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.wednesday = input;
        self
    }
    /// Adds a key-value pair to `thursday`.
    ///
    /// To override the contents of this collection use [`set_thursday`](Self::set_thursday).
    ///
    /// <p>The schedule for Thursday.</p>
    pub fn thursday(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.thursday.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.thursday = Some(hash_map);
        self
    }
    /// <p>The schedule for Thursday.</p>
    pub fn set_thursday(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.thursday = input;
        self
    }
    /// Adds a key-value pair to `friday`.
    ///
    /// To override the contents of this collection use [`set_friday`](Self::set_friday).
    ///
    /// <p>The schedule for Friday.</p>
    pub fn friday(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.friday.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.friday = Some(hash_map);
        self
    }
    /// <p>The schedule for Friday.</p>
    pub fn set_friday(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.friday = input;
        self
    }
    /// Adds a key-value pair to `saturday`.
    ///
    /// To override the contents of this collection use [`set_saturday`](Self::set_saturday).
    ///
    /// <p>The schedule for Saturday.</p>
    pub fn saturday(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.saturday.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.saturday = Some(hash_map);
        self
    }
    /// <p>The schedule for Saturday.</p>
    pub fn set_saturday(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.saturday = input;
        self
    }
    /// Adds a key-value pair to `sunday`.
    ///
    /// To override the contents of this collection use [`set_sunday`](Self::set_sunday).
    ///
    /// <p>The schedule for Sunday.</p>
    pub fn sunday(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.sunday.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.sunday = Some(hash_map);
        self
    }
    /// <p>The schedule for Sunday.</p>
    pub fn set_sunday(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.sunday = input;
        self
    }
    /// Consumes the builder and constructs a [`WeeklyAutoScalingSchedule`](crate::types::WeeklyAutoScalingSchedule).
    pub fn build(self) -> crate::types::WeeklyAutoScalingSchedule {
        crate::types::WeeklyAutoScalingSchedule {
            monday: self.monday,
            tuesday: self.tuesday,
            wednesday: self.wednesday,
            thursday: self.thursday,
            friday: self.friday,
            saturday: self.saturday,
            sunday: self.sunday,
        }
    }
}
