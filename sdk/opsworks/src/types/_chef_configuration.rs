// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Chef configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChefConfiguration {
    /// <p>Whether to enable Berkshelf.</p>
    #[doc(hidden)]
    pub manage_berkshelf: std::option::Option<bool>,
    /// <p>The Berkshelf version.</p>
    #[doc(hidden)]
    pub berkshelf_version: std::option::Option<std::string::String>,
}
impl ChefConfiguration {
    /// <p>Whether to enable Berkshelf.</p>
    pub fn manage_berkshelf(&self) -> std::option::Option<bool> {
        self.manage_berkshelf
    }
    /// <p>The Berkshelf version.</p>
    pub fn berkshelf_version(&self) -> std::option::Option<&str> {
        self.berkshelf_version.as_deref()
    }
}
impl ChefConfiguration {
    /// Creates a new builder-style object to manufacture [`ChefConfiguration`](crate::types::ChefConfiguration).
    pub fn builder() -> crate::types::builders::ChefConfigurationBuilder {
        crate::types::builders::ChefConfigurationBuilder::default()
    }
}

/// A builder for [`ChefConfiguration`](crate::types::ChefConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChefConfigurationBuilder {
    pub(crate) manage_berkshelf: std::option::Option<bool>,
    pub(crate) berkshelf_version: std::option::Option<std::string::String>,
}
impl ChefConfigurationBuilder {
    /// <p>Whether to enable Berkshelf.</p>
    pub fn manage_berkshelf(mut self, input: bool) -> Self {
        self.manage_berkshelf = Some(input);
        self
    }
    /// <p>Whether to enable Berkshelf.</p>
    pub fn set_manage_berkshelf(mut self, input: std::option::Option<bool>) -> Self {
        self.manage_berkshelf = input;
        self
    }
    /// <p>The Berkshelf version.</p>
    pub fn berkshelf_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.berkshelf_version = Some(input.into());
        self
    }
    /// <p>The Berkshelf version.</p>
    pub fn set_berkshelf_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.berkshelf_version = input;
        self
    }
    /// Consumes the builder and constructs a [`ChefConfiguration`](crate::types::ChefConfiguration).
    pub fn build(self) -> crate::types::ChefConfiguration {
        crate::types::ChefConfiguration {
            manage_berkshelf: self.manage_berkshelf,
            berkshelf_version: self.berkshelf_version,
        }
    }
}
