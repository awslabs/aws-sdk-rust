// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Amazon CloudWatch logs configuration for a layer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudWatchLogsConfiguration {
    /// <p>Whether CloudWatch Logs is enabled for a layer.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>A list of configuration options for CloudWatch Logs.</p>
    pub log_streams: ::std::option::Option<::std::vec::Vec<crate::types::CloudWatchLogsLogStream>>,
}
impl CloudWatchLogsConfiguration {
    /// <p>Whether CloudWatch Logs is enabled for a layer.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>A list of configuration options for CloudWatch Logs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.log_streams.is_none()`.
    pub fn log_streams(&self) -> &[crate::types::CloudWatchLogsLogStream] {
        self.log_streams.as_deref().unwrap_or_default()
    }
}
impl CloudWatchLogsConfiguration {
    /// Creates a new builder-style object to manufacture [`CloudWatchLogsConfiguration`](crate::types::CloudWatchLogsConfiguration).
    pub fn builder() -> crate::types::builders::CloudWatchLogsConfigurationBuilder {
        crate::types::builders::CloudWatchLogsConfigurationBuilder::default()
    }
}

/// A builder for [`CloudWatchLogsConfiguration`](crate::types::CloudWatchLogsConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CloudWatchLogsConfigurationBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) log_streams: ::std::option::Option<::std::vec::Vec<crate::types::CloudWatchLogsLogStream>>,
}
impl CloudWatchLogsConfigurationBuilder {
    /// <p>Whether CloudWatch Logs is enabled for a layer.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether CloudWatch Logs is enabled for a layer.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Whether CloudWatch Logs is enabled for a layer.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Appends an item to `log_streams`.
    ///
    /// To override the contents of this collection use [`set_log_streams`](Self::set_log_streams).
    ///
    /// <p>A list of configuration options for CloudWatch Logs.</p>
    pub fn log_streams(mut self, input: crate::types::CloudWatchLogsLogStream) -> Self {
        let mut v = self.log_streams.unwrap_or_default();
        v.push(input);
        self.log_streams = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of configuration options for CloudWatch Logs.</p>
    pub fn set_log_streams(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CloudWatchLogsLogStream>>) -> Self {
        self.log_streams = input;
        self
    }
    /// <p>A list of configuration options for CloudWatch Logs.</p>
    pub fn get_log_streams(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CloudWatchLogsLogStream>> {
        &self.log_streams
    }
    /// Consumes the builder and constructs a [`CloudWatchLogsConfiguration`](crate::types::CloudWatchLogsConfiguration).
    pub fn build(self) -> crate::types::CloudWatchLogsConfiguration {
        crate::types::CloudWatchLogsConfiguration {
            enabled: self.enabled,
            log_streams: self.log_streams,
        }
    }
}
