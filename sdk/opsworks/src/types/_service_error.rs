// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an AWS OpsWorks Stacks service error.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceError {
    /// <p>The error ID.</p>
    #[doc(hidden)]
    pub service_error_id: std::option::Option<std::string::String>,
    /// <p>The stack ID.</p>
    #[doc(hidden)]
    pub stack_id: std::option::Option<std::string::String>,
    /// <p>The instance ID.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The error type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>A message that describes the error.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>When the error occurred.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<std::string::String>,
}
impl ServiceError {
    /// <p>The error ID.</p>
    pub fn service_error_id(&self) -> std::option::Option<&str> {
        self.service_error_id.as_deref()
    }
    /// <p>The stack ID.</p>
    pub fn stack_id(&self) -> std::option::Option<&str> {
        self.stack_id.as_deref()
    }
    /// <p>The instance ID.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The error type.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>A message that describes the error.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>When the error occurred.</p>
    pub fn created_at(&self) -> std::option::Option<&str> {
        self.created_at.as_deref()
    }
}
impl ServiceError {
    /// Creates a new builder-style object to manufacture [`ServiceError`](crate::types::ServiceError).
    pub fn builder() -> crate::types::builders::ServiceErrorBuilder {
        crate::types::builders::ServiceErrorBuilder::default()
    }
}

/// A builder for [`ServiceError`](crate::types::ServiceError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceErrorBuilder {
    pub(crate) service_error_id: std::option::Option<std::string::String>,
    pub(crate) stack_id: std::option::Option<std::string::String>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<std::string::String>,
}
impl ServiceErrorBuilder {
    /// <p>The error ID.</p>
    pub fn service_error_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_error_id = Some(input.into());
        self
    }
    /// <p>The error ID.</p>
    pub fn set_service_error_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_error_id = input;
        self
    }
    /// <p>The stack ID.</p>
    pub fn stack_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.stack_id = Some(input.into());
        self
    }
    /// <p>The stack ID.</p>
    pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stack_id = input;
        self
    }
    /// <p>The instance ID.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The instance ID.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The error type.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The error type.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>A message that describes the error.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>A message that describes the error.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>When the error occurred.</p>
    pub fn created_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_at = Some(input.into());
        self
    }
    /// <p>When the error occurred.</p>
    pub fn set_created_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_at = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceError`](crate::types::ServiceError).
    pub fn build(self) -> crate::types::ServiceError {
        crate::types::ServiceError {
            service_error_id: self.service_error_id,
            stack_id: self.stack_id,
            instance_id: self.instance_id,
            r#type: self.r#type,
            message: self.message,
            created_at: self.created_at,
        }
    }
}
