// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `OpsWorks_20130218`.
///
/// This client allows ergonomic access to a `OpsWorks_20130218`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn assign_instance(&self) -> fluent_builders::AssignInstance<C, M, R> {
        fluent_builders::AssignInstance::new(self.handle.clone())
    }
    pub fn assign_volume(&self) -> fluent_builders::AssignVolume<C, M, R> {
        fluent_builders::AssignVolume::new(self.handle.clone())
    }
    pub fn associate_elastic_ip(&self) -> fluent_builders::AssociateElasticIp<C, M, R> {
        fluent_builders::AssociateElasticIp::new(self.handle.clone())
    }
    pub fn attach_elastic_load_balancer(
        &self,
    ) -> fluent_builders::AttachElasticLoadBalancer<C, M, R> {
        fluent_builders::AttachElasticLoadBalancer::new(self.handle.clone())
    }
    pub fn clone_stack(&self) -> fluent_builders::CloneStack<C, M, R> {
        fluent_builders::CloneStack::new(self.handle.clone())
    }
    pub fn create_app(&self) -> fluent_builders::CreateApp<C, M, R> {
        fluent_builders::CreateApp::new(self.handle.clone())
    }
    pub fn create_deployment(&self) -> fluent_builders::CreateDeployment<C, M, R> {
        fluent_builders::CreateDeployment::new(self.handle.clone())
    }
    pub fn create_instance(&self) -> fluent_builders::CreateInstance<C, M, R> {
        fluent_builders::CreateInstance::new(self.handle.clone())
    }
    pub fn create_layer(&self) -> fluent_builders::CreateLayer<C, M, R> {
        fluent_builders::CreateLayer::new(self.handle.clone())
    }
    pub fn create_stack(&self) -> fluent_builders::CreateStack<C, M, R> {
        fluent_builders::CreateStack::new(self.handle.clone())
    }
    pub fn create_user_profile(&self) -> fluent_builders::CreateUserProfile<C, M, R> {
        fluent_builders::CreateUserProfile::new(self.handle.clone())
    }
    pub fn delete_app(&self) -> fluent_builders::DeleteApp<C, M, R> {
        fluent_builders::DeleteApp::new(self.handle.clone())
    }
    pub fn delete_instance(&self) -> fluent_builders::DeleteInstance<C, M, R> {
        fluent_builders::DeleteInstance::new(self.handle.clone())
    }
    pub fn delete_layer(&self) -> fluent_builders::DeleteLayer<C, M, R> {
        fluent_builders::DeleteLayer::new(self.handle.clone())
    }
    pub fn delete_stack(&self) -> fluent_builders::DeleteStack<C, M, R> {
        fluent_builders::DeleteStack::new(self.handle.clone())
    }
    pub fn delete_user_profile(&self) -> fluent_builders::DeleteUserProfile<C, M, R> {
        fluent_builders::DeleteUserProfile::new(self.handle.clone())
    }
    pub fn deregister_ecs_cluster(&self) -> fluent_builders::DeregisterEcsCluster<C, M, R> {
        fluent_builders::DeregisterEcsCluster::new(self.handle.clone())
    }
    pub fn deregister_elastic_ip(&self) -> fluent_builders::DeregisterElasticIp<C, M, R> {
        fluent_builders::DeregisterElasticIp::new(self.handle.clone())
    }
    pub fn deregister_instance(&self) -> fluent_builders::DeregisterInstance<C, M, R> {
        fluent_builders::DeregisterInstance::new(self.handle.clone())
    }
    pub fn deregister_rds_db_instance(&self) -> fluent_builders::DeregisterRdsDbInstance<C, M, R> {
        fluent_builders::DeregisterRdsDbInstance::new(self.handle.clone())
    }
    pub fn deregister_volume(&self) -> fluent_builders::DeregisterVolume<C, M, R> {
        fluent_builders::DeregisterVolume::new(self.handle.clone())
    }
    pub fn describe_agent_versions(&self) -> fluent_builders::DescribeAgentVersions<C, M, R> {
        fluent_builders::DescribeAgentVersions::new(self.handle.clone())
    }
    pub fn describe_apps(&self) -> fluent_builders::DescribeApps<C, M, R> {
        fluent_builders::DescribeApps::new(self.handle.clone())
    }
    pub fn describe_commands(&self) -> fluent_builders::DescribeCommands<C, M, R> {
        fluent_builders::DescribeCommands::new(self.handle.clone())
    }
    pub fn describe_deployments(&self) -> fluent_builders::DescribeDeployments<C, M, R> {
        fluent_builders::DescribeDeployments::new(self.handle.clone())
    }
    pub fn describe_ecs_clusters(&self) -> fluent_builders::DescribeEcsClusters<C, M, R> {
        fluent_builders::DescribeEcsClusters::new(self.handle.clone())
    }
    pub fn describe_elastic_ips(&self) -> fluent_builders::DescribeElasticIps<C, M, R> {
        fluent_builders::DescribeElasticIps::new(self.handle.clone())
    }
    pub fn describe_elastic_load_balancers(
        &self,
    ) -> fluent_builders::DescribeElasticLoadBalancers<C, M, R> {
        fluent_builders::DescribeElasticLoadBalancers::new(self.handle.clone())
    }
    pub fn describe_instances(&self) -> fluent_builders::DescribeInstances<C, M, R> {
        fluent_builders::DescribeInstances::new(self.handle.clone())
    }
    pub fn describe_layers(&self) -> fluent_builders::DescribeLayers<C, M, R> {
        fluent_builders::DescribeLayers::new(self.handle.clone())
    }
    pub fn describe_load_based_auto_scaling(
        &self,
    ) -> fluent_builders::DescribeLoadBasedAutoScaling<C, M, R> {
        fluent_builders::DescribeLoadBasedAutoScaling::new(self.handle.clone())
    }
    pub fn describe_my_user_profile(&self) -> fluent_builders::DescribeMyUserProfile<C, M, R> {
        fluent_builders::DescribeMyUserProfile::new(self.handle.clone())
    }
    pub fn describe_operating_systems(&self) -> fluent_builders::DescribeOperatingSystems<C, M, R> {
        fluent_builders::DescribeOperatingSystems::new(self.handle.clone())
    }
    pub fn describe_permissions(&self) -> fluent_builders::DescribePermissions<C, M, R> {
        fluent_builders::DescribePermissions::new(self.handle.clone())
    }
    pub fn describe_raid_arrays(&self) -> fluent_builders::DescribeRaidArrays<C, M, R> {
        fluent_builders::DescribeRaidArrays::new(self.handle.clone())
    }
    pub fn describe_rds_db_instances(&self) -> fluent_builders::DescribeRdsDbInstances<C, M, R> {
        fluent_builders::DescribeRdsDbInstances::new(self.handle.clone())
    }
    pub fn describe_service_errors(&self) -> fluent_builders::DescribeServiceErrors<C, M, R> {
        fluent_builders::DescribeServiceErrors::new(self.handle.clone())
    }
    pub fn describe_stack_provisioning_parameters(
        &self,
    ) -> fluent_builders::DescribeStackProvisioningParameters<C, M, R> {
        fluent_builders::DescribeStackProvisioningParameters::new(self.handle.clone())
    }
    pub fn describe_stacks(&self) -> fluent_builders::DescribeStacks<C, M, R> {
        fluent_builders::DescribeStacks::new(self.handle.clone())
    }
    pub fn describe_stack_summary(&self) -> fluent_builders::DescribeStackSummary<C, M, R> {
        fluent_builders::DescribeStackSummary::new(self.handle.clone())
    }
    pub fn describe_time_based_auto_scaling(
        &self,
    ) -> fluent_builders::DescribeTimeBasedAutoScaling<C, M, R> {
        fluent_builders::DescribeTimeBasedAutoScaling::new(self.handle.clone())
    }
    pub fn describe_user_profiles(&self) -> fluent_builders::DescribeUserProfiles<C, M, R> {
        fluent_builders::DescribeUserProfiles::new(self.handle.clone())
    }
    pub fn describe_volumes(&self) -> fluent_builders::DescribeVolumes<C, M, R> {
        fluent_builders::DescribeVolumes::new(self.handle.clone())
    }
    pub fn detach_elastic_load_balancer(
        &self,
    ) -> fluent_builders::DetachElasticLoadBalancer<C, M, R> {
        fluent_builders::DetachElasticLoadBalancer::new(self.handle.clone())
    }
    pub fn disassociate_elastic_ip(&self) -> fluent_builders::DisassociateElasticIp<C, M, R> {
        fluent_builders::DisassociateElasticIp::new(self.handle.clone())
    }
    pub fn get_hostname_suggestion(&self) -> fluent_builders::GetHostnameSuggestion<C, M, R> {
        fluent_builders::GetHostnameSuggestion::new(self.handle.clone())
    }
    pub fn grant_access(&self) -> fluent_builders::GrantAccess<C, M, R> {
        fluent_builders::GrantAccess::new(self.handle.clone())
    }
    pub fn list_tags(&self) -> fluent_builders::ListTags<C, M, R> {
        fluent_builders::ListTags::new(self.handle.clone())
    }
    pub fn reboot_instance(&self) -> fluent_builders::RebootInstance<C, M, R> {
        fluent_builders::RebootInstance::new(self.handle.clone())
    }
    pub fn register_ecs_cluster(&self) -> fluent_builders::RegisterEcsCluster<C, M, R> {
        fluent_builders::RegisterEcsCluster::new(self.handle.clone())
    }
    pub fn register_elastic_ip(&self) -> fluent_builders::RegisterElasticIp<C, M, R> {
        fluent_builders::RegisterElasticIp::new(self.handle.clone())
    }
    pub fn register_instance(&self) -> fluent_builders::RegisterInstance<C, M, R> {
        fluent_builders::RegisterInstance::new(self.handle.clone())
    }
    pub fn register_rds_db_instance(&self) -> fluent_builders::RegisterRdsDbInstance<C, M, R> {
        fluent_builders::RegisterRdsDbInstance::new(self.handle.clone())
    }
    pub fn register_volume(&self) -> fluent_builders::RegisterVolume<C, M, R> {
        fluent_builders::RegisterVolume::new(self.handle.clone())
    }
    pub fn set_load_based_auto_scaling(&self) -> fluent_builders::SetLoadBasedAutoScaling<C, M, R> {
        fluent_builders::SetLoadBasedAutoScaling::new(self.handle.clone())
    }
    pub fn set_permission(&self) -> fluent_builders::SetPermission<C, M, R> {
        fluent_builders::SetPermission::new(self.handle.clone())
    }
    pub fn set_time_based_auto_scaling(&self) -> fluent_builders::SetTimeBasedAutoScaling<C, M, R> {
        fluent_builders::SetTimeBasedAutoScaling::new(self.handle.clone())
    }
    pub fn start_instance(&self) -> fluent_builders::StartInstance<C, M, R> {
        fluent_builders::StartInstance::new(self.handle.clone())
    }
    pub fn start_stack(&self) -> fluent_builders::StartStack<C, M, R> {
        fluent_builders::StartStack::new(self.handle.clone())
    }
    pub fn stop_instance(&self) -> fluent_builders::StopInstance<C, M, R> {
        fluent_builders::StopInstance::new(self.handle.clone())
    }
    pub fn stop_stack(&self) -> fluent_builders::StopStack<C, M, R> {
        fluent_builders::StopStack::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C, M, R> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn unassign_instance(&self) -> fluent_builders::UnassignInstance<C, M, R> {
        fluent_builders::UnassignInstance::new(self.handle.clone())
    }
    pub fn unassign_volume(&self) -> fluent_builders::UnassignVolume<C, M, R> {
        fluent_builders::UnassignVolume::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C, M, R> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_app(&self) -> fluent_builders::UpdateApp<C, M, R> {
        fluent_builders::UpdateApp::new(self.handle.clone())
    }
    pub fn update_elastic_ip(&self) -> fluent_builders::UpdateElasticIp<C, M, R> {
        fluent_builders::UpdateElasticIp::new(self.handle.clone())
    }
    pub fn update_instance(&self) -> fluent_builders::UpdateInstance<C, M, R> {
        fluent_builders::UpdateInstance::new(self.handle.clone())
    }
    pub fn update_layer(&self) -> fluent_builders::UpdateLayer<C, M, R> {
        fluent_builders::UpdateLayer::new(self.handle.clone())
    }
    pub fn update_my_user_profile(&self) -> fluent_builders::UpdateMyUserProfile<C, M, R> {
        fluent_builders::UpdateMyUserProfile::new(self.handle.clone())
    }
    pub fn update_rds_db_instance(&self) -> fluent_builders::UpdateRdsDbInstance<C, M, R> {
        fluent_builders::UpdateRdsDbInstance::new(self.handle.clone())
    }
    pub fn update_stack(&self) -> fluent_builders::UpdateStack<C, M, R> {
        fluent_builders::UpdateStack::new(self.handle.clone())
    }
    pub fn update_user_profile(&self) -> fluent_builders::UpdateUserProfile<C, M, R> {
        fluent_builders::UpdateUserProfile::new(self.handle.clone())
    }
    pub fn update_volume(&self) -> fluent_builders::UpdateVolume<C, M, R> {
        fluent_builders::UpdateVolume::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AssignInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::assign_instance_input::Builder,
    }
    impl<C, M, R> AssignInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssignInstanceOutput,
            smithy_http::result::SdkError<crate::error::AssignInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssignInstanceInputOperationOutputAlias,
                crate::output::AssignInstanceOutput,
                crate::error::AssignInstanceError,
                crate::input::AssignInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance ID.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
        /// Appends an item to `LayerIds`.
        ///
        /// To override the contents of this collection use [`set_layer_ids`](Self::set_layer_ids).
        /// <p>The layer ID, which must correspond to a custom layer. You cannot assign a registered instance to a built-in layer.</p>
        pub fn layer_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_ids(inp);
            self
        }
        pub fn set_layer_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_layer_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssignVolume<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::assign_volume_input::Builder,
    }
    impl<C, M, R> AssignVolume<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssignVolumeOutput,
            smithy_http::result::SdkError<crate::error::AssignVolumeError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssignVolumeInputOperationOutputAlias,
                crate::output::AssignVolumeOutput,
                crate::error::AssignVolumeError,
                crate::input::AssignVolumeInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The volume ID.</p>
        pub fn volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.volume_id(inp);
            self
        }
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_volume_id(input);
            self
        }
        /// <p>The instance ID.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociateElasticIp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::associate_elastic_ip_input::Builder,
    }
    impl<C, M, R> AssociateElasticIp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateElasticIpOutput,
            smithy_http::result::SdkError<crate::error::AssociateElasticIpError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssociateElasticIpInputOperationOutputAlias,
                crate::output::AssociateElasticIpOutput,
                crate::error::AssociateElasticIpError,
                crate::input::AssociateElasticIpInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Elastic IP address.</p>
        pub fn elastic_ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.elastic_ip(inp);
            self
        }
        pub fn set_elastic_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_elastic_ip(input);
            self
        }
        /// <p>The instance ID.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AttachElasticLoadBalancer<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::attach_elastic_load_balancer_input::Builder,
    }
    impl<C, M, R> AttachElasticLoadBalancer<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AttachElasticLoadBalancerOutput,
            smithy_http::result::SdkError<crate::error::AttachElasticLoadBalancerError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AttachElasticLoadBalancerInputOperationOutputAlias,
                crate::output::AttachElasticLoadBalancerOutput,
                crate::error::AttachElasticLoadBalancerError,
                crate::input::AttachElasticLoadBalancerInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Elastic Load Balancing instance's name.</p>
        pub fn elastic_load_balancer_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.elastic_load_balancer_name(inp);
            self
        }
        pub fn set_elastic_load_balancer_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_elastic_load_balancer_name(input);
            self
        }
        /// <p>The ID of the layer to which the Elastic Load Balancing instance is to be attached.</p>
        pub fn layer_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_id(inp);
            self
        }
        pub fn set_layer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_layer_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CloneStack<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::clone_stack_input::Builder,
    }
    impl<C, M, R> CloneStack<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CloneStackOutput,
            smithy_http::result::SdkError<crate::error::CloneStackError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CloneStackInputOperationOutputAlias,
                crate::output::CloneStackOutput,
                crate::error::CloneStackError,
                crate::input::CloneStackInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The source stack ID.</p>
        pub fn source_stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.source_stack_id(inp);
            self
        }
        pub fn set_source_stack_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_source_stack_id(input);
            self
        }
        /// <p>The cloned stack name.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The cloned stack AWS region, such as "ap-northeast-2". For more information about AWS regions, see
        /// <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
        pub fn region(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.region(inp);
            self
        }
        pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_region(input);
            self
        }
        /// <p>The ID of the VPC that the cloned stack is to be launched into. It must be in the specified region. All
        /// instances are launched into this VPC, and you cannot change the ID later.</p>
        /// <ul>
        /// <li>
        /// <p>If your account supports EC2 Classic, the default value is no VPC.</p>
        /// </li>
        /// <li>
        /// <p>If your account does not support EC2 Classic, the default value is the default VPC for the specified region.</p>
        /// </li>
        /// </ul>
        /// <p>If the VPC ID corresponds to a default VPC and you have specified either the
        /// <code>DefaultAvailabilityZone</code> or the <code>DefaultSubnetId</code> parameter only,
        /// AWS OpsWorks Stacks infers the value of the other parameter. If you specify neither parameter, AWS OpsWorks Stacks sets
        /// these parameters to the first valid Availability Zone for the specified region and the
        /// corresponding default VPC subnet ID, respectively. </p>
        /// <p>If you specify a nondefault VPC ID, note the following:</p>
        /// <ul>
        /// <li>
        /// <p>It must belong to a VPC in your account that is in the specified region.</p>
        /// </li>
        /// <li>
        /// <p>You must specify a value for <code>DefaultSubnetId</code>.</p>
        /// </li>
        /// </ul>
        /// <p>For more information about how to use AWS OpsWorks Stacks with a VPC, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-vpc.html">Running a Stack in a
        /// VPC</a>. For more information about default VPC and EC2 Classic, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported
        /// Platforms</a>. </p>
        pub fn vpc_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vpc_id(inp);
            self
        }
        pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vpc_id(input);
            self
        }
        /// Adds a key-value pair to `Attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        /// <p>A list of stack attributes and values as key/value pairs to be added to the cloned stack.</p>
        pub fn attributes(
            mut self,
            k: impl Into<crate::model::StackAttributesKeys>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.attributes(k, v);
            self
        }
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<crate::model::StackAttributesKeys, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_attributes(input);
            self
        }
        /// <p>The stack AWS Identity and Access Management (IAM) role, which allows AWS OpsWorks Stacks to work with AWS
        /// resources on your behalf. You must set this parameter to the Amazon Resource Name (ARN) for an
        /// existing IAM role. If you create a stack by using the AWS OpsWorks Stacks console, it creates the role for
        /// you. You can obtain an existing stack's IAM ARN programmatically by calling
        /// <a>DescribePermissions</a>. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using
        /// Identifiers</a>.</p>
        /// <note>
        /// <p>You must set this parameter to a valid service role ARN or the action will fail; there is no default value. You can specify the source stack's service role ARN, if you prefer, but you must do so explicitly.</p>
        /// </note>
        pub fn service_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_role_arn(inp);
            self
        }
        pub fn set_service_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_role_arn(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an IAM profile that is the default profile for all of the stack's EC2 instances.
        /// For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using
        /// Identifiers</a>.</p>
        pub fn default_instance_profile_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_instance_profile_arn(inp);
            self
        }
        pub fn set_default_instance_profile_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_instance_profile_arn(input);
            self
        }
        /// <p>The stack's operating system, which must be set to one of the following.</p>
        /// <ul>
        /// <li>
        /// <p>A supported Linux operating system: An Amazon Linux version, such as <code>Amazon Linux 2018.03</code>, <code>Amazon Linux 2017.09</code>, <code>Amazon Linux 2017.03</code>, <code>Amazon Linux
        /// 2016.09</code>, <code>Amazon Linux 2016.03</code>, <code>Amazon Linux 2015.09</code>, or <code>Amazon Linux 2015.03</code>.</p>
        /// </li>
        /// <li>
        /// <p>A supported Ubuntu operating system, such as <code>Ubuntu 16.04 LTS</code>, <code>Ubuntu 14.04 LTS</code>, or <code>Ubuntu 12.04 LTS</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CentOS Linux 7</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Red Hat Enterprise Linux 7</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Microsoft Windows Server 2012 R2 Base</code>, <code>Microsoft Windows Server 2012 R2 with SQL Server Express</code>,
        /// <code>Microsoft Windows Server 2012 R2 with SQL Server Standard</code>, or <code>Microsoft Windows Server 2012 R2 with SQL Server Web</code>.</p>
        /// </li>
        /// <li>
        /// <p>A custom AMI: <code>Custom</code>. You specify the custom AMI you want to use when
        /// you create instances. For more information about how to use custom AMIs with OpsWorks, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-custom-ami.html">Using
        /// Custom AMIs</a>.</p>
        /// </li>
        /// </ul>
        /// <p>The default option is the parent stack's operating system.
        /// For more information about supported operating systems,
        /// see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-os.html">AWS OpsWorks Stacks Operating Systems</a>.</p>
        /// <note>
        /// <p>You can specify a different Linux operating system for the cloned stack, but you cannot change from Linux to Windows or Windows to Linux.</p>
        /// </note>
        pub fn default_os(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_os(inp);
            self
        }
        pub fn set_default_os(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_default_os(input);
            self
        }
        /// <p>The stack's host name theme, with spaces are replaced by underscores. The theme is used to
        /// generate host names for the stack's instances. By default, <code>HostnameTheme</code> is set
        /// to <code>Layer_Dependent</code>, which creates host names by appending integers to the layer's
        /// short name. The other themes are:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Baked_Goods</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Clouds</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Europe_Cities</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Fruits</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Greek_Deities_and_Titans</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Legendary_creatures_from_Japan</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Planets_and_Moons</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Roman_Deities</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Scottish_Islands</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>US_Cities</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Wild_Cats</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To obtain a generated host name, call <code>GetHostNameSuggestion</code>, which returns a
        /// host name based on the current theme.</p>
        pub fn hostname_theme(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.hostname_theme(inp);
            self
        }
        pub fn set_hostname_theme(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_hostname_theme(input);
            self
        }
        /// <p>The cloned stack's default Availability Zone, which must be in the specified region. For more
        /// information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and
        /// Endpoints</a>. If you also specify a value for <code>DefaultSubnetId</code>, the subnet must
        /// be in the same zone. For more information, see the <code>VpcId</code> parameter description.
        /// </p>
        pub fn default_availability_zone(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_availability_zone(inp);
            self
        }
        pub fn set_default_availability_zone(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_availability_zone(input);
            self
        }
        /// <p>The stack's default VPC subnet ID. This parameter is required if you specify a value for the
        /// <code>VpcId</code> parameter. All instances are launched into this subnet unless you specify
        /// otherwise when you create the instance. If you also specify a value for
        /// <code>DefaultAvailabilityZone</code>, the subnet must be in that zone. For information on
        /// default values and when this parameter is required, see the <code>VpcId</code> parameter
        /// description. </p>
        pub fn default_subnet_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_subnet_id(inp);
            self
        }
        pub fn set_default_subnet_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_subnet_id(input);
            self
        }
        /// <p>A string that contains user-defined, custom JSON. It is used to override the corresponding default stack configuration JSON values. The string should be in the following format:</p>
        /// <p>
        /// <code>"{\"key1\": \"value1\", \"key2\": \"value2\",...}"</code>
        /// </p>
        /// <p>For more information about custom JSON, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-json.html">Use Custom JSON to
        /// Modify the Stack Configuration Attributes</a>
        /// </p>
        pub fn custom_json(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_json(inp);
            self
        }
        pub fn set_custom_json(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_custom_json(input);
            self
        }
        /// <p>The configuration manager. When you clone a stack we recommend that you use the configuration manager to specify the Chef version: 12, 11.10, or 11.4 for Linux stacks, or 12.2 for Windows stacks. The default value for Linux stacks is currently 12.</p>
        pub fn configuration_manager(
            mut self,
            inp: crate::model::StackConfigurationManager,
        ) -> Self {
            self.inner = self.inner.configuration_manager(inp);
            self
        }
        pub fn set_configuration_manager(
            mut self,
            input: std::option::Option<crate::model::StackConfigurationManager>,
        ) -> Self {
            self.inner = self.inner.set_configuration_manager(input);
            self
        }
        /// <p>A <code>ChefConfiguration</code> object that specifies whether to enable Berkshelf and the
        /// Berkshelf version on Chef 11.10 stacks. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-creating.html">Create a New Stack</a>.</p>
        pub fn chef_configuration(mut self, inp: crate::model::ChefConfiguration) -> Self {
            self.inner = self.inner.chef_configuration(inp);
            self
        }
        pub fn set_chef_configuration(
            mut self,
            input: std::option::Option<crate::model::ChefConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_chef_configuration(input);
            self
        }
        /// <p>Whether to use custom cookbooks.</p>
        pub fn use_custom_cookbooks(mut self, inp: bool) -> Self {
            self.inner = self.inner.use_custom_cookbooks(inp);
            self
        }
        pub fn set_use_custom_cookbooks(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_use_custom_cookbooks(input);
            self
        }
        /// <p>Whether to associate the AWS OpsWorks Stacks built-in security groups with the stack's layers.</p>
        /// <p>AWS OpsWorks Stacks provides a standard set of built-in security groups, one for each layer, which are
        /// associated with layers by default. With <code>UseOpsworksSecurityGroups</code> you can instead
        /// provide your own custom security groups. <code>UseOpsworksSecurityGroups</code> has the
        /// following settings: </p>
        /// <ul>
        /// <li>
        /// <p>True - AWS OpsWorks Stacks automatically associates the appropriate built-in security group with each layer (default setting). You can associate additional security groups with a layer after you create it but you cannot delete the built-in security group.</p>
        /// </li>
        /// <li>
        /// <p>False - AWS OpsWorks Stacks does not associate built-in security groups with layers. You must create appropriate Amazon Elastic Compute Cloud (Amazon EC2) security groups and associate a security group with each layer that you create. However, you can still manually associate a built-in security group with a layer on creation; custom security groups are required only for those layers that need custom settings.</p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-creating.html">Create a New
        /// Stack</a>.</p>
        pub fn use_opsworks_security_groups(mut self, inp: bool) -> Self {
            self.inner = self.inner.use_opsworks_security_groups(inp);
            self
        }
        pub fn set_use_opsworks_security_groups(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.inner = self.inner.set_use_opsworks_security_groups(input);
            self
        }
        /// <p>Contains the information required to retrieve an app or cookbook from a repository. For more information,
        /// see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html">Adding Apps</a> or <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook.html">Cookbooks and Recipes</a>.</p>
        pub fn custom_cookbooks_source(mut self, inp: crate::model::Source) -> Self {
            self.inner = self.inner.custom_cookbooks_source(inp);
            self
        }
        pub fn set_custom_cookbooks_source(
            mut self,
            input: std::option::Option<crate::model::Source>,
        ) -> Self {
            self.inner = self.inner.set_custom_cookbooks_source(input);
            self
        }
        /// <p>A default Amazon EC2 key pair name. The default value is none. If you specify a key pair name, AWS
        /// OpsWorks installs the public key on the instance and you can use the private key with an SSH
        /// client to log in to the instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-ssh.html"> Using SSH to
        /// Communicate with an Instance</a> and <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/security-ssh-access.html"> Managing SSH
        /// Access</a>. You can override this setting by specifying a different key pair, or no key
        /// pair, when you <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-add.html">
        /// create an instance</a>. </p>
        pub fn default_ssh_key_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_ssh_key_name(inp);
            self
        }
        pub fn set_default_ssh_key_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_ssh_key_name(input);
            self
        }
        /// <p>Whether to clone the source stack's permissions.</p>
        pub fn clone_permissions(mut self, inp: bool) -> Self {
            self.inner = self.inner.clone_permissions(inp);
            self
        }
        pub fn set_clone_permissions(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_clone_permissions(input);
            self
        }
        /// Appends an item to `CloneAppIds`.
        ///
        /// To override the contents of this collection use [`set_clone_app_ids`](Self::set_clone_app_ids).
        /// <p>A list of source stack app IDs to be included in the cloned stack.</p>
        pub fn clone_app_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.clone_app_ids(inp);
            self
        }
        pub fn set_clone_app_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_clone_app_ids(input);
            self
        }
        /// <p>The default root device type. This value is used by default for all instances in the cloned
        /// stack, but you can override it when you create an instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
        pub fn default_root_device_type(mut self, inp: crate::model::RootDeviceType) -> Self {
            self.inner = self.inner.default_root_device_type(inp);
            self
        }
        pub fn set_default_root_device_type(
            mut self,
            input: std::option::Option<crate::model::RootDeviceType>,
        ) -> Self {
            self.inner = self.inner.set_default_root_device_type(input);
            self
        }
        /// <p>The default AWS OpsWorks Stacks agent version. You have the following options:</p>
        /// <ul>
        /// <li>
        /// <p>Auto-update - Set this parameter to <code>LATEST</code>. AWS OpsWorks Stacks
        /// automatically installs new agent versions on the stack's instances as soon as
        /// they are available.</p>
        /// </li>
        /// <li>
        /// <p>Fixed version - Set this parameter to your preferred agent version. To update
        /// the agent version, you must edit the stack configuration and specify a new version.
        /// AWS OpsWorks Stacks then automatically installs that version on the stack's instances.</p>
        /// </li>
        /// </ul>
        /// <p>The default setting is <code>LATEST</code>. To specify an agent version,
        /// you must use the complete version number, not the abbreviated number shown on the console.
        /// For a list of available agent version numbers, call <a>DescribeAgentVersions</a>. AgentVersion cannot be set to Chef 12.2.</p>
        /// <note>
        /// <p>You can also specify an agent version when you create or update an instance, which overrides the stack's default setting.</p>
        /// </note>
        pub fn agent_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.agent_version(inp);
            self
        }
        pub fn set_agent_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_agent_version(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateApp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_app_input::Builder,
    }
    impl<C, M, R> CreateApp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateAppOutput,
            smithy_http::result::SdkError<crate::error::CreateAppError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateAppInputOperationOutputAlias,
                crate::output::CreateAppOutput,
                crate::error::CreateAppError,
                crate::input::CreateAppInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>The app's short name.</p>
        pub fn shortname(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.shortname(inp);
            self
        }
        pub fn set_shortname(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_shortname(input);
            self
        }
        /// <p>The app name.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A description of the app.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// Appends an item to `DataSources`.
        ///
        /// To override the contents of this collection use [`set_data_sources`](Self::set_data_sources).
        /// <p>The app's data source.</p>
        pub fn data_sources(mut self, inp: impl Into<crate::model::DataSource>) -> Self {
            self.inner = self.inner.data_sources(inp);
            self
        }
        pub fn set_data_sources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DataSource>>,
        ) -> Self {
            self.inner = self.inner.set_data_sources(input);
            self
        }
        /// <p>The app type. Each supported type is associated with a particular layer. For example, PHP
        /// applications are associated with a PHP layer. AWS OpsWorks Stacks deploys an application to those instances
        /// that are members of the corresponding layer. If your app isn't one of the standard types, or
        /// you prefer to implement your own Deploy recipes, specify <code>other</code>.</p>
        pub fn r#type(mut self, inp: crate::model::AppType) -> Self {
            self.inner = self.inner.r#type(inp);
            self
        }
        pub fn set_type(mut self, input: std::option::Option<crate::model::AppType>) -> Self {
            self.inner = self.inner.set_type(input);
            self
        }
        /// <p>A <code>Source</code> object that specifies the app repository.</p>
        pub fn app_source(mut self, inp: crate::model::Source) -> Self {
            self.inner = self.inner.app_source(inp);
            self
        }
        pub fn set_app_source(mut self, input: std::option::Option<crate::model::Source>) -> Self {
            self.inner = self.inner.set_app_source(input);
            self
        }
        /// Appends an item to `Domains`.
        ///
        /// To override the contents of this collection use [`set_domains`](Self::set_domains).
        /// <p>The app virtual host settings, with multiple domains separated by commas. For example:
        /// <code>'www.example.com, example.com'</code>
        /// </p>
        pub fn domains(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domains(inp);
            self
        }
        pub fn set_domains(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_domains(input);
            self
        }
        /// <p>Whether to enable SSL for the app.</p>
        pub fn enable_ssl(mut self, inp: bool) -> Self {
            self.inner = self.inner.enable_ssl(inp);
            self
        }
        pub fn set_enable_ssl(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enable_ssl(input);
            self
        }
        /// <p>An <code>SslConfiguration</code> object with the SSL configuration.</p>
        pub fn ssl_configuration(mut self, inp: crate::model::SslConfiguration) -> Self {
            self.inner = self.inner.ssl_configuration(inp);
            self
        }
        pub fn set_ssl_configuration(
            mut self,
            input: std::option::Option<crate::model::SslConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_ssl_configuration(input);
            self
        }
        /// Adds a key-value pair to `Attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        /// <p>One or more user-defined key/value pairs to be added to the stack attributes.</p>
        pub fn attributes(
            mut self,
            k: impl Into<crate::model::AppAttributesKeys>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.attributes(k, v);
            self
        }
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<crate::model::AppAttributesKeys, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_attributes(input);
            self
        }
        /// Appends an item to `Environment`.
        ///
        /// To override the contents of this collection use [`set_environment`](Self::set_environment).
        /// <p>An array of <code>EnvironmentVariable</code> objects that specify environment variables to be
        /// associated with the app. After you deploy the app, these variables are defined on the
        /// associated app server instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html#workingapps-creating-environment"> Environment Variables</a>.</p>
        /// <p>There is no specific limit on the number of environment variables. However, the size of the associated data structure - which includes the variables' names, values, and protected flag values - cannot exceed 20 KB. This limit should accommodate most if not all use cases. Exceeding it will cause an exception with the message, "Environment: is too large (maximum is 20KB)."</p>
        /// <note>
        /// <p>If you have specified one or more environment variables, you cannot modify the stack's Chef version.</p>
        /// </note>
        pub fn environment(mut self, inp: impl Into<crate::model::EnvironmentVariable>) -> Self {
            self.inner = self.inner.environment(inp);
            self
        }
        pub fn set_environment(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EnvironmentVariable>>,
        ) -> Self {
            self.inner = self.inner.set_environment(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateDeployment<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_deployment_input::Builder,
    }
    impl<C, M, R> CreateDeployment<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateDeploymentOutput,
            smithy_http::result::SdkError<crate::error::CreateDeploymentError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateDeploymentInputOperationOutputAlias,
                crate::output::CreateDeploymentOutput,
                crate::error::CreateDeploymentError,
                crate::input::CreateDeploymentInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>The app ID. This parameter is required for app deployments, but not for other deployment commands.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
        /// Appends an item to `InstanceIds`.
        ///
        /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
        /// <p>The instance IDs for the deployment targets.</p>
        pub fn instance_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_ids(inp);
            self
        }
        pub fn set_instance_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_instance_ids(input);
            self
        }
        /// Appends an item to `LayerIds`.
        ///
        /// To override the contents of this collection use [`set_layer_ids`](Self::set_layer_ids).
        /// <p>The layer IDs for the deployment targets.</p>
        pub fn layer_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_ids(inp);
            self
        }
        pub fn set_layer_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_layer_ids(input);
            self
        }
        /// <p>A <code>DeploymentCommand</code> object that specifies the deployment command and any
        /// associated arguments.</p>
        pub fn command(mut self, inp: crate::model::DeploymentCommand) -> Self {
            self.inner = self.inner.command(inp);
            self
        }
        pub fn set_command(
            mut self,
            input: std::option::Option<crate::model::DeploymentCommand>,
        ) -> Self {
            self.inner = self.inner.set_command(input);
            self
        }
        /// <p>A user-defined comment.</p>
        pub fn comment(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.comment(inp);
            self
        }
        pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_comment(input);
            self
        }
        /// <p>A string that contains user-defined, custom JSON. You can use this parameter to override some corresponding default stack configuration JSON values. The string should be in the following format:</p>
        /// <p>
        /// <code>"{\"key1\": \"value1\", \"key2\": \"value2\",...}"</code>
        /// </p>
        /// <p>For more information about custom JSON, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-json.html">Use Custom JSON to
        /// Modify the Stack Configuration Attributes</a> and
        /// <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html">Overriding Attributes With Custom JSON</a>.</p>
        pub fn custom_json(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_json(inp);
            self
        }
        pub fn set_custom_json(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_custom_json(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_instance_input::Builder,
    }
    impl<C, M, R> CreateInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateInstanceOutput,
            smithy_http::result::SdkError<crate::error::CreateInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateInstanceInputOperationOutputAlias,
                crate::output::CreateInstanceOutput,
                crate::error::CreateInstanceError,
                crate::input::CreateInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// Appends an item to `LayerIds`.
        ///
        /// To override the contents of this collection use [`set_layer_ids`](Self::set_layer_ids).
        /// <p>An array that contains the instance's layer IDs.</p>
        pub fn layer_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_ids(inp);
            self
        }
        pub fn set_layer_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_layer_ids(input);
            self
        }
        /// <p>The instance type, such as <code>t2.micro</code>. For a list of supported instance types,
        /// open the stack in the console, choose <b>Instances</b>, and choose <b>+ Instance</b>.
        /// The <b>Size</b> list contains the currently supported types. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
        /// Families and Types</a>. The parameter values that you use to specify the various types are
        /// in the <b>API Name</b> column of the <b>Available Instance Types</b> table.</p>
        pub fn instance_type(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_type(inp);
            self
        }
        pub fn set_instance_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_type(input);
            self
        }
        /// <p>For load-based or time-based instances, the type. Windows stacks can use only time-based instances.</p>
        pub fn auto_scaling_type(mut self, inp: crate::model::AutoScalingType) -> Self {
            self.inner = self.inner.auto_scaling_type(inp);
            self
        }
        pub fn set_auto_scaling_type(
            mut self,
            input: std::option::Option<crate::model::AutoScalingType>,
        ) -> Self {
            self.inner = self.inner.set_auto_scaling_type(input);
            self
        }
        /// <p>The instance host name.</p>
        pub fn hostname(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.hostname(inp);
            self
        }
        pub fn set_hostname(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_hostname(input);
            self
        }
        /// <p>The instance's operating system, which must be set to one of the following.</p>
        /// <ul>
        /// <li>
        /// <p>A supported Linux operating system: An Amazon Linux version, such as <code>Amazon Linux 2018.03</code>, <code>Amazon Linux 2017.09</code>, <code>Amazon Linux 2017.03</code>, <code>Amazon Linux 2016.09</code>,
        /// <code>Amazon Linux 2016.03</code>, <code>Amazon Linux 2015.09</code>, or <code>Amazon Linux 2015.03</code>.</p>
        /// </li>
        /// <li>
        /// <p>A supported Ubuntu operating system, such as <code>Ubuntu 16.04 LTS</code>, <code>Ubuntu 14.04 LTS</code>, or <code>Ubuntu 12.04 LTS</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CentOS Linux 7</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Red Hat Enterprise Linux 7</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>A supported Windows operating system, such as <code>Microsoft Windows Server 2012 R2 Base</code>, <code>Microsoft Windows Server 2012 R2 with SQL Server Express</code>,
        /// <code>Microsoft Windows Server 2012 R2 with SQL Server Standard</code>, or <code>Microsoft Windows Server 2012 R2 with SQL Server Web</code>.</p>
        /// </li>
        /// <li>
        /// <p>A custom AMI: <code>Custom</code>.</p>
        /// </li>
        /// </ul>
        /// <p>For more information about the supported operating systems,
        /// see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-os.html">AWS OpsWorks Stacks Operating Systems</a>.</p>
        /// <p>The default option is the current Amazon Linux version. If you set this parameter to
        /// <code>Custom</code>, you must use the <a>CreateInstance</a> action's AmiId parameter to
        /// specify the custom AMI that you want to use. Block device mappings are not supported if the value is <code>Custom</code>. For more information about supported operating
        /// systems, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-os.html">Operating Systems</a>For more information about how to use custom AMIs with AWS OpsWorks Stacks, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-custom-ami.html">Using
        /// Custom AMIs</a>.</p>
        pub fn os(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.os(inp);
            self
        }
        pub fn set_os(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_os(input);
            self
        }
        /// <p>A custom AMI ID to be used to create the instance. The AMI should be based on one of the
        /// supported operating systems.
        /// For more information, see
        /// <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-custom-ami.html">Using Custom AMIs</a>.</p>
        /// <note>
        /// <p>If you specify a custom AMI, you must set <code>Os</code> to <code>Custom</code>.</p>
        /// </note>
        pub fn ami_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ami_id(inp);
            self
        }
        pub fn set_ami_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ami_id(input);
            self
        }
        /// <p>The instance's Amazon EC2 key-pair name.</p>
        pub fn ssh_key_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ssh_key_name(inp);
            self
        }
        pub fn set_ssh_key_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ssh_key_name(input);
            self
        }
        /// <p>The instance Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
        pub fn availability_zone(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.availability_zone(inp);
            self
        }
        pub fn set_availability_zone(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_availability_zone(input);
            self
        }
        /// <p>The instance's virtualization type, <code>paravirtual</code> or <code>hvm</code>.</p>
        pub fn virtualization_type(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtualization_type(inp);
            self
        }
        pub fn set_virtualization_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtualization_type(input);
            self
        }
        /// <p>The ID of the instance's subnet. If the stack is running in a VPC, you can use this parameter to override the stack's default subnet ID value and direct AWS OpsWorks Stacks to launch the instance in a different subnet.</p>
        pub fn subnet_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnet_id(inp);
            self
        }
        pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_subnet_id(input);
            self
        }
        /// <p>The instance architecture. The default option is <code>x86_64</code>. Instance types do not
        /// necessarily support both architectures. For a list of the architectures that are supported by
        /// the different instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Families and
        /// Types</a>.</p>
        pub fn architecture(mut self, inp: crate::model::Architecture) -> Self {
            self.inner = self.inner.architecture(inp);
            self
        }
        pub fn set_architecture(
            mut self,
            input: std::option::Option<crate::model::Architecture>,
        ) -> Self {
            self.inner = self.inner.set_architecture(input);
            self
        }
        /// <p>The instance root device type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
        pub fn root_device_type(mut self, inp: crate::model::RootDeviceType) -> Self {
            self.inner = self.inner.root_device_type(inp);
            self
        }
        pub fn set_root_device_type(
            mut self,
            input: std::option::Option<crate::model::RootDeviceType>,
        ) -> Self {
            self.inner = self.inner.set_root_device_type(input);
            self
        }
        /// Appends an item to `BlockDeviceMappings`.
        ///
        /// To override the contents of this collection use [`set_block_device_mappings`](Self::set_block_device_mappings).
        /// <p>An array of <code>BlockDeviceMapping</code> objects that specify the instance's block
        /// devices. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block
        /// Device Mapping</a>. Note that block device mappings are not supported for custom AMIs.</p>
        pub fn block_device_mappings(
            mut self,
            inp: impl Into<crate::model::BlockDeviceMapping>,
        ) -> Self {
            self.inner = self.inner.block_device_mappings(inp);
            self
        }
        pub fn set_block_device_mappings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BlockDeviceMapping>>,
        ) -> Self {
            self.inner = self.inner.set_block_device_mappings(input);
            self
        }
        /// <p>Whether to install operating system and package updates when the instance boots. The default
        /// value is <code>true</code>. To control when updates are installed, set this value to
        /// <code>false</code>. You must then update your instances manually by using
        /// <a>CreateDeployment</a> to run the <code>update_dependencies</code> stack command or
        /// by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the
        /// instances. </p>
        /// <note>
        /// <p>We strongly recommend using the default value of <code>true</code> to ensure that your
        /// instances have the latest security updates.</p>
        /// </note>
        pub fn install_updates_on_boot(mut self, inp: bool) -> Self {
            self.inner = self.inner.install_updates_on_boot(inp);
            self
        }
        pub fn set_install_updates_on_boot(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_install_updates_on_boot(input);
            self
        }
        /// <p>Whether to create an Amazon EBS-optimized instance.</p>
        pub fn ebs_optimized(mut self, inp: bool) -> Self {
            self.inner = self.inner.ebs_optimized(inp);
            self
        }
        pub fn set_ebs_optimized(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_ebs_optimized(input);
            self
        }
        /// <p>The default AWS OpsWorks Stacks agent version. You have the following options:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>INHERIT</code> - Use the stack's default agent version setting.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <i>version_number</i> - Use the specified agent version.
        /// This value overrides the stack's default setting.
        /// To update the agent version, edit the instance configuration and specify a
        /// new version.
        /// AWS OpsWorks Stacks then automatically installs that version on the instance.</p>
        /// </li>
        /// </ul>
        /// <p>The default setting is <code>INHERIT</code>. To specify an agent version,
        /// you must use the complete version number, not the abbreviated number shown on the console.
        /// For a list of available agent version numbers, call <a>DescribeAgentVersions</a>. AgentVersion cannot be set to Chef 12.2.</p>
        pub fn agent_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.agent_version(inp);
            self
        }
        pub fn set_agent_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_agent_version(input);
            self
        }
        /// <p>The instance's tenancy option. The default option is no tenancy, or if the instance is running in a VPC, inherit tenancy settings from the VPC. The following are valid values for this parameter:  <code>dedicated</code>, <code>default</code>, or <code>host</code>. Because there are costs associated with changes in tenancy options, we recommend that you research tenancy options before choosing them for your instances. For more information about dedicated hosts, see <a href="http://aws.amazon.com/ec2/dedicated-hosts/">Dedicated Hosts Overview</a> and <a href="http://aws.amazon.com/ec2/dedicated-hosts/">Amazon EC2 Dedicated Hosts</a>. For more information about dedicated instances, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> and <a href="http://aws.amazon.com/ec2/purchasing-options/dedicated-instances/">Amazon EC2 Dedicated Instances</a>.</p>
        pub fn tenancy(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tenancy(inp);
            self
        }
        pub fn set_tenancy(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_tenancy(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateLayer<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_layer_input::Builder,
    }
    impl<C, M, R> CreateLayer<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateLayerOutput,
            smithy_http::result::SdkError<crate::error::CreateLayerError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateLayerInputOperationOutputAlias,
                crate::output::CreateLayerOutput,
                crate::error::CreateLayerError,
                crate::input::CreateLayerInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The layer stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>The layer type. A stack cannot have more than one built-in layer of the same type. It can have any number of custom layers. Built-in layers are not available in Chef 12 stacks.</p>
        pub fn r#type(mut self, inp: crate::model::LayerType) -> Self {
            self.inner = self.inner.r#type(inp);
            self
        }
        pub fn set_type(mut self, input: std::option::Option<crate::model::LayerType>) -> Self {
            self.inner = self.inner.set_type(input);
            self
        }
        /// <p>The layer name, which is used by the console.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef recipes. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters, which are limited to the alphanumeric characters, '-', '_', and '.'.</p>
        /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a>.</p>
        pub fn shortname(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.shortname(inp);
            self
        }
        pub fn set_shortname(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_shortname(input);
            self
        }
        /// Adds a key-value pair to `Attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        /// <p>One or more user-defined key-value pairs to be added to the stack attributes.</p>
        /// <p>To create a cluster layer, set the <code>EcsClusterArn</code> attribute to the cluster's ARN.</p>
        pub fn attributes(
            mut self,
            k: impl Into<crate::model::LayerAttributesKeys>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.attributes(k, v);
            self
        }
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<crate::model::LayerAttributesKeys, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_attributes(input);
            self
        }
        /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <a>CloudWatchLogsLogStream</a>.</p>
        pub fn cloud_watch_logs_configuration(
            mut self,
            inp: crate::model::CloudWatchLogsConfiguration,
        ) -> Self {
            self.inner = self.inner.cloud_watch_logs_configuration(inp);
            self
        }
        pub fn set_cloud_watch_logs_configuration(
            mut self,
            input: std::option::Option<crate::model::CloudWatchLogsConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_cloud_watch_logs_configuration(input);
            self
        }
        /// <p>The ARN of an IAM profile to be used for the layer's EC2 instances. For more information
        /// about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
        pub fn custom_instance_profile_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_instance_profile_arn(inp);
            self
        }
        pub fn set_custom_instance_profile_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_custom_instance_profile_arn(input);
            self
        }
        /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes
        /// to be installed on the layer's instances. For more information, see
        /// <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html">
        /// Using Custom JSON</a>. This feature is supported as of version 1.7.42 of the AWS CLI.
        /// </p>
        pub fn custom_json(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_json(inp);
            self
        }
        pub fn set_custom_json(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_custom_json(input);
            self
        }
        /// Appends an item to `CustomSecurityGroupIds`.
        ///
        /// To override the contents of this collection use [`set_custom_security_group_ids`](Self::set_custom_security_group_ids).
        /// <p>An array containing the layer custom security group IDs.</p>
        pub fn custom_security_group_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_security_group_ids(inp);
            self
        }
        pub fn set_custom_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_custom_security_group_ids(input);
            self
        }
        /// Appends an item to `Packages`.
        ///
        /// To override the contents of this collection use [`set_packages`](Self::set_packages).
        /// <p>An array of <code>Package</code> objects that describes the layer packages.</p>
        pub fn packages(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.packages(inp);
            self
        }
        pub fn set_packages(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_packages(input);
            self
        }
        /// Appends an item to `VolumeConfigurations`.
        ///
        /// To override the contents of this collection use [`set_volume_configurations`](Self::set_volume_configurations).
        /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
        pub fn volume_configurations(
            mut self,
            inp: impl Into<crate::model::VolumeConfiguration>,
        ) -> Self {
            self.inner = self.inner.volume_configurations(inp);
            self
        }
        pub fn set_volume_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VolumeConfiguration>>,
        ) -> Self {
            self.inner = self.inner.set_volume_configurations(input);
            self
        }
        /// <p>Whether to disable auto healing for the layer.</p>
        pub fn enable_auto_healing(mut self, inp: bool) -> Self {
            self.inner = self.inner.enable_auto_healing(inp);
            self
        }
        pub fn set_enable_auto_healing(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enable_auto_healing(input);
            self
        }
        /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP
        /// address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit
        /// a Layer</a>.</p>
        pub fn auto_assign_elastic_ips(mut self, inp: bool) -> Self {
            self.inner = self.inner.auto_assign_elastic_ips(inp);
            self
        }
        pub fn set_auto_assign_elastic_ips(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_auto_assign_elastic_ips(input);
            self
        }
        /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to
        /// the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit
        /// a Layer</a>.</p>
        pub fn auto_assign_public_ips(mut self, inp: bool) -> Self {
            self.inner = self.inner.auto_assign_public_ips(inp);
            self
        }
        pub fn set_auto_assign_public_ips(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_auto_assign_public_ips(input);
            self
        }
        /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer custom recipes.</p>
        pub fn custom_recipes(mut self, inp: crate::model::Recipes) -> Self {
            self.inner = self.inner.custom_recipes(inp);
            self
        }
        pub fn set_custom_recipes(
            mut self,
            input: std::option::Option<crate::model::Recipes>,
        ) -> Self {
            self.inner = self.inner.set_custom_recipes(input);
            self
        }
        /// <p>Whether to install operating system and package updates when the instance boots. The default
        /// value is <code>true</code>. To control when updates are installed, set this value to
        /// <code>false</code>. You must then update your instances manually by using
        /// <a>CreateDeployment</a> to run the <code>update_dependencies</code> stack command or
        /// by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the
        /// instances. </p>
        /// <note>
        /// <p>To ensure that your
        /// instances have the latest security updates, we strongly recommend using the default value of <code>true</code>.</p>
        /// </note>
        pub fn install_updates_on_boot(mut self, inp: bool) -> Self {
            self.inner = self.inner.install_updates_on_boot(inp);
            self
        }
        pub fn set_install_updates_on_boot(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_install_updates_on_boot(input);
            self
        }
        /// <p>Whether to use Amazon EBS-optimized instances.</p>
        pub fn use_ebs_optimized_instances(mut self, inp: bool) -> Self {
            self.inner = self.inner.use_ebs_optimized_instances(inp);
            self
        }
        pub fn set_use_ebs_optimized_instances(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_use_ebs_optimized_instances(input);
            self
        }
        /// <p>A <code>LifeCycleEventConfiguration</code> object that you can use to configure the Shutdown event to
        /// specify an execution timeout and enable or disable Elastic Load Balancer connection
        /// draining.</p>
        pub fn lifecycle_event_configuration(
            mut self,
            inp: crate::model::LifecycleEventConfiguration,
        ) -> Self {
            self.inner = self.inner.lifecycle_event_configuration(inp);
            self
        }
        pub fn set_lifecycle_event_configuration(
            mut self,
            input: std::option::Option<crate::model::LifecycleEventConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_lifecycle_event_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateStack<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_stack_input::Builder,
    }
    impl<C, M, R> CreateStack<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateStackOutput,
            smithy_http::result::SdkError<crate::error::CreateStackError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateStackInputOperationOutputAlias,
                crate::output::CreateStackOutput,
                crate::error::CreateStackError,
                crate::input::CreateStackInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack name.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The stack's AWS region, such as <code>ap-south-1</code>. For more information about
        /// Amazon regions, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
        /// <note>
        /// <p>In the AWS CLI, this API maps to the <code>--stack-region</code> parameter. If the
        /// <code>--stack-region</code> parameter and the AWS CLI common parameter
        /// <code>--region</code> are set to the same value, the stack uses a
        /// <i>regional</i> endpoint. If the <code>--stack-region</code>
        /// parameter is not set, but the AWS CLI <code>--region</code> parameter is, this also
        /// results in a stack with a <i>regional</i> endpoint. However, if the
        /// <code>--region</code> parameter is set to <code>us-east-1</code>, and the
        /// <code>--stack-region</code> parameter is set to one of the following, then the
        /// stack uses a legacy or <i>classic</i> region: <code>us-west-1,
        /// us-west-2, sa-east-1, eu-central-1, eu-west-1, ap-northeast-1, ap-southeast-1,
        /// ap-southeast-2</code>. In this case, the actual API endpoint of the stack is in
        /// <code>us-east-1</code>. Only the preceding regions are supported as classic
        /// regions in the <code>us-east-1</code> API endpoint. Because it is a best practice to
        /// choose the regional endpoint that is closest to where you manage AWS, we recommend
        /// that you use regional endpoints for new stacks. The AWS CLI common
        /// <code>--region</code> parameter always specifies a regional API endpoint; it
        /// cannot be used to specify a classic AWS OpsWorks Stacks region.</p>
        /// </note>
        pub fn region(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.region(inp);
            self
        }
        pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_region(input);
            self
        }
        /// <p>The ID of the VPC that the stack is to be launched into. The VPC must be in the stack's region. All instances are launched into this VPC. You cannot change the ID later.</p>
        /// <ul>
        /// <li>
        /// <p>If your account supports EC2-Classic, the default value is <code>no VPC</code>.</p>
        /// </li>
        /// <li>
        /// <p>If your account does not support EC2-Classic, the default value is the default VPC for the specified region.</p>
        /// </li>
        /// </ul>
        /// <p>If the VPC ID corresponds to a default VPC and you have specified either the
        /// <code>DefaultAvailabilityZone</code> or the <code>DefaultSubnetId</code> parameter only,
        /// AWS OpsWorks Stacks infers the value of the
        /// other parameter. If you specify neither parameter, AWS OpsWorks Stacks sets
        /// these parameters to the first valid Availability Zone for the specified region and the
        /// corresponding default VPC subnet ID, respectively.</p>
        /// <p>If you specify a nondefault VPC ID, note the following:</p>
        /// <ul>
        /// <li>
        /// <p>It must belong to a VPC in your account that is in the specified region.</p>
        /// </li>
        /// <li>
        /// <p>You must specify a value for <code>DefaultSubnetId</code>.</p>
        /// </li>
        /// </ul>
        /// <p>For more information about how to use AWS OpsWorks Stacks with a VPC, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-vpc.html">Running a Stack in a
        /// VPC</a>. For more information about default VPC and EC2-Classic, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported
        /// Platforms</a>. </p>
        pub fn vpc_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vpc_id(inp);
            self
        }
        pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vpc_id(input);
            self
        }
        /// Adds a key-value pair to `Attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        /// <p>One or more user-defined key-value pairs to be added to the stack attributes.</p>
        pub fn attributes(
            mut self,
            k: impl Into<crate::model::StackAttributesKeys>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.attributes(k, v);
            self
        }
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<crate::model::StackAttributesKeys, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_attributes(input);
            self
        }
        /// <p>The stack's AWS Identity and Access Management (IAM) role, which allows AWS OpsWorks Stacks to work with AWS
        /// resources on your behalf. You must set this parameter to the Amazon Resource Name (ARN) for an
        /// existing IAM role. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using
        /// Identifiers</a>.</p>
        pub fn service_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_role_arn(inp);
            self
        }
        pub fn set_service_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_role_arn(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an IAM profile that is the default profile for all of the stack's EC2 instances.
        /// For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using
        /// Identifiers</a>.</p>
        pub fn default_instance_profile_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_instance_profile_arn(inp);
            self
        }
        pub fn set_default_instance_profile_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_instance_profile_arn(input);
            self
        }
        /// <p>The stack's default operating system, which is installed on every instance unless you specify a different operating system when you create the instance. You can specify one of the following.</p>
        /// <ul>
        /// <li>
        /// <p>A supported Linux operating system: An Amazon Linux version, such as <code>Amazon Linux 2018.03</code>, <code>Amazon Linux 2017.09</code>, <code>Amazon Linux 2017.03</code>, <code>Amazon Linux 2016.09</code>,
        /// <code>Amazon Linux 2016.03</code>, <code>Amazon Linux 2015.09</code>, or <code>Amazon Linux 2015.03</code>.</p>
        /// </li>
        /// <li>
        /// <p>A supported Ubuntu operating system, such as <code>Ubuntu 16.04 LTS</code>, <code>Ubuntu 14.04 LTS</code>, or <code>Ubuntu 12.04 LTS</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CentOS Linux 7</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Red Hat Enterprise Linux 7</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>A supported Windows operating system, such as <code>Microsoft Windows Server 2012 R2 Base</code>,
        /// <code>Microsoft Windows Server 2012 R2 with SQL Server Express</code>,
        /// <code>Microsoft Windows Server 2012 R2 with SQL Server Standard</code>, or
        /// <code>Microsoft Windows Server 2012 R2 with SQL Server Web</code>.</p>
        /// </li>
        /// <li>
        /// <p>A custom AMI: <code>Custom</code>. You specify the custom AMI you want to use when
        /// you create instances. For more
        /// information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-custom-ami.html">
        /// Using Custom AMIs</a>.</p>
        /// </li>
        /// </ul>
        /// <p>The default option is the current Amazon Linux version.
        /// For more information about supported operating systems,
        /// see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-os.html">AWS OpsWorks Stacks Operating Systems</a>.</p>
        pub fn default_os(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_os(inp);
            self
        }
        pub fn set_default_os(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_default_os(input);
            self
        }
        /// <p>The stack's host name theme, with spaces replaced by underscores. The theme is used to
        /// generate host names for the stack's instances. By default, <code>HostnameTheme</code> is set
        /// to <code>Layer_Dependent</code>, which creates host names by appending integers to the layer's
        /// short name. The other themes are:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Baked_Goods</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Clouds</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Europe_Cities</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Fruits</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Greek_Deities_and_Titans</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Legendary_creatures_from_Japan</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Planets_and_Moons</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Roman_Deities</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Scottish_Islands</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>US_Cities</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Wild_Cats</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To obtain a generated host name, call <code>GetHostNameSuggestion</code>, which returns a
        /// host name based on the current theme.</p>
        pub fn hostname_theme(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.hostname_theme(inp);
            self
        }
        pub fn set_hostname_theme(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_hostname_theme(input);
            self
        }
        /// <p>The stack's default Availability Zone, which must be in the specified region. For more
        /// information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and
        /// Endpoints</a>. If you also specify a value for <code>DefaultSubnetId</code>, the subnet must
        /// be in the same zone. For more information, see the <code>VpcId</code> parameter description.
        /// </p>
        pub fn default_availability_zone(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_availability_zone(inp);
            self
        }
        pub fn set_default_availability_zone(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_availability_zone(input);
            self
        }
        /// <p>The stack's default VPC subnet ID. This parameter is required if you specify a value for the
        /// <code>VpcId</code> parameter. All instances are launched into this subnet unless you specify
        /// otherwise when you create the instance. If you also specify a value for
        /// <code>DefaultAvailabilityZone</code>, the subnet must be in that zone. For information on
        /// default values and when this parameter is required, see the <code>VpcId</code> parameter
        /// description. </p>
        pub fn default_subnet_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_subnet_id(inp);
            self
        }
        pub fn set_default_subnet_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_subnet_id(input);
            self
        }
        /// <p>A string that contains user-defined, custom JSON. It can be used to override the corresponding default stack configuration attribute values or to pass data to recipes. The string should be in the following format:</p>
        /// <p>
        /// <code>"{\"key1\": \"value1\", \"key2\": \"value2\",...}"</code>
        /// </p>
        /// <p>For more information about custom JSON, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-json.html">Use Custom JSON to
        /// Modify the Stack Configuration Attributes</a>.</p>
        pub fn custom_json(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_json(inp);
            self
        }
        pub fn set_custom_json(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_custom_json(input);
            self
        }
        /// <p>The configuration manager. When you create a stack we recommend that you use the configuration manager to specify the Chef version: 12, 11.10, or 11.4 for Linux stacks, or 12.2 for Windows stacks. The default value for Linux stacks is currently 12.</p>
        pub fn configuration_manager(
            mut self,
            inp: crate::model::StackConfigurationManager,
        ) -> Self {
            self.inner = self.inner.configuration_manager(inp);
            self
        }
        pub fn set_configuration_manager(
            mut self,
            input: std::option::Option<crate::model::StackConfigurationManager>,
        ) -> Self {
            self.inner = self.inner.set_configuration_manager(input);
            self
        }
        /// <p>A <code>ChefConfiguration</code> object that specifies whether to enable Berkshelf and the
        /// Berkshelf version on Chef 11.10 stacks. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-creating.html">Create a New Stack</a>.</p>
        pub fn chef_configuration(mut self, inp: crate::model::ChefConfiguration) -> Self {
            self.inner = self.inner.chef_configuration(inp);
            self
        }
        pub fn set_chef_configuration(
            mut self,
            input: std::option::Option<crate::model::ChefConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_chef_configuration(input);
            self
        }
        /// <p>Whether the stack uses custom cookbooks.</p>
        pub fn use_custom_cookbooks(mut self, inp: bool) -> Self {
            self.inner = self.inner.use_custom_cookbooks(inp);
            self
        }
        pub fn set_use_custom_cookbooks(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_use_custom_cookbooks(input);
            self
        }
        /// <p>Whether to associate the AWS OpsWorks Stacks built-in security groups with the stack's layers.</p>
        /// <p>AWS OpsWorks Stacks provides a standard set of built-in security groups, one for each layer, which are
        /// associated with layers by default. With <code>UseOpsworksSecurityGroups</code> you can instead
        /// provide your own custom security groups. <code>UseOpsworksSecurityGroups</code> has the
        /// following settings: </p>
        /// <ul>
        /// <li>
        /// <p>True - AWS OpsWorks Stacks automatically associates the appropriate built-in security group with each layer (default setting). You can associate additional security groups with a layer after you create it, but you cannot delete the built-in security group.</p>
        /// </li>
        /// <li>
        /// <p>False - AWS OpsWorks Stacks does not associate built-in security groups with layers. You must create appropriate EC2 security groups and associate a security group with each layer that you create. However, you can still manually associate a built-in security group with a layer on creation; custom security groups are required only for those layers that need custom settings.</p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-creating.html">Create a New
        /// Stack</a>.</p>
        pub fn use_opsworks_security_groups(mut self, inp: bool) -> Self {
            self.inner = self.inner.use_opsworks_security_groups(inp);
            self
        }
        pub fn set_use_opsworks_security_groups(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.inner = self.inner.set_use_opsworks_security_groups(input);
            self
        }
        /// <p>Contains the information required to retrieve an app or cookbook from a repository. For more information,
        /// see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html">Adding Apps</a> or
        /// <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook.html">Cookbooks and Recipes</a>.</p>
        pub fn custom_cookbooks_source(mut self, inp: crate::model::Source) -> Self {
            self.inner = self.inner.custom_cookbooks_source(inp);
            self
        }
        pub fn set_custom_cookbooks_source(
            mut self,
            input: std::option::Option<crate::model::Source>,
        ) -> Self {
            self.inner = self.inner.set_custom_cookbooks_source(input);
            self
        }
        /// <p>A default Amazon EC2 key pair name. The default value is none. If you specify a key pair name, AWS
        /// OpsWorks installs the public key on the instance and you can use the private key with an SSH
        /// client to log in to the instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-ssh.html"> Using SSH to
        /// Communicate with an Instance</a> and <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/security-ssh-access.html"> Managing SSH
        /// Access</a>. You can override this setting by specifying a different key pair, or no key
        /// pair, when you <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-add.html">
        /// create an instance</a>. </p>
        pub fn default_ssh_key_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_ssh_key_name(inp);
            self
        }
        pub fn set_default_ssh_key_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_ssh_key_name(input);
            self
        }
        /// <p>The default root device type. This value is the default for all instances in the stack,
        /// but you can override it when you create an instance. The default option is
        /// <code>instance-store</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
        pub fn default_root_device_type(mut self, inp: crate::model::RootDeviceType) -> Self {
            self.inner = self.inner.default_root_device_type(inp);
            self
        }
        pub fn set_default_root_device_type(
            mut self,
            input: std::option::Option<crate::model::RootDeviceType>,
        ) -> Self {
            self.inner = self.inner.set_default_root_device_type(input);
            self
        }
        /// <p>The default AWS OpsWorks Stacks agent version. You have the following options:</p>
        /// <ul>
        /// <li>
        /// <p>Auto-update - Set this parameter to <code>LATEST</code>. AWS OpsWorks Stacks
        /// automatically installs new agent versions on the stack's instances as soon as
        /// they are available.</p>
        /// </li>
        /// <li>
        /// <p>Fixed version - Set this parameter to your preferred agent version. To update the agent version, you must edit the stack configuration and specify a new version. AWS OpsWorks Stacks then automatically installs that version on the stack's instances.</p>
        /// </li>
        /// </ul>
        /// <p>The default setting is the most recent release of the agent. To specify an agent version,
        /// you must use the complete version number, not the abbreviated number shown on the console.
        /// For a list of available agent version numbers, call <a>DescribeAgentVersions</a>. AgentVersion cannot be set to Chef 12.2.</p>
        /// <note>
        /// <p>You can also specify an agent version when you create or update an instance, which overrides the stack's default setting.</p>
        /// </note>
        pub fn agent_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.agent_version(inp);
            self
        }
        pub fn set_agent_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_agent_version(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateUserProfile<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_user_profile_input::Builder,
    }
    impl<C, M, R> CreateUserProfile<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateUserProfileOutput,
            smithy_http::result::SdkError<crate::error::CreateUserProfileError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateUserProfileInputOperationOutputAlias,
                crate::output::CreateUserProfileOutput,
                crate::error::CreateUserProfileError,
                crate::input::CreateUserProfileInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user's IAM ARN; this can also be a federated user's ARN.</p>
        pub fn iam_user_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.iam_user_arn(inp);
            self
        }
        pub fn set_iam_user_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_iam_user_arn(input);
            self
        }
        /// <p>The user's SSH user name. The allowable characters are [a-z], [A-Z], [0-9], '-', and '_'. If
        /// the specified name includes other punctuation marks, AWS OpsWorks Stacks removes them. For example,
        /// <code>my.name</code> will be changed to <code>myname</code>. If you do not specify an SSH
        /// user name, AWS OpsWorks Stacks generates one from the IAM user name. </p>
        pub fn ssh_username(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ssh_username(inp);
            self
        }
        pub fn set_ssh_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ssh_username(input);
            self
        }
        /// <p>The user's public SSH key.</p>
        pub fn ssh_public_key(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ssh_public_key(inp);
            self
        }
        pub fn set_ssh_public_key(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_ssh_public_key(input);
            self
        }
        /// <p>Whether users can specify their own SSH public key through the My Settings page. For more
        /// information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/security-settingsshkey.html">Setting an IAM
        /// User's Public SSH Key</a>.</p>
        pub fn allow_self_management(mut self, inp: bool) -> Self {
            self.inner = self.inner.allow_self_management(inp);
            self
        }
        pub fn set_allow_self_management(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_allow_self_management(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_app_input::Builder,
    }
    impl<C, M, R> DeleteApp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteAppOutput,
            smithy_http::result::SdkError<crate::error::DeleteAppError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteAppInputOperationOutputAlias,
                crate::output::DeleteAppOutput,
                crate::error::DeleteAppError,
                crate::input::DeleteAppInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The app ID.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_instance_input::Builder,
    }
    impl<C, M, R> DeleteInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteInstanceOutput,
            smithy_http::result::SdkError<crate::error::DeleteInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteInstanceInputOperationOutputAlias,
                crate::output::DeleteInstanceOutput,
                crate::error::DeleteInstanceError,
                crate::input::DeleteInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance ID.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
        /// <p>Whether to delete the instance Elastic IP address.</p>
        pub fn delete_elastic_ip(mut self, inp: bool) -> Self {
            self.inner = self.inner.delete_elastic_ip(inp);
            self
        }
        pub fn set_delete_elastic_ip(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_delete_elastic_ip(input);
            self
        }
        /// <p>Whether to delete the instance's Amazon EBS volumes.</p>
        pub fn delete_volumes(mut self, inp: bool) -> Self {
            self.inner = self.inner.delete_volumes(inp);
            self
        }
        pub fn set_delete_volumes(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_delete_volumes(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteLayer<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_layer_input::Builder,
    }
    impl<C, M, R> DeleteLayer<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteLayerOutput,
            smithy_http::result::SdkError<crate::error::DeleteLayerError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteLayerInputOperationOutputAlias,
                crate::output::DeleteLayerOutput,
                crate::error::DeleteLayerError,
                crate::input::DeleteLayerInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The layer ID.</p>
        pub fn layer_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_id(inp);
            self
        }
        pub fn set_layer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_layer_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteStack<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_stack_input::Builder,
    }
    impl<C, M, R> DeleteStack<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteStackOutput,
            smithy_http::result::SdkError<crate::error::DeleteStackError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteStackInputOperationOutputAlias,
                crate::output::DeleteStackOutput,
                crate::error::DeleteStackError,
                crate::input::DeleteStackInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteUserProfile<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_user_profile_input::Builder,
    }
    impl<C, M, R> DeleteUserProfile<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteUserProfileOutput,
            smithy_http::result::SdkError<crate::error::DeleteUserProfileError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteUserProfileInputOperationOutputAlias,
                crate::output::DeleteUserProfileOutput,
                crate::error::DeleteUserProfileError,
                crate::input::DeleteUserProfileInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user's IAM ARN. This can also be a federated user's ARN.</p>
        pub fn iam_user_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.iam_user_arn(inp);
            self
        }
        pub fn set_iam_user_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_iam_user_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeregisterEcsCluster<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::deregister_ecs_cluster_input::Builder,
    }
    impl<C, M, R> DeregisterEcsCluster<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeregisterEcsClusterOutput,
            smithy_http::result::SdkError<crate::error::DeregisterEcsClusterError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeregisterEcsClusterInputOperationOutputAlias,
                crate::output::DeregisterEcsClusterOutput,
                crate::error::DeregisterEcsClusterError,
                crate::input::DeregisterEcsClusterInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The cluster's Amazon Resource Number (ARN).</p>
        pub fn ecs_cluster_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ecs_cluster_arn(inp);
            self
        }
        pub fn set_ecs_cluster_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_ecs_cluster_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeregisterElasticIp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::deregister_elastic_ip_input::Builder,
    }
    impl<C, M, R> DeregisterElasticIp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeregisterElasticIpOutput,
            smithy_http::result::SdkError<crate::error::DeregisterElasticIpError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeregisterElasticIpInputOperationOutputAlias,
                crate::output::DeregisterElasticIpOutput,
                crate::error::DeregisterElasticIpError,
                crate::input::DeregisterElasticIpInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Elastic IP address.</p>
        pub fn elastic_ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.elastic_ip(inp);
            self
        }
        pub fn set_elastic_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_elastic_ip(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeregisterInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::deregister_instance_input::Builder,
    }
    impl<C, M, R> DeregisterInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeregisterInstanceOutput,
            smithy_http::result::SdkError<crate::error::DeregisterInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeregisterInstanceInputOperationOutputAlias,
                crate::output::DeregisterInstanceOutput,
                crate::error::DeregisterInstanceError,
                crate::input::DeregisterInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance ID.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeregisterRdsDbInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::deregister_rds_db_instance_input::Builder,
    }
    impl<C, M, R> DeregisterRdsDbInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeregisterRdsDbInstanceOutput,
            smithy_http::result::SdkError<crate::error::DeregisterRdsDbInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeregisterRdsDbInstanceInputOperationOutputAlias,
                crate::output::DeregisterRdsDbInstanceOutput,
                crate::error::DeregisterRdsDbInstanceError,
                crate::input::DeregisterRdsDbInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon RDS instance's ARN.</p>
        pub fn rds_db_instance_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rds_db_instance_arn(inp);
            self
        }
        pub fn set_rds_db_instance_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_rds_db_instance_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeregisterVolume<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::deregister_volume_input::Builder,
    }
    impl<C, M, R> DeregisterVolume<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeregisterVolumeOutput,
            smithy_http::result::SdkError<crate::error::DeregisterVolumeError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeregisterVolumeInputOperationOutputAlias,
                crate::output::DeregisterVolumeOutput,
                crate::error::DeregisterVolumeError,
                crate::input::DeregisterVolumeInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The AWS OpsWorks Stacks volume ID, which is the GUID that AWS OpsWorks Stacks assigned to the instance when you registered the volume with the stack, not the Amazon EC2 volume ID.</p>
        pub fn volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.volume_id(inp);
            self
        }
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_volume_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeAgentVersions<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_agent_versions_input::Builder,
    }
    impl<C, M, R> DescribeAgentVersions<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeAgentVersionsOutput,
            smithy_http::result::SdkError<crate::error::DescribeAgentVersionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeAgentVersionsInputOperationOutputAlias,
                crate::output::DescribeAgentVersionsOutput,
                crate::error::DescribeAgentVersionsError,
                crate::input::DescribeAgentVersionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>The configuration manager.</p>
        pub fn configuration_manager(
            mut self,
            inp: crate::model::StackConfigurationManager,
        ) -> Self {
            self.inner = self.inner.configuration_manager(inp);
            self
        }
        pub fn set_configuration_manager(
            mut self,
            input: std::option::Option<crate::model::StackConfigurationManager>,
        ) -> Self {
            self.inner = self.inner.set_configuration_manager(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeApps<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_apps_input::Builder,
    }
    impl<C, M, R> DescribeApps<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeAppsOutput,
            smithy_http::result::SdkError<crate::error::DescribeAppsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeAppsInputOperationOutputAlias,
                crate::output::DescribeAppsOutput,
                crate::error::DescribeAppsError,
                crate::input::DescribeAppsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The app stack ID. If you use this parameter, <code>DescribeApps</code> returns a description
        /// of the apps in the specified stack.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// Appends an item to `AppIds`.
        ///
        /// To override the contents of this collection use [`set_app_ids`](Self::set_app_ids).
        /// <p>An array of app IDs for the apps to be described. If you use this parameter,
        /// <code>DescribeApps</code> returns a description of the specified apps. Otherwise, it returns
        /// a description of every app.</p>
        pub fn app_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_ids(inp);
            self
        }
        pub fn set_app_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_app_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeCommands<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_commands_input::Builder,
    }
    impl<C, M, R> DescribeCommands<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeCommandsOutput,
            smithy_http::result::SdkError<crate::error::DescribeCommandsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeCommandsInputOperationOutputAlias,
                crate::output::DescribeCommandsOutput,
                crate::error::DescribeCommandsError,
                crate::input::DescribeCommandsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The deployment ID. If you include this parameter, <code>DescribeCommands</code> returns a
        /// description of the commands associated with the specified deployment.</p>
        pub fn deployment_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.deployment_id(inp);
            self
        }
        pub fn set_deployment_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_deployment_id(input);
            self
        }
        /// <p>The instance ID. If you include this parameter, <code>DescribeCommands</code> returns a
        /// description of the commands associated with the specified instance.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
        /// Appends an item to `CommandIds`.
        ///
        /// To override the contents of this collection use [`set_command_ids`](Self::set_command_ids).
        /// <p>An array of command IDs. If you include this parameter, <code>DescribeCommands</code> returns
        /// a description of the specified commands. Otherwise, it returns a description of every
        /// command.</p>
        pub fn command_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.command_ids(inp);
            self
        }
        pub fn set_command_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_command_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeDeployments<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_deployments_input::Builder,
    }
    impl<C, M, R> DescribeDeployments<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeDeploymentsOutput,
            smithy_http::result::SdkError<crate::error::DescribeDeploymentsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeDeploymentsInputOperationOutputAlias,
                crate::output::DescribeDeploymentsOutput,
                crate::error::DescribeDeploymentsError,
                crate::input::DescribeDeploymentsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID. If you include this parameter, the command returns a
        /// description of the commands associated with the specified stack.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>The app ID. If you include this parameter, the command returns a
        /// description of the commands associated with the specified app.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
        /// Appends an item to `DeploymentIds`.
        ///
        /// To override the contents of this collection use [`set_deployment_ids`](Self::set_deployment_ids).
        /// <p>An array of deployment IDs to be described. If you include this parameter,
        /// the command returns a description of the specified deployments.
        /// Otherwise, it returns a description of every deployment.</p>
        pub fn deployment_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.deployment_ids(inp);
            self
        }
        pub fn set_deployment_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_deployment_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeEcsClusters<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_ecs_clusters_input::Builder,
    }
    impl<C, M, R> DescribeEcsClusters<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeEcsClustersOutput,
            smithy_http::result::SdkError<crate::error::DescribeEcsClustersError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeEcsClustersInputOperationOutputAlias,
                crate::output::DescribeEcsClustersOutput,
                crate::error::DescribeEcsClustersError,
                crate::input::DescribeEcsClustersInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `EcsClusterArns`.
        ///
        /// To override the contents of this collection use [`set_ecs_cluster_arns`](Self::set_ecs_cluster_arns).
        /// <p>A list of ARNs, one for each cluster to be described.</p>
        pub fn ecs_cluster_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ecs_cluster_arns(inp);
            self
        }
        pub fn set_ecs_cluster_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_ecs_cluster_arns(input);
            self
        }
        /// <p>A stack ID.
        /// <code>DescribeEcsClusters</code> returns a description of the cluster that is registered with the stack.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>If the previous paginated request did not return all of the remaining results,
        /// the response object's<code>NextToken</code> parameter value is set to a token.
        /// To retrieve the next set of results, call <code>DescribeEcsClusters</code>
        /// again and assign that token to the request object's <code>NextToken</code> parameter.
        /// If there are no remaining results, the previous response
        /// object's <code>NextToken</code> parameter is set to <code>null</code>.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>To receive a paginated response, use this parameter to specify the maximum number
        /// of results to be returned with a single call. If the number of available results exceeds this maximum, the
        /// response includes a <code>NextToken</code> value that you can assign
        /// to the <code>NextToken</code> request parameter to get the next set of results.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeElasticIps<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_elastic_ips_input::Builder,
    }
    impl<C, M, R> DescribeElasticIps<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeElasticIpsOutput,
            smithy_http::result::SdkError<crate::error::DescribeElasticIpsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeElasticIpsInputOperationOutputAlias,
                crate::output::DescribeElasticIpsOutput,
                crate::error::DescribeElasticIpsError,
                crate::input::DescribeElasticIpsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance ID. If you include this parameter, <code>DescribeElasticIps</code> returns a
        /// description of the Elastic IP addresses associated with the specified instance.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
        /// <p>A stack ID. If you include this parameter, <code>DescribeElasticIps</code> returns a
        /// description of the Elastic IP addresses that are registered with the specified stack.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// Appends an item to `Ips`.
        ///
        /// To override the contents of this collection use [`set_ips`](Self::set_ips).
        /// <p>An array of Elastic IP addresses to be described. If you include this parameter,
        /// <code>DescribeElasticIps</code> returns a description of the specified Elastic IP addresses.
        /// Otherwise, it returns a description of every Elastic IP address.</p>
        pub fn ips(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ips(inp);
            self
        }
        pub fn set_ips(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_ips(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeElasticLoadBalancers<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_elastic_load_balancers_input::Builder,
    }
    impl<C, M, R> DescribeElasticLoadBalancers<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeElasticLoadBalancersOutput,
            smithy_http::result::SdkError<crate::error::DescribeElasticLoadBalancersError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeElasticLoadBalancersInputOperationOutputAlias,
                crate::output::DescribeElasticLoadBalancersOutput,
                crate::error::DescribeElasticLoadBalancersError,
                crate::input::DescribeElasticLoadBalancersInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A stack ID. The action describes the stack's Elastic Load Balancing instances.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// Appends an item to `LayerIds`.
        ///
        /// To override the contents of this collection use [`set_layer_ids`](Self::set_layer_ids).
        /// <p>A list of layer IDs. The action describes the Elastic Load Balancing instances for the specified layers.</p>
        pub fn layer_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_ids(inp);
            self
        }
        pub fn set_layer_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_layer_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeInstances<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_instances_input::Builder,
    }
    impl<C, M, R> DescribeInstances<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeInstancesOutput,
            smithy_http::result::SdkError<crate::error::DescribeInstancesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeInstancesInputOperationOutputAlias,
                crate::output::DescribeInstancesOutput,
                crate::error::DescribeInstancesError,
                crate::input::DescribeInstancesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A stack ID. If you use this parameter, <code>DescribeInstances</code> returns descriptions of
        /// the instances associated with the specified stack.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>A layer ID. If you use this parameter, <code>DescribeInstances</code> returns descriptions of
        /// the instances associated with the specified layer.</p>
        pub fn layer_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_id(inp);
            self
        }
        pub fn set_layer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_layer_id(input);
            self
        }
        /// Appends an item to `InstanceIds`.
        ///
        /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
        /// <p>An array of instance IDs to be described. If you use this parameter,
        /// <code>DescribeInstances</code> returns a description of the specified instances. Otherwise,
        /// it returns a description of every instance.</p>
        pub fn instance_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_ids(inp);
            self
        }
        pub fn set_instance_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_instance_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeLayers<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_layers_input::Builder,
    }
    impl<C, M, R> DescribeLayers<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeLayersOutput,
            smithy_http::result::SdkError<crate::error::DescribeLayersError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeLayersInputOperationOutputAlias,
                crate::output::DescribeLayersOutput,
                crate::error::DescribeLayersError,
                crate::input::DescribeLayersInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// Appends an item to `LayerIds`.
        ///
        /// To override the contents of this collection use [`set_layer_ids`](Self::set_layer_ids).
        /// <p>An array of layer IDs that specify the layers to be described. If you omit this parameter,
        /// <code>DescribeLayers</code> returns a description of every layer in the specified stack.</p>
        pub fn layer_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_ids(inp);
            self
        }
        pub fn set_layer_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_layer_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeLoadBasedAutoScaling<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_load_based_auto_scaling_input::Builder,
    }
    impl<C, M, R> DescribeLoadBasedAutoScaling<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeLoadBasedAutoScalingOutput,
            smithy_http::result::SdkError<crate::error::DescribeLoadBasedAutoScalingError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeLoadBasedAutoScalingInputOperationOutputAlias,
                crate::output::DescribeLoadBasedAutoScalingOutput,
                crate::error::DescribeLoadBasedAutoScalingError,
                crate::input::DescribeLoadBasedAutoScalingInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `LayerIds`.
        ///
        /// To override the contents of this collection use [`set_layer_ids`](Self::set_layer_ids).
        /// <p>An array of layer IDs.</p>
        pub fn layer_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_ids(inp);
            self
        }
        pub fn set_layer_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_layer_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeMyUserProfile<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_my_user_profile_input::Builder,
    }
    impl<C, M, R> DescribeMyUserProfile<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeMyUserProfileOutput,
            smithy_http::result::SdkError<crate::error::DescribeMyUserProfileError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeMyUserProfileInputOperationOutputAlias,
                crate::output::DescribeMyUserProfileOutput,
                crate::error::DescribeMyUserProfileError,
                crate::input::DescribeMyUserProfileInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeOperatingSystems<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_operating_systems_input::Builder,
    }
    impl<C, M, R> DescribeOperatingSystems<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeOperatingSystemsOutput,
            smithy_http::result::SdkError<crate::error::DescribeOperatingSystemsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeOperatingSystemsInputOperationOutputAlias,
                crate::output::DescribeOperatingSystemsOutput,
                crate::error::DescribeOperatingSystemsError,
                crate::input::DescribeOperatingSystemsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribePermissions<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_permissions_input::Builder,
    }
    impl<C, M, R> DescribePermissions<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribePermissionsOutput,
            smithy_http::result::SdkError<crate::error::DescribePermissionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribePermissionsInputOperationOutputAlias,
                crate::output::DescribePermissionsOutput,
                crate::error::DescribePermissionsError,
                crate::input::DescribePermissionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user's IAM ARN. This can also be a federated user's ARN. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using
        /// Identifiers</a>.</p>
        pub fn iam_user_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.iam_user_arn(inp);
            self
        }
        pub fn set_iam_user_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_iam_user_arn(input);
            self
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeRaidArrays<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_raid_arrays_input::Builder,
    }
    impl<C, M, R> DescribeRaidArrays<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeRaidArraysOutput,
            smithy_http::result::SdkError<crate::error::DescribeRaidArraysError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeRaidArraysInputOperationOutputAlias,
                crate::output::DescribeRaidArraysOutput,
                crate::error::DescribeRaidArraysError,
                crate::input::DescribeRaidArraysInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance ID. If you use this parameter, <code>DescribeRaidArrays</code> returns
        /// descriptions of the RAID arrays associated with the specified instance. </p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// Appends an item to `RaidArrayIds`.
        ///
        /// To override the contents of this collection use [`set_raid_array_ids`](Self::set_raid_array_ids).
        /// <p>An array of RAID array IDs. If you use this parameter, <code>DescribeRaidArrays</code>
        /// returns descriptions of the specified arrays. Otherwise, it returns a description of every
        /// array.</p>
        pub fn raid_array_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.raid_array_ids(inp);
            self
        }
        pub fn set_raid_array_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_raid_array_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeRdsDbInstances<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_rds_db_instances_input::Builder,
    }
    impl<C, M, R> DescribeRdsDbInstances<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeRdsDbInstancesOutput,
            smithy_http::result::SdkError<crate::error::DescribeRdsDbInstancesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeRdsDbInstancesInputOperationOutputAlias,
                crate::output::DescribeRdsDbInstancesOutput,
                crate::error::DescribeRdsDbInstancesError,
                crate::input::DescribeRdsDbInstancesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the stack with which the instances are registered. The operation returns descriptions of all registered Amazon RDS instances.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// Appends an item to `RdsDbInstanceArns`.
        ///
        /// To override the contents of this collection use [`set_rds_db_instance_arns`](Self::set_rds_db_instance_arns).
        /// <p>An array containing the ARNs of the instances to be described.</p>
        pub fn rds_db_instance_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rds_db_instance_arns(inp);
            self
        }
        pub fn set_rds_db_instance_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_rds_db_instance_arns(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeServiceErrors<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_service_errors_input::Builder,
    }
    impl<C, M, R> DescribeServiceErrors<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeServiceErrorsOutput,
            smithy_http::result::SdkError<crate::error::DescribeServiceErrorsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeServiceErrorsInputOperationOutputAlias,
                crate::output::DescribeServiceErrorsOutput,
                crate::error::DescribeServiceErrorsError,
                crate::input::DescribeServiceErrorsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID. If you use this parameter, <code>DescribeServiceErrors</code> returns
        /// descriptions of the errors associated with the specified stack.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>The instance ID. If you use this parameter, <code>DescribeServiceErrors</code> returns
        /// descriptions of the errors associated with the specified instance.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
        /// Appends an item to `ServiceErrorIds`.
        ///
        /// To override the contents of this collection use [`set_service_error_ids`](Self::set_service_error_ids).
        /// <p>An array of service error IDs. If you use this parameter, <code>DescribeServiceErrors</code>
        /// returns descriptions of the specified errors. Otherwise, it returns a description of every
        /// error.</p>
        pub fn service_error_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_error_ids(inp);
            self
        }
        pub fn set_service_error_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_service_error_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStackProvisioningParameters<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_stack_provisioning_parameters_input::Builder,
    }
    impl<C, M, R> DescribeStackProvisioningParameters<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeStackProvisioningParametersOutput,
            smithy_http::result::SdkError<crate::error::DescribeStackProvisioningParametersError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeStackProvisioningParametersInputOperationOutputAlias,
                crate::output::DescribeStackProvisioningParametersOutput,
                crate::error::DescribeStackProvisioningParametersError,
                crate::input::DescribeStackProvisioningParametersInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStacks<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_stacks_input::Builder,
    }
    impl<C, M, R> DescribeStacks<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeStacksOutput,
            smithy_http::result::SdkError<crate::error::DescribeStacksError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeStacksInputOperationOutputAlias,
                crate::output::DescribeStacksOutput,
                crate::error::DescribeStacksError,
                crate::input::DescribeStacksInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `StackIds`.
        ///
        /// To override the contents of this collection use [`set_stack_ids`](Self::set_stack_ids).
        /// <p>An array of stack IDs that specify the stacks to be described. If you omit this parameter,
        /// <code>DescribeStacks</code> returns a description of every stack.</p>
        pub fn stack_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_ids(inp);
            self
        }
        pub fn set_stack_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_stack_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeStackSummary<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_stack_summary_input::Builder,
    }
    impl<C, M, R> DescribeStackSummary<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeStackSummaryOutput,
            smithy_http::result::SdkError<crate::error::DescribeStackSummaryError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeStackSummaryInputOperationOutputAlias,
                crate::output::DescribeStackSummaryOutput,
                crate::error::DescribeStackSummaryError,
                crate::input::DescribeStackSummaryInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeTimeBasedAutoScaling<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_time_based_auto_scaling_input::Builder,
    }
    impl<C, M, R> DescribeTimeBasedAutoScaling<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeTimeBasedAutoScalingOutput,
            smithy_http::result::SdkError<crate::error::DescribeTimeBasedAutoScalingError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeTimeBasedAutoScalingInputOperationOutputAlias,
                crate::output::DescribeTimeBasedAutoScalingOutput,
                crate::error::DescribeTimeBasedAutoScalingError,
                crate::input::DescribeTimeBasedAutoScalingInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `InstanceIds`.
        ///
        /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
        /// <p>An array of instance IDs.</p>
        pub fn instance_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_ids(inp);
            self
        }
        pub fn set_instance_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_instance_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeUserProfiles<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_user_profiles_input::Builder,
    }
    impl<C, M, R> DescribeUserProfiles<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeUserProfilesOutput,
            smithy_http::result::SdkError<crate::error::DescribeUserProfilesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeUserProfilesInputOperationOutputAlias,
                crate::output::DescribeUserProfilesOutput,
                crate::error::DescribeUserProfilesError,
                crate::input::DescribeUserProfilesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `IamUserArns`.
        ///
        /// To override the contents of this collection use [`set_iam_user_arns`](Self::set_iam_user_arns).
        /// <p>An array of IAM or federated user ARNs that identify the users to be described.</p>
        pub fn iam_user_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.iam_user_arns(inp);
            self
        }
        pub fn set_iam_user_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_iam_user_arns(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeVolumes<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_volumes_input::Builder,
    }
    impl<C, M, R> DescribeVolumes<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeVolumesOutput,
            smithy_http::result::SdkError<crate::error::DescribeVolumesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeVolumesInputOperationOutputAlias,
                crate::output::DescribeVolumesOutput,
                crate::error::DescribeVolumesError,
                crate::input::DescribeVolumesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance ID. If you use this parameter, <code>DescribeVolumes</code> returns descriptions
        /// of the volumes associated with the specified instance.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
        /// <p>A stack ID. The action describes the stack's registered Amazon EBS volumes.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>The RAID array ID. If you use this parameter, <code>DescribeVolumes</code> returns
        /// descriptions of the volumes associated with the specified RAID array.</p>
        pub fn raid_array_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.raid_array_id(inp);
            self
        }
        pub fn set_raid_array_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_raid_array_id(input);
            self
        }
        /// Appends an item to `VolumeIds`.
        ///
        /// To override the contents of this collection use [`set_volume_ids`](Self::set_volume_ids).
        /// <p>Am array of volume IDs. If you use this parameter, <code>DescribeVolumes</code> returns
        /// descriptions of the specified volumes. Otherwise, it returns a description of every
        /// volume.</p>
        pub fn volume_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.volume_ids(inp);
            self
        }
        pub fn set_volume_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_volume_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DetachElasticLoadBalancer<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::detach_elastic_load_balancer_input::Builder,
    }
    impl<C, M, R> DetachElasticLoadBalancer<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DetachElasticLoadBalancerOutput,
            smithy_http::result::SdkError<crate::error::DetachElasticLoadBalancerError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DetachElasticLoadBalancerInputOperationOutputAlias,
                crate::output::DetachElasticLoadBalancerOutput,
                crate::error::DetachElasticLoadBalancerError,
                crate::input::DetachElasticLoadBalancerInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Elastic Load Balancing instance's name.</p>
        pub fn elastic_load_balancer_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.elastic_load_balancer_name(inp);
            self
        }
        pub fn set_elastic_load_balancer_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_elastic_load_balancer_name(input);
            self
        }
        /// <p>The ID of the layer that the Elastic Load Balancing instance is attached to.</p>
        pub fn layer_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_id(inp);
            self
        }
        pub fn set_layer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_layer_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateElasticIp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::disassociate_elastic_ip_input::Builder,
    }
    impl<C, M, R> DisassociateElasticIp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateElasticIpOutput,
            smithy_http::result::SdkError<crate::error::DisassociateElasticIpError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DisassociateElasticIpInputOperationOutputAlias,
                crate::output::DisassociateElasticIpOutput,
                crate::error::DisassociateElasticIpError,
                crate::input::DisassociateElasticIpInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Elastic IP address.</p>
        pub fn elastic_ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.elastic_ip(inp);
            self
        }
        pub fn set_elastic_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_elastic_ip(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetHostnameSuggestion<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_hostname_suggestion_input::Builder,
    }
    impl<C, M, R> GetHostnameSuggestion<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetHostnameSuggestionOutput,
            smithy_http::result::SdkError<crate::error::GetHostnameSuggestionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetHostnameSuggestionInputOperationOutputAlias,
                crate::output::GetHostnameSuggestionOutput,
                crate::error::GetHostnameSuggestionError,
                crate::input::GetHostnameSuggestionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The layer ID.</p>
        pub fn layer_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_id(inp);
            self
        }
        pub fn set_layer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_layer_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GrantAccess<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::grant_access_input::Builder,
    }
    impl<C, M, R> GrantAccess<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GrantAccessOutput,
            smithy_http::result::SdkError<crate::error::GrantAccessError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GrantAccessInputOperationOutputAlias,
                crate::output::GrantAccessOutput,
                crate::error::GrantAccessError,
                crate::input::GrantAccessInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance's AWS OpsWorks Stacks ID.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
        /// <p>The length of time (in minutes) that the grant is valid. When the grant expires at the end of this period, the user will no longer be able to use the credentials to log in. If the user is logged in at the time, he or she automatically will be logged out.</p>
        pub fn valid_for_in_minutes(mut self, inp: i32) -> Self {
            self.inner = self.inner.valid_for_in_minutes(inp);
            self
        }
        pub fn set_valid_for_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_valid_for_in_minutes(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTags<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_tags_input::Builder,
    }
    impl<C, M, R> ListTags<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsOutput,
            smithy_http::result::SdkError<crate::error::ListTagsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListTagsInputOperationOutputAlias,
                crate::output::ListTagsOutput,
                crate::error::ListTagsError,
                crate::input::ListTagsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack or layer's Amazon Resource Number (ARN).</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>Do not use. A validation exception occurs if you add a <code>MaxResults</code> parameter to a <code>ListTagsRequest</code> call.
        /// </p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>Do not use. A validation exception occurs if you add a <code>NextToken</code> parameter to a <code>ListTagsRequest</code> call.
        /// </p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RebootInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::reboot_instance_input::Builder,
    }
    impl<C, M, R> RebootInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RebootInstanceOutput,
            smithy_http::result::SdkError<crate::error::RebootInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RebootInstanceInputOperationOutputAlias,
                crate::output::RebootInstanceOutput,
                crate::error::RebootInstanceError,
                crate::input::RebootInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance ID.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RegisterEcsCluster<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::register_ecs_cluster_input::Builder,
    }
    impl<C, M, R> RegisterEcsCluster<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RegisterEcsClusterOutput,
            smithy_http::result::SdkError<crate::error::RegisterEcsClusterError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RegisterEcsClusterInputOperationOutputAlias,
                crate::output::RegisterEcsClusterOutput,
                crate::error::RegisterEcsClusterError,
                crate::input::RegisterEcsClusterInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The cluster's ARN.</p>
        pub fn ecs_cluster_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ecs_cluster_arn(inp);
            self
        }
        pub fn set_ecs_cluster_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_ecs_cluster_arn(input);
            self
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RegisterElasticIp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::register_elastic_ip_input::Builder,
    }
    impl<C, M, R> RegisterElasticIp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RegisterElasticIpOutput,
            smithy_http::result::SdkError<crate::error::RegisterElasticIpError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RegisterElasticIpInputOperationOutputAlias,
                crate::output::RegisterElasticIpOutput,
                crate::error::RegisterElasticIpError,
                crate::input::RegisterElasticIpInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Elastic IP address.</p>
        pub fn elastic_ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.elastic_ip(inp);
            self
        }
        pub fn set_elastic_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_elastic_ip(input);
            self
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RegisterInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::register_instance_input::Builder,
    }
    impl<C, M, R> RegisterInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RegisterInstanceOutput,
            smithy_http::result::SdkError<crate::error::RegisterInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RegisterInstanceInputOperationOutputAlias,
                crate::output::RegisterInstanceOutput,
                crate::error::RegisterInstanceError,
                crate::input::RegisterInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the stack that the instance is to be registered with.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>The instance's hostname.</p>
        pub fn hostname(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.hostname(inp);
            self
        }
        pub fn set_hostname(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_hostname(input);
            self
        }
        /// <p>The instance's public IP address.</p>
        pub fn public_ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.public_ip(inp);
            self
        }
        pub fn set_public_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_public_ip(input);
            self
        }
        /// <p>The instance's private IP address.</p>
        pub fn private_ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.private_ip(inp);
            self
        }
        pub fn set_private_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_private_ip(input);
            self
        }
        /// <p>The instances public RSA key. This key is used to encrypt communication between the instance and the service.</p>
        pub fn rsa_public_key(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rsa_public_key(inp);
            self
        }
        pub fn set_rsa_public_key(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_rsa_public_key(input);
            self
        }
        /// <p>The instances public RSA key fingerprint.</p>
        pub fn rsa_public_key_fingerprint(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rsa_public_key_fingerprint(inp);
            self
        }
        pub fn set_rsa_public_key_fingerprint(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_rsa_public_key_fingerprint(input);
            self
        }
        /// <p>An InstanceIdentity object that contains the instance's identity.</p>
        pub fn instance_identity(mut self, inp: crate::model::InstanceIdentity) -> Self {
            self.inner = self.inner.instance_identity(inp);
            self
        }
        pub fn set_instance_identity(
            mut self,
            input: std::option::Option<crate::model::InstanceIdentity>,
        ) -> Self {
            self.inner = self.inner.set_instance_identity(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RegisterRdsDbInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::register_rds_db_instance_input::Builder,
    }
    impl<C, M, R> RegisterRdsDbInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RegisterRdsDbInstanceOutput,
            smithy_http::result::SdkError<crate::error::RegisterRdsDbInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RegisterRdsDbInstanceInputOperationOutputAlias,
                crate::output::RegisterRdsDbInstanceOutput,
                crate::error::RegisterRdsDbInstanceError,
                crate::input::RegisterRdsDbInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>The Amazon RDS instance's ARN.</p>
        pub fn rds_db_instance_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rds_db_instance_arn(inp);
            self
        }
        pub fn set_rds_db_instance_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_rds_db_instance_arn(input);
            self
        }
        /// <p>The database's master user name.</p>
        pub fn db_user(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.db_user(inp);
            self
        }
        pub fn set_db_user(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_db_user(input);
            self
        }
        /// <p>The database password.</p>
        pub fn db_password(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.db_password(inp);
            self
        }
        pub fn set_db_password(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_db_password(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RegisterVolume<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::register_volume_input::Builder,
    }
    impl<C, M, R> RegisterVolume<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RegisterVolumeOutput,
            smithy_http::result::SdkError<crate::error::RegisterVolumeError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RegisterVolumeInputOperationOutputAlias,
                crate::output::RegisterVolumeOutput,
                crate::error::RegisterVolumeError,
                crate::input::RegisterVolumeInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon EBS volume ID.</p>
        pub fn ec2_volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ec2_volume_id(inp);
            self
        }
        pub fn set_ec2_volume_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_ec2_volume_id(input);
            self
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetLoadBasedAutoScaling<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::set_load_based_auto_scaling_input::Builder,
    }
    impl<C, M, R> SetLoadBasedAutoScaling<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetLoadBasedAutoScalingOutput,
            smithy_http::result::SdkError<crate::error::SetLoadBasedAutoScalingError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::SetLoadBasedAutoScalingInputOperationOutputAlias,
                crate::output::SetLoadBasedAutoScalingOutput,
                crate::error::SetLoadBasedAutoScalingError,
                crate::input::SetLoadBasedAutoScalingInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The layer ID.</p>
        pub fn layer_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_id(inp);
            self
        }
        pub fn set_layer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_layer_id(input);
            self
        }
        /// <p>Enables load-based auto scaling for the layer.</p>
        pub fn enable(mut self, inp: bool) -> Self {
            self.inner = self.inner.enable(inp);
            self
        }
        pub fn set_enable(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enable(input);
            self
        }
        /// <p>An <code>AutoScalingThresholds</code> object with the upscaling threshold configuration. If
        /// the load exceeds these thresholds for a specified amount of time, AWS OpsWorks Stacks starts a specified
        /// number of instances.</p>
        pub fn up_scaling(mut self, inp: crate::model::AutoScalingThresholds) -> Self {
            self.inner = self.inner.up_scaling(inp);
            self
        }
        pub fn set_up_scaling(
            mut self,
            input: std::option::Option<crate::model::AutoScalingThresholds>,
        ) -> Self {
            self.inner = self.inner.set_up_scaling(input);
            self
        }
        /// <p>An <code>AutoScalingThresholds</code> object with the downscaling threshold configuration. If
        /// the load falls below these thresholds for a specified amount of time, AWS OpsWorks Stacks stops a specified
        /// number of instances.</p>
        pub fn down_scaling(mut self, inp: crate::model::AutoScalingThresholds) -> Self {
            self.inner = self.inner.down_scaling(inp);
            self
        }
        pub fn set_down_scaling(
            mut self,
            input: std::option::Option<crate::model::AutoScalingThresholds>,
        ) -> Self {
            self.inner = self.inner.set_down_scaling(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetPermission<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::set_permission_input::Builder,
    }
    impl<C, M, R> SetPermission<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetPermissionOutput,
            smithy_http::result::SdkError<crate::error::SetPermissionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::SetPermissionInputOperationOutputAlias,
                crate::output::SetPermissionOutput,
                crate::error::SetPermissionError,
                crate::input::SetPermissionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>The user's IAM ARN. This can also be a federated user's ARN.</p>
        pub fn iam_user_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.iam_user_arn(inp);
            self
        }
        pub fn set_iam_user_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_iam_user_arn(input);
            self
        }
        /// <p>The user is allowed to use SSH to communicate with the instance.</p>
        pub fn allow_ssh(mut self, inp: bool) -> Self {
            self.inner = self.inner.allow_ssh(inp);
            self
        }
        pub fn set_allow_ssh(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_allow_ssh(input);
            self
        }
        /// <p>The user is allowed to use <b>sudo</b> to elevate privileges.</p>
        pub fn allow_sudo(mut self, inp: bool) -> Self {
            self.inner = self.inner.allow_sudo(inp);
            self
        }
        pub fn set_allow_sudo(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_allow_sudo(input);
            self
        }
        /// <p>The user's permission level, which must be set to one of the following strings. You cannot set your own permissions level.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>deny</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>show</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>deploy</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>manage</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>iam_only</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>For more information about the permissions associated with these levels, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html">Managing User Permissions</a>.</p>
        pub fn level(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.level(inp);
            self
        }
        pub fn set_level(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_level(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetTimeBasedAutoScaling<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::set_time_based_auto_scaling_input::Builder,
    }
    impl<C, M, R> SetTimeBasedAutoScaling<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetTimeBasedAutoScalingOutput,
            smithy_http::result::SdkError<crate::error::SetTimeBasedAutoScalingError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::SetTimeBasedAutoScalingInputOperationOutputAlias,
                crate::output::SetTimeBasedAutoScalingOutput,
                crate::error::SetTimeBasedAutoScalingError,
                crate::input::SetTimeBasedAutoScalingInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance ID.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
        /// <p>An <code>AutoScalingSchedule</code> with the instance schedule.</p>
        pub fn auto_scaling_schedule(
            mut self,
            inp: crate::model::WeeklyAutoScalingSchedule,
        ) -> Self {
            self.inner = self.inner.auto_scaling_schedule(inp);
            self
        }
        pub fn set_auto_scaling_schedule(
            mut self,
            input: std::option::Option<crate::model::WeeklyAutoScalingSchedule>,
        ) -> Self {
            self.inner = self.inner.set_auto_scaling_schedule(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_instance_input::Builder,
    }
    impl<C, M, R> StartInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartInstanceOutput,
            smithy_http::result::SdkError<crate::error::StartInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartInstanceInputOperationOutputAlias,
                crate::output::StartInstanceOutput,
                crate::error::StartInstanceError,
                crate::input::StartInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance ID.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartStack<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_stack_input::Builder,
    }
    impl<C, M, R> StartStack<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartStackOutput,
            smithy_http::result::SdkError<crate::error::StartStackError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartStackInputOperationOutputAlias,
                crate::output::StartStackOutput,
                crate::error::StartStackError,
                crate::input::StartStackInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StopInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::stop_instance_input::Builder,
    }
    impl<C, M, R> StopInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StopInstanceOutput,
            smithy_http::result::SdkError<crate::error::StopInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StopInstanceInputOperationOutputAlias,
                crate::output::StopInstanceOutput,
                crate::error::StopInstanceError,
                crate::input::StopInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance ID.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
        /// <p>Specifies whether to force an instance to stop. If the instance's root device type is <code>ebs</code>, or EBS-backed,
        /// adding the <code>Force</code> parameter to the <code>StopInstances</code> API call disassociates the AWS OpsWorks Stacks instance from EC2, and forces deletion of <i>only</i> the OpsWorks Stacks instance.
        /// You must also delete the formerly-associated instance in EC2 after troubleshooting and replacing the AWS OpsWorks Stacks instance with a new one.</p>
        pub fn force(mut self, inp: bool) -> Self {
            self.inner = self.inner.force(inp);
            self
        }
        pub fn set_force(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_force(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StopStack<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::stop_stack_input::Builder,
    }
    impl<C, M, R> StopStack<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StopStackOutput,
            smithy_http::result::SdkError<crate::error::StopStackError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StopStackInputOperationOutputAlias,
                crate::output::StopStackOutput,
                crate::error::StopStackError,
                crate::input::StopStackInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C, M, R> TagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TagResourceInputOperationOutputAlias,
                crate::output::TagResourceOutput,
                crate::error::TagResourceError,
                crate::input::TagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack or layer's Amazon Resource Number (ARN).</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Adds a key-value pair to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>A map that contains tag keys and tag values that are attached to a stack or layer.</p>
        /// <ul>
        /// <li>
        /// <p>The key cannot be empty.</p>
        /// </li>
        /// <li>
        /// <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
        /// </li>
        /// <li>
        /// <p>A maximum of 40 tags is allowed for any resource.</p>
        /// </li>
        /// </ul>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UnassignInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::unassign_instance_input::Builder,
    }
    impl<C, M, R> UnassignInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UnassignInstanceOutput,
            smithy_http::result::SdkError<crate::error::UnassignInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UnassignInstanceInputOperationOutputAlias,
                crate::output::UnassignInstanceOutput,
                crate::error::UnassignInstanceError,
                crate::input::UnassignInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance ID.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UnassignVolume<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::unassign_volume_input::Builder,
    }
    impl<C, M, R> UnassignVolume<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UnassignVolumeOutput,
            smithy_http::result::SdkError<crate::error::UnassignVolumeError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UnassignVolumeInputOperationOutputAlias,
                crate::output::UnassignVolumeOutput,
                crate::error::UnassignVolumeError,
                crate::input::UnassignVolumeInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The volume ID.</p>
        pub fn volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.volume_id(inp);
            self
        }
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_volume_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C, M, R> UntagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UntagResourceInputOperationOutputAlias,
                crate::output::UntagResourceOutput,
                crate::error::UntagResourceError,
                crate::input::UntagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack or layer's Amazon Resource Number (ARN).</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        /// <p>A list of the keys of tags to be removed from a stack or layer.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateApp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_app_input::Builder,
    }
    impl<C, M, R> UpdateApp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateAppOutput,
            smithy_http::result::SdkError<crate::error::UpdateAppError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateAppInputOperationOutputAlias,
                crate::output::UpdateAppOutput,
                crate::error::UpdateAppError,
                crate::input::UpdateAppInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The app ID.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
        /// <p>The app name.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A description of the app.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// Appends an item to `DataSources`.
        ///
        /// To override the contents of this collection use [`set_data_sources`](Self::set_data_sources).
        /// <p>The app's data sources.</p>
        pub fn data_sources(mut self, inp: impl Into<crate::model::DataSource>) -> Self {
            self.inner = self.inner.data_sources(inp);
            self
        }
        pub fn set_data_sources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DataSource>>,
        ) -> Self {
            self.inner = self.inner.set_data_sources(input);
            self
        }
        /// <p>The app type.</p>
        pub fn r#type(mut self, inp: crate::model::AppType) -> Self {
            self.inner = self.inner.r#type(inp);
            self
        }
        pub fn set_type(mut self, input: std::option::Option<crate::model::AppType>) -> Self {
            self.inner = self.inner.set_type(input);
            self
        }
        /// <p>A <code>Source</code> object that specifies the app repository.</p>
        pub fn app_source(mut self, inp: crate::model::Source) -> Self {
            self.inner = self.inner.app_source(inp);
            self
        }
        pub fn set_app_source(mut self, input: std::option::Option<crate::model::Source>) -> Self {
            self.inner = self.inner.set_app_source(input);
            self
        }
        /// Appends an item to `Domains`.
        ///
        /// To override the contents of this collection use [`set_domains`](Self::set_domains).
        /// <p>The app's virtual host settings, with multiple domains separated by commas. For example:
        /// <code>'www.example.com, example.com'</code>
        /// </p>
        pub fn domains(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domains(inp);
            self
        }
        pub fn set_domains(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_domains(input);
            self
        }
        /// <p>Whether SSL is enabled for the app.</p>
        pub fn enable_ssl(mut self, inp: bool) -> Self {
            self.inner = self.inner.enable_ssl(inp);
            self
        }
        pub fn set_enable_ssl(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enable_ssl(input);
            self
        }
        /// <p>An <code>SslConfiguration</code> object with the SSL configuration.</p>
        pub fn ssl_configuration(mut self, inp: crate::model::SslConfiguration) -> Self {
            self.inner = self.inner.ssl_configuration(inp);
            self
        }
        pub fn set_ssl_configuration(
            mut self,
            input: std::option::Option<crate::model::SslConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_ssl_configuration(input);
            self
        }
        /// Adds a key-value pair to `Attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        /// <p>One or more user-defined key/value pairs to be added to the stack attributes.</p>
        pub fn attributes(
            mut self,
            k: impl Into<crate::model::AppAttributesKeys>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.attributes(k, v);
            self
        }
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<crate::model::AppAttributesKeys, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_attributes(input);
            self
        }
        /// Appends an item to `Environment`.
        ///
        /// To override the contents of this collection use [`set_environment`](Self::set_environment).
        /// <p>An array of <code>EnvironmentVariable</code> objects that specify environment variables to be
        /// associated with the app. After you deploy the app, these variables are defined on the
        /// associated app server instances.For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html#workingapps-creating-environment"> Environment Variables</a>.</p>
        /// <p>There is no specific limit on the number of environment variables. However, the size of the associated data structure - which includes the variables' names, values, and protected flag values - cannot exceed 20 KB. This limit should accommodate most if not all use cases. Exceeding it will cause an exception with the message, "Environment: is too large (maximum is 20 KB)."</p>
        /// <note>
        /// <p>If you have specified one or more environment variables, you cannot modify the stack's Chef version.</p>
        /// </note>
        pub fn environment(mut self, inp: impl Into<crate::model::EnvironmentVariable>) -> Self {
            self.inner = self.inner.environment(inp);
            self
        }
        pub fn set_environment(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EnvironmentVariable>>,
        ) -> Self {
            self.inner = self.inner.set_environment(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateElasticIp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_elastic_ip_input::Builder,
    }
    impl<C, M, R> UpdateElasticIp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateElasticIpOutput,
            smithy_http::result::SdkError<crate::error::UpdateElasticIpError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateElasticIpInputOperationOutputAlias,
                crate::output::UpdateElasticIpOutput,
                crate::error::UpdateElasticIpError,
                crate::input::UpdateElasticIpInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The IP address for which you want to update the name.</p>
        pub fn elastic_ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.elastic_ip(inp);
            self
        }
        pub fn set_elastic_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_elastic_ip(input);
            self
        }
        /// <p>The new name.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_instance_input::Builder,
    }
    impl<C, M, R> UpdateInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateInstanceOutput,
            smithy_http::result::SdkError<crate::error::UpdateInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateInstanceInputOperationOutputAlias,
                crate::output::UpdateInstanceOutput,
                crate::error::UpdateInstanceError,
                crate::input::UpdateInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The instance ID.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_id(inp);
            self
        }
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_instance_id(input);
            self
        }
        /// Appends an item to `LayerIds`.
        ///
        /// To override the contents of this collection use [`set_layer_ids`](Self::set_layer_ids).
        /// <p>The instance's layer IDs.</p>
        pub fn layer_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_ids(inp);
            self
        }
        pub fn set_layer_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_layer_ids(input);
            self
        }
        /// <p>The instance type, such as <code>t2.micro</code>. For a list of supported instance types,
        /// open the stack in the console, choose <b>Instances</b>, and choose <b>+ Instance</b>.
        /// The <b>Size</b> list contains the currently supported types. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
        /// Families and Types</a>. The parameter values that you use to specify the various types are
        /// in the <b>API Name</b> column of the <b>Available Instance Types</b> table.</p>
        pub fn instance_type(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_type(inp);
            self
        }
        pub fn set_instance_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_type(input);
            self
        }
        /// <p>For load-based or time-based instances, the type. Windows stacks can use only time-based instances.</p>
        pub fn auto_scaling_type(mut self, inp: crate::model::AutoScalingType) -> Self {
            self.inner = self.inner.auto_scaling_type(inp);
            self
        }
        pub fn set_auto_scaling_type(
            mut self,
            input: std::option::Option<crate::model::AutoScalingType>,
        ) -> Self {
            self.inner = self.inner.set_auto_scaling_type(input);
            self
        }
        /// <p>The instance host name.</p>
        pub fn hostname(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.hostname(inp);
            self
        }
        pub fn set_hostname(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_hostname(input);
            self
        }
        /// <p>The instance's operating system, which must be set to one of the following. You cannot update an instance that is using a custom AMI.</p>
        /// <ul>
        /// <li>
        /// <p>A supported Linux operating system: An Amazon Linux version, such as <code>Amazon Linux 2018.03</code>, <code>Amazon Linux 2017.09</code>, <code>Amazon Linux 2017.03</code>, <code>Amazon Linux 2016.09</code>, <code>Amazon Linux 2016.03</code>, <code>Amazon Linux 2015.09</code>, or <code>Amazon Linux
        /// 2015.03</code>.</p>
        /// </li>
        /// <li>
        /// <p>A supported Ubuntu operating system, such as <code>Ubuntu 16.04 LTS</code>, <code>Ubuntu 14.04 LTS</code>, or <code>Ubuntu 12.04 LTS</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CentOS Linux 7</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Red Hat Enterprise Linux 7</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>A supported Windows operating system, such as <code>Microsoft Windows Server 2012 R2 Base</code>, <code>Microsoft Windows Server 2012 R2 with SQL Server Express</code>,
        /// <code>Microsoft Windows Server 2012 R2 with SQL Server Standard</code>, or <code>Microsoft Windows Server 2012 R2 with SQL Server Web</code>.</p>
        /// </li>
        /// </ul>
        /// <p>For more information about supported operating systems,
        /// see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-os.html">AWS OpsWorks Stacks Operating Systems</a>.</p>
        /// <p>The default option is the current Amazon Linux version. If you set this parameter to
        /// <code>Custom</code>, you must use the AmiId parameter to
        /// specify the custom AMI that you want to use. For more information about supported operating
        /// systems, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-os.html">Operating Systems</a>. For more information about how to use custom AMIs with OpsWorks, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-custom-ami.html">Using
        /// Custom AMIs</a>.</p>
        /// <note>
        /// <p>You can specify a different Linux operating system for the updated stack, but you cannot change from Linux to Windows or Windows to Linux.</p>
        /// </note>
        pub fn os(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.os(inp);
            self
        }
        pub fn set_os(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_os(input);
            self
        }
        /// <p>The ID of the AMI that was used to create the instance. The value of this parameter must be the same AMI ID that the instance is already using.
        /// You cannot apply a new AMI to an instance by running UpdateInstance. UpdateInstance does not work on instances that are using custom AMIs.
        /// </p>
        pub fn ami_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ami_id(inp);
            self
        }
        pub fn set_ami_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ami_id(input);
            self
        }
        /// <p>The instance's Amazon EC2 key name.</p>
        pub fn ssh_key_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ssh_key_name(inp);
            self
        }
        pub fn set_ssh_key_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ssh_key_name(input);
            self
        }
        /// <p>The instance architecture. Instance types do not necessarily support both architectures. For
        /// a list of the architectures that are supported by the different instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
        /// Families and Types</a>.</p>
        pub fn architecture(mut self, inp: crate::model::Architecture) -> Self {
            self.inner = self.inner.architecture(inp);
            self
        }
        pub fn set_architecture(
            mut self,
            input: std::option::Option<crate::model::Architecture>,
        ) -> Self {
            self.inner = self.inner.set_architecture(input);
            self
        }
        /// <p>Whether to install operating system and package updates when the instance boots. The default
        /// value is <code>true</code>. To control when updates are installed, set this value to
        /// <code>false</code>. You must then update your instances manually by using
        /// <a>CreateDeployment</a> to run the <code>update_dependencies</code> stack command or
        /// by manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the
        /// instances. </p>
        /// <note>
        /// <p>We strongly recommend using the default value of <code>true</code>, to ensure that your
        /// instances have the latest security updates.</p>
        /// </note>
        pub fn install_updates_on_boot(mut self, inp: bool) -> Self {
            self.inner = self.inner.install_updates_on_boot(inp);
            self
        }
        pub fn set_install_updates_on_boot(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_install_updates_on_boot(input);
            self
        }
        /// <p>This property cannot be updated.</p>
        pub fn ebs_optimized(mut self, inp: bool) -> Self {
            self.inner = self.inner.ebs_optimized(inp);
            self
        }
        pub fn set_ebs_optimized(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_ebs_optimized(input);
            self
        }
        /// <p>The default AWS OpsWorks Stacks agent version. You have the following options:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>INHERIT</code> - Use the stack's default agent version setting.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <i>version_number</i> - Use the specified agent version.
        /// This value overrides the stack's default setting.
        /// To update the agent version, you must edit the instance configuration and specify a
        /// new version.
        /// AWS OpsWorks Stacks then automatically installs that version on the instance.</p>
        /// </li>
        /// </ul>
        /// <p>The default setting is <code>INHERIT</code>. To specify an agent version,
        /// you must use the complete version number, not the abbreviated number shown on the console.
        /// For a list of available agent version numbers, call <a>DescribeAgentVersions</a>.</p>
        /// <p>AgentVersion cannot be set to Chef 12.2.</p>
        pub fn agent_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.agent_version(inp);
            self
        }
        pub fn set_agent_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_agent_version(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateLayer<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_layer_input::Builder,
    }
    impl<C, M, R> UpdateLayer<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateLayerOutput,
            smithy_http::result::SdkError<crate::error::UpdateLayerError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateLayerInputOperationOutputAlias,
                crate::output::UpdateLayerOutput,
                crate::error::UpdateLayerError,
                crate::input::UpdateLayerInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The layer ID.</p>
        pub fn layer_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.layer_id(inp);
            self
        }
        pub fn set_layer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_layer_id(input);
            self
        }
        /// <p>The layer name, which is used by the console.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks Stacks and by Chef. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters and must be in the following format: /\A[a-z0-9\-\_\.]+\Z/.</p>
        /// <p>The built-in layers' short names are defined by AWS OpsWorks Stacks. For more information, see the <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/layers.html">Layer Reference</a>
        /// </p>
        pub fn shortname(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.shortname(inp);
            self
        }
        pub fn set_shortname(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_shortname(input);
            self
        }
        /// Adds a key-value pair to `Attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        /// <p>One or more user-defined key/value pairs to be added to the stack attributes.</p>
        pub fn attributes(
            mut self,
            k: impl Into<crate::model::LayerAttributesKeys>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.attributes(k, v);
            self
        }
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<crate::model::LayerAttributesKeys, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_attributes(input);
            self
        }
        /// <p>Specifies CloudWatch Logs configuration options for the layer. For more information, see <a>CloudWatchLogsLogStream</a>.</p>
        pub fn cloud_watch_logs_configuration(
            mut self,
            inp: crate::model::CloudWatchLogsConfiguration,
        ) -> Self {
            self.inner = self.inner.cloud_watch_logs_configuration(inp);
            self
        }
        pub fn set_cloud_watch_logs_configuration(
            mut self,
            input: std::option::Option<crate::model::CloudWatchLogsConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_cloud_watch_logs_configuration(input);
            self
        }
        /// <p>The ARN of an IAM profile to be used for all of the layer's EC2 instances. For more
        /// information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using
        /// Identifiers</a>.</p>
        pub fn custom_instance_profile_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_instance_profile_arn(inp);
            self
        }
        pub fn set_custom_instance_profile_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_custom_instance_profile_arn(input);
            self
        }
        /// <p>A JSON-formatted string containing custom stack configuration and deployment attributes
        /// to be installed on the layer's instances. For more information, see
        /// <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-json-override.html">
        /// Using Custom JSON</a>.
        /// </p>
        pub fn custom_json(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_json(inp);
            self
        }
        pub fn set_custom_json(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_custom_json(input);
            self
        }
        /// Appends an item to `CustomSecurityGroupIds`.
        ///
        /// To override the contents of this collection use [`set_custom_security_group_ids`](Self::set_custom_security_group_ids).
        /// <p>An array containing the layer's custom security group IDs.</p>
        pub fn custom_security_group_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_security_group_ids(inp);
            self
        }
        pub fn set_custom_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_custom_security_group_ids(input);
            self
        }
        /// Appends an item to `Packages`.
        ///
        /// To override the contents of this collection use [`set_packages`](Self::set_packages).
        /// <p>An array of <code>Package</code> objects that describe the layer's packages.</p>
        pub fn packages(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.packages(inp);
            self
        }
        pub fn set_packages(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_packages(input);
            self
        }
        /// Appends an item to `VolumeConfigurations`.
        ///
        /// To override the contents of this collection use [`set_volume_configurations`](Self::set_volume_configurations).
        /// <p>A <code>VolumeConfigurations</code> object that describes the layer's Amazon EBS volumes.</p>
        pub fn volume_configurations(
            mut self,
            inp: impl Into<crate::model::VolumeConfiguration>,
        ) -> Self {
            self.inner = self.inner.volume_configurations(inp);
            self
        }
        pub fn set_volume_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VolumeConfiguration>>,
        ) -> Self {
            self.inner = self.inner.set_volume_configurations(input);
            self
        }
        /// <p>Whether to disable auto healing for the layer.</p>
        pub fn enable_auto_healing(mut self, inp: bool) -> Self {
            self.inner = self.inner.enable_auto_healing(inp);
            self
        }
        pub fn set_enable_auto_healing(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enable_auto_healing(input);
            self
        }
        /// <p>Whether to automatically assign an <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP
        /// address</a> to the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit
        /// a Layer</a>.</p>
        pub fn auto_assign_elastic_ips(mut self, inp: bool) -> Self {
            self.inner = self.inner.auto_assign_elastic_ips(inp);
            self
        }
        pub fn set_auto_assign_elastic_ips(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_auto_assign_elastic_ips(input);
            self
        }
        /// <p>For stacks that are running in a VPC, whether to automatically assign a public IP address to
        /// the layer's instances. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-basics-edit.html">How to Edit
        /// a Layer</a>.</p>
        pub fn auto_assign_public_ips(mut self, inp: bool) -> Self {
            self.inner = self.inner.auto_assign_public_ips(inp);
            self
        }
        pub fn set_auto_assign_public_ips(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_auto_assign_public_ips(input);
            self
        }
        /// <p>A <code>LayerCustomRecipes</code> object that specifies the layer's custom recipes.</p>
        pub fn custom_recipes(mut self, inp: crate::model::Recipes) -> Self {
            self.inner = self.inner.custom_recipes(inp);
            self
        }
        pub fn set_custom_recipes(
            mut self,
            input: std::option::Option<crate::model::Recipes>,
        ) -> Self {
            self.inner = self.inner.set_custom_recipes(input);
            self
        }
        /// <p>Whether to install operating system and package updates when the instance boots. The default
        /// value is <code>true</code>. To control when updates are installed, set this value to
        /// <code>false</code>. You must then update your instances manually by using
        /// <a>CreateDeployment</a> to run the <code>update_dependencies</code> stack command or
        /// manually running <code>yum</code> (Amazon Linux) or <code>apt-get</code> (Ubuntu) on the
        /// instances. </p>
        /// <note>
        /// <p>We strongly recommend using the default value of <code>true</code>, to ensure that your
        /// instances have the latest security updates.</p>
        /// </note>
        pub fn install_updates_on_boot(mut self, inp: bool) -> Self {
            self.inner = self.inner.install_updates_on_boot(inp);
            self
        }
        pub fn set_install_updates_on_boot(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_install_updates_on_boot(input);
            self
        }
        /// <p>Whether to use Amazon EBS-optimized instances.</p>
        pub fn use_ebs_optimized_instances(mut self, inp: bool) -> Self {
            self.inner = self.inner.use_ebs_optimized_instances(inp);
            self
        }
        pub fn set_use_ebs_optimized_instances(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_use_ebs_optimized_instances(input);
            self
        }
        /// <p></p>
        pub fn lifecycle_event_configuration(
            mut self,
            inp: crate::model::LifecycleEventConfiguration,
        ) -> Self {
            self.inner = self.inner.lifecycle_event_configuration(inp);
            self
        }
        pub fn set_lifecycle_event_configuration(
            mut self,
            input: std::option::Option<crate::model::LifecycleEventConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_lifecycle_event_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateMyUserProfile<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_my_user_profile_input::Builder,
    }
    impl<C, M, R> UpdateMyUserProfile<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateMyUserProfileOutput,
            smithy_http::result::SdkError<crate::error::UpdateMyUserProfileError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateMyUserProfileInputOperationOutputAlias,
                crate::output::UpdateMyUserProfileOutput,
                crate::error::UpdateMyUserProfileError,
                crate::input::UpdateMyUserProfileInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user's SSH public key.</p>
        pub fn ssh_public_key(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ssh_public_key(inp);
            self
        }
        pub fn set_ssh_public_key(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_ssh_public_key(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateRdsDbInstance<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_rds_db_instance_input::Builder,
    }
    impl<C, M, R> UpdateRdsDbInstance<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateRdsDbInstanceOutput,
            smithy_http::result::SdkError<crate::error::UpdateRdsDbInstanceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateRdsDbInstanceInputOperationOutputAlias,
                crate::output::UpdateRdsDbInstanceOutput,
                crate::error::UpdateRdsDbInstanceError,
                crate::input::UpdateRdsDbInstanceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon RDS instance's ARN.</p>
        pub fn rds_db_instance_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.rds_db_instance_arn(inp);
            self
        }
        pub fn set_rds_db_instance_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_rds_db_instance_arn(input);
            self
        }
        /// <p>The master user name.</p>
        pub fn db_user(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.db_user(inp);
            self
        }
        pub fn set_db_user(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_db_user(input);
            self
        }
        /// <p>The database password.</p>
        pub fn db_password(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.db_password(inp);
            self
        }
        pub fn set_db_password(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_db_password(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateStack<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_stack_input::Builder,
    }
    impl<C, M, R> UpdateStack<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateStackOutput,
            smithy_http::result::SdkError<crate::error::UpdateStackError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateStackInputOperationOutputAlias,
                crate::output::UpdateStackOutput,
                crate::error::UpdateStackError,
                crate::input::UpdateStackInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The stack ID.</p>
        pub fn stack_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.stack_id(inp);
            self
        }
        pub fn set_stack_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_stack_id(input);
            self
        }
        /// <p>The stack's new name.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// Adds a key-value pair to `Attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        /// <p>One or more user-defined key-value pairs to be added to the stack attributes.</p>
        pub fn attributes(
            mut self,
            k: impl Into<crate::model::StackAttributesKeys>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.attributes(k, v);
            self
        }
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<crate::model::StackAttributesKeys, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_attributes(input);
            self
        }
        /// <p>Do not use this parameter. You cannot update a stack's service role.</p>
        pub fn service_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_role_arn(inp);
            self
        }
        pub fn set_service_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_role_arn(input);
            self
        }
        /// <p>The ARN of an IAM profile that is the default profile for all of the stack's EC2 instances.
        /// For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using
        /// Identifiers</a>.</p>
        pub fn default_instance_profile_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_instance_profile_arn(inp);
            self
        }
        pub fn set_default_instance_profile_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_instance_profile_arn(input);
            self
        }
        /// <p>The stack's operating system, which must be set to one of the following:</p>
        /// <ul>
        /// <li>
        /// <p>A supported Linux operating system: An Amazon Linux version, such as <code>Amazon Linux 2018.03</code>, <code>Amazon Linux 2017.09</code>, <code>Amazon Linux 2017.03</code>, <code>Amazon Linux 2016.09</code>,
        /// <code>Amazon Linux 2016.03</code>, <code>Amazon Linux 2015.09</code>, or <code>Amazon Linux 2015.03</code>.</p>
        /// </li>
        /// <li>
        /// <p>A supported Ubuntu operating system, such as <code>Ubuntu 16.04 LTS</code>, <code>Ubuntu 14.04 LTS</code>, or <code>Ubuntu 12.04 LTS</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CentOS Linux 7</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Red Hat Enterprise Linux 7</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>A supported Windows operating system, such as <code>Microsoft Windows Server 2012 R2 Base</code>, <code>Microsoft Windows Server 2012 R2 with SQL Server Express</code>,
        /// <code>Microsoft Windows Server 2012 R2 with SQL Server Standard</code>, or <code>Microsoft Windows Server 2012 R2 with SQL Server Web</code>.</p>
        /// </li>
        /// <li>
        /// <p>A custom AMI: <code>Custom</code>. You specify the custom AMI you want to use when
        /// you create instances. For more information about how to use custom AMIs with OpsWorks, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-custom-ami.html">Using
        /// Custom AMIs</a>.</p>
        /// </li>
        /// </ul>
        /// <p>The default option is the stack's current operating system.
        /// For more information about supported operating systems,
        /// see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-os.html">AWS OpsWorks Stacks Operating Systems</a>.</p>
        pub fn default_os(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_os(inp);
            self
        }
        pub fn set_default_os(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_default_os(input);
            self
        }
        /// <p>The stack's new host name theme, with spaces replaced by underscores.
        /// The theme is used to generate host names for the stack's instances.
        /// By default, <code>HostnameTheme</code> is set to <code>Layer_Dependent</code>, which creates host names by appending integers to the
        /// layer's short name. The other themes are:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>Baked_Goods</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Clouds</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Europe_Cities</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Fruits</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Greek_Deities_and_Titans</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Legendary_creatures_from_Japan</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Planets_and_Moons</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Roman_Deities</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Scottish_Islands</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>US_Cities</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Wild_Cats</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To obtain a generated host name, call <code>GetHostNameSuggestion</code>, which returns a
        /// host name based on the current theme.</p>
        pub fn hostname_theme(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.hostname_theme(inp);
            self
        }
        pub fn set_hostname_theme(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_hostname_theme(input);
            self
        }
        /// <p>The stack's default Availability Zone, which must be in the
        /// stack's region. For more
        /// information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and
        /// Endpoints</a>. If you also specify a value for <code>DefaultSubnetId</code>, the subnet must
        /// be in the same zone. For more information, see <a>CreateStack</a>. </p>
        pub fn default_availability_zone(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_availability_zone(inp);
            self
        }
        pub fn set_default_availability_zone(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_availability_zone(input);
            self
        }
        /// <p>The stack's default VPC subnet ID. This parameter is required if you specify a value for the
        /// <code>VpcId</code> parameter. All instances are launched into this subnet unless you specify
        /// otherwise when you create the instance. If you also specify a value for
        /// <code>DefaultAvailabilityZone</code>, the subnet must be in that zone. For information on
        /// default values and when this parameter is required, see the <code>VpcId</code> parameter
        /// description. </p>
        pub fn default_subnet_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_subnet_id(inp);
            self
        }
        pub fn set_default_subnet_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_subnet_id(input);
            self
        }
        /// <p>A string that contains user-defined, custom JSON. It can be used to override the corresponding default stack configuration JSON values or to pass data to recipes. The string should be in the following format:</p>
        /// <p>
        /// <code>"{\"key1\": \"value1\", \"key2\": \"value2\",...}"</code>
        /// </p>
        /// <p>For more information about custom JSON, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-json.html">Use Custom JSON to
        /// Modify the Stack Configuration Attributes</a>.</p>
        pub fn custom_json(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_json(inp);
            self
        }
        pub fn set_custom_json(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_custom_json(input);
            self
        }
        /// <p>The configuration manager. When you update a stack, we recommend that you use the configuration manager to specify the Chef version: 12, 11.10, or 11.4 for Linux stacks, or 12.2 for Windows stacks. The default value for Linux stacks is currently 12.</p>
        pub fn configuration_manager(
            mut self,
            inp: crate::model::StackConfigurationManager,
        ) -> Self {
            self.inner = self.inner.configuration_manager(inp);
            self
        }
        pub fn set_configuration_manager(
            mut self,
            input: std::option::Option<crate::model::StackConfigurationManager>,
        ) -> Self {
            self.inner = self.inner.set_configuration_manager(input);
            self
        }
        /// <p>A <code>ChefConfiguration</code> object that specifies whether to enable Berkshelf and the
        /// Berkshelf version on Chef 11.10 stacks. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-creating.html">Create a New Stack</a>.</p>
        pub fn chef_configuration(mut self, inp: crate::model::ChefConfiguration) -> Self {
            self.inner = self.inner.chef_configuration(inp);
            self
        }
        pub fn set_chef_configuration(
            mut self,
            input: std::option::Option<crate::model::ChefConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_chef_configuration(input);
            self
        }
        /// <p>Whether the stack uses custom cookbooks.</p>
        pub fn use_custom_cookbooks(mut self, inp: bool) -> Self {
            self.inner = self.inner.use_custom_cookbooks(inp);
            self
        }
        pub fn set_use_custom_cookbooks(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_use_custom_cookbooks(input);
            self
        }
        /// <p>Contains the information required to retrieve an app or cookbook from a repository. For more information,
        /// see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html">Adding Apps</a> or <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook.html">Cookbooks and Recipes</a>.</p>
        pub fn custom_cookbooks_source(mut self, inp: crate::model::Source) -> Self {
            self.inner = self.inner.custom_cookbooks_source(inp);
            self
        }
        pub fn set_custom_cookbooks_source(
            mut self,
            input: std::option::Option<crate::model::Source>,
        ) -> Self {
            self.inner = self.inner.set_custom_cookbooks_source(input);
            self
        }
        /// <p>A default Amazon EC2 key-pair name. The default value is
        /// <code>none</code>. If you specify a key-pair name,
        /// AWS OpsWorks Stacks installs the public key on the instance and you can use the private key with an SSH
        /// client to log in to the instance. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-ssh.html"> Using SSH to
        /// Communicate with an Instance</a> and <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/security-ssh-access.html"> Managing SSH
        /// Access</a>. You can override this setting by specifying a different key pair, or no key
        /// pair, when you <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-add.html">
        /// create an instance</a>. </p>
        pub fn default_ssh_key_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_ssh_key_name(inp);
            self
        }
        pub fn set_default_ssh_key_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_ssh_key_name(input);
            self
        }
        /// <p>The default root device type. This value is used by default for all instances in the stack,
        /// but you can override it when you create an instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
        pub fn default_root_device_type(mut self, inp: crate::model::RootDeviceType) -> Self {
            self.inner = self.inner.default_root_device_type(inp);
            self
        }
        pub fn set_default_root_device_type(
            mut self,
            input: std::option::Option<crate::model::RootDeviceType>,
        ) -> Self {
            self.inner = self.inner.set_default_root_device_type(input);
            self
        }
        /// <p>Whether to associate the AWS OpsWorks Stacks built-in security groups with the stack's layers.</p>
        /// <p>AWS OpsWorks Stacks provides a standard set of built-in security groups, one for each layer, which are
        /// associated with layers by default. <code>UseOpsworksSecurityGroups</code> allows you to
        /// provide your own custom security groups
        /// instead of using the built-in groups. <code>UseOpsworksSecurityGroups</code> has
        /// the following settings: </p>
        /// <ul>
        /// <li>
        /// <p>True - AWS OpsWorks Stacks automatically associates the appropriate built-in security group with each layer (default setting). You can associate additional security groups with a layer after you create it, but you cannot delete the built-in security group.</p>
        /// </li>
        /// <li>
        /// <p>False - AWS OpsWorks Stacks does not associate built-in security groups with layers. You must create appropriate EC2 security groups and associate a security group with each layer that you create. However, you can still manually associate a built-in security group with a layer on. Custom security groups are required only for those layers that need custom settings.</p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-creating.html">Create a New
        /// Stack</a>.</p>
        pub fn use_opsworks_security_groups(mut self, inp: bool) -> Self {
            self.inner = self.inner.use_opsworks_security_groups(inp);
            self
        }
        pub fn set_use_opsworks_security_groups(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.inner = self.inner.set_use_opsworks_security_groups(input);
            self
        }
        /// <p>The default AWS OpsWorks Stacks agent version. You have the following options:</p>
        /// <ul>
        /// <li>
        /// <p>Auto-update - Set this parameter to <code>LATEST</code>. AWS OpsWorks Stacks
        /// automatically installs new agent versions on the stack's instances as soon as
        /// they are available.</p>
        /// </li>
        /// <li>
        /// <p>Fixed version - Set this parameter to your preferred agent version. To update the agent version, you must edit the stack configuration and specify a new version. AWS OpsWorks Stacks then automatically installs that version on the stack's instances.</p>
        /// </li>
        /// </ul>
        /// <p>The default setting is <code>LATEST</code>. To specify an agent version,
        /// you must use the complete version number, not the abbreviated number shown on the console.
        /// For a list of available agent version numbers, call <a>DescribeAgentVersions</a>.
        /// AgentVersion cannot be set to Chef 12.2.</p>
        /// <note>
        /// <p>You can also specify an agent version when you create or update an instance, which overrides the stack's default setting.</p>
        /// </note>
        pub fn agent_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.agent_version(inp);
            self
        }
        pub fn set_agent_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_agent_version(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateUserProfile<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_user_profile_input::Builder,
    }
    impl<C, M, R> UpdateUserProfile<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateUserProfileOutput,
            smithy_http::result::SdkError<crate::error::UpdateUserProfileError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateUserProfileInputOperationOutputAlias,
                crate::output::UpdateUserProfileOutput,
                crate::error::UpdateUserProfileError,
                crate::input::UpdateUserProfileInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user IAM ARN. This can also be a federated user's ARN.</p>
        pub fn iam_user_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.iam_user_arn(inp);
            self
        }
        pub fn set_iam_user_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_iam_user_arn(input);
            self
        }
        /// <p>The user's SSH user name. The allowable characters are [a-z], [A-Z], [0-9], '-', and '_'. If
        /// the specified name includes other punctuation marks, AWS OpsWorks Stacks removes them. For example,
        /// <code>my.name</code> will be changed to <code>myname</code>. If you do not specify an SSH
        /// user name, AWS OpsWorks Stacks generates one from the IAM user name. </p>
        pub fn ssh_username(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ssh_username(inp);
            self
        }
        pub fn set_ssh_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ssh_username(input);
            self
        }
        /// <p>The user's new SSH public key.</p>
        pub fn ssh_public_key(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ssh_public_key(inp);
            self
        }
        pub fn set_ssh_public_key(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_ssh_public_key(input);
            self
        }
        /// <p>Whether users can specify their own SSH public key through the My Settings page. For more
        /// information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/security-settingsshkey.html">Managing User
        /// Permissions</a>.</p>
        pub fn allow_self_management(mut self, inp: bool) -> Self {
            self.inner = self.inner.allow_self_management(inp);
            self
        }
        pub fn set_allow_self_management(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_allow_self_management(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateVolume<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_volume_input::Builder,
    }
    impl<C, M, R> UpdateVolume<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateVolumeOutput,
            smithy_http::result::SdkError<crate::error::UpdateVolumeError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateVolumeInputOperationOutputAlias,
                crate::output::UpdateVolumeOutput,
                crate::error::UpdateVolumeError,
                crate::input::UpdateVolumeInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The volume ID.</p>
        pub fn volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.volume_id(inp);
            self
        }
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_volume_id(input);
            self
        }
        /// <p>The new name.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The new mount point.</p>
        pub fn mount_point(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mount_point(inp);
            self
        }
        pub fn set_mount_point(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mount_point(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::new(conn).with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::https().with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
