// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_stack_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_stack::CreateStackInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.region {
        object.key("Region").string(var_2.as_str());
    }
    if let Some(var_3) = &input.vpc_id {
        object.key("VpcId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Attributes").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.default_instance_profile_arn {
        object.key("DefaultInstanceProfileArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.default_os {
        object.key("DefaultOs").string(var_10.as_str());
    }
    if let Some(var_11) = &input.hostname_theme {
        object.key("HostnameTheme").string(var_11.as_str());
    }
    if let Some(var_12) = &input.default_availability_zone {
        object.key("DefaultAvailabilityZone").string(var_12.as_str());
    }
    if let Some(var_13) = &input.default_subnet_id {
        object.key("DefaultSubnetId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.custom_json {
        object.key("CustomJson").string(var_14.as_str());
    }
    if let Some(var_15) = &input.configuration_manager {
        #[allow(unused_mut)]
        let mut object_16 = object.key("ConfigurationManager").start_object();
        crate::protocol_serde::shape_stack_configuration_manager::ser_stack_configuration_manager(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.chef_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("ChefConfiguration").start_object();
        crate::protocol_serde::shape_chef_configuration::ser_chef_configuration(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.use_custom_cookbooks {
        object.key("UseCustomCookbooks").boolean(*var_19);
    }
    if let Some(var_20) = &input.use_opsworks_security_groups {
        object.key("UseOpsworksSecurityGroups").boolean(*var_20);
    }
    if let Some(var_21) = &input.custom_cookbooks_source {
        #[allow(unused_mut)]
        let mut object_22 = object.key("CustomCookbooksSource").start_object();
        crate::protocol_serde::shape_source::ser_source(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.default_ssh_key_name {
        object.key("DefaultSshKeyName").string(var_23.as_str());
    }
    if let Some(var_24) = &input.default_root_device_type {
        object.key("DefaultRootDeviceType").string(var_24.as_str());
    }
    if let Some(var_25) = &input.agent_version {
        object.key("AgentVersion").string(var_25.as_str());
    }
    Ok(())
}
