// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_layer_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_layer::CreateLayerInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.stack_id {
        object.key("StackId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.r#type {
        object.key("Type").string(var_2.as_str());
    }
    if let Some(var_3) = &input.name {
        object.key("Name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.shortname {
        object.key("Shortname").string(var_4.as_str());
    }
    if let Some(var_5) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Attributes").start_object();
        for (key_7, value_8) in var_5 {
            {
                object_6.key(key_7.as_str()).string(value_8.as_str());
            }
        }
        object_6.finish();
    }
    if let Some(var_9) = &input.cloud_watch_logs_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("CloudWatchLogsConfiguration").start_object();
        crate::protocol_serde::shape_cloud_watch_logs_configuration::ser_cloud_watch_logs_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.custom_instance_profile_arn {
        object.key("CustomInstanceProfileArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.custom_json {
        object.key("CustomJson").string(var_12.as_str());
    }
    if let Some(var_13) = &input.custom_security_group_ids {
        let mut array_14 = object.key("CustomSecurityGroupIds").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.packages {
        let mut array_17 = object.key("Packages").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.volume_configurations {
        let mut array_20 = object.key("VolumeConfigurations").start_array();
        for item_21 in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::protocol_serde::shape_volume_configuration::ser_volume_configuration(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    if let Some(var_23) = &input.enable_auto_healing {
        object.key("EnableAutoHealing").boolean(*var_23);
    }
    if let Some(var_24) = &input.auto_assign_elastic_ips {
        object.key("AutoAssignElasticIps").boolean(*var_24);
    }
    if let Some(var_25) = &input.auto_assign_public_ips {
        object.key("AutoAssignPublicIps").boolean(*var_25);
    }
    if let Some(var_26) = &input.custom_recipes {
        #[allow(unused_mut)]
        let mut object_27 = object.key("CustomRecipes").start_object();
        crate::protocol_serde::shape_recipes::ser_recipes(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.install_updates_on_boot {
        object.key("InstallUpdatesOnBoot").boolean(*var_28);
    }
    if let Some(var_29) = &input.use_ebs_optimized_instances {
        object.key("UseEbsOptimizedInstances").boolean(*var_29);
    }
    if let Some(var_30) = &input.lifecycle_event_configuration {
        #[allow(unused_mut)]
        let mut object_31 = object.key("LifecycleEventConfiguration").start_object();
        crate::protocol_serde::shape_lifecycle_event_configuration::ser_lifecycle_event_configuration(&mut object_31, var_30)?;
        object_31.finish();
    }
    Ok(())
}
