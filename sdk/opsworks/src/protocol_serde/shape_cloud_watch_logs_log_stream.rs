// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_cloud_watch_logs_log_stream(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CloudWatchLogsLogStream,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.log_group_name {
        object.key("LogGroupName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.datetime_format {
        object.key("DatetimeFormat").string(var_2.as_str());
    }
    if let Some(var_3) = &input.time_zone {
        object.key("TimeZone").string(var_3.as_str());
    }
    if let Some(var_4) = &input.file {
        object.key("File").string(var_4.as_str());
    }
    if let Some(var_5) = &input.file_fingerprint_lines {
        object.key("FileFingerprintLines").string(var_5.as_str());
    }
    if let Some(var_6) = &input.multi_line_start_pattern {
        object.key("MultiLineStartPattern").string(var_6.as_str());
    }
    if let Some(var_7) = &input.initial_position {
        object.key("InitialPosition").string(var_7.as_str());
    }
    if let Some(var_8) = &input.encoding {
        object.key("Encoding").string(var_8.as_str());
    }
    if let Some(var_9) = &input.buffer_duration {
        object.key("BufferDuration").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.batch_count {
        object.key("BatchCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.batch_size {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_cloud_watch_logs_log_stream<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::CloudWatchLogsLogStream>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CloudWatchLogsLogStreamBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "LogGroupName" => {
                            builder = builder.set_log_group_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DatetimeFormat" => {
                            builder = builder.set_datetime_format(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "TimeZone" => {
                            builder = builder.set_time_zone(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CloudWatchLogsTimeZone::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "File" => {
                            builder = builder.set_file(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "FileFingerprintLines" => {
                            builder = builder.set_file_fingerprint_lines(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MultiLineStartPattern" => {
                            builder = builder.set_multi_line_start_pattern(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "InitialPosition" => {
                            builder = builder.set_initial_position(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CloudWatchLogsInitialPosition::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Encoding" => {
                            builder = builder.set_encoding(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CloudWatchLogsEncoding::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "BufferDuration" => {
                            builder = builder.set_buffer_duration(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "BatchCount" => {
                            builder = builder.set_batch_count(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "BatchSize" => {
                            builder = builder.set_batch_size(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
