// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_deployment_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_deployment::CreateDeploymentInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.stack_id {
        object.key("StackId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.app_id {
        object.key("AppId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.instance_ids {
        let mut array_4 = object.key("InstanceIds").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.layer_ids {
        let mut array_7 = object.key("LayerIds").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.command {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Command").start_object();
        crate::protocol_serde::shape_deployment_command::ser_deployment_command(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.comment {
        object.key("Comment").string(var_11.as_str());
    }
    if let Some(var_12) = &input.custom_json {
        object.key("CustomJson").string(var_12.as_str());
    }
    Ok(())
}
