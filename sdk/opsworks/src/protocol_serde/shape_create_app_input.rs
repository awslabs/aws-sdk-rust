// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_app_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_app::CreateAppInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.stack_id {
        object.key("StackId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.shortname {
        object.key("Shortname").string(var_2.as_str());
    }
    if let Some(var_3) = &input.name {
        object.key("Name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.description {
        object.key("Description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.data_sources {
        let mut array_6 = object.key("DataSources").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_data_source::ser_data_source(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.r#type {
        object.key("Type").string(var_9.as_str());
    }
    if let Some(var_10) = &input.app_source {
        #[allow(unused_mut)]
        let mut object_11 = object.key("AppSource").start_object();
        crate::protocol_serde::shape_source::ser_source(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.domains {
        let mut array_13 = object.key("Domains").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.enable_ssl {
        object.key("EnableSsl").boolean(*var_15);
    }
    if let Some(var_16) = &input.ssl_configuration {
        #[allow(unused_mut)]
        let mut object_17 = object.key("SslConfiguration").start_object();
        crate::protocol_serde::shape_ssl_configuration::ser_ssl_configuration(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_19 = object.key("Attributes").start_object();
        for (key_20, value_21) in var_18 {
            {
                object_19.key(key_20.as_str()).string(value_21.as_str());
            }
        }
        object_19.finish();
    }
    if let Some(var_22) = &input.environment {
        let mut array_23 = object.key("Environment").start_array();
        for item_24 in var_22 {
            {
                #[allow(unused_mut)]
                let mut object_25 = array_23.value().start_object();
                crate::protocol_serde::shape_environment_variable::ser_environment_variable(&mut object_25, item_24)?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    Ok(())
}
