// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_instance_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_instance::UpdateInstanceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.instance_id {
        object.key("InstanceId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.layer_ids {
        let mut array_3 = object.key("LayerIds").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.instance_type {
        object.key("InstanceType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.auto_scaling_type {
        object.key("AutoScalingType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.hostname {
        object.key("Hostname").string(var_7.as_str());
    }
    if let Some(var_8) = &input.os {
        object.key("Os").string(var_8.as_str());
    }
    if let Some(var_9) = &input.ami_id {
        object.key("AmiId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.ssh_key_name {
        object.key("SshKeyName").string(var_10.as_str());
    }
    if let Some(var_11) = &input.architecture {
        object.key("Architecture").string(var_11.as_str());
    }
    if let Some(var_12) = &input.install_updates_on_boot {
        object.key("InstallUpdatesOnBoot").boolean(*var_12);
    }
    if let Some(var_13) = &input.ebs_optimized {
        object.key("EbsOptimized").boolean(*var_13);
    }
    if let Some(var_14) = &input.agent_version {
        object.key("AgentVersion").string(var_14.as_str());
    }
    Ok(())
}
