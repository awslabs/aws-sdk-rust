// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_layer_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_layer::UpdateLayerInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.layer_id {
        object.key("LayerId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("Name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.shortname {
        object.key("Shortname").string(var_3.as_str());
    }
    if let Some(var_4) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Attributes").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.cloud_watch_logs_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("CloudWatchLogsConfiguration").start_object();
        crate::protocol_serde::shape_cloud_watch_logs_configuration::ser_cloud_watch_logs_configuration(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.custom_instance_profile_arn {
        object.key("CustomInstanceProfileArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.custom_json {
        object.key("CustomJson").string(var_11.as_str());
    }
    if let Some(var_12) = &input.custom_security_group_ids {
        let mut array_13 = object.key("CustomSecurityGroupIds").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.packages {
        let mut array_16 = object.key("Packages").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.volume_configurations {
        let mut array_19 = object.key("VolumeConfigurations").start_array();
        for item_20 in var_18 {
            {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::protocol_serde::shape_volume_configuration::ser_volume_configuration(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.enable_auto_healing {
        object.key("EnableAutoHealing").boolean(*var_22);
    }
    if let Some(var_23) = &input.auto_assign_elastic_ips {
        object.key("AutoAssignElasticIps").boolean(*var_23);
    }
    if let Some(var_24) = &input.auto_assign_public_ips {
        object.key("AutoAssignPublicIps").boolean(*var_24);
    }
    if let Some(var_25) = &input.custom_recipes {
        #[allow(unused_mut)]
        let mut object_26 = object.key("CustomRecipes").start_object();
        crate::protocol_serde::shape_recipes::ser_recipes(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.install_updates_on_boot {
        object.key("InstallUpdatesOnBoot").boolean(*var_27);
    }
    if let Some(var_28) = &input.use_ebs_optimized_instances {
        object.key("UseEbsOptimizedInstances").boolean(*var_28);
    }
    if let Some(var_29) = &input.lifecycle_event_configuration {
        #[allow(unused_mut)]
        let mut object_30 = object.key("LifecycleEventConfiguration").start_object();
        crate::protocol_serde::shape_lifecycle_event_configuration::ser_lifecycle_event_configuration(&mut object_30, var_29)?;
        object_30.finish();
    }
    Ok(())
}
