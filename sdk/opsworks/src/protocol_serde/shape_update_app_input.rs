// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_app_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_app::UpdateAppInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.app_id {
        object.key("AppId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("Name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.description {
        object.key("Description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.data_sources {
        let mut array_5 = object.key("DataSources").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_data_source::ser_data_source(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.r#type {
        object.key("Type").string(var_8.as_str());
    }
    if let Some(var_9) = &input.app_source {
        #[allow(unused_mut)]
        let mut object_10 = object.key("AppSource").start_object();
        crate::protocol_serde::shape_source::ser_source(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.domains {
        let mut array_12 = object.key("Domains").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.enable_ssl {
        object.key("EnableSsl").boolean(*var_14);
    }
    if let Some(var_15) = &input.ssl_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("SslConfiguration").start_object();
        crate::protocol_serde::shape_ssl_configuration::ser_ssl_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_18 = object.key("Attributes").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19.as_str()).string(value_20.as_str());
            }
        }
        object_18.finish();
    }
    if let Some(var_21) = &input.environment {
        let mut array_22 = object.key("Environment").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_environment_variable::ser_environment_variable(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    Ok(())
}
