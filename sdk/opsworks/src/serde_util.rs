// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn deployment_command_correct_errors(
    mut builder: crate::types::builders::DeploymentCommandBuilder,
) -> crate::types::builders::DeploymentCommandBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::DeploymentCommandName>().ok()
    }
    builder
}

pub(crate) fn ssl_configuration_correct_errors(
    mut builder: crate::types::builders::SslConfigurationBuilder,
) -> crate::types::builders::SslConfigurationBuilder {
    if builder.certificate.is_none() {
        builder.certificate = Some(Default::default())
    }
    if builder.private_key.is_none() {
        builder.private_key = Some(Default::default())
    }
    builder
}

pub(crate) fn environment_variable_correct_errors(
    mut builder: crate::types::builders::EnvironmentVariableBuilder,
) -> crate::types::builders::EnvironmentVariableBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn volume_configuration_correct_errors(
    mut builder: crate::types::builders::VolumeConfigurationBuilder,
) -> crate::types::builders::VolumeConfigurationBuilder {
    if builder.mount_point.is_none() {
        builder.mount_point = Some(Default::default())
    }
    if builder.number_of_disks.is_none() {
        builder.number_of_disks = Some(Default::default())
    }
    if builder.size.is_none() {
        builder.size = Some(Default::default())
    }
    builder
}
