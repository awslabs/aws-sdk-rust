// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines column statistics supported for integer data columns.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LongColumnStatisticsData {
    /// <p>The lowest value in the column.</p>
    #[doc(hidden)]
    pub minimum_value: i64,
    /// <p>The highest value in the column.</p>
    #[doc(hidden)]
    pub maximum_value: i64,
    /// <p>The number of null values in the column.</p>
    #[doc(hidden)]
    pub number_of_nulls: i64,
    /// <p>The number of distinct values in a column.</p>
    #[doc(hidden)]
    pub number_of_distinct_values: i64,
}
impl LongColumnStatisticsData {
    /// <p>The lowest value in the column.</p>
    pub fn minimum_value(&self) -> i64 {
        self.minimum_value
    }
    /// <p>The highest value in the column.</p>
    pub fn maximum_value(&self) -> i64 {
        self.maximum_value
    }
    /// <p>The number of null values in the column.</p>
    pub fn number_of_nulls(&self) -> i64 {
        self.number_of_nulls
    }
    /// <p>The number of distinct values in a column.</p>
    pub fn number_of_distinct_values(&self) -> i64 {
        self.number_of_distinct_values
    }
}
impl LongColumnStatisticsData {
    /// Creates a new builder-style object to manufacture [`LongColumnStatisticsData`](crate::types::LongColumnStatisticsData).
    pub fn builder() -> crate::types::builders::LongColumnStatisticsDataBuilder {
        crate::types::builders::LongColumnStatisticsDataBuilder::default()
    }
}

/// A builder for [`LongColumnStatisticsData`](crate::types::LongColumnStatisticsData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LongColumnStatisticsDataBuilder {
    pub(crate) minimum_value: std::option::Option<i64>,
    pub(crate) maximum_value: std::option::Option<i64>,
    pub(crate) number_of_nulls: std::option::Option<i64>,
    pub(crate) number_of_distinct_values: std::option::Option<i64>,
}
impl LongColumnStatisticsDataBuilder {
    /// <p>The lowest value in the column.</p>
    pub fn minimum_value(mut self, input: i64) -> Self {
        self.minimum_value = Some(input);
        self
    }
    /// <p>The lowest value in the column.</p>
    pub fn set_minimum_value(mut self, input: std::option::Option<i64>) -> Self {
        self.minimum_value = input;
        self
    }
    /// <p>The highest value in the column.</p>
    pub fn maximum_value(mut self, input: i64) -> Self {
        self.maximum_value = Some(input);
        self
    }
    /// <p>The highest value in the column.</p>
    pub fn set_maximum_value(mut self, input: std::option::Option<i64>) -> Self {
        self.maximum_value = input;
        self
    }
    /// <p>The number of null values in the column.</p>
    pub fn number_of_nulls(mut self, input: i64) -> Self {
        self.number_of_nulls = Some(input);
        self
    }
    /// <p>The number of null values in the column.</p>
    pub fn set_number_of_nulls(mut self, input: std::option::Option<i64>) -> Self {
        self.number_of_nulls = input;
        self
    }
    /// <p>The number of distinct values in a column.</p>
    pub fn number_of_distinct_values(mut self, input: i64) -> Self {
        self.number_of_distinct_values = Some(input);
        self
    }
    /// <p>The number of distinct values in a column.</p>
    pub fn set_number_of_distinct_values(mut self, input: std::option::Option<i64>) -> Self {
        self.number_of_distinct_values = input;
        self
    }
    /// Consumes the builder and constructs a [`LongColumnStatisticsData`](crate::types::LongColumnStatisticsData).
    pub fn build(self) -> crate::types::LongColumnStatisticsData {
        crate::types::LongColumnStatisticsData {
            minimum_value: self.minimum_value.unwrap_or_default(),
            maximum_value: self.maximum_value.unwrap_or_default(),
            number_of_nulls: self.number_of_nulls.unwrap_or_default(),
            number_of_distinct_values: self.number_of_distinct_values.unwrap_or_default(),
        }
    }
}
