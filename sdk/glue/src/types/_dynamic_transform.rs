// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the set of parameters needed to perform the dynamic transform.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DynamicTransform {
    /// <p>Specifies the name of the dynamic transform.</p>
    pub name: ::std::string::String,
    /// <p>Specifies the name of the dynamic transform as it appears in the Glue Studio visual editor.</p>
    pub transform_name: ::std::string::String,
    /// <p>Specifies the inputs for the dynamic transform that are required.</p>
    pub inputs: ::std::vec::Vec<::std::string::String>,
    /// <p>Specifies the parameters of the dynamic transform.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::TransformConfigParameter>>,
    /// <p>Specifies the name of the function of the dynamic transform.</p>
    pub function_name: ::std::string::String,
    /// <p>Specifies the path of the dynamic transform source and config files.</p>
    pub path: ::std::string::String,
    /// <p>This field is not used and will be deprecated in future release.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the data schema for the dynamic transform.</p>
    pub output_schemas: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>,
}
impl DynamicTransform {
    /// <p>Specifies the name of the dynamic transform.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Specifies the name of the dynamic transform as it appears in the Glue Studio visual editor.</p>
    pub fn transform_name(&self) -> &str {
        use std::ops::Deref;
        self.transform_name.deref()
    }
    /// <p>Specifies the inputs for the dynamic transform that are required.</p>
    pub fn inputs(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.inputs.deref()
    }
    /// <p>Specifies the parameters of the dynamic transform.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::TransformConfigParameter] {
        self.parameters.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the name of the function of the dynamic transform.</p>
    pub fn function_name(&self) -> &str {
        use std::ops::Deref;
        self.function_name.deref()
    }
    /// <p>Specifies the path of the dynamic transform source and config files.</p>
    pub fn path(&self) -> &str {
        use std::ops::Deref;
        self.path.deref()
    }
    /// <p>This field is not used and will be deprecated in future release.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>Specifies the data schema for the dynamic transform.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.output_schemas.is_none()`.
    pub fn output_schemas(&self) -> &[crate::types::GlueSchema] {
        self.output_schemas.as_deref().unwrap_or_default()
    }
}
impl DynamicTransform {
    /// Creates a new builder-style object to manufacture [`DynamicTransform`](crate::types::DynamicTransform).
    pub fn builder() -> crate::types::builders::DynamicTransformBuilder {
        crate::types::builders::DynamicTransformBuilder::default()
    }
}

/// A builder for [`DynamicTransform`](crate::types::DynamicTransform).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DynamicTransformBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) transform_name: ::std::option::Option<::std::string::String>,
    pub(crate) inputs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::TransformConfigParameter>>,
    pub(crate) function_name: ::std::option::Option<::std::string::String>,
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) output_schemas: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>,
}
impl DynamicTransformBuilder {
    /// <p>Specifies the name of the dynamic transform.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the dynamic transform.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specifies the name of the dynamic transform.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Specifies the name of the dynamic transform as it appears in the Glue Studio visual editor.</p>
    /// This field is required.
    pub fn transform_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transform_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the dynamic transform as it appears in the Glue Studio visual editor.</p>
    pub fn set_transform_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transform_name = input;
        self
    }
    /// <p>Specifies the name of the dynamic transform as it appears in the Glue Studio visual editor.</p>
    pub fn get_transform_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.transform_name
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>Specifies the inputs for the dynamic transform that are required.</p>
    pub fn inputs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input.into());
        self.inputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the inputs for the dynamic transform that are required.</p>
    pub fn set_inputs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inputs = input;
        self
    }
    /// <p>Specifies the inputs for the dynamic transform that are required.</p>
    pub fn get_inputs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.inputs
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Specifies the parameters of the dynamic transform.</p>
    pub fn parameters(mut self, input: crate::types::TransformConfigParameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the parameters of the dynamic transform.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TransformConfigParameter>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Specifies the parameters of the dynamic transform.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TransformConfigParameter>> {
        &self.parameters
    }
    /// <p>Specifies the name of the function of the dynamic transform.</p>
    /// This field is required.
    pub fn function_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.function_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the function of the dynamic transform.</p>
    pub fn set_function_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.function_name = input;
        self
    }
    /// <p>Specifies the name of the function of the dynamic transform.</p>
    pub fn get_function_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.function_name
    }
    /// <p>Specifies the path of the dynamic transform source and config files.</p>
    /// This field is required.
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the path of the dynamic transform source and config files.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>Specifies the path of the dynamic transform source and config files.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>This field is not used and will be deprecated in future release.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This field is not used and will be deprecated in future release.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>This field is not used and will be deprecated in future release.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Appends an item to `output_schemas`.
    ///
    /// To override the contents of this collection use [`set_output_schemas`](Self::set_output_schemas).
    ///
    /// <p>Specifies the data schema for the dynamic transform.</p>
    pub fn output_schemas(mut self, input: crate::types::GlueSchema) -> Self {
        let mut v = self.output_schemas.unwrap_or_default();
        v.push(input);
        self.output_schemas = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the data schema for the dynamic transform.</p>
    pub fn set_output_schemas(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>) -> Self {
        self.output_schemas = input;
        self
    }
    /// <p>Specifies the data schema for the dynamic transform.</p>
    pub fn get_output_schemas(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>> {
        &self.output_schemas
    }
    /// Consumes the builder and constructs a [`DynamicTransform`](crate::types::DynamicTransform).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::DynamicTransformBuilder::name)
    /// - [`transform_name`](crate::types::builders::DynamicTransformBuilder::transform_name)
    /// - [`inputs`](crate::types::builders::DynamicTransformBuilder::inputs)
    /// - [`function_name`](crate::types::builders::DynamicTransformBuilder::function_name)
    /// - [`path`](crate::types::builders::DynamicTransformBuilder::path)
    pub fn build(self) -> ::std::result::Result<crate::types::DynamicTransform, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DynamicTransform {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DynamicTransform",
                )
            })?,
            transform_name: self.transform_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "transform_name",
                    "transform_name was not specified but it is required when building DynamicTransform",
                )
            })?,
            inputs: self.inputs.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "inputs",
                    "inputs was not specified but it is required when building DynamicTransform",
                )
            })?,
            parameters: self.parameters,
            function_name: self.function_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "function_name",
                    "function_name was not specified but it is required when building DynamicTransform",
                )
            })?,
            path: self.path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "path",
                    "path was not specified but it is required when building DynamicTransform",
                )
            })?,
            version: self.version,
            output_schemas: self.output_schemas,
        })
    }
}
