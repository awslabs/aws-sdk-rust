// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies configuration properties of a notification.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NotificationProperty {
    /// <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>
    #[doc(hidden)]
    pub notify_delay_after: std::option::Option<i32>,
}
impl NotificationProperty {
    /// <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>
    pub fn notify_delay_after(&self) -> std::option::Option<i32> {
        self.notify_delay_after
    }
}
impl NotificationProperty {
    /// Creates a new builder-style object to manufacture [`NotificationProperty`](crate::types::NotificationProperty).
    pub fn builder() -> crate::types::builders::NotificationPropertyBuilder {
        crate::types::builders::NotificationPropertyBuilder::default()
    }
}

/// A builder for [`NotificationProperty`](crate::types::NotificationProperty).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NotificationPropertyBuilder {
    pub(crate) notify_delay_after: std::option::Option<i32>,
}
impl NotificationPropertyBuilder {
    /// <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>
    pub fn notify_delay_after(mut self, input: i32) -> Self {
        self.notify_delay_after = Some(input);
        self
    }
    /// <p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>
    pub fn set_notify_delay_after(mut self, input: std::option::Option<i32>) -> Self {
        self.notify_delay_after = input;
        self
    }
    /// Consumes the builder and constructs a [`NotificationProperty`](crate::types::NotificationProperty).
    pub fn build(self) -> crate::types::NotificationProperty {
        crate::types::NotificationProperty {
            notify_delay_after: self.notify_delay_after,
        }
    }
}
