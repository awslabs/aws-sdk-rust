// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a single entry in the list of values for <code>SqlAliases</code>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SqlAlias {
    /// <p>A table, or a column in a table.</p>
    pub from: ::std::string::String,
    /// <p>A temporary name given to a table, or a column in a table.</p>
    pub alias: ::std::string::String,
}
impl SqlAlias {
    /// <p>A table, or a column in a table.</p>
    pub fn from(&self) -> &str {
        use std::ops::Deref;
        self.from.deref()
    }
    /// <p>A temporary name given to a table, or a column in a table.</p>
    pub fn alias(&self) -> &str {
        use std::ops::Deref;
        self.alias.deref()
    }
}
impl SqlAlias {
    /// Creates a new builder-style object to manufacture [`SqlAlias`](crate::types::SqlAlias).
    pub fn builder() -> crate::types::builders::SqlAliasBuilder {
        crate::types::builders::SqlAliasBuilder::default()
    }
}

/// A builder for [`SqlAlias`](crate::types::SqlAlias).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SqlAliasBuilder {
    pub(crate) from: ::std::option::Option<::std::string::String>,
    pub(crate) alias: ::std::option::Option<::std::string::String>,
}
impl SqlAliasBuilder {
    /// <p>A table, or a column in a table.</p>
    /// This field is required.
    pub fn from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.from = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A table, or a column in a table.</p>
    pub fn set_from(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.from = input;
        self
    }
    /// <p>A table, or a column in a table.</p>
    pub fn get_from(&self) -> &::std::option::Option<::std::string::String> {
        &self.from
    }
    /// <p>A temporary name given to a table, or a column in a table.</p>
    /// This field is required.
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A temporary name given to a table, or a column in a table.</p>
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>A temporary name given to a table, or a column in a table.</p>
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias
    }
    /// Consumes the builder and constructs a [`SqlAlias`](crate::types::SqlAlias).
    /// This method will fail if any of the following fields are not set:
    /// - [`from`](crate::types::builders::SqlAliasBuilder::from)
    /// - [`alias`](crate::types::builders::SqlAliasBuilder::alias)
    pub fn build(self) -> ::std::result::Result<crate::types::SqlAlias, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SqlAlias {
            from: self.from.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "from",
                    "from was not specified but it is required when building SqlAlias",
                )
            })?,
            alias: self.alias.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "alias",
                    "alias was not specified but it is required when building SqlAlias",
                )
            })?,
        })
    }
}
