// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a directional edge in a directed acyclic graph (DAG).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeGenEdge {
    /// <p>The ID of the node at which the edge starts.</p>
    pub source: ::std::string::String,
    /// <p>The ID of the node at which the edge ends.</p>
    pub target: ::std::string::String,
    /// <p>The target of the edge.</p>
    pub target_parameter: ::std::option::Option<::std::string::String>,
}
impl CodeGenEdge {
    /// <p>The ID of the node at which the edge starts.</p>
    pub fn source(&self) -> &str {
        use std::ops::Deref;
        self.source.deref()
    }
    /// <p>The ID of the node at which the edge ends.</p>
    pub fn target(&self) -> &str {
        use std::ops::Deref;
        self.target.deref()
    }
    /// <p>The target of the edge.</p>
    pub fn target_parameter(&self) -> ::std::option::Option<&str> {
        self.target_parameter.as_deref()
    }
}
impl CodeGenEdge {
    /// Creates a new builder-style object to manufacture [`CodeGenEdge`](crate::types::CodeGenEdge).
    pub fn builder() -> crate::types::builders::CodeGenEdgeBuilder {
        crate::types::builders::CodeGenEdgeBuilder::default()
    }
}

/// A builder for [`CodeGenEdge`](crate::types::CodeGenEdge).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodeGenEdgeBuilder {
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) target: ::std::option::Option<::std::string::String>,
    pub(crate) target_parameter: ::std::option::Option<::std::string::String>,
}
impl CodeGenEdgeBuilder {
    /// <p>The ID of the node at which the edge starts.</p>
    /// This field is required.
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the node at which the edge starts.</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The ID of the node at which the edge starts.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>The ID of the node at which the edge ends.</p>
    /// This field is required.
    pub fn target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the node at which the edge ends.</p>
    pub fn set_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>The ID of the node at which the edge ends.</p>
    pub fn get_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.target
    }
    /// <p>The target of the edge.</p>
    pub fn target_parameter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_parameter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The target of the edge.</p>
    pub fn set_target_parameter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_parameter = input;
        self
    }
    /// <p>The target of the edge.</p>
    pub fn get_target_parameter(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_parameter
    }
    /// Consumes the builder and constructs a [`CodeGenEdge`](crate::types::CodeGenEdge).
    /// This method will fail if any of the following fields are not set:
    /// - [`source`](crate::types::builders::CodeGenEdgeBuilder::source)
    /// - [`target`](crate::types::builders::CodeGenEdgeBuilder::target)
    pub fn build(self) -> ::std::result::Result<crate::types::CodeGenEdge, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodeGenEdge {
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building CodeGenEdge",
                )
            })?,
            target: self.target.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target",
                    "target was not specified but it is required when building CodeGenEdge",
                )
            })?,
            target_parameter: self.target_parameter,
        })
    }
}
