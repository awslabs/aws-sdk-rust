// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a directional edge in a directed acyclic graph (DAG).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CodeGenEdge {
    /// <p>The ID of the node at which the edge starts.</p>
    #[doc(hidden)]
    pub source: std::option::Option<std::string::String>,
    /// <p>The ID of the node at which the edge ends.</p>
    #[doc(hidden)]
    pub target: std::option::Option<std::string::String>,
    /// <p>The target of the edge.</p>
    #[doc(hidden)]
    pub target_parameter: std::option::Option<std::string::String>,
}
impl CodeGenEdge {
    /// <p>The ID of the node at which the edge starts.</p>
    pub fn source(&self) -> std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>The ID of the node at which the edge ends.</p>
    pub fn target(&self) -> std::option::Option<&str> {
        self.target.as_deref()
    }
    /// <p>The target of the edge.</p>
    pub fn target_parameter(&self) -> std::option::Option<&str> {
        self.target_parameter.as_deref()
    }
}
impl CodeGenEdge {
    /// Creates a new builder-style object to manufacture [`CodeGenEdge`](crate::types::CodeGenEdge).
    pub fn builder() -> crate::types::builders::CodeGenEdgeBuilder {
        crate::types::builders::CodeGenEdgeBuilder::default()
    }
}

/// A builder for [`CodeGenEdge`](crate::types::CodeGenEdge).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CodeGenEdgeBuilder {
    pub(crate) source: std::option::Option<std::string::String>,
    pub(crate) target: std::option::Option<std::string::String>,
    pub(crate) target_parameter: std::option::Option<std::string::String>,
}
impl CodeGenEdgeBuilder {
    /// <p>The ID of the node at which the edge starts.</p>
    pub fn source(mut self, input: impl Into<std::string::String>) -> Self {
        self.source = Some(input.into());
        self
    }
    /// <p>The ID of the node at which the edge starts.</p>
    pub fn set_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The ID of the node at which the edge ends.</p>
    pub fn target(mut self, input: impl Into<std::string::String>) -> Self {
        self.target = Some(input.into());
        self
    }
    /// <p>The ID of the node at which the edge ends.</p>
    pub fn set_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>The target of the edge.</p>
    pub fn target_parameter(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_parameter = Some(input.into());
        self
    }
    /// <p>The target of the edge.</p>
    pub fn set_target_parameter(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_parameter = input;
        self
    }
    /// Consumes the builder and constructs a [`CodeGenEdge`](crate::types::CodeGenEdge).
    pub fn build(self) -> crate::types::CodeGenEdge {
        crate::types::CodeGenEdge {
            source: self.source,
            target: self.target,
            target_parameter: self.target_parameter,
        }
    }
}
