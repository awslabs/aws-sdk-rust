// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a transform that maps data property keys in the data source to data property keys in the data target. You can rename keys, modify the data types for keys, and choose which keys to drop from the dataset.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplyMapping {
    /// <p>The name of the transform node.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The data inputs identified by their node names.</p>
    #[doc(hidden)]
    pub inputs: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies the mapping of data property keys in the data source to data property keys in the data target.</p>
    #[doc(hidden)]
    pub mapping: std::option::Option<std::vec::Vec<crate::types::Mapping>>,
}
impl ApplyMapping {
    /// <p>The name of the transform node.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The data inputs identified by their node names.</p>
    pub fn inputs(&self) -> std::option::Option<&[std::string::String]> {
        self.inputs.as_deref()
    }
    /// <p>Specifies the mapping of data property keys in the data source to data property keys in the data target.</p>
    pub fn mapping(&self) -> std::option::Option<&[crate::types::Mapping]> {
        self.mapping.as_deref()
    }
}
impl ApplyMapping {
    /// Creates a new builder-style object to manufacture [`ApplyMapping`](crate::types::ApplyMapping).
    pub fn builder() -> crate::types::builders::ApplyMappingBuilder {
        crate::types::builders::ApplyMappingBuilder::default()
    }
}

/// A builder for [`ApplyMapping`](crate::types::ApplyMapping).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApplyMappingBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) inputs: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) mapping: std::option::Option<std::vec::Vec<crate::types::Mapping>>,
}
impl ApplyMappingBuilder {
    /// <p>The name of the transform node.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the transform node.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>The data inputs identified by their node names.</p>
    pub fn inputs(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input.into());
        self.inputs = Some(v);
        self
    }
    /// <p>The data inputs identified by their node names.</p>
    pub fn set_inputs(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inputs = input;
        self
    }
    /// Appends an item to `mapping`.
    ///
    /// To override the contents of this collection use [`set_mapping`](Self::set_mapping).
    ///
    /// <p>Specifies the mapping of data property keys in the data source to data property keys in the data target.</p>
    pub fn mapping(mut self, input: crate::types::Mapping) -> Self {
        let mut v = self.mapping.unwrap_or_default();
        v.push(input);
        self.mapping = Some(v);
        self
    }
    /// <p>Specifies the mapping of data property keys in the data source to data property keys in the data target.</p>
    pub fn set_mapping(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Mapping>>,
    ) -> Self {
        self.mapping = input;
        self
    }
    /// Consumes the builder and constructs a [`ApplyMapping`](crate::types::ApplyMapping).
    pub fn build(self) -> crate::types::ApplyMapping {
        crate::types::ApplyMapping {
            name: self.name,
            inputs: self.inputs,
            mapping: self.mapping,
        }
    }
}
