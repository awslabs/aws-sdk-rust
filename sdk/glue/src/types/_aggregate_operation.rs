// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the set of parameters needed to perform aggregation in the aggregate transform.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AggregateOperation {
    /// <p>Specifies the column on the data set on which the aggregation function will be applied.</p>
    pub column: ::std::vec::Vec<::std::string::String>,
    /// <p>Specifies the aggregation function to apply.</p>
    /// <p>Possible aggregation functions include: avg countDistinct, count, first, last, kurtosis, max, min, skewness, stddev_samp, stddev_pop, sum, sumDistinct, var_samp, var_pop</p>
    pub agg_func: crate::types::AggFunction,
}
impl AggregateOperation {
    /// <p>Specifies the column on the data set on which the aggregation function will be applied.</p>
    pub fn column(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.column.deref()
    }
    /// <p>Specifies the aggregation function to apply.</p>
    /// <p>Possible aggregation functions include: avg countDistinct, count, first, last, kurtosis, max, min, skewness, stddev_samp, stddev_pop, sum, sumDistinct, var_samp, var_pop</p>
    pub fn agg_func(&self) -> &crate::types::AggFunction {
        &self.agg_func
    }
}
impl AggregateOperation {
    /// Creates a new builder-style object to manufacture [`AggregateOperation`](crate::types::AggregateOperation).
    pub fn builder() -> crate::types::builders::AggregateOperationBuilder {
        crate::types::builders::AggregateOperationBuilder::default()
    }
}

/// A builder for [`AggregateOperation`](crate::types::AggregateOperation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AggregateOperationBuilder {
    pub(crate) column: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) agg_func: ::std::option::Option<crate::types::AggFunction>,
}
impl AggregateOperationBuilder {
    /// Appends an item to `column`.
    ///
    /// To override the contents of this collection use [`set_column`](Self::set_column).
    ///
    /// <p>Specifies the column on the data set on which the aggregation function will be applied.</p>
    pub fn column(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.column.unwrap_or_default();
        v.push(input.into());
        self.column = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the column on the data set on which the aggregation function will be applied.</p>
    pub fn set_column(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.column = input;
        self
    }
    /// <p>Specifies the column on the data set on which the aggregation function will be applied.</p>
    pub fn get_column(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.column
    }
    /// <p>Specifies the aggregation function to apply.</p>
    /// <p>Possible aggregation functions include: avg countDistinct, count, first, last, kurtosis, max, min, skewness, stddev_samp, stddev_pop, sum, sumDistinct, var_samp, var_pop</p>
    /// This field is required.
    pub fn agg_func(mut self, input: crate::types::AggFunction) -> Self {
        self.agg_func = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the aggregation function to apply.</p>
    /// <p>Possible aggregation functions include: avg countDistinct, count, first, last, kurtosis, max, min, skewness, stddev_samp, stddev_pop, sum, sumDistinct, var_samp, var_pop</p>
    pub fn set_agg_func(mut self, input: ::std::option::Option<crate::types::AggFunction>) -> Self {
        self.agg_func = input;
        self
    }
    /// <p>Specifies the aggregation function to apply.</p>
    /// <p>Possible aggregation functions include: avg countDistinct, count, first, last, kurtosis, max, min, skewness, stddev_samp, stddev_pop, sum, sumDistinct, var_samp, var_pop</p>
    pub fn get_agg_func(&self) -> &::std::option::Option<crate::types::AggFunction> {
        &self.agg_func
    }
    /// Consumes the builder and constructs a [`AggregateOperation`](crate::types::AggregateOperation).
    /// This method will fail if any of the following fields are not set:
    /// - [`column`](crate::types::builders::AggregateOperationBuilder::column)
    /// - [`agg_func`](crate::types::builders::AggregateOperationBuilder::agg_func)
    pub fn build(self) -> ::std::result::Result<crate::types::AggregateOperation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AggregateOperation {
            column: self.column.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "column",
                    "column was not specified but it is required when building AggregateOperation",
                )
            })?,
            agg_func: self.agg_func.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agg_func",
                    "agg_func was not specified but it is required when building AggregateOperation",
                )
            })?,
        })
    }
}
