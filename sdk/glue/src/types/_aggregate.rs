// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a transform that groups rows by chosen fields and computes the aggregated value by specified function.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Aggregate {
    /// <p>The name of the transform node.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Specifies the fields and rows to use as inputs for the aggregate transform.</p>
    #[doc(hidden)]
    pub inputs: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies the fields to group by.</p>
    #[doc(hidden)]
    pub groups: std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
    /// <p>Specifies the aggregate functions to be performed on specified fields. </p>
    #[doc(hidden)]
    pub aggs: std::option::Option<std::vec::Vec<crate::types::AggregateOperation>>,
}
impl Aggregate {
    /// <p>The name of the transform node.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies the fields and rows to use as inputs for the aggregate transform.</p>
    pub fn inputs(&self) -> std::option::Option<&[std::string::String]> {
        self.inputs.as_deref()
    }
    /// <p>Specifies the fields to group by.</p>
    pub fn groups(&self) -> std::option::Option<&[std::vec::Vec<std::string::String>]> {
        self.groups.as_deref()
    }
    /// <p>Specifies the aggregate functions to be performed on specified fields. </p>
    pub fn aggs(&self) -> std::option::Option<&[crate::types::AggregateOperation]> {
        self.aggs.as_deref()
    }
}
impl Aggregate {
    /// Creates a new builder-style object to manufacture [`Aggregate`](crate::types::Aggregate).
    pub fn builder() -> crate::types::builders::AggregateBuilder {
        crate::types::builders::AggregateBuilder::default()
    }
}

/// A builder for [`Aggregate`](crate::types::Aggregate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AggregateBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) inputs: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) groups: std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
    pub(crate) aggs: std::option::Option<std::vec::Vec<crate::types::AggregateOperation>>,
}
impl AggregateBuilder {
    /// <p>The name of the transform node.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the transform node.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>Specifies the fields and rows to use as inputs for the aggregate transform.</p>
    pub fn inputs(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input.into());
        self.inputs = Some(v);
        self
    }
    /// <p>Specifies the fields and rows to use as inputs for the aggregate transform.</p>
    pub fn set_inputs(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inputs = input;
        self
    }
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>Specifies the fields to group by.</p>
    pub fn groups(mut self, input: std::vec::Vec<std::string::String>) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input);
        self.groups = Some(v);
        self
    }
    /// <p>Specifies the fields to group by.</p>
    pub fn set_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
    ) -> Self {
        self.groups = input;
        self
    }
    /// Appends an item to `aggs`.
    ///
    /// To override the contents of this collection use [`set_aggs`](Self::set_aggs).
    ///
    /// <p>Specifies the aggregate functions to be performed on specified fields. </p>
    pub fn aggs(mut self, input: crate::types::AggregateOperation) -> Self {
        let mut v = self.aggs.unwrap_or_default();
        v.push(input);
        self.aggs = Some(v);
        self
    }
    /// <p>Specifies the aggregate functions to be performed on specified fields. </p>
    pub fn set_aggs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AggregateOperation>>,
    ) -> Self {
        self.aggs = input;
        self
    }
    /// Consumes the builder and constructs a [`Aggregate`](crate::types::Aggregate).
    pub fn build(self) -> crate::types::Aggregate {
        crate::types::Aggregate {
            name: self.name,
            inputs: self.inputs,
            groups: self.groups,
            aggs: self.aggs,
        }
    }
}
