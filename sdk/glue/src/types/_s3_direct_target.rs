// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a data target that writes to Amazon S3.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3DirectTarget {
    /// <p>The name of the data target.</p>
    pub name: ::std::string::String,
    /// <p>The nodes that are inputs to the data target.</p>
    pub inputs: ::std::vec::Vec<::std::string::String>,
    /// <p>Specifies native partitioning using a sequence of keys.</p>
    pub partition_keys: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
    /// <p>A single Amazon S3 path to write to.</p>
    pub path: ::std::string::String,
    /// <p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>"gzip"</code> and <code>"bzip"</code>).</p>
    pub compression: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the data output format for the target.</p>
    pub format: crate::types::TargetFormat,
    /// <p>A policy that specifies update behavior for the crawler.</p>
    pub schema_change_policy: ::std::option::Option<crate::types::DirectSchemaChangePolicy>,
}
impl S3DirectTarget {
    /// <p>The name of the data target.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The nodes that are inputs to the data target.</p>
    pub fn inputs(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.inputs.deref()
    }
    /// <p>Specifies native partitioning using a sequence of keys.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.partition_keys.is_none()`.
    pub fn partition_keys(&self) -> &[::std::vec::Vec<::std::string::String>] {
        self.partition_keys.as_deref().unwrap_or_default()
    }
    /// <p>A single Amazon S3 path to write to.</p>
    pub fn path(&self) -> &str {
        use std::ops::Deref;
        self.path.deref()
    }
    /// <p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>"gzip"</code> and <code>"bzip"</code>).</p>
    pub fn compression(&self) -> ::std::option::Option<&str> {
        self.compression.as_deref()
    }
    /// <p>Specifies the data output format for the target.</p>
    pub fn format(&self) -> &crate::types::TargetFormat {
        &self.format
    }
    /// <p>A policy that specifies update behavior for the crawler.</p>
    pub fn schema_change_policy(&self) -> ::std::option::Option<&crate::types::DirectSchemaChangePolicy> {
        self.schema_change_policy.as_ref()
    }
}
impl S3DirectTarget {
    /// Creates a new builder-style object to manufacture [`S3DirectTarget`](crate::types::S3DirectTarget).
    pub fn builder() -> crate::types::builders::S3DirectTargetBuilder {
        crate::types::builders::S3DirectTargetBuilder::default()
    }
}

/// A builder for [`S3DirectTarget`](crate::types::S3DirectTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3DirectTargetBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) inputs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) partition_keys: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) compression: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::TargetFormat>,
    pub(crate) schema_change_policy: ::std::option::Option<crate::types::DirectSchemaChangePolicy>,
}
impl S3DirectTargetBuilder {
    /// <p>The name of the data target.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data target.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data target.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>The nodes that are inputs to the data target.</p>
    pub fn inputs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input.into());
        self.inputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The nodes that are inputs to the data target.</p>
    pub fn set_inputs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inputs = input;
        self
    }
    /// <p>The nodes that are inputs to the data target.</p>
    pub fn get_inputs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.inputs
    }
    /// Appends an item to `partition_keys`.
    ///
    /// To override the contents of this collection use [`set_partition_keys`](Self::set_partition_keys).
    ///
    /// <p>Specifies native partitioning using a sequence of keys.</p>
    pub fn partition_keys(mut self, input: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut v = self.partition_keys.unwrap_or_default();
        v.push(input);
        self.partition_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies native partitioning using a sequence of keys.</p>
    pub fn set_partition_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>) -> Self {
        self.partition_keys = input;
        self
    }
    /// <p>Specifies native partitioning using a sequence of keys.</p>
    pub fn get_partition_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>> {
        &self.partition_keys
    }
    /// <p>A single Amazon S3 path to write to.</p>
    /// This field is required.
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A single Amazon S3 path to write to.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>A single Amazon S3 path to write to.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>"gzip"</code> and <code>"bzip"</code>).</p>
    pub fn compression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.compression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>"gzip"</code> and <code>"bzip"</code>).</p>
    pub fn set_compression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.compression = input;
        self
    }
    /// <p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>"gzip"</code> and <code>"bzip"</code>).</p>
    pub fn get_compression(&self) -> &::std::option::Option<::std::string::String> {
        &self.compression
    }
    /// <p>Specifies the data output format for the target.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::TargetFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the data output format for the target.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::TargetFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>Specifies the data output format for the target.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::TargetFormat> {
        &self.format
    }
    /// <p>A policy that specifies update behavior for the crawler.</p>
    pub fn schema_change_policy(mut self, input: crate::types::DirectSchemaChangePolicy) -> Self {
        self.schema_change_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>A policy that specifies update behavior for the crawler.</p>
    pub fn set_schema_change_policy(mut self, input: ::std::option::Option<crate::types::DirectSchemaChangePolicy>) -> Self {
        self.schema_change_policy = input;
        self
    }
    /// <p>A policy that specifies update behavior for the crawler.</p>
    pub fn get_schema_change_policy(&self) -> &::std::option::Option<crate::types::DirectSchemaChangePolicy> {
        &self.schema_change_policy
    }
    /// Consumes the builder and constructs a [`S3DirectTarget`](crate::types::S3DirectTarget).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::S3DirectTargetBuilder::name)
    /// - [`inputs`](crate::types::builders::S3DirectTargetBuilder::inputs)
    /// - [`path`](crate::types::builders::S3DirectTargetBuilder::path)
    /// - [`format`](crate::types::builders::S3DirectTargetBuilder::format)
    pub fn build(self) -> ::std::result::Result<crate::types::S3DirectTarget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3DirectTarget {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building S3DirectTarget",
                )
            })?,
            inputs: self.inputs.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "inputs",
                    "inputs was not specified but it is required when building S3DirectTarget",
                )
            })?,
            partition_keys: self.partition_keys,
            path: self.path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "path",
                    "path was not specified but it is required when building S3DirectTarget",
                )
            })?,
            compression: self.compression,
            format: self.format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "format",
                    "format was not specified but it is required when building S3DirectTarget",
                )
            })?,
            schema_change_policy: self.schema_change_policy,
        })
    }
}
