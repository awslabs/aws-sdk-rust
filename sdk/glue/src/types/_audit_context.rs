// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing information for audit.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuditContext {
    /// <p>The context for the audit..</p>
    #[doc(hidden)]
    pub additional_audit_context: std::option::Option<std::string::String>,
    /// <p>The requested columns for audit.</p>
    #[doc(hidden)]
    pub requested_columns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>All columns request for audit.</p>
    #[doc(hidden)]
    pub all_columns_requested: std::option::Option<bool>,
}
impl AuditContext {
    /// <p>The context for the audit..</p>
    pub fn additional_audit_context(&self) -> std::option::Option<&str> {
        self.additional_audit_context.as_deref()
    }
    /// <p>The requested columns for audit.</p>
    pub fn requested_columns(&self) -> std::option::Option<&[std::string::String]> {
        self.requested_columns.as_deref()
    }
    /// <p>All columns request for audit.</p>
    pub fn all_columns_requested(&self) -> std::option::Option<bool> {
        self.all_columns_requested
    }
}
impl AuditContext {
    /// Creates a new builder-style object to manufacture [`AuditContext`](crate::types::AuditContext).
    pub fn builder() -> crate::types::builders::AuditContextBuilder {
        crate::types::builders::AuditContextBuilder::default()
    }
}

/// A builder for [`AuditContext`](crate::types::AuditContext).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AuditContextBuilder {
    pub(crate) additional_audit_context: std::option::Option<std::string::String>,
    pub(crate) requested_columns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) all_columns_requested: std::option::Option<bool>,
}
impl AuditContextBuilder {
    /// <p>The context for the audit..</p>
    pub fn additional_audit_context(mut self, input: impl Into<std::string::String>) -> Self {
        self.additional_audit_context = Some(input.into());
        self
    }
    /// <p>The context for the audit..</p>
    pub fn set_additional_audit_context(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.additional_audit_context = input;
        self
    }
    /// Appends an item to `requested_columns`.
    ///
    /// To override the contents of this collection use [`set_requested_columns`](Self::set_requested_columns).
    ///
    /// <p>The requested columns for audit.</p>
    pub fn requested_columns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.requested_columns.unwrap_or_default();
        v.push(input.into());
        self.requested_columns = Some(v);
        self
    }
    /// <p>The requested columns for audit.</p>
    pub fn set_requested_columns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.requested_columns = input;
        self
    }
    /// <p>All columns request for audit.</p>
    pub fn all_columns_requested(mut self, input: bool) -> Self {
        self.all_columns_requested = Some(input);
        self
    }
    /// <p>All columns request for audit.</p>
    pub fn set_all_columns_requested(mut self, input: std::option::Option<bool>) -> Self {
        self.all_columns_requested = input;
        self
    }
    /// Consumes the builder and constructs a [`AuditContext`](crate::types::AuditContext).
    pub fn build(self) -> crate::types::AuditContext {
        crate::types::AuditContext {
            additional_audit_context: self.additional_audit_context,
            requested_columns: self.requested_columns,
            all_columns_requested: self.all_columns_requested,
        }
    }
}
