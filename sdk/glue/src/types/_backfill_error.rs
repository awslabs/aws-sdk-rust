// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of errors that can occur when registering partition indexes for an existing table.</p>
/// <p>These errors give the details about why an index registration failed and provide a limited number of partitions in the response, so that you can fix the partitions at fault and try registering the index again. The most common set of errors that can occur are categorized as follows:</p>
/// <ul>
/// <li> <p>EncryptedPartitionError: The partitions are encrypted.</p> </li>
/// <li> <p>InvalidPartitionTypeDataError: The partition value doesn't match the data type for that partition column.</p> </li>
/// <li> <p>MissingPartitionValueError: The partitions are encrypted.</p> </li>
/// <li> <p>UnsupportedPartitionCharacterError: Characters inside the partition value are not supported. For example: U+0000 , U+0001, U+0002.</p> </li>
/// <li> <p>InternalError: Any error which does not belong to other error codes.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BackfillError {
    /// <p>The error code for an error that occurred when registering partition indexes for an existing table.</p>
    #[doc(hidden)]
    pub code: std::option::Option<crate::types::BackfillErrorCode>,
    /// <p>A list of a limited number of partitions in the response.</p>
    #[doc(hidden)]
    pub partitions: std::option::Option<std::vec::Vec<crate::types::PartitionValueList>>,
}
impl BackfillError {
    /// <p>The error code for an error that occurred when registering partition indexes for an existing table.</p>
    pub fn code(&self) -> std::option::Option<&crate::types::BackfillErrorCode> {
        self.code.as_ref()
    }
    /// <p>A list of a limited number of partitions in the response.</p>
    pub fn partitions(&self) -> std::option::Option<&[crate::types::PartitionValueList]> {
        self.partitions.as_deref()
    }
}
impl BackfillError {
    /// Creates a new builder-style object to manufacture [`BackfillError`](crate::types::BackfillError).
    pub fn builder() -> crate::types::builders::BackfillErrorBuilder {
        crate::types::builders::BackfillErrorBuilder::default()
    }
}

/// A builder for [`BackfillError`](crate::types::BackfillError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BackfillErrorBuilder {
    pub(crate) code: std::option::Option<crate::types::BackfillErrorCode>,
    pub(crate) partitions: std::option::Option<std::vec::Vec<crate::types::PartitionValueList>>,
}
impl BackfillErrorBuilder {
    /// <p>The error code for an error that occurred when registering partition indexes for an existing table.</p>
    pub fn code(mut self, input: crate::types::BackfillErrorCode) -> Self {
        self.code = Some(input);
        self
    }
    /// <p>The error code for an error that occurred when registering partition indexes for an existing table.</p>
    pub fn set_code(mut self, input: std::option::Option<crate::types::BackfillErrorCode>) -> Self {
        self.code = input;
        self
    }
    /// Appends an item to `partitions`.
    ///
    /// To override the contents of this collection use [`set_partitions`](Self::set_partitions).
    ///
    /// <p>A list of a limited number of partitions in the response.</p>
    pub fn partitions(mut self, input: crate::types::PartitionValueList) -> Self {
        let mut v = self.partitions.unwrap_or_default();
        v.push(input);
        self.partitions = Some(v);
        self
    }
    /// <p>A list of a limited number of partitions in the response.</p>
    pub fn set_partitions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PartitionValueList>>,
    ) -> Self {
        self.partitions = input;
        self
    }
    /// Consumes the builder and constructs a [`BackfillError`](crate::types::BackfillError).
    pub fn build(self) -> crate::types::BackfillError {
        crate::types::BackfillError {
            code: self.code,
            partitions: self.partitions,
        }
    }
}
