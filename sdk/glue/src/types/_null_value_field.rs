// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a custom null value such as a zeros or other value being used as a null placeholder unique to the dataset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NullValueField {
    /// <p>The value of the null placeholder.</p>
    pub value: ::std::string::String,
    /// <p>The datatype of the value.</p>
    pub datatype: ::std::option::Option<crate::types::Datatype>,
}
impl NullValueField {
    /// <p>The value of the null placeholder.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
    /// <p>The datatype of the value.</p>
    pub fn datatype(&self) -> ::std::option::Option<&crate::types::Datatype> {
        self.datatype.as_ref()
    }
}
impl NullValueField {
    /// Creates a new builder-style object to manufacture [`NullValueField`](crate::types::NullValueField).
    pub fn builder() -> crate::types::builders::NullValueFieldBuilder {
        crate::types::builders::NullValueFieldBuilder::default()
    }
}

/// A builder for [`NullValueField`](crate::types::NullValueField).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NullValueFieldBuilder {
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) datatype: ::std::option::Option<crate::types::Datatype>,
}
impl NullValueFieldBuilder {
    /// <p>The value of the null placeholder.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the null placeholder.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the null placeholder.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The datatype of the value.</p>
    /// This field is required.
    pub fn datatype(mut self, input: crate::types::Datatype) -> Self {
        self.datatype = ::std::option::Option::Some(input);
        self
    }
    /// <p>The datatype of the value.</p>
    pub fn set_datatype(mut self, input: ::std::option::Option<crate::types::Datatype>) -> Self {
        self.datatype = input;
        self
    }
    /// <p>The datatype of the value.</p>
    pub fn get_datatype(&self) -> &::std::option::Option<crate::types::Datatype> {
        &self.datatype
    }
    /// Consumes the builder and constructs a [`NullValueField`](crate::types::NullValueField).
    /// This method will fail if any of the following fields are not set:
    /// - [`value`](crate::types::builders::NullValueFieldBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::NullValueField, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NullValueField {
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building NullValueField",
                )
            })?,
            datatype: self.datatype,
        })
    }
}
