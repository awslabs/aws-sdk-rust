// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a custom null value such as a zeros or other value being used as a null placeholder unique to the dataset.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NullValueField {
    /// <p>The value of the null placeholder.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The datatype of the value.</p>
    #[doc(hidden)]
    pub datatype: std::option::Option<crate::types::Datatype>,
}
impl NullValueField {
    /// <p>The value of the null placeholder.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The datatype of the value.</p>
    pub fn datatype(&self) -> std::option::Option<&crate::types::Datatype> {
        self.datatype.as_ref()
    }
}
impl NullValueField {
    /// Creates a new builder-style object to manufacture [`NullValueField`](crate::types::NullValueField).
    pub fn builder() -> crate::types::builders::NullValueFieldBuilder {
        crate::types::builders::NullValueFieldBuilder::default()
    }
}

/// A builder for [`NullValueField`](crate::types::NullValueField).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NullValueFieldBuilder {
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) datatype: std::option::Option<crate::types::Datatype>,
}
impl NullValueFieldBuilder {
    /// <p>The value of the null placeholder.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value of the null placeholder.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The datatype of the value.</p>
    pub fn datatype(mut self, input: crate::types::Datatype) -> Self {
        self.datatype = Some(input);
        self
    }
    /// <p>The datatype of the value.</p>
    pub fn set_datatype(mut self, input: std::option::Option<crate::types::Datatype>) -> Self {
        self.datatype = input;
        self
    }
    /// Consumes the builder and constructs a [`NullValueField`](crate::types::NullValueField).
    pub fn build(self) -> crate::types::NullValueField {
        crate::types::NullValueField {
            value: self.value,
            datatype: self.datatype,
        }
    }
}
