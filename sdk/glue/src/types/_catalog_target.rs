// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an Glue Data Catalog target.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CatalogTarget {
    /// <p>The name of the database to be synchronized.</p>
    pub database_name: ::std::string::String,
    /// <p>A list of the tables to be synchronized.</p>
    pub tables: ::std::vec::Vec<::std::string::String>,
    /// <p>The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a <code>Catalog</code> connection type paired with a <code>NETWORK</code> Connection type.</p>
    pub connection_name: ::std::option::Option<::std::string::String>,
    /// <p>A valid Amazon SQS ARN. For example, <code>arn:aws:sqs:region:account:sqs</code>.</p>
    pub event_queue_arn: ::std::option::Option<::std::string::String>,
    /// <p>A valid Amazon dead-letter SQS ARN. For example, <code>arn:aws:sqs:region:account:deadLetterQueue</code>.</p>
    pub dlq_event_queue_arn: ::std::option::Option<::std::string::String>,
}
impl CatalogTarget {
    /// <p>The name of the database to be synchronized.</p>
    pub fn database_name(&self) -> &str {
        use std::ops::Deref;
        self.database_name.deref()
    }
    /// <p>A list of the tables to be synchronized.</p>
    pub fn tables(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.tables.deref()
    }
    /// <p>The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a <code>Catalog</code> connection type paired with a <code>NETWORK</code> Connection type.</p>
    pub fn connection_name(&self) -> ::std::option::Option<&str> {
        self.connection_name.as_deref()
    }
    /// <p>A valid Amazon SQS ARN. For example, <code>arn:aws:sqs:region:account:sqs</code>.</p>
    pub fn event_queue_arn(&self) -> ::std::option::Option<&str> {
        self.event_queue_arn.as_deref()
    }
    /// <p>A valid Amazon dead-letter SQS ARN. For example, <code>arn:aws:sqs:region:account:deadLetterQueue</code>.</p>
    pub fn dlq_event_queue_arn(&self) -> ::std::option::Option<&str> {
        self.dlq_event_queue_arn.as_deref()
    }
}
impl CatalogTarget {
    /// Creates a new builder-style object to manufacture [`CatalogTarget`](crate::types::CatalogTarget).
    pub fn builder() -> crate::types::builders::CatalogTargetBuilder {
        crate::types::builders::CatalogTargetBuilder::default()
    }
}

/// A builder for [`CatalogTarget`](crate::types::CatalogTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CatalogTargetBuilder {
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) tables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) connection_name: ::std::option::Option<::std::string::String>,
    pub(crate) event_queue_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dlq_event_queue_arn: ::std::option::Option<::std::string::String>,
}
impl CatalogTargetBuilder {
    /// <p>The name of the database to be synchronized.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database to be synchronized.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the database to be synchronized.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// Appends an item to `tables`.
    ///
    /// To override the contents of this collection use [`set_tables`](Self::set_tables).
    ///
    /// <p>A list of the tables to be synchronized.</p>
    pub fn tables(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tables.unwrap_or_default();
        v.push(input.into());
        self.tables = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the tables to be synchronized.</p>
    pub fn set_tables(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tables = input;
        self
    }
    /// <p>A list of the tables to be synchronized.</p>
    pub fn get_tables(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tables
    }
    /// <p>The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a <code>Catalog</code> connection type paired with a <code>NETWORK</code> Connection type.</p>
    pub fn connection_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a <code>Catalog</code> connection type paired with a <code>NETWORK</code> Connection type.</p>
    pub fn set_connection_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_name = input;
        self
    }
    /// <p>The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a <code>Catalog</code> connection type paired with a <code>NETWORK</code> Connection type.</p>
    pub fn get_connection_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_name
    }
    /// <p>A valid Amazon SQS ARN. For example, <code>arn:aws:sqs:region:account:sqs</code>.</p>
    pub fn event_queue_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_queue_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A valid Amazon SQS ARN. For example, <code>arn:aws:sqs:region:account:sqs</code>.</p>
    pub fn set_event_queue_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_queue_arn = input;
        self
    }
    /// <p>A valid Amazon SQS ARN. For example, <code>arn:aws:sqs:region:account:sqs</code>.</p>
    pub fn get_event_queue_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_queue_arn
    }
    /// <p>A valid Amazon dead-letter SQS ARN. For example, <code>arn:aws:sqs:region:account:deadLetterQueue</code>.</p>
    pub fn dlq_event_queue_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dlq_event_queue_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A valid Amazon dead-letter SQS ARN. For example, <code>arn:aws:sqs:region:account:deadLetterQueue</code>.</p>
    pub fn set_dlq_event_queue_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dlq_event_queue_arn = input;
        self
    }
    /// <p>A valid Amazon dead-letter SQS ARN. For example, <code>arn:aws:sqs:region:account:deadLetterQueue</code>.</p>
    pub fn get_dlq_event_queue_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dlq_event_queue_arn
    }
    /// Consumes the builder and constructs a [`CatalogTarget`](crate::types::CatalogTarget).
    /// This method will fail if any of the following fields are not set:
    /// - [`database_name`](crate::types::builders::CatalogTargetBuilder::database_name)
    /// - [`tables`](crate::types::builders::CatalogTargetBuilder::tables)
    pub fn build(self) -> ::std::result::Result<crate::types::CatalogTarget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CatalogTarget {
            database_name: self.database_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database_name",
                    "database_name was not specified but it is required when building CatalogTarget",
                )
            })?,
            tables: self.tables.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tables",
                    "tables was not specified but it is required when building CatalogTarget",
                )
            })?,
            connection_name: self.connection_name,
            event_queue_arn: self.event_queue_arn,
            dlq_event_queue_arn: self.dlq_event_queue_arn,
        })
    }
}
