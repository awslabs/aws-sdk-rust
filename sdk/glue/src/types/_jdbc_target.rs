// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a JDBC data store to crawl.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JdbcTarget {
    /// <p>The name of the connection to use to connect to the JDBC target.</p>
    pub connection_name: ::std::option::Option<::std::string::String>,
    /// <p>The path of the JDBC target.</p>
    pub path: ::std::option::Option<::std::string::String>,
    /// <p>A list of glob patterns used to exclude from the crawl. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html">Catalog Tables with a Crawler</a>.</p>
    pub exclusions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specify a value of <code>RAWTYPES</code> or <code>COMMENTS</code> to enable additional metadata in table responses. <code>RAWTYPES</code> provides the native-level datatype. <code>COMMENTS</code> provides comments associated with a column or table in the database.</p>
    /// <p>If you do not need additional metadata, keep the field empty.</p>
    pub enable_additional_metadata: ::std::option::Option<::std::vec::Vec<crate::types::JdbcMetadataEntry>>,
}
impl JdbcTarget {
    /// <p>The name of the connection to use to connect to the JDBC target.</p>
    pub fn connection_name(&self) -> ::std::option::Option<&str> {
        self.connection_name.as_deref()
    }
    /// <p>The path of the JDBC target.</p>
    pub fn path(&self) -> ::std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>A list of glob patterns used to exclude from the crawl. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html">Catalog Tables with a Crawler</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclusions.is_none()`.
    pub fn exclusions(&self) -> &[::std::string::String] {
        self.exclusions.as_deref().unwrap_or_default()
    }
    /// <p>Specify a value of <code>RAWTYPES</code> or <code>COMMENTS</code> to enable additional metadata in table responses. <code>RAWTYPES</code> provides the native-level datatype. <code>COMMENTS</code> provides comments associated with a column or table in the database.</p>
    /// <p>If you do not need additional metadata, keep the field empty.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enable_additional_metadata.is_none()`.
    pub fn enable_additional_metadata(&self) -> &[crate::types::JdbcMetadataEntry] {
        self.enable_additional_metadata.as_deref().unwrap_or_default()
    }
}
impl JdbcTarget {
    /// Creates a new builder-style object to manufacture [`JdbcTarget`](crate::types::JdbcTarget).
    pub fn builder() -> crate::types::builders::JdbcTargetBuilder {
        crate::types::builders::JdbcTargetBuilder::default()
    }
}

/// A builder for [`JdbcTarget`](crate::types::JdbcTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JdbcTargetBuilder {
    pub(crate) connection_name: ::std::option::Option<::std::string::String>,
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) exclusions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) enable_additional_metadata: ::std::option::Option<::std::vec::Vec<crate::types::JdbcMetadataEntry>>,
}
impl JdbcTargetBuilder {
    /// <p>The name of the connection to use to connect to the JDBC target.</p>
    pub fn connection_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the connection to use to connect to the JDBC target.</p>
    pub fn set_connection_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_name = input;
        self
    }
    /// <p>The name of the connection to use to connect to the JDBC target.</p>
    pub fn get_connection_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_name
    }
    /// <p>The path of the JDBC target.</p>
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path of the JDBC target.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The path of the JDBC target.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// Appends an item to `exclusions`.
    ///
    /// To override the contents of this collection use [`set_exclusions`](Self::set_exclusions).
    ///
    /// <p>A list of glob patterns used to exclude from the crawl. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html">Catalog Tables with a Crawler</a>.</p>
    pub fn exclusions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.exclusions.unwrap_or_default();
        v.push(input.into());
        self.exclusions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of glob patterns used to exclude from the crawl. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html">Catalog Tables with a Crawler</a>.</p>
    pub fn set_exclusions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.exclusions = input;
        self
    }
    /// <p>A list of glob patterns used to exclude from the crawl. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html">Catalog Tables with a Crawler</a>.</p>
    pub fn get_exclusions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.exclusions
    }
    /// Appends an item to `enable_additional_metadata`.
    ///
    /// To override the contents of this collection use [`set_enable_additional_metadata`](Self::set_enable_additional_metadata).
    ///
    /// <p>Specify a value of <code>RAWTYPES</code> or <code>COMMENTS</code> to enable additional metadata in table responses. <code>RAWTYPES</code> provides the native-level datatype. <code>COMMENTS</code> provides comments associated with a column or table in the database.</p>
    /// <p>If you do not need additional metadata, keep the field empty.</p>
    pub fn enable_additional_metadata(mut self, input: crate::types::JdbcMetadataEntry) -> Self {
        let mut v = self.enable_additional_metadata.unwrap_or_default();
        v.push(input);
        self.enable_additional_metadata = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specify a value of <code>RAWTYPES</code> or <code>COMMENTS</code> to enable additional metadata in table responses. <code>RAWTYPES</code> provides the native-level datatype. <code>COMMENTS</code> provides comments associated with a column or table in the database.</p>
    /// <p>If you do not need additional metadata, keep the field empty.</p>
    pub fn set_enable_additional_metadata(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::JdbcMetadataEntry>>) -> Self {
        self.enable_additional_metadata = input;
        self
    }
    /// <p>Specify a value of <code>RAWTYPES</code> or <code>COMMENTS</code> to enable additional metadata in table responses. <code>RAWTYPES</code> provides the native-level datatype. <code>COMMENTS</code> provides comments associated with a column or table in the database.</p>
    /// <p>If you do not need additional metadata, keep the field empty.</p>
    pub fn get_enable_additional_metadata(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::JdbcMetadataEntry>> {
        &self.enable_additional_metadata
    }
    /// Consumes the builder and constructs a [`JdbcTarget`](crate::types::JdbcTarget).
    pub fn build(self) -> crate::types::JdbcTarget {
        crate::types::JdbcTarget {
            connection_name: self.connection_name,
            path: self.path,
            exclusions: self.exclusions,
            enable_additional_metadata: self.enable_additional_metadata,
        }
    }
}
