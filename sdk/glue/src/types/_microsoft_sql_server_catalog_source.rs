// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a Microsoft SQL server data source in the Glue Data Catalog.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MicrosoftSqlServerCatalogSource {
    /// <p>The name of the data source.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the database to read from.</p>
    #[doc(hidden)]
    pub database: std::option::Option<std::string::String>,
    /// <p>The name of the table in the database to read from.</p>
    #[doc(hidden)]
    pub table: std::option::Option<std::string::String>,
}
impl MicrosoftSqlServerCatalogSource {
    /// <p>The name of the data source.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the database to read from.</p>
    pub fn database(&self) -> std::option::Option<&str> {
        self.database.as_deref()
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn table(&self) -> std::option::Option<&str> {
        self.table.as_deref()
    }
}
impl MicrosoftSqlServerCatalogSource {
    /// Creates a new builder-style object to manufacture [`MicrosoftSqlServerCatalogSource`](crate::types::MicrosoftSqlServerCatalogSource).
    pub fn builder() -> crate::types::builders::MicrosoftSqlServerCatalogSourceBuilder {
        crate::types::builders::MicrosoftSqlServerCatalogSourceBuilder::default()
    }
}

/// A builder for [`MicrosoftSqlServerCatalogSource`](crate::types::MicrosoftSqlServerCatalogSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MicrosoftSqlServerCatalogSourceBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) database: std::option::Option<std::string::String>,
    pub(crate) table: std::option::Option<std::string::String>,
}
impl MicrosoftSqlServerCatalogSourceBuilder {
    /// <p>The name of the data source.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the data source.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the database to read from.</p>
    pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
        self.database = Some(input.into());
        self
    }
    /// <p>The name of the database to read from.</p>
    pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn table(mut self, input: impl Into<std::string::String>) -> Self {
        self.table = Some(input.into());
        self
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn set_table(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table = input;
        self
    }
    /// Consumes the builder and constructs a [`MicrosoftSqlServerCatalogSource`](crate::types::MicrosoftSqlServerCatalogSource).
    pub fn build(self) -> crate::types::MicrosoftSqlServerCatalogSource {
        crate::types::MicrosoftSqlServerCatalogSource {
            name: self.name,
            database: self.database,
            table: self.table,
        }
    }
}
