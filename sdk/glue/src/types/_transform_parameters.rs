// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The algorithm-specific parameters that are associated with the machine learning transform.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransformParameters {
    /// <p>The type of machine learning transform.</p>
    /// <p>For information about the types of machine learning transforms, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html">Creating Machine Learning Transforms</a>.</p>
    pub transform_type: crate::types::TransformType,
    /// <p>The parameters for the find matches algorithm.</p>
    pub find_matches_parameters: ::std::option::Option<crate::types::FindMatchesParameters>,
}
impl TransformParameters {
    /// <p>The type of machine learning transform.</p>
    /// <p>For information about the types of machine learning transforms, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html">Creating Machine Learning Transforms</a>.</p>
    pub fn transform_type(&self) -> &crate::types::TransformType {
        &self.transform_type
    }
    /// <p>The parameters for the find matches algorithm.</p>
    pub fn find_matches_parameters(&self) -> ::std::option::Option<&crate::types::FindMatchesParameters> {
        self.find_matches_parameters.as_ref()
    }
}
impl TransformParameters {
    /// Creates a new builder-style object to manufacture [`TransformParameters`](crate::types::TransformParameters).
    pub fn builder() -> crate::types::builders::TransformParametersBuilder {
        crate::types::builders::TransformParametersBuilder::default()
    }
}

/// A builder for [`TransformParameters`](crate::types::TransformParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TransformParametersBuilder {
    pub(crate) transform_type: ::std::option::Option<crate::types::TransformType>,
    pub(crate) find_matches_parameters: ::std::option::Option<crate::types::FindMatchesParameters>,
}
impl TransformParametersBuilder {
    /// <p>The type of machine learning transform.</p>
    /// <p>For information about the types of machine learning transforms, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html">Creating Machine Learning Transforms</a>.</p>
    /// This field is required.
    pub fn transform_type(mut self, input: crate::types::TransformType) -> Self {
        self.transform_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of machine learning transform.</p>
    /// <p>For information about the types of machine learning transforms, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html">Creating Machine Learning Transforms</a>.</p>
    pub fn set_transform_type(mut self, input: ::std::option::Option<crate::types::TransformType>) -> Self {
        self.transform_type = input;
        self
    }
    /// <p>The type of machine learning transform.</p>
    /// <p>For information about the types of machine learning transforms, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html">Creating Machine Learning Transforms</a>.</p>
    pub fn get_transform_type(&self) -> &::std::option::Option<crate::types::TransformType> {
        &self.transform_type
    }
    /// <p>The parameters for the find matches algorithm.</p>
    pub fn find_matches_parameters(mut self, input: crate::types::FindMatchesParameters) -> Self {
        self.find_matches_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parameters for the find matches algorithm.</p>
    pub fn set_find_matches_parameters(mut self, input: ::std::option::Option<crate::types::FindMatchesParameters>) -> Self {
        self.find_matches_parameters = input;
        self
    }
    /// <p>The parameters for the find matches algorithm.</p>
    pub fn get_find_matches_parameters(&self) -> &::std::option::Option<crate::types::FindMatchesParameters> {
        &self.find_matches_parameters
    }
    /// Consumes the builder and constructs a [`TransformParameters`](crate::types::TransformParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`transform_type`](crate::types::builders::TransformParametersBuilder::transform_type)
    pub fn build(self) -> ::std::result::Result<crate::types::TransformParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TransformParameters {
            transform_type: self.transform_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "transform_type",
                    "transform_type was not specified but it is required when building TransformParameters",
                )
            })?,
            find_matches_parameters: self.find_matches_parameters,
        })
    }
}
