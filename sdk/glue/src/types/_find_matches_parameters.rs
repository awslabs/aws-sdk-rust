// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters to configure the find matches transform.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FindMatchesParameters {
    /// <p>The name of a column that uniquely identifies rows in the source table. Used to help identify matching records.</p>
    #[doc(hidden)]
    pub primary_key_column_name: std::option::Option<std::string::String>,
    /// <p>The value selected when tuning your transform for a balance between precision and recall. A value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to 1.0 means very low recall, and choosing values close to 0.0 results in very low precision.</p>
    /// <p>The precision metric indicates how often your model is correct when it predicts a match. </p>
    /// <p>The recall metric indicates that for an actual match, how often your model predicts the match.</p>
    #[doc(hidden)]
    pub precision_recall_tradeoff: std::option::Option<f64>,
    /// <p>The value that is selected when tuning your transform for a balance between accuracy and cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of 1.0 means a bias purely for accuracy, which typically results in a higher cost, sometimes substantially higher. A value of 0.0 means a bias purely for cost, which results in a less accurate <code>FindMatches</code> transform, sometimes with unacceptable accuracy.</p>
    /// <p>Accuracy measures how well the transform finds true positives and true negatives. Increasing accuracy requires more machine resources and cost. But it also results in increased recall. </p>
    /// <p>Cost measures how many compute resources, and thus money, are consumed to run the transform.</p>
    #[doc(hidden)]
    pub accuracy_cost_tradeoff: std::option::Option<f64>,
    /// <p>The value to switch on or off to force the output to match the provided labels from users. If the value is <code>True</code>, the <code>find matches</code> transform forces the output to match the provided labels. The results override the normal conflation results. If the value is <code>False</code>, the <code>find matches</code> transform does not ensure all the labels provided are respected, and the results rely on the trained model.</p>
    /// <p>Note that setting this value to true may increase the conflation execution time.</p>
    #[doc(hidden)]
    pub enforce_provided_labels: std::option::Option<bool>,
}
impl FindMatchesParameters {
    /// <p>The name of a column that uniquely identifies rows in the source table. Used to help identify matching records.</p>
    pub fn primary_key_column_name(&self) -> std::option::Option<&str> {
        self.primary_key_column_name.as_deref()
    }
    /// <p>The value selected when tuning your transform for a balance between precision and recall. A value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to 1.0 means very low recall, and choosing values close to 0.0 results in very low precision.</p>
    /// <p>The precision metric indicates how often your model is correct when it predicts a match. </p>
    /// <p>The recall metric indicates that for an actual match, how often your model predicts the match.</p>
    pub fn precision_recall_tradeoff(&self) -> std::option::Option<f64> {
        self.precision_recall_tradeoff
    }
    /// <p>The value that is selected when tuning your transform for a balance between accuracy and cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of 1.0 means a bias purely for accuracy, which typically results in a higher cost, sometimes substantially higher. A value of 0.0 means a bias purely for cost, which results in a less accurate <code>FindMatches</code> transform, sometimes with unacceptable accuracy.</p>
    /// <p>Accuracy measures how well the transform finds true positives and true negatives. Increasing accuracy requires more machine resources and cost. But it also results in increased recall. </p>
    /// <p>Cost measures how many compute resources, and thus money, are consumed to run the transform.</p>
    pub fn accuracy_cost_tradeoff(&self) -> std::option::Option<f64> {
        self.accuracy_cost_tradeoff
    }
    /// <p>The value to switch on or off to force the output to match the provided labels from users. If the value is <code>True</code>, the <code>find matches</code> transform forces the output to match the provided labels. The results override the normal conflation results. If the value is <code>False</code>, the <code>find matches</code> transform does not ensure all the labels provided are respected, and the results rely on the trained model.</p>
    /// <p>Note that setting this value to true may increase the conflation execution time.</p>
    pub fn enforce_provided_labels(&self) -> std::option::Option<bool> {
        self.enforce_provided_labels
    }
}
impl FindMatchesParameters {
    /// Creates a new builder-style object to manufacture [`FindMatchesParameters`](crate::types::FindMatchesParameters).
    pub fn builder() -> crate::types::builders::FindMatchesParametersBuilder {
        crate::types::builders::FindMatchesParametersBuilder::default()
    }
}

/// A builder for [`FindMatchesParameters`](crate::types::FindMatchesParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FindMatchesParametersBuilder {
    pub(crate) primary_key_column_name: std::option::Option<std::string::String>,
    pub(crate) precision_recall_tradeoff: std::option::Option<f64>,
    pub(crate) accuracy_cost_tradeoff: std::option::Option<f64>,
    pub(crate) enforce_provided_labels: std::option::Option<bool>,
}
impl FindMatchesParametersBuilder {
    /// <p>The name of a column that uniquely identifies rows in the source table. Used to help identify matching records.</p>
    pub fn primary_key_column_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.primary_key_column_name = Some(input.into());
        self
    }
    /// <p>The name of a column that uniquely identifies rows in the source table. Used to help identify matching records.</p>
    pub fn set_primary_key_column_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.primary_key_column_name = input;
        self
    }
    /// <p>The value selected when tuning your transform for a balance between precision and recall. A value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to 1.0 means very low recall, and choosing values close to 0.0 results in very low precision.</p>
    /// <p>The precision metric indicates how often your model is correct when it predicts a match. </p>
    /// <p>The recall metric indicates that for an actual match, how often your model predicts the match.</p>
    pub fn precision_recall_tradeoff(mut self, input: f64) -> Self {
        self.precision_recall_tradeoff = Some(input);
        self
    }
    /// <p>The value selected when tuning your transform for a balance between precision and recall. A value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to 1.0 means very low recall, and choosing values close to 0.0 results in very low precision.</p>
    /// <p>The precision metric indicates how often your model is correct when it predicts a match. </p>
    /// <p>The recall metric indicates that for an actual match, how often your model predicts the match.</p>
    pub fn set_precision_recall_tradeoff(mut self, input: std::option::Option<f64>) -> Self {
        self.precision_recall_tradeoff = input;
        self
    }
    /// <p>The value that is selected when tuning your transform for a balance between accuracy and cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of 1.0 means a bias purely for accuracy, which typically results in a higher cost, sometimes substantially higher. A value of 0.0 means a bias purely for cost, which results in a less accurate <code>FindMatches</code> transform, sometimes with unacceptable accuracy.</p>
    /// <p>Accuracy measures how well the transform finds true positives and true negatives. Increasing accuracy requires more machine resources and cost. But it also results in increased recall. </p>
    /// <p>Cost measures how many compute resources, and thus money, are consumed to run the transform.</p>
    pub fn accuracy_cost_tradeoff(mut self, input: f64) -> Self {
        self.accuracy_cost_tradeoff = Some(input);
        self
    }
    /// <p>The value that is selected when tuning your transform for a balance between accuracy and cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of 1.0 means a bias purely for accuracy, which typically results in a higher cost, sometimes substantially higher. A value of 0.0 means a bias purely for cost, which results in a less accurate <code>FindMatches</code> transform, sometimes with unacceptable accuracy.</p>
    /// <p>Accuracy measures how well the transform finds true positives and true negatives. Increasing accuracy requires more machine resources and cost. But it also results in increased recall. </p>
    /// <p>Cost measures how many compute resources, and thus money, are consumed to run the transform.</p>
    pub fn set_accuracy_cost_tradeoff(mut self, input: std::option::Option<f64>) -> Self {
        self.accuracy_cost_tradeoff = input;
        self
    }
    /// <p>The value to switch on or off to force the output to match the provided labels from users. If the value is <code>True</code>, the <code>find matches</code> transform forces the output to match the provided labels. The results override the normal conflation results. If the value is <code>False</code>, the <code>find matches</code> transform does not ensure all the labels provided are respected, and the results rely on the trained model.</p>
    /// <p>Note that setting this value to true may increase the conflation execution time.</p>
    pub fn enforce_provided_labels(mut self, input: bool) -> Self {
        self.enforce_provided_labels = Some(input);
        self
    }
    /// <p>The value to switch on or off to force the output to match the provided labels from users. If the value is <code>True</code>, the <code>find matches</code> transform forces the output to match the provided labels. The results override the normal conflation results. If the value is <code>False</code>, the <code>find matches</code> transform does not ensure all the labels provided are respected, and the results rely on the trained model.</p>
    /// <p>Note that setting this value to true may increase the conflation execution time.</p>
    pub fn set_enforce_provided_labels(mut self, input: std::option::Option<bool>) -> Self {
        self.enforce_provided_labels = input;
        self
    }
    /// Consumes the builder and constructs a [`FindMatchesParameters`](crate::types::FindMatchesParameters).
    pub fn build(self) -> crate::types::FindMatchesParameters {
        crate::types::FindMatchesParameters {
            primary_key_column_name: self.primary_key_column_name,
            precision_recall_tradeoff: self.precision_recall_tradeoff,
            accuracy_cost_tradeoff: self.accuracy_cost_tradeoff,
            enforce_provided_labels: self.enforce_provided_labels,
        }
    }
}
