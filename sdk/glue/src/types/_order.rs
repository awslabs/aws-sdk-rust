// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the sort order of a sorted column.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Order {
    /// <p>The name of the column.</p>
    pub column: ::std::string::String,
    /// <p>Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>).</p>
    pub sort_order: i32,
}
impl Order {
    /// <p>The name of the column.</p>
    pub fn column(&self) -> &str {
        use std::ops::Deref;
        self.column.deref()
    }
    /// <p>Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>).</p>
    pub fn sort_order(&self) -> i32 {
        self.sort_order
    }
}
impl Order {
    /// Creates a new builder-style object to manufacture [`Order`](crate::types::Order).
    pub fn builder() -> crate::types::builders::OrderBuilder {
        crate::types::builders::OrderBuilder::default()
    }
}

/// A builder for [`Order`](crate::types::Order).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OrderBuilder {
    pub(crate) column: ::std::option::Option<::std::string::String>,
    pub(crate) sort_order: ::std::option::Option<i32>,
}
impl OrderBuilder {
    /// <p>The name of the column.</p>
    /// This field is required.
    pub fn column(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.column = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the column.</p>
    pub fn set_column(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.column = input;
        self
    }
    /// <p>The name of the column.</p>
    pub fn get_column(&self) -> &::std::option::Option<::std::string::String> {
        &self.column
    }
    /// <p>Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>).</p>
    /// This field is required.
    pub fn sort_order(mut self, input: i32) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>).</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<i32>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>).</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<i32> {
        &self.sort_order
    }
    /// Consumes the builder and constructs a [`Order`](crate::types::Order).
    /// This method will fail if any of the following fields are not set:
    /// - [`column`](crate::types::builders::OrderBuilder::column)
    pub fn build(self) -> ::std::result::Result<crate::types::Order, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Order {
            column: self.column.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "column",
                    "column was not specified but it is required when building Order",
                )
            })?,
            sort_order: self.sort_order.unwrap_or_default(),
        })
    }
}
