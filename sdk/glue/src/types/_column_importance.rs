// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing the column name and column importance score for a column. </p>
/// <p>Column importance helps you understand how columns contribute to your model, by identifying which columns in your records are more important than others.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ColumnImportance {
    /// <p>The name of a column.</p>
    #[doc(hidden)]
    pub column_name: std::option::Option<std::string::String>,
    /// <p>The column importance score for the column, as a decimal.</p>
    #[doc(hidden)]
    pub importance: std::option::Option<f64>,
}
impl ColumnImportance {
    /// <p>The name of a column.</p>
    pub fn column_name(&self) -> std::option::Option<&str> {
        self.column_name.as_deref()
    }
    /// <p>The column importance score for the column, as a decimal.</p>
    pub fn importance(&self) -> std::option::Option<f64> {
        self.importance
    }
}
impl ColumnImportance {
    /// Creates a new builder-style object to manufacture [`ColumnImportance`](crate::types::ColumnImportance).
    pub fn builder() -> crate::types::builders::ColumnImportanceBuilder {
        crate::types::builders::ColumnImportanceBuilder::default()
    }
}

/// A builder for [`ColumnImportance`](crate::types::ColumnImportance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ColumnImportanceBuilder {
    pub(crate) column_name: std::option::Option<std::string::String>,
    pub(crate) importance: std::option::Option<f64>,
}
impl ColumnImportanceBuilder {
    /// <p>The name of a column.</p>
    pub fn column_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.column_name = Some(input.into());
        self
    }
    /// <p>The name of a column.</p>
    pub fn set_column_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.column_name = input;
        self
    }
    /// <p>The column importance score for the column, as a decimal.</p>
    pub fn importance(mut self, input: f64) -> Self {
        self.importance = Some(input);
        self
    }
    /// <p>The column importance score for the column, as a decimal.</p>
    pub fn set_importance(mut self, input: std::option::Option<f64>) -> Self {
        self.importance = input;
        self
    }
    /// Consumes the builder and constructs a [`ColumnImportance`](crate::types::ColumnImportance).
    pub fn build(self) -> crate::types::ColumnImportance {
        crate::types::ColumnImportance {
            column_name: self.column_name,
            importance: self.importance,
        }
    }
}
