// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the connections used by a job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectionsList {
    /// <p>A list of connections used by the job.</p>
    pub connections: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConnectionsList {
    /// <p>A list of connections used by the job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.connections.is_none()`.
    pub fn connections(&self) -> &[::std::string::String] {
        self.connections.as_deref().unwrap_or_default()
    }
}
impl ConnectionsList {
    /// Creates a new builder-style object to manufacture [`ConnectionsList`](crate::types::ConnectionsList).
    pub fn builder() -> crate::types::builders::ConnectionsListBuilder {
        crate::types::builders::ConnectionsListBuilder::default()
    }
}

/// A builder for [`ConnectionsList`](crate::types::ConnectionsList).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConnectionsListBuilder {
    pub(crate) connections: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ConnectionsListBuilder {
    /// Appends an item to `connections`.
    ///
    /// To override the contents of this collection use [`set_connections`](Self::set_connections).
    ///
    /// <p>A list of connections used by the job.</p>
    pub fn connections(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.connections.unwrap_or_default();
        v.push(input.into());
        self.connections = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of connections used by the job.</p>
    pub fn set_connections(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.connections = input;
        self
    }
    /// <p>A list of connections used by the job.</p>
    pub fn get_connections(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.connections
    }
    /// Consumes the builder and constructs a [`ConnectionsList`](crate::types::ConnectionsList).
    pub fn build(self) -> crate::types::ConnectionsList {
        crate::types::ConnectionsList {
            connections: self.connections,
        }
    }
}
