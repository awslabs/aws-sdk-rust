// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure used to provide information used to update a trigger. This object updates the previous trigger definition by overwriting it completely.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TriggerUpdate {
    /// <p>Reserved for future use.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of this trigger.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>
    pub schedule: ::std::option::Option<::std::string::String>,
    /// <p>The actions initiated by this trigger.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::Action>>,
    /// <p>The predicate of this trigger, which defines when it will fire.</p>
    pub predicate: ::std::option::Option<crate::types::Predicate>,
    /// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
    pub event_batching_condition: ::std::option::Option<crate::types::EventBatchingCondition>,
}
impl TriggerUpdate {
    /// <p>Reserved for future use.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of this trigger.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>
    pub fn schedule(&self) -> ::std::option::Option<&str> {
        self.schedule.as_deref()
    }
    /// <p>The actions initiated by this trigger.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::Action] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>The predicate of this trigger, which defines when it will fire.</p>
    pub fn predicate(&self) -> ::std::option::Option<&crate::types::Predicate> {
        self.predicate.as_ref()
    }
    /// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
    pub fn event_batching_condition(&self) -> ::std::option::Option<&crate::types::EventBatchingCondition> {
        self.event_batching_condition.as_ref()
    }
}
impl TriggerUpdate {
    /// Creates a new builder-style object to manufacture [`TriggerUpdate`](crate::types::TriggerUpdate).
    pub fn builder() -> crate::types::builders::TriggerUpdateBuilder {
        crate::types::builders::TriggerUpdateBuilder::default()
    }
}

/// A builder for [`TriggerUpdate`](crate::types::TriggerUpdate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TriggerUpdateBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) schedule: ::std::option::Option<::std::string::String>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::Action>>,
    pub(crate) predicate: ::std::option::Option<crate::types::Predicate>,
    pub(crate) event_batching_condition: ::std::option::Option<crate::types::EventBatchingCondition>,
}
impl TriggerUpdateBuilder {
    /// <p>Reserved for future use.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of this trigger.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of this trigger.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of this trigger.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>
    pub fn schedule(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schedule = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<::std::string::String> {
        &self.schedule
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions initiated by this trigger.</p>
    pub fn actions(mut self, input: crate::types::Action) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The actions initiated by this trigger.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Action>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The actions initiated by this trigger.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Action>> {
        &self.actions
    }
    /// <p>The predicate of this trigger, which defines when it will fire.</p>
    pub fn predicate(mut self, input: crate::types::Predicate) -> Self {
        self.predicate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The predicate of this trigger, which defines when it will fire.</p>
    pub fn set_predicate(mut self, input: ::std::option::Option<crate::types::Predicate>) -> Self {
        self.predicate = input;
        self
    }
    /// <p>The predicate of this trigger, which defines when it will fire.</p>
    pub fn get_predicate(&self) -> &::std::option::Option<crate::types::Predicate> {
        &self.predicate
    }
    /// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
    pub fn event_batching_condition(mut self, input: crate::types::EventBatchingCondition) -> Self {
        self.event_batching_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
    pub fn set_event_batching_condition(mut self, input: ::std::option::Option<crate::types::EventBatchingCondition>) -> Self {
        self.event_batching_condition = input;
        self
    }
    /// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
    pub fn get_event_batching_condition(&self) -> &::std::option::Option<crate::types::EventBatchingCondition> {
        &self.event_batching_condition
    }
    /// Consumes the builder and constructs a [`TriggerUpdate`](crate::types::TriggerUpdate).
    pub fn build(self) -> crate::types::TriggerUpdate {
        crate::types::TriggerUpdate {
            name: self.name,
            description: self.description,
            schedule: self.schedule,
            actions: self.actions,
            predicate: self.predicate,
            event_batching_condition: self.event_batching_condition,
        }
    }
}
