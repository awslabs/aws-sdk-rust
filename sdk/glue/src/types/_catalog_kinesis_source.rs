// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a Kinesis data source in the Glue Data Catalog.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CatalogKinesisSource {
    /// <p>The name of the data source.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The amount of time to spend processing each micro batch.</p>
    #[doc(hidden)]
    pub window_size: std::option::Option<i32>,
    /// <p>Whether to automatically determine the schema from the incoming data.</p>
    #[doc(hidden)]
    pub detect_schema: std::option::Option<bool>,
    /// <p>The name of the table in the database to read from.</p>
    #[doc(hidden)]
    pub table: std::option::Option<std::string::String>,
    /// <p>The name of the database to read from.</p>
    #[doc(hidden)]
    pub database: std::option::Option<std::string::String>,
    /// <p>Additional options for the Kinesis streaming data source.</p>
    #[doc(hidden)]
    pub streaming_options: std::option::Option<crate::types::KinesisStreamingSourceOptions>,
    /// <p>Additional options for data preview.</p>
    #[doc(hidden)]
    pub data_preview_options: std::option::Option<crate::types::StreamingDataPreviewOptions>,
}
impl CatalogKinesisSource {
    /// <p>The name of the data source.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The amount of time to spend processing each micro batch.</p>
    pub fn window_size(&self) -> std::option::Option<i32> {
        self.window_size
    }
    /// <p>Whether to automatically determine the schema from the incoming data.</p>
    pub fn detect_schema(&self) -> std::option::Option<bool> {
        self.detect_schema
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn table(&self) -> std::option::Option<&str> {
        self.table.as_deref()
    }
    /// <p>The name of the database to read from.</p>
    pub fn database(&self) -> std::option::Option<&str> {
        self.database.as_deref()
    }
    /// <p>Additional options for the Kinesis streaming data source.</p>
    pub fn streaming_options(
        &self,
    ) -> std::option::Option<&crate::types::KinesisStreamingSourceOptions> {
        self.streaming_options.as_ref()
    }
    /// <p>Additional options for data preview.</p>
    pub fn data_preview_options(
        &self,
    ) -> std::option::Option<&crate::types::StreamingDataPreviewOptions> {
        self.data_preview_options.as_ref()
    }
}
impl CatalogKinesisSource {
    /// Creates a new builder-style object to manufacture [`CatalogKinesisSource`](crate::types::CatalogKinesisSource).
    pub fn builder() -> crate::types::builders::CatalogKinesisSourceBuilder {
        crate::types::builders::CatalogKinesisSourceBuilder::default()
    }
}

/// A builder for [`CatalogKinesisSource`](crate::types::CatalogKinesisSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CatalogKinesisSourceBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) window_size: std::option::Option<i32>,
    pub(crate) detect_schema: std::option::Option<bool>,
    pub(crate) table: std::option::Option<std::string::String>,
    pub(crate) database: std::option::Option<std::string::String>,
    pub(crate) streaming_options: std::option::Option<crate::types::KinesisStreamingSourceOptions>,
    pub(crate) data_preview_options: std::option::Option<crate::types::StreamingDataPreviewOptions>,
}
impl CatalogKinesisSourceBuilder {
    /// <p>The name of the data source.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the data source.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The amount of time to spend processing each micro batch.</p>
    pub fn window_size(mut self, input: i32) -> Self {
        self.window_size = Some(input);
        self
    }
    /// <p>The amount of time to spend processing each micro batch.</p>
    pub fn set_window_size(mut self, input: std::option::Option<i32>) -> Self {
        self.window_size = input;
        self
    }
    /// <p>Whether to automatically determine the schema from the incoming data.</p>
    pub fn detect_schema(mut self, input: bool) -> Self {
        self.detect_schema = Some(input);
        self
    }
    /// <p>Whether to automatically determine the schema from the incoming data.</p>
    pub fn set_detect_schema(mut self, input: std::option::Option<bool>) -> Self {
        self.detect_schema = input;
        self
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn table(mut self, input: impl Into<std::string::String>) -> Self {
        self.table = Some(input.into());
        self
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn set_table(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table = input;
        self
    }
    /// <p>The name of the database to read from.</p>
    pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
        self.database = Some(input.into());
        self
    }
    /// <p>The name of the database to read from.</p>
    pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>Additional options for the Kinesis streaming data source.</p>
    pub fn streaming_options(mut self, input: crate::types::KinesisStreamingSourceOptions) -> Self {
        self.streaming_options = Some(input);
        self
    }
    /// <p>Additional options for the Kinesis streaming data source.</p>
    pub fn set_streaming_options(
        mut self,
        input: std::option::Option<crate::types::KinesisStreamingSourceOptions>,
    ) -> Self {
        self.streaming_options = input;
        self
    }
    /// <p>Additional options for data preview.</p>
    pub fn data_preview_options(
        mut self,
        input: crate::types::StreamingDataPreviewOptions,
    ) -> Self {
        self.data_preview_options = Some(input);
        self
    }
    /// <p>Additional options for data preview.</p>
    pub fn set_data_preview_options(
        mut self,
        input: std::option::Option<crate::types::StreamingDataPreviewOptions>,
    ) -> Self {
        self.data_preview_options = input;
        self
    }
    /// Consumes the builder and constructs a [`CatalogKinesisSource`](crate::types::CatalogKinesisSource).
    pub fn build(self) -> crate::types::CatalogKinesisSource {
        crate::types::CatalogKinesisSource {
            name: self.name,
            window_size: self.window_size,
            detect_schema: self.detect_schema,
            table: self.table,
            database: self.database,
            streaming_options: self.streaming_options,
            data_preview_options: self.data_preview_options,
        }
    }
}
