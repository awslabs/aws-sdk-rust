// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a partition error.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PartitionError {
    /// <p>The values that define the partition.</p>
    pub partition_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The details about the partition error.</p>
    pub error_detail: ::std::option::Option<crate::types::ErrorDetail>,
}
impl PartitionError {
    /// <p>The values that define the partition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.partition_values.is_none()`.
    pub fn partition_values(&self) -> &[::std::string::String] {
        self.partition_values.as_deref().unwrap_or_default()
    }
    /// <p>The details about the partition error.</p>
    pub fn error_detail(&self) -> ::std::option::Option<&crate::types::ErrorDetail> {
        self.error_detail.as_ref()
    }
}
impl PartitionError {
    /// Creates a new builder-style object to manufacture [`PartitionError`](crate::types::PartitionError).
    pub fn builder() -> crate::types::builders::PartitionErrorBuilder {
        crate::types::builders::PartitionErrorBuilder::default()
    }
}

/// A builder for [`PartitionError`](crate::types::PartitionError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PartitionErrorBuilder {
    pub(crate) partition_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) error_detail: ::std::option::Option<crate::types::ErrorDetail>,
}
impl PartitionErrorBuilder {
    /// Appends an item to `partition_values`.
    ///
    /// To override the contents of this collection use [`set_partition_values`](Self::set_partition_values).
    ///
    /// <p>The values that define the partition.</p>
    pub fn partition_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.partition_values.unwrap_or_default();
        v.push(input.into());
        self.partition_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values that define the partition.</p>
    pub fn set_partition_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.partition_values = input;
        self
    }
    /// <p>The values that define the partition.</p>
    pub fn get_partition_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.partition_values
    }
    /// <p>The details about the partition error.</p>
    pub fn error_detail(mut self, input: crate::types::ErrorDetail) -> Self {
        self.error_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details about the partition error.</p>
    pub fn set_error_detail(mut self, input: ::std::option::Option<crate::types::ErrorDetail>) -> Self {
        self.error_detail = input;
        self
    }
    /// <p>The details about the partition error.</p>
    pub fn get_error_detail(&self) -> &::std::option::Option<crate::types::ErrorDetail> {
        &self.error_detail
    }
    /// Consumes the builder and constructs a [`PartitionError`](crate::types::PartitionError).
    pub fn build(self) -> crate::types::PartitionError {
        crate::types::PartitionError {
            partition_values: self.partition_values,
            error_detail: self.error_detail,
        }
    }
}
