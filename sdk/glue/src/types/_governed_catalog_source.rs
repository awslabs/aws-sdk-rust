// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the data store in the governed Glue Data Catalog.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GovernedCatalogSource {
    /// <p>The name of the data store.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The database to read from.</p>
    #[doc(hidden)]
    pub database: std::option::Option<std::string::String>,
    /// <p>The database table to read from.</p>
    #[doc(hidden)]
    pub table: std::option::Option<std::string::String>,
    /// <p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>""</code> – empty by default.</p>
    #[doc(hidden)]
    pub partition_predicate: std::option::Option<std::string::String>,
    /// <p>Specifies additional connection options.</p>
    #[doc(hidden)]
    pub additional_options: std::option::Option<crate::types::S3SourceAdditionalOptions>,
}
impl GovernedCatalogSource {
    /// <p>The name of the data store.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The database to read from.</p>
    pub fn database(&self) -> std::option::Option<&str> {
        self.database.as_deref()
    }
    /// <p>The database table to read from.</p>
    pub fn table(&self) -> std::option::Option<&str> {
        self.table.as_deref()
    }
    /// <p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>""</code> – empty by default.</p>
    pub fn partition_predicate(&self) -> std::option::Option<&str> {
        self.partition_predicate.as_deref()
    }
    /// <p>Specifies additional connection options.</p>
    pub fn additional_options(
        &self,
    ) -> std::option::Option<&crate::types::S3SourceAdditionalOptions> {
        self.additional_options.as_ref()
    }
}
impl GovernedCatalogSource {
    /// Creates a new builder-style object to manufacture [`GovernedCatalogSource`](crate::types::GovernedCatalogSource).
    pub fn builder() -> crate::types::builders::GovernedCatalogSourceBuilder {
        crate::types::builders::GovernedCatalogSourceBuilder::default()
    }
}

/// A builder for [`GovernedCatalogSource`](crate::types::GovernedCatalogSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GovernedCatalogSourceBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) database: std::option::Option<std::string::String>,
    pub(crate) table: std::option::Option<std::string::String>,
    pub(crate) partition_predicate: std::option::Option<std::string::String>,
    pub(crate) additional_options: std::option::Option<crate::types::S3SourceAdditionalOptions>,
}
impl GovernedCatalogSourceBuilder {
    /// <p>The name of the data store.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the data store.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The database to read from.</p>
    pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
        self.database = Some(input.into());
        self
    }
    /// <p>The database to read from.</p>
    pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The database table to read from.</p>
    pub fn table(mut self, input: impl Into<std::string::String>) -> Self {
        self.table = Some(input.into());
        self
    }
    /// <p>The database table to read from.</p>
    pub fn set_table(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table = input;
        self
    }
    /// <p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>""</code> – empty by default.</p>
    pub fn partition_predicate(mut self, input: impl Into<std::string::String>) -> Self {
        self.partition_predicate = Some(input.into());
        self
    }
    /// <p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>""</code> – empty by default.</p>
    pub fn set_partition_predicate(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.partition_predicate = input;
        self
    }
    /// <p>Specifies additional connection options.</p>
    pub fn additional_options(mut self, input: crate::types::S3SourceAdditionalOptions) -> Self {
        self.additional_options = Some(input);
        self
    }
    /// <p>Specifies additional connection options.</p>
    pub fn set_additional_options(
        mut self,
        input: std::option::Option<crate::types::S3SourceAdditionalOptions>,
    ) -> Self {
        self.additional_options = input;
        self
    }
    /// Consumes the builder and constructs a [`GovernedCatalogSource`](crate::types::GovernedCatalogSource).
    pub fn build(self) -> crate::types::GovernedCatalogSource {
        crate::types::GovernedCatalogSource {
            name: self.name,
            database: self.database,
            table: self.table,
            partition_predicate: self.partition_predicate,
            additional_options: self.additional_options,
        }
    }
}
