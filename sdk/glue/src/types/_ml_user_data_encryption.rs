// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The encryption-at-rest settings of the transform that apply to accessing user data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MlUserDataEncryption {
    /// <p>The encryption mode applied to user data. Valid values are:</p>
    /// <ul>
    /// <li> <p>DISABLED: encryption is disabled</p> </li>
    /// <li> <p>SSEKMS: use of server-side encryption with Key Management Service (SSE-KMS) for user data stored in Amazon S3.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub ml_user_data_encryption_mode:
        std::option::Option<crate::types::MlUserDataEncryptionModeString>,
    /// <p>The ID for the customer-provided KMS key.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
}
impl MlUserDataEncryption {
    /// <p>The encryption mode applied to user data. Valid values are:</p>
    /// <ul>
    /// <li> <p>DISABLED: encryption is disabled</p> </li>
    /// <li> <p>SSEKMS: use of server-side encryption with Key Management Service (SSE-KMS) for user data stored in Amazon S3.</p> </li>
    /// </ul>
    pub fn ml_user_data_encryption_mode(
        &self,
    ) -> std::option::Option<&crate::types::MlUserDataEncryptionModeString> {
        self.ml_user_data_encryption_mode.as_ref()
    }
    /// <p>The ID for the customer-provided KMS key.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl MlUserDataEncryption {
    /// Creates a new builder-style object to manufacture [`MlUserDataEncryption`](crate::types::MlUserDataEncryption).
    pub fn builder() -> crate::types::builders::MlUserDataEncryptionBuilder {
        crate::types::builders::MlUserDataEncryptionBuilder::default()
    }
}

/// A builder for [`MlUserDataEncryption`](crate::types::MlUserDataEncryption).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MlUserDataEncryptionBuilder {
    pub(crate) ml_user_data_encryption_mode:
        std::option::Option<crate::types::MlUserDataEncryptionModeString>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
}
impl MlUserDataEncryptionBuilder {
    /// <p>The encryption mode applied to user data. Valid values are:</p>
    /// <ul>
    /// <li> <p>DISABLED: encryption is disabled</p> </li>
    /// <li> <p>SSEKMS: use of server-side encryption with Key Management Service (SSE-KMS) for user data stored in Amazon S3.</p> </li>
    /// </ul>
    pub fn ml_user_data_encryption_mode(
        mut self,
        input: crate::types::MlUserDataEncryptionModeString,
    ) -> Self {
        self.ml_user_data_encryption_mode = Some(input);
        self
    }
    /// <p>The encryption mode applied to user data. Valid values are:</p>
    /// <ul>
    /// <li> <p>DISABLED: encryption is disabled</p> </li>
    /// <li> <p>SSEKMS: use of server-side encryption with Key Management Service (SSE-KMS) for user data stored in Amazon S3.</p> </li>
    /// </ul>
    pub fn set_ml_user_data_encryption_mode(
        mut self,
        input: std::option::Option<crate::types::MlUserDataEncryptionModeString>,
    ) -> Self {
        self.ml_user_data_encryption_mode = input;
        self
    }
    /// <p>The ID for the customer-provided KMS key.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The ID for the customer-provided KMS key.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// Consumes the builder and constructs a [`MlUserDataEncryption`](crate::types::MlUserDataEncryption).
    pub fn build(self) -> crate::types::MlUserDataEncryption {
        crate::types::MlUserDataEncryption {
            ml_user_data_encryption_mode: self.ml_user_data_encryption_mode,
            kms_key_id: self.kms_key_id,
        }
    }
}
