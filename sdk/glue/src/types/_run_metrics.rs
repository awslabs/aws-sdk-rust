// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metrics for the optimizer run.</p>
/// <p>This structure is deprecated. See the individual metric members for compaction, retention, and orphan file deletion.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RunMetrics {
    /// <p>The number of bytes removed by the compaction job run.</p>
    pub number_of_bytes_compacted: ::std::option::Option<::std::string::String>,
    /// <p>The number of files removed by the compaction job run.</p>
    pub number_of_files_compacted: ::std::option::Option<::std::string::String>,
    /// <p>The number of DPU hours consumed by the job.</p>
    pub number_of_dpus: ::std::option::Option<::std::string::String>,
    /// <p>The duration of the job in hours.</p>
    pub job_duration_in_hour: ::std::option::Option<::std::string::String>,
}
impl RunMetrics {
    /// <p>The number of bytes removed by the compaction job run.</p>
    pub fn number_of_bytes_compacted(&self) -> ::std::option::Option<&str> {
        self.number_of_bytes_compacted.as_deref()
    }
    /// <p>The number of files removed by the compaction job run.</p>
    pub fn number_of_files_compacted(&self) -> ::std::option::Option<&str> {
        self.number_of_files_compacted.as_deref()
    }
    /// <p>The number of DPU hours consumed by the job.</p>
    pub fn number_of_dpus(&self) -> ::std::option::Option<&str> {
        self.number_of_dpus.as_deref()
    }
    /// <p>The duration of the job in hours.</p>
    pub fn job_duration_in_hour(&self) -> ::std::option::Option<&str> {
        self.job_duration_in_hour.as_deref()
    }
}
impl RunMetrics {
    /// Creates a new builder-style object to manufacture [`RunMetrics`](crate::types::RunMetrics).
    pub fn builder() -> crate::types::builders::RunMetricsBuilder {
        crate::types::builders::RunMetricsBuilder::default()
    }
}

/// A builder for [`RunMetrics`](crate::types::RunMetrics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RunMetricsBuilder {
    pub(crate) number_of_bytes_compacted: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_files_compacted: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_dpus: ::std::option::Option<::std::string::String>,
    pub(crate) job_duration_in_hour: ::std::option::Option<::std::string::String>,
}
impl RunMetricsBuilder {
    /// <p>The number of bytes removed by the compaction job run.</p>
    pub fn number_of_bytes_compacted(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.number_of_bytes_compacted = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The number of bytes removed by the compaction job run.</p>
    pub fn set_number_of_bytes_compacted(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.number_of_bytes_compacted = input;
        self
    }
    /// <p>The number of bytes removed by the compaction job run.</p>
    pub fn get_number_of_bytes_compacted(&self) -> &::std::option::Option<::std::string::String> {
        &self.number_of_bytes_compacted
    }
    /// <p>The number of files removed by the compaction job run.</p>
    pub fn number_of_files_compacted(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.number_of_files_compacted = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The number of files removed by the compaction job run.</p>
    pub fn set_number_of_files_compacted(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.number_of_files_compacted = input;
        self
    }
    /// <p>The number of files removed by the compaction job run.</p>
    pub fn get_number_of_files_compacted(&self) -> &::std::option::Option<::std::string::String> {
        &self.number_of_files_compacted
    }
    /// <p>The number of DPU hours consumed by the job.</p>
    pub fn number_of_dpus(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.number_of_dpus = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The number of DPU hours consumed by the job.</p>
    pub fn set_number_of_dpus(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.number_of_dpus = input;
        self
    }
    /// <p>The number of DPU hours consumed by the job.</p>
    pub fn get_number_of_dpus(&self) -> &::std::option::Option<::std::string::String> {
        &self.number_of_dpus
    }
    /// <p>The duration of the job in hours.</p>
    pub fn job_duration_in_hour(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_duration_in_hour = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The duration of the job in hours.</p>
    pub fn set_job_duration_in_hour(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_duration_in_hour = input;
        self
    }
    /// <p>The duration of the job in hours.</p>
    pub fn get_job_duration_in_hour(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_duration_in_hour
    }
    /// Consumes the builder and constructs a [`RunMetrics`](crate::types::RunMetrics).
    pub fn build(self) -> crate::types::RunMetrics {
        crate::types::RunMetrics {
            number_of_bytes_compacted: self.number_of_bytes_compacted,
            number_of_files_compacted: self.number_of_files_compacted,
            number_of_dpus: self.number_of_dpus,
            job_duration_in_hour: self.job_duration_in_hour,
        }
    }
}
