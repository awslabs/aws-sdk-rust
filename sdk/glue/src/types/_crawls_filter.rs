// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of fields, comparators and value that you can use to filter the crawler runs for a specified crawler.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CrawlsFilter {
    /// <p>A key used to filter the crawler runs for a specified crawler. Valid values for each of the field names are:</p>
    /// <ul>
    /// <li> <p> <code>CRAWL_ID</code>: A string representing the UUID identifier for a crawl.</p> </li>
    /// <li> <p> <code>STATE</code>: A string representing the state of the crawl.</p> </li>
    /// <li> <p> <code>START_TIME</code> and <code>END_TIME</code>: The epoch timestamp in milliseconds.</p> </li>
    /// <li> <p> <code>DPU_HOUR</code>: The number of data processing unit (DPU) hours used for the crawl.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub field_name: std::option::Option<crate::types::FieldName>,
    /// <p>A defined comparator that operates on the value. The available operators are:</p>
    /// <ul>
    /// <li> <p> <code>GT</code>: Greater than.</p> </li>
    /// <li> <p> <code>GE</code>: Greater than or equal to.</p> </li>
    /// <li> <p> <code>LT</code>: Less than.</p> </li>
    /// <li> <p> <code>LE</code>: Less than or equal to.</p> </li>
    /// <li> <p> <code>EQ</code>: Equal to.</p> </li>
    /// <li> <p> <code>NE</code>: Not equal to.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub filter_operator: std::option::Option<crate::types::FilterOperator>,
    /// <p>The value provided for comparison on the crawl field. </p>
    #[doc(hidden)]
    pub field_value: std::option::Option<std::string::String>,
}
impl CrawlsFilter {
    /// <p>A key used to filter the crawler runs for a specified crawler. Valid values for each of the field names are:</p>
    /// <ul>
    /// <li> <p> <code>CRAWL_ID</code>: A string representing the UUID identifier for a crawl.</p> </li>
    /// <li> <p> <code>STATE</code>: A string representing the state of the crawl.</p> </li>
    /// <li> <p> <code>START_TIME</code> and <code>END_TIME</code>: The epoch timestamp in milliseconds.</p> </li>
    /// <li> <p> <code>DPU_HOUR</code>: The number of data processing unit (DPU) hours used for the crawl.</p> </li>
    /// </ul>
    pub fn field_name(&self) -> std::option::Option<&crate::types::FieldName> {
        self.field_name.as_ref()
    }
    /// <p>A defined comparator that operates on the value. The available operators are:</p>
    /// <ul>
    /// <li> <p> <code>GT</code>: Greater than.</p> </li>
    /// <li> <p> <code>GE</code>: Greater than or equal to.</p> </li>
    /// <li> <p> <code>LT</code>: Less than.</p> </li>
    /// <li> <p> <code>LE</code>: Less than or equal to.</p> </li>
    /// <li> <p> <code>EQ</code>: Equal to.</p> </li>
    /// <li> <p> <code>NE</code>: Not equal to.</p> </li>
    /// </ul>
    pub fn filter_operator(&self) -> std::option::Option<&crate::types::FilterOperator> {
        self.filter_operator.as_ref()
    }
    /// <p>The value provided for comparison on the crawl field. </p>
    pub fn field_value(&self) -> std::option::Option<&str> {
        self.field_value.as_deref()
    }
}
impl CrawlsFilter {
    /// Creates a new builder-style object to manufacture [`CrawlsFilter`](crate::types::CrawlsFilter).
    pub fn builder() -> crate::types::builders::CrawlsFilterBuilder {
        crate::types::builders::CrawlsFilterBuilder::default()
    }
}

/// A builder for [`CrawlsFilter`](crate::types::CrawlsFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CrawlsFilterBuilder {
    pub(crate) field_name: std::option::Option<crate::types::FieldName>,
    pub(crate) filter_operator: std::option::Option<crate::types::FilterOperator>,
    pub(crate) field_value: std::option::Option<std::string::String>,
}
impl CrawlsFilterBuilder {
    /// <p>A key used to filter the crawler runs for a specified crawler. Valid values for each of the field names are:</p>
    /// <ul>
    /// <li> <p> <code>CRAWL_ID</code>: A string representing the UUID identifier for a crawl.</p> </li>
    /// <li> <p> <code>STATE</code>: A string representing the state of the crawl.</p> </li>
    /// <li> <p> <code>START_TIME</code> and <code>END_TIME</code>: The epoch timestamp in milliseconds.</p> </li>
    /// <li> <p> <code>DPU_HOUR</code>: The number of data processing unit (DPU) hours used for the crawl.</p> </li>
    /// </ul>
    pub fn field_name(mut self, input: crate::types::FieldName) -> Self {
        self.field_name = Some(input);
        self
    }
    /// <p>A key used to filter the crawler runs for a specified crawler. Valid values for each of the field names are:</p>
    /// <ul>
    /// <li> <p> <code>CRAWL_ID</code>: A string representing the UUID identifier for a crawl.</p> </li>
    /// <li> <p> <code>STATE</code>: A string representing the state of the crawl.</p> </li>
    /// <li> <p> <code>START_TIME</code> and <code>END_TIME</code>: The epoch timestamp in milliseconds.</p> </li>
    /// <li> <p> <code>DPU_HOUR</code>: The number of data processing unit (DPU) hours used for the crawl.</p> </li>
    /// </ul>
    pub fn set_field_name(mut self, input: std::option::Option<crate::types::FieldName>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>A defined comparator that operates on the value. The available operators are:</p>
    /// <ul>
    /// <li> <p> <code>GT</code>: Greater than.</p> </li>
    /// <li> <p> <code>GE</code>: Greater than or equal to.</p> </li>
    /// <li> <p> <code>LT</code>: Less than.</p> </li>
    /// <li> <p> <code>LE</code>: Less than or equal to.</p> </li>
    /// <li> <p> <code>EQ</code>: Equal to.</p> </li>
    /// <li> <p> <code>NE</code>: Not equal to.</p> </li>
    /// </ul>
    pub fn filter_operator(mut self, input: crate::types::FilterOperator) -> Self {
        self.filter_operator = Some(input);
        self
    }
    /// <p>A defined comparator that operates on the value. The available operators are:</p>
    /// <ul>
    /// <li> <p> <code>GT</code>: Greater than.</p> </li>
    /// <li> <p> <code>GE</code>: Greater than or equal to.</p> </li>
    /// <li> <p> <code>LT</code>: Less than.</p> </li>
    /// <li> <p> <code>LE</code>: Less than or equal to.</p> </li>
    /// <li> <p> <code>EQ</code>: Equal to.</p> </li>
    /// <li> <p> <code>NE</code>: Not equal to.</p> </li>
    /// </ul>
    pub fn set_filter_operator(
        mut self,
        input: std::option::Option<crate::types::FilterOperator>,
    ) -> Self {
        self.filter_operator = input;
        self
    }
    /// <p>The value provided for comparison on the crawl field. </p>
    pub fn field_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_value = Some(input.into());
        self
    }
    /// <p>The value provided for comparison on the crawl field. </p>
    pub fn set_field_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_value = input;
        self
    }
    /// Consumes the builder and constructs a [`CrawlsFilter`](crate::types::CrawlsFilter).
    pub fn build(self) -> crate::types::CrawlsFilter {
        crate::types::CrawlsFilter {
            field_name: self.field_name,
            filter_operator: self.filter_operator,
            field_value: self.field_value,
        }
    }
}
