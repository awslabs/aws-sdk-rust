// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metrics for a specified crawler.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CrawlerMetrics {
    /// <p>The name of the crawler.</p>
    #[doc(hidden)]
    pub crawler_name: std::option::Option<std::string::String>,
    /// <p>The estimated time left to complete a running crawl.</p>
    #[doc(hidden)]
    pub time_left_seconds: f64,
    /// <p>True if the crawler is still estimating how long it will take to complete this run.</p>
    #[doc(hidden)]
    pub still_estimating: bool,
    /// <p>The duration of the crawler's most recent run, in seconds.</p>
    #[doc(hidden)]
    pub last_runtime_seconds: f64,
    /// <p>The median duration of this crawler's runs, in seconds.</p>
    #[doc(hidden)]
    pub median_runtime_seconds: f64,
    /// <p>The number of tables created by this crawler.</p>
    #[doc(hidden)]
    pub tables_created: i32,
    /// <p>The number of tables updated by this crawler.</p>
    #[doc(hidden)]
    pub tables_updated: i32,
    /// <p>The number of tables deleted by this crawler.</p>
    #[doc(hidden)]
    pub tables_deleted: i32,
}
impl CrawlerMetrics {
    /// <p>The name of the crawler.</p>
    pub fn crawler_name(&self) -> std::option::Option<&str> {
        self.crawler_name.as_deref()
    }
    /// <p>The estimated time left to complete a running crawl.</p>
    pub fn time_left_seconds(&self) -> f64 {
        self.time_left_seconds
    }
    /// <p>True if the crawler is still estimating how long it will take to complete this run.</p>
    pub fn still_estimating(&self) -> bool {
        self.still_estimating
    }
    /// <p>The duration of the crawler's most recent run, in seconds.</p>
    pub fn last_runtime_seconds(&self) -> f64 {
        self.last_runtime_seconds
    }
    /// <p>The median duration of this crawler's runs, in seconds.</p>
    pub fn median_runtime_seconds(&self) -> f64 {
        self.median_runtime_seconds
    }
    /// <p>The number of tables created by this crawler.</p>
    pub fn tables_created(&self) -> i32 {
        self.tables_created
    }
    /// <p>The number of tables updated by this crawler.</p>
    pub fn tables_updated(&self) -> i32 {
        self.tables_updated
    }
    /// <p>The number of tables deleted by this crawler.</p>
    pub fn tables_deleted(&self) -> i32 {
        self.tables_deleted
    }
}
impl CrawlerMetrics {
    /// Creates a new builder-style object to manufacture [`CrawlerMetrics`](crate::types::CrawlerMetrics).
    pub fn builder() -> crate::types::builders::CrawlerMetricsBuilder {
        crate::types::builders::CrawlerMetricsBuilder::default()
    }
}

/// A builder for [`CrawlerMetrics`](crate::types::CrawlerMetrics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CrawlerMetricsBuilder {
    pub(crate) crawler_name: std::option::Option<std::string::String>,
    pub(crate) time_left_seconds: std::option::Option<f64>,
    pub(crate) still_estimating: std::option::Option<bool>,
    pub(crate) last_runtime_seconds: std::option::Option<f64>,
    pub(crate) median_runtime_seconds: std::option::Option<f64>,
    pub(crate) tables_created: std::option::Option<i32>,
    pub(crate) tables_updated: std::option::Option<i32>,
    pub(crate) tables_deleted: std::option::Option<i32>,
}
impl CrawlerMetricsBuilder {
    /// <p>The name of the crawler.</p>
    pub fn crawler_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.crawler_name = Some(input.into());
        self
    }
    /// <p>The name of the crawler.</p>
    pub fn set_crawler_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.crawler_name = input;
        self
    }
    /// <p>The estimated time left to complete a running crawl.</p>
    pub fn time_left_seconds(mut self, input: f64) -> Self {
        self.time_left_seconds = Some(input);
        self
    }
    /// <p>The estimated time left to complete a running crawl.</p>
    pub fn set_time_left_seconds(mut self, input: std::option::Option<f64>) -> Self {
        self.time_left_seconds = input;
        self
    }
    /// <p>True if the crawler is still estimating how long it will take to complete this run.</p>
    pub fn still_estimating(mut self, input: bool) -> Self {
        self.still_estimating = Some(input);
        self
    }
    /// <p>True if the crawler is still estimating how long it will take to complete this run.</p>
    pub fn set_still_estimating(mut self, input: std::option::Option<bool>) -> Self {
        self.still_estimating = input;
        self
    }
    /// <p>The duration of the crawler's most recent run, in seconds.</p>
    pub fn last_runtime_seconds(mut self, input: f64) -> Self {
        self.last_runtime_seconds = Some(input);
        self
    }
    /// <p>The duration of the crawler's most recent run, in seconds.</p>
    pub fn set_last_runtime_seconds(mut self, input: std::option::Option<f64>) -> Self {
        self.last_runtime_seconds = input;
        self
    }
    /// <p>The median duration of this crawler's runs, in seconds.</p>
    pub fn median_runtime_seconds(mut self, input: f64) -> Self {
        self.median_runtime_seconds = Some(input);
        self
    }
    /// <p>The median duration of this crawler's runs, in seconds.</p>
    pub fn set_median_runtime_seconds(mut self, input: std::option::Option<f64>) -> Self {
        self.median_runtime_seconds = input;
        self
    }
    /// <p>The number of tables created by this crawler.</p>
    pub fn tables_created(mut self, input: i32) -> Self {
        self.tables_created = Some(input);
        self
    }
    /// <p>The number of tables created by this crawler.</p>
    pub fn set_tables_created(mut self, input: std::option::Option<i32>) -> Self {
        self.tables_created = input;
        self
    }
    /// <p>The number of tables updated by this crawler.</p>
    pub fn tables_updated(mut self, input: i32) -> Self {
        self.tables_updated = Some(input);
        self
    }
    /// <p>The number of tables updated by this crawler.</p>
    pub fn set_tables_updated(mut self, input: std::option::Option<i32>) -> Self {
        self.tables_updated = input;
        self
    }
    /// <p>The number of tables deleted by this crawler.</p>
    pub fn tables_deleted(mut self, input: i32) -> Self {
        self.tables_deleted = Some(input);
        self
    }
    /// <p>The number of tables deleted by this crawler.</p>
    pub fn set_tables_deleted(mut self, input: std::option::Option<i32>) -> Self {
        self.tables_deleted = input;
        self
    }
    /// Consumes the builder and constructs a [`CrawlerMetrics`](crate::types::CrawlerMetrics).
    pub fn build(self) -> crate::types::CrawlerMetrics {
        crate::types::CrawlerMetrics {
            crawler_name: self.crawler_name,
            time_left_seconds: self.time_left_seconds.unwrap_or_default(),
            still_estimating: self.still_estimating.unwrap_or_default(),
            last_runtime_seconds: self.last_runtime_seconds.unwrap_or_default(),
            median_runtime_seconds: self.median_runtime_seconds.unwrap_or_default(),
            tables_created: self.tables_created.unwrap_or_default(),
            tables_updated: self.tables_updated.unwrap_or_default(),
            tables_deleted: self.tables_deleted.unwrap_or_default(),
        }
    }
}
