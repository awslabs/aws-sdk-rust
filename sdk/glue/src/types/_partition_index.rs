// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure for a partition index.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PartitionIndex {
    /// <p>The keys for the partition index.</p>
    #[doc(hidden)]
    pub keys: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The name of the partition index.</p>
    #[doc(hidden)]
    pub index_name: std::option::Option<std::string::String>,
}
impl PartitionIndex {
    /// <p>The keys for the partition index.</p>
    pub fn keys(&self) -> std::option::Option<&[std::string::String]> {
        self.keys.as_deref()
    }
    /// <p>The name of the partition index.</p>
    pub fn index_name(&self) -> std::option::Option<&str> {
        self.index_name.as_deref()
    }
}
impl PartitionIndex {
    /// Creates a new builder-style object to manufacture [`PartitionIndex`](crate::types::PartitionIndex).
    pub fn builder() -> crate::types::builders::PartitionIndexBuilder {
        crate::types::builders::PartitionIndexBuilder::default()
    }
}

/// A builder for [`PartitionIndex`](crate::types::PartitionIndex).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PartitionIndexBuilder {
    pub(crate) keys: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) index_name: std::option::Option<std::string::String>,
}
impl PartitionIndexBuilder {
    /// Appends an item to `keys`.
    ///
    /// To override the contents of this collection use [`set_keys`](Self::set_keys).
    ///
    /// <p>The keys for the partition index.</p>
    pub fn keys(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.keys.unwrap_or_default();
        v.push(input.into());
        self.keys = Some(v);
        self
    }
    /// <p>The keys for the partition index.</p>
    pub fn set_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.keys = input;
        self
    }
    /// <p>The name of the partition index.</p>
    pub fn index_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.index_name = Some(input.into());
        self
    }
    /// <p>The name of the partition index.</p>
    pub fn set_index_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.index_name = input;
        self
    }
    /// Consumes the builder and constructs a [`PartitionIndex`](crate::types::PartitionIndex).
    pub fn build(self) -> crate::types::PartitionIndex {
        crate::types::PartitionIndex {
            keys: self.keys,
            index_name: self.index_name,
        }
    }
}
