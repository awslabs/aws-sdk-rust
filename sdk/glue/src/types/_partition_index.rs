// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure for a partition index.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PartitionIndex {
    /// <p>The keys for the partition index.</p>
    pub keys: ::std::vec::Vec<::std::string::String>,
    /// <p>The name of the partition index.</p>
    pub index_name: ::std::string::String,
}
impl PartitionIndex {
    /// <p>The keys for the partition index.</p>
    pub fn keys(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.keys.deref()
    }
    /// <p>The name of the partition index.</p>
    pub fn index_name(&self) -> &str {
        use std::ops::Deref;
        self.index_name.deref()
    }
}
impl PartitionIndex {
    /// Creates a new builder-style object to manufacture [`PartitionIndex`](crate::types::PartitionIndex).
    pub fn builder() -> crate::types::builders::PartitionIndexBuilder {
        crate::types::builders::PartitionIndexBuilder::default()
    }
}

/// A builder for [`PartitionIndex`](crate::types::PartitionIndex).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PartitionIndexBuilder {
    pub(crate) keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) index_name: ::std::option::Option<::std::string::String>,
}
impl PartitionIndexBuilder {
    /// Appends an item to `keys`.
    ///
    /// To override the contents of this collection use [`set_keys`](Self::set_keys).
    ///
    /// <p>The keys for the partition index.</p>
    pub fn keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.keys.unwrap_or_default();
        v.push(input.into());
        self.keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>The keys for the partition index.</p>
    pub fn set_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.keys = input;
        self
    }
    /// <p>The keys for the partition index.</p>
    pub fn get_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.keys
    }
    /// <p>The name of the partition index.</p>
    /// This field is required.
    pub fn index_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the partition index.</p>
    pub fn set_index_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_name = input;
        self
    }
    /// <p>The name of the partition index.</p>
    pub fn get_index_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_name
    }
    /// Consumes the builder and constructs a [`PartitionIndex`](crate::types::PartitionIndex).
    /// This method will fail if any of the following fields are not set:
    /// - [`keys`](crate::types::builders::PartitionIndexBuilder::keys)
    /// - [`index_name`](crate::types::builders::PartitionIndexBuilder::index_name)
    pub fn build(self) -> ::std::result::Result<crate::types::PartitionIndex, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PartitionIndex {
            keys: self.keys.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "keys",
                    "keys was not specified but it is required when building PartitionIndex",
                )
            })?,
            index_name: self.index_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "index_name",
                    "index_name was not specified but it is required when building PartitionIndex",
                )
            })?,
        })
    }
}
