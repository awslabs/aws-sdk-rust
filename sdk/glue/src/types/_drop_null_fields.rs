// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a transform that removes columns from the dataset if all values in the column are 'null'. By default, Glue Studio will recognize null objects, but some values such as empty strings, strings that are "null", -1 integers or other placeholders such as zeros, are not automatically recognized as nulls.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DropNullFields {
    /// <p>The name of the transform node.</p>
    pub name: ::std::string::String,
    /// <p>The data inputs identified by their node names.</p>
    pub inputs: ::std::vec::Vec<::std::string::String>,
    /// <p>A structure that represents whether certain values are recognized as null values for removal.</p>
    pub null_check_box_list: ::std::option::Option<crate::types::NullCheckBoxList>,
    /// <p>A structure that specifies a list of NullValueField structures that represent a custom null value such as zero or other value being used as a null placeholder unique to the dataset.</p>
    /// <p>The <code>DropNullFields</code> transform removes custom null values only if both the value of the null placeholder and the datatype match the data.</p>
    pub null_text_list: ::std::option::Option<::std::vec::Vec<crate::types::NullValueField>>,
}
impl DropNullFields {
    /// <p>The name of the transform node.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The data inputs identified by their node names.</p>
    pub fn inputs(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.inputs.deref()
    }
    /// <p>A structure that represents whether certain values are recognized as null values for removal.</p>
    pub fn null_check_box_list(&self) -> ::std::option::Option<&crate::types::NullCheckBoxList> {
        self.null_check_box_list.as_ref()
    }
    /// <p>A structure that specifies a list of NullValueField structures that represent a custom null value such as zero or other value being used as a null placeholder unique to the dataset.</p>
    /// <p>The <code>DropNullFields</code> transform removes custom null values only if both the value of the null placeholder and the datatype match the data.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.null_text_list.is_none()`.
    pub fn null_text_list(&self) -> &[crate::types::NullValueField] {
        self.null_text_list.as_deref().unwrap_or_default()
    }
}
impl DropNullFields {
    /// Creates a new builder-style object to manufacture [`DropNullFields`](crate::types::DropNullFields).
    pub fn builder() -> crate::types::builders::DropNullFieldsBuilder {
        crate::types::builders::DropNullFieldsBuilder::default()
    }
}

/// A builder for [`DropNullFields`](crate::types::DropNullFields).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DropNullFieldsBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) inputs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) null_check_box_list: ::std::option::Option<crate::types::NullCheckBoxList>,
    pub(crate) null_text_list: ::std::option::Option<::std::vec::Vec<crate::types::NullValueField>>,
}
impl DropNullFieldsBuilder {
    /// <p>The name of the transform node.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the transform node.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the transform node.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>The data inputs identified by their node names.</p>
    pub fn inputs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input.into());
        self.inputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The data inputs identified by their node names.</p>
    pub fn set_inputs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inputs = input;
        self
    }
    /// <p>The data inputs identified by their node names.</p>
    pub fn get_inputs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.inputs
    }
    /// <p>A structure that represents whether certain values are recognized as null values for removal.</p>
    pub fn null_check_box_list(mut self, input: crate::types::NullCheckBoxList) -> Self {
        self.null_check_box_list = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that represents whether certain values are recognized as null values for removal.</p>
    pub fn set_null_check_box_list(mut self, input: ::std::option::Option<crate::types::NullCheckBoxList>) -> Self {
        self.null_check_box_list = input;
        self
    }
    /// <p>A structure that represents whether certain values are recognized as null values for removal.</p>
    pub fn get_null_check_box_list(&self) -> &::std::option::Option<crate::types::NullCheckBoxList> {
        &self.null_check_box_list
    }
    /// Appends an item to `null_text_list`.
    ///
    /// To override the contents of this collection use [`set_null_text_list`](Self::set_null_text_list).
    ///
    /// <p>A structure that specifies a list of NullValueField structures that represent a custom null value such as zero or other value being used as a null placeholder unique to the dataset.</p>
    /// <p>The <code>DropNullFields</code> transform removes custom null values only if both the value of the null placeholder and the datatype match the data.</p>
    pub fn null_text_list(mut self, input: crate::types::NullValueField) -> Self {
        let mut v = self.null_text_list.unwrap_or_default();
        v.push(input);
        self.null_text_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A structure that specifies a list of NullValueField structures that represent a custom null value such as zero or other value being used as a null placeholder unique to the dataset.</p>
    /// <p>The <code>DropNullFields</code> transform removes custom null values only if both the value of the null placeholder and the datatype match the data.</p>
    pub fn set_null_text_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NullValueField>>) -> Self {
        self.null_text_list = input;
        self
    }
    /// <p>A structure that specifies a list of NullValueField structures that represent a custom null value such as zero or other value being used as a null placeholder unique to the dataset.</p>
    /// <p>The <code>DropNullFields</code> transform removes custom null values only if both the value of the null placeholder and the datatype match the data.</p>
    pub fn get_null_text_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NullValueField>> {
        &self.null_text_list
    }
    /// Consumes the builder and constructs a [`DropNullFields`](crate::types::DropNullFields).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::DropNullFieldsBuilder::name)
    /// - [`inputs`](crate::types::builders::DropNullFieldsBuilder::inputs)
    pub fn build(self) -> ::std::result::Result<crate::types::DropNullFields, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DropNullFields {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DropNullFields",
                )
            })?,
            inputs: self.inputs.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "inputs",
                    "inputs was not specified but it is required when building DropNullFields",
                )
            })?,
            null_check_box_list: self.null_check_box_list,
            null_text_list: self.null_text_list,
        })
    }
}
