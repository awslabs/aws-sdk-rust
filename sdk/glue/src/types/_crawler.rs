// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a crawler program that examines a data source and uses classifiers to try to determine its schema. If successful, the crawler records metadata concerning the data source in the Glue Data Catalog.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Crawler {
    /// <p>The name of the crawler.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.</p>
    #[doc(hidden)]
    pub role: std::option::Option<std::string::String>,
    /// <p>A collection of targets to crawl.</p>
    #[doc(hidden)]
    pub targets: std::option::Option<crate::types::CrawlerTargets>,
    /// <p>The name of the database in which the crawler's output is stored.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>A description of the crawler.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A list of UTF-8 strings that specify the custom classifiers that are associated with the crawler.</p>
    #[doc(hidden)]
    pub classifiers: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.</p>
    #[doc(hidden)]
    pub recrawl_policy: std::option::Option<crate::types::RecrawlPolicy>,
    /// <p>The policy that specifies update and delete behaviors for the crawler.</p>
    #[doc(hidden)]
    pub schema_change_policy: std::option::Option<crate::types::SchemaChangePolicy>,
    /// <p>A configuration that specifies whether data lineage is enabled for the crawler.</p>
    #[doc(hidden)]
    pub lineage_configuration: std::option::Option<crate::types::LineageConfiguration>,
    /// <p>Indicates whether the crawler is running, or whether a run is pending.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::CrawlerState>,
    /// <p>The prefix added to the names of tables that are created.</p>
    #[doc(hidden)]
    pub table_prefix: std::option::Option<std::string::String>,
    /// <p>For scheduled crawlers, the schedule when the crawler runs.</p>
    #[doc(hidden)]
    pub schedule: std::option::Option<crate::types::Schedule>,
    /// <p>If the crawler is running, contains the total time elapsed since the last crawl began.</p>
    #[doc(hidden)]
    pub crawl_elapsed_time: i64,
    /// <p>The time that the crawler was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time that the crawler was last updated.</p>
    #[doc(hidden)]
    pub last_updated: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the last crawl, and potentially error information if an error occurred.</p>
    #[doc(hidden)]
    pub last_crawl: std::option::Option<crate::types::LastCrawlInfo>,
    /// <p>The version of the crawler.</p>
    #[doc(hidden)]
    pub version: i64,
    /// <p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html">Setting crawler configuration options</a>.</p>
    #[doc(hidden)]
    pub configuration: std::option::Option<std::string::String>,
    /// <p>The name of the <code>SecurityConfiguration</code> structure to be used by this crawler.</p>
    #[doc(hidden)]
    pub crawler_security_configuration: std::option::Option<std::string::String>,
    /// <p>Specifies whether the crawler should use Lake Formation credentials for the crawler instead of the IAM role credentials.</p>
    #[doc(hidden)]
    pub lake_formation_configuration: std::option::Option<crate::types::LakeFormationConfiguration>,
}
impl Crawler {
    /// <p>The name of the crawler.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.</p>
    pub fn role(&self) -> std::option::Option<&str> {
        self.role.as_deref()
    }
    /// <p>A collection of targets to crawl.</p>
    pub fn targets(&self) -> std::option::Option<&crate::types::CrawlerTargets> {
        self.targets.as_ref()
    }
    /// <p>The name of the database in which the crawler's output is stored.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>A description of the crawler.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of UTF-8 strings that specify the custom classifiers that are associated with the crawler.</p>
    pub fn classifiers(&self) -> std::option::Option<&[std::string::String]> {
        self.classifiers.as_deref()
    }
    /// <p>A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.</p>
    pub fn recrawl_policy(&self) -> std::option::Option<&crate::types::RecrawlPolicy> {
        self.recrawl_policy.as_ref()
    }
    /// <p>The policy that specifies update and delete behaviors for the crawler.</p>
    pub fn schema_change_policy(&self) -> std::option::Option<&crate::types::SchemaChangePolicy> {
        self.schema_change_policy.as_ref()
    }
    /// <p>A configuration that specifies whether data lineage is enabled for the crawler.</p>
    pub fn lineage_configuration(
        &self,
    ) -> std::option::Option<&crate::types::LineageConfiguration> {
        self.lineage_configuration.as_ref()
    }
    /// <p>Indicates whether the crawler is running, or whether a run is pending.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::CrawlerState> {
        self.state.as_ref()
    }
    /// <p>The prefix added to the names of tables that are created.</p>
    pub fn table_prefix(&self) -> std::option::Option<&str> {
        self.table_prefix.as_deref()
    }
    /// <p>For scheduled crawlers, the schedule when the crawler runs.</p>
    pub fn schedule(&self) -> std::option::Option<&crate::types::Schedule> {
        self.schedule.as_ref()
    }
    /// <p>If the crawler is running, contains the total time elapsed since the last crawl began.</p>
    pub fn crawl_elapsed_time(&self) -> i64 {
        self.crawl_elapsed_time
    }
    /// <p>The time that the crawler was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time that the crawler was last updated.</p>
    pub fn last_updated(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated.as_ref()
    }
    /// <p>The status of the last crawl, and potentially error information if an error occurred.</p>
    pub fn last_crawl(&self) -> std::option::Option<&crate::types::LastCrawlInfo> {
        self.last_crawl.as_ref()
    }
    /// <p>The version of the crawler.</p>
    pub fn version(&self) -> i64 {
        self.version
    }
    /// <p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html">Setting crawler configuration options</a>.</p>
    pub fn configuration(&self) -> std::option::Option<&str> {
        self.configuration.as_deref()
    }
    /// <p>The name of the <code>SecurityConfiguration</code> structure to be used by this crawler.</p>
    pub fn crawler_security_configuration(&self) -> std::option::Option<&str> {
        self.crawler_security_configuration.as_deref()
    }
    /// <p>Specifies whether the crawler should use Lake Formation credentials for the crawler instead of the IAM role credentials.</p>
    pub fn lake_formation_configuration(
        &self,
    ) -> std::option::Option<&crate::types::LakeFormationConfiguration> {
        self.lake_formation_configuration.as_ref()
    }
}
impl Crawler {
    /// Creates a new builder-style object to manufacture [`Crawler`](crate::types::Crawler).
    pub fn builder() -> crate::types::builders::CrawlerBuilder {
        crate::types::builders::CrawlerBuilder::default()
    }
}

/// A builder for [`Crawler`](crate::types::Crawler).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CrawlerBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) role: std::option::Option<std::string::String>,
    pub(crate) targets: std::option::Option<crate::types::CrawlerTargets>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) classifiers: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) recrawl_policy: std::option::Option<crate::types::RecrawlPolicy>,
    pub(crate) schema_change_policy: std::option::Option<crate::types::SchemaChangePolicy>,
    pub(crate) lineage_configuration: std::option::Option<crate::types::LineageConfiguration>,
    pub(crate) state: std::option::Option<crate::types::CrawlerState>,
    pub(crate) table_prefix: std::option::Option<std::string::String>,
    pub(crate) schedule: std::option::Option<crate::types::Schedule>,
    pub(crate) crawl_elapsed_time: std::option::Option<i64>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_crawl: std::option::Option<crate::types::LastCrawlInfo>,
    pub(crate) version: std::option::Option<i64>,
    pub(crate) configuration: std::option::Option<std::string::String>,
    pub(crate) crawler_security_configuration: std::option::Option<std::string::String>,
    pub(crate) lake_formation_configuration:
        std::option::Option<crate::types::LakeFormationConfiguration>,
}
impl CrawlerBuilder {
    /// <p>The name of the crawler.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the crawler.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.</p>
    pub fn role(mut self, input: impl Into<std::string::String>) -> Self {
        self.role = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.</p>
    pub fn set_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role = input;
        self
    }
    /// <p>A collection of targets to crawl.</p>
    pub fn targets(mut self, input: crate::types::CrawlerTargets) -> Self {
        self.targets = Some(input);
        self
    }
    /// <p>A collection of targets to crawl.</p>
    pub fn set_targets(mut self, input: std::option::Option<crate::types::CrawlerTargets>) -> Self {
        self.targets = input;
        self
    }
    /// <p>The name of the database in which the crawler's output is stored.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>The name of the database in which the crawler's output is stored.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>A description of the crawler.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the crawler.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `classifiers`.
    ///
    /// To override the contents of this collection use [`set_classifiers`](Self::set_classifiers).
    ///
    /// <p>A list of UTF-8 strings that specify the custom classifiers that are associated with the crawler.</p>
    pub fn classifiers(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.classifiers.unwrap_or_default();
        v.push(input.into());
        self.classifiers = Some(v);
        self
    }
    /// <p>A list of UTF-8 strings that specify the custom classifiers that are associated with the crawler.</p>
    pub fn set_classifiers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.classifiers = input;
        self
    }
    /// <p>A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.</p>
    pub fn recrawl_policy(mut self, input: crate::types::RecrawlPolicy) -> Self {
        self.recrawl_policy = Some(input);
        self
    }
    /// <p>A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.</p>
    pub fn set_recrawl_policy(
        mut self,
        input: std::option::Option<crate::types::RecrawlPolicy>,
    ) -> Self {
        self.recrawl_policy = input;
        self
    }
    /// <p>The policy that specifies update and delete behaviors for the crawler.</p>
    pub fn schema_change_policy(mut self, input: crate::types::SchemaChangePolicy) -> Self {
        self.schema_change_policy = Some(input);
        self
    }
    /// <p>The policy that specifies update and delete behaviors for the crawler.</p>
    pub fn set_schema_change_policy(
        mut self,
        input: std::option::Option<crate::types::SchemaChangePolicy>,
    ) -> Self {
        self.schema_change_policy = input;
        self
    }
    /// <p>A configuration that specifies whether data lineage is enabled for the crawler.</p>
    pub fn lineage_configuration(mut self, input: crate::types::LineageConfiguration) -> Self {
        self.lineage_configuration = Some(input);
        self
    }
    /// <p>A configuration that specifies whether data lineage is enabled for the crawler.</p>
    pub fn set_lineage_configuration(
        mut self,
        input: std::option::Option<crate::types::LineageConfiguration>,
    ) -> Self {
        self.lineage_configuration = input;
        self
    }
    /// <p>Indicates whether the crawler is running, or whether a run is pending.</p>
    pub fn state(mut self, input: crate::types::CrawlerState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>Indicates whether the crawler is running, or whether a run is pending.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::CrawlerState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The prefix added to the names of tables that are created.</p>
    pub fn table_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_prefix = Some(input.into());
        self
    }
    /// <p>The prefix added to the names of tables that are created.</p>
    pub fn set_table_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_prefix = input;
        self
    }
    /// <p>For scheduled crawlers, the schedule when the crawler runs.</p>
    pub fn schedule(mut self, input: crate::types::Schedule) -> Self {
        self.schedule = Some(input);
        self
    }
    /// <p>For scheduled crawlers, the schedule when the crawler runs.</p>
    pub fn set_schedule(mut self, input: std::option::Option<crate::types::Schedule>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>If the crawler is running, contains the total time elapsed since the last crawl began.</p>
    pub fn crawl_elapsed_time(mut self, input: i64) -> Self {
        self.crawl_elapsed_time = Some(input);
        self
    }
    /// <p>If the crawler is running, contains the total time elapsed since the last crawl began.</p>
    pub fn set_crawl_elapsed_time(mut self, input: std::option::Option<i64>) -> Self {
        self.crawl_elapsed_time = input;
        self
    }
    /// <p>The time that the crawler was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time that the crawler was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the crawler was last updated.</p>
    pub fn last_updated(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated = Some(input);
        self
    }
    /// <p>The time that the crawler was last updated.</p>
    pub fn set_last_updated(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated = input;
        self
    }
    /// <p>The status of the last crawl, and potentially error information if an error occurred.</p>
    pub fn last_crawl(mut self, input: crate::types::LastCrawlInfo) -> Self {
        self.last_crawl = Some(input);
        self
    }
    /// <p>The status of the last crawl, and potentially error information if an error occurred.</p>
    pub fn set_last_crawl(
        mut self,
        input: std::option::Option<crate::types::LastCrawlInfo>,
    ) -> Self {
        self.last_crawl = input;
        self
    }
    /// <p>The version of the crawler.</p>
    pub fn version(mut self, input: i64) -> Self {
        self.version = Some(input);
        self
    }
    /// <p>The version of the crawler.</p>
    pub fn set_version(mut self, input: std::option::Option<i64>) -> Self {
        self.version = input;
        self
    }
    /// <p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html">Setting crawler configuration options</a>.</p>
    pub fn configuration(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration = Some(input.into());
        self
    }
    /// <p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html">Setting crawler configuration options</a>.</p>
    pub fn set_configuration(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The name of the <code>SecurityConfiguration</code> structure to be used by this crawler.</p>
    pub fn crawler_security_configuration(mut self, input: impl Into<std::string::String>) -> Self {
        self.crawler_security_configuration = Some(input.into());
        self
    }
    /// <p>The name of the <code>SecurityConfiguration</code> structure to be used by this crawler.</p>
    pub fn set_crawler_security_configuration(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.crawler_security_configuration = input;
        self
    }
    /// <p>Specifies whether the crawler should use Lake Formation credentials for the crawler instead of the IAM role credentials.</p>
    pub fn lake_formation_configuration(
        mut self,
        input: crate::types::LakeFormationConfiguration,
    ) -> Self {
        self.lake_formation_configuration = Some(input);
        self
    }
    /// <p>Specifies whether the crawler should use Lake Formation credentials for the crawler instead of the IAM role credentials.</p>
    pub fn set_lake_formation_configuration(
        mut self,
        input: std::option::Option<crate::types::LakeFormationConfiguration>,
    ) -> Self {
        self.lake_formation_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`Crawler`](crate::types::Crawler).
    pub fn build(self) -> crate::types::Crawler {
        crate::types::Crawler {
            name: self.name,
            role: self.role,
            targets: self.targets,
            database_name: self.database_name,
            description: self.description,
            classifiers: self.classifiers,
            recrawl_policy: self.recrawl_policy,
            schema_change_policy: self.schema_change_policy,
            lineage_configuration: self.lineage_configuration,
            state: self.state,
            table_prefix: self.table_prefix,
            schedule: self.schedule,
            crawl_elapsed_time: self.crawl_elapsed_time.unwrap_or_default(),
            creation_time: self.creation_time,
            last_updated: self.last_updated,
            last_crawl: self.last_crawl,
            version: self.version.unwrap_or_default(),
            configuration: self.configuration,
            crawler_security_configuration: self.crawler_security_configuration,
            lake_formation_configuration: self.lake_formation_configuration,
        }
    }
}
