// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies additional connection options for the Amazon S3 data store.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3SourceAdditionalOptions {
    /// <p>Sets the upper limit for the target size of the dataset in bytes that will be processed.</p>
    #[doc(hidden)]
    pub bounded_size: std::option::Option<i64>,
    /// <p>Sets the upper limit for the target number of files that will be processed.</p>
    #[doc(hidden)]
    pub bounded_files: std::option::Option<i64>,
}
impl S3SourceAdditionalOptions {
    /// <p>Sets the upper limit for the target size of the dataset in bytes that will be processed.</p>
    pub fn bounded_size(&self) -> std::option::Option<i64> {
        self.bounded_size
    }
    /// <p>Sets the upper limit for the target number of files that will be processed.</p>
    pub fn bounded_files(&self) -> std::option::Option<i64> {
        self.bounded_files
    }
}
impl S3SourceAdditionalOptions {
    /// Creates a new builder-style object to manufacture [`S3SourceAdditionalOptions`](crate::types::S3SourceAdditionalOptions).
    pub fn builder() -> crate::types::builders::S3SourceAdditionalOptionsBuilder {
        crate::types::builders::S3SourceAdditionalOptionsBuilder::default()
    }
}

/// A builder for [`S3SourceAdditionalOptions`](crate::types::S3SourceAdditionalOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3SourceAdditionalOptionsBuilder {
    pub(crate) bounded_size: std::option::Option<i64>,
    pub(crate) bounded_files: std::option::Option<i64>,
}
impl S3SourceAdditionalOptionsBuilder {
    /// <p>Sets the upper limit for the target size of the dataset in bytes that will be processed.</p>
    pub fn bounded_size(mut self, input: i64) -> Self {
        self.bounded_size = Some(input);
        self
    }
    /// <p>Sets the upper limit for the target size of the dataset in bytes that will be processed.</p>
    pub fn set_bounded_size(mut self, input: std::option::Option<i64>) -> Self {
        self.bounded_size = input;
        self
    }
    /// <p>Sets the upper limit for the target number of files that will be processed.</p>
    pub fn bounded_files(mut self, input: i64) -> Self {
        self.bounded_files = Some(input);
        self
    }
    /// <p>Sets the upper limit for the target number of files that will be processed.</p>
    pub fn set_bounded_files(mut self, input: std::option::Option<i64>) -> Self {
        self.bounded_files = input;
        self
    }
    /// Consumes the builder and constructs a [`S3SourceAdditionalOptions`](crate::types::S3SourceAdditionalOptions).
    pub fn build(self) -> crate::types::S3SourceAdditionalOptions {
        crate::types::S3SourceAdditionalOptions {
            bounded_size: self.bounded_size,
            bounded_files: self.bounded_files,
        }
    }
}
