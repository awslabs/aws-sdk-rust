// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a transform that chooses the data property keys that you want to drop.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DropFields {
    /// <p>The name of the transform node.</p>
    pub name: ::std::string::String,
    /// <p>The data inputs identified by their node names.</p>
    pub inputs: ::std::vec::Vec<::std::string::String>,
    /// <p>A JSON path to a variable in the data structure.</p>
    pub paths: ::std::vec::Vec<::std::vec::Vec<::std::string::String>>,
}
impl DropFields {
    /// <p>The name of the transform node.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The data inputs identified by their node names.</p>
    pub fn inputs(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.inputs.deref()
    }
    /// <p>A JSON path to a variable in the data structure.</p>
    pub fn paths(&self) -> &[::std::vec::Vec<::std::string::String>] {
        use std::ops::Deref;
        self.paths.deref()
    }
}
impl DropFields {
    /// Creates a new builder-style object to manufacture [`DropFields`](crate::types::DropFields).
    pub fn builder() -> crate::types::builders::DropFieldsBuilder {
        crate::types::builders::DropFieldsBuilder::default()
    }
}

/// A builder for [`DropFields`](crate::types::DropFields).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DropFieldsBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) inputs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) paths: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
}
impl DropFieldsBuilder {
    /// <p>The name of the transform node.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the transform node.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the transform node.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>The data inputs identified by their node names.</p>
    pub fn inputs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input.into());
        self.inputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The data inputs identified by their node names.</p>
    pub fn set_inputs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inputs = input;
        self
    }
    /// <p>The data inputs identified by their node names.</p>
    pub fn get_inputs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.inputs
    }
    /// Appends an item to `paths`.
    ///
    /// To override the contents of this collection use [`set_paths`](Self::set_paths).
    ///
    /// <p>A JSON path to a variable in the data structure.</p>
    pub fn paths(mut self, input: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut v = self.paths.unwrap_or_default();
        v.push(input);
        self.paths = ::std::option::Option::Some(v);
        self
    }
    /// <p>A JSON path to a variable in the data structure.</p>
    pub fn set_paths(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>) -> Self {
        self.paths = input;
        self
    }
    /// <p>A JSON path to a variable in the data structure.</p>
    pub fn get_paths(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>> {
        &self.paths
    }
    /// Consumes the builder and constructs a [`DropFields`](crate::types::DropFields).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::DropFieldsBuilder::name)
    /// - [`inputs`](crate::types::builders::DropFieldsBuilder::inputs)
    /// - [`paths`](crate::types::builders::DropFieldsBuilder::paths)
    pub fn build(self) -> ::std::result::Result<crate::types::DropFields, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DropFields {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DropFields",
                )
            })?,
            inputs: self.inputs.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "inputs",
                    "inputs was not specified but it is required when building DropFields",
                )
            })?,
            paths: self.paths.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "paths",
                    "paths was not specified but it is required when building DropFields",
                )
            })?,
        })
    }
}
