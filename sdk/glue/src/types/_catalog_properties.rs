// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that specifies data lake access properties and other custom properties.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CatalogProperties {
    /// <p>A <code>DataLakeAccessProperties</code> object that specifies properties to configure data lake access for your catalog resource in the Glue Data Catalog.</p>
    pub data_lake_access_properties: ::std::option::Option<crate::types::DataLakeAccessProperties>,
    /// <p>A structure that specifies Iceberg table optimization properties for the catalog. This includes configuration for compaction, retention, and orphan file deletion operations that can be applied to Iceberg tables in this catalog.</p>
    pub iceberg_optimization_properties: ::std::option::Option<crate::types::IcebergOptimizationProperties>,
    /// <p>Additional key-value properties for the catalog, such as column statistics optimizations.</p>
    pub custom_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CatalogProperties {
    /// <p>A <code>DataLakeAccessProperties</code> object that specifies properties to configure data lake access for your catalog resource in the Glue Data Catalog.</p>
    pub fn data_lake_access_properties(&self) -> ::std::option::Option<&crate::types::DataLakeAccessProperties> {
        self.data_lake_access_properties.as_ref()
    }
    /// <p>A structure that specifies Iceberg table optimization properties for the catalog. This includes configuration for compaction, retention, and orphan file deletion operations that can be applied to Iceberg tables in this catalog.</p>
    pub fn iceberg_optimization_properties(&self) -> ::std::option::Option<&crate::types::IcebergOptimizationProperties> {
        self.iceberg_optimization_properties.as_ref()
    }
    /// <p>Additional key-value properties for the catalog, such as column statistics optimizations.</p>
    pub fn custom_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.custom_properties.as_ref()
    }
}
impl CatalogProperties {
    /// Creates a new builder-style object to manufacture [`CatalogProperties`](crate::types::CatalogProperties).
    pub fn builder() -> crate::types::builders::CatalogPropertiesBuilder {
        crate::types::builders::CatalogPropertiesBuilder::default()
    }
}

/// A builder for [`CatalogProperties`](crate::types::CatalogProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CatalogPropertiesBuilder {
    pub(crate) data_lake_access_properties: ::std::option::Option<crate::types::DataLakeAccessProperties>,
    pub(crate) iceberg_optimization_properties: ::std::option::Option<crate::types::IcebergOptimizationProperties>,
    pub(crate) custom_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CatalogPropertiesBuilder {
    /// <p>A <code>DataLakeAccessProperties</code> object that specifies properties to configure data lake access for your catalog resource in the Glue Data Catalog.</p>
    pub fn data_lake_access_properties(mut self, input: crate::types::DataLakeAccessProperties) -> Self {
        self.data_lake_access_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>DataLakeAccessProperties</code> object that specifies properties to configure data lake access for your catalog resource in the Glue Data Catalog.</p>
    pub fn set_data_lake_access_properties(mut self, input: ::std::option::Option<crate::types::DataLakeAccessProperties>) -> Self {
        self.data_lake_access_properties = input;
        self
    }
    /// <p>A <code>DataLakeAccessProperties</code> object that specifies properties to configure data lake access for your catalog resource in the Glue Data Catalog.</p>
    pub fn get_data_lake_access_properties(&self) -> &::std::option::Option<crate::types::DataLakeAccessProperties> {
        &self.data_lake_access_properties
    }
    /// <p>A structure that specifies Iceberg table optimization properties for the catalog. This includes configuration for compaction, retention, and orphan file deletion operations that can be applied to Iceberg tables in this catalog.</p>
    pub fn iceberg_optimization_properties(mut self, input: crate::types::IcebergOptimizationProperties) -> Self {
        self.iceberg_optimization_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that specifies Iceberg table optimization properties for the catalog. This includes configuration for compaction, retention, and orphan file deletion operations that can be applied to Iceberg tables in this catalog.</p>
    pub fn set_iceberg_optimization_properties(mut self, input: ::std::option::Option<crate::types::IcebergOptimizationProperties>) -> Self {
        self.iceberg_optimization_properties = input;
        self
    }
    /// <p>A structure that specifies Iceberg table optimization properties for the catalog. This includes configuration for compaction, retention, and orphan file deletion operations that can be applied to Iceberg tables in this catalog.</p>
    pub fn get_iceberg_optimization_properties(&self) -> &::std::option::Option<crate::types::IcebergOptimizationProperties> {
        &self.iceberg_optimization_properties
    }
    /// Adds a key-value pair to `custom_properties`.
    ///
    /// To override the contents of this collection use [`set_custom_properties`](Self::set_custom_properties).
    ///
    /// <p>Additional key-value properties for the catalog, such as column statistics optimizations.</p>
    pub fn custom_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.custom_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.custom_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Additional key-value properties for the catalog, such as column statistics optimizations.</p>
    pub fn set_custom_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.custom_properties = input;
        self
    }
    /// <p>Additional key-value properties for the catalog, such as column statistics optimizations.</p>
    pub fn get_custom_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.custom_properties
    }
    /// Consumes the builder and constructs a [`CatalogProperties`](crate::types::CatalogProperties).
    pub fn build(self) -> crate::types::CatalogProperties {
        crate::types::CatalogProperties {
            data_lake_access_properties: self.data_lake_access_properties,
            iceberg_optimization_properties: self.iceberg_optimization_properties,
            custom_properties: self.custom_properties,
        }
    }
}
