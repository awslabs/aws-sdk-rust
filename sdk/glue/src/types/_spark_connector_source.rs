// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a connector to an Apache Spark data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SparkConnectorSource {
    /// <p>The name of the data source.</p>
    pub name: ::std::string::String,
    /// <p>The name of the connection that is associated with the connector.</p>
    pub connection_name: ::std::string::String,
    /// <p>The name of a connector that assists with accessing the data store in Glue Studio.</p>
    pub connector_name: ::std::string::String,
    /// <p>The type of connection, such as marketplace.spark or custom.spark, designating a connection to an Apache Spark data store.</p>
    pub connection_type: ::std::string::String,
    /// <p>Additional connection options for the connector.</p>
    pub additional_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Specifies data schema for the custom spark source.</p>
    pub output_schemas: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>,
}
impl SparkConnectorSource {
    /// <p>The name of the data source.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The name of the connection that is associated with the connector.</p>
    pub fn connection_name(&self) -> &str {
        use std::ops::Deref;
        self.connection_name.deref()
    }
    /// <p>The name of a connector that assists with accessing the data store in Glue Studio.</p>
    pub fn connector_name(&self) -> &str {
        use std::ops::Deref;
        self.connector_name.deref()
    }
    /// <p>The type of connection, such as marketplace.spark or custom.spark, designating a connection to an Apache Spark data store.</p>
    pub fn connection_type(&self) -> &str {
        use std::ops::Deref;
        self.connection_type.deref()
    }
    /// <p>Additional connection options for the connector.</p>
    pub fn additional_options(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.additional_options.as_ref()
    }
    /// <p>Specifies data schema for the custom spark source.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.output_schemas.is_none()`.
    pub fn output_schemas(&self) -> &[crate::types::GlueSchema] {
        self.output_schemas.as_deref().unwrap_or_default()
    }
}
impl SparkConnectorSource {
    /// Creates a new builder-style object to manufacture [`SparkConnectorSource`](crate::types::SparkConnectorSource).
    pub fn builder() -> crate::types::builders::SparkConnectorSourceBuilder {
        crate::types::builders::SparkConnectorSourceBuilder::default()
    }
}

/// A builder for [`SparkConnectorSource`](crate::types::SparkConnectorSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SparkConnectorSourceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) connection_name: ::std::option::Option<::std::string::String>,
    pub(crate) connector_name: ::std::option::Option<::std::string::String>,
    pub(crate) connection_type: ::std::option::Option<::std::string::String>,
    pub(crate) additional_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) output_schemas: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>,
}
impl SparkConnectorSourceBuilder {
    /// <p>The name of the data source.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data source.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data source.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name of the connection that is associated with the connector.</p>
    /// This field is required.
    pub fn connection_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the connection that is associated with the connector.</p>
    pub fn set_connection_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_name = input;
        self
    }
    /// <p>The name of the connection that is associated with the connector.</p>
    pub fn get_connection_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_name
    }
    /// <p>The name of a connector that assists with accessing the data store in Glue Studio.</p>
    /// This field is required.
    pub fn connector_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a connector that assists with accessing the data store in Glue Studio.</p>
    pub fn set_connector_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_name = input;
        self
    }
    /// <p>The name of a connector that assists with accessing the data store in Glue Studio.</p>
    pub fn get_connector_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_name
    }
    /// <p>The type of connection, such as marketplace.spark or custom.spark, designating a connection to an Apache Spark data store.</p>
    /// This field is required.
    pub fn connection_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of connection, such as marketplace.spark or custom.spark, designating a connection to an Apache Spark data store.</p>
    pub fn set_connection_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_type = input;
        self
    }
    /// <p>The type of connection, such as marketplace.spark or custom.spark, designating a connection to an Apache Spark data store.</p>
    pub fn get_connection_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_type
    }
    /// Adds a key-value pair to `additional_options`.
    ///
    /// To override the contents of this collection use [`set_additional_options`](Self::set_additional_options).
    ///
    /// <p>Additional connection options for the connector.</p>
    pub fn additional_options(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.additional_options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.additional_options = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Additional connection options for the connector.</p>
    pub fn set_additional_options(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.additional_options = input;
        self
    }
    /// <p>Additional connection options for the connector.</p>
    pub fn get_additional_options(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.additional_options
    }
    /// Appends an item to `output_schemas`.
    ///
    /// To override the contents of this collection use [`set_output_schemas`](Self::set_output_schemas).
    ///
    /// <p>Specifies data schema for the custom spark source.</p>
    pub fn output_schemas(mut self, input: crate::types::GlueSchema) -> Self {
        let mut v = self.output_schemas.unwrap_or_default();
        v.push(input);
        self.output_schemas = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies data schema for the custom spark source.</p>
    pub fn set_output_schemas(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>) -> Self {
        self.output_schemas = input;
        self
    }
    /// <p>Specifies data schema for the custom spark source.</p>
    pub fn get_output_schemas(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>> {
        &self.output_schemas
    }
    /// Consumes the builder and constructs a [`SparkConnectorSource`](crate::types::SparkConnectorSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::SparkConnectorSourceBuilder::name)
    /// - [`connection_name`](crate::types::builders::SparkConnectorSourceBuilder::connection_name)
    /// - [`connector_name`](crate::types::builders::SparkConnectorSourceBuilder::connector_name)
    /// - [`connection_type`](crate::types::builders::SparkConnectorSourceBuilder::connection_type)
    pub fn build(self) -> ::std::result::Result<crate::types::SparkConnectorSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SparkConnectorSource {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building SparkConnectorSource",
                )
            })?,
            connection_name: self.connection_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_name",
                    "connection_name was not specified but it is required when building SparkConnectorSource",
                )
            })?,
            connector_name: self.connector_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connector_name",
                    "connector_name was not specified but it is required when building SparkConnectorSource",
                )
            })?,
            connection_type: self.connection_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_type",
                    "connection_type was not specified but it is required when building SparkConnectorSource",
                )
            })?,
            additional_options: self.additional_options,
            output_schemas: self.output_schemas,
        })
    }
}
