// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing a custom pattern for detecting sensitive data across the columns and rows of your structured data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomEntityType {
    /// <p>A name for the custom pattern that allows it to be retrieved or deleted later. This name must be unique per Amazon Web Services account.</p>
    pub name: ::std::string::String,
    /// <p>A regular expression string that is used for detecting sensitive data in a custom pattern.</p>
    pub regex_string: ::std::string::String,
    /// <p>A list of context words. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.</p>
    /// <p>If no context words are passed only a regular expression is checked.</p>
    pub context_words: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CustomEntityType {
    /// <p>A name for the custom pattern that allows it to be retrieved or deleted later. This name must be unique per Amazon Web Services account.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>A regular expression string that is used for detecting sensitive data in a custom pattern.</p>
    pub fn regex_string(&self) -> &str {
        use std::ops::Deref;
        self.regex_string.deref()
    }
    /// <p>A list of context words. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.</p>
    /// <p>If no context words are passed only a regular expression is checked.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.context_words.is_none()`.
    pub fn context_words(&self) -> &[::std::string::String] {
        self.context_words.as_deref().unwrap_or_default()
    }
}
impl CustomEntityType {
    /// Creates a new builder-style object to manufacture [`CustomEntityType`](crate::types::CustomEntityType).
    pub fn builder() -> crate::types::builders::CustomEntityTypeBuilder {
        crate::types::builders::CustomEntityTypeBuilder::default()
    }
}

/// A builder for [`CustomEntityType`](crate::types::CustomEntityType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomEntityTypeBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) regex_string: ::std::option::Option<::std::string::String>,
    pub(crate) context_words: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CustomEntityTypeBuilder {
    /// <p>A name for the custom pattern that allows it to be retrieved or deleted later. This name must be unique per Amazon Web Services account.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the custom pattern that allows it to be retrieved or deleted later. This name must be unique per Amazon Web Services account.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the custom pattern that allows it to be retrieved or deleted later. This name must be unique per Amazon Web Services account.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A regular expression string that is used for detecting sensitive data in a custom pattern.</p>
    /// This field is required.
    pub fn regex_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.regex_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A regular expression string that is used for detecting sensitive data in a custom pattern.</p>
    pub fn set_regex_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.regex_string = input;
        self
    }
    /// <p>A regular expression string that is used for detecting sensitive data in a custom pattern.</p>
    pub fn get_regex_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.regex_string
    }
    /// Appends an item to `context_words`.
    ///
    /// To override the contents of this collection use [`set_context_words`](Self::set_context_words).
    ///
    /// <p>A list of context words. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.</p>
    /// <p>If no context words are passed only a regular expression is checked.</p>
    pub fn context_words(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.context_words.unwrap_or_default();
        v.push(input.into());
        self.context_words = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of context words. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.</p>
    /// <p>If no context words are passed only a regular expression is checked.</p>
    pub fn set_context_words(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.context_words = input;
        self
    }
    /// <p>A list of context words. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.</p>
    /// <p>If no context words are passed only a regular expression is checked.</p>
    pub fn get_context_words(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.context_words
    }
    /// Consumes the builder and constructs a [`CustomEntityType`](crate::types::CustomEntityType).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::CustomEntityTypeBuilder::name)
    /// - [`regex_string`](crate::types::builders::CustomEntityTypeBuilder::regex_string)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomEntityType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomEntityType {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CustomEntityType",
                )
            })?,
            regex_string: self.regex_string.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "regex_string",
                    "regex_string was not specified but it is required when building CustomEntityType",
                )
            })?,
            context_words: self.context_words,
        })
    }
}
