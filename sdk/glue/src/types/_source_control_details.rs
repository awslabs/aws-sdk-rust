// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details for a source control configuration for a job, allowing synchronization of job artifacts to or from a remote repository.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SourceControlDetails {
    /// <p>The provider for the remote repository.</p>
    #[doc(hidden)]
    pub provider: std::option::Option<crate::types::SourceControlProvider>,
    /// <p>The name of the remote repository that contains the job artifacts.</p>
    #[doc(hidden)]
    pub repository: std::option::Option<std::string::String>,
    /// <p>The owner of the remote repository that contains the job artifacts.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<std::string::String>,
    /// <p>An optional branch in the remote repository.</p>
    #[doc(hidden)]
    pub branch: std::option::Option<std::string::String>,
    /// <p>An optional folder in the remote repository.</p>
    #[doc(hidden)]
    pub folder: std::option::Option<std::string::String>,
    /// <p>The last commit ID for a commit in the remote repository.</p>
    #[doc(hidden)]
    pub last_commit_id: std::option::Option<std::string::String>,
    /// <p>The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token.</p>
    #[doc(hidden)]
    pub auth_strategy: std::option::Option<crate::types::SourceControlAuthStrategy>,
    /// <p>The value of an authorization token.</p>
    #[doc(hidden)]
    pub auth_token: std::option::Option<std::string::String>,
}
impl SourceControlDetails {
    /// <p>The provider for the remote repository.</p>
    pub fn provider(&self) -> std::option::Option<&crate::types::SourceControlProvider> {
        self.provider.as_ref()
    }
    /// <p>The name of the remote repository that contains the job artifacts.</p>
    pub fn repository(&self) -> std::option::Option<&str> {
        self.repository.as_deref()
    }
    /// <p>The owner of the remote repository that contains the job artifacts.</p>
    pub fn owner(&self) -> std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>An optional branch in the remote repository.</p>
    pub fn branch(&self) -> std::option::Option<&str> {
        self.branch.as_deref()
    }
    /// <p>An optional folder in the remote repository.</p>
    pub fn folder(&self) -> std::option::Option<&str> {
        self.folder.as_deref()
    }
    /// <p>The last commit ID for a commit in the remote repository.</p>
    pub fn last_commit_id(&self) -> std::option::Option<&str> {
        self.last_commit_id.as_deref()
    }
    /// <p>The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token.</p>
    pub fn auth_strategy(&self) -> std::option::Option<&crate::types::SourceControlAuthStrategy> {
        self.auth_strategy.as_ref()
    }
    /// <p>The value of an authorization token.</p>
    pub fn auth_token(&self) -> std::option::Option<&str> {
        self.auth_token.as_deref()
    }
}
impl SourceControlDetails {
    /// Creates a new builder-style object to manufacture [`SourceControlDetails`](crate::types::SourceControlDetails).
    pub fn builder() -> crate::types::builders::SourceControlDetailsBuilder {
        crate::types::builders::SourceControlDetailsBuilder::default()
    }
}

/// A builder for [`SourceControlDetails`](crate::types::SourceControlDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SourceControlDetailsBuilder {
    pub(crate) provider: std::option::Option<crate::types::SourceControlProvider>,
    pub(crate) repository: std::option::Option<std::string::String>,
    pub(crate) owner: std::option::Option<std::string::String>,
    pub(crate) branch: std::option::Option<std::string::String>,
    pub(crate) folder: std::option::Option<std::string::String>,
    pub(crate) last_commit_id: std::option::Option<std::string::String>,
    pub(crate) auth_strategy: std::option::Option<crate::types::SourceControlAuthStrategy>,
    pub(crate) auth_token: std::option::Option<std::string::String>,
}
impl SourceControlDetailsBuilder {
    /// <p>The provider for the remote repository.</p>
    pub fn provider(mut self, input: crate::types::SourceControlProvider) -> Self {
        self.provider = Some(input);
        self
    }
    /// <p>The provider for the remote repository.</p>
    pub fn set_provider(
        mut self,
        input: std::option::Option<crate::types::SourceControlProvider>,
    ) -> Self {
        self.provider = input;
        self
    }
    /// <p>The name of the remote repository that contains the job artifacts.</p>
    pub fn repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository = Some(input.into());
        self
    }
    /// <p>The name of the remote repository that contains the job artifacts.</p>
    pub fn set_repository(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository = input;
        self
    }
    /// <p>The owner of the remote repository that contains the job artifacts.</p>
    pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner = Some(input.into());
        self
    }
    /// <p>The owner of the remote repository that contains the job artifacts.</p>
    pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>An optional branch in the remote repository.</p>
    pub fn branch(mut self, input: impl Into<std::string::String>) -> Self {
        self.branch = Some(input.into());
        self
    }
    /// <p>An optional branch in the remote repository.</p>
    pub fn set_branch(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.branch = input;
        self
    }
    /// <p>An optional folder in the remote repository.</p>
    pub fn folder(mut self, input: impl Into<std::string::String>) -> Self {
        self.folder = Some(input.into());
        self
    }
    /// <p>An optional folder in the remote repository.</p>
    pub fn set_folder(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.folder = input;
        self
    }
    /// <p>The last commit ID for a commit in the remote repository.</p>
    pub fn last_commit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_commit_id = Some(input.into());
        self
    }
    /// <p>The last commit ID for a commit in the remote repository.</p>
    pub fn set_last_commit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_commit_id = input;
        self
    }
    /// <p>The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token.</p>
    pub fn auth_strategy(mut self, input: crate::types::SourceControlAuthStrategy) -> Self {
        self.auth_strategy = Some(input);
        self
    }
    /// <p>The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token.</p>
    pub fn set_auth_strategy(
        mut self,
        input: std::option::Option<crate::types::SourceControlAuthStrategy>,
    ) -> Self {
        self.auth_strategy = input;
        self
    }
    /// <p>The value of an authorization token.</p>
    pub fn auth_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.auth_token = Some(input.into());
        self
    }
    /// <p>The value of an authorization token.</p>
    pub fn set_auth_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.auth_token = input;
        self
    }
    /// Consumes the builder and constructs a [`SourceControlDetails`](crate::types::SourceControlDetails).
    pub fn build(self) -> crate::types::SourceControlDetails {
        crate::types::SourceControlDetails {
            provider: self.provider,
            repository: self.repository,
            owner: self.owner,
            branch: self.branch,
            folder: self.folder,
            last_commit_id: self.last_commit_id,
            auth_strategy: self.auth_strategy,
            auth_token: self.auth_token,
        }
    }
}
