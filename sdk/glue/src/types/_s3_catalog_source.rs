// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an Amazon S3 data store in the Glue Data Catalog.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3CatalogSource {
    /// <p>The name of the data store.</p>
    pub name: ::std::string::String,
    /// <p>The database to read from.</p>
    pub database: ::std::string::String,
    /// <p>The database table to read from.</p>
    pub table: ::std::string::String,
    /// <p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>""</code> – empty by default.</p>
    pub partition_predicate: ::std::option::Option<::std::string::String>,
    /// <p>Specifies additional connection options.</p>
    pub additional_options: ::std::option::Option<crate::types::S3SourceAdditionalOptions>,
}
impl S3CatalogSource {
    /// <p>The name of the data store.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The database to read from.</p>
    pub fn database(&self) -> &str {
        use std::ops::Deref;
        self.database.deref()
    }
    /// <p>The database table to read from.</p>
    pub fn table(&self) -> &str {
        use std::ops::Deref;
        self.table.deref()
    }
    /// <p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>""</code> – empty by default.</p>
    pub fn partition_predicate(&self) -> ::std::option::Option<&str> {
        self.partition_predicate.as_deref()
    }
    /// <p>Specifies additional connection options.</p>
    pub fn additional_options(&self) -> ::std::option::Option<&crate::types::S3SourceAdditionalOptions> {
        self.additional_options.as_ref()
    }
}
impl S3CatalogSource {
    /// Creates a new builder-style object to manufacture [`S3CatalogSource`](crate::types::S3CatalogSource).
    pub fn builder() -> crate::types::builders::S3CatalogSourceBuilder {
        crate::types::builders::S3CatalogSourceBuilder::default()
    }
}

/// A builder for [`S3CatalogSource`](crate::types::S3CatalogSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3CatalogSourceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) database: ::std::option::Option<::std::string::String>,
    pub(crate) table: ::std::option::Option<::std::string::String>,
    pub(crate) partition_predicate: ::std::option::Option<::std::string::String>,
    pub(crate) additional_options: ::std::option::Option<crate::types::S3SourceAdditionalOptions>,
}
impl S3CatalogSourceBuilder {
    /// <p>The name of the data store.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data store.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data store.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The database to read from.</p>
    /// This field is required.
    pub fn database(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database to read from.</p>
    pub fn set_database(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The database to read from.</p>
    pub fn get_database(&self) -> &::std::option::Option<::std::string::String> {
        &self.database
    }
    /// <p>The database table to read from.</p>
    /// This field is required.
    pub fn table(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database table to read from.</p>
    pub fn set_table(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table = input;
        self
    }
    /// <p>The database table to read from.</p>
    pub fn get_table(&self) -> &::std::option::Option<::std::string::String> {
        &self.table
    }
    /// <p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>""</code> – empty by default.</p>
    pub fn partition_predicate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.partition_predicate = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>""</code> – empty by default.</p>
    pub fn set_partition_predicate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.partition_predicate = input;
        self
    }
    /// <p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>""</code> – empty by default.</p>
    pub fn get_partition_predicate(&self) -> &::std::option::Option<::std::string::String> {
        &self.partition_predicate
    }
    /// <p>Specifies additional connection options.</p>
    pub fn additional_options(mut self, input: crate::types::S3SourceAdditionalOptions) -> Self {
        self.additional_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies additional connection options.</p>
    pub fn set_additional_options(mut self, input: ::std::option::Option<crate::types::S3SourceAdditionalOptions>) -> Self {
        self.additional_options = input;
        self
    }
    /// <p>Specifies additional connection options.</p>
    pub fn get_additional_options(&self) -> &::std::option::Option<crate::types::S3SourceAdditionalOptions> {
        &self.additional_options
    }
    /// Consumes the builder and constructs a [`S3CatalogSource`](crate::types::S3CatalogSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::S3CatalogSourceBuilder::name)
    /// - [`database`](crate::types::builders::S3CatalogSourceBuilder::database)
    /// - [`table`](crate::types::builders::S3CatalogSourceBuilder::table)
    pub fn build(self) -> ::std::result::Result<crate::types::S3CatalogSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3CatalogSource {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building S3CatalogSource",
                )
            })?,
            database: self.database.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database",
                    "database was not specified but it is required when building S3CatalogSource",
                )
            })?,
            table: self.table.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table",
                    "table was not specified but it is required when building S3CatalogSource",
                )
            })?,
            partition_predicate: self.partition_predicate,
            additional_options: self.additional_options,
        })
    }
}
