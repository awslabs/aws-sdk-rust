// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data structure used by the Data Catalog to encrypt the password as part of <code>CreateConnection</code> or <code>UpdateConnection</code> and store it in the <code>ENCRYPTED_PASSWORD</code> field in the connection properties. You can enable catalog encryption or only password encryption.</p>
/// <p>When a <code>CreationConnection</code> request arrives containing a password, the Data Catalog first encrypts the password using your KMS key. It then encrypts the whole connection object again if catalog encryption is also enabled.</p>
/// <p>This encryption requires that you set KMS key permissions to enable or restrict access on the password key according to your security requirements. For example, you might want only administrators to have decrypt permission on the password key.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConnectionPasswordEncryption {
    /// <p>When the <code>ReturnConnectionPasswordEncrypted</code> flag is set to "true", passwords remain encrypted in the responses of <code>GetConnection</code> and <code>GetConnections</code>. This encryption takes effect independently from catalog encryption. </p>
    #[doc(hidden)]
    pub return_connection_password_encrypted: bool,
    /// <p>An KMS key that is used to encrypt the connection password. </p>
    /// <p>If connection password protection is enabled, the caller of <code>CreateConnection</code> and <code>UpdateConnection</code> needs at least <code>kms:Encrypt</code> permission on the specified KMS key, to encrypt passwords before storing them in the Data Catalog. </p>
    /// <p>You can set the decrypt permission to enable or restrict access on the password key according to your security requirements.</p>
    #[doc(hidden)]
    pub aws_kms_key_id: std::option::Option<std::string::String>,
}
impl ConnectionPasswordEncryption {
    /// <p>When the <code>ReturnConnectionPasswordEncrypted</code> flag is set to "true", passwords remain encrypted in the responses of <code>GetConnection</code> and <code>GetConnections</code>. This encryption takes effect independently from catalog encryption. </p>
    pub fn return_connection_password_encrypted(&self) -> bool {
        self.return_connection_password_encrypted
    }
    /// <p>An KMS key that is used to encrypt the connection password. </p>
    /// <p>If connection password protection is enabled, the caller of <code>CreateConnection</code> and <code>UpdateConnection</code> needs at least <code>kms:Encrypt</code> permission on the specified KMS key, to encrypt passwords before storing them in the Data Catalog. </p>
    /// <p>You can set the decrypt permission to enable or restrict access on the password key according to your security requirements.</p>
    pub fn aws_kms_key_id(&self) -> std::option::Option<&str> {
        self.aws_kms_key_id.as_deref()
    }
}
impl ConnectionPasswordEncryption {
    /// Creates a new builder-style object to manufacture [`ConnectionPasswordEncryption`](crate::types::ConnectionPasswordEncryption).
    pub fn builder() -> crate::types::builders::ConnectionPasswordEncryptionBuilder {
        crate::types::builders::ConnectionPasswordEncryptionBuilder::default()
    }
}

/// A builder for [`ConnectionPasswordEncryption`](crate::types::ConnectionPasswordEncryption).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectionPasswordEncryptionBuilder {
    pub(crate) return_connection_password_encrypted: std::option::Option<bool>,
    pub(crate) aws_kms_key_id: std::option::Option<std::string::String>,
}
impl ConnectionPasswordEncryptionBuilder {
    /// <p>When the <code>ReturnConnectionPasswordEncrypted</code> flag is set to "true", passwords remain encrypted in the responses of <code>GetConnection</code> and <code>GetConnections</code>. This encryption takes effect independently from catalog encryption. </p>
    pub fn return_connection_password_encrypted(mut self, input: bool) -> Self {
        self.return_connection_password_encrypted = Some(input);
        self
    }
    /// <p>When the <code>ReturnConnectionPasswordEncrypted</code> flag is set to "true", passwords remain encrypted in the responses of <code>GetConnection</code> and <code>GetConnections</code>. This encryption takes effect independently from catalog encryption. </p>
    pub fn set_return_connection_password_encrypted(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.return_connection_password_encrypted = input;
        self
    }
    /// <p>An KMS key that is used to encrypt the connection password. </p>
    /// <p>If connection password protection is enabled, the caller of <code>CreateConnection</code> and <code>UpdateConnection</code> needs at least <code>kms:Encrypt</code> permission on the specified KMS key, to encrypt passwords before storing them in the Data Catalog. </p>
    /// <p>You can set the decrypt permission to enable or restrict access on the password key according to your security requirements.</p>
    pub fn aws_kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_kms_key_id = Some(input.into());
        self
    }
    /// <p>An KMS key that is used to encrypt the connection password. </p>
    /// <p>If connection password protection is enabled, the caller of <code>CreateConnection</code> and <code>UpdateConnection</code> needs at least <code>kms:Encrypt</code> permission on the specified KMS key, to encrypt passwords before storing them in the Data Catalog. </p>
    /// <p>You can set the decrypt permission to enable or restrict access on the password key according to your security requirements.</p>
    pub fn set_aws_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_kms_key_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ConnectionPasswordEncryption`](crate::types::ConnectionPasswordEncryption).
    pub fn build(self) -> crate::types::ConnectionPasswordEncryption {
        crate::types::ConnectionPasswordEncryption {
            return_connection_password_encrypted: self
                .return_connection_password_encrypted
                .unwrap_or_default(),
            aws_kms_key_id: self.aws_kms_key_id,
        }
    }
}
