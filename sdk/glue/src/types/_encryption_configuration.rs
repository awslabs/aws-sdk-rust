// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an encryption configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EncryptionConfiguration {
    /// <p>The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.</p>
    #[doc(hidden)]
    pub s3_encryption: std::option::Option<std::vec::Vec<crate::types::S3Encryption>>,
    /// <p>The encryption configuration for Amazon CloudWatch.</p>
    #[doc(hidden)]
    pub cloud_watch_encryption: std::option::Option<crate::types::CloudWatchEncryption>,
    /// <p>The encryption configuration for job bookmarks.</p>
    #[doc(hidden)]
    pub job_bookmarks_encryption: std::option::Option<crate::types::JobBookmarksEncryption>,
}
impl EncryptionConfiguration {
    /// <p>The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.</p>
    pub fn s3_encryption(&self) -> std::option::Option<&[crate::types::S3Encryption]> {
        self.s3_encryption.as_deref()
    }
    /// <p>The encryption configuration for Amazon CloudWatch.</p>
    pub fn cloud_watch_encryption(
        &self,
    ) -> std::option::Option<&crate::types::CloudWatchEncryption> {
        self.cloud_watch_encryption.as_ref()
    }
    /// <p>The encryption configuration for job bookmarks.</p>
    pub fn job_bookmarks_encryption(
        &self,
    ) -> std::option::Option<&crate::types::JobBookmarksEncryption> {
        self.job_bookmarks_encryption.as_ref()
    }
}
impl EncryptionConfiguration {
    /// Creates a new builder-style object to manufacture [`EncryptionConfiguration`](crate::types::EncryptionConfiguration).
    pub fn builder() -> crate::types::builders::EncryptionConfigurationBuilder {
        crate::types::builders::EncryptionConfigurationBuilder::default()
    }
}

/// A builder for [`EncryptionConfiguration`](crate::types::EncryptionConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EncryptionConfigurationBuilder {
    pub(crate) s3_encryption: std::option::Option<std::vec::Vec<crate::types::S3Encryption>>,
    pub(crate) cloud_watch_encryption: std::option::Option<crate::types::CloudWatchEncryption>,
    pub(crate) job_bookmarks_encryption: std::option::Option<crate::types::JobBookmarksEncryption>,
}
impl EncryptionConfigurationBuilder {
    /// Appends an item to `s3_encryption`.
    ///
    /// To override the contents of this collection use [`set_s3_encryption`](Self::set_s3_encryption).
    ///
    /// <p>The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.</p>
    pub fn s3_encryption(mut self, input: crate::types::S3Encryption) -> Self {
        let mut v = self.s3_encryption.unwrap_or_default();
        v.push(input);
        self.s3_encryption = Some(v);
        self
    }
    /// <p>The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.</p>
    pub fn set_s3_encryption(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::S3Encryption>>,
    ) -> Self {
        self.s3_encryption = input;
        self
    }
    /// <p>The encryption configuration for Amazon CloudWatch.</p>
    pub fn cloud_watch_encryption(mut self, input: crate::types::CloudWatchEncryption) -> Self {
        self.cloud_watch_encryption = Some(input);
        self
    }
    /// <p>The encryption configuration for Amazon CloudWatch.</p>
    pub fn set_cloud_watch_encryption(
        mut self,
        input: std::option::Option<crate::types::CloudWatchEncryption>,
    ) -> Self {
        self.cloud_watch_encryption = input;
        self
    }
    /// <p>The encryption configuration for job bookmarks.</p>
    pub fn job_bookmarks_encryption(mut self, input: crate::types::JobBookmarksEncryption) -> Self {
        self.job_bookmarks_encryption = Some(input);
        self
    }
    /// <p>The encryption configuration for job bookmarks.</p>
    pub fn set_job_bookmarks_encryption(
        mut self,
        input: std::option::Option<crate::types::JobBookmarksEncryption>,
    ) -> Self {
        self.job_bookmarks_encryption = input;
        self
    }
    /// Consumes the builder and constructs a [`EncryptionConfiguration`](crate::types::EncryptionConfiguration).
    pub fn build(self) -> crate::types::EncryptionConfiguration {
        crate::types::EncryptionConfiguration {
            s3_encryption: self.s3_encryption,
            cloud_watch_encryption: self.cloud_watch_encryption,
            job_bookmarks_encryption: self.job_bookmarks_encryption,
        }
    }
}
