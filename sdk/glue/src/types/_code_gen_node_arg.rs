// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An argument or property of a node.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CodeGenNodeArg {
    /// <p>The name of the argument or property.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The value of the argument or property.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>True if the value is used as a parameter.</p>
    #[doc(hidden)]
    pub param: bool,
}
impl CodeGenNodeArg {
    /// <p>The name of the argument or property.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The value of the argument or property.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>True if the value is used as a parameter.</p>
    pub fn param(&self) -> bool {
        self.param
    }
}
impl CodeGenNodeArg {
    /// Creates a new builder-style object to manufacture [`CodeGenNodeArg`](crate::types::CodeGenNodeArg).
    pub fn builder() -> crate::types::builders::CodeGenNodeArgBuilder {
        crate::types::builders::CodeGenNodeArgBuilder::default()
    }
}

/// A builder for [`CodeGenNodeArg`](crate::types::CodeGenNodeArg).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CodeGenNodeArgBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) param: std::option::Option<bool>,
}
impl CodeGenNodeArgBuilder {
    /// <p>The name of the argument or property.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the argument or property.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The value of the argument or property.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value of the argument or property.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>True if the value is used as a parameter.</p>
    pub fn param(mut self, input: bool) -> Self {
        self.param = Some(input);
        self
    }
    /// <p>True if the value is used as a parameter.</p>
    pub fn set_param(mut self, input: std::option::Option<bool>) -> Self {
        self.param = input;
        self
    }
    /// Consumes the builder and constructs a [`CodeGenNodeArg`](crate::types::CodeGenNodeArg).
    pub fn build(self) -> crate::types::CodeGenNodeArg {
        crate::types::CodeGenNodeArg {
            name: self.name,
            value: self.value,
            param: self.param.unwrap_or_default(),
        }
    }
}
