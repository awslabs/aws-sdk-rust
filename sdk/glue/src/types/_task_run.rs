// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The sampling parameters that are associated with the machine learning transform.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TaskRun {
    /// <p>The unique identifier for the transform.</p>
    #[doc(hidden)]
    pub transform_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier for this task run.</p>
    #[doc(hidden)]
    pub task_run_id: std::option::Option<std::string::String>,
    /// <p>The current status of the requested task run.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::TaskStatusType>,
    /// <p>The names of the log group for secure logging, associated with this task run.</p>
    #[doc(hidden)]
    pub log_group_name: std::option::Option<std::string::String>,
    /// <p>Specifies configuration properties associated with this task run.</p>
    #[doc(hidden)]
    pub properties: std::option::Option<crate::types::TaskRunProperties>,
    /// <p>The list of error strings associated with this task run.</p>
    #[doc(hidden)]
    pub error_string: std::option::Option<std::string::String>,
    /// <p>The date and time that this task run started.</p>
    #[doc(hidden)]
    pub started_on: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last point in time that the requested task run was updated.</p>
    #[doc(hidden)]
    pub last_modified_on: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last point in time that the requested task run was completed.</p>
    #[doc(hidden)]
    pub completed_on: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The amount of time (in seconds) that the task run consumed resources.</p>
    #[doc(hidden)]
    pub execution_time: i32,
}
impl TaskRun {
    /// <p>The unique identifier for the transform.</p>
    pub fn transform_id(&self) -> std::option::Option<&str> {
        self.transform_id.as_deref()
    }
    /// <p>The unique identifier for this task run.</p>
    pub fn task_run_id(&self) -> std::option::Option<&str> {
        self.task_run_id.as_deref()
    }
    /// <p>The current status of the requested task run.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::TaskStatusType> {
        self.status.as_ref()
    }
    /// <p>The names of the log group for secure logging, associated with this task run.</p>
    pub fn log_group_name(&self) -> std::option::Option<&str> {
        self.log_group_name.as_deref()
    }
    /// <p>Specifies configuration properties associated with this task run.</p>
    pub fn properties(&self) -> std::option::Option<&crate::types::TaskRunProperties> {
        self.properties.as_ref()
    }
    /// <p>The list of error strings associated with this task run.</p>
    pub fn error_string(&self) -> std::option::Option<&str> {
        self.error_string.as_deref()
    }
    /// <p>The date and time that this task run started.</p>
    pub fn started_on(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.started_on.as_ref()
    }
    /// <p>The last point in time that the requested task run was updated.</p>
    pub fn last_modified_on(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_on.as_ref()
    }
    /// <p>The last point in time that the requested task run was completed.</p>
    pub fn completed_on(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completed_on.as_ref()
    }
    /// <p>The amount of time (in seconds) that the task run consumed resources.</p>
    pub fn execution_time(&self) -> i32 {
        self.execution_time
    }
}
impl TaskRun {
    /// Creates a new builder-style object to manufacture [`TaskRun`](crate::types::TaskRun).
    pub fn builder() -> crate::types::builders::TaskRunBuilder {
        crate::types::builders::TaskRunBuilder::default()
    }
}

/// A builder for [`TaskRun`](crate::types::TaskRun).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TaskRunBuilder {
    pub(crate) transform_id: std::option::Option<std::string::String>,
    pub(crate) task_run_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::TaskStatusType>,
    pub(crate) log_group_name: std::option::Option<std::string::String>,
    pub(crate) properties: std::option::Option<crate::types::TaskRunProperties>,
    pub(crate) error_string: std::option::Option<std::string::String>,
    pub(crate) started_on: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_on: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) completed_on: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) execution_time: std::option::Option<i32>,
}
impl TaskRunBuilder {
    /// <p>The unique identifier for the transform.</p>
    pub fn transform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transform_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the transform.</p>
    pub fn set_transform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.transform_id = input;
        self
    }
    /// <p>The unique identifier for this task run.</p>
    pub fn task_run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_run_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for this task run.</p>
    pub fn set_task_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_run_id = input;
        self
    }
    /// <p>The current status of the requested task run.</p>
    pub fn status(mut self, input: crate::types::TaskStatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the requested task run.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::TaskStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The names of the log group for secure logging, associated with this task run.</p>
    pub fn log_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_group_name = Some(input.into());
        self
    }
    /// <p>The names of the log group for secure logging, associated with this task run.</p>
    pub fn set_log_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_group_name = input;
        self
    }
    /// <p>Specifies configuration properties associated with this task run.</p>
    pub fn properties(mut self, input: crate::types::TaskRunProperties) -> Self {
        self.properties = Some(input);
        self
    }
    /// <p>Specifies configuration properties associated with this task run.</p>
    pub fn set_properties(
        mut self,
        input: std::option::Option<crate::types::TaskRunProperties>,
    ) -> Self {
        self.properties = input;
        self
    }
    /// <p>The list of error strings associated with this task run.</p>
    pub fn error_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_string = Some(input.into());
        self
    }
    /// <p>The list of error strings associated with this task run.</p>
    pub fn set_error_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_string = input;
        self
    }
    /// <p>The date and time that this task run started.</p>
    pub fn started_on(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.started_on = Some(input);
        self
    }
    /// <p>The date and time that this task run started.</p>
    pub fn set_started_on(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.started_on = input;
        self
    }
    /// <p>The last point in time that the requested task run was updated.</p>
    pub fn last_modified_on(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_on = Some(input);
        self
    }
    /// <p>The last point in time that the requested task run was updated.</p>
    pub fn set_last_modified_on(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_on = input;
        self
    }
    /// <p>The last point in time that the requested task run was completed.</p>
    pub fn completed_on(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.completed_on = Some(input);
        self
    }
    /// <p>The last point in time that the requested task run was completed.</p>
    pub fn set_completed_on(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.completed_on = input;
        self
    }
    /// <p>The amount of time (in seconds) that the task run consumed resources.</p>
    pub fn execution_time(mut self, input: i32) -> Self {
        self.execution_time = Some(input);
        self
    }
    /// <p>The amount of time (in seconds) that the task run consumed resources.</p>
    pub fn set_execution_time(mut self, input: std::option::Option<i32>) -> Self {
        self.execution_time = input;
        self
    }
    /// Consumes the builder and constructs a [`TaskRun`](crate::types::TaskRun).
    pub fn build(self) -> crate::types::TaskRun {
        crate::types::TaskRun {
            transform_id: self.transform_id,
            task_run_id: self.task_run_id,
            status: self.status,
            log_group_name: self.log_group_name,
            properties: self.properties,
            error_string: self.error_string,
            started_on: self.started_on,
            last_modified_on: self.last_modified_on,
            completed_on: self.completed_on,
            execution_time: self.execution_time.unwrap_or_default(),
        }
    }
}
