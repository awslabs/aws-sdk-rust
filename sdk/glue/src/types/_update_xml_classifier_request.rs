// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an XML classifier to be updated.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateXmlClassifierRequest {
    /// <p>The name of the classifier.</p>
    pub name: ::std::string::String,
    /// <p>An identifier of the data format that the classifier matches.</p>
    pub classification: ::std::option::Option<::std::string::String>,
    /// <p>The XML tag designating the element that contains each record in an XML document being parsed. This cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>
    /// <row item_a="A" item_b="B" /></code> is okay, but <code>
    /// <row item_a="A" item_b="B" /></code> is not).</p>
    pub row_tag: ::std::option::Option<::std::string::String>,
}
impl UpdateXmlClassifierRequest {
    /// <p>The name of the classifier.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>An identifier of the data format that the classifier matches.</p>
    pub fn classification(&self) -> ::std::option::Option<&str> {
        self.classification.as_deref()
    }
    /// <p>The XML tag designating the element that contains each record in an XML document being parsed. This cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>
    /// <row item_a="A" item_b="B" /></code> is okay, but <code>
    /// <row item_a="A" item_b="B" /></code> is not).</p>
    pub fn row_tag(&self) -> ::std::option::Option<&str> {
        self.row_tag.as_deref()
    }
}
impl UpdateXmlClassifierRequest {
    /// Creates a new builder-style object to manufacture [`UpdateXmlClassifierRequest`](crate::types::UpdateXmlClassifierRequest).
    pub fn builder() -> crate::types::builders::UpdateXmlClassifierRequestBuilder {
        crate::types::builders::UpdateXmlClassifierRequestBuilder::default()
    }
}

/// A builder for [`UpdateXmlClassifierRequest`](crate::types::UpdateXmlClassifierRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateXmlClassifierRequestBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) classification: ::std::option::Option<::std::string::String>,
    pub(crate) row_tag: ::std::option::Option<::std::string::String>,
}
impl UpdateXmlClassifierRequestBuilder {
    /// <p>The name of the classifier.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the classifier.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the classifier.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>An identifier of the data format that the classifier matches.</p>
    pub fn classification(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.classification = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier of the data format that the classifier matches.</p>
    pub fn set_classification(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.classification = input;
        self
    }
    /// <p>An identifier of the data format that the classifier matches.</p>
    pub fn get_classification(&self) -> &::std::option::Option<::std::string::String> {
        &self.classification
    }
    /// <p>The XML tag designating the element that contains each record in an XML document being parsed. This cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>
    /// <row item_a="A" item_b="B" /></code> is okay, but <code>
    /// <row item_a="A" item_b="B" /></code> is not).</p>
    pub fn row_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.row_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The XML tag designating the element that contains each record in an XML document being parsed. This cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>
    /// <row item_a="A" item_b="B" /></code> is okay, but <code>
    /// <row item_a="A" item_b="B" /></code> is not).</p>
    pub fn set_row_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.row_tag = input;
        self
    }
    /// <p>The XML tag designating the element that contains each record in an XML document being parsed. This cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>
    /// <row item_a="A" item_b="B" /></code> is okay, but <code>
    /// <row item_a="A" item_b="B" /></code> is not).</p>
    pub fn get_row_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.row_tag
    }
    /// Consumes the builder and constructs a [`UpdateXmlClassifierRequest`](crate::types::UpdateXmlClassifierRequest).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::UpdateXmlClassifierRequestBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::UpdateXmlClassifierRequest, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UpdateXmlClassifierRequest {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building UpdateXmlClassifierRequest",
                )
            })?,
            classification: self.classification,
            row_tag: self.row_tag,
        })
    }
}
