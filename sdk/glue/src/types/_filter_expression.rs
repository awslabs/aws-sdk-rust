// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a filter expression.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FilterExpression {
    /// <p>The type of operation to perform in the expression.</p>
    #[doc(hidden)]
    pub operation: std::option::Option<crate::types::FilterOperation>,
    /// <p>Whether the expression is to be negated.</p>
    #[doc(hidden)]
    pub negated: std::option::Option<bool>,
    /// <p>A list of filter values.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<crate::types::FilterValue>>,
}
impl FilterExpression {
    /// <p>The type of operation to perform in the expression.</p>
    pub fn operation(&self) -> std::option::Option<&crate::types::FilterOperation> {
        self.operation.as_ref()
    }
    /// <p>Whether the expression is to be negated.</p>
    pub fn negated(&self) -> std::option::Option<bool> {
        self.negated
    }
    /// <p>A list of filter values.</p>
    pub fn values(&self) -> std::option::Option<&[crate::types::FilterValue]> {
        self.values.as_deref()
    }
}
impl FilterExpression {
    /// Creates a new builder-style object to manufacture [`FilterExpression`](crate::types::FilterExpression).
    pub fn builder() -> crate::types::builders::FilterExpressionBuilder {
        crate::types::builders::FilterExpressionBuilder::default()
    }
}

/// A builder for [`FilterExpression`](crate::types::FilterExpression).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FilterExpressionBuilder {
    pub(crate) operation: std::option::Option<crate::types::FilterOperation>,
    pub(crate) negated: std::option::Option<bool>,
    pub(crate) values: std::option::Option<std::vec::Vec<crate::types::FilterValue>>,
}
impl FilterExpressionBuilder {
    /// <p>The type of operation to perform in the expression.</p>
    pub fn operation(mut self, input: crate::types::FilterOperation) -> Self {
        self.operation = Some(input);
        self
    }
    /// <p>The type of operation to perform in the expression.</p>
    pub fn set_operation(
        mut self,
        input: std::option::Option<crate::types::FilterOperation>,
    ) -> Self {
        self.operation = input;
        self
    }
    /// <p>Whether the expression is to be negated.</p>
    pub fn negated(mut self, input: bool) -> Self {
        self.negated = Some(input);
        self
    }
    /// <p>Whether the expression is to be negated.</p>
    pub fn set_negated(mut self, input: std::option::Option<bool>) -> Self {
        self.negated = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>A list of filter values.</p>
    pub fn values(mut self, input: crate::types::FilterValue) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = Some(v);
        self
    }
    /// <p>A list of filter values.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FilterValue>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// Consumes the builder and constructs a [`FilterExpression`](crate::types::FilterExpression).
    pub fn build(self) -> crate::types::FilterExpression {
        crate::types::FilterExpression {
            operation: self.operation,
            negated: self.negated,
            values: self.values,
        }
    }
}
