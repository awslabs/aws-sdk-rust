// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a Hudi data source that is registered in the Glue Data Catalog.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CatalogHudiSource {
    /// <p>The name of the Hudi data source.</p>
    pub name: ::std::string::String,
    /// <p>The name of the database to read from.</p>
    pub database: ::std::string::String,
    /// <p>The name of the table in the database to read from.</p>
    pub table: ::std::string::String,
    /// <p>Specifies additional connection options.</p>
    pub additional_hudi_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Specifies the data schema for the Hudi source.</p>
    pub output_schemas: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>,
}
impl CatalogHudiSource {
    /// <p>The name of the Hudi data source.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The name of the database to read from.</p>
    pub fn database(&self) -> &str {
        use std::ops::Deref;
        self.database.deref()
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn table(&self) -> &str {
        use std::ops::Deref;
        self.table.deref()
    }
    /// <p>Specifies additional connection options.</p>
    pub fn additional_hudi_options(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.additional_hudi_options.as_ref()
    }
    /// <p>Specifies the data schema for the Hudi source.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.output_schemas.is_none()`.
    pub fn output_schemas(&self) -> &[crate::types::GlueSchema] {
        self.output_schemas.as_deref().unwrap_or_default()
    }
}
impl CatalogHudiSource {
    /// Creates a new builder-style object to manufacture [`CatalogHudiSource`](crate::types::CatalogHudiSource).
    pub fn builder() -> crate::types::builders::CatalogHudiSourceBuilder {
        crate::types::builders::CatalogHudiSourceBuilder::default()
    }
}

/// A builder for [`CatalogHudiSource`](crate::types::CatalogHudiSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CatalogHudiSourceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) database: ::std::option::Option<::std::string::String>,
    pub(crate) table: ::std::option::Option<::std::string::String>,
    pub(crate) additional_hudi_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) output_schemas: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>,
}
impl CatalogHudiSourceBuilder {
    /// <p>The name of the Hudi data source.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Hudi data source.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Hudi data source.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name of the database to read from.</p>
    /// This field is required.
    pub fn database(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database to read from.</p>
    pub fn set_database(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The name of the database to read from.</p>
    pub fn get_database(&self) -> &::std::option::Option<::std::string::String> {
        &self.database
    }
    /// <p>The name of the table in the database to read from.</p>
    /// This field is required.
    pub fn table(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn set_table(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table = input;
        self
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn get_table(&self) -> &::std::option::Option<::std::string::String> {
        &self.table
    }
    /// Adds a key-value pair to `additional_hudi_options`.
    ///
    /// To override the contents of this collection use [`set_additional_hudi_options`](Self::set_additional_hudi_options).
    ///
    /// <p>Specifies additional connection options.</p>
    pub fn additional_hudi_options(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.additional_hudi_options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.additional_hudi_options = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Specifies additional connection options.</p>
    pub fn set_additional_hudi_options(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.additional_hudi_options = input;
        self
    }
    /// <p>Specifies additional connection options.</p>
    pub fn get_additional_hudi_options(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.additional_hudi_options
    }
    /// Appends an item to `output_schemas`.
    ///
    /// To override the contents of this collection use [`set_output_schemas`](Self::set_output_schemas).
    ///
    /// <p>Specifies the data schema for the Hudi source.</p>
    pub fn output_schemas(mut self, input: crate::types::GlueSchema) -> Self {
        let mut v = self.output_schemas.unwrap_or_default();
        v.push(input);
        self.output_schemas = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the data schema for the Hudi source.</p>
    pub fn set_output_schemas(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>) -> Self {
        self.output_schemas = input;
        self
    }
    /// <p>Specifies the data schema for the Hudi source.</p>
    pub fn get_output_schemas(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>> {
        &self.output_schemas
    }
    /// Consumes the builder and constructs a [`CatalogHudiSource`](crate::types::CatalogHudiSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::CatalogHudiSourceBuilder::name)
    /// - [`database`](crate::types::builders::CatalogHudiSourceBuilder::database)
    /// - [`table`](crate::types::builders::CatalogHudiSourceBuilder::table)
    pub fn build(self) -> ::std::result::Result<crate::types::CatalogHudiSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CatalogHudiSource {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CatalogHudiSource",
                )
            })?,
            database: self.database.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database",
                    "database was not specified but it is required when building CatalogHudiSource",
                )
            })?,
            table: self.table.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table",
                    "table was not specified but it is required when building CatalogHudiSource",
                )
            })?,
            additional_hudi_options: self.additional_hudi_options,
            output_schemas: self.output_schemas,
        })
    }
}
