// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a direct Amazon Kinesis data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DirectKinesisSource {
    /// <p>The name of the data source.</p>
    pub name: ::std::string::String,
    /// <p>The amount of time to spend processing each micro batch.</p>
    pub window_size: ::std::option::Option<i32>,
    /// <p>Whether to automatically determine the schema from the incoming data.</p>
    pub detect_schema: ::std::option::Option<bool>,
    /// <p>Additional options for the Kinesis streaming data source.</p>
    pub streaming_options: ::std::option::Option<crate::types::KinesisStreamingSourceOptions>,
    /// <p>Additional options for data preview.</p>
    pub data_preview_options: ::std::option::Option<crate::types::StreamingDataPreviewOptions>,
}
impl DirectKinesisSource {
    /// <p>The name of the data source.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The amount of time to spend processing each micro batch.</p>
    pub fn window_size(&self) -> ::std::option::Option<i32> {
        self.window_size
    }
    /// <p>Whether to automatically determine the schema from the incoming data.</p>
    pub fn detect_schema(&self) -> ::std::option::Option<bool> {
        self.detect_schema
    }
    /// <p>Additional options for the Kinesis streaming data source.</p>
    pub fn streaming_options(&self) -> ::std::option::Option<&crate::types::KinesisStreamingSourceOptions> {
        self.streaming_options.as_ref()
    }
    /// <p>Additional options for data preview.</p>
    pub fn data_preview_options(&self) -> ::std::option::Option<&crate::types::StreamingDataPreviewOptions> {
        self.data_preview_options.as_ref()
    }
}
impl DirectKinesisSource {
    /// Creates a new builder-style object to manufacture [`DirectKinesisSource`](crate::types::DirectKinesisSource).
    pub fn builder() -> crate::types::builders::DirectKinesisSourceBuilder {
        crate::types::builders::DirectKinesisSourceBuilder::default()
    }
}

/// A builder for [`DirectKinesisSource`](crate::types::DirectKinesisSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DirectKinesisSourceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) window_size: ::std::option::Option<i32>,
    pub(crate) detect_schema: ::std::option::Option<bool>,
    pub(crate) streaming_options: ::std::option::Option<crate::types::KinesisStreamingSourceOptions>,
    pub(crate) data_preview_options: ::std::option::Option<crate::types::StreamingDataPreviewOptions>,
}
impl DirectKinesisSourceBuilder {
    /// <p>The name of the data source.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data source.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data source.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The amount of time to spend processing each micro batch.</p>
    pub fn window_size(mut self, input: i32) -> Self {
        self.window_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time to spend processing each micro batch.</p>
    pub fn set_window_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.window_size = input;
        self
    }
    /// <p>The amount of time to spend processing each micro batch.</p>
    pub fn get_window_size(&self) -> &::std::option::Option<i32> {
        &self.window_size
    }
    /// <p>Whether to automatically determine the schema from the incoming data.</p>
    pub fn detect_schema(mut self, input: bool) -> Self {
        self.detect_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to automatically determine the schema from the incoming data.</p>
    pub fn set_detect_schema(mut self, input: ::std::option::Option<bool>) -> Self {
        self.detect_schema = input;
        self
    }
    /// <p>Whether to automatically determine the schema from the incoming data.</p>
    pub fn get_detect_schema(&self) -> &::std::option::Option<bool> {
        &self.detect_schema
    }
    /// <p>Additional options for the Kinesis streaming data source.</p>
    pub fn streaming_options(mut self, input: crate::types::KinesisStreamingSourceOptions) -> Self {
        self.streaming_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional options for the Kinesis streaming data source.</p>
    pub fn set_streaming_options(mut self, input: ::std::option::Option<crate::types::KinesisStreamingSourceOptions>) -> Self {
        self.streaming_options = input;
        self
    }
    /// <p>Additional options for the Kinesis streaming data source.</p>
    pub fn get_streaming_options(&self) -> &::std::option::Option<crate::types::KinesisStreamingSourceOptions> {
        &self.streaming_options
    }
    /// <p>Additional options for data preview.</p>
    pub fn data_preview_options(mut self, input: crate::types::StreamingDataPreviewOptions) -> Self {
        self.data_preview_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional options for data preview.</p>
    pub fn set_data_preview_options(mut self, input: ::std::option::Option<crate::types::StreamingDataPreviewOptions>) -> Self {
        self.data_preview_options = input;
        self
    }
    /// <p>Additional options for data preview.</p>
    pub fn get_data_preview_options(&self) -> &::std::option::Option<crate::types::StreamingDataPreviewOptions> {
        &self.data_preview_options
    }
    /// Consumes the builder and constructs a [`DirectKinesisSource`](crate::types::DirectKinesisSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::DirectKinesisSourceBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::DirectKinesisSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DirectKinesisSource {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DirectKinesisSource",
                )
            })?,
            window_size: self.window_size,
            detect_schema: self.detect_schema,
            streaming_options: self.streaming_options,
            data_preview_options: self.data_preview_options,
        })
    }
}
