// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a point that a job can resume processing.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobBookmarkEntry {
    /// <p>The name of the job in question.</p>
    #[doc(hidden)]
    pub job_name: std::option::Option<std::string::String>,
    /// <p>The version of the job.</p>
    #[doc(hidden)]
    pub version: i32,
    /// <p>The run ID number.</p>
    #[doc(hidden)]
    pub run: i32,
    /// <p>The attempt ID number.</p>
    #[doc(hidden)]
    pub attempt: i32,
    /// <p>The unique run identifier associated with the previous job run.</p>
    #[doc(hidden)]
    pub previous_run_id: std::option::Option<std::string::String>,
    /// <p>The run ID number.</p>
    #[doc(hidden)]
    pub run_id: std::option::Option<std::string::String>,
    /// <p>The bookmark itself.</p>
    #[doc(hidden)]
    pub job_bookmark: std::option::Option<std::string::String>,
}
impl JobBookmarkEntry {
    /// <p>The name of the job in question.</p>
    pub fn job_name(&self) -> std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The version of the job.</p>
    pub fn version(&self) -> i32 {
        self.version
    }
    /// <p>The run ID number.</p>
    pub fn run(&self) -> i32 {
        self.run
    }
    /// <p>The attempt ID number.</p>
    pub fn attempt(&self) -> i32 {
        self.attempt
    }
    /// <p>The unique run identifier associated with the previous job run.</p>
    pub fn previous_run_id(&self) -> std::option::Option<&str> {
        self.previous_run_id.as_deref()
    }
    /// <p>The run ID number.</p>
    pub fn run_id(&self) -> std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p>The bookmark itself.</p>
    pub fn job_bookmark(&self) -> std::option::Option<&str> {
        self.job_bookmark.as_deref()
    }
}
impl JobBookmarkEntry {
    /// Creates a new builder-style object to manufacture [`JobBookmarkEntry`](crate::types::JobBookmarkEntry).
    pub fn builder() -> crate::types::builders::JobBookmarkEntryBuilder {
        crate::types::builders::JobBookmarkEntryBuilder::default()
    }
}

/// A builder for [`JobBookmarkEntry`](crate::types::JobBookmarkEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobBookmarkEntryBuilder {
    pub(crate) job_name: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<i32>,
    pub(crate) run: std::option::Option<i32>,
    pub(crate) attempt: std::option::Option<i32>,
    pub(crate) previous_run_id: std::option::Option<std::string::String>,
    pub(crate) run_id: std::option::Option<std::string::String>,
    pub(crate) job_bookmark: std::option::Option<std::string::String>,
}
impl JobBookmarkEntryBuilder {
    /// <p>The name of the job in question.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_name = Some(input.into());
        self
    }
    /// <p>The name of the job in question.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The version of the job.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.version = Some(input);
        self
    }
    /// <p>The version of the job.</p>
    pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
        self.version = input;
        self
    }
    /// <p>The run ID number.</p>
    pub fn run(mut self, input: i32) -> Self {
        self.run = Some(input);
        self
    }
    /// <p>The run ID number.</p>
    pub fn set_run(mut self, input: std::option::Option<i32>) -> Self {
        self.run = input;
        self
    }
    /// <p>The attempt ID number.</p>
    pub fn attempt(mut self, input: i32) -> Self {
        self.attempt = Some(input);
        self
    }
    /// <p>The attempt ID number.</p>
    pub fn set_attempt(mut self, input: std::option::Option<i32>) -> Self {
        self.attempt = input;
        self
    }
    /// <p>The unique run identifier associated with the previous job run.</p>
    pub fn previous_run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.previous_run_id = Some(input.into());
        self
    }
    /// <p>The unique run identifier associated with the previous job run.</p>
    pub fn set_previous_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.previous_run_id = input;
        self
    }
    /// <p>The run ID number.</p>
    pub fn run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.run_id = Some(input.into());
        self
    }
    /// <p>The run ID number.</p>
    pub fn set_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The bookmark itself.</p>
    pub fn job_bookmark(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_bookmark = Some(input.into());
        self
    }
    /// <p>The bookmark itself.</p>
    pub fn set_job_bookmark(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_bookmark = input;
        self
    }
    /// Consumes the builder and constructs a [`JobBookmarkEntry`](crate::types::JobBookmarkEntry).
    pub fn build(self) -> crate::types::JobBookmarkEntry {
        crate::types::JobBookmarkEntry {
            job_name: self.job_name,
            version: self.version.unwrap_or_default(),
            run: self.run.unwrap_or_default(),
            attempt: self.attempt.unwrap_or_default(),
            previous_run_id: self.previous_run_id,
            run_id: self.run_id,
            job_bookmark: self.job_bookmark,
        }
    }
}
