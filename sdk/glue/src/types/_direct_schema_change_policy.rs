// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A policy that specifies update behavior for the crawler.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DirectSchemaChangePolicy {
    /// <p>Whether to use the specified update behavior when the crawler finds a changed schema.</p>
    #[doc(hidden)]
    pub enable_update_catalog: std::option::Option<bool>,
    /// <p>The update behavior when the crawler finds a changed schema.</p>
    #[doc(hidden)]
    pub update_behavior: std::option::Option<crate::types::UpdateCatalogBehavior>,
    /// <p>Specifies the table in the database that the schema change policy applies to.</p>
    #[doc(hidden)]
    pub table: std::option::Option<std::string::String>,
    /// <p>Specifies the database that the schema change policy applies to.</p>
    #[doc(hidden)]
    pub database: std::option::Option<std::string::String>,
}
impl DirectSchemaChangePolicy {
    /// <p>Whether to use the specified update behavior when the crawler finds a changed schema.</p>
    pub fn enable_update_catalog(&self) -> std::option::Option<bool> {
        self.enable_update_catalog
    }
    /// <p>The update behavior when the crawler finds a changed schema.</p>
    pub fn update_behavior(&self) -> std::option::Option<&crate::types::UpdateCatalogBehavior> {
        self.update_behavior.as_ref()
    }
    /// <p>Specifies the table in the database that the schema change policy applies to.</p>
    pub fn table(&self) -> std::option::Option<&str> {
        self.table.as_deref()
    }
    /// <p>Specifies the database that the schema change policy applies to.</p>
    pub fn database(&self) -> std::option::Option<&str> {
        self.database.as_deref()
    }
}
impl DirectSchemaChangePolicy {
    /// Creates a new builder-style object to manufacture [`DirectSchemaChangePolicy`](crate::types::DirectSchemaChangePolicy).
    pub fn builder() -> crate::types::builders::DirectSchemaChangePolicyBuilder {
        crate::types::builders::DirectSchemaChangePolicyBuilder::default()
    }
}

/// A builder for [`DirectSchemaChangePolicy`](crate::types::DirectSchemaChangePolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DirectSchemaChangePolicyBuilder {
    pub(crate) enable_update_catalog: std::option::Option<bool>,
    pub(crate) update_behavior: std::option::Option<crate::types::UpdateCatalogBehavior>,
    pub(crate) table: std::option::Option<std::string::String>,
    pub(crate) database: std::option::Option<std::string::String>,
}
impl DirectSchemaChangePolicyBuilder {
    /// <p>Whether to use the specified update behavior when the crawler finds a changed schema.</p>
    pub fn enable_update_catalog(mut self, input: bool) -> Self {
        self.enable_update_catalog = Some(input);
        self
    }
    /// <p>Whether to use the specified update behavior when the crawler finds a changed schema.</p>
    pub fn set_enable_update_catalog(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_update_catalog = input;
        self
    }
    /// <p>The update behavior when the crawler finds a changed schema.</p>
    pub fn update_behavior(mut self, input: crate::types::UpdateCatalogBehavior) -> Self {
        self.update_behavior = Some(input);
        self
    }
    /// <p>The update behavior when the crawler finds a changed schema.</p>
    pub fn set_update_behavior(
        mut self,
        input: std::option::Option<crate::types::UpdateCatalogBehavior>,
    ) -> Self {
        self.update_behavior = input;
        self
    }
    /// <p>Specifies the table in the database that the schema change policy applies to.</p>
    pub fn table(mut self, input: impl Into<std::string::String>) -> Self {
        self.table = Some(input.into());
        self
    }
    /// <p>Specifies the table in the database that the schema change policy applies to.</p>
    pub fn set_table(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table = input;
        self
    }
    /// <p>Specifies the database that the schema change policy applies to.</p>
    pub fn database(mut self, input: impl Into<std::string::String>) -> Self {
        self.database = Some(input.into());
        self
    }
    /// <p>Specifies the database that the schema change policy applies to.</p>
    pub fn set_database(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// Consumes the builder and constructs a [`DirectSchemaChangePolicy`](crate::types::DirectSchemaChangePolicy).
    pub fn build(self) -> crate::types::DirectSchemaChangePolicy {
        crate::types::DirectSchemaChangePolicy {
            enable_update_catalog: self.enable_update_catalog,
            update_behavior: self.update_behavior,
            table: self.table,
            database: self.database,
        }
    }
}
