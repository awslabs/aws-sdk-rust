// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines column statistics supported for Boolean data columns.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BooleanColumnStatisticsData {
    /// <p>The number of true values in the column.</p>
    #[doc(hidden)]
    pub number_of_trues: i64,
    /// <p>The number of false values in the column.</p>
    #[doc(hidden)]
    pub number_of_falses: i64,
    /// <p>The number of null values in the column.</p>
    #[doc(hidden)]
    pub number_of_nulls: i64,
}
impl BooleanColumnStatisticsData {
    /// <p>The number of true values in the column.</p>
    pub fn number_of_trues(&self) -> i64 {
        self.number_of_trues
    }
    /// <p>The number of false values in the column.</p>
    pub fn number_of_falses(&self) -> i64 {
        self.number_of_falses
    }
    /// <p>The number of null values in the column.</p>
    pub fn number_of_nulls(&self) -> i64 {
        self.number_of_nulls
    }
}
impl BooleanColumnStatisticsData {
    /// Creates a new builder-style object to manufacture [`BooleanColumnStatisticsData`](crate::types::BooleanColumnStatisticsData).
    pub fn builder() -> crate::types::builders::BooleanColumnStatisticsDataBuilder {
        crate::types::builders::BooleanColumnStatisticsDataBuilder::default()
    }
}

/// A builder for [`BooleanColumnStatisticsData`](crate::types::BooleanColumnStatisticsData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BooleanColumnStatisticsDataBuilder {
    pub(crate) number_of_trues: std::option::Option<i64>,
    pub(crate) number_of_falses: std::option::Option<i64>,
    pub(crate) number_of_nulls: std::option::Option<i64>,
}
impl BooleanColumnStatisticsDataBuilder {
    /// <p>The number of true values in the column.</p>
    pub fn number_of_trues(mut self, input: i64) -> Self {
        self.number_of_trues = Some(input);
        self
    }
    /// <p>The number of true values in the column.</p>
    pub fn set_number_of_trues(mut self, input: std::option::Option<i64>) -> Self {
        self.number_of_trues = input;
        self
    }
    /// <p>The number of false values in the column.</p>
    pub fn number_of_falses(mut self, input: i64) -> Self {
        self.number_of_falses = Some(input);
        self
    }
    /// <p>The number of false values in the column.</p>
    pub fn set_number_of_falses(mut self, input: std::option::Option<i64>) -> Self {
        self.number_of_falses = input;
        self
    }
    /// <p>The number of null values in the column.</p>
    pub fn number_of_nulls(mut self, input: i64) -> Self {
        self.number_of_nulls = Some(input);
        self
    }
    /// <p>The number of null values in the column.</p>
    pub fn set_number_of_nulls(mut self, input: std::option::Option<i64>) -> Self {
        self.number_of_nulls = input;
        self
    }
    /// Consumes the builder and constructs a [`BooleanColumnStatisticsData`](crate::types::BooleanColumnStatisticsData).
    pub fn build(self) -> crate::types::BooleanColumnStatisticsData {
        crate::types::BooleanColumnStatisticsData {
            number_of_trues: self.number_of_trues.unwrap_or_default(),
            number_of_falses: self.number_of_falses.unwrap_or_default(),
            number_of_nulls: self.number_of_nulls.unwrap_or_default(),
        }
    }
}
