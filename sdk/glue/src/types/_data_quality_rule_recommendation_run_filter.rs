// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter for listing data quality recommendation runs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataQualityRuleRecommendationRunFilter {
    /// <p>Filter based on a specified data source (Glue table).</p>
    pub data_source: ::std::option::Option<crate::types::DataSource>,
    /// <p>Filter based on time for results started before provided time.</p>
    pub started_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Filter based on time for results started after provided time.</p>
    pub started_after: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DataQualityRuleRecommendationRunFilter {
    /// <p>Filter based on a specified data source (Glue table).</p>
    pub fn data_source(&self) -> ::std::option::Option<&crate::types::DataSource> {
        self.data_source.as_ref()
    }
    /// <p>Filter based on time for results started before provided time.</p>
    pub fn started_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_before.as_ref()
    }
    /// <p>Filter based on time for results started after provided time.</p>
    pub fn started_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_after.as_ref()
    }
}
impl DataQualityRuleRecommendationRunFilter {
    /// Creates a new builder-style object to manufacture [`DataQualityRuleRecommendationRunFilter`](crate::types::DataQualityRuleRecommendationRunFilter).
    pub fn builder() -> crate::types::builders::DataQualityRuleRecommendationRunFilterBuilder {
        crate::types::builders::DataQualityRuleRecommendationRunFilterBuilder::default()
    }
}

/// A builder for [`DataQualityRuleRecommendationRunFilter`](crate::types::DataQualityRuleRecommendationRunFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataQualityRuleRecommendationRunFilterBuilder {
    pub(crate) data_source: ::std::option::Option<crate::types::DataSource>,
    pub(crate) started_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) started_after: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DataQualityRuleRecommendationRunFilterBuilder {
    /// <p>Filter based on a specified data source (Glue table).</p>
    /// This field is required.
    pub fn data_source(mut self, input: crate::types::DataSource) -> Self {
        self.data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter based on a specified data source (Glue table).</p>
    pub fn set_data_source(mut self, input: ::std::option::Option<crate::types::DataSource>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>Filter based on a specified data source (Glue table).</p>
    pub fn get_data_source(&self) -> &::std::option::Option<crate::types::DataSource> {
        &self.data_source
    }
    /// <p>Filter based on time for results started before provided time.</p>
    pub fn started_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter based on time for results started before provided time.</p>
    pub fn set_started_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_before = input;
        self
    }
    /// <p>Filter based on time for results started before provided time.</p>
    pub fn get_started_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_before
    }
    /// <p>Filter based on time for results started after provided time.</p>
    pub fn started_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter based on time for results started after provided time.</p>
    pub fn set_started_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_after = input;
        self
    }
    /// <p>Filter based on time for results started after provided time.</p>
    pub fn get_started_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_after
    }
    /// Consumes the builder and constructs a [`DataQualityRuleRecommendationRunFilter`](crate::types::DataQualityRuleRecommendationRunFilter).
    pub fn build(self) -> crate::types::DataQualityRuleRecommendationRunFilter {
        crate::types::DataQualityRuleRecommendationRunFilter {
            data_source: self.data_source,
            started_before: self.started_before,
            started_after: self.started_after,
        }
    }
}
