// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventBatchingCondition {
    /// <p>Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.</p>
    pub batch_size: i32,
    /// <p>Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.</p>
    pub batch_window: ::std::option::Option<i32>,
}
impl EventBatchingCondition {
    /// <p>Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.</p>
    pub fn batch_size(&self) -> i32 {
        self.batch_size
    }
    /// <p>Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.</p>
    pub fn batch_window(&self) -> ::std::option::Option<i32> {
        self.batch_window
    }
}
impl EventBatchingCondition {
    /// Creates a new builder-style object to manufacture [`EventBatchingCondition`](crate::types::EventBatchingCondition).
    pub fn builder() -> crate::types::builders::EventBatchingConditionBuilder {
        crate::types::builders::EventBatchingConditionBuilder::default()
    }
}

/// A builder for [`EventBatchingCondition`](crate::types::EventBatchingCondition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EventBatchingConditionBuilder {
    pub(crate) batch_size: ::std::option::Option<i32>,
    pub(crate) batch_window: ::std::option::Option<i32>,
}
impl EventBatchingConditionBuilder {
    /// <p>Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.</p>
    /// This field is required.
    pub fn batch_size(mut self, input: i32) -> Self {
        self.batch_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.</p>
    pub fn set_batch_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.batch_size = input;
        self
    }
    /// <p>Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.</p>
    pub fn get_batch_size(&self) -> &::std::option::Option<i32> {
        &self.batch_size
    }
    /// <p>Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.</p>
    pub fn batch_window(mut self, input: i32) -> Self {
        self.batch_window = ::std::option::Option::Some(input);
        self
    }
    /// <p>Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.</p>
    pub fn set_batch_window(mut self, input: ::std::option::Option<i32>) -> Self {
        self.batch_window = input;
        self
    }
    /// <p>Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.</p>
    pub fn get_batch_window(&self) -> &::std::option::Option<i32> {
        &self.batch_window
    }
    /// Consumes the builder and constructs a [`EventBatchingCondition`](crate::types::EventBatchingCondition).
    /// This method will fail if any of the following fields are not set:
    /// - [`batch_size`](crate::types::builders::EventBatchingConditionBuilder::batch_size)
    pub fn build(self) -> ::std::result::Result<crate::types::EventBatchingCondition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EventBatchingCondition {
            batch_size: self.batch_size.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "batch_size",
                    "batch_size was not specified but it is required when building EventBatchingCondition",
                )
            })?,
            batch_window: self.batch_window,
        })
    }
}
