// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Status and error information about the most recent crawl.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LastCrawlInfo {
    /// <p>Status of the last crawl.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::LastCrawlStatus>,
    /// <p>If an error occurred, the error information about the last crawl.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>The log group for the last crawl.</p>
    #[doc(hidden)]
    pub log_group: std::option::Option<std::string::String>,
    /// <p>The log stream for the last crawl.</p>
    #[doc(hidden)]
    pub log_stream: std::option::Option<std::string::String>,
    /// <p>The prefix for a message about this crawl.</p>
    #[doc(hidden)]
    pub message_prefix: std::option::Option<std::string::String>,
    /// <p>The time at which the crawl started.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl LastCrawlInfo {
    /// <p>Status of the last crawl.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::LastCrawlStatus> {
        self.status.as_ref()
    }
    /// <p>If an error occurred, the error information about the last crawl.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The log group for the last crawl.</p>
    pub fn log_group(&self) -> std::option::Option<&str> {
        self.log_group.as_deref()
    }
    /// <p>The log stream for the last crawl.</p>
    pub fn log_stream(&self) -> std::option::Option<&str> {
        self.log_stream.as_deref()
    }
    /// <p>The prefix for a message about this crawl.</p>
    pub fn message_prefix(&self) -> std::option::Option<&str> {
        self.message_prefix.as_deref()
    }
    /// <p>The time at which the crawl started.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
}
impl LastCrawlInfo {
    /// Creates a new builder-style object to manufacture [`LastCrawlInfo`](crate::types::LastCrawlInfo).
    pub fn builder() -> crate::types::builders::LastCrawlInfoBuilder {
        crate::types::builders::LastCrawlInfoBuilder::default()
    }
}

/// A builder for [`LastCrawlInfo`](crate::types::LastCrawlInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LastCrawlInfoBuilder {
    pub(crate) status: std::option::Option<crate::types::LastCrawlStatus>,
    pub(crate) error_message: std::option::Option<std::string::String>,
    pub(crate) log_group: std::option::Option<std::string::String>,
    pub(crate) log_stream: std::option::Option<std::string::String>,
    pub(crate) message_prefix: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl LastCrawlInfoBuilder {
    /// <p>Status of the last crawl.</p>
    pub fn status(mut self, input: crate::types::LastCrawlStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Status of the last crawl.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::LastCrawlStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>If an error occurred, the error information about the last crawl.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>If an error occurred, the error information about the last crawl.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The log group for the last crawl.</p>
    pub fn log_group(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_group = Some(input.into());
        self
    }
    /// <p>The log group for the last crawl.</p>
    pub fn set_log_group(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_group = input;
        self
    }
    /// <p>The log stream for the last crawl.</p>
    pub fn log_stream(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_stream = Some(input.into());
        self
    }
    /// <p>The log stream for the last crawl.</p>
    pub fn set_log_stream(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_stream = input;
        self
    }
    /// <p>The prefix for a message about this crawl.</p>
    pub fn message_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.message_prefix = Some(input.into());
        self
    }
    /// <p>The prefix for a message about this crawl.</p>
    pub fn set_message_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message_prefix = input;
        self
    }
    /// <p>The time at which the crawl started.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The time at which the crawl started.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// Consumes the builder and constructs a [`LastCrawlInfo`](crate::types::LastCrawlInfo).
    pub fn build(self) -> crate::types::LastCrawlInfo {
        crate::types::LastCrawlInfo {
            status: self.status,
            error_message: self.error_message,
            log_group: self.log_group,
            log_stream: self.log_stream,
            message_prefix: self.message_prefix,
            start_time: self.start_time,
        }
    }
}
