// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A policy that specifies update and deletion behaviors for the crawler.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SchemaChangePolicy {
    /// <p>The update behavior when the crawler finds a changed schema.</p>
    #[doc(hidden)]
    pub update_behavior: std::option::Option<crate::types::UpdateBehavior>,
    /// <p>The deletion behavior when the crawler finds a deleted object.</p>
    #[doc(hidden)]
    pub delete_behavior: std::option::Option<crate::types::DeleteBehavior>,
}
impl SchemaChangePolicy {
    /// <p>The update behavior when the crawler finds a changed schema.</p>
    pub fn update_behavior(&self) -> std::option::Option<&crate::types::UpdateBehavior> {
        self.update_behavior.as_ref()
    }
    /// <p>The deletion behavior when the crawler finds a deleted object.</p>
    pub fn delete_behavior(&self) -> std::option::Option<&crate::types::DeleteBehavior> {
        self.delete_behavior.as_ref()
    }
}
impl SchemaChangePolicy {
    /// Creates a new builder-style object to manufacture [`SchemaChangePolicy`](crate::types::SchemaChangePolicy).
    pub fn builder() -> crate::types::builders::SchemaChangePolicyBuilder {
        crate::types::builders::SchemaChangePolicyBuilder::default()
    }
}

/// A builder for [`SchemaChangePolicy`](crate::types::SchemaChangePolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SchemaChangePolicyBuilder {
    pub(crate) update_behavior: std::option::Option<crate::types::UpdateBehavior>,
    pub(crate) delete_behavior: std::option::Option<crate::types::DeleteBehavior>,
}
impl SchemaChangePolicyBuilder {
    /// <p>The update behavior when the crawler finds a changed schema.</p>
    pub fn update_behavior(mut self, input: crate::types::UpdateBehavior) -> Self {
        self.update_behavior = Some(input);
        self
    }
    /// <p>The update behavior when the crawler finds a changed schema.</p>
    pub fn set_update_behavior(
        mut self,
        input: std::option::Option<crate::types::UpdateBehavior>,
    ) -> Self {
        self.update_behavior = input;
        self
    }
    /// <p>The deletion behavior when the crawler finds a deleted object.</p>
    pub fn delete_behavior(mut self, input: crate::types::DeleteBehavior) -> Self {
        self.delete_behavior = Some(input);
        self
    }
    /// <p>The deletion behavior when the crawler finds a deleted object.</p>
    pub fn set_delete_behavior(
        mut self,
        input: std::option::Option<crate::types::DeleteBehavior>,
    ) -> Self {
        self.delete_behavior = input;
        self
    }
    /// Consumes the builder and constructs a [`SchemaChangePolicy`](crate::types::SchemaChangePolicy).
    pub fn build(self) -> crate::types::SchemaChangePolicy {
        crate::types::SchemaChangePolicy {
            update_behavior: self.update_behavior,
            delete_behavior: self.delete_behavior,
        }
    }
}
