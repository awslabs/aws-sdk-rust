// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a specific trigger.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Trigger {
    /// <p>The name of the trigger.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the workflow associated with the trigger.</p>
    #[doc(hidden)]
    pub workflow_name: std::option::Option<std::string::String>,
    /// <p>Reserved for future use.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of trigger that this is.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::TriggerType>,
    /// <p>The current state of the trigger.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::TriggerState>,
    /// <p>A description of this trigger.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>
    #[doc(hidden)]
    pub schedule: std::option::Option<std::string::String>,
    /// <p>The actions initiated by this trigger.</p>
    #[doc(hidden)]
    pub actions: std::option::Option<std::vec::Vec<crate::types::Action>>,
    /// <p>The predicate of this trigger, which defines when it will fire.</p>
    #[doc(hidden)]
    pub predicate: std::option::Option<crate::types::Predicate>,
    /// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
    #[doc(hidden)]
    pub event_batching_condition: std::option::Option<crate::types::EventBatchingCondition>,
}
impl Trigger {
    /// <p>The name of the trigger.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the workflow associated with the trigger.</p>
    pub fn workflow_name(&self) -> std::option::Option<&str> {
        self.workflow_name.as_deref()
    }
    /// <p>Reserved for future use.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of trigger that this is.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::TriggerType> {
        self.r#type.as_ref()
    }
    /// <p>The current state of the trigger.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::TriggerState> {
        self.state.as_ref()
    }
    /// <p>A description of this trigger.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>
    pub fn schedule(&self) -> std::option::Option<&str> {
        self.schedule.as_deref()
    }
    /// <p>The actions initiated by this trigger.</p>
    pub fn actions(&self) -> std::option::Option<&[crate::types::Action]> {
        self.actions.as_deref()
    }
    /// <p>The predicate of this trigger, which defines when it will fire.</p>
    pub fn predicate(&self) -> std::option::Option<&crate::types::Predicate> {
        self.predicate.as_ref()
    }
    /// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
    pub fn event_batching_condition(
        &self,
    ) -> std::option::Option<&crate::types::EventBatchingCondition> {
        self.event_batching_condition.as_ref()
    }
}
impl Trigger {
    /// Creates a new builder-style object to manufacture [`Trigger`](crate::types::Trigger).
    pub fn builder() -> crate::types::builders::TriggerBuilder {
        crate::types::builders::TriggerBuilder::default()
    }
}

/// A builder for [`Trigger`](crate::types::Trigger).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TriggerBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) workflow_name: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::TriggerType>,
    pub(crate) state: std::option::Option<crate::types::TriggerState>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) schedule: std::option::Option<std::string::String>,
    pub(crate) actions: std::option::Option<std::vec::Vec<crate::types::Action>>,
    pub(crate) predicate: std::option::Option<crate::types::Predicate>,
    pub(crate) event_batching_condition: std::option::Option<crate::types::EventBatchingCondition>,
}
impl TriggerBuilder {
    /// <p>The name of the trigger.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the trigger.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the workflow associated with the trigger.</p>
    pub fn workflow_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.workflow_name = Some(input.into());
        self
    }
    /// <p>The name of the workflow associated with the trigger.</p>
    pub fn set_workflow_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workflow_name = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The type of trigger that this is.</p>
    pub fn r#type(mut self, input: crate::types::TriggerType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of trigger that this is.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::TriggerType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The current state of the trigger.</p>
    pub fn state(mut self, input: crate::types::TriggerState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The current state of the trigger.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::TriggerState>) -> Self {
        self.state = input;
        self
    }
    /// <p>A description of this trigger.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of this trigger.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>
    pub fn schedule(mut self, input: impl Into<std::string::String>) -> Self {
        self.schedule = Some(input.into());
        self
    }
    /// <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>
    pub fn set_schedule(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schedule = input;
        self
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions initiated by this trigger.</p>
    pub fn actions(mut self, input: crate::types::Action) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = Some(v);
        self
    }
    /// <p>The actions initiated by this trigger.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Action>>,
    ) -> Self {
        self.actions = input;
        self
    }
    /// <p>The predicate of this trigger, which defines when it will fire.</p>
    pub fn predicate(mut self, input: crate::types::Predicate) -> Self {
        self.predicate = Some(input);
        self
    }
    /// <p>The predicate of this trigger, which defines when it will fire.</p>
    pub fn set_predicate(mut self, input: std::option::Option<crate::types::Predicate>) -> Self {
        self.predicate = input;
        self
    }
    /// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
    pub fn event_batching_condition(mut self, input: crate::types::EventBatchingCondition) -> Self {
        self.event_batching_condition = Some(input);
        self
    }
    /// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
    pub fn set_event_batching_condition(
        mut self,
        input: std::option::Option<crate::types::EventBatchingCondition>,
    ) -> Self {
        self.event_batching_condition = input;
        self
    }
    /// Consumes the builder and constructs a [`Trigger`](crate::types::Trigger).
    pub fn build(self) -> crate::types::Trigger {
        crate::types::Trigger {
            name: self.name,
            workflow_name: self.workflow_name,
            id: self.id,
            r#type: self.r#type,
            state: self.state,
            description: self.description,
            schedule: self.schedule,
            actions: self.actions,
            predicate: self.predicate,
            event_batching_condition: self.event_batching_condition,
        }
    }
}
