// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a transform that identifies, removes or masks PII data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PiiDetection {
    /// <p>The name of the transform node.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The node ID inputs to the transform.</p>
    #[doc(hidden)]
    pub inputs: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Indicates the type of PIIDetection transform. </p>
    #[doc(hidden)]
    pub pii_type: std::option::Option<crate::types::PiiType>,
    /// <p>Indicates the types of entities the PIIDetection transform will identify as PII data. </p>
    /// <p> PII type entities include: PERSON_NAME, DATE, USA_SNN, EMAIL, USA_ITIN, USA_PASSPORT_NUMBER, PHONE_NUMBER, BANK_ACCOUNT, IP_ADDRESS, MAC_ADDRESS, USA_CPT_CODE, USA_HCPCS_CODE, USA_NATIONAL_DRUG_CODE, USA_MEDICARE_BENEFICIARY_IDENTIFIER, USA_HEALTH_INSURANCE_CLAIM_NUMBER,CREDIT_CARD,USA_NATIONAL_PROVIDER_IDENTIFIER,USA_DEA_NUMBER,USA_DRIVING_LICENSE </p>
    #[doc(hidden)]
    pub entity_types_to_detect: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Indicates the output column name that will contain any entity type detected in that row. </p>
    #[doc(hidden)]
    pub output_column_name: std::option::Option<std::string::String>,
    /// <p>Indicates the fraction of the data to sample when scanning for PII entities. </p>
    #[doc(hidden)]
    pub sample_fraction: std::option::Option<f64>,
    /// <p>Indicates the fraction of the data that must be met in order for a column to be identified as PII data. </p>
    #[doc(hidden)]
    pub threshold_fraction: std::option::Option<f64>,
    /// <p>Indicates the value that will replace the detected entity. </p>
    #[doc(hidden)]
    pub mask_value: std::option::Option<std::string::String>,
}
impl PiiDetection {
    /// <p>The name of the transform node.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The node ID inputs to the transform.</p>
    pub fn inputs(&self) -> std::option::Option<&[std::string::String]> {
        self.inputs.as_deref()
    }
    /// <p>Indicates the type of PIIDetection transform. </p>
    pub fn pii_type(&self) -> std::option::Option<&crate::types::PiiType> {
        self.pii_type.as_ref()
    }
    /// <p>Indicates the types of entities the PIIDetection transform will identify as PII data. </p>
    /// <p> PII type entities include: PERSON_NAME, DATE, USA_SNN, EMAIL, USA_ITIN, USA_PASSPORT_NUMBER, PHONE_NUMBER, BANK_ACCOUNT, IP_ADDRESS, MAC_ADDRESS, USA_CPT_CODE, USA_HCPCS_CODE, USA_NATIONAL_DRUG_CODE, USA_MEDICARE_BENEFICIARY_IDENTIFIER, USA_HEALTH_INSURANCE_CLAIM_NUMBER,CREDIT_CARD,USA_NATIONAL_PROVIDER_IDENTIFIER,USA_DEA_NUMBER,USA_DRIVING_LICENSE </p>
    pub fn entity_types_to_detect(&self) -> std::option::Option<&[std::string::String]> {
        self.entity_types_to_detect.as_deref()
    }
    /// <p>Indicates the output column name that will contain any entity type detected in that row. </p>
    pub fn output_column_name(&self) -> std::option::Option<&str> {
        self.output_column_name.as_deref()
    }
    /// <p>Indicates the fraction of the data to sample when scanning for PII entities. </p>
    pub fn sample_fraction(&self) -> std::option::Option<f64> {
        self.sample_fraction
    }
    /// <p>Indicates the fraction of the data that must be met in order for a column to be identified as PII data. </p>
    pub fn threshold_fraction(&self) -> std::option::Option<f64> {
        self.threshold_fraction
    }
    /// <p>Indicates the value that will replace the detected entity. </p>
    pub fn mask_value(&self) -> std::option::Option<&str> {
        self.mask_value.as_deref()
    }
}
impl PiiDetection {
    /// Creates a new builder-style object to manufacture [`PiiDetection`](crate::types::PiiDetection).
    pub fn builder() -> crate::types::builders::PiiDetectionBuilder {
        crate::types::builders::PiiDetectionBuilder::default()
    }
}

/// A builder for [`PiiDetection`](crate::types::PiiDetection).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PiiDetectionBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) inputs: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) pii_type: std::option::Option<crate::types::PiiType>,
    pub(crate) entity_types_to_detect: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) output_column_name: std::option::Option<std::string::String>,
    pub(crate) sample_fraction: std::option::Option<f64>,
    pub(crate) threshold_fraction: std::option::Option<f64>,
    pub(crate) mask_value: std::option::Option<std::string::String>,
}
impl PiiDetectionBuilder {
    /// <p>The name of the transform node.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the transform node.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>The node ID inputs to the transform.</p>
    pub fn inputs(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input.into());
        self.inputs = Some(v);
        self
    }
    /// <p>The node ID inputs to the transform.</p>
    pub fn set_inputs(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inputs = input;
        self
    }
    /// <p>Indicates the type of PIIDetection transform. </p>
    pub fn pii_type(mut self, input: crate::types::PiiType) -> Self {
        self.pii_type = Some(input);
        self
    }
    /// <p>Indicates the type of PIIDetection transform. </p>
    pub fn set_pii_type(mut self, input: std::option::Option<crate::types::PiiType>) -> Self {
        self.pii_type = input;
        self
    }
    /// Appends an item to `entity_types_to_detect`.
    ///
    /// To override the contents of this collection use [`set_entity_types_to_detect`](Self::set_entity_types_to_detect).
    ///
    /// <p>Indicates the types of entities the PIIDetection transform will identify as PII data. </p>
    /// <p> PII type entities include: PERSON_NAME, DATE, USA_SNN, EMAIL, USA_ITIN, USA_PASSPORT_NUMBER, PHONE_NUMBER, BANK_ACCOUNT, IP_ADDRESS, MAC_ADDRESS, USA_CPT_CODE, USA_HCPCS_CODE, USA_NATIONAL_DRUG_CODE, USA_MEDICARE_BENEFICIARY_IDENTIFIER, USA_HEALTH_INSURANCE_CLAIM_NUMBER,CREDIT_CARD,USA_NATIONAL_PROVIDER_IDENTIFIER,USA_DEA_NUMBER,USA_DRIVING_LICENSE </p>
    pub fn entity_types_to_detect(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.entity_types_to_detect.unwrap_or_default();
        v.push(input.into());
        self.entity_types_to_detect = Some(v);
        self
    }
    /// <p>Indicates the types of entities the PIIDetection transform will identify as PII data. </p>
    /// <p> PII type entities include: PERSON_NAME, DATE, USA_SNN, EMAIL, USA_ITIN, USA_PASSPORT_NUMBER, PHONE_NUMBER, BANK_ACCOUNT, IP_ADDRESS, MAC_ADDRESS, USA_CPT_CODE, USA_HCPCS_CODE, USA_NATIONAL_DRUG_CODE, USA_MEDICARE_BENEFICIARY_IDENTIFIER, USA_HEALTH_INSURANCE_CLAIM_NUMBER,CREDIT_CARD,USA_NATIONAL_PROVIDER_IDENTIFIER,USA_DEA_NUMBER,USA_DRIVING_LICENSE </p>
    pub fn set_entity_types_to_detect(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.entity_types_to_detect = input;
        self
    }
    /// <p>Indicates the output column name that will contain any entity type detected in that row. </p>
    pub fn output_column_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.output_column_name = Some(input.into());
        self
    }
    /// <p>Indicates the output column name that will contain any entity type detected in that row. </p>
    pub fn set_output_column_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.output_column_name = input;
        self
    }
    /// <p>Indicates the fraction of the data to sample when scanning for PII entities. </p>
    pub fn sample_fraction(mut self, input: f64) -> Self {
        self.sample_fraction = Some(input);
        self
    }
    /// <p>Indicates the fraction of the data to sample when scanning for PII entities. </p>
    pub fn set_sample_fraction(mut self, input: std::option::Option<f64>) -> Self {
        self.sample_fraction = input;
        self
    }
    /// <p>Indicates the fraction of the data that must be met in order for a column to be identified as PII data. </p>
    pub fn threshold_fraction(mut self, input: f64) -> Self {
        self.threshold_fraction = Some(input);
        self
    }
    /// <p>Indicates the fraction of the data that must be met in order for a column to be identified as PII data. </p>
    pub fn set_threshold_fraction(mut self, input: std::option::Option<f64>) -> Self {
        self.threshold_fraction = input;
        self
    }
    /// <p>Indicates the value that will replace the detected entity. </p>
    pub fn mask_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.mask_value = Some(input.into());
        self
    }
    /// <p>Indicates the value that will replace the detected entity. </p>
    pub fn set_mask_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mask_value = input;
        self
    }
    /// Consumes the builder and constructs a [`PiiDetection`](crate::types::PiiDetection).
    pub fn build(self) -> crate::types::PiiDetection {
        crate::types::PiiDetection {
            name: self.name,
            inputs: self.inputs,
            pii_type: self.pii_type,
            entity_types_to_detect: self.entity_types_to_detect,
            output_column_name: self.output_column_name,
            sample_fraction: self.sample_fraction,
            threshold_fraction: self.threshold_fraction,
            mask_value: self.mask_value,
        }
    }
}
