// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The code execution output in JSON format.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StatementOutputData {
    /// <p>The code execution output in text format.</p>
    #[doc(hidden)]
    pub text_plain: std::option::Option<std::string::String>,
}
impl StatementOutputData {
    /// <p>The code execution output in text format.</p>
    pub fn text_plain(&self) -> std::option::Option<&str> {
        self.text_plain.as_deref()
    }
}
impl StatementOutputData {
    /// Creates a new builder-style object to manufacture [`StatementOutputData`](crate::types::StatementOutputData).
    pub fn builder() -> crate::types::builders::StatementOutputDataBuilder {
        crate::types::builders::StatementOutputDataBuilder::default()
    }
}

/// A builder for [`StatementOutputData`](crate::types::StatementOutputData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StatementOutputDataBuilder {
    pub(crate) text_plain: std::option::Option<std::string::String>,
}
impl StatementOutputDataBuilder {
    /// <p>The code execution output in text format.</p>
    pub fn text_plain(mut self, input: impl Into<std::string::String>) -> Self {
        self.text_plain = Some(input.into());
        self
    }
    /// <p>The code execution output in text format.</p>
    pub fn set_text_plain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.text_plain = input;
        self
    }
    /// Consumes the builder and constructs a [`StatementOutputData`](crate::types::StatementOutputData).
    pub fn build(self) -> crate::types::StatementOutputData {
        crate::types::StatementOutputData {
            text_plain: self.text_plain,
        }
    }
}
