// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a data target that writes to Amazon S3 in Apache Parquet columnar storage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JdbcConnectorTarget {
    /// <p>The name of the data target.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The nodes that are inputs to the data target.</p>
    #[doc(hidden)]
    pub inputs: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The name of the connection that is associated with the connector.</p>
    #[doc(hidden)]
    pub connection_name: std::option::Option<std::string::String>,
    /// <p>The name of the table in the data target.</p>
    #[doc(hidden)]
    pub connection_table: std::option::Option<std::string::String>,
    /// <p>The name of a connector that will be used.</p>
    #[doc(hidden)]
    pub connector_name: std::option::Option<std::string::String>,
    /// <p>The type of connection, such as marketplace.jdbc or custom.jdbc, designating a connection to a JDBC data target.</p>
    #[doc(hidden)]
    pub connection_type: std::option::Option<std::string::String>,
    /// <p>Additional connection options for the connector.</p>
    #[doc(hidden)]
    pub additional_options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Specifies the data schema for the JDBC target.</p>
    #[doc(hidden)]
    pub output_schemas: std::option::Option<std::vec::Vec<crate::types::GlueSchema>>,
}
impl JdbcConnectorTarget {
    /// <p>The name of the data target.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The nodes that are inputs to the data target.</p>
    pub fn inputs(&self) -> std::option::Option<&[std::string::String]> {
        self.inputs.as_deref()
    }
    /// <p>The name of the connection that is associated with the connector.</p>
    pub fn connection_name(&self) -> std::option::Option<&str> {
        self.connection_name.as_deref()
    }
    /// <p>The name of the table in the data target.</p>
    pub fn connection_table(&self) -> std::option::Option<&str> {
        self.connection_table.as_deref()
    }
    /// <p>The name of a connector that will be used.</p>
    pub fn connector_name(&self) -> std::option::Option<&str> {
        self.connector_name.as_deref()
    }
    /// <p>The type of connection, such as marketplace.jdbc or custom.jdbc, designating a connection to a JDBC data target.</p>
    pub fn connection_type(&self) -> std::option::Option<&str> {
        self.connection_type.as_deref()
    }
    /// <p>Additional connection options for the connector.</p>
    pub fn additional_options(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.additional_options.as_ref()
    }
    /// <p>Specifies the data schema for the JDBC target.</p>
    pub fn output_schemas(&self) -> std::option::Option<&[crate::types::GlueSchema]> {
        self.output_schemas.as_deref()
    }
}
impl JdbcConnectorTarget {
    /// Creates a new builder-style object to manufacture [`JdbcConnectorTarget`](crate::types::JdbcConnectorTarget).
    pub fn builder() -> crate::types::builders::JdbcConnectorTargetBuilder {
        crate::types::builders::JdbcConnectorTargetBuilder::default()
    }
}

/// A builder for [`JdbcConnectorTarget`](crate::types::JdbcConnectorTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JdbcConnectorTargetBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) inputs: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) connection_name: std::option::Option<std::string::String>,
    pub(crate) connection_table: std::option::Option<std::string::String>,
    pub(crate) connector_name: std::option::Option<std::string::String>,
    pub(crate) connection_type: std::option::Option<std::string::String>,
    pub(crate) additional_options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) output_schemas: std::option::Option<std::vec::Vec<crate::types::GlueSchema>>,
}
impl JdbcConnectorTargetBuilder {
    /// <p>The name of the data target.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the data target.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>The nodes that are inputs to the data target.</p>
    pub fn inputs(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input.into());
        self.inputs = Some(v);
        self
    }
    /// <p>The nodes that are inputs to the data target.</p>
    pub fn set_inputs(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inputs = input;
        self
    }
    /// <p>The name of the connection that is associated with the connector.</p>
    pub fn connection_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_name = Some(input.into());
        self
    }
    /// <p>The name of the connection that is associated with the connector.</p>
    pub fn set_connection_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_name = input;
        self
    }
    /// <p>The name of the table in the data target.</p>
    pub fn connection_table(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_table = Some(input.into());
        self
    }
    /// <p>The name of the table in the data target.</p>
    pub fn set_connection_table(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_table = input;
        self
    }
    /// <p>The name of a connector that will be used.</p>
    pub fn connector_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.connector_name = Some(input.into());
        self
    }
    /// <p>The name of a connector that will be used.</p>
    pub fn set_connector_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connector_name = input;
        self
    }
    /// <p>The type of connection, such as marketplace.jdbc or custom.jdbc, designating a connection to a JDBC data target.</p>
    pub fn connection_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_type = Some(input.into());
        self
    }
    /// <p>The type of connection, such as marketplace.jdbc or custom.jdbc, designating a connection to a JDBC data target.</p>
    pub fn set_connection_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_type = input;
        self
    }
    /// Adds a key-value pair to `additional_options`.
    ///
    /// To override the contents of this collection use [`set_additional_options`](Self::set_additional_options).
    ///
    /// <p>Additional connection options for the connector.</p>
    pub fn additional_options(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.additional_options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.additional_options = Some(hash_map);
        self
    }
    /// <p>Additional connection options for the connector.</p>
    pub fn set_additional_options(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.additional_options = input;
        self
    }
    /// Appends an item to `output_schemas`.
    ///
    /// To override the contents of this collection use [`set_output_schemas`](Self::set_output_schemas).
    ///
    /// <p>Specifies the data schema for the JDBC target.</p>
    pub fn output_schemas(mut self, input: crate::types::GlueSchema) -> Self {
        let mut v = self.output_schemas.unwrap_or_default();
        v.push(input);
        self.output_schemas = Some(v);
        self
    }
    /// <p>Specifies the data schema for the JDBC target.</p>
    pub fn set_output_schemas(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GlueSchema>>,
    ) -> Self {
        self.output_schemas = input;
        self
    }
    /// Consumes the builder and constructs a [`JdbcConnectorTarget`](crate::types::JdbcConnectorTarget).
    pub fn build(self) -> crate::types::JdbcConnectorTarget {
        crate::types::JdbcConnectorTarget {
            name: self.name,
            inputs: self.inputs,
            connection_name: self.connection_name,
            connection_table: self.connection_table,
            connector_name: self.connector_name,
            connection_type: self.connection_type,
            additional_options: self.additional_options,
            output_schemas: self.output_schemas,
        }
    }
}
