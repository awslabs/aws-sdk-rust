// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a transform that writes samples of the data to an Amazon S3 bucket.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Spigot {
    /// <p>The name of the transform node.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The data inputs identified by their node names.</p>
    #[doc(hidden)]
    pub inputs: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A path in Amazon S3 where the transform will write a subset of records from the dataset to a JSON file in an Amazon S3 bucket.</p>
    #[doc(hidden)]
    pub path: std::option::Option<std::string::String>,
    /// <p>Specifies a number of records to write starting from the beginning of the dataset.</p>
    #[doc(hidden)]
    pub topk: std::option::Option<i32>,
    /// <p>The probability (a decimal value with a maximum value of 1) of picking any given record. A value of 1 indicates that each row read from the dataset should be included in the sample output.</p>
    #[doc(hidden)]
    pub prob: std::option::Option<f64>,
}
impl Spigot {
    /// <p>The name of the transform node.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The data inputs identified by their node names.</p>
    pub fn inputs(&self) -> std::option::Option<&[std::string::String]> {
        self.inputs.as_deref()
    }
    /// <p>A path in Amazon S3 where the transform will write a subset of records from the dataset to a JSON file in an Amazon S3 bucket.</p>
    pub fn path(&self) -> std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>Specifies a number of records to write starting from the beginning of the dataset.</p>
    pub fn topk(&self) -> std::option::Option<i32> {
        self.topk
    }
    /// <p>The probability (a decimal value with a maximum value of 1) of picking any given record. A value of 1 indicates that each row read from the dataset should be included in the sample output.</p>
    pub fn prob(&self) -> std::option::Option<f64> {
        self.prob
    }
}
impl Spigot {
    /// Creates a new builder-style object to manufacture [`Spigot`](crate::types::Spigot).
    pub fn builder() -> crate::types::builders::SpigotBuilder {
        crate::types::builders::SpigotBuilder::default()
    }
}

/// A builder for [`Spigot`](crate::types::Spigot).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SpigotBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) inputs: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) path: std::option::Option<std::string::String>,
    pub(crate) topk: std::option::Option<i32>,
    pub(crate) prob: std::option::Option<f64>,
}
impl SpigotBuilder {
    /// <p>The name of the transform node.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the transform node.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>The data inputs identified by their node names.</p>
    pub fn inputs(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input.into());
        self.inputs = Some(v);
        self
    }
    /// <p>The data inputs identified by their node names.</p>
    pub fn set_inputs(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inputs = input;
        self
    }
    /// <p>A path in Amazon S3 where the transform will write a subset of records from the dataset to a JSON file in an Amazon S3 bucket.</p>
    pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
        self.path = Some(input.into());
        self
    }
    /// <p>A path in Amazon S3 where the transform will write a subset of records from the dataset to a JSON file in an Amazon S3 bucket.</p>
    pub fn set_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>Specifies a number of records to write starting from the beginning of the dataset.</p>
    pub fn topk(mut self, input: i32) -> Self {
        self.topk = Some(input);
        self
    }
    /// <p>Specifies a number of records to write starting from the beginning of the dataset.</p>
    pub fn set_topk(mut self, input: std::option::Option<i32>) -> Self {
        self.topk = input;
        self
    }
    /// <p>The probability (a decimal value with a maximum value of 1) of picking any given record. A value of 1 indicates that each row read from the dataset should be included in the sample output.</p>
    pub fn prob(mut self, input: f64) -> Self {
        self.prob = Some(input);
        self
    }
    /// <p>The probability (a decimal value with a maximum value of 1) of picking any given record. A value of 1 indicates that each row read from the dataset should be included in the sample output.</p>
    pub fn set_prob(mut self, input: std::option::Option<f64>) -> Self {
        self.prob = input;
        self
    }
    /// Consumes the builder and constructs a [`Spigot`](crate::types::Spigot).
    pub fn build(self) -> crate::types::Spigot {
        crate::types::Spigot {
            name: self.name,
            inputs: self.inputs,
            path: self.path,
            topk: self.topk,
            prob: self.prob,
        }
    }
}
