// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure used to create or update a user-defined function.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserDefinedFunctionInput {
    /// <p>The name of the function.</p>
    #[doc(hidden)]
    pub function_name: std::option::Option<std::string::String>,
    /// <p>The Java class that contains the function code.</p>
    #[doc(hidden)]
    pub class_name: std::option::Option<std::string::String>,
    /// <p>The owner of the function.</p>
    #[doc(hidden)]
    pub owner_name: std::option::Option<std::string::String>,
    /// <p>The owner type.</p>
    #[doc(hidden)]
    pub owner_type: std::option::Option<crate::types::PrincipalType>,
    /// <p>The resource URIs for the function.</p>
    #[doc(hidden)]
    pub resource_uris: std::option::Option<std::vec::Vec<crate::types::ResourceUri>>,
}
impl UserDefinedFunctionInput {
    /// <p>The name of the function.</p>
    pub fn function_name(&self) -> std::option::Option<&str> {
        self.function_name.as_deref()
    }
    /// <p>The Java class that contains the function code.</p>
    pub fn class_name(&self) -> std::option::Option<&str> {
        self.class_name.as_deref()
    }
    /// <p>The owner of the function.</p>
    pub fn owner_name(&self) -> std::option::Option<&str> {
        self.owner_name.as_deref()
    }
    /// <p>The owner type.</p>
    pub fn owner_type(&self) -> std::option::Option<&crate::types::PrincipalType> {
        self.owner_type.as_ref()
    }
    /// <p>The resource URIs for the function.</p>
    pub fn resource_uris(&self) -> std::option::Option<&[crate::types::ResourceUri]> {
        self.resource_uris.as_deref()
    }
}
impl UserDefinedFunctionInput {
    /// Creates a new builder-style object to manufacture [`UserDefinedFunctionInput`](crate::types::UserDefinedFunctionInput).
    pub fn builder() -> crate::types::builders::UserDefinedFunctionInputBuilder {
        crate::types::builders::UserDefinedFunctionInputBuilder::default()
    }
}

/// A builder for [`UserDefinedFunctionInput`](crate::types::UserDefinedFunctionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserDefinedFunctionInputBuilder {
    pub(crate) function_name: std::option::Option<std::string::String>,
    pub(crate) class_name: std::option::Option<std::string::String>,
    pub(crate) owner_name: std::option::Option<std::string::String>,
    pub(crate) owner_type: std::option::Option<crate::types::PrincipalType>,
    pub(crate) resource_uris: std::option::Option<std::vec::Vec<crate::types::ResourceUri>>,
}
impl UserDefinedFunctionInputBuilder {
    /// <p>The name of the function.</p>
    pub fn function_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.function_name = Some(input.into());
        self
    }
    /// <p>The name of the function.</p>
    pub fn set_function_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.function_name = input;
        self
    }
    /// <p>The Java class that contains the function code.</p>
    pub fn class_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.class_name = Some(input.into());
        self
    }
    /// <p>The Java class that contains the function code.</p>
    pub fn set_class_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.class_name = input;
        self
    }
    /// <p>The owner of the function.</p>
    pub fn owner_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_name = Some(input.into());
        self
    }
    /// <p>The owner of the function.</p>
    pub fn set_owner_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_name = input;
        self
    }
    /// <p>The owner type.</p>
    pub fn owner_type(mut self, input: crate::types::PrincipalType) -> Self {
        self.owner_type = Some(input);
        self
    }
    /// <p>The owner type.</p>
    pub fn set_owner_type(
        mut self,
        input: std::option::Option<crate::types::PrincipalType>,
    ) -> Self {
        self.owner_type = input;
        self
    }
    /// Appends an item to `resource_uris`.
    ///
    /// To override the contents of this collection use [`set_resource_uris`](Self::set_resource_uris).
    ///
    /// <p>The resource URIs for the function.</p>
    pub fn resource_uris(mut self, input: crate::types::ResourceUri) -> Self {
        let mut v = self.resource_uris.unwrap_or_default();
        v.push(input);
        self.resource_uris = Some(v);
        self
    }
    /// <p>The resource URIs for the function.</p>
    pub fn set_resource_uris(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceUri>>,
    ) -> Self {
        self.resource_uris = input;
        self
    }
    /// Consumes the builder and constructs a [`UserDefinedFunctionInput`](crate::types::UserDefinedFunctionInput).
    pub fn build(self) -> crate::types::UserDefinedFunctionInput {
        crate::types::UserDefinedFunctionInput {
            function_name: self.function_name,
            class_name: self.class_name,
            owner_name: self.owner_name,
            owner_type: self.owner_type,
            resource_uris: self.resource_uris,
        }
    }
}
