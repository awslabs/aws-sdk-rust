// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options to configure an upsert operation when writing to a Redshift target .</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpsertRedshiftTargetOptions {
    /// <p>The physical location of the Redshift table.</p>
    #[doc(hidden)]
    pub table_location: std::option::Option<std::string::String>,
    /// <p>The name of the connection to use to write to Redshift.</p>
    #[doc(hidden)]
    pub connection_name: std::option::Option<std::string::String>,
    /// <p>The keys used to determine whether to perform an update or insert.</p>
    #[doc(hidden)]
    pub upsert_keys: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UpsertRedshiftTargetOptions {
    /// <p>The physical location of the Redshift table.</p>
    pub fn table_location(&self) -> std::option::Option<&str> {
        self.table_location.as_deref()
    }
    /// <p>The name of the connection to use to write to Redshift.</p>
    pub fn connection_name(&self) -> std::option::Option<&str> {
        self.connection_name.as_deref()
    }
    /// <p>The keys used to determine whether to perform an update or insert.</p>
    pub fn upsert_keys(&self) -> std::option::Option<&[std::string::String]> {
        self.upsert_keys.as_deref()
    }
}
impl UpsertRedshiftTargetOptions {
    /// Creates a new builder-style object to manufacture [`UpsertRedshiftTargetOptions`](crate::types::UpsertRedshiftTargetOptions).
    pub fn builder() -> crate::types::builders::UpsertRedshiftTargetOptionsBuilder {
        crate::types::builders::UpsertRedshiftTargetOptionsBuilder::default()
    }
}

/// A builder for [`UpsertRedshiftTargetOptions`](crate::types::UpsertRedshiftTargetOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpsertRedshiftTargetOptionsBuilder {
    pub(crate) table_location: std::option::Option<std::string::String>,
    pub(crate) connection_name: std::option::Option<std::string::String>,
    pub(crate) upsert_keys: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UpsertRedshiftTargetOptionsBuilder {
    /// <p>The physical location of the Redshift table.</p>
    pub fn table_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_location = Some(input.into());
        self
    }
    /// <p>The physical location of the Redshift table.</p>
    pub fn set_table_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_location = input;
        self
    }
    /// <p>The name of the connection to use to write to Redshift.</p>
    pub fn connection_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_name = Some(input.into());
        self
    }
    /// <p>The name of the connection to use to write to Redshift.</p>
    pub fn set_connection_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_name = input;
        self
    }
    /// Appends an item to `upsert_keys`.
    ///
    /// To override the contents of this collection use [`set_upsert_keys`](Self::set_upsert_keys).
    ///
    /// <p>The keys used to determine whether to perform an update or insert.</p>
    pub fn upsert_keys(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.upsert_keys.unwrap_or_default();
        v.push(input.into());
        self.upsert_keys = Some(v);
        self
    }
    /// <p>The keys used to determine whether to perform an update or insert.</p>
    pub fn set_upsert_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.upsert_keys = input;
        self
    }
    /// Consumes the builder and constructs a [`UpsertRedshiftTargetOptions`](crate::types::UpsertRedshiftTargetOptions).
    pub fn build(self) -> crate::types::UpsertRedshiftTargetOptions {
        crate::types::UpsertRedshiftTargetOptions {
            table_location: self.table_location,
            connection_name: self.connection_name,
            upsert_keys: self.upsert_keys,
        }
    }
}
