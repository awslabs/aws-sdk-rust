// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a property predicate.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PropertyPredicate {
    /// <p>The key of the property.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The value of the property.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The comparator used to compare this property to others.</p>
    #[doc(hidden)]
    pub comparator: std::option::Option<crate::types::Comparator>,
}
impl PropertyPredicate {
    /// <p>The key of the property.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The value of the property.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The comparator used to compare this property to others.</p>
    pub fn comparator(&self) -> std::option::Option<&crate::types::Comparator> {
        self.comparator.as_ref()
    }
}
impl PropertyPredicate {
    /// Creates a new builder-style object to manufacture [`PropertyPredicate`](crate::types::PropertyPredicate).
    pub fn builder() -> crate::types::builders::PropertyPredicateBuilder {
        crate::types::builders::PropertyPredicateBuilder::default()
    }
}

/// A builder for [`PropertyPredicate`](crate::types::PropertyPredicate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PropertyPredicateBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) comparator: std::option::Option<crate::types::Comparator>,
}
impl PropertyPredicateBuilder {
    /// <p>The key of the property.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The key of the property.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The value of the property.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value of the property.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The comparator used to compare this property to others.</p>
    pub fn comparator(mut self, input: crate::types::Comparator) -> Self {
        self.comparator = Some(input);
        self
    }
    /// <p>The comparator used to compare this property to others.</p>
    pub fn set_comparator(mut self, input: std::option::Option<crate::types::Comparator>) -> Self {
        self.comparator = input;
        self
    }
    /// Consumes the builder and constructs a [`PropertyPredicate`](crate::types::PropertyPredicate).
    pub fn build(self) -> crate::types::PropertyPredicate {
        crate::types::PropertyPredicate {
            key: self.key,
            value: self.value,
            comparator: self.comparator,
        }
    }
}
