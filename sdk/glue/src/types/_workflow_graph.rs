// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A workflow graph represents the complete workflow containing all the Glue components present in the workflow and all the directed connections between them.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkflowGraph {
    /// <p>A list of the the Glue components belong to the workflow represented as nodes.</p>
    #[doc(hidden)]
    pub nodes: std::option::Option<std::vec::Vec<crate::types::Node>>,
    /// <p>A list of all the directed connections between the nodes belonging to the workflow.</p>
    #[doc(hidden)]
    pub edges: std::option::Option<std::vec::Vec<crate::types::Edge>>,
}
impl WorkflowGraph {
    /// <p>A list of the the Glue components belong to the workflow represented as nodes.</p>
    pub fn nodes(&self) -> std::option::Option<&[crate::types::Node]> {
        self.nodes.as_deref()
    }
    /// <p>A list of all the directed connections between the nodes belonging to the workflow.</p>
    pub fn edges(&self) -> std::option::Option<&[crate::types::Edge]> {
        self.edges.as_deref()
    }
}
impl WorkflowGraph {
    /// Creates a new builder-style object to manufacture [`WorkflowGraph`](crate::types::WorkflowGraph).
    pub fn builder() -> crate::types::builders::WorkflowGraphBuilder {
        crate::types::builders::WorkflowGraphBuilder::default()
    }
}

/// A builder for [`WorkflowGraph`](crate::types::WorkflowGraph).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorkflowGraphBuilder {
    pub(crate) nodes: std::option::Option<std::vec::Vec<crate::types::Node>>,
    pub(crate) edges: std::option::Option<std::vec::Vec<crate::types::Edge>>,
}
impl WorkflowGraphBuilder {
    /// Appends an item to `nodes`.
    ///
    /// To override the contents of this collection use [`set_nodes`](Self::set_nodes).
    ///
    /// <p>A list of the the Glue components belong to the workflow represented as nodes.</p>
    pub fn nodes(mut self, input: crate::types::Node) -> Self {
        let mut v = self.nodes.unwrap_or_default();
        v.push(input);
        self.nodes = Some(v);
        self
    }
    /// <p>A list of the the Glue components belong to the workflow represented as nodes.</p>
    pub fn set_nodes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Node>>,
    ) -> Self {
        self.nodes = input;
        self
    }
    /// Appends an item to `edges`.
    ///
    /// To override the contents of this collection use [`set_edges`](Self::set_edges).
    ///
    /// <p>A list of all the directed connections between the nodes belonging to the workflow.</p>
    pub fn edges(mut self, input: crate::types::Edge) -> Self {
        let mut v = self.edges.unwrap_or_default();
        v.push(input);
        self.edges = Some(v);
        self
    }
    /// <p>A list of all the directed connections between the nodes belonging to the workflow.</p>
    pub fn set_edges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Edge>>,
    ) -> Self {
        self.edges = input;
        self
    }
    /// Consumes the builder and constructs a [`WorkflowGraph`](crate::types::WorkflowGraph).
    pub fn build(self) -> crate::types::WorkflowGraph {
        crate::types::WorkflowGraph {
            nodes: self.nodes,
            edges: self.edges,
        }
    }
}
