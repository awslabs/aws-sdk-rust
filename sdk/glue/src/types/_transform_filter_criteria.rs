// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The criteria used to filter the machine learning transforms.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TransformFilterCriteria {
    /// <p>A unique transform name that is used to filter the machine learning transforms.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of machine learning transform that is used to filter the machine learning transforms.</p>
    #[doc(hidden)]
    pub transform_type: std::option::Option<crate::types::TransformType>,
    /// <p>Filters the list of machine learning transforms by the last known status of the transforms (to indicate whether a transform can be used or not). One of "NOT_READY", "READY", or "DELETING".</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::TransformStatusType>,
    /// <p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions">Glue Versions</a> in the developer guide.</p>
    #[doc(hidden)]
    pub glue_version: std::option::Option<std::string::String>,
    /// <p>The time and date before which the transforms were created.</p>
    #[doc(hidden)]
    pub created_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time and date after which the transforms were created.</p>
    #[doc(hidden)]
    pub created_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Filter on transforms last modified before this date.</p>
    #[doc(hidden)]
    pub last_modified_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Filter on transforms last modified after this date.</p>
    #[doc(hidden)]
    pub last_modified_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Filters on datasets with a specific schema. The <code>Map
    /// <column, type></column,></code> object is an array of key-value pairs representing the schema this transform accepts, where <code>Column</code> is the name of a column, and <code>Type</code> is the type of the data such as an integer or string. Has an upper bound of 100 columns.</p>
    #[doc(hidden)]
    pub schema: std::option::Option<std::vec::Vec<crate::types::SchemaColumn>>,
}
impl TransformFilterCriteria {
    /// <p>A unique transform name that is used to filter the machine learning transforms.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of machine learning transform that is used to filter the machine learning transforms.</p>
    pub fn transform_type(&self) -> std::option::Option<&crate::types::TransformType> {
        self.transform_type.as_ref()
    }
    /// <p>Filters the list of machine learning transforms by the last known status of the transforms (to indicate whether a transform can be used or not). One of "NOT_READY", "READY", or "DELETING".</p>
    pub fn status(&self) -> std::option::Option<&crate::types::TransformStatusType> {
        self.status.as_ref()
    }
    /// <p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions">Glue Versions</a> in the developer guide.</p>
    pub fn glue_version(&self) -> std::option::Option<&str> {
        self.glue_version.as_deref()
    }
    /// <p>The time and date before which the transforms were created.</p>
    pub fn created_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_before.as_ref()
    }
    /// <p>The time and date after which the transforms were created.</p>
    pub fn created_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_after.as_ref()
    }
    /// <p>Filter on transforms last modified before this date.</p>
    pub fn last_modified_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_before.as_ref()
    }
    /// <p>Filter on transforms last modified after this date.</p>
    pub fn last_modified_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_after.as_ref()
    }
    /// <p>Filters on datasets with a specific schema. The <code>Map
    /// <column, type></column,></code> object is an array of key-value pairs representing the schema this transform accepts, where <code>Column</code> is the name of a column, and <code>Type</code> is the type of the data such as an integer or string. Has an upper bound of 100 columns.</p>
    pub fn schema(&self) -> std::option::Option<&[crate::types::SchemaColumn]> {
        self.schema.as_deref()
    }
}
impl TransformFilterCriteria {
    /// Creates a new builder-style object to manufacture [`TransformFilterCriteria`](crate::types::TransformFilterCriteria).
    pub fn builder() -> crate::types::builders::TransformFilterCriteriaBuilder {
        crate::types::builders::TransformFilterCriteriaBuilder::default()
    }
}

/// A builder for [`TransformFilterCriteria`](crate::types::TransformFilterCriteria).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TransformFilterCriteriaBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) transform_type: std::option::Option<crate::types::TransformType>,
    pub(crate) status: std::option::Option<crate::types::TransformStatusType>,
    pub(crate) glue_version: std::option::Option<std::string::String>,
    pub(crate) created_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) schema: std::option::Option<std::vec::Vec<crate::types::SchemaColumn>>,
}
impl TransformFilterCriteriaBuilder {
    /// <p>A unique transform name that is used to filter the machine learning transforms.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A unique transform name that is used to filter the machine learning transforms.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of machine learning transform that is used to filter the machine learning transforms.</p>
    pub fn transform_type(mut self, input: crate::types::TransformType) -> Self {
        self.transform_type = Some(input);
        self
    }
    /// <p>The type of machine learning transform that is used to filter the machine learning transforms.</p>
    pub fn set_transform_type(
        mut self,
        input: std::option::Option<crate::types::TransformType>,
    ) -> Self {
        self.transform_type = input;
        self
    }
    /// <p>Filters the list of machine learning transforms by the last known status of the transforms (to indicate whether a transform can be used or not). One of "NOT_READY", "READY", or "DELETING".</p>
    pub fn status(mut self, input: crate::types::TransformStatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Filters the list of machine learning transforms by the last known status of the transforms (to indicate whether a transform can be used or not). One of "NOT_READY", "READY", or "DELETING".</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::TransformStatusType>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions">Glue Versions</a> in the developer guide.</p>
    pub fn glue_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.glue_version = Some(input.into());
        self
    }
    /// <p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions">Glue Versions</a> in the developer guide.</p>
    pub fn set_glue_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.glue_version = input;
        self
    }
    /// <p>The time and date before which the transforms were created.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_before = Some(input);
        self
    }
    /// <p>The time and date before which the transforms were created.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_before = input;
        self
    }
    /// <p>The time and date after which the transforms were created.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_after = Some(input);
        self
    }
    /// <p>The time and date after which the transforms were created.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_after = input;
        self
    }
    /// <p>Filter on transforms last modified before this date.</p>
    pub fn last_modified_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_before = Some(input);
        self
    }
    /// <p>Filter on transforms last modified before this date.</p>
    pub fn set_last_modified_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_before = input;
        self
    }
    /// <p>Filter on transforms last modified after this date.</p>
    pub fn last_modified_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_after = Some(input);
        self
    }
    /// <p>Filter on transforms last modified after this date.</p>
    pub fn set_last_modified_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_after = input;
        self
    }
    /// Appends an item to `schema`.
    ///
    /// To override the contents of this collection use [`set_schema`](Self::set_schema).
    ///
    /// <p>Filters on datasets with a specific schema. The <code>Map
    /// <column, type></column,></code> object is an array of key-value pairs representing the schema this transform accepts, where <code>Column</code> is the name of a column, and <code>Type</code> is the type of the data such as an integer or string. Has an upper bound of 100 columns.</p>
    pub fn schema(mut self, input: crate::types::SchemaColumn) -> Self {
        let mut v = self.schema.unwrap_or_default();
        v.push(input);
        self.schema = Some(v);
        self
    }
    /// <p>Filters on datasets with a specific schema. The <code>Map
    /// <column, type></column,></code> object is an array of key-value pairs representing the schema this transform accepts, where <code>Column</code> is the name of a column, and <code>Type</code> is the type of the data such as an integer or string. Has an upper bound of 100 columns.</p>
    pub fn set_schema(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SchemaColumn>>,
    ) -> Self {
        self.schema = input;
        self
    }
    /// Consumes the builder and constructs a [`TransformFilterCriteria`](crate::types::TransformFilterCriteria).
    pub fn build(self) -> crate::types::TransformFilterCriteria {
        crate::types::TransformFilterCriteria {
            name: self.name,
            transform_type: self.transform_type,
            status: self.status,
            glue_version: self.glue_version,
            created_before: self.created_before,
            created_after: self.created_after,
            last_modified_before: self.last_modified_before,
            last_modified_after: self.last_modified_after,
            schema: self.schema,
        }
    }
}
