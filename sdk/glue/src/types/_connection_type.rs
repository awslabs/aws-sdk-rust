// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ConnectionType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let connectiontype = unimplemented!();
/// match connectiontype {
///     ConnectionType::Adobeanalytics => { /* ... */ },
///     ConnectionType::Asana => { /* ... */ },
///     ConnectionType::Azurecosmos => { /* ... */ },
///     ConnectionType::Azuresql => { /* ... */ },
///     ConnectionType::Bigquery => { /* ... */ },
///     ConnectionType::Blackbaud => { /* ... */ },
///     ConnectionType::Blackbaudraiseredgenxt => { /* ... */ },
///     ConnectionType::Circleci => { /* ... */ },
///     ConnectionType::Clouderahive => { /* ... */ },
///     ConnectionType::Clouderaimpala => { /* ... */ },
///     ConnectionType::Cloudwatch => { /* ... */ },
///     ConnectionType::Cloudwatchmetrics => { /* ... */ },
///     ConnectionType::Cmdb => { /* ... */ },
///     ConnectionType::Custom => { /* ... */ },
///     ConnectionType::Datadog => { /* ... */ },
///     ConnectionType::Datalakegen2 => { /* ... */ },
///     ConnectionType::Db2 => { /* ... */ },
///     ConnectionType::Db2As400 => { /* ... */ },
///     ConnectionType::Documentdb => { /* ... */ },
///     ConnectionType::Docusignmonitor => { /* ... */ },
///     ConnectionType::Domo => { /* ... */ },
///     ConnectionType::Dynamodb => { /* ... */ },
///     ConnectionType::Dynatrace => { /* ... */ },
///     ConnectionType::Facebookads => { /* ... */ },
///     ConnectionType::Facebookpageinsights => { /* ... */ },
///     ConnectionType::Freshdesk => { /* ... */ },
///     ConnectionType::Freshsales => { /* ... */ },
///     ConnectionType::Gitlab => { /* ... */ },
///     ConnectionType::Googleads => { /* ... */ },
///     ConnectionType::Googleanalytics4 => { /* ... */ },
///     ConnectionType::Googlecloudstorage => { /* ... */ },
///     ConnectionType::Googlesearchconsole => { /* ... */ },
///     ConnectionType::Googlesheets => { /* ... */ },
///     ConnectionType::Hbase => { /* ... */ },
///     ConnectionType::Hubspot => { /* ... */ },
///     ConnectionType::Instagramads => { /* ... */ },
///     ConnectionType::Intercom => { /* ... */ },
///     ConnectionType::Jdbc => { /* ... */ },
///     ConnectionType::Jiracloud => { /* ... */ },
///     ConnectionType::Kafka => { /* ... */ },
///     ConnectionType::Kustomer => { /* ... */ },
///     ConnectionType::Linkedin => { /* ... */ },
///     ConnectionType::Mailchimp => { /* ... */ },
///     ConnectionType::Marketo => { /* ... */ },
///     ConnectionType::Marketplace => { /* ... */ },
///     ConnectionType::Microsoftdynamic365Financeandops => { /* ... */ },
///     ConnectionType::Microsoftdynamics365Crm => { /* ... */ },
///     ConnectionType::Microsoftteams => { /* ... */ },
///     ConnectionType::Mixpanel => { /* ... */ },
///     ConnectionType::Monday => { /* ... */ },
///     ConnectionType::Mongodb => { /* ... */ },
///     ConnectionType::Mysql => { /* ... */ },
///     ConnectionType::Netsuiteerp => { /* ... */ },
///     ConnectionType::Network => { /* ... */ },
///     ConnectionType::Okta => { /* ... */ },
///     ConnectionType::Opensearch => { /* ... */ },
///     ConnectionType::Oracle => { /* ... */ },
///     ConnectionType::Paypal => { /* ... */ },
///     ConnectionType::Pendo => { /* ... */ },
///     ConnectionType::Pipedive => { /* ... */ },
///     ConnectionType::Pipedrive => { /* ... */ },
///     ConnectionType::Postgresql => { /* ... */ },
///     ConnectionType::Productboard => { /* ... */ },
///     ConnectionType::Quickbooks => { /* ... */ },
///     ConnectionType::Salesforce => { /* ... */ },
///     ConnectionType::Salesforcecommercecloud => { /* ... */ },
///     ConnectionType::Salesforcemarketingcloud => { /* ... */ },
///     ConnectionType::Salesforcepardot => { /* ... */ },
///     ConnectionType::Sapconcur => { /* ... */ },
///     ConnectionType::Saphana => { /* ... */ },
///     ConnectionType::Sapodata => { /* ... */ },
///     ConnectionType::Sendgrid => { /* ... */ },
///     ConnectionType::Servicenow => { /* ... */ },
///     ConnectionType::Sftp => { /* ... */ },
///     ConnectionType::Slack => { /* ... */ },
///     ConnectionType::Smartsheet => { /* ... */ },
///     ConnectionType::Snapchatads => { /* ... */ },
///     ConnectionType::Sqlserver => { /* ... */ },
///     ConnectionType::Stripe => { /* ... */ },
///     ConnectionType::Synapse => { /* ... */ },
///     ConnectionType::Teradata => { /* ... */ },
///     ConnectionType::Teradatanos => { /* ... */ },
///     ConnectionType::Timestream => { /* ... */ },
///     ConnectionType::Tpcds => { /* ... */ },
///     ConnectionType::Twilio => { /* ... */ },
///     ConnectionType::Vertica => { /* ... */ },
///     ConnectionType::ViewValidationAthena => { /* ... */ },
///     ConnectionType::ViewValidationRedshift => { /* ... */ },
///     ConnectionType::Woocommerce => { /* ... */ },
///     ConnectionType::Zendesk => { /* ... */ },
///     ConnectionType::Zohocrm => { /* ... */ },
///     ConnectionType::Zoom => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `connectiontype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ConnectionType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ConnectionType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ConnectionType::NewFeature` is defined.
/// Specifically, when `connectiontype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ConnectionType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ConnectionType {
    #[allow(missing_docs)] // documentation missing in model
    Adobeanalytics,
    #[allow(missing_docs)] // documentation missing in model
    Asana,
    #[allow(missing_docs)] // documentation missing in model
    Azurecosmos,
    #[allow(missing_docs)] // documentation missing in model
    Azuresql,
    #[allow(missing_docs)] // documentation missing in model
    Bigquery,
    #[allow(missing_docs)] // documentation missing in model
    Blackbaud,
    #[allow(missing_docs)] // documentation missing in model
    Blackbaudraiseredgenxt,
    #[allow(missing_docs)] // documentation missing in model
    Circleci,
    #[allow(missing_docs)] // documentation missing in model
    Clouderahive,
    #[allow(missing_docs)] // documentation missing in model
    Clouderaimpala,
    #[allow(missing_docs)] // documentation missing in model
    Cloudwatch,
    #[allow(missing_docs)] // documentation missing in model
    Cloudwatchmetrics,
    #[allow(missing_docs)] // documentation missing in model
    Cmdb,
    #[allow(missing_docs)] // documentation missing in model
    Custom,
    #[allow(missing_docs)] // documentation missing in model
    Datadog,
    #[allow(missing_docs)] // documentation missing in model
    Datalakegen2,
    #[allow(missing_docs)] // documentation missing in model
    Db2,
    #[allow(missing_docs)] // documentation missing in model
    Db2As400,
    #[allow(missing_docs)] // documentation missing in model
    Documentdb,
    #[allow(missing_docs)] // documentation missing in model
    Docusignmonitor,
    #[allow(missing_docs)] // documentation missing in model
    Domo,
    #[allow(missing_docs)] // documentation missing in model
    Dynamodb,
    #[allow(missing_docs)] // documentation missing in model
    Dynatrace,
    #[allow(missing_docs)] // documentation missing in model
    Facebookads,
    #[allow(missing_docs)] // documentation missing in model
    Facebookpageinsights,
    #[allow(missing_docs)] // documentation missing in model
    Freshdesk,
    #[allow(missing_docs)] // documentation missing in model
    Freshsales,
    #[allow(missing_docs)] // documentation missing in model
    Gitlab,
    #[allow(missing_docs)] // documentation missing in model
    Googleads,
    #[allow(missing_docs)] // documentation missing in model
    Googleanalytics4,
    #[allow(missing_docs)] // documentation missing in model
    Googlecloudstorage,
    #[allow(missing_docs)] // documentation missing in model
    Googlesearchconsole,
    #[allow(missing_docs)] // documentation missing in model
    Googlesheets,
    #[allow(missing_docs)] // documentation missing in model
    Hbase,
    #[allow(missing_docs)] // documentation missing in model
    Hubspot,
    #[allow(missing_docs)] // documentation missing in model
    Instagramads,
    #[allow(missing_docs)] // documentation missing in model
    Intercom,
    #[allow(missing_docs)] // documentation missing in model
    Jdbc,
    #[allow(missing_docs)] // documentation missing in model
    Jiracloud,
    #[allow(missing_docs)] // documentation missing in model
    Kafka,
    #[allow(missing_docs)] // documentation missing in model
    Kustomer,
    #[allow(missing_docs)] // documentation missing in model
    Linkedin,
    #[allow(missing_docs)] // documentation missing in model
    Mailchimp,
    #[allow(missing_docs)] // documentation missing in model
    Marketo,
    #[allow(missing_docs)] // documentation missing in model
    Marketplace,
    #[allow(missing_docs)] // documentation missing in model
    Microsoftdynamic365Financeandops,
    #[allow(missing_docs)] // documentation missing in model
    Microsoftdynamics365Crm,
    #[allow(missing_docs)] // documentation missing in model
    Microsoftteams,
    #[allow(missing_docs)] // documentation missing in model
    Mixpanel,
    #[allow(missing_docs)] // documentation missing in model
    Monday,
    #[allow(missing_docs)] // documentation missing in model
    Mongodb,
    #[allow(missing_docs)] // documentation missing in model
    Mysql,
    #[allow(missing_docs)] // documentation missing in model
    Netsuiteerp,
    #[allow(missing_docs)] // documentation missing in model
    Network,
    #[allow(missing_docs)] // documentation missing in model
    Okta,
    #[allow(missing_docs)] // documentation missing in model
    Opensearch,
    #[allow(missing_docs)] // documentation missing in model
    Oracle,
    #[allow(missing_docs)] // documentation missing in model
    Paypal,
    #[allow(missing_docs)] // documentation missing in model
    Pendo,
    #[allow(missing_docs)] // documentation missing in model
    Pipedive,
    #[allow(missing_docs)] // documentation missing in model
    Pipedrive,
    #[allow(missing_docs)] // documentation missing in model
    Postgresql,
    #[allow(missing_docs)] // documentation missing in model
    Productboard,
    #[allow(missing_docs)] // documentation missing in model
    Quickbooks,
    #[allow(missing_docs)] // documentation missing in model
    Salesforce,
    #[allow(missing_docs)] // documentation missing in model
    Salesforcecommercecloud,
    #[allow(missing_docs)] // documentation missing in model
    Salesforcemarketingcloud,
    #[allow(missing_docs)] // documentation missing in model
    Salesforcepardot,
    #[allow(missing_docs)] // documentation missing in model
    Sapconcur,
    #[allow(missing_docs)] // documentation missing in model
    Saphana,
    #[allow(missing_docs)] // documentation missing in model
    Sapodata,
    #[allow(missing_docs)] // documentation missing in model
    Sendgrid,
    #[allow(missing_docs)] // documentation missing in model
    Servicenow,
    #[allow(missing_docs)] // documentation missing in model
    Sftp,
    #[allow(missing_docs)] // documentation missing in model
    Slack,
    #[allow(missing_docs)] // documentation missing in model
    Smartsheet,
    #[allow(missing_docs)] // documentation missing in model
    Snapchatads,
    #[allow(missing_docs)] // documentation missing in model
    Sqlserver,
    #[allow(missing_docs)] // documentation missing in model
    Stripe,
    #[allow(missing_docs)] // documentation missing in model
    Synapse,
    #[allow(missing_docs)] // documentation missing in model
    Teradata,
    #[allow(missing_docs)] // documentation missing in model
    Teradatanos,
    #[allow(missing_docs)] // documentation missing in model
    Timestream,
    #[allow(missing_docs)] // documentation missing in model
    Tpcds,
    #[allow(missing_docs)] // documentation missing in model
    Twilio,
    #[allow(missing_docs)] // documentation missing in model
    Vertica,
    #[allow(missing_docs)] // documentation missing in model
    ViewValidationAthena,
    #[allow(missing_docs)] // documentation missing in model
    ViewValidationRedshift,
    #[allow(missing_docs)] // documentation missing in model
    Woocommerce,
    #[allow(missing_docs)] // documentation missing in model
    Zendesk,
    #[allow(missing_docs)] // documentation missing in model
    Zohocrm,
    #[allow(missing_docs)] // documentation missing in model
    Zoom,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ConnectionType {
    fn from(s: &str) -> Self {
        match s {
            "ADOBEANALYTICS" => ConnectionType::Adobeanalytics,
            "ASANA" => ConnectionType::Asana,
            "AZURECOSMOS" => ConnectionType::Azurecosmos,
            "AZURESQL" => ConnectionType::Azuresql,
            "BIGQUERY" => ConnectionType::Bigquery,
            "BLACKBAUD" => ConnectionType::Blackbaud,
            "BLACKBAUDRAISEREDGENXT" => ConnectionType::Blackbaudraiseredgenxt,
            "CIRCLECI" => ConnectionType::Circleci,
            "CLOUDERAHIVE" => ConnectionType::Clouderahive,
            "CLOUDERAIMPALA" => ConnectionType::Clouderaimpala,
            "CLOUDWATCH" => ConnectionType::Cloudwatch,
            "CLOUDWATCHMETRICS" => ConnectionType::Cloudwatchmetrics,
            "CMDB" => ConnectionType::Cmdb,
            "CUSTOM" => ConnectionType::Custom,
            "DATADOG" => ConnectionType::Datadog,
            "DATALAKEGEN2" => ConnectionType::Datalakegen2,
            "DB2" => ConnectionType::Db2,
            "DB2AS400" => ConnectionType::Db2As400,
            "DOCUMENTDB" => ConnectionType::Documentdb,
            "DOCUSIGNMONITOR" => ConnectionType::Docusignmonitor,
            "DOMO" => ConnectionType::Domo,
            "DYNAMODB" => ConnectionType::Dynamodb,
            "DYNATRACE" => ConnectionType::Dynatrace,
            "FACEBOOKADS" => ConnectionType::Facebookads,
            "FACEBOOKPAGEINSIGHTS" => ConnectionType::Facebookpageinsights,
            "FRESHDESK" => ConnectionType::Freshdesk,
            "FRESHSALES" => ConnectionType::Freshsales,
            "GITLAB" => ConnectionType::Gitlab,
            "GOOGLEADS" => ConnectionType::Googleads,
            "GOOGLEANALYTICS4" => ConnectionType::Googleanalytics4,
            "GOOGLECLOUDSTORAGE" => ConnectionType::Googlecloudstorage,
            "GOOGLESEARCHCONSOLE" => ConnectionType::Googlesearchconsole,
            "GOOGLESHEETS" => ConnectionType::Googlesheets,
            "HBASE" => ConnectionType::Hbase,
            "HUBSPOT" => ConnectionType::Hubspot,
            "INSTAGRAMADS" => ConnectionType::Instagramads,
            "INTERCOM" => ConnectionType::Intercom,
            "JDBC" => ConnectionType::Jdbc,
            "JIRACLOUD" => ConnectionType::Jiracloud,
            "KAFKA" => ConnectionType::Kafka,
            "KUSTOMER" => ConnectionType::Kustomer,
            "LINKEDIN" => ConnectionType::Linkedin,
            "MAILCHIMP" => ConnectionType::Mailchimp,
            "MARKETO" => ConnectionType::Marketo,
            "MARKETPLACE" => ConnectionType::Marketplace,
            "MICROSOFTDYNAMIC365FINANCEANDOPS" => ConnectionType::Microsoftdynamic365Financeandops,
            "MICROSOFTDYNAMICS365CRM" => ConnectionType::Microsoftdynamics365Crm,
            "MICROSOFTTEAMS" => ConnectionType::Microsoftteams,
            "MIXPANEL" => ConnectionType::Mixpanel,
            "MONDAY" => ConnectionType::Monday,
            "MONGODB" => ConnectionType::Mongodb,
            "MYSQL" => ConnectionType::Mysql,
            "NETSUITEERP" => ConnectionType::Netsuiteerp,
            "NETWORK" => ConnectionType::Network,
            "OKTA" => ConnectionType::Okta,
            "OPENSEARCH" => ConnectionType::Opensearch,
            "ORACLE" => ConnectionType::Oracle,
            "PAYPAL" => ConnectionType::Paypal,
            "PENDO" => ConnectionType::Pendo,
            "PIPEDIVE" => ConnectionType::Pipedive,
            "PIPEDRIVE" => ConnectionType::Pipedrive,
            "POSTGRESQL" => ConnectionType::Postgresql,
            "PRODUCTBOARD" => ConnectionType::Productboard,
            "QUICKBOOKS" => ConnectionType::Quickbooks,
            "SALESFORCE" => ConnectionType::Salesforce,
            "SALESFORCECOMMERCECLOUD" => ConnectionType::Salesforcecommercecloud,
            "SALESFORCEMARKETINGCLOUD" => ConnectionType::Salesforcemarketingcloud,
            "SALESFORCEPARDOT" => ConnectionType::Salesforcepardot,
            "SAPCONCUR" => ConnectionType::Sapconcur,
            "SAPHANA" => ConnectionType::Saphana,
            "SAPODATA" => ConnectionType::Sapodata,
            "SENDGRID" => ConnectionType::Sendgrid,
            "SERVICENOW" => ConnectionType::Servicenow,
            "SFTP" => ConnectionType::Sftp,
            "SLACK" => ConnectionType::Slack,
            "SMARTSHEET" => ConnectionType::Smartsheet,
            "SNAPCHATADS" => ConnectionType::Snapchatads,
            "SQLSERVER" => ConnectionType::Sqlserver,
            "STRIPE" => ConnectionType::Stripe,
            "SYNAPSE" => ConnectionType::Synapse,
            "TERADATA" => ConnectionType::Teradata,
            "TERADATANOS" => ConnectionType::Teradatanos,
            "TIMESTREAM" => ConnectionType::Timestream,
            "TPCDS" => ConnectionType::Tpcds,
            "TWILIO" => ConnectionType::Twilio,
            "VERTICA" => ConnectionType::Vertica,
            "VIEW_VALIDATION_ATHENA" => ConnectionType::ViewValidationAthena,
            "VIEW_VALIDATION_REDSHIFT" => ConnectionType::ViewValidationRedshift,
            "WOOCOMMERCE" => ConnectionType::Woocommerce,
            "ZENDESK" => ConnectionType::Zendesk,
            "ZOHOCRM" => ConnectionType::Zohocrm,
            "ZOOM" => ConnectionType::Zoom,
            other => ConnectionType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ConnectionType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ConnectionType::from(s))
    }
}
impl ConnectionType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ConnectionType::Adobeanalytics => "ADOBEANALYTICS",
            ConnectionType::Asana => "ASANA",
            ConnectionType::Azurecosmos => "AZURECOSMOS",
            ConnectionType::Azuresql => "AZURESQL",
            ConnectionType::Bigquery => "BIGQUERY",
            ConnectionType::Blackbaud => "BLACKBAUD",
            ConnectionType::Blackbaudraiseredgenxt => "BLACKBAUDRAISEREDGENXT",
            ConnectionType::Circleci => "CIRCLECI",
            ConnectionType::Clouderahive => "CLOUDERAHIVE",
            ConnectionType::Clouderaimpala => "CLOUDERAIMPALA",
            ConnectionType::Cloudwatch => "CLOUDWATCH",
            ConnectionType::Cloudwatchmetrics => "CLOUDWATCHMETRICS",
            ConnectionType::Cmdb => "CMDB",
            ConnectionType::Custom => "CUSTOM",
            ConnectionType::Datadog => "DATADOG",
            ConnectionType::Datalakegen2 => "DATALAKEGEN2",
            ConnectionType::Db2 => "DB2",
            ConnectionType::Db2As400 => "DB2AS400",
            ConnectionType::Documentdb => "DOCUMENTDB",
            ConnectionType::Docusignmonitor => "DOCUSIGNMONITOR",
            ConnectionType::Domo => "DOMO",
            ConnectionType::Dynamodb => "DYNAMODB",
            ConnectionType::Dynatrace => "DYNATRACE",
            ConnectionType::Facebookads => "FACEBOOKADS",
            ConnectionType::Facebookpageinsights => "FACEBOOKPAGEINSIGHTS",
            ConnectionType::Freshdesk => "FRESHDESK",
            ConnectionType::Freshsales => "FRESHSALES",
            ConnectionType::Gitlab => "GITLAB",
            ConnectionType::Googleads => "GOOGLEADS",
            ConnectionType::Googleanalytics4 => "GOOGLEANALYTICS4",
            ConnectionType::Googlecloudstorage => "GOOGLECLOUDSTORAGE",
            ConnectionType::Googlesearchconsole => "GOOGLESEARCHCONSOLE",
            ConnectionType::Googlesheets => "GOOGLESHEETS",
            ConnectionType::Hbase => "HBASE",
            ConnectionType::Hubspot => "HUBSPOT",
            ConnectionType::Instagramads => "INSTAGRAMADS",
            ConnectionType::Intercom => "INTERCOM",
            ConnectionType::Jdbc => "JDBC",
            ConnectionType::Jiracloud => "JIRACLOUD",
            ConnectionType::Kafka => "KAFKA",
            ConnectionType::Kustomer => "KUSTOMER",
            ConnectionType::Linkedin => "LINKEDIN",
            ConnectionType::Mailchimp => "MAILCHIMP",
            ConnectionType::Marketo => "MARKETO",
            ConnectionType::Marketplace => "MARKETPLACE",
            ConnectionType::Microsoftdynamic365Financeandops => "MICROSOFTDYNAMIC365FINANCEANDOPS",
            ConnectionType::Microsoftdynamics365Crm => "MICROSOFTDYNAMICS365CRM",
            ConnectionType::Microsoftteams => "MICROSOFTTEAMS",
            ConnectionType::Mixpanel => "MIXPANEL",
            ConnectionType::Monday => "MONDAY",
            ConnectionType::Mongodb => "MONGODB",
            ConnectionType::Mysql => "MYSQL",
            ConnectionType::Netsuiteerp => "NETSUITEERP",
            ConnectionType::Network => "NETWORK",
            ConnectionType::Okta => "OKTA",
            ConnectionType::Opensearch => "OPENSEARCH",
            ConnectionType::Oracle => "ORACLE",
            ConnectionType::Paypal => "PAYPAL",
            ConnectionType::Pendo => "PENDO",
            ConnectionType::Pipedive => "PIPEDIVE",
            ConnectionType::Pipedrive => "PIPEDRIVE",
            ConnectionType::Postgresql => "POSTGRESQL",
            ConnectionType::Productboard => "PRODUCTBOARD",
            ConnectionType::Quickbooks => "QUICKBOOKS",
            ConnectionType::Salesforce => "SALESFORCE",
            ConnectionType::Salesforcecommercecloud => "SALESFORCECOMMERCECLOUD",
            ConnectionType::Salesforcemarketingcloud => "SALESFORCEMARKETINGCLOUD",
            ConnectionType::Salesforcepardot => "SALESFORCEPARDOT",
            ConnectionType::Sapconcur => "SAPCONCUR",
            ConnectionType::Saphana => "SAPHANA",
            ConnectionType::Sapodata => "SAPODATA",
            ConnectionType::Sendgrid => "SENDGRID",
            ConnectionType::Servicenow => "SERVICENOW",
            ConnectionType::Sftp => "SFTP",
            ConnectionType::Slack => "SLACK",
            ConnectionType::Smartsheet => "SMARTSHEET",
            ConnectionType::Snapchatads => "SNAPCHATADS",
            ConnectionType::Sqlserver => "SQLSERVER",
            ConnectionType::Stripe => "STRIPE",
            ConnectionType::Synapse => "SYNAPSE",
            ConnectionType::Teradata => "TERADATA",
            ConnectionType::Teradatanos => "TERADATANOS",
            ConnectionType::Timestream => "TIMESTREAM",
            ConnectionType::Tpcds => "TPCDS",
            ConnectionType::Twilio => "TWILIO",
            ConnectionType::Vertica => "VERTICA",
            ConnectionType::ViewValidationAthena => "VIEW_VALIDATION_ATHENA",
            ConnectionType::ViewValidationRedshift => "VIEW_VALIDATION_REDSHIFT",
            ConnectionType::Woocommerce => "WOOCOMMERCE",
            ConnectionType::Zendesk => "ZENDESK",
            ConnectionType::Zohocrm => "ZOHOCRM",
            ConnectionType::Zoom => "ZOOM",
            ConnectionType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ADOBEANALYTICS",
            "ASANA",
            "AZURECOSMOS",
            "AZURESQL",
            "BIGQUERY",
            "BLACKBAUD",
            "BLACKBAUDRAISEREDGENXT",
            "CIRCLECI",
            "CLOUDERAHIVE",
            "CLOUDERAIMPALA",
            "CLOUDWATCH",
            "CLOUDWATCHMETRICS",
            "CMDB",
            "CUSTOM",
            "DATADOG",
            "DATALAKEGEN2",
            "DB2",
            "DB2AS400",
            "DOCUMENTDB",
            "DOCUSIGNMONITOR",
            "DOMO",
            "DYNAMODB",
            "DYNATRACE",
            "FACEBOOKADS",
            "FACEBOOKPAGEINSIGHTS",
            "FRESHDESK",
            "FRESHSALES",
            "GITLAB",
            "GOOGLEADS",
            "GOOGLEANALYTICS4",
            "GOOGLECLOUDSTORAGE",
            "GOOGLESEARCHCONSOLE",
            "GOOGLESHEETS",
            "HBASE",
            "HUBSPOT",
            "INSTAGRAMADS",
            "INTERCOM",
            "JDBC",
            "JIRACLOUD",
            "KAFKA",
            "KUSTOMER",
            "LINKEDIN",
            "MAILCHIMP",
            "MARKETO",
            "MARKETPLACE",
            "MICROSOFTDYNAMIC365FINANCEANDOPS",
            "MICROSOFTDYNAMICS365CRM",
            "MICROSOFTTEAMS",
            "MIXPANEL",
            "MONDAY",
            "MONGODB",
            "MYSQL",
            "NETSUITEERP",
            "NETWORK",
            "OKTA",
            "OPENSEARCH",
            "ORACLE",
            "PAYPAL",
            "PENDO",
            "PIPEDIVE",
            "PIPEDRIVE",
            "POSTGRESQL",
            "PRODUCTBOARD",
            "QUICKBOOKS",
            "SALESFORCE",
            "SALESFORCECOMMERCECLOUD",
            "SALESFORCEMARKETINGCLOUD",
            "SALESFORCEPARDOT",
            "SAPCONCUR",
            "SAPHANA",
            "SAPODATA",
            "SENDGRID",
            "SERVICENOW",
            "SFTP",
            "SLACK",
            "SMARTSHEET",
            "SNAPCHATADS",
            "SQLSERVER",
            "STRIPE",
            "SYNAPSE",
            "TERADATA",
            "TERADATANOS",
            "TIMESTREAM",
            "TPCDS",
            "TWILIO",
            "VERTICA",
            "VIEW_VALIDATION_ATHENA",
            "VIEW_VALIDATION_REDSHIFT",
            "WOOCOMMERCE",
            "ZENDESK",
            "ZOHOCRM",
            "ZOOM",
        ]
    }
}
impl ::std::convert::AsRef<str> for ConnectionType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ConnectionType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ConnectionType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ConnectionType::Adobeanalytics => write!(f, "ADOBEANALYTICS"),
            ConnectionType::Asana => write!(f, "ASANA"),
            ConnectionType::Azurecosmos => write!(f, "AZURECOSMOS"),
            ConnectionType::Azuresql => write!(f, "AZURESQL"),
            ConnectionType::Bigquery => write!(f, "BIGQUERY"),
            ConnectionType::Blackbaud => write!(f, "BLACKBAUD"),
            ConnectionType::Blackbaudraiseredgenxt => write!(f, "BLACKBAUDRAISEREDGENXT"),
            ConnectionType::Circleci => write!(f, "CIRCLECI"),
            ConnectionType::Clouderahive => write!(f, "CLOUDERAHIVE"),
            ConnectionType::Clouderaimpala => write!(f, "CLOUDERAIMPALA"),
            ConnectionType::Cloudwatch => write!(f, "CLOUDWATCH"),
            ConnectionType::Cloudwatchmetrics => write!(f, "CLOUDWATCHMETRICS"),
            ConnectionType::Cmdb => write!(f, "CMDB"),
            ConnectionType::Custom => write!(f, "CUSTOM"),
            ConnectionType::Datadog => write!(f, "DATADOG"),
            ConnectionType::Datalakegen2 => write!(f, "DATALAKEGEN2"),
            ConnectionType::Db2 => write!(f, "DB2"),
            ConnectionType::Db2As400 => write!(f, "DB2AS400"),
            ConnectionType::Documentdb => write!(f, "DOCUMENTDB"),
            ConnectionType::Docusignmonitor => write!(f, "DOCUSIGNMONITOR"),
            ConnectionType::Domo => write!(f, "DOMO"),
            ConnectionType::Dynamodb => write!(f, "DYNAMODB"),
            ConnectionType::Dynatrace => write!(f, "DYNATRACE"),
            ConnectionType::Facebookads => write!(f, "FACEBOOKADS"),
            ConnectionType::Facebookpageinsights => write!(f, "FACEBOOKPAGEINSIGHTS"),
            ConnectionType::Freshdesk => write!(f, "FRESHDESK"),
            ConnectionType::Freshsales => write!(f, "FRESHSALES"),
            ConnectionType::Gitlab => write!(f, "GITLAB"),
            ConnectionType::Googleads => write!(f, "GOOGLEADS"),
            ConnectionType::Googleanalytics4 => write!(f, "GOOGLEANALYTICS4"),
            ConnectionType::Googlecloudstorage => write!(f, "GOOGLECLOUDSTORAGE"),
            ConnectionType::Googlesearchconsole => write!(f, "GOOGLESEARCHCONSOLE"),
            ConnectionType::Googlesheets => write!(f, "GOOGLESHEETS"),
            ConnectionType::Hbase => write!(f, "HBASE"),
            ConnectionType::Hubspot => write!(f, "HUBSPOT"),
            ConnectionType::Instagramads => write!(f, "INSTAGRAMADS"),
            ConnectionType::Intercom => write!(f, "INTERCOM"),
            ConnectionType::Jdbc => write!(f, "JDBC"),
            ConnectionType::Jiracloud => write!(f, "JIRACLOUD"),
            ConnectionType::Kafka => write!(f, "KAFKA"),
            ConnectionType::Kustomer => write!(f, "KUSTOMER"),
            ConnectionType::Linkedin => write!(f, "LINKEDIN"),
            ConnectionType::Mailchimp => write!(f, "MAILCHIMP"),
            ConnectionType::Marketo => write!(f, "MARKETO"),
            ConnectionType::Marketplace => write!(f, "MARKETPLACE"),
            ConnectionType::Microsoftdynamic365Financeandops => write!(f, "MICROSOFTDYNAMIC365FINANCEANDOPS"),
            ConnectionType::Microsoftdynamics365Crm => write!(f, "MICROSOFTDYNAMICS365CRM"),
            ConnectionType::Microsoftteams => write!(f, "MICROSOFTTEAMS"),
            ConnectionType::Mixpanel => write!(f, "MIXPANEL"),
            ConnectionType::Monday => write!(f, "MONDAY"),
            ConnectionType::Mongodb => write!(f, "MONGODB"),
            ConnectionType::Mysql => write!(f, "MYSQL"),
            ConnectionType::Netsuiteerp => write!(f, "NETSUITEERP"),
            ConnectionType::Network => write!(f, "NETWORK"),
            ConnectionType::Okta => write!(f, "OKTA"),
            ConnectionType::Opensearch => write!(f, "OPENSEARCH"),
            ConnectionType::Oracle => write!(f, "ORACLE"),
            ConnectionType::Paypal => write!(f, "PAYPAL"),
            ConnectionType::Pendo => write!(f, "PENDO"),
            ConnectionType::Pipedive => write!(f, "PIPEDIVE"),
            ConnectionType::Pipedrive => write!(f, "PIPEDRIVE"),
            ConnectionType::Postgresql => write!(f, "POSTGRESQL"),
            ConnectionType::Productboard => write!(f, "PRODUCTBOARD"),
            ConnectionType::Quickbooks => write!(f, "QUICKBOOKS"),
            ConnectionType::Salesforce => write!(f, "SALESFORCE"),
            ConnectionType::Salesforcecommercecloud => write!(f, "SALESFORCECOMMERCECLOUD"),
            ConnectionType::Salesforcemarketingcloud => write!(f, "SALESFORCEMARKETINGCLOUD"),
            ConnectionType::Salesforcepardot => write!(f, "SALESFORCEPARDOT"),
            ConnectionType::Sapconcur => write!(f, "SAPCONCUR"),
            ConnectionType::Saphana => write!(f, "SAPHANA"),
            ConnectionType::Sapodata => write!(f, "SAPODATA"),
            ConnectionType::Sendgrid => write!(f, "SENDGRID"),
            ConnectionType::Servicenow => write!(f, "SERVICENOW"),
            ConnectionType::Sftp => write!(f, "SFTP"),
            ConnectionType::Slack => write!(f, "SLACK"),
            ConnectionType::Smartsheet => write!(f, "SMARTSHEET"),
            ConnectionType::Snapchatads => write!(f, "SNAPCHATADS"),
            ConnectionType::Sqlserver => write!(f, "SQLSERVER"),
            ConnectionType::Stripe => write!(f, "STRIPE"),
            ConnectionType::Synapse => write!(f, "SYNAPSE"),
            ConnectionType::Teradata => write!(f, "TERADATA"),
            ConnectionType::Teradatanos => write!(f, "TERADATANOS"),
            ConnectionType::Timestream => write!(f, "TIMESTREAM"),
            ConnectionType::Tpcds => write!(f, "TPCDS"),
            ConnectionType::Twilio => write!(f, "TWILIO"),
            ConnectionType::Vertica => write!(f, "VERTICA"),
            ConnectionType::ViewValidationAthena => write!(f, "VIEW_VALIDATION_ATHENA"),
            ConnectionType::ViewValidationRedshift => write!(f, "VIEW_VALIDATION_REDSHIFT"),
            ConnectionType::Woocommerce => write!(f, "WOOCOMMERCE"),
            ConnectionType::Zendesk => write!(f, "ZENDESK"),
            ConnectionType::Zohocrm => write!(f, "ZOHOCRM"),
            ConnectionType::Zoom => write!(f, "ZOOM"),
            ConnectionType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
