// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The set of properties required for the the OAuth2 <code>AUTHORIZATION_CODE</code> grant type workflow.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AuthorizationCodeProperties {
    /// <p>An authorization code to be used in the third leg of the <code>AUTHORIZATION_CODE</code> grant workflow. This is a single-use code which becomes invalid once exchanged for an access token, thus it is acceptable to have this value as a request parameter.</p>
    pub authorization_code: ::std::option::Option<::std::string::String>,
    /// <p>The redirect URI where the user gets redirected to by authorization server when issuing an authorization code. The URI is subsequently used when the authorization code is exchanged for an access token.</p>
    pub redirect_uri: ::std::option::Option<::std::string::String>,
}
impl AuthorizationCodeProperties {
    /// <p>An authorization code to be used in the third leg of the <code>AUTHORIZATION_CODE</code> grant workflow. This is a single-use code which becomes invalid once exchanged for an access token, thus it is acceptable to have this value as a request parameter.</p>
    pub fn authorization_code(&self) -> ::std::option::Option<&str> {
        self.authorization_code.as_deref()
    }
    /// <p>The redirect URI where the user gets redirected to by authorization server when issuing an authorization code. The URI is subsequently used when the authorization code is exchanged for an access token.</p>
    pub fn redirect_uri(&self) -> ::std::option::Option<&str> {
        self.redirect_uri.as_deref()
    }
}
impl ::std::fmt::Debug for AuthorizationCodeProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AuthorizationCodeProperties");
        formatter.field("authorization_code", &"*** Sensitive Data Redacted ***");
        formatter.field("redirect_uri", &self.redirect_uri);
        formatter.finish()
    }
}
impl AuthorizationCodeProperties {
    /// Creates a new builder-style object to manufacture [`AuthorizationCodeProperties`](crate::types::AuthorizationCodeProperties).
    pub fn builder() -> crate::types::builders::AuthorizationCodePropertiesBuilder {
        crate::types::builders::AuthorizationCodePropertiesBuilder::default()
    }
}

/// A builder for [`AuthorizationCodeProperties`](crate::types::AuthorizationCodeProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AuthorizationCodePropertiesBuilder {
    pub(crate) authorization_code: ::std::option::Option<::std::string::String>,
    pub(crate) redirect_uri: ::std::option::Option<::std::string::String>,
}
impl AuthorizationCodePropertiesBuilder {
    /// <p>An authorization code to be used in the third leg of the <code>AUTHORIZATION_CODE</code> grant workflow. This is a single-use code which becomes invalid once exchanged for an access token, thus it is acceptable to have this value as a request parameter.</p>
    pub fn authorization_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An authorization code to be used in the third leg of the <code>AUTHORIZATION_CODE</code> grant workflow. This is a single-use code which becomes invalid once exchanged for an access token, thus it is acceptable to have this value as a request parameter.</p>
    pub fn set_authorization_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_code = input;
        self
    }
    /// <p>An authorization code to be used in the third leg of the <code>AUTHORIZATION_CODE</code> grant workflow. This is a single-use code which becomes invalid once exchanged for an access token, thus it is acceptable to have this value as a request parameter.</p>
    pub fn get_authorization_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_code
    }
    /// <p>The redirect URI where the user gets redirected to by authorization server when issuing an authorization code. The URI is subsequently used when the authorization code is exchanged for an access token.</p>
    pub fn redirect_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redirect_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The redirect URI where the user gets redirected to by authorization server when issuing an authorization code. The URI is subsequently used when the authorization code is exchanged for an access token.</p>
    pub fn set_redirect_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redirect_uri = input;
        self
    }
    /// <p>The redirect URI where the user gets redirected to by authorization server when issuing an authorization code. The URI is subsequently used when the authorization code is exchanged for an access token.</p>
    pub fn get_redirect_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.redirect_uri
    }
    /// Consumes the builder and constructs a [`AuthorizationCodeProperties`](crate::types::AuthorizationCodeProperties).
    pub fn build(self) -> crate::types::AuthorizationCodeProperties {
        crate::types::AuthorizationCodeProperties {
            authorization_code: self.authorization_code,
            redirect_uri: self.redirect_uri,
        }
    }
}
impl ::std::fmt::Debug for AuthorizationCodePropertiesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AuthorizationCodePropertiesBuilder");
        formatter.field("authorization_code", &"*** Sensitive Data Redacted ***");
        formatter.field("redirect_uri", &self.redirect_uri);
        formatter.finish()
    }
}
