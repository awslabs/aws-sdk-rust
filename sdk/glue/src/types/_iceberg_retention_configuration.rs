// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for an Iceberg snapshot retention optimizer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IcebergRetentionConfiguration {
    /// <p>The number of days to retain the Iceberg snapshots. If an input is not provided, the corresponding Iceberg table configuration field will be used or if not present, the default value 5 will be used.</p>
    pub snapshot_retention_period_in_days: ::std::option::Option<i32>,
    /// <p>The number of Iceberg snapshots to retain within the retention period. If an input is not provided, the corresponding Iceberg table configuration field will be used or if not present, the default value 1 will be used.</p>
    pub number_of_snapshots_to_retain: ::std::option::Option<i32>,
    /// <p>If set to false, snapshots are only deleted from table metadata, and the underlying data and metadata files are not deleted.</p>
    pub clean_expired_files: ::std::option::Option<bool>,
}
impl IcebergRetentionConfiguration {
    /// <p>The number of days to retain the Iceberg snapshots. If an input is not provided, the corresponding Iceberg table configuration field will be used or if not present, the default value 5 will be used.</p>
    pub fn snapshot_retention_period_in_days(&self) -> ::std::option::Option<i32> {
        self.snapshot_retention_period_in_days
    }
    /// <p>The number of Iceberg snapshots to retain within the retention period. If an input is not provided, the corresponding Iceberg table configuration field will be used or if not present, the default value 1 will be used.</p>
    pub fn number_of_snapshots_to_retain(&self) -> ::std::option::Option<i32> {
        self.number_of_snapshots_to_retain
    }
    /// <p>If set to false, snapshots are only deleted from table metadata, and the underlying data and metadata files are not deleted.</p>
    pub fn clean_expired_files(&self) -> ::std::option::Option<bool> {
        self.clean_expired_files
    }
}
impl IcebergRetentionConfiguration {
    /// Creates a new builder-style object to manufacture [`IcebergRetentionConfiguration`](crate::types::IcebergRetentionConfiguration).
    pub fn builder() -> crate::types::builders::IcebergRetentionConfigurationBuilder {
        crate::types::builders::IcebergRetentionConfigurationBuilder::default()
    }
}

/// A builder for [`IcebergRetentionConfiguration`](crate::types::IcebergRetentionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IcebergRetentionConfigurationBuilder {
    pub(crate) snapshot_retention_period_in_days: ::std::option::Option<i32>,
    pub(crate) number_of_snapshots_to_retain: ::std::option::Option<i32>,
    pub(crate) clean_expired_files: ::std::option::Option<bool>,
}
impl IcebergRetentionConfigurationBuilder {
    /// <p>The number of days to retain the Iceberg snapshots. If an input is not provided, the corresponding Iceberg table configuration field will be used or if not present, the default value 5 will be used.</p>
    pub fn snapshot_retention_period_in_days(mut self, input: i32) -> Self {
        self.snapshot_retention_period_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days to retain the Iceberg snapshots. If an input is not provided, the corresponding Iceberg table configuration field will be used or if not present, the default value 5 will be used.</p>
    pub fn set_snapshot_retention_period_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.snapshot_retention_period_in_days = input;
        self
    }
    /// <p>The number of days to retain the Iceberg snapshots. If an input is not provided, the corresponding Iceberg table configuration field will be used or if not present, the default value 5 will be used.</p>
    pub fn get_snapshot_retention_period_in_days(&self) -> &::std::option::Option<i32> {
        &self.snapshot_retention_period_in_days
    }
    /// <p>The number of Iceberg snapshots to retain within the retention period. If an input is not provided, the corresponding Iceberg table configuration field will be used or if not present, the default value 1 will be used.</p>
    pub fn number_of_snapshots_to_retain(mut self, input: i32) -> Self {
        self.number_of_snapshots_to_retain = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of Iceberg snapshots to retain within the retention period. If an input is not provided, the corresponding Iceberg table configuration field will be used or if not present, the default value 1 will be used.</p>
    pub fn set_number_of_snapshots_to_retain(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_snapshots_to_retain = input;
        self
    }
    /// <p>The number of Iceberg snapshots to retain within the retention period. If an input is not provided, the corresponding Iceberg table configuration field will be used or if not present, the default value 1 will be used.</p>
    pub fn get_number_of_snapshots_to_retain(&self) -> &::std::option::Option<i32> {
        &self.number_of_snapshots_to_retain
    }
    /// <p>If set to false, snapshots are only deleted from table metadata, and the underlying data and metadata files are not deleted.</p>
    pub fn clean_expired_files(mut self, input: bool) -> Self {
        self.clean_expired_files = ::std::option::Option::Some(input);
        self
    }
    /// <p>If set to false, snapshots are only deleted from table metadata, and the underlying data and metadata files are not deleted.</p>
    pub fn set_clean_expired_files(mut self, input: ::std::option::Option<bool>) -> Self {
        self.clean_expired_files = input;
        self
    }
    /// <p>If set to false, snapshots are only deleted from table metadata, and the underlying data and metadata files are not deleted.</p>
    pub fn get_clean_expired_files(&self) -> &::std::option::Option<bool> {
        &self.clean_expired_files
    }
    /// Consumes the builder and constructs a [`IcebergRetentionConfiguration`](crate::types::IcebergRetentionConfiguration).
    pub fn build(self) -> crate::types::IcebergRetentionConfiguration {
        crate::types::IcebergRetentionConfiguration {
            snapshot_retention_period_in_days: self.snapshot_retention_period_in_days,
            number_of_snapshots_to_retain: self.number_of_snapshots_to_retain,
            clean_expired_files: self.clean_expired_files,
        }
    }
}
