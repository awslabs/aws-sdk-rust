// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration properties for the task run.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TaskRunProperties {
    /// <p>The type of task run.</p>
    #[doc(hidden)]
    pub task_type: std::option::Option<crate::types::TaskType>,
    /// <p>The configuration properties for an importing labels task run.</p>
    #[doc(hidden)]
    pub import_labels_task_run_properties:
        std::option::Option<crate::types::ImportLabelsTaskRunProperties>,
    /// <p>The configuration properties for an exporting labels task run.</p>
    #[doc(hidden)]
    pub export_labels_task_run_properties:
        std::option::Option<crate::types::ExportLabelsTaskRunProperties>,
    /// <p>The configuration properties for a labeling set generation task run.</p>
    #[doc(hidden)]
    pub labeling_set_generation_task_run_properties:
        std::option::Option<crate::types::LabelingSetGenerationTaskRunProperties>,
    /// <p>The configuration properties for a find matches task run.</p>
    #[doc(hidden)]
    pub find_matches_task_run_properties:
        std::option::Option<crate::types::FindMatchesTaskRunProperties>,
}
impl TaskRunProperties {
    /// <p>The type of task run.</p>
    pub fn task_type(&self) -> std::option::Option<&crate::types::TaskType> {
        self.task_type.as_ref()
    }
    /// <p>The configuration properties for an importing labels task run.</p>
    pub fn import_labels_task_run_properties(
        &self,
    ) -> std::option::Option<&crate::types::ImportLabelsTaskRunProperties> {
        self.import_labels_task_run_properties.as_ref()
    }
    /// <p>The configuration properties for an exporting labels task run.</p>
    pub fn export_labels_task_run_properties(
        &self,
    ) -> std::option::Option<&crate::types::ExportLabelsTaskRunProperties> {
        self.export_labels_task_run_properties.as_ref()
    }
    /// <p>The configuration properties for a labeling set generation task run.</p>
    pub fn labeling_set_generation_task_run_properties(
        &self,
    ) -> std::option::Option<&crate::types::LabelingSetGenerationTaskRunProperties> {
        self.labeling_set_generation_task_run_properties.as_ref()
    }
    /// <p>The configuration properties for a find matches task run.</p>
    pub fn find_matches_task_run_properties(
        &self,
    ) -> std::option::Option<&crate::types::FindMatchesTaskRunProperties> {
        self.find_matches_task_run_properties.as_ref()
    }
}
impl TaskRunProperties {
    /// Creates a new builder-style object to manufacture [`TaskRunProperties`](crate::types::TaskRunProperties).
    pub fn builder() -> crate::types::builders::TaskRunPropertiesBuilder {
        crate::types::builders::TaskRunPropertiesBuilder::default()
    }
}

/// A builder for [`TaskRunProperties`](crate::types::TaskRunProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TaskRunPropertiesBuilder {
    pub(crate) task_type: std::option::Option<crate::types::TaskType>,
    pub(crate) import_labels_task_run_properties:
        std::option::Option<crate::types::ImportLabelsTaskRunProperties>,
    pub(crate) export_labels_task_run_properties:
        std::option::Option<crate::types::ExportLabelsTaskRunProperties>,
    pub(crate) labeling_set_generation_task_run_properties:
        std::option::Option<crate::types::LabelingSetGenerationTaskRunProperties>,
    pub(crate) find_matches_task_run_properties:
        std::option::Option<crate::types::FindMatchesTaskRunProperties>,
}
impl TaskRunPropertiesBuilder {
    /// <p>The type of task run.</p>
    pub fn task_type(mut self, input: crate::types::TaskType) -> Self {
        self.task_type = Some(input);
        self
    }
    /// <p>The type of task run.</p>
    pub fn set_task_type(mut self, input: std::option::Option<crate::types::TaskType>) -> Self {
        self.task_type = input;
        self
    }
    /// <p>The configuration properties for an importing labels task run.</p>
    pub fn import_labels_task_run_properties(
        mut self,
        input: crate::types::ImportLabelsTaskRunProperties,
    ) -> Self {
        self.import_labels_task_run_properties = Some(input);
        self
    }
    /// <p>The configuration properties for an importing labels task run.</p>
    pub fn set_import_labels_task_run_properties(
        mut self,
        input: std::option::Option<crate::types::ImportLabelsTaskRunProperties>,
    ) -> Self {
        self.import_labels_task_run_properties = input;
        self
    }
    /// <p>The configuration properties for an exporting labels task run.</p>
    pub fn export_labels_task_run_properties(
        mut self,
        input: crate::types::ExportLabelsTaskRunProperties,
    ) -> Self {
        self.export_labels_task_run_properties = Some(input);
        self
    }
    /// <p>The configuration properties for an exporting labels task run.</p>
    pub fn set_export_labels_task_run_properties(
        mut self,
        input: std::option::Option<crate::types::ExportLabelsTaskRunProperties>,
    ) -> Self {
        self.export_labels_task_run_properties = input;
        self
    }
    /// <p>The configuration properties for a labeling set generation task run.</p>
    pub fn labeling_set_generation_task_run_properties(
        mut self,
        input: crate::types::LabelingSetGenerationTaskRunProperties,
    ) -> Self {
        self.labeling_set_generation_task_run_properties = Some(input);
        self
    }
    /// <p>The configuration properties for a labeling set generation task run.</p>
    pub fn set_labeling_set_generation_task_run_properties(
        mut self,
        input: std::option::Option<crate::types::LabelingSetGenerationTaskRunProperties>,
    ) -> Self {
        self.labeling_set_generation_task_run_properties = input;
        self
    }
    /// <p>The configuration properties for a find matches task run.</p>
    pub fn find_matches_task_run_properties(
        mut self,
        input: crate::types::FindMatchesTaskRunProperties,
    ) -> Self {
        self.find_matches_task_run_properties = Some(input);
        self
    }
    /// <p>The configuration properties for a find matches task run.</p>
    pub fn set_find_matches_task_run_properties(
        mut self,
        input: std::option::Option<crate::types::FindMatchesTaskRunProperties>,
    ) -> Self {
        self.find_matches_task_run_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`TaskRunProperties`](crate::types::TaskRunProperties).
    pub fn build(self) -> crate::types::TaskRunProperties {
        crate::types::TaskRunProperties {
            task_type: self.task_type,
            import_labels_task_run_properties: self.import_labels_task_run_properties,
            export_labels_task_run_properties: self.export_labels_task_run_properties,
            labeling_set_generation_task_run_properties: self
                .labeling_set_generation_task_run_properties,
            find_matches_task_run_properties: self.find_matches_task_run_properties,
        }
    }
}
