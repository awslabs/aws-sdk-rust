// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a transform that chooses one <code>DynamicFrame</code> from a collection of <code>DynamicFrames</code>. The output is the selected <code>DynamicFrame</code> </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SelectFromCollection {
    /// <p>The name of the transform node.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The data inputs identified by their node names.</p>
    #[doc(hidden)]
    pub inputs: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The index for the DynamicFrame to be selected.</p>
    #[doc(hidden)]
    pub index: i32,
}
impl SelectFromCollection {
    /// <p>The name of the transform node.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The data inputs identified by their node names.</p>
    pub fn inputs(&self) -> std::option::Option<&[std::string::String]> {
        self.inputs.as_deref()
    }
    /// <p>The index for the DynamicFrame to be selected.</p>
    pub fn index(&self) -> i32 {
        self.index
    }
}
impl SelectFromCollection {
    /// Creates a new builder-style object to manufacture [`SelectFromCollection`](crate::types::SelectFromCollection).
    pub fn builder() -> crate::types::builders::SelectFromCollectionBuilder {
        crate::types::builders::SelectFromCollectionBuilder::default()
    }
}

/// A builder for [`SelectFromCollection`](crate::types::SelectFromCollection).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SelectFromCollectionBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) inputs: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) index: std::option::Option<i32>,
}
impl SelectFromCollectionBuilder {
    /// <p>The name of the transform node.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the transform node.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>The data inputs identified by their node names.</p>
    pub fn inputs(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input.into());
        self.inputs = Some(v);
        self
    }
    /// <p>The data inputs identified by their node names.</p>
    pub fn set_inputs(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inputs = input;
        self
    }
    /// <p>The index for the DynamicFrame to be selected.</p>
    pub fn index(mut self, input: i32) -> Self {
        self.index = Some(input);
        self
    }
    /// <p>The index for the DynamicFrame to be selected.</p>
    pub fn set_index(mut self, input: std::option::Option<i32>) -> Self {
        self.index = input;
        self
    }
    /// Consumes the builder and constructs a [`SelectFromCollection`](crate::types::SelectFromCollection).
    pub fn build(self) -> crate::types::SelectFromCollection {
        crate::types::SelectFromCollection {
            name: self.name,
            inputs: self.inputs,
            index: self.index.unwrap_or_default(),
        }
    }
}
