// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An execution property of a job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExecutionProperty {
    /// <p>The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.</p>
    #[doc(hidden)]
    pub max_concurrent_runs: i32,
}
impl ExecutionProperty {
    /// <p>The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.</p>
    pub fn max_concurrent_runs(&self) -> i32 {
        self.max_concurrent_runs
    }
}
impl ExecutionProperty {
    /// Creates a new builder-style object to manufacture [`ExecutionProperty`](crate::types::ExecutionProperty).
    pub fn builder() -> crate::types::builders::ExecutionPropertyBuilder {
        crate::types::builders::ExecutionPropertyBuilder::default()
    }
}

/// A builder for [`ExecutionProperty`](crate::types::ExecutionProperty).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExecutionPropertyBuilder {
    pub(crate) max_concurrent_runs: std::option::Option<i32>,
}
impl ExecutionPropertyBuilder {
    /// <p>The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.</p>
    pub fn max_concurrent_runs(mut self, input: i32) -> Self {
        self.max_concurrent_runs = Some(input);
        self
    }
    /// <p>The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.</p>
    pub fn set_max_concurrent_runs(mut self, input: std::option::Option<i32>) -> Self {
        self.max_concurrent_runs = input;
        self
    }
    /// Consumes the builder and constructs a [`ExecutionProperty`](crate::types::ExecutionProperty).
    pub fn build(self) -> crate::types::ExecutionProperty {
        crate::types::ExecutionProperty {
            max_concurrent_runs: self.max_concurrent_runs.unwrap_or_default(),
        }
    }
}
