// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details for one of the table optimizers returned by the <code>BatchGetTableOptimizer</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchTableOptimizer {
    /// <p>The Catalog ID of the table.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>A <code>TableOptimizer</code> object that contains details on the configuration and last run of a table optimizer.</p>
    pub table_optimizer: ::std::option::Option<crate::types::TableOptimizer>,
}
impl BatchTableOptimizer {
    /// <p>The Catalog ID of the table.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the table.</p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>A <code>TableOptimizer</code> object that contains details on the configuration and last run of a table optimizer.</p>
    pub fn table_optimizer(&self) -> ::std::option::Option<&crate::types::TableOptimizer> {
        self.table_optimizer.as_ref()
    }
}
impl BatchTableOptimizer {
    /// Creates a new builder-style object to manufacture [`BatchTableOptimizer`](crate::types::BatchTableOptimizer).
    pub fn builder() -> crate::types::builders::BatchTableOptimizerBuilder {
        crate::types::builders::BatchTableOptimizerBuilder::default()
    }
}

/// A builder for [`BatchTableOptimizer`](crate::types::BatchTableOptimizer).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchTableOptimizerBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_optimizer: ::std::option::Option<crate::types::TableOptimizer>,
}
impl BatchTableOptimizerBuilder {
    /// <p>The Catalog ID of the table.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Catalog ID of the table.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The Catalog ID of the table.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the database in the catalog in which the table resides.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the table.</p>
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the table.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>A <code>TableOptimizer</code> object that contains details on the configuration and last run of a table optimizer.</p>
    pub fn table_optimizer(mut self, input: crate::types::TableOptimizer) -> Self {
        self.table_optimizer = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>TableOptimizer</code> object that contains details on the configuration and last run of a table optimizer.</p>
    pub fn set_table_optimizer(mut self, input: ::std::option::Option<crate::types::TableOptimizer>) -> Self {
        self.table_optimizer = input;
        self
    }
    /// <p>A <code>TableOptimizer</code> object that contains details on the configuration and last run of a table optimizer.</p>
    pub fn get_table_optimizer(&self) -> &::std::option::Option<crate::types::TableOptimizer> {
        &self.table_optimizer
    }
    /// Consumes the builder and constructs a [`BatchTableOptimizer`](crate::types::BatchTableOptimizer).
    pub fn build(self) -> crate::types::BatchTableOptimizer {
        crate::types::BatchTableOptimizer {
            catalog_id: self.catalog_id,
            database_name: self.database_name,
            table_name: self.table_name,
            table_optimizer: self.table_optimizer,
        }
    }
}
