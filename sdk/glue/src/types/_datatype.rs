// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure representing the datatype of the value.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Datatype {
    /// <p>The datatype of the value.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>A label assigned to the datatype.</p>
    #[doc(hidden)]
    pub label: std::option::Option<std::string::String>,
}
impl Datatype {
    /// <p>The datatype of the value.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A label assigned to the datatype.</p>
    pub fn label(&self) -> std::option::Option<&str> {
        self.label.as_deref()
    }
}
impl Datatype {
    /// Creates a new builder-style object to manufacture [`Datatype`](crate::types::Datatype).
    pub fn builder() -> crate::types::builders::DatatypeBuilder {
        crate::types::builders::DatatypeBuilder::default()
    }
}

/// A builder for [`Datatype`](crate::types::Datatype).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatatypeBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) label: std::option::Option<std::string::String>,
}
impl DatatypeBuilder {
    /// <p>The datatype of the value.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The datatype of the value.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A label assigned to the datatype.</p>
    pub fn label(mut self, input: impl Into<std::string::String>) -> Self {
        self.label = Some(input.into());
        self
    }
    /// <p>A label assigned to the datatype.</p>
    pub fn set_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.label = input;
        self
    }
    /// Consumes the builder and constructs a [`Datatype`](crate::types::Datatype).
    pub fn build(self) -> crate::types::Datatype {
        crate::types::Datatype {
            id: self.id,
            label: self.label,
        }
    }
}
