// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A policy that specifies update behavior for the crawler.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CatalogSchemaChangePolicy {
    /// <p>Whether to use the specified update behavior when the crawler finds a changed schema.</p>
    #[doc(hidden)]
    pub enable_update_catalog: std::option::Option<bool>,
    /// <p>The update behavior when the crawler finds a changed schema.</p>
    #[doc(hidden)]
    pub update_behavior: std::option::Option<crate::types::UpdateCatalogBehavior>,
}
impl CatalogSchemaChangePolicy {
    /// <p>Whether to use the specified update behavior when the crawler finds a changed schema.</p>
    pub fn enable_update_catalog(&self) -> std::option::Option<bool> {
        self.enable_update_catalog
    }
    /// <p>The update behavior when the crawler finds a changed schema.</p>
    pub fn update_behavior(&self) -> std::option::Option<&crate::types::UpdateCatalogBehavior> {
        self.update_behavior.as_ref()
    }
}
impl CatalogSchemaChangePolicy {
    /// Creates a new builder-style object to manufacture [`CatalogSchemaChangePolicy`](crate::types::CatalogSchemaChangePolicy).
    pub fn builder() -> crate::types::builders::CatalogSchemaChangePolicyBuilder {
        crate::types::builders::CatalogSchemaChangePolicyBuilder::default()
    }
}

/// A builder for [`CatalogSchemaChangePolicy`](crate::types::CatalogSchemaChangePolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CatalogSchemaChangePolicyBuilder {
    pub(crate) enable_update_catalog: std::option::Option<bool>,
    pub(crate) update_behavior: std::option::Option<crate::types::UpdateCatalogBehavior>,
}
impl CatalogSchemaChangePolicyBuilder {
    /// <p>Whether to use the specified update behavior when the crawler finds a changed schema.</p>
    pub fn enable_update_catalog(mut self, input: bool) -> Self {
        self.enable_update_catalog = Some(input);
        self
    }
    /// <p>Whether to use the specified update behavior when the crawler finds a changed schema.</p>
    pub fn set_enable_update_catalog(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_update_catalog = input;
        self
    }
    /// <p>The update behavior when the crawler finds a changed schema.</p>
    pub fn update_behavior(mut self, input: crate::types::UpdateCatalogBehavior) -> Self {
        self.update_behavior = Some(input);
        self
    }
    /// <p>The update behavior when the crawler finds a changed schema.</p>
    pub fn set_update_behavior(
        mut self,
        input: std::option::Option<crate::types::UpdateCatalogBehavior>,
    ) -> Self {
        self.update_behavior = input;
        self
    }
    /// Consumes the builder and constructs a [`CatalogSchemaChangePolicy`](crate::types::CatalogSchemaChangePolicy).
    pub fn build(self) -> crate::types::CatalogSchemaChangePolicy {
        crate::types::CatalogSchemaChangePolicy {
            enable_update_catalog: self.enable_update_catalog,
            update_behavior: self.update_behavior,
        }
    }
}
