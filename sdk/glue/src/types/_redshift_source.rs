// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an Amazon Redshift data store.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RedshiftSource {
    /// <p>The name of the Amazon Redshift data store.</p>
    pub name: ::std::string::String,
    /// <p>The database to read from.</p>
    pub database: ::std::string::String,
    /// <p>The database table to read from.</p>
    pub table: ::std::string::String,
    /// <p>The Amazon S3 path where temporary data can be staged when copying out of the database.</p>
    pub redshift_tmp_dir: ::std::option::Option<::std::string::String>,
    /// <p>The IAM role with permissions.</p>
    pub tmp_dir_iam_role: ::std::option::Option<::std::string::String>,
}
impl RedshiftSource {
    /// <p>The name of the Amazon Redshift data store.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The database to read from.</p>
    pub fn database(&self) -> &str {
        use std::ops::Deref;
        self.database.deref()
    }
    /// <p>The database table to read from.</p>
    pub fn table(&self) -> &str {
        use std::ops::Deref;
        self.table.deref()
    }
    /// <p>The Amazon S3 path where temporary data can be staged when copying out of the database.</p>
    pub fn redshift_tmp_dir(&self) -> ::std::option::Option<&str> {
        self.redshift_tmp_dir.as_deref()
    }
    /// <p>The IAM role with permissions.</p>
    pub fn tmp_dir_iam_role(&self) -> ::std::option::Option<&str> {
        self.tmp_dir_iam_role.as_deref()
    }
}
impl RedshiftSource {
    /// Creates a new builder-style object to manufacture [`RedshiftSource`](crate::types::RedshiftSource).
    pub fn builder() -> crate::types::builders::RedshiftSourceBuilder {
        crate::types::builders::RedshiftSourceBuilder::default()
    }
}

/// A builder for [`RedshiftSource`](crate::types::RedshiftSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RedshiftSourceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) database: ::std::option::Option<::std::string::String>,
    pub(crate) table: ::std::option::Option<::std::string::String>,
    pub(crate) redshift_tmp_dir: ::std::option::Option<::std::string::String>,
    pub(crate) tmp_dir_iam_role: ::std::option::Option<::std::string::String>,
}
impl RedshiftSourceBuilder {
    /// <p>The name of the Amazon Redshift data store.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Redshift data store.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Amazon Redshift data store.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The database to read from.</p>
    /// This field is required.
    pub fn database(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database to read from.</p>
    pub fn set_database(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The database to read from.</p>
    pub fn get_database(&self) -> &::std::option::Option<::std::string::String> {
        &self.database
    }
    /// <p>The database table to read from.</p>
    /// This field is required.
    pub fn table(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database table to read from.</p>
    pub fn set_table(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table = input;
        self
    }
    /// <p>The database table to read from.</p>
    pub fn get_table(&self) -> &::std::option::Option<::std::string::String> {
        &self.table
    }
    /// <p>The Amazon S3 path where temporary data can be staged when copying out of the database.</p>
    pub fn redshift_tmp_dir(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redshift_tmp_dir = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 path where temporary data can be staged when copying out of the database.</p>
    pub fn set_redshift_tmp_dir(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redshift_tmp_dir = input;
        self
    }
    /// <p>The Amazon S3 path where temporary data can be staged when copying out of the database.</p>
    pub fn get_redshift_tmp_dir(&self) -> &::std::option::Option<::std::string::String> {
        &self.redshift_tmp_dir
    }
    /// <p>The IAM role with permissions.</p>
    pub fn tmp_dir_iam_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tmp_dir_iam_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role with permissions.</p>
    pub fn set_tmp_dir_iam_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tmp_dir_iam_role = input;
        self
    }
    /// <p>The IAM role with permissions.</p>
    pub fn get_tmp_dir_iam_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.tmp_dir_iam_role
    }
    /// Consumes the builder and constructs a [`RedshiftSource`](crate::types::RedshiftSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::RedshiftSourceBuilder::name)
    /// - [`database`](crate::types::builders::RedshiftSourceBuilder::database)
    /// - [`table`](crate::types::builders::RedshiftSourceBuilder::table)
    pub fn build(self) -> ::std::result::Result<crate::types::RedshiftSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RedshiftSource {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building RedshiftSource",
                )
            })?,
            database: self.database.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database",
                    "database was not specified but it is required when building RedshiftSource",
                )
            })?,
            table: self.table.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table",
                    "table was not specified but it is required when building RedshiftSource",
                )
            })?,
            redshift_tmp_dir: self.redshift_tmp_dir,
            tmp_dir_iam_role: self.tmp_dir_iam_role,
        })
    }
}
