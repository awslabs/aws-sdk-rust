// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A partition that contains unfiltered metadata.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UnfilteredPartition {
    /// <p>The partition object.</p>
    pub partition: ::std::option::Option<crate::types::Partition>,
    /// <p>The list of columns the user has permissions to access.</p>
    pub authorized_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A Boolean value indicating that the partition location is registered with Lake Formation.</p>
    pub is_registered_with_lake_formation: bool,
}
impl UnfilteredPartition {
    /// <p>The partition object.</p>
    pub fn partition(&self) -> ::std::option::Option<&crate::types::Partition> {
        self.partition.as_ref()
    }
    /// <p>The list of columns the user has permissions to access.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.authorized_columns.is_none()`.
    pub fn authorized_columns(&self) -> &[::std::string::String] {
        self.authorized_columns.as_deref().unwrap_or_default()
    }
    /// <p>A Boolean value indicating that the partition location is registered with Lake Formation.</p>
    pub fn is_registered_with_lake_formation(&self) -> bool {
        self.is_registered_with_lake_formation
    }
}
impl UnfilteredPartition {
    /// Creates a new builder-style object to manufacture [`UnfilteredPartition`](crate::types::UnfilteredPartition).
    pub fn builder() -> crate::types::builders::UnfilteredPartitionBuilder {
        crate::types::builders::UnfilteredPartitionBuilder::default()
    }
}

/// A builder for [`UnfilteredPartition`](crate::types::UnfilteredPartition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UnfilteredPartitionBuilder {
    pub(crate) partition: ::std::option::Option<crate::types::Partition>,
    pub(crate) authorized_columns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) is_registered_with_lake_formation: ::std::option::Option<bool>,
}
impl UnfilteredPartitionBuilder {
    /// <p>The partition object.</p>
    pub fn partition(mut self, input: crate::types::Partition) -> Self {
        self.partition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The partition object.</p>
    pub fn set_partition(mut self, input: ::std::option::Option<crate::types::Partition>) -> Self {
        self.partition = input;
        self
    }
    /// <p>The partition object.</p>
    pub fn get_partition(&self) -> &::std::option::Option<crate::types::Partition> {
        &self.partition
    }
    /// Appends an item to `authorized_columns`.
    ///
    /// To override the contents of this collection use [`set_authorized_columns`](Self::set_authorized_columns).
    ///
    /// <p>The list of columns the user has permissions to access.</p>
    pub fn authorized_columns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.authorized_columns.unwrap_or_default();
        v.push(input.into());
        self.authorized_columns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of columns the user has permissions to access.</p>
    pub fn set_authorized_columns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.authorized_columns = input;
        self
    }
    /// <p>The list of columns the user has permissions to access.</p>
    pub fn get_authorized_columns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.authorized_columns
    }
    /// <p>A Boolean value indicating that the partition location is registered with Lake Formation.</p>
    pub fn is_registered_with_lake_formation(mut self, input: bool) -> Self {
        self.is_registered_with_lake_formation = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value indicating that the partition location is registered with Lake Formation.</p>
    pub fn set_is_registered_with_lake_formation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_registered_with_lake_formation = input;
        self
    }
    /// <p>A Boolean value indicating that the partition location is registered with Lake Formation.</p>
    pub fn get_is_registered_with_lake_formation(&self) -> &::std::option::Option<bool> {
        &self.is_registered_with_lake_formation
    }
    /// Consumes the builder and constructs a [`UnfilteredPartition`](crate::types::UnfilteredPartition).
    pub fn build(self) -> crate::types::UnfilteredPartition {
        crate::types::UnfilteredPartition {
            partition: self.partition,
            authorized_columns: self.authorized_columns,
            is_registered_with_lake_formation: self.is_registered_with_lake_formation.unwrap_or_default(),
        }
    }
}
