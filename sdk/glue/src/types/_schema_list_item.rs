// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains minimal details for a schema.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SchemaListItem {
    /// <p>the name of the registry where the schema resides.</p>
    #[doc(hidden)]
    pub registry_name: std::option::Option<std::string::String>,
    /// <p>The name of the schema.</p>
    #[doc(hidden)]
    pub schema_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the schema.</p>
    #[doc(hidden)]
    pub schema_arn: std::option::Option<std::string::String>,
    /// <p>A description for the schema.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The status of the schema.</p>
    #[doc(hidden)]
    pub schema_status: std::option::Option<crate::types::SchemaStatus>,
    /// <p>The date and time that a schema was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<std::string::String>,
    /// <p>The date and time that a schema was updated.</p>
    #[doc(hidden)]
    pub updated_time: std::option::Option<std::string::String>,
}
impl SchemaListItem {
    /// <p>the name of the registry where the schema resides.</p>
    pub fn registry_name(&self) -> std::option::Option<&str> {
        self.registry_name.as_deref()
    }
    /// <p>The name of the schema.</p>
    pub fn schema_name(&self) -> std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the schema.</p>
    pub fn schema_arn(&self) -> std::option::Option<&str> {
        self.schema_arn.as_deref()
    }
    /// <p>A description for the schema.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the schema.</p>
    pub fn schema_status(&self) -> std::option::Option<&crate::types::SchemaStatus> {
        self.schema_status.as_ref()
    }
    /// <p>The date and time that a schema was created.</p>
    pub fn created_time(&self) -> std::option::Option<&str> {
        self.created_time.as_deref()
    }
    /// <p>The date and time that a schema was updated.</p>
    pub fn updated_time(&self) -> std::option::Option<&str> {
        self.updated_time.as_deref()
    }
}
impl SchemaListItem {
    /// Creates a new builder-style object to manufacture [`SchemaListItem`](crate::types::SchemaListItem).
    pub fn builder() -> crate::types::builders::SchemaListItemBuilder {
        crate::types::builders::SchemaListItemBuilder::default()
    }
}

/// A builder for [`SchemaListItem`](crate::types::SchemaListItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SchemaListItemBuilder {
    pub(crate) registry_name: std::option::Option<std::string::String>,
    pub(crate) schema_name: std::option::Option<std::string::String>,
    pub(crate) schema_arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) schema_status: std::option::Option<crate::types::SchemaStatus>,
    pub(crate) created_time: std::option::Option<std::string::String>,
    pub(crate) updated_time: std::option::Option<std::string::String>,
}
impl SchemaListItemBuilder {
    /// <p>the name of the registry where the schema resides.</p>
    pub fn registry_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_name = Some(input.into());
        self
    }
    /// <p>the name of the registry where the schema resides.</p>
    pub fn set_registry_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_name = input;
        self
    }
    /// <p>The name of the schema.</p>
    pub fn schema_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_name = Some(input.into());
        self
    }
    /// <p>The name of the schema.</p>
    pub fn set_schema_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the schema.</p>
    pub fn schema_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the schema.</p>
    pub fn set_schema_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_arn = input;
        self
    }
    /// <p>A description for the schema.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the schema.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The status of the schema.</p>
    pub fn schema_status(mut self, input: crate::types::SchemaStatus) -> Self {
        self.schema_status = Some(input);
        self
    }
    /// <p>The status of the schema.</p>
    pub fn set_schema_status(
        mut self,
        input: std::option::Option<crate::types::SchemaStatus>,
    ) -> Self {
        self.schema_status = input;
        self
    }
    /// <p>The date and time that a schema was created.</p>
    pub fn created_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_time = Some(input.into());
        self
    }
    /// <p>The date and time that a schema was created.</p>
    pub fn set_created_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time that a schema was updated.</p>
    pub fn updated_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.updated_time = Some(input.into());
        self
    }
    /// <p>The date and time that a schema was updated.</p>
    pub fn set_updated_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.updated_time = input;
        self
    }
    /// Consumes the builder and constructs a [`SchemaListItem`](crate::types::SchemaListItem).
    pub fn build(self) -> crate::types::SchemaListItem {
        crate::types::SchemaListItem {
            registry_name: self.registry_name,
            schema_name: self.schema_name,
            schema_arn: self.schema_arn,
            description: self.description,
            schema_status: self.schema_status,
            created_time: self.created_time,
            updated_time: self.updated_time,
        }
    }
}
