// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a grok classifier to update when passed to <code>UpdateClassifier</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateGrokClassifierRequest {
    /// <p>The name of the <code>GrokClassifier</code>.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.</p>
    #[doc(hidden)]
    pub classification: std::option::Option<std::string::String>,
    /// <p>The grok pattern used by this classifier.</p>
    #[doc(hidden)]
    pub grok_pattern: std::option::Option<std::string::String>,
    /// <p>Optional custom grok patterns used by this classifier.</p>
    #[doc(hidden)]
    pub custom_patterns: std::option::Option<std::string::String>,
}
impl UpdateGrokClassifierRequest {
    /// <p>The name of the <code>GrokClassifier</code>.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.</p>
    pub fn classification(&self) -> std::option::Option<&str> {
        self.classification.as_deref()
    }
    /// <p>The grok pattern used by this classifier.</p>
    pub fn grok_pattern(&self) -> std::option::Option<&str> {
        self.grok_pattern.as_deref()
    }
    /// <p>Optional custom grok patterns used by this classifier.</p>
    pub fn custom_patterns(&self) -> std::option::Option<&str> {
        self.custom_patterns.as_deref()
    }
}
impl UpdateGrokClassifierRequest {
    /// Creates a new builder-style object to manufacture [`UpdateGrokClassifierRequest`](crate::types::UpdateGrokClassifierRequest).
    pub fn builder() -> crate::types::builders::UpdateGrokClassifierRequestBuilder {
        crate::types::builders::UpdateGrokClassifierRequestBuilder::default()
    }
}

/// A builder for [`UpdateGrokClassifierRequest`](crate::types::UpdateGrokClassifierRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateGrokClassifierRequestBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) classification: std::option::Option<std::string::String>,
    pub(crate) grok_pattern: std::option::Option<std::string::String>,
    pub(crate) custom_patterns: std::option::Option<std::string::String>,
}
impl UpdateGrokClassifierRequestBuilder {
    /// <p>The name of the <code>GrokClassifier</code>.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the <code>GrokClassifier</code>.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.</p>
    pub fn classification(mut self, input: impl Into<std::string::String>) -> Self {
        self.classification = Some(input.into());
        self
    }
    /// <p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.</p>
    pub fn set_classification(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.classification = input;
        self
    }
    /// <p>The grok pattern used by this classifier.</p>
    pub fn grok_pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.grok_pattern = Some(input.into());
        self
    }
    /// <p>The grok pattern used by this classifier.</p>
    pub fn set_grok_pattern(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.grok_pattern = input;
        self
    }
    /// <p>Optional custom grok patterns used by this classifier.</p>
    pub fn custom_patterns(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_patterns = Some(input.into());
        self
    }
    /// <p>Optional custom grok patterns used by this classifier.</p>
    pub fn set_custom_patterns(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.custom_patterns = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateGrokClassifierRequest`](crate::types::UpdateGrokClassifierRequest).
    pub fn build(self) -> crate::types::UpdateGrokClassifierRequest {
        crate::types::UpdateGrokClassifierRequest {
            name: self.name,
            classification: self.classification,
            grok_pattern: self.grok_pattern,
            custom_patterns: self.custom_patterns,
        }
    }
}
