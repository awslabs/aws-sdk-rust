// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure used to define a table.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TableInput {
    /// <p>The table name. For Hive compatibility, this is folded to lowercase when it is stored.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the table.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The table owner.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<std::string::String>,
    /// <p>The last time that the table was accessed.</p>
    #[doc(hidden)]
    pub last_access_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last time that column statistics were computed for this table.</p>
    #[doc(hidden)]
    pub last_analyzed_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The retention time for this table.</p>
    #[doc(hidden)]
    pub retention: i32,
    /// <p>A storage descriptor containing information about the physical storage of this table.</p>
    #[doc(hidden)]
    pub storage_descriptor: std::option::Option<crate::types::StorageDescriptor>,
    /// <p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p>
    /// <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p>
    /// <p> <code>"PartitionKeys": []</code> </p>
    #[doc(hidden)]
    pub partition_keys: std::option::Option<std::vec::Vec<crate::types::Column>>,
    /// <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>
    #[doc(hidden)]
    pub view_original_text: std::option::Option<std::string::String>,
    /// <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>
    #[doc(hidden)]
    pub view_expanded_text: std::option::Option<std::string::String>,
    /// <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>
    #[doc(hidden)]
    pub table_type: std::option::Option<std::string::String>,
    /// <p>These key-value pairs define properties associated with the table.</p>
    #[doc(hidden)]
    pub parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>
    #[doc(hidden)]
    pub target_table: std::option::Option<crate::types::TableIdentifier>,
}
impl TableInput {
    /// <p>The table name. For Hive compatibility, this is folded to lowercase when it is stored.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the table.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The table owner.</p>
    pub fn owner(&self) -> std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>The last time that the table was accessed.</p>
    pub fn last_access_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_access_time.as_ref()
    }
    /// <p>The last time that column statistics were computed for this table.</p>
    pub fn last_analyzed_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_analyzed_time.as_ref()
    }
    /// <p>The retention time for this table.</p>
    pub fn retention(&self) -> i32 {
        self.retention
    }
    /// <p>A storage descriptor containing information about the physical storage of this table.</p>
    pub fn storage_descriptor(&self) -> std::option::Option<&crate::types::StorageDescriptor> {
        self.storage_descriptor.as_ref()
    }
    /// <p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p>
    /// <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p>
    /// <p> <code>"PartitionKeys": []</code> </p>
    pub fn partition_keys(&self) -> std::option::Option<&[crate::types::Column]> {
        self.partition_keys.as_deref()
    }
    /// <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>
    pub fn view_original_text(&self) -> std::option::Option<&str> {
        self.view_original_text.as_deref()
    }
    /// <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>
    pub fn view_expanded_text(&self) -> std::option::Option<&str> {
        self.view_expanded_text.as_deref()
    }
    /// <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>
    pub fn table_type(&self) -> std::option::Option<&str> {
        self.table_type.as_deref()
    }
    /// <p>These key-value pairs define properties associated with the table.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.parameters.as_ref()
    }
    /// <p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>
    pub fn target_table(&self) -> std::option::Option<&crate::types::TableIdentifier> {
        self.target_table.as_ref()
    }
}
impl TableInput {
    /// Creates a new builder-style object to manufacture [`TableInput`](crate::types::TableInput).
    pub fn builder() -> crate::types::builders::TableInputBuilder {
        crate::types::builders::TableInputBuilder::default()
    }
}

/// A builder for [`TableInput`](crate::types::TableInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TableInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) owner: std::option::Option<std::string::String>,
    pub(crate) last_access_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_analyzed_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) retention: std::option::Option<i32>,
    pub(crate) storage_descriptor: std::option::Option<crate::types::StorageDescriptor>,
    pub(crate) partition_keys: std::option::Option<std::vec::Vec<crate::types::Column>>,
    pub(crate) view_original_text: std::option::Option<std::string::String>,
    pub(crate) view_expanded_text: std::option::Option<std::string::String>,
    pub(crate) table_type: std::option::Option<std::string::String>,
    pub(crate) parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) target_table: std::option::Option<crate::types::TableIdentifier>,
}
impl TableInputBuilder {
    /// <p>The table name. For Hive compatibility, this is folded to lowercase when it is stored.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The table name. For Hive compatibility, this is folded to lowercase when it is stored.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description of the table.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the table.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The table owner.</p>
    pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner = Some(input.into());
        self
    }
    /// <p>The table owner.</p>
    pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The last time that the table was accessed.</p>
    pub fn last_access_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_access_time = Some(input);
        self
    }
    /// <p>The last time that the table was accessed.</p>
    pub fn set_last_access_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_access_time = input;
        self
    }
    /// <p>The last time that column statistics were computed for this table.</p>
    pub fn last_analyzed_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_analyzed_time = Some(input);
        self
    }
    /// <p>The last time that column statistics were computed for this table.</p>
    pub fn set_last_analyzed_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_analyzed_time = input;
        self
    }
    /// <p>The retention time for this table.</p>
    pub fn retention(mut self, input: i32) -> Self {
        self.retention = Some(input);
        self
    }
    /// <p>The retention time for this table.</p>
    pub fn set_retention(mut self, input: std::option::Option<i32>) -> Self {
        self.retention = input;
        self
    }
    /// <p>A storage descriptor containing information about the physical storage of this table.</p>
    pub fn storage_descriptor(mut self, input: crate::types::StorageDescriptor) -> Self {
        self.storage_descriptor = Some(input);
        self
    }
    /// <p>A storage descriptor containing information about the physical storage of this table.</p>
    pub fn set_storage_descriptor(
        mut self,
        input: std::option::Option<crate::types::StorageDescriptor>,
    ) -> Self {
        self.storage_descriptor = input;
        self
    }
    /// Appends an item to `partition_keys`.
    ///
    /// To override the contents of this collection use [`set_partition_keys`](Self::set_partition_keys).
    ///
    /// <p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p>
    /// <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p>
    /// <p> <code>"PartitionKeys": []</code> </p>
    pub fn partition_keys(mut self, input: crate::types::Column) -> Self {
        let mut v = self.partition_keys.unwrap_or_default();
        v.push(input);
        self.partition_keys = Some(v);
        self
    }
    /// <p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p>
    /// <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p>
    /// <p> <code>"PartitionKeys": []</code> </p>
    pub fn set_partition_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Column>>,
    ) -> Self {
        self.partition_keys = input;
        self
    }
    /// <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>
    pub fn view_original_text(mut self, input: impl Into<std::string::String>) -> Self {
        self.view_original_text = Some(input.into());
        self
    }
    /// <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>
    pub fn set_view_original_text(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.view_original_text = input;
        self
    }
    /// <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>
    pub fn view_expanded_text(mut self, input: impl Into<std::string::String>) -> Self {
        self.view_expanded_text = Some(input.into());
        self
    }
    /// <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>
    pub fn set_view_expanded_text(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.view_expanded_text = input;
        self
    }
    /// <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>
    pub fn table_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_type = Some(input.into());
        self
    }
    /// <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>
    pub fn set_table_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_type = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>These key-value pairs define properties associated with the table.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = Some(hash_map);
        self
    }
    /// <p>These key-value pairs define properties associated with the table.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>
    pub fn target_table(mut self, input: crate::types::TableIdentifier) -> Self {
        self.target_table = Some(input);
        self
    }
    /// <p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>
    pub fn set_target_table(
        mut self,
        input: std::option::Option<crate::types::TableIdentifier>,
    ) -> Self {
        self.target_table = input;
        self
    }
    /// Consumes the builder and constructs a [`TableInput`](crate::types::TableInput).
    pub fn build(self) -> crate::types::TableInput {
        crate::types::TableInput {
            name: self.name,
            description: self.description,
            owner: self.owner,
            last_access_time: self.last_access_time,
            last_analyzed_time: self.last_analyzed_time,
            retention: self.retention.unwrap_or_default(),
            storage_descriptor: self.storage_descriptor,
            partition_keys: self.partition_keys,
            view_original_text: self.view_original_text,
            view_expanded_text: self.view_expanded_text,
            table_type: self.table_type,
            parameters: self.parameters,
            target_table: self.target_table,
        }
    }
}
