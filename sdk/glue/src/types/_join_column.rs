// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a column to be joined.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JoinColumn {
    /// <p>The column to be joined.</p>
    #[doc(hidden)]
    pub from: std::option::Option<std::string::String>,
    /// <p>The key of the column to be joined.</p>
    #[doc(hidden)]
    pub keys: std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
}
impl JoinColumn {
    /// <p>The column to be joined.</p>
    pub fn from(&self) -> std::option::Option<&str> {
        self.from.as_deref()
    }
    /// <p>The key of the column to be joined.</p>
    pub fn keys(&self) -> std::option::Option<&[std::vec::Vec<std::string::String>]> {
        self.keys.as_deref()
    }
}
impl JoinColumn {
    /// Creates a new builder-style object to manufacture [`JoinColumn`](crate::types::JoinColumn).
    pub fn builder() -> crate::types::builders::JoinColumnBuilder {
        crate::types::builders::JoinColumnBuilder::default()
    }
}

/// A builder for [`JoinColumn`](crate::types::JoinColumn).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JoinColumnBuilder {
    pub(crate) from: std::option::Option<std::string::String>,
    pub(crate) keys: std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
}
impl JoinColumnBuilder {
    /// <p>The column to be joined.</p>
    pub fn from(mut self, input: impl Into<std::string::String>) -> Self {
        self.from = Some(input.into());
        self
    }
    /// <p>The column to be joined.</p>
    pub fn set_from(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.from = input;
        self
    }
    /// Appends an item to `keys`.
    ///
    /// To override the contents of this collection use [`set_keys`](Self::set_keys).
    ///
    /// <p>The key of the column to be joined.</p>
    pub fn keys(mut self, input: std::vec::Vec<std::string::String>) -> Self {
        let mut v = self.keys.unwrap_or_default();
        v.push(input);
        self.keys = Some(v);
        self
    }
    /// <p>The key of the column to be joined.</p>
    pub fn set_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
    ) -> Self {
        self.keys = input;
        self
    }
    /// Consumes the builder and constructs a [`JoinColumn`](crate::types::JoinColumn).
    pub fn build(self) -> crate::types::JoinColumn {
        crate::types::JoinColumn {
            from: self.from,
            keys: self.keys,
        }
    }
}
