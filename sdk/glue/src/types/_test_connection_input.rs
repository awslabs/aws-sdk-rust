// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that is used to specify testing a connection to a service.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestConnectionInput {
    /// <p>The type of connection to test. This operation is only available for the <code>JDBC</code> or <code>SALESFORCE</code> connection types.</p>
    pub connection_type: crate::types::ConnectionType,
    /// <p>The key-value pairs that define parameters for the connection.</p>
    /// <p>JDBC connections use the following connection properties:</p>
    /// <ul>
    /// <li>
    /// <p>Required: All of (<code>HOST</code>, <code>PORT</code>, <code>JDBC_ENGINE</code>) or <code>JDBC_CONNECTION_URL</code>.</p></li>
    /// <li>
    /// <p>Required: All of (<code>USERNAME</code>, <code>PASSWORD</code>) or <code>SECRET_ID</code>.</p></li>
    /// <li>
    /// <p>Optional: <code>JDBC_ENFORCE_SSL</code>, <code>CUSTOM_JDBC_CERT</code>, <code>CUSTOM_JDBC_CERT_STRING</code>, <code>SKIP_CUSTOM_JDBC_CERT_VALIDATION</code>. These parameters are used to configure SSL with JDBC.</p></li>
    /// </ul>
    /// <p>SALESFORCE connections require the <code>AuthenticationConfiguration</code> member to be configured.</p>
    pub connection_properties: ::std::collections::HashMap<crate::types::ConnectionPropertyKey, ::std::string::String>,
    /// <p>A structure containing the authentication configuration in the TestConnection request. Required for a connection to Salesforce using OAuth authentication.</p>
    pub authentication_configuration: ::std::option::Option<crate::types::AuthenticationConfigurationInput>,
}
impl TestConnectionInput {
    /// <p>The type of connection to test. This operation is only available for the <code>JDBC</code> or <code>SALESFORCE</code> connection types.</p>
    pub fn connection_type(&self) -> &crate::types::ConnectionType {
        &self.connection_type
    }
    /// <p>The key-value pairs that define parameters for the connection.</p>
    /// <p>JDBC connections use the following connection properties:</p>
    /// <ul>
    /// <li>
    /// <p>Required: All of (<code>HOST</code>, <code>PORT</code>, <code>JDBC_ENGINE</code>) or <code>JDBC_CONNECTION_URL</code>.</p></li>
    /// <li>
    /// <p>Required: All of (<code>USERNAME</code>, <code>PASSWORD</code>) or <code>SECRET_ID</code>.</p></li>
    /// <li>
    /// <p>Optional: <code>JDBC_ENFORCE_SSL</code>, <code>CUSTOM_JDBC_CERT</code>, <code>CUSTOM_JDBC_CERT_STRING</code>, <code>SKIP_CUSTOM_JDBC_CERT_VALIDATION</code>. These parameters are used to configure SSL with JDBC.</p></li>
    /// </ul>
    /// <p>SALESFORCE connections require the <code>AuthenticationConfiguration</code> member to be configured.</p>
    pub fn connection_properties(&self) -> &::std::collections::HashMap<crate::types::ConnectionPropertyKey, ::std::string::String> {
        &self.connection_properties
    }
    /// <p>A structure containing the authentication configuration in the TestConnection request. Required for a connection to Salesforce using OAuth authentication.</p>
    pub fn authentication_configuration(&self) -> ::std::option::Option<&crate::types::AuthenticationConfigurationInput> {
        self.authentication_configuration.as_ref()
    }
}
impl TestConnectionInput {
    /// Creates a new builder-style object to manufacture [`TestConnectionInput`](crate::types::TestConnectionInput).
    pub fn builder() -> crate::types::builders::TestConnectionInputBuilder {
        crate::types::builders::TestConnectionInputBuilder::default()
    }
}

/// A builder for [`TestConnectionInput`](crate::types::TestConnectionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TestConnectionInputBuilder {
    pub(crate) connection_type: ::std::option::Option<crate::types::ConnectionType>,
    pub(crate) connection_properties: ::std::option::Option<::std::collections::HashMap<crate::types::ConnectionPropertyKey, ::std::string::String>>,
    pub(crate) authentication_configuration: ::std::option::Option<crate::types::AuthenticationConfigurationInput>,
}
impl TestConnectionInputBuilder {
    /// <p>The type of connection to test. This operation is only available for the <code>JDBC</code> or <code>SALESFORCE</code> connection types.</p>
    /// This field is required.
    pub fn connection_type(mut self, input: crate::types::ConnectionType) -> Self {
        self.connection_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of connection to test. This operation is only available for the <code>JDBC</code> or <code>SALESFORCE</code> connection types.</p>
    pub fn set_connection_type(mut self, input: ::std::option::Option<crate::types::ConnectionType>) -> Self {
        self.connection_type = input;
        self
    }
    /// <p>The type of connection to test. This operation is only available for the <code>JDBC</code> or <code>SALESFORCE</code> connection types.</p>
    pub fn get_connection_type(&self) -> &::std::option::Option<crate::types::ConnectionType> {
        &self.connection_type
    }
    /// Adds a key-value pair to `connection_properties`.
    ///
    /// To override the contents of this collection use [`set_connection_properties`](Self::set_connection_properties).
    ///
    /// <p>The key-value pairs that define parameters for the connection.</p>
    /// <p>JDBC connections use the following connection properties:</p>
    /// <ul>
    /// <li>
    /// <p>Required: All of (<code>HOST</code>, <code>PORT</code>, <code>JDBC_ENGINE</code>) or <code>JDBC_CONNECTION_URL</code>.</p></li>
    /// <li>
    /// <p>Required: All of (<code>USERNAME</code>, <code>PASSWORD</code>) or <code>SECRET_ID</code>.</p></li>
    /// <li>
    /// <p>Optional: <code>JDBC_ENFORCE_SSL</code>, <code>CUSTOM_JDBC_CERT</code>, <code>CUSTOM_JDBC_CERT_STRING</code>, <code>SKIP_CUSTOM_JDBC_CERT_VALIDATION</code>. These parameters are used to configure SSL with JDBC.</p></li>
    /// </ul>
    /// <p>SALESFORCE connections require the <code>AuthenticationConfiguration</code> member to be configured.</p>
    pub fn connection_properties(mut self, k: crate::types::ConnectionPropertyKey, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.connection_properties.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.connection_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The key-value pairs that define parameters for the connection.</p>
    /// <p>JDBC connections use the following connection properties:</p>
    /// <ul>
    /// <li>
    /// <p>Required: All of (<code>HOST</code>, <code>PORT</code>, <code>JDBC_ENGINE</code>) or <code>JDBC_CONNECTION_URL</code>.</p></li>
    /// <li>
    /// <p>Required: All of (<code>USERNAME</code>, <code>PASSWORD</code>) or <code>SECRET_ID</code>.</p></li>
    /// <li>
    /// <p>Optional: <code>JDBC_ENFORCE_SSL</code>, <code>CUSTOM_JDBC_CERT</code>, <code>CUSTOM_JDBC_CERT_STRING</code>, <code>SKIP_CUSTOM_JDBC_CERT_VALIDATION</code>. These parameters are used to configure SSL with JDBC.</p></li>
    /// </ul>
    /// <p>SALESFORCE connections require the <code>AuthenticationConfiguration</code> member to be configured.</p>
    pub fn set_connection_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::ConnectionPropertyKey, ::std::string::String>>,
    ) -> Self {
        self.connection_properties = input;
        self
    }
    /// <p>The key-value pairs that define parameters for the connection.</p>
    /// <p>JDBC connections use the following connection properties:</p>
    /// <ul>
    /// <li>
    /// <p>Required: All of (<code>HOST</code>, <code>PORT</code>, <code>JDBC_ENGINE</code>) or <code>JDBC_CONNECTION_URL</code>.</p></li>
    /// <li>
    /// <p>Required: All of (<code>USERNAME</code>, <code>PASSWORD</code>) or <code>SECRET_ID</code>.</p></li>
    /// <li>
    /// <p>Optional: <code>JDBC_ENFORCE_SSL</code>, <code>CUSTOM_JDBC_CERT</code>, <code>CUSTOM_JDBC_CERT_STRING</code>, <code>SKIP_CUSTOM_JDBC_CERT_VALIDATION</code>. These parameters are used to configure SSL with JDBC.</p></li>
    /// </ul>
    /// <p>SALESFORCE connections require the <code>AuthenticationConfiguration</code> member to be configured.</p>
    pub fn get_connection_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::ConnectionPropertyKey, ::std::string::String>> {
        &self.connection_properties
    }
    /// <p>A structure containing the authentication configuration in the TestConnection request. Required for a connection to Salesforce using OAuth authentication.</p>
    pub fn authentication_configuration(mut self, input: crate::types::AuthenticationConfigurationInput) -> Self {
        self.authentication_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure containing the authentication configuration in the TestConnection request. Required for a connection to Salesforce using OAuth authentication.</p>
    pub fn set_authentication_configuration(mut self, input: ::std::option::Option<crate::types::AuthenticationConfigurationInput>) -> Self {
        self.authentication_configuration = input;
        self
    }
    /// <p>A structure containing the authentication configuration in the TestConnection request. Required for a connection to Salesforce using OAuth authentication.</p>
    pub fn get_authentication_configuration(&self) -> &::std::option::Option<crate::types::AuthenticationConfigurationInput> {
        &self.authentication_configuration
    }
    /// Consumes the builder and constructs a [`TestConnectionInput`](crate::types::TestConnectionInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`connection_type`](crate::types::builders::TestConnectionInputBuilder::connection_type)
    /// - [`connection_properties`](crate::types::builders::TestConnectionInputBuilder::connection_properties)
    pub fn build(self) -> ::std::result::Result<crate::types::TestConnectionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TestConnectionInput {
            connection_type: self.connection_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_type",
                    "connection_type was not specified but it is required when building TestConnectionInput",
                )
            })?,
            connection_properties: self.connection_properties.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_properties",
                    "connection_properties was not specified but it is required when building TestConnectionInput",
                )
            })?,
            authentication_configuration: self.authentication_configuration,
        })
    }
}
