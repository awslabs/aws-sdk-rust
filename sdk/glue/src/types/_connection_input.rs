// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that is used to specify a connection to create or update.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConnectionInput {
    /// <p>The name of the connection.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the connection.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The type of the connection. Currently, these types are supported:</p>
    /// <ul>
    /// <li> <p> <code>JDBC</code> - Designates a connection to a database through Java Database Connectivity (JDBC).</p> </li>
    /// <li> <p> <code>KAFKA</code> - Designates a connection to an Apache Kafka streaming platform.</p> </li>
    /// <li> <p> <code>MONGODB</code> - Designates a connection to a MongoDB document database.</p> </li>
    /// <li> <p> <code>NETWORK</code> - Designates a network connection to a data source within an Amazon Virtual Private Cloud environment (Amazon VPC).</p> </li>
    /// <li> <p> <code>MARKETPLACE</code> - Uses configuration settings contained in a connector purchased from Amazon Web Services Marketplace to read from and write to data stores that are not natively supported by Glue.</p> </li>
    /// <li> <p> <code>CUSTOM</code> - Uses configuration settings contained in a custom connector to read from and write to data stores that are not natively supported by Glue.</p> </li>
    /// </ul>
    /// <p>SFTP is not supported.</p>
    #[doc(hidden)]
    pub connection_type: std::option::Option<crate::types::ConnectionType>,
    /// <p>A list of criteria that can be used in selecting this connection.</p>
    #[doc(hidden)]
    pub match_criteria: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>These key-value pairs define parameters for the connection.</p>
    #[doc(hidden)]
    pub connection_properties: std::option::Option<
        std::collections::HashMap<crate::types::ConnectionPropertyKey, std::string::String>,
    >,
    /// <p>A map of physical connection requirements, such as virtual private cloud (VPC) and <code>SecurityGroup</code>, that are needed to successfully make this connection.</p>
    #[doc(hidden)]
    pub physical_connection_requirements:
        std::option::Option<crate::types::PhysicalConnectionRequirements>,
}
impl ConnectionInput {
    /// <p>The name of the connection.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the connection.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of the connection. Currently, these types are supported:</p>
    /// <ul>
    /// <li> <p> <code>JDBC</code> - Designates a connection to a database through Java Database Connectivity (JDBC).</p> </li>
    /// <li> <p> <code>KAFKA</code> - Designates a connection to an Apache Kafka streaming platform.</p> </li>
    /// <li> <p> <code>MONGODB</code> - Designates a connection to a MongoDB document database.</p> </li>
    /// <li> <p> <code>NETWORK</code> - Designates a network connection to a data source within an Amazon Virtual Private Cloud environment (Amazon VPC).</p> </li>
    /// <li> <p> <code>MARKETPLACE</code> - Uses configuration settings contained in a connector purchased from Amazon Web Services Marketplace to read from and write to data stores that are not natively supported by Glue.</p> </li>
    /// <li> <p> <code>CUSTOM</code> - Uses configuration settings contained in a custom connector to read from and write to data stores that are not natively supported by Glue.</p> </li>
    /// </ul>
    /// <p>SFTP is not supported.</p>
    pub fn connection_type(&self) -> std::option::Option<&crate::types::ConnectionType> {
        self.connection_type.as_ref()
    }
    /// <p>A list of criteria that can be used in selecting this connection.</p>
    pub fn match_criteria(&self) -> std::option::Option<&[std::string::String]> {
        self.match_criteria.as_deref()
    }
    /// <p>These key-value pairs define parameters for the connection.</p>
    pub fn connection_properties(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<crate::types::ConnectionPropertyKey, std::string::String>,
    > {
        self.connection_properties.as_ref()
    }
    /// <p>A map of physical connection requirements, such as virtual private cloud (VPC) and <code>SecurityGroup</code>, that are needed to successfully make this connection.</p>
    pub fn physical_connection_requirements(
        &self,
    ) -> std::option::Option<&crate::types::PhysicalConnectionRequirements> {
        self.physical_connection_requirements.as_ref()
    }
}
impl ConnectionInput {
    /// Creates a new builder-style object to manufacture [`ConnectionInput`](crate::types::ConnectionInput).
    pub fn builder() -> crate::types::builders::ConnectionInputBuilder {
        crate::types::builders::ConnectionInputBuilder::default()
    }
}

/// A builder for [`ConnectionInput`](crate::types::ConnectionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectionInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) connection_type: std::option::Option<crate::types::ConnectionType>,
    pub(crate) match_criteria: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) connection_properties: std::option::Option<
        std::collections::HashMap<crate::types::ConnectionPropertyKey, std::string::String>,
    >,
    pub(crate) physical_connection_requirements:
        std::option::Option<crate::types::PhysicalConnectionRequirements>,
}
impl ConnectionInputBuilder {
    /// <p>The name of the connection.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the connection.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the connection.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the connection.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The type of the connection. Currently, these types are supported:</p>
    /// <ul>
    /// <li> <p> <code>JDBC</code> - Designates a connection to a database through Java Database Connectivity (JDBC).</p> </li>
    /// <li> <p> <code>KAFKA</code> - Designates a connection to an Apache Kafka streaming platform.</p> </li>
    /// <li> <p> <code>MONGODB</code> - Designates a connection to a MongoDB document database.</p> </li>
    /// <li> <p> <code>NETWORK</code> - Designates a network connection to a data source within an Amazon Virtual Private Cloud environment (Amazon VPC).</p> </li>
    /// <li> <p> <code>MARKETPLACE</code> - Uses configuration settings contained in a connector purchased from Amazon Web Services Marketplace to read from and write to data stores that are not natively supported by Glue.</p> </li>
    /// <li> <p> <code>CUSTOM</code> - Uses configuration settings contained in a custom connector to read from and write to data stores that are not natively supported by Glue.</p> </li>
    /// </ul>
    /// <p>SFTP is not supported.</p>
    pub fn connection_type(mut self, input: crate::types::ConnectionType) -> Self {
        self.connection_type = Some(input);
        self
    }
    /// <p>The type of the connection. Currently, these types are supported:</p>
    /// <ul>
    /// <li> <p> <code>JDBC</code> - Designates a connection to a database through Java Database Connectivity (JDBC).</p> </li>
    /// <li> <p> <code>KAFKA</code> - Designates a connection to an Apache Kafka streaming platform.</p> </li>
    /// <li> <p> <code>MONGODB</code> - Designates a connection to a MongoDB document database.</p> </li>
    /// <li> <p> <code>NETWORK</code> - Designates a network connection to a data source within an Amazon Virtual Private Cloud environment (Amazon VPC).</p> </li>
    /// <li> <p> <code>MARKETPLACE</code> - Uses configuration settings contained in a connector purchased from Amazon Web Services Marketplace to read from and write to data stores that are not natively supported by Glue.</p> </li>
    /// <li> <p> <code>CUSTOM</code> - Uses configuration settings contained in a custom connector to read from and write to data stores that are not natively supported by Glue.</p> </li>
    /// </ul>
    /// <p>SFTP is not supported.</p>
    pub fn set_connection_type(
        mut self,
        input: std::option::Option<crate::types::ConnectionType>,
    ) -> Self {
        self.connection_type = input;
        self
    }
    /// Appends an item to `match_criteria`.
    ///
    /// To override the contents of this collection use [`set_match_criteria`](Self::set_match_criteria).
    ///
    /// <p>A list of criteria that can be used in selecting this connection.</p>
    pub fn match_criteria(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.match_criteria.unwrap_or_default();
        v.push(input.into());
        self.match_criteria = Some(v);
        self
    }
    /// <p>A list of criteria that can be used in selecting this connection.</p>
    pub fn set_match_criteria(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.match_criteria = input;
        self
    }
    /// Adds a key-value pair to `connection_properties`.
    ///
    /// To override the contents of this collection use [`set_connection_properties`](Self::set_connection_properties).
    ///
    /// <p>These key-value pairs define parameters for the connection.</p>
    pub fn connection_properties(
        mut self,
        k: crate::types::ConnectionPropertyKey,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.connection_properties.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.connection_properties = Some(hash_map);
        self
    }
    /// <p>These key-value pairs define parameters for the connection.</p>
    pub fn set_connection_properties(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<crate::types::ConnectionPropertyKey, std::string::String>,
        >,
    ) -> Self {
        self.connection_properties = input;
        self
    }
    /// <p>A map of physical connection requirements, such as virtual private cloud (VPC) and <code>SecurityGroup</code>, that are needed to successfully make this connection.</p>
    pub fn physical_connection_requirements(
        mut self,
        input: crate::types::PhysicalConnectionRequirements,
    ) -> Self {
        self.physical_connection_requirements = Some(input);
        self
    }
    /// <p>A map of physical connection requirements, such as virtual private cloud (VPC) and <code>SecurityGroup</code>, that are needed to successfully make this connection.</p>
    pub fn set_physical_connection_requirements(
        mut self,
        input: std::option::Option<crate::types::PhysicalConnectionRequirements>,
    ) -> Self {
        self.physical_connection_requirements = input;
        self
    }
    /// Consumes the builder and constructs a [`ConnectionInput`](crate::types::ConnectionInput).
    pub fn build(self) -> crate::types::ConnectionInput {
        crate::types::ConnectionInput {
            name: self.name,
            description: self.description,
            connection_type: self.connection_type,
            match_criteria: self.match_criteria,
            connection_properties: self.connection_properties,
            physical_connection_requirements: self.physical_connection_requirements,
        }
    }
}
