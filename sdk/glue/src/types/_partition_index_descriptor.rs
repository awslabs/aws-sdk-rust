// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A descriptor for a partition index in a table.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PartitionIndexDescriptor {
    /// <p>The name of the partition index.</p>
    pub index_name: ::std::string::String,
    /// <p>A list of one or more keys, as <code>KeySchemaElement</code> structures, for the partition index.</p>
    pub keys: ::std::vec::Vec<crate::types::KeySchemaElement>,
    /// <p>The status of the partition index. </p>
    /// <p>The possible statuses are:</p>
    /// <ul>
    /// <li> <p>CREATING: The index is being created. When an index is in a CREATING state, the index or its table cannot be deleted.</p> </li>
    /// <li> <p>ACTIVE: The index creation succeeds.</p> </li>
    /// <li> <p>FAILED: The index creation fails. </p> </li>
    /// <li> <p>DELETING: The index is deleted from the list of indexes.</p> </li>
    /// </ul>
    pub index_status: crate::types::PartitionIndexStatus,
    /// <p>A list of errors that can occur when registering partition indexes for an existing table.</p>
    pub backfill_errors: ::std::option::Option<::std::vec::Vec<crate::types::BackfillError>>,
}
impl PartitionIndexDescriptor {
    /// <p>The name of the partition index.</p>
    pub fn index_name(&self) -> &str {
        use std::ops::Deref;
        self.index_name.deref()
    }
    /// <p>A list of one or more keys, as <code>KeySchemaElement</code> structures, for the partition index.</p>
    pub fn keys(&self) -> &[crate::types::KeySchemaElement] {
        use std::ops::Deref;
        self.keys.deref()
    }
    /// <p>The status of the partition index. </p>
    /// <p>The possible statuses are:</p>
    /// <ul>
    /// <li> <p>CREATING: The index is being created. When an index is in a CREATING state, the index or its table cannot be deleted.</p> </li>
    /// <li> <p>ACTIVE: The index creation succeeds.</p> </li>
    /// <li> <p>FAILED: The index creation fails. </p> </li>
    /// <li> <p>DELETING: The index is deleted from the list of indexes.</p> </li>
    /// </ul>
    pub fn index_status(&self) -> &crate::types::PartitionIndexStatus {
        &self.index_status
    }
    /// <p>A list of errors that can occur when registering partition indexes for an existing table.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.backfill_errors.is_none()`.
    pub fn backfill_errors(&self) -> &[crate::types::BackfillError] {
        self.backfill_errors.as_deref().unwrap_or_default()
    }
}
impl PartitionIndexDescriptor {
    /// Creates a new builder-style object to manufacture [`PartitionIndexDescriptor`](crate::types::PartitionIndexDescriptor).
    pub fn builder() -> crate::types::builders::PartitionIndexDescriptorBuilder {
        crate::types::builders::PartitionIndexDescriptorBuilder::default()
    }
}

/// A builder for [`PartitionIndexDescriptor`](crate::types::PartitionIndexDescriptor).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PartitionIndexDescriptorBuilder {
    pub(crate) index_name: ::std::option::Option<::std::string::String>,
    pub(crate) keys: ::std::option::Option<::std::vec::Vec<crate::types::KeySchemaElement>>,
    pub(crate) index_status: ::std::option::Option<crate::types::PartitionIndexStatus>,
    pub(crate) backfill_errors: ::std::option::Option<::std::vec::Vec<crate::types::BackfillError>>,
}
impl PartitionIndexDescriptorBuilder {
    /// <p>The name of the partition index.</p>
    /// This field is required.
    pub fn index_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the partition index.</p>
    pub fn set_index_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_name = input;
        self
    }
    /// <p>The name of the partition index.</p>
    pub fn get_index_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_name
    }
    /// Appends an item to `keys`.
    ///
    /// To override the contents of this collection use [`set_keys`](Self::set_keys).
    ///
    /// <p>A list of one or more keys, as <code>KeySchemaElement</code> structures, for the partition index.</p>
    pub fn keys(mut self, input: crate::types::KeySchemaElement) -> Self {
        let mut v = self.keys.unwrap_or_default();
        v.push(input);
        self.keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of one or more keys, as <code>KeySchemaElement</code> structures, for the partition index.</p>
    pub fn set_keys(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KeySchemaElement>>) -> Self {
        self.keys = input;
        self
    }
    /// <p>A list of one or more keys, as <code>KeySchemaElement</code> structures, for the partition index.</p>
    pub fn get_keys(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KeySchemaElement>> {
        &self.keys
    }
    /// <p>The status of the partition index. </p>
    /// <p>The possible statuses are:</p>
    /// <ul>
    /// <li> <p>CREATING: The index is being created. When an index is in a CREATING state, the index or its table cannot be deleted.</p> </li>
    /// <li> <p>ACTIVE: The index creation succeeds.</p> </li>
    /// <li> <p>FAILED: The index creation fails. </p> </li>
    /// <li> <p>DELETING: The index is deleted from the list of indexes.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn index_status(mut self, input: crate::types::PartitionIndexStatus) -> Self {
        self.index_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the partition index. </p>
    /// <p>The possible statuses are:</p>
    /// <ul>
    /// <li> <p>CREATING: The index is being created. When an index is in a CREATING state, the index or its table cannot be deleted.</p> </li>
    /// <li> <p>ACTIVE: The index creation succeeds.</p> </li>
    /// <li> <p>FAILED: The index creation fails. </p> </li>
    /// <li> <p>DELETING: The index is deleted from the list of indexes.</p> </li>
    /// </ul>
    pub fn set_index_status(mut self, input: ::std::option::Option<crate::types::PartitionIndexStatus>) -> Self {
        self.index_status = input;
        self
    }
    /// <p>The status of the partition index. </p>
    /// <p>The possible statuses are:</p>
    /// <ul>
    /// <li> <p>CREATING: The index is being created. When an index is in a CREATING state, the index or its table cannot be deleted.</p> </li>
    /// <li> <p>ACTIVE: The index creation succeeds.</p> </li>
    /// <li> <p>FAILED: The index creation fails. </p> </li>
    /// <li> <p>DELETING: The index is deleted from the list of indexes.</p> </li>
    /// </ul>
    pub fn get_index_status(&self) -> &::std::option::Option<crate::types::PartitionIndexStatus> {
        &self.index_status
    }
    /// Appends an item to `backfill_errors`.
    ///
    /// To override the contents of this collection use [`set_backfill_errors`](Self::set_backfill_errors).
    ///
    /// <p>A list of errors that can occur when registering partition indexes for an existing table.</p>
    pub fn backfill_errors(mut self, input: crate::types::BackfillError) -> Self {
        let mut v = self.backfill_errors.unwrap_or_default();
        v.push(input);
        self.backfill_errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of errors that can occur when registering partition indexes for an existing table.</p>
    pub fn set_backfill_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BackfillError>>) -> Self {
        self.backfill_errors = input;
        self
    }
    /// <p>A list of errors that can occur when registering partition indexes for an existing table.</p>
    pub fn get_backfill_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BackfillError>> {
        &self.backfill_errors
    }
    /// Consumes the builder and constructs a [`PartitionIndexDescriptor`](crate::types::PartitionIndexDescriptor).
    /// This method will fail if any of the following fields are not set:
    /// - [`index_name`](crate::types::builders::PartitionIndexDescriptorBuilder::index_name)
    /// - [`keys`](crate::types::builders::PartitionIndexDescriptorBuilder::keys)
    /// - [`index_status`](crate::types::builders::PartitionIndexDescriptorBuilder::index_status)
    pub fn build(self) -> ::std::result::Result<crate::types::PartitionIndexDescriptor, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PartitionIndexDescriptor {
            index_name: self.index_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "index_name",
                    "index_name was not specified but it is required when building PartitionIndexDescriptor",
                )
            })?,
            keys: self.keys.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "keys",
                    "keys was not specified but it is required when building PartitionIndexDescriptor",
                )
            })?,
            index_status: self.index_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "index_status",
                    "index_status was not specified but it is required when building PartitionIndexDescriptor",
                )
            })?,
            backfill_errors: self.backfill_errors,
        })
    }
}
