// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a node in a directed acyclic graph (DAG)</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeGenNode {
    /// <p>A node identifier that is unique within the node's graph.</p>
    pub id: ::std::string::String,
    /// <p>The type of node that this is.</p>
    pub node_type: ::std::string::String,
    /// <p>Properties of the node, in the form of name-value pairs.</p>
    pub args: ::std::vec::Vec<crate::types::CodeGenNodeArg>,
    /// <p>The line number of the node.</p>
    pub line_number: i32,
}
impl CodeGenNode {
    /// <p>A node identifier that is unique within the node's graph.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The type of node that this is.</p>
    pub fn node_type(&self) -> &str {
        use std::ops::Deref;
        self.node_type.deref()
    }
    /// <p>Properties of the node, in the form of name-value pairs.</p>
    pub fn args(&self) -> &[crate::types::CodeGenNodeArg] {
        use std::ops::Deref;
        self.args.deref()
    }
    /// <p>The line number of the node.</p>
    pub fn line_number(&self) -> i32 {
        self.line_number
    }
}
impl CodeGenNode {
    /// Creates a new builder-style object to manufacture [`CodeGenNode`](crate::types::CodeGenNode).
    pub fn builder() -> crate::types::builders::CodeGenNodeBuilder {
        crate::types::builders::CodeGenNodeBuilder::default()
    }
}

/// A builder for [`CodeGenNode`](crate::types::CodeGenNode).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodeGenNodeBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) node_type: ::std::option::Option<::std::string::String>,
    pub(crate) args: ::std::option::Option<::std::vec::Vec<crate::types::CodeGenNodeArg>>,
    pub(crate) line_number: ::std::option::Option<i32>,
}
impl CodeGenNodeBuilder {
    /// <p>A node identifier that is unique within the node's graph.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A node identifier that is unique within the node's graph.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A node identifier that is unique within the node's graph.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The type of node that this is.</p>
    /// This field is required.
    pub fn node_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of node that this is.</p>
    pub fn set_node_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>The type of node that this is.</p>
    pub fn get_node_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_type
    }
    /// Appends an item to `args`.
    ///
    /// To override the contents of this collection use [`set_args`](Self::set_args).
    ///
    /// <p>Properties of the node, in the form of name-value pairs.</p>
    pub fn args(mut self, input: crate::types::CodeGenNodeArg) -> Self {
        let mut v = self.args.unwrap_or_default();
        v.push(input);
        self.args = ::std::option::Option::Some(v);
        self
    }
    /// <p>Properties of the node, in the form of name-value pairs.</p>
    pub fn set_args(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CodeGenNodeArg>>) -> Self {
        self.args = input;
        self
    }
    /// <p>Properties of the node, in the form of name-value pairs.</p>
    pub fn get_args(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CodeGenNodeArg>> {
        &self.args
    }
    /// <p>The line number of the node.</p>
    pub fn line_number(mut self, input: i32) -> Self {
        self.line_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The line number of the node.</p>
    pub fn set_line_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.line_number = input;
        self
    }
    /// <p>The line number of the node.</p>
    pub fn get_line_number(&self) -> &::std::option::Option<i32> {
        &self.line_number
    }
    /// Consumes the builder and constructs a [`CodeGenNode`](crate::types::CodeGenNode).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::CodeGenNodeBuilder::id)
    /// - [`node_type`](crate::types::builders::CodeGenNodeBuilder::node_type)
    /// - [`args`](crate::types::builders::CodeGenNodeBuilder::args)
    pub fn build(self) -> ::std::result::Result<crate::types::CodeGenNode, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodeGenNode {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building CodeGenNode",
                )
            })?,
            node_type: self.node_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "node_type",
                    "node_type was not specified but it is required when building CodeGenNode",
                )
            })?,
            args: self.args.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "args",
                    "args was not specified but it is required when building CodeGenNode",
                )
            })?,
            line_number: self.line_number.unwrap_or_default(),
        })
    }
}
