// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a blueprint run.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BlueprintRun {
    /// <p>The name of the blueprint.</p>
    #[doc(hidden)]
    pub blueprint_name: std::option::Option<std::string::String>,
    /// <p>The run ID for this blueprint run.</p>
    #[doc(hidden)]
    pub run_id: std::option::Option<std::string::String>,
    /// <p>The name of a workflow that is created as a result of a successful blueprint run. If a blueprint run has an error, there will not be a workflow created.</p>
    #[doc(hidden)]
    pub workflow_name: std::option::Option<std::string::String>,
    /// <p>The state of the blueprint run. Possible values are:</p>
    /// <ul>
    /// <li> <p>Running — The blueprint run is in progress.</p> </li>
    /// <li> <p>Succeeded — The blueprint run completed successfully.</p> </li>
    /// <li> <p>Failed — The blueprint run failed and rollback is complete.</p> </li>
    /// <li> <p>Rolling Back — The blueprint run failed and rollback is in progress.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::BlueprintRunState>,
    /// <p>The date and time that the blueprint run started.</p>
    #[doc(hidden)]
    pub started_on: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the blueprint run completed.</p>
    #[doc(hidden)]
    pub completed_on: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates any errors that are seen while running the blueprint.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>If there are any errors while creating the entities of a workflow, we try to roll back the created entities until that point and delete them. This attribute indicates the errors seen while trying to delete the entities that are created.</p>
    #[doc(hidden)]
    pub rollback_error_message: std::option::Option<std::string::String>,
    /// <p>The blueprint parameters as a string. You will have to provide a value for each key that is required from the parameter spec that is defined in the <code>Blueprint$ParameterSpec</code>.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<std::string::String>,
    /// <p>The role ARN. This role will be assumed by the Glue service and will be used to create the workflow and other entities of a workflow.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
}
impl BlueprintRun {
    /// <p>The name of the blueprint.</p>
    pub fn blueprint_name(&self) -> std::option::Option<&str> {
        self.blueprint_name.as_deref()
    }
    /// <p>The run ID for this blueprint run.</p>
    pub fn run_id(&self) -> std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p>The name of a workflow that is created as a result of a successful blueprint run. If a blueprint run has an error, there will not be a workflow created.</p>
    pub fn workflow_name(&self) -> std::option::Option<&str> {
        self.workflow_name.as_deref()
    }
    /// <p>The state of the blueprint run. Possible values are:</p>
    /// <ul>
    /// <li> <p>Running — The blueprint run is in progress.</p> </li>
    /// <li> <p>Succeeded — The blueprint run completed successfully.</p> </li>
    /// <li> <p>Failed — The blueprint run failed and rollback is complete.</p> </li>
    /// <li> <p>Rolling Back — The blueprint run failed and rollback is in progress.</p> </li>
    /// </ul>
    pub fn state(&self) -> std::option::Option<&crate::types::BlueprintRunState> {
        self.state.as_ref()
    }
    /// <p>The date and time that the blueprint run started.</p>
    pub fn started_on(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.started_on.as_ref()
    }
    /// <p>The date and time that the blueprint run completed.</p>
    pub fn completed_on(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completed_on.as_ref()
    }
    /// <p>Indicates any errors that are seen while running the blueprint.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>If there are any errors while creating the entities of a workflow, we try to roll back the created entities until that point and delete them. This attribute indicates the errors seen while trying to delete the entities that are created.</p>
    pub fn rollback_error_message(&self) -> std::option::Option<&str> {
        self.rollback_error_message.as_deref()
    }
    /// <p>The blueprint parameters as a string. You will have to provide a value for each key that is required from the parameter spec that is defined in the <code>Blueprint$ParameterSpec</code>.</p>
    pub fn parameters(&self) -> std::option::Option<&str> {
        self.parameters.as_deref()
    }
    /// <p>The role ARN. This role will be assumed by the Glue service and will be used to create the workflow and other entities of a workflow.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl BlueprintRun {
    /// Creates a new builder-style object to manufacture [`BlueprintRun`](crate::types::BlueprintRun).
    pub fn builder() -> crate::types::builders::BlueprintRunBuilder {
        crate::types::builders::BlueprintRunBuilder::default()
    }
}

/// A builder for [`BlueprintRun`](crate::types::BlueprintRun).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BlueprintRunBuilder {
    pub(crate) blueprint_name: std::option::Option<std::string::String>,
    pub(crate) run_id: std::option::Option<std::string::String>,
    pub(crate) workflow_name: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::BlueprintRunState>,
    pub(crate) started_on: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) completed_on: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) error_message: std::option::Option<std::string::String>,
    pub(crate) rollback_error_message: std::option::Option<std::string::String>,
    pub(crate) parameters: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
}
impl BlueprintRunBuilder {
    /// <p>The name of the blueprint.</p>
    pub fn blueprint_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.blueprint_name = Some(input.into());
        self
    }
    /// <p>The name of the blueprint.</p>
    pub fn set_blueprint_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.blueprint_name = input;
        self
    }
    /// <p>The run ID for this blueprint run.</p>
    pub fn run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.run_id = Some(input.into());
        self
    }
    /// <p>The run ID for this blueprint run.</p>
    pub fn set_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The name of a workflow that is created as a result of a successful blueprint run. If a blueprint run has an error, there will not be a workflow created.</p>
    pub fn workflow_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.workflow_name = Some(input.into());
        self
    }
    /// <p>The name of a workflow that is created as a result of a successful blueprint run. If a blueprint run has an error, there will not be a workflow created.</p>
    pub fn set_workflow_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workflow_name = input;
        self
    }
    /// <p>The state of the blueprint run. Possible values are:</p>
    /// <ul>
    /// <li> <p>Running — The blueprint run is in progress.</p> </li>
    /// <li> <p>Succeeded — The blueprint run completed successfully.</p> </li>
    /// <li> <p>Failed — The blueprint run failed and rollback is complete.</p> </li>
    /// <li> <p>Rolling Back — The blueprint run failed and rollback is in progress.</p> </li>
    /// </ul>
    pub fn state(mut self, input: crate::types::BlueprintRunState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the blueprint run. Possible values are:</p>
    /// <ul>
    /// <li> <p>Running — The blueprint run is in progress.</p> </li>
    /// <li> <p>Succeeded — The blueprint run completed successfully.</p> </li>
    /// <li> <p>Failed — The blueprint run failed and rollback is complete.</p> </li>
    /// <li> <p>Rolling Back — The blueprint run failed and rollback is in progress.</p> </li>
    /// </ul>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::BlueprintRunState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>The date and time that the blueprint run started.</p>
    pub fn started_on(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.started_on = Some(input);
        self
    }
    /// <p>The date and time that the blueprint run started.</p>
    pub fn set_started_on(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.started_on = input;
        self
    }
    /// <p>The date and time that the blueprint run completed.</p>
    pub fn completed_on(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.completed_on = Some(input);
        self
    }
    /// <p>The date and time that the blueprint run completed.</p>
    pub fn set_completed_on(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.completed_on = input;
        self
    }
    /// <p>Indicates any errors that are seen while running the blueprint.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>Indicates any errors that are seen while running the blueprint.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>If there are any errors while creating the entities of a workflow, we try to roll back the created entities until that point and delete them. This attribute indicates the errors seen while trying to delete the entities that are created.</p>
    pub fn rollback_error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.rollback_error_message = Some(input.into());
        self
    }
    /// <p>If there are any errors while creating the entities of a workflow, we try to roll back the created entities until that point and delete them. This attribute indicates the errors seen while trying to delete the entities that are created.</p>
    pub fn set_rollback_error_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.rollback_error_message = input;
        self
    }
    /// <p>The blueprint parameters as a string. You will have to provide a value for each key that is required from the parameter spec that is defined in the <code>Blueprint$ParameterSpec</code>.</p>
    pub fn parameters(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameters = Some(input.into());
        self
    }
    /// <p>The blueprint parameters as a string. You will have to provide a value for each key that is required from the parameter spec that is defined in the <code>Blueprint$ParameterSpec</code>.</p>
    pub fn set_parameters(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The role ARN. This role will be assumed by the Glue service and will be used to create the workflow and other entities of a workflow.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The role ARN. This role will be assumed by the Glue service and will be used to create the workflow and other entities of a workflow.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`BlueprintRun`](crate::types::BlueprintRun).
    pub fn build(self) -> crate::types::BlueprintRun {
        crate::types::BlueprintRun {
            blueprint_name: self.blueprint_name,
            run_id: self.run_id,
            workflow_name: self.workflow_name,
            state: self.state,
            started_on: self.started_on,
            completed_on: self.completed_on,
            error_message: self.error_message,
            rollback_error_message: self.rollback_error_message,
            parameters: self.parameters,
            role_arn: self.role_arn,
        }
    }
}
