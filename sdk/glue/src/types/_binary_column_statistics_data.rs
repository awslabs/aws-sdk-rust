// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines column statistics supported for bit sequence data values.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BinaryColumnStatisticsData {
    /// <p>The size of the longest bit sequence in the column.</p>
    pub maximum_length: i64,
    /// <p>The average bit sequence length in the column.</p>
    pub average_length: f64,
    /// <p>The number of null values in the column.</p>
    pub number_of_nulls: i64,
}
impl BinaryColumnStatisticsData {
    /// <p>The size of the longest bit sequence in the column.</p>
    pub fn maximum_length(&self) -> i64 {
        self.maximum_length
    }
    /// <p>The average bit sequence length in the column.</p>
    pub fn average_length(&self) -> f64 {
        self.average_length
    }
    /// <p>The number of null values in the column.</p>
    pub fn number_of_nulls(&self) -> i64 {
        self.number_of_nulls
    }
}
impl BinaryColumnStatisticsData {
    /// Creates a new builder-style object to manufacture [`BinaryColumnStatisticsData`](crate::types::BinaryColumnStatisticsData).
    pub fn builder() -> crate::types::builders::BinaryColumnStatisticsDataBuilder {
        crate::types::builders::BinaryColumnStatisticsDataBuilder::default()
    }
}

/// A builder for [`BinaryColumnStatisticsData`](crate::types::BinaryColumnStatisticsData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BinaryColumnStatisticsDataBuilder {
    pub(crate) maximum_length: ::std::option::Option<i64>,
    pub(crate) average_length: ::std::option::Option<f64>,
    pub(crate) number_of_nulls: ::std::option::Option<i64>,
}
impl BinaryColumnStatisticsDataBuilder {
    /// <p>The size of the longest bit sequence in the column.</p>
    /// This field is required.
    pub fn maximum_length(mut self, input: i64) -> Self {
        self.maximum_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the longest bit sequence in the column.</p>
    pub fn set_maximum_length(mut self, input: ::std::option::Option<i64>) -> Self {
        self.maximum_length = input;
        self
    }
    /// <p>The size of the longest bit sequence in the column.</p>
    pub fn get_maximum_length(&self) -> &::std::option::Option<i64> {
        &self.maximum_length
    }
    /// <p>The average bit sequence length in the column.</p>
    /// This field is required.
    pub fn average_length(mut self, input: f64) -> Self {
        self.average_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>The average bit sequence length in the column.</p>
    pub fn set_average_length(mut self, input: ::std::option::Option<f64>) -> Self {
        self.average_length = input;
        self
    }
    /// <p>The average bit sequence length in the column.</p>
    pub fn get_average_length(&self) -> &::std::option::Option<f64> {
        &self.average_length
    }
    /// <p>The number of null values in the column.</p>
    /// This field is required.
    pub fn number_of_nulls(mut self, input: i64) -> Self {
        self.number_of_nulls = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of null values in the column.</p>
    pub fn set_number_of_nulls(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_nulls = input;
        self
    }
    /// <p>The number of null values in the column.</p>
    pub fn get_number_of_nulls(&self) -> &::std::option::Option<i64> {
        &self.number_of_nulls
    }
    /// Consumes the builder and constructs a [`BinaryColumnStatisticsData`](crate::types::BinaryColumnStatisticsData).
    pub fn build(self) -> crate::types::BinaryColumnStatisticsData {
        crate::types::BinaryColumnStatisticsData {
            maximum_length: self.maximum_length.unwrap_or_default(),
            average_length: self.average_length.unwrap_or_default(),
            number_of_nulls: self.number_of_nulls.unwrap_or_default(),
        }
    }
}
