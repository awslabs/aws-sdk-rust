// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a collection of related data organized in columns and rows.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Table {
    /// <p>The table name. For Hive compatibility, this must be entirely lowercase.</p>
    pub name: ::std::string::String,
    /// <p>The name of the database where the table metadata resides. For Hive compatibility, this must be all lowercase.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the table.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The owner of the table.</p>
    pub owner: ::std::option::Option<::std::string::String>,
    /// <p>The time when the table definition was created in the Data Catalog.</p>
    pub create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time that the table was updated.</p>
    pub update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time that the table was accessed. This is usually taken from HDFS, and might not be reliable.</p>
    pub last_access_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time that column statistics were computed for this table.</p>
    pub last_analyzed_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The retention time for this table.</p>
    pub retention: i32,
    /// <p>A storage descriptor containing information about the physical storage of this table.</p>
    pub storage_descriptor: ::std::option::Option<crate::types::StorageDescriptor>,
    /// <p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p>
    /// <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p>
    /// <p> <code>"PartitionKeys": []</code> </p>
    pub partition_keys: ::std::option::Option<::std::vec::Vec<crate::types::Column>>,
    /// <p>Included for Apache Hive compatibility. Not used in the normal course of Glue operations. If the table is a <code>VIRTUAL_VIEW</code>, certain Athena configuration encoded in base64.</p>
    pub view_original_text: ::std::option::Option<::std::string::String>,
    /// <p>Included for Apache Hive compatibility. Not used in the normal course of Glue operations.</p>
    pub view_expanded_text: ::std::option::Option<::std::string::String>,
    /// <p>The type of this table. Glue will create tables with the <code>EXTERNAL_TABLE</code> type. Other services, such as Athena, may create tables with additional table types. </p>
    /// <p>Glue related table types:</p>
    /// <dl>
    /// <dt>
    /// EXTERNAL_TABLE
    /// </dt>
    /// <dd>
    /// <p>Hive compatible attribute - indicates a non-Hive managed table.</p>
    /// </dd>
    /// <dt>
    /// GOVERNED
    /// </dt>
    /// <dd>
    /// <p>Used by Lake Formation. The Glue Data Catalog understands <code>GOVERNED</code>.</p>
    /// </dd>
    /// </dl>
    pub table_type: ::std::option::Option<::std::string::String>,
    /// <p>These key-value pairs define properties associated with the table.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The person or entity who created the table.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the table has been registered with Lake Formation.</p>
    pub is_registered_with_lake_formation: bool,
    /// <p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>
    pub target_table: ::std::option::Option<crate::types::TableIdentifier>,
    /// <p>The ID of the Data Catalog in which the table resides.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the table version.</p>
    pub version_id: ::std::option::Option<::std::string::String>,
    /// <p>A <code>FederatedTable</code> structure that references an entity outside the Glue Data Catalog.</p>
    pub federated_table: ::std::option::Option<crate::types::FederatedTable>,
}
impl Table {
    /// <p>The table name. For Hive compatibility, this must be entirely lowercase.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The name of the database where the table metadata resides. For Hive compatibility, this must be all lowercase.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>A description of the table.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The owner of the table.</p>
    pub fn owner(&self) -> ::std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>The time when the table definition was created in the Data Catalog.</p>
    pub fn create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The last time that the table was updated.</p>
    pub fn update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>The last time that the table was accessed. This is usually taken from HDFS, and might not be reliable.</p>
    pub fn last_access_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_access_time.as_ref()
    }
    /// <p>The last time that column statistics were computed for this table.</p>
    pub fn last_analyzed_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_analyzed_time.as_ref()
    }
    /// <p>The retention time for this table.</p>
    pub fn retention(&self) -> i32 {
        self.retention
    }
    /// <p>A storage descriptor containing information about the physical storage of this table.</p>
    pub fn storage_descriptor(&self) -> ::std::option::Option<&crate::types::StorageDescriptor> {
        self.storage_descriptor.as_ref()
    }
    /// <p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p>
    /// <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p>
    /// <p> <code>"PartitionKeys": []</code> </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.partition_keys.is_none()`.
    pub fn partition_keys(&self) -> &[crate::types::Column] {
        self.partition_keys.as_deref().unwrap_or_default()
    }
    /// <p>Included for Apache Hive compatibility. Not used in the normal course of Glue operations. If the table is a <code>VIRTUAL_VIEW</code>, certain Athena configuration encoded in base64.</p>
    pub fn view_original_text(&self) -> ::std::option::Option<&str> {
        self.view_original_text.as_deref()
    }
    /// <p>Included for Apache Hive compatibility. Not used in the normal course of Glue operations.</p>
    pub fn view_expanded_text(&self) -> ::std::option::Option<&str> {
        self.view_expanded_text.as_deref()
    }
    /// <p>The type of this table. Glue will create tables with the <code>EXTERNAL_TABLE</code> type. Other services, such as Athena, may create tables with additional table types. </p>
    /// <p>Glue related table types:</p>
    /// <dl>
    /// <dt>
    /// EXTERNAL_TABLE
    /// </dt>
    /// <dd>
    /// <p>Hive compatible attribute - indicates a non-Hive managed table.</p>
    /// </dd>
    /// <dt>
    /// GOVERNED
    /// </dt>
    /// <dd>
    /// <p>Used by Lake Formation. The Glue Data Catalog understands <code>GOVERNED</code>.</p>
    /// </dd>
    /// </dl>
    pub fn table_type(&self) -> ::std::option::Option<&str> {
        self.table_type.as_deref()
    }
    /// <p>These key-value pairs define properties associated with the table.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.parameters.as_ref()
    }
    /// <p>The person or entity who created the table.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>Indicates whether the table has been registered with Lake Formation.</p>
    pub fn is_registered_with_lake_formation(&self) -> bool {
        self.is_registered_with_lake_formation
    }
    /// <p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>
    pub fn target_table(&self) -> ::std::option::Option<&crate::types::TableIdentifier> {
        self.target_table.as_ref()
    }
    /// <p>The ID of the Data Catalog in which the table resides.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The ID of the table version.</p>
    pub fn version_id(&self) -> ::std::option::Option<&str> {
        self.version_id.as_deref()
    }
    /// <p>A <code>FederatedTable</code> structure that references an entity outside the Glue Data Catalog.</p>
    pub fn federated_table(&self) -> ::std::option::Option<&crate::types::FederatedTable> {
        self.federated_table.as_ref()
    }
}
impl Table {
    /// Creates a new builder-style object to manufacture [`Table`](crate::types::Table).
    pub fn builder() -> crate::types::builders::TableBuilder {
        crate::types::builders::TableBuilder::default()
    }
}

/// A builder for [`Table`](crate::types::Table).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TableBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) owner: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_access_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_analyzed_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) retention: ::std::option::Option<i32>,
    pub(crate) storage_descriptor: ::std::option::Option<crate::types::StorageDescriptor>,
    pub(crate) partition_keys: ::std::option::Option<::std::vec::Vec<crate::types::Column>>,
    pub(crate) view_original_text: ::std::option::Option<::std::string::String>,
    pub(crate) view_expanded_text: ::std::option::Option<::std::string::String>,
    pub(crate) table_type: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) is_registered_with_lake_formation: ::std::option::Option<bool>,
    pub(crate) target_table: ::std::option::Option<crate::types::TableIdentifier>,
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) version_id: ::std::option::Option<::std::string::String>,
    pub(crate) federated_table: ::std::option::Option<crate::types::FederatedTable>,
}
impl TableBuilder {
    /// <p>The table name. For Hive compatibility, this must be entirely lowercase.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The table name. For Hive compatibility, this must be entirely lowercase.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The table name. For Hive compatibility, this must be entirely lowercase.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name of the database where the table metadata resides. For Hive compatibility, this must be all lowercase.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database where the table metadata resides. For Hive compatibility, this must be all lowercase.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the database where the table metadata resides. For Hive compatibility, this must be all lowercase.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>A description of the table.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the table.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the table.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The owner of the table.</p>
    pub fn owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner of the table.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The owner of the table.</p>
    pub fn get_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner
    }
    /// <p>The time when the table definition was created in the Data Catalog.</p>
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the table definition was created in the Data Catalog.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time when the table definition was created in the Data Catalog.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The last time that the table was updated.</p>
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the table was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The last time that the table was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The last time that the table was accessed. This is usually taken from HDFS, and might not be reliable.</p>
    pub fn last_access_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_access_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the table was accessed. This is usually taken from HDFS, and might not be reliable.</p>
    pub fn set_last_access_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_access_time = input;
        self
    }
    /// <p>The last time that the table was accessed. This is usually taken from HDFS, and might not be reliable.</p>
    pub fn get_last_access_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_access_time
    }
    /// <p>The last time that column statistics were computed for this table.</p>
    pub fn last_analyzed_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_analyzed_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that column statistics were computed for this table.</p>
    pub fn set_last_analyzed_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_analyzed_time = input;
        self
    }
    /// <p>The last time that column statistics were computed for this table.</p>
    pub fn get_last_analyzed_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_analyzed_time
    }
    /// <p>The retention time for this table.</p>
    pub fn retention(mut self, input: i32) -> Self {
        self.retention = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retention time for this table.</p>
    pub fn set_retention(mut self, input: ::std::option::Option<i32>) -> Self {
        self.retention = input;
        self
    }
    /// <p>The retention time for this table.</p>
    pub fn get_retention(&self) -> &::std::option::Option<i32> {
        &self.retention
    }
    /// <p>A storage descriptor containing information about the physical storage of this table.</p>
    pub fn storage_descriptor(mut self, input: crate::types::StorageDescriptor) -> Self {
        self.storage_descriptor = ::std::option::Option::Some(input);
        self
    }
    /// <p>A storage descriptor containing information about the physical storage of this table.</p>
    pub fn set_storage_descriptor(mut self, input: ::std::option::Option<crate::types::StorageDescriptor>) -> Self {
        self.storage_descriptor = input;
        self
    }
    /// <p>A storage descriptor containing information about the physical storage of this table.</p>
    pub fn get_storage_descriptor(&self) -> &::std::option::Option<crate::types::StorageDescriptor> {
        &self.storage_descriptor
    }
    /// Appends an item to `partition_keys`.
    ///
    /// To override the contents of this collection use [`set_partition_keys`](Self::set_partition_keys).
    ///
    /// <p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p>
    /// <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p>
    /// <p> <code>"PartitionKeys": []</code> </p>
    pub fn partition_keys(mut self, input: crate::types::Column) -> Self {
        let mut v = self.partition_keys.unwrap_or_default();
        v.push(input);
        self.partition_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p>
    /// <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p>
    /// <p> <code>"PartitionKeys": []</code> </p>
    pub fn set_partition_keys(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Column>>) -> Self {
        self.partition_keys = input;
        self
    }
    /// <p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p>
    /// <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p>
    /// <p> <code>"PartitionKeys": []</code> </p>
    pub fn get_partition_keys(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Column>> {
        &self.partition_keys
    }
    /// <p>Included for Apache Hive compatibility. Not used in the normal course of Glue operations. If the table is a <code>VIRTUAL_VIEW</code>, certain Athena configuration encoded in base64.</p>
    pub fn view_original_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.view_original_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Included for Apache Hive compatibility. Not used in the normal course of Glue operations. If the table is a <code>VIRTUAL_VIEW</code>, certain Athena configuration encoded in base64.</p>
    pub fn set_view_original_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.view_original_text = input;
        self
    }
    /// <p>Included for Apache Hive compatibility. Not used in the normal course of Glue operations. If the table is a <code>VIRTUAL_VIEW</code>, certain Athena configuration encoded in base64.</p>
    pub fn get_view_original_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.view_original_text
    }
    /// <p>Included for Apache Hive compatibility. Not used in the normal course of Glue operations.</p>
    pub fn view_expanded_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.view_expanded_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Included for Apache Hive compatibility. Not used in the normal course of Glue operations.</p>
    pub fn set_view_expanded_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.view_expanded_text = input;
        self
    }
    /// <p>Included for Apache Hive compatibility. Not used in the normal course of Glue operations.</p>
    pub fn get_view_expanded_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.view_expanded_text
    }
    /// <p>The type of this table. Glue will create tables with the <code>EXTERNAL_TABLE</code> type. Other services, such as Athena, may create tables with additional table types. </p>
    /// <p>Glue related table types:</p>
    /// <dl>
    /// <dt>
    /// EXTERNAL_TABLE
    /// </dt>
    /// <dd>
    /// <p>Hive compatible attribute - indicates a non-Hive managed table.</p>
    /// </dd>
    /// <dt>
    /// GOVERNED
    /// </dt>
    /// <dd>
    /// <p>Used by Lake Formation. The Glue Data Catalog understands <code>GOVERNED</code>.</p>
    /// </dd>
    /// </dl>
    pub fn table_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of this table. Glue will create tables with the <code>EXTERNAL_TABLE</code> type. Other services, such as Athena, may create tables with additional table types. </p>
    /// <p>Glue related table types:</p>
    /// <dl>
    /// <dt>
    /// EXTERNAL_TABLE
    /// </dt>
    /// <dd>
    /// <p>Hive compatible attribute - indicates a non-Hive managed table.</p>
    /// </dd>
    /// <dt>
    /// GOVERNED
    /// </dt>
    /// <dd>
    /// <p>Used by Lake Formation. The Glue Data Catalog understands <code>GOVERNED</code>.</p>
    /// </dd>
    /// </dl>
    pub fn set_table_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_type = input;
        self
    }
    /// <p>The type of this table. Glue will create tables with the <code>EXTERNAL_TABLE</code> type. Other services, such as Athena, may create tables with additional table types. </p>
    /// <p>Glue related table types:</p>
    /// <dl>
    /// <dt>
    /// EXTERNAL_TABLE
    /// </dt>
    /// <dd>
    /// <p>Hive compatible attribute - indicates a non-Hive managed table.</p>
    /// </dd>
    /// <dt>
    /// GOVERNED
    /// </dt>
    /// <dd>
    /// <p>Used by Lake Formation. The Glue Data Catalog understands <code>GOVERNED</code>.</p>
    /// </dd>
    /// </dl>
    pub fn get_table_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_type
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>These key-value pairs define properties associated with the table.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>These key-value pairs define properties associated with the table.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>These key-value pairs define properties associated with the table.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.parameters
    }
    /// <p>The person or entity who created the table.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The person or entity who created the table.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The person or entity who created the table.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>Indicates whether the table has been registered with Lake Formation.</p>
    pub fn is_registered_with_lake_formation(mut self, input: bool) -> Self {
        self.is_registered_with_lake_formation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the table has been registered with Lake Formation.</p>
    pub fn set_is_registered_with_lake_formation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_registered_with_lake_formation = input;
        self
    }
    /// <p>Indicates whether the table has been registered with Lake Formation.</p>
    pub fn get_is_registered_with_lake_formation(&self) -> &::std::option::Option<bool> {
        &self.is_registered_with_lake_formation
    }
    /// <p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>
    pub fn target_table(mut self, input: crate::types::TableIdentifier) -> Self {
        self.target_table = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>
    pub fn set_target_table(mut self, input: ::std::option::Option<crate::types::TableIdentifier>) -> Self {
        self.target_table = input;
        self
    }
    /// <p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>
    pub fn get_target_table(&self) -> &::std::option::Option<crate::types::TableIdentifier> {
        &self.target_table
    }
    /// <p>The ID of the Data Catalog in which the table resides.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog in which the table resides.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The ID of the Data Catalog in which the table resides.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The ID of the table version.</p>
    pub fn version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the table version.</p>
    pub fn set_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>The ID of the table version.</p>
    pub fn get_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_id
    }
    /// <p>A <code>FederatedTable</code> structure that references an entity outside the Glue Data Catalog.</p>
    pub fn federated_table(mut self, input: crate::types::FederatedTable) -> Self {
        self.federated_table = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>FederatedTable</code> structure that references an entity outside the Glue Data Catalog.</p>
    pub fn set_federated_table(mut self, input: ::std::option::Option<crate::types::FederatedTable>) -> Self {
        self.federated_table = input;
        self
    }
    /// <p>A <code>FederatedTable</code> structure that references an entity outside the Glue Data Catalog.</p>
    pub fn get_federated_table(&self) -> &::std::option::Option<crate::types::FederatedTable> {
        &self.federated_table
    }
    /// Consumes the builder and constructs a [`Table`](crate::types::Table).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::TableBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::Table, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Table {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Table",
                )
            })?,
            database_name: self.database_name,
            description: self.description,
            owner: self.owner,
            create_time: self.create_time,
            update_time: self.update_time,
            last_access_time: self.last_access_time,
            last_analyzed_time: self.last_analyzed_time,
            retention: self.retention.unwrap_or_default(),
            storage_descriptor: self.storage_descriptor,
            partition_keys: self.partition_keys,
            view_original_text: self.view_original_text,
            view_expanded_text: self.view_expanded_text,
            table_type: self.table_type,
            parameters: self.parameters,
            created_by: self.created_by,
            is_registered_with_lake_formation: self.is_registered_with_lake_formation.unwrap_or_default(),
            target_table: self.target_table,
            catalog_id: self.catalog_id,
            version_id: self.version_id,
            federated_table: self.federated_table,
        })
    }
}
