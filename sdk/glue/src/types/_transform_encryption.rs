// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.</p>
/// <p>Additionally, imported labels and trained transforms can now be encrypted using a customer provided KMS key.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TransformEncryption {
    /// <p>An <code>MLUserDataEncryption</code> object containing the encryption mode and customer-provided KMS key ID.</p>
    #[doc(hidden)]
    pub ml_user_data_encryption: std::option::Option<crate::types::MlUserDataEncryption>,
    /// <p>The name of the security configuration.</p>
    #[doc(hidden)]
    pub task_run_security_configuration_name: std::option::Option<std::string::String>,
}
impl TransformEncryption {
    /// <p>An <code>MLUserDataEncryption</code> object containing the encryption mode and customer-provided KMS key ID.</p>
    pub fn ml_user_data_encryption(
        &self,
    ) -> std::option::Option<&crate::types::MlUserDataEncryption> {
        self.ml_user_data_encryption.as_ref()
    }
    /// <p>The name of the security configuration.</p>
    pub fn task_run_security_configuration_name(&self) -> std::option::Option<&str> {
        self.task_run_security_configuration_name.as_deref()
    }
}
impl TransformEncryption {
    /// Creates a new builder-style object to manufacture [`TransformEncryption`](crate::types::TransformEncryption).
    pub fn builder() -> crate::types::builders::TransformEncryptionBuilder {
        crate::types::builders::TransformEncryptionBuilder::default()
    }
}

/// A builder for [`TransformEncryption`](crate::types::TransformEncryption).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TransformEncryptionBuilder {
    pub(crate) ml_user_data_encryption: std::option::Option<crate::types::MlUserDataEncryption>,
    pub(crate) task_run_security_configuration_name: std::option::Option<std::string::String>,
}
impl TransformEncryptionBuilder {
    /// <p>An <code>MLUserDataEncryption</code> object containing the encryption mode and customer-provided KMS key ID.</p>
    pub fn ml_user_data_encryption(mut self, input: crate::types::MlUserDataEncryption) -> Self {
        self.ml_user_data_encryption = Some(input);
        self
    }
    /// <p>An <code>MLUserDataEncryption</code> object containing the encryption mode and customer-provided KMS key ID.</p>
    pub fn set_ml_user_data_encryption(
        mut self,
        input: std::option::Option<crate::types::MlUserDataEncryption>,
    ) -> Self {
        self.ml_user_data_encryption = input;
        self
    }
    /// <p>The name of the security configuration.</p>
    pub fn task_run_security_configuration_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.task_run_security_configuration_name = Some(input.into());
        self
    }
    /// <p>The name of the security configuration.</p>
    pub fn set_task_run_security_configuration_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.task_run_security_configuration_name = input;
        self
    }
    /// Consumes the builder and constructs a [`TransformEncryption`](crate::types::TransformEncryption).
    pub fn build(self) -> crate::types::TransformEncryption {
        crate::types::TransformEncryption {
            ml_user_data_encryption: self.ml_user_data_encryption,
            task_run_security_configuration_name: self.task_run_security_configuration_name,
        }
    }
}
