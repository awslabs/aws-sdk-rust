// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a Crawler node present in the workflow.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CrawlerNodeDetails {
    /// <p>A list of crawls represented by the crawl node.</p>
    #[doc(hidden)]
    pub crawls: std::option::Option<std::vec::Vec<crate::types::Crawl>>,
}
impl CrawlerNodeDetails {
    /// <p>A list of crawls represented by the crawl node.</p>
    pub fn crawls(&self) -> std::option::Option<&[crate::types::Crawl]> {
        self.crawls.as_deref()
    }
}
impl CrawlerNodeDetails {
    /// Creates a new builder-style object to manufacture [`CrawlerNodeDetails`](crate::types::CrawlerNodeDetails).
    pub fn builder() -> crate::types::builders::CrawlerNodeDetailsBuilder {
        crate::types::builders::CrawlerNodeDetailsBuilder::default()
    }
}

/// A builder for [`CrawlerNodeDetails`](crate::types::CrawlerNodeDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CrawlerNodeDetailsBuilder {
    pub(crate) crawls: std::option::Option<std::vec::Vec<crate::types::Crawl>>,
}
impl CrawlerNodeDetailsBuilder {
    /// Appends an item to `crawls`.
    ///
    /// To override the contents of this collection use [`set_crawls`](Self::set_crawls).
    ///
    /// <p>A list of crawls represented by the crawl node.</p>
    pub fn crawls(mut self, input: crate::types::Crawl) -> Self {
        let mut v = self.crawls.unwrap_or_default();
        v.push(input);
        self.crawls = Some(v);
        self
    }
    /// <p>A list of crawls represented by the crawl node.</p>
    pub fn set_crawls(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Crawl>>,
    ) -> Self {
        self.crawls = input;
        self
    }
    /// Consumes the builder and constructs a [`CrawlerNodeDetails`](crate::types::CrawlerNodeDetails).
    pub fn build(self) -> crate::types::CrawlerNodeDetails {
        crate::types::CrawlerNodeDetails {
            crawls: self.crawls,
        }
    }
}
