// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a serialization/deserialization program (SerDe) that serves as an extractor and loader.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SerDeInfo {
    /// <p>Name of the SerDe.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Usually the class that implements the SerDe. An example is <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>
    #[doc(hidden)]
    pub serialization_library: std::option::Option<std::string::String>,
    /// <p>These key-value pairs define initialization parameters for the SerDe.</p>
    #[doc(hidden)]
    pub parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl SerDeInfo {
    /// <p>Name of the SerDe.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Usually the class that implements the SerDe. An example is <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>
    pub fn serialization_library(&self) -> std::option::Option<&str> {
        self.serialization_library.as_deref()
    }
    /// <p>These key-value pairs define initialization parameters for the SerDe.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.parameters.as_ref()
    }
}
impl SerDeInfo {
    /// Creates a new builder-style object to manufacture [`SerDeInfo`](crate::types::SerDeInfo).
    pub fn builder() -> crate::types::builders::SerDeInfoBuilder {
        crate::types::builders::SerDeInfoBuilder::default()
    }
}

/// A builder for [`SerDeInfo`](crate::types::SerDeInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SerDeInfoBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) serialization_library: std::option::Option<std::string::String>,
    pub(crate) parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl SerDeInfoBuilder {
    /// <p>Name of the SerDe.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Name of the SerDe.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Usually the class that implements the SerDe. An example is <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>
    pub fn serialization_library(mut self, input: impl Into<std::string::String>) -> Self {
        self.serialization_library = Some(input.into());
        self
    }
    /// <p>Usually the class that implements the SerDe. An example is <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>
    pub fn set_serialization_library(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.serialization_library = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>These key-value pairs define initialization parameters for the SerDe.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = Some(hash_map);
        self
    }
    /// <p>These key-value pairs define initialization parameters for the SerDe.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`SerDeInfo`](crate::types::SerDeInfo).
    pub fn build(self) -> crate::types::SerDeInfo {
        crate::types::SerDeInfo {
            name: self.name,
            serialization_library: self.serialization_library,
            parameters: self.parameters,
        }
    }
}
