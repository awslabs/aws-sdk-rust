// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) conf: crate::Config,
    #[allow(dead_code)] // unused when a service does not provide any operations
    pub(crate) runtime_plugins: ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
}

/// Client for AWS Glue
///
/// Client for invoking operations on AWS Glue. Each operation on AWS Glue is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
/// ## Constructing a `Client`
///
/// A [`Config`] is required to construct a client. For most use cases, the [`aws-config`]
/// crate should be used to automatically resolve this config using
/// [`aws_config::load_from_env()`], since this will resolve an [`SdkConfig`] which can be shared
/// across multiple different AWS SDK clients. This config resolution process can be customized
/// by calling [`aws_config::from_env()`] instead, which returns a [`ConfigLoader`] that uses
/// the [builder pattern] to customize the default config.
///
/// In the simplest case, creating a client looks as follows:
/// ```rust,no_run
/// # async fn wrapper() {
/// let config = aws_config::load_from_env().await;
/// let client = aws_sdk_glue::Client::new(&config);
/// # }
/// ```
///
/// Occasionally, SDKs may have additional service-specific that can be set on the [`Config`] that
/// is absent from [`SdkConfig`], or slightly different settings for a specific client may be desired.
/// The [`Config`] struct implements `From<&SdkConfig>`, so setting these specific settings can be
/// done as follows:
///
/// ```rust,no_run
/// # async fn wrapper() {
/// let sdk_config = ::aws_config::load_from_env().await;
/// let config = aws_sdk_glue::config::Builder::from(&sdk_config)
/// # /*
///     .some_service_specific_setting("value")
/// # */
///     .build();
/// # }
/// ```
///
/// See the [`aws-config` docs] and [`Config`] for more information on customizing configuration.
///
/// _Note:_ Client construction is expensive due to connection thread pool initialization, and should
/// be done once at application start-up.
///
/// [`Config`]: crate::Config
/// [`ConfigLoader`]: https://docs.rs/aws-config/*/aws_config/struct.ConfigLoader.html
/// [`SdkConfig`]: https://docs.rs/aws-config/*/aws_config/struct.SdkConfig.html
/// [`aws-config` docs]: https://docs.rs/aws-config/*
/// [`aws-config`]: https://crates.io/crates/aws-config
/// [`aws_config::from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.from_env.html
/// [`aws_config::load_from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.load_from_env.html
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#builders-enable-construction-of-complex-values-c-builder
/// # Using the `Client`
///
/// A client has a function for every operation that can be performed by the service.
/// For example, the [`BatchCreatePartition`](crate::operation::batch_create_partition) operation has
/// a [`Client::batch_create_partition`], function which returns a builder for that operation.
/// The fluent builder ultimately has a `send()` function that returns an async future that
/// returns a result, as illustrated below:
///
/// ```rust,ignore
/// let result = client.batch_create_partition()
///     .catalog_id("example")
///     .send()
///     .await;
/// ```
///
/// The underlying HTTP requests that get made by this can be modified with the `customize_operation`
/// function on the fluent builder. See the [`customize`](crate::client::customize) module for more
/// information.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct Client {
    handle: ::std::sync::Arc<Handle>,
}

impl Client {
    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// This method will panic in the following cases:
    ///
    /// - Retries or timeouts are enabled without a `sleep_impl` configured.
    /// - Identity caching is enabled without a `sleep_impl` and `time_source` configured.
    ///
    /// The panic message for each of these will have instructions on how to resolve them.
    pub fn from_conf(conf: crate::Config) -> Self {
        let handle = Handle {
            conf: conf.clone(),
            runtime_plugins: crate::config::base_client_runtime_plugins(conf),
        };
        if let Err(err) = Self::validate_config(&handle) {
            panic!("Invalid client configuration: {err}");
        }
        Self {
            handle: ::std::sync::Arc::new(handle),
        }
    }

    /// Returns the client's configuration.
    pub fn config(&self) -> &crate::Config {
        &self.handle.conf
    }

    fn validate_config(handle: &Handle) -> Result<(), ::aws_smithy_runtime_api::box_error::BoxError> {
        let mut cfg = ::aws_smithy_types::config_bag::ConfigBag::base();
        handle
            .runtime_plugins
            .apply_client_configuration(&mut cfg)?
            .validate_base_client_config(&cfg)?;
        Ok(())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](::aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &::aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }
}

mod batch_create_partition;

mod batch_delete_connection;

mod batch_delete_partition;

mod batch_delete_table;

mod batch_delete_table_version;

mod batch_get_blueprints;

mod batch_get_crawlers;

mod batch_get_custom_entity_types;

mod batch_get_data_quality_result;

mod batch_get_dev_endpoints;

mod batch_get_jobs;

mod batch_get_partition;

mod batch_get_triggers;

mod batch_get_workflows;

mod batch_stop_job_run;

mod batch_update_partition;

mod cancel_data_quality_rule_recommendation_run;

mod cancel_data_quality_ruleset_evaluation_run;

mod cancel_ml_task_run;

mod cancel_statement;

mod check_schema_version_validity;

mod create_blueprint;

mod create_classifier;

mod create_connection;

mod create_crawler;

mod create_custom_entity_type;

mod create_data_quality_ruleset;

mod create_database;

mod create_dev_endpoint;

mod create_job;

mod create_ml_transform;

mod create_partition;

mod create_partition_index;

mod create_registry;

mod create_schema;

mod create_script;

mod create_security_configuration;

mod create_session;

mod create_table;

mod create_trigger;

mod create_user_defined_function;

mod create_workflow;

/// Operation customization and supporting types.
///
/// The underlying HTTP requests made during an operation can be customized
/// by calling the `customize()` method on the builder returned from a client
/// operation call. For example, this can be used to add an additional HTTP header:
///
/// ```ignore
/// # async fn wrapper() -> ::std::result::Result<(), aws_sdk_glue::Error> {
/// # let client: aws_sdk_glue::Client = unimplemented!();
/// use ::http::header::{HeaderName, HeaderValue};
///
/// let result = client.batch_create_partition()
///     .customize()
///     .mutate_request(|req| {
///         // Add `x-example-header` with value
///         req.headers_mut()
///             .insert(
///                 HeaderName::from_static("x-example-header"),
///                 HeaderValue::from_static("1"),
///             );
///     })
///     .send()
///     .await;
/// # }
/// ```
pub mod customize;

mod delete_blueprint;

mod delete_classifier;

mod delete_column_statistics_for_partition;

mod delete_column_statistics_for_table;

mod delete_connection;

mod delete_crawler;

mod delete_custom_entity_type;

mod delete_data_quality_ruleset;

mod delete_database;

mod delete_dev_endpoint;

mod delete_job;

mod delete_ml_transform;

mod delete_partition;

mod delete_partition_index;

mod delete_registry;

mod delete_resource_policy;

mod delete_schema;

mod delete_schema_versions;

mod delete_security_configuration;

mod delete_session;

mod delete_table;

mod delete_table_version;

mod delete_trigger;

mod delete_user_defined_function;

mod delete_workflow;

mod get_blueprint;

mod get_blueprint_run;

mod get_blueprint_runs;

mod get_catalog_import_status;

mod get_classifier;

mod get_classifiers;

mod get_column_statistics_for_partition;

mod get_column_statistics_for_table;

mod get_connection;

mod get_connections;

mod get_crawler;

mod get_crawler_metrics;

mod get_crawlers;

mod get_custom_entity_type;

mod get_data_catalog_encryption_settings;

mod get_data_quality_result;

mod get_data_quality_rule_recommendation_run;

mod get_data_quality_ruleset;

mod get_data_quality_ruleset_evaluation_run;

mod get_database;

mod get_databases;

mod get_dataflow_graph;

mod get_dev_endpoint;

mod get_dev_endpoints;

mod get_job;

mod get_job_bookmark;

mod get_job_run;

mod get_job_runs;

mod get_jobs;

mod get_mapping;

mod get_ml_task_run;

mod get_ml_task_runs;

mod get_ml_transform;

mod get_ml_transforms;

mod get_partition;

mod get_partition_indexes;

mod get_partitions;

mod get_plan;

mod get_registry;

mod get_resource_policies;

mod get_resource_policy;

mod get_schema;

mod get_schema_by_definition;

mod get_schema_version;

mod get_schema_versions_diff;

mod get_security_configuration;

mod get_security_configurations;

mod get_session;

mod get_statement;

mod get_table;

mod get_table_version;

mod get_table_versions;

mod get_tables;

mod get_tags;

mod get_trigger;

mod get_triggers;

mod get_unfiltered_partition_metadata;

mod get_unfiltered_partitions_metadata;

mod get_unfiltered_table_metadata;

mod get_user_defined_function;

mod get_user_defined_functions;

mod get_workflow;

mod get_workflow_run;

mod get_workflow_run_properties;

mod get_workflow_runs;

mod import_catalog_to_glue;

mod list_blueprints;

mod list_crawlers;

mod list_crawls;

mod list_custom_entity_types;

mod list_data_quality_results;

mod list_data_quality_rule_recommendation_runs;

mod list_data_quality_ruleset_evaluation_runs;

mod list_data_quality_rulesets;

mod list_dev_endpoints;

mod list_jobs;

mod list_ml_transforms;

mod list_registries;

mod list_schema_versions;

mod list_schemas;

mod list_sessions;

mod list_statements;

mod list_triggers;

mod list_workflows;

mod put_data_catalog_encryption_settings;

mod put_resource_policy;

mod put_schema_version_metadata;

mod put_workflow_run_properties;

mod query_schema_version_metadata;

mod register_schema_version;

mod remove_schema_version_metadata;

mod reset_job_bookmark;

mod resume_workflow_run;

mod run_statement;

mod search_tables;

mod start_blueprint_run;

mod start_crawler;

mod start_crawler_schedule;

mod start_data_quality_rule_recommendation_run;

mod start_data_quality_ruleset_evaluation_run;

mod start_export_labels_task_run;

mod start_import_labels_task_run;

mod start_job_run;

mod start_ml_evaluation_task_run;

mod start_ml_labeling_set_generation_task_run;

mod start_trigger;

mod start_workflow_run;

mod stop_crawler;

mod stop_crawler_schedule;

mod stop_session;

mod stop_trigger;

mod stop_workflow_run;

mod tag_resource;

mod untag_resource;

mod update_blueprint;

mod update_classifier;

mod update_column_statistics_for_partition;

mod update_column_statistics_for_table;

mod update_connection;

mod update_crawler;

mod update_crawler_schedule;

mod update_data_quality_ruleset;

mod update_database;

mod update_dev_endpoint;

mod update_job;

mod update_job_from_source_control;

mod update_ml_transform;

mod update_partition;

mod update_registry;

mod update_schema;

mod update_source_control_from_job;

mod update_table;

mod update_trigger;

mod update_user_defined_function;

mod update_workflow;
