// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Glue
///
/// Client for invoking operations on AWS Glue. Each operation on AWS Glue is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_glue::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_glue::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_glue::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

mod batch_create_partition;

mod batch_delete_connection;

mod batch_delete_partition;

mod batch_delete_table;

mod batch_delete_table_version;

mod batch_get_blueprints;

mod batch_get_crawlers;

mod batch_get_custom_entity_types;

mod batch_get_data_quality_result;

mod batch_get_dev_endpoints;

mod batch_get_jobs;

mod batch_get_partition;

mod batch_get_triggers;

mod batch_get_workflows;

mod batch_stop_job_run;

mod batch_update_partition;

mod cancel_data_quality_rule_recommendation_run;

mod cancel_data_quality_ruleset_evaluation_run;

mod cancel_ml_task_run;

mod cancel_statement;

mod check_schema_version_validity;

mod create_blueprint;

mod create_classifier;

mod create_connection;

mod create_crawler;

mod create_custom_entity_type;

mod create_data_quality_ruleset;

mod create_database;

mod create_dev_endpoint;

mod create_job;

mod create_ml_transform;

mod create_partition;

mod create_partition_index;

mod create_registry;

mod create_schema;

mod create_script;

mod create_security_configuration;

mod create_session;

mod create_table;

mod create_trigger;

mod create_user_defined_function;

mod create_workflow;

mod delete_blueprint;

mod delete_classifier;

mod delete_column_statistics_for_partition;

mod delete_column_statistics_for_table;

mod delete_connection;

mod delete_crawler;

mod delete_custom_entity_type;

mod delete_data_quality_ruleset;

mod delete_database;

mod delete_dev_endpoint;

mod delete_job;

mod delete_ml_transform;

mod delete_partition;

mod delete_partition_index;

mod delete_registry;

mod delete_resource_policy;

mod delete_schema;

mod delete_schema_versions;

mod delete_security_configuration;

mod delete_session;

mod delete_table;

mod delete_table_version;

mod delete_trigger;

mod delete_user_defined_function;

mod delete_workflow;

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;

mod get_blueprint;

mod get_blueprint_run;

mod get_blueprint_runs;

mod get_catalog_import_status;

mod get_classifier;

mod get_classifiers;

mod get_column_statistics_for_partition;

mod get_column_statistics_for_table;

mod get_connection;

mod get_connections;

mod get_crawler;

mod get_crawler_metrics;

mod get_crawlers;

mod get_custom_entity_type;

mod get_data_catalog_encryption_settings;

mod get_data_quality_result;

mod get_data_quality_rule_recommendation_run;

mod get_data_quality_ruleset;

mod get_data_quality_ruleset_evaluation_run;

mod get_database;

mod get_databases;

mod get_dataflow_graph;

mod get_dev_endpoint;

mod get_dev_endpoints;

mod get_job;

mod get_job_bookmark;

mod get_job_run;

mod get_job_runs;

mod get_jobs;

mod get_mapping;

mod get_ml_task_run;

mod get_ml_task_runs;

mod get_ml_transform;

mod get_ml_transforms;

mod get_partition;

mod get_partition_indexes;

mod get_partitions;

mod get_plan;

mod get_registry;

mod get_resource_policies;

mod get_resource_policy;

mod get_schema;

mod get_schema_by_definition;

mod get_schema_version;

mod get_schema_versions_diff;

mod get_security_configuration;

mod get_security_configurations;

mod get_session;

mod get_statement;

mod get_table;

mod get_table_version;

mod get_table_versions;

mod get_tables;

mod get_tags;

mod get_trigger;

mod get_triggers;

mod get_unfiltered_partition_metadata;

mod get_unfiltered_partitions_metadata;

mod get_unfiltered_table_metadata;

mod get_user_defined_function;

mod get_user_defined_functions;

mod get_workflow;

mod get_workflow_run;

mod get_workflow_run_properties;

mod get_workflow_runs;

mod import_catalog_to_glue;

mod list_blueprints;

mod list_crawlers;

mod list_crawls;

mod list_custom_entity_types;

mod list_data_quality_results;

mod list_data_quality_rule_recommendation_runs;

mod list_data_quality_ruleset_evaluation_runs;

mod list_data_quality_rulesets;

mod list_dev_endpoints;

mod list_jobs;

mod list_ml_transforms;

mod list_registries;

mod list_schema_versions;

mod list_schemas;

mod list_sessions;

mod list_statements;

mod list_triggers;

mod list_workflows;

mod put_data_catalog_encryption_settings;

mod put_resource_policy;

mod put_schema_version_metadata;

mod put_workflow_run_properties;

mod query_schema_version_metadata;

mod register_schema_version;

mod remove_schema_version_metadata;

mod reset_job_bookmark;

mod resume_workflow_run;

mod run_statement;

mod search_tables;

mod start_blueprint_run;

mod start_crawler;

mod start_crawler_schedule;

mod start_data_quality_rule_recommendation_run;

mod start_data_quality_ruleset_evaluation_run;

mod start_export_labels_task_run;

mod start_import_labels_task_run;

mod start_job_run;

mod start_ml_evaluation_task_run;

mod start_ml_labeling_set_generation_task_run;

mod start_trigger;

mod start_workflow_run;

mod stop_crawler;

mod stop_crawler_schedule;

mod stop_session;

mod stop_trigger;

mod stop_workflow_run;

mod tag_resource;

mod untag_resource;

mod update_blueprint;

mod update_classifier;

mod update_column_statistics_for_partition;

mod update_column_statistics_for_table;

mod update_connection;

mod update_crawler;

mod update_crawler_schedule;

mod update_data_quality_ruleset;

mod update_database;

mod update_dev_endpoint;

mod update_job;

mod update_job_from_source_control;

mod update_ml_transform;

mod update_partition;

mod update_registry;

mod update_schema;

mod update_source_control_from_job;

mod update_table;

mod update_trigger;

mod update_user_defined_function;

mod update_workflow;
