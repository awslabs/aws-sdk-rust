// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePartitionIndexInput {
    /// <p>The catalog ID where the table resides.</p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>Specifies the name of a database from which you want to delete a partition index.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>Specifies the name of a table from which you want to delete a partition index.</p>
    #[doc(hidden)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>The name of the partition index to be deleted.</p>
    #[doc(hidden)]
    pub index_name: std::option::Option<std::string::String>,
}
impl DeletePartitionIndexInput {
    /// <p>The catalog ID where the table resides.</p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>Specifies the name of a database from which you want to delete a partition index.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>Specifies the name of a table from which you want to delete a partition index.</p>
    pub fn table_name(&self) -> std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>The name of the partition index to be deleted.</p>
    pub fn index_name(&self) -> std::option::Option<&str> {
        self.index_name.as_deref()
    }
}
impl DeletePartitionIndexInput {
    /// Creates a new builder-style object to manufacture [`DeletePartitionIndexInput`](crate::operation::delete_partition_index::DeletePartitionIndexInput).
    pub fn builder(
    ) -> crate::operation::delete_partition_index::builders::DeletePartitionIndexInputBuilder {
        crate::operation::delete_partition_index::builders::DeletePartitionIndexInputBuilder::default()
    }
}

/// A builder for [`DeletePartitionIndexInput`](crate::operation::delete_partition_index::DeletePartitionIndexInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeletePartitionIndexInputBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) table_name: std::option::Option<std::string::String>,
    pub(crate) index_name: std::option::Option<std::string::String>,
}
impl DeletePartitionIndexInputBuilder {
    /// <p>The catalog ID where the table resides.</p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The catalog ID where the table resides.</p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>Specifies the name of a database from which you want to delete a partition index.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>Specifies the name of a database from which you want to delete a partition index.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>Specifies the name of a table from which you want to delete a partition index.</p>
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_name = Some(input.into());
        self
    }
    /// <p>Specifies the name of a table from which you want to delete a partition index.</p>
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the partition index to be deleted.</p>
    pub fn index_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.index_name = Some(input.into());
        self
    }
    /// <p>The name of the partition index to be deleted.</p>
    pub fn set_index_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.index_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DeletePartitionIndexInput`](crate::operation::delete_partition_index::DeletePartitionIndexInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_partition_index::DeletePartitionIndexInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_partition_index::DeletePartitionIndexInput {
                catalog_id: self.catalog_id,
                database_name: self.database_name,
                table_name: self.table_name,
                index_name: self.index_name,
            },
        )
    }
}
