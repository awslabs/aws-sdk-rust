// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSchemasOutput {
    /// <p>An array of <code>SchemaListItem</code> objects containing details of each schema.</p>
    #[doc(hidden)]
    pub schemas: std::option::Option<std::vec::Vec<crate::types::SchemaListItem>>,
    /// <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSchemasOutput {
    /// <p>An array of <code>SchemaListItem</code> objects containing details of each schema.</p>
    pub fn schemas(&self) -> std::option::Option<&[crate::types::SchemaListItem]> {
        self.schemas.as_deref()
    }
    /// <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSchemasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSchemasOutput {
    /// Creates a new builder-style object to manufacture [`ListSchemasOutput`](crate::operation::list_schemas::ListSchemasOutput).
    pub fn builder() -> crate::operation::list_schemas::builders::ListSchemasOutputBuilder {
        crate::operation::list_schemas::builders::ListSchemasOutputBuilder::default()
    }
}

/// A builder for [`ListSchemasOutput`](crate::operation::list_schemas::ListSchemasOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListSchemasOutputBuilder {
    pub(crate) schemas: std::option::Option<std::vec::Vec<crate::types::SchemaListItem>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSchemasOutputBuilder {
    /// Appends an item to `schemas`.
    ///
    /// To override the contents of this collection use [`set_schemas`](Self::set_schemas).
    ///
    /// <p>An array of <code>SchemaListItem</code> objects containing details of each schema.</p>
    pub fn schemas(mut self, input: crate::types::SchemaListItem) -> Self {
        let mut v = self.schemas.unwrap_or_default();
        v.push(input);
        self.schemas = Some(v);
        self
    }
    /// <p>An array of <code>SchemaListItem</code> objects containing details of each schema.</p>
    pub fn set_schemas(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SchemaListItem>>,
    ) -> Self {
        self.schemas = input;
        self
    }
    /// <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListSchemasOutput`](crate::operation::list_schemas::ListSchemasOutput).
    pub fn build(self) -> crate::operation::list_schemas::ListSchemasOutput {
        crate::operation::list_schemas::ListSchemasOutput {
            schemas: self.schemas,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
