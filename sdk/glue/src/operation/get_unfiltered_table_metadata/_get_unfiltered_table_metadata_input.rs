// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetUnfilteredTableMetadataInput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A structure containing information for audit.</p>
    #[doc(hidden)]
    pub audit_context: std::option::Option<crate::types::AuditContext>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub supported_permission_types:
        std::option::Option<std::vec::Vec<crate::types::PermissionType>>,
}
impl GetUnfilteredTableMetadataInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A structure containing information for audit.</p>
    pub fn audit_context(&self) -> std::option::Option<&crate::types::AuditContext> {
        self.audit_context.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn supported_permission_types(
        &self,
    ) -> std::option::Option<&[crate::types::PermissionType]> {
        self.supported_permission_types.as_deref()
    }
}
impl GetUnfilteredTableMetadataInput {
    /// Creates a new builder-style object to manufacture [`GetUnfilteredTableMetadataInput`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataInput).
    pub fn builder() -> crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataInputBuilder{
        crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataInputBuilder::default()
    }
}

/// A builder for [`GetUnfilteredTableMetadataInput`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetUnfilteredTableMetadataInputBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) audit_context: std::option::Option<crate::types::AuditContext>,
    pub(crate) supported_permission_types:
        std::option::Option<std::vec::Vec<crate::types::PermissionType>>,
}
impl GetUnfilteredTableMetadataInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A structure containing information for audit.</p>
    pub fn audit_context(mut self, input: crate::types::AuditContext) -> Self {
        self.audit_context = Some(input);
        self
    }
    /// <p>A structure containing information for audit.</p>
    pub fn set_audit_context(
        mut self,
        input: std::option::Option<crate::types::AuditContext>,
    ) -> Self {
        self.audit_context = input;
        self
    }
    /// Appends an item to `supported_permission_types`.
    ///
    /// To override the contents of this collection use [`set_supported_permission_types`](Self::set_supported_permission_types).
    ///
    pub fn supported_permission_types(mut self, input: crate::types::PermissionType) -> Self {
        let mut v = self.supported_permission_types.unwrap_or_default();
        v.push(input);
        self.supported_permission_types = Some(v);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_supported_permission_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PermissionType>>,
    ) -> Self {
        self.supported_permission_types = input;
        self
    }
    /// Consumes the builder and constructs a [`GetUnfilteredTableMetadataInput`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataInput {
                catalog_id: self.catalog_id,
                database_name: self.database_name,
                name: self.name,
                audit_context: self.audit_context,
                supported_permission_types: self.supported_permission_types,
            },
        )
    }
}
