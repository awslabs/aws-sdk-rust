// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMlTaskRunsInput {
    /// <p>The unique identifier of the machine learning transform.</p>
    #[doc(hidden)]
    pub transform_id: std::option::Option<std::string::String>,
    /// <p>A token for pagination of the results. The default is empty.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return. </p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The filter criteria, in the <code>TaskRunFilterCriteria</code> structure, for the task run.</p>
    #[doc(hidden)]
    pub filter: std::option::Option<crate::types::TaskRunFilterCriteria>,
    /// <p>The sorting criteria, in the <code>TaskRunSortCriteria</code> structure, for the task run.</p>
    #[doc(hidden)]
    pub sort: std::option::Option<crate::types::TaskRunSortCriteria>,
}
impl GetMlTaskRunsInput {
    /// <p>The unique identifier of the machine learning transform.</p>
    pub fn transform_id(&self) -> std::option::Option<&str> {
        self.transform_id.as_deref()
    }
    /// <p>A token for pagination of the results. The default is empty.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return. </p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The filter criteria, in the <code>TaskRunFilterCriteria</code> structure, for the task run.</p>
    pub fn filter(&self) -> std::option::Option<&crate::types::TaskRunFilterCriteria> {
        self.filter.as_ref()
    }
    /// <p>The sorting criteria, in the <code>TaskRunSortCriteria</code> structure, for the task run.</p>
    pub fn sort(&self) -> std::option::Option<&crate::types::TaskRunSortCriteria> {
        self.sort.as_ref()
    }
}
impl GetMlTaskRunsInput {
    /// Creates a new builder-style object to manufacture [`GetMlTaskRunsInput`](crate::operation::get_ml_task_runs::GetMlTaskRunsInput).
    pub fn builder() -> crate::operation::get_ml_task_runs::builders::GetMlTaskRunsInputBuilder {
        crate::operation::get_ml_task_runs::builders::GetMlTaskRunsInputBuilder::default()
    }
}

/// A builder for [`GetMlTaskRunsInput`](crate::operation::get_ml_task_runs::GetMlTaskRunsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetMlTaskRunsInputBuilder {
    pub(crate) transform_id: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) filter: std::option::Option<crate::types::TaskRunFilterCriteria>,
    pub(crate) sort: std::option::Option<crate::types::TaskRunSortCriteria>,
}
impl GetMlTaskRunsInputBuilder {
    /// <p>The unique identifier of the machine learning transform.</p>
    pub fn transform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transform_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the machine learning transform.</p>
    pub fn set_transform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.transform_id = input;
        self
    }
    /// <p>A token for pagination of the results. The default is empty.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token for pagination of the results. The default is empty.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The filter criteria, in the <code>TaskRunFilterCriteria</code> structure, for the task run.</p>
    pub fn filter(mut self, input: crate::types::TaskRunFilterCriteria) -> Self {
        self.filter = Some(input);
        self
    }
    /// <p>The filter criteria, in the <code>TaskRunFilterCriteria</code> structure, for the task run.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::types::TaskRunFilterCriteria>,
    ) -> Self {
        self.filter = input;
        self
    }
    /// <p>The sorting criteria, in the <code>TaskRunSortCriteria</code> structure, for the task run.</p>
    pub fn sort(mut self, input: crate::types::TaskRunSortCriteria) -> Self {
        self.sort = Some(input);
        self
    }
    /// <p>The sorting criteria, in the <code>TaskRunSortCriteria</code> structure, for the task run.</p>
    pub fn set_sort(
        mut self,
        input: std::option::Option<crate::types::TaskRunSortCriteria>,
    ) -> Self {
        self.sort = input;
        self
    }
    /// Consumes the builder and constructs a [`GetMlTaskRunsInput`](crate::operation::get_ml_task_runs::GetMlTaskRunsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_ml_task_runs::GetMlTaskRunsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_ml_task_runs::GetMlTaskRunsInput {
            transform_id: self.transform_id,
            next_token: self.next_token,
            max_results: self.max_results,
            filter: self.filter,
            sort: self.sort,
        })
    }
}
