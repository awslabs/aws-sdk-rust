// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTablesInput {
    /// <p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.</p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>The database in the catalog whose tables to list. For Hive compatibility, this name is entirely lowercase.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>A regular expression pattern. If present, only those tables whose names match the pattern are returned.</p>
    #[doc(hidden)]
    pub expression: std::option::Option<std::string::String>,
    /// <p>A continuation token, included if this is a continuation call.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of tables to return in a single response.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The transaction ID at which to read the table contents.</p>
    #[doc(hidden)]
    pub transaction_id: std::option::Option<std::string::String>,
    /// <p>The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.</p>
    #[doc(hidden)]
    pub query_as_of_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl GetTablesInput {
    /// <p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The database in the catalog whose tables to list. For Hive compatibility, this name is entirely lowercase.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>A regular expression pattern. If present, only those tables whose names match the pattern are returned.</p>
    pub fn expression(&self) -> std::option::Option<&str> {
        self.expression.as_deref()
    }
    /// <p>A continuation token, included if this is a continuation call.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of tables to return in a single response.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The transaction ID at which to read the table contents.</p>
    pub fn transaction_id(&self) -> std::option::Option<&str> {
        self.transaction_id.as_deref()
    }
    /// <p>The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.</p>
    pub fn query_as_of_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.query_as_of_time.as_ref()
    }
}
impl GetTablesInput {
    /// Creates a new builder-style object to manufacture [`GetTablesInput`](crate::operation::get_tables::GetTablesInput).
    pub fn builder() -> crate::operation::get_tables::builders::GetTablesInputBuilder {
        crate::operation::get_tables::builders::GetTablesInputBuilder::default()
    }
}

/// A builder for [`GetTablesInput`](crate::operation::get_tables::GetTablesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetTablesInputBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) expression: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) transaction_id: std::option::Option<std::string::String>,
    pub(crate) query_as_of_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl GetTablesInputBuilder {
    /// <p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The database in the catalog whose tables to list. For Hive compatibility, this name is entirely lowercase.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>The database in the catalog whose tables to list. For Hive compatibility, this name is entirely lowercase.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>A regular expression pattern. If present, only those tables whose names match the pattern are returned.</p>
    pub fn expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.expression = Some(input.into());
        self
    }
    /// <p>A regular expression pattern. If present, only those tables whose names match the pattern are returned.</p>
    pub fn set_expression(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>A continuation token, included if this is a continuation call.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A continuation token, included if this is a continuation call.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of tables to return in a single response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of tables to return in a single response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The transaction ID at which to read the table contents.</p>
    pub fn transaction_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transaction_id = Some(input.into());
        self
    }
    /// <p>The transaction ID at which to read the table contents.</p>
    pub fn set_transaction_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.transaction_id = input;
        self
    }
    /// <p>The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.</p>
    pub fn query_as_of_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.query_as_of_time = Some(input);
        self
    }
    /// <p>The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.</p>
    pub fn set_query_as_of_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.query_as_of_time = input;
        self
    }
    /// Consumes the builder and constructs a [`GetTablesInput`](crate::operation::get_tables::GetTablesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_tables::GetTablesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_tables::GetTablesInput {
            catalog_id: self.catalog_id,
            database_name: self.database_name,
            expression: self.expression,
            next_token: self.next_token,
            max_results: self.max_results,
            transaction_id: self.transaction_id,
            query_as_of_time: self.query_as_of_time,
        })
    }
}
