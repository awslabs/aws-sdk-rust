// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_ml_task_run::_get_ml_task_run_output::GetMlTaskRunOutputBuilder;

pub use crate::operation::get_ml_task_run::_get_ml_task_run_input::GetMlTaskRunInputBuilder;

/// Fluent builder constructing a request to `GetMLTaskRun`.
///
/// <p>Gets details for a specific task run on a machine learning transform. Machine learning task runs are asynchronous tasks that Glue runs on your behalf as part of various machine learning workflows. You can check the stats of any task run by calling <code>GetMLTaskRun</code> with the <code>TaskRunID</code> and its parent transform's <code>TransformID</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetMLTaskRunFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_ml_task_run::builders::GetMlTaskRunInputBuilder,
}
impl GetMLTaskRunFluentBuilder {
    /// Creates a new `GetMLTaskRun`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_ml_task_run::GetMLTaskRun,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::get_ml_task_run::GetMLTaskRunError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_ml_task_run::GetMlTaskRunOutput,
        aws_smithy_http::result::SdkError<crate::operation::get_ml_task_run::GetMLTaskRunError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the machine learning transform.</p>
    pub fn transform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.transform_id(input.into());
        self
    }
    /// <p>The unique identifier of the machine learning transform.</p>
    pub fn set_transform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_transform_id(input);
        self
    }
    /// <p>The unique identifier of the task run.</p>
    pub fn task_run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.task_run_id(input.into());
        self
    }
    /// <p>The unique identifier of the task run.</p>
    pub fn set_task_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_task_run_id(input);
        self
    }
}
