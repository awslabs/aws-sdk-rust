// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_plan::_get_plan_output::GetPlanOutputBuilder;

pub use crate::operation::get_plan::_get_plan_input::GetPlanInputBuilder;

/// Fluent builder constructing a request to `GetPlan`.
///
/// <p>Gets code to perform a specified mapping.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetPlanFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_plan::builders::GetPlanInputBuilder,
}
impl GetPlanFluentBuilder {
    /// Creates a new `GetPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_plan::GetPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::get_plan::GetPlanError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_plan::GetPlanOutput,
        aws_smithy_http::result::SdkError<crate::operation::get_plan::GetPlanError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `Mapping`.
    ///
    /// To override the contents of this collection use [`set_mapping`](Self::set_mapping).
    ///
    /// <p>The list of mappings from a source table to target tables.</p>
    pub fn mapping(mut self, input: crate::types::MappingEntry) -> Self {
        self.inner = self.inner.mapping(input);
        self
    }
    /// <p>The list of mappings from a source table to target tables.</p>
    pub fn set_mapping(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MappingEntry>>,
    ) -> Self {
        self.inner = self.inner.set_mapping(input);
        self
    }
    /// <p>The source table.</p>
    pub fn source(mut self, input: crate::types::CatalogEntry) -> Self {
        self.inner = self.inner.source(input);
        self
    }
    /// <p>The source table.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::types::CatalogEntry>) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
    /// Appends an item to `Sinks`.
    ///
    /// To override the contents of this collection use [`set_sinks`](Self::set_sinks).
    ///
    /// <p>The target tables.</p>
    pub fn sinks(mut self, input: crate::types::CatalogEntry) -> Self {
        self.inner = self.inner.sinks(input);
        self
    }
    /// <p>The target tables.</p>
    pub fn set_sinks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CatalogEntry>>,
    ) -> Self {
        self.inner = self.inner.set_sinks(input);
        self
    }
    /// <p>The parameters for the mapping.</p>
    pub fn location(mut self, input: crate::types::Location) -> Self {
        self.inner = self.inner.location(input);
        self
    }
    /// <p>The parameters for the mapping.</p>
    pub fn set_location(mut self, input: std::option::Option<crate::types::Location>) -> Self {
        self.inner = self.inner.set_location(input);
        self
    }
    /// <p>The programming language of the code to perform the mapping.</p>
    pub fn language(mut self, input: crate::types::Language) -> Self {
        self.inner = self.inner.language(input);
        self
    }
    /// <p>The programming language of the code to perform the mapping.</p>
    pub fn set_language(mut self, input: std::option::Option<crate::types::Language>) -> Self {
        self.inner = self.inner.set_language(input);
        self
    }
    /// Adds a key-value pair to `AdditionalPlanOptionsMap`.
    ///
    /// To override the contents of this collection use [`set_additional_plan_options_map`](Self::set_additional_plan_options_map).
    ///
    /// <p>A map to hold additional optional key-value parameters.</p>
    /// <p>Currently, these key-value pairs are supported:</p>
    /// <ul>
    /// <li> <p> <code>inferSchema</code>&nbsp; — &nbsp;Specifies whether to set <code>inferSchema</code> to true or false for the default script generated by an Glue job. For example, to set <code>inferSchema</code> to true, pass the following key value pair:</p> <p> <code>--additional-plan-options-map '{"inferSchema":"true"}'</code> </p> </li>
    /// </ul>
    pub fn additional_plan_options_map(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.additional_plan_options_map(k.into(), v.into());
        self
    }
    /// <p>A map to hold additional optional key-value parameters.</p>
    /// <p>Currently, these key-value pairs are supported:</p>
    /// <ul>
    /// <li> <p> <code>inferSchema</code>&nbsp; — &nbsp;Specifies whether to set <code>inferSchema</code> to true or false for the default script generated by an Glue job. For example, to set <code>inferSchema</code> to true, pass the following key value pair:</p> <p> <code>--additional-plan-options-map '{"inferSchema":"true"}'</code> </p> </li>
    /// </ul>
    pub fn set_additional_plan_options_map(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_additional_plan_options_map(input);
        self
    }
}
