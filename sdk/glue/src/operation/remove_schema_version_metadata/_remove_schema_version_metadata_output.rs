// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RemoveSchemaVersionMetadataOutput {
    /// <p>The Amazon Resource Name (ARN) of the schema.</p>
    #[doc(hidden)]
    pub schema_arn: std::option::Option<std::string::String>,
    /// <p>The name of the schema.</p>
    #[doc(hidden)]
    pub schema_name: std::option::Option<std::string::String>,
    /// <p>The name of the registry.</p>
    #[doc(hidden)]
    pub registry_name: std::option::Option<std::string::String>,
    /// <p>The latest version of the schema.</p>
    #[doc(hidden)]
    pub latest_version: bool,
    /// <p>The version number of the schema.</p>
    #[doc(hidden)]
    pub version_number: i64,
    /// <p>The version ID for the schema version.</p>
    #[doc(hidden)]
    pub schema_version_id: std::option::Option<std::string::String>,
    /// <p>The metadata key.</p>
    #[doc(hidden)]
    pub metadata_key: std::option::Option<std::string::String>,
    /// <p>The value of the metadata key.</p>
    #[doc(hidden)]
    pub metadata_value: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RemoveSchemaVersionMetadataOutput {
    /// <p>The Amazon Resource Name (ARN) of the schema.</p>
    pub fn schema_arn(&self) -> std::option::Option<&str> {
        self.schema_arn.as_deref()
    }
    /// <p>The name of the schema.</p>
    pub fn schema_name(&self) -> std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// <p>The name of the registry.</p>
    pub fn registry_name(&self) -> std::option::Option<&str> {
        self.registry_name.as_deref()
    }
    /// <p>The latest version of the schema.</p>
    pub fn latest_version(&self) -> bool {
        self.latest_version
    }
    /// <p>The version number of the schema.</p>
    pub fn version_number(&self) -> i64 {
        self.version_number
    }
    /// <p>The version ID for the schema version.</p>
    pub fn schema_version_id(&self) -> std::option::Option<&str> {
        self.schema_version_id.as_deref()
    }
    /// <p>The metadata key.</p>
    pub fn metadata_key(&self) -> std::option::Option<&str> {
        self.metadata_key.as_deref()
    }
    /// <p>The value of the metadata key.</p>
    pub fn metadata_value(&self) -> std::option::Option<&str> {
        self.metadata_value.as_deref()
    }
}
impl aws_http::request_id::RequestId for RemoveSchemaVersionMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RemoveSchemaVersionMetadataOutput {
    /// Creates a new builder-style object to manufacture [`RemoveSchemaVersionMetadataOutput`](crate::operation::remove_schema_version_metadata::RemoveSchemaVersionMetadataOutput).
    pub fn builder() -> crate::operation::remove_schema_version_metadata::builders::RemoveSchemaVersionMetadataOutputBuilder{
        crate::operation::remove_schema_version_metadata::builders::RemoveSchemaVersionMetadataOutputBuilder::default()
    }
}

/// A builder for [`RemoveSchemaVersionMetadataOutput`](crate::operation::remove_schema_version_metadata::RemoveSchemaVersionMetadataOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RemoveSchemaVersionMetadataOutputBuilder {
    pub(crate) schema_arn: std::option::Option<std::string::String>,
    pub(crate) schema_name: std::option::Option<std::string::String>,
    pub(crate) registry_name: std::option::Option<std::string::String>,
    pub(crate) latest_version: std::option::Option<bool>,
    pub(crate) version_number: std::option::Option<i64>,
    pub(crate) schema_version_id: std::option::Option<std::string::String>,
    pub(crate) metadata_key: std::option::Option<std::string::String>,
    pub(crate) metadata_value: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RemoveSchemaVersionMetadataOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the schema.</p>
    pub fn schema_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the schema.</p>
    pub fn set_schema_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_arn = input;
        self
    }
    /// <p>The name of the schema.</p>
    pub fn schema_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_name = Some(input.into());
        self
    }
    /// <p>The name of the schema.</p>
    pub fn set_schema_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>The name of the registry.</p>
    pub fn registry_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_name = Some(input.into());
        self
    }
    /// <p>The name of the registry.</p>
    pub fn set_registry_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_name = input;
        self
    }
    /// <p>The latest version of the schema.</p>
    pub fn latest_version(mut self, input: bool) -> Self {
        self.latest_version = Some(input);
        self
    }
    /// <p>The latest version of the schema.</p>
    pub fn set_latest_version(mut self, input: std::option::Option<bool>) -> Self {
        self.latest_version = input;
        self
    }
    /// <p>The version number of the schema.</p>
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = Some(input);
        self
    }
    /// <p>The version number of the schema.</p>
    pub fn set_version_number(mut self, input: std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The version ID for the schema version.</p>
    pub fn schema_version_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_version_id = Some(input.into());
        self
    }
    /// <p>The version ID for the schema version.</p>
    pub fn set_schema_version_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schema_version_id = input;
        self
    }
    /// <p>The metadata key.</p>
    pub fn metadata_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata_key = Some(input.into());
        self
    }
    /// <p>The metadata key.</p>
    pub fn set_metadata_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata_key = input;
        self
    }
    /// <p>The value of the metadata key.</p>
    pub fn metadata_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata_value = Some(input.into());
        self
    }
    /// <p>The value of the metadata key.</p>
    pub fn set_metadata_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata_value = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RemoveSchemaVersionMetadataOutput`](crate::operation::remove_schema_version_metadata::RemoveSchemaVersionMetadataOutput).
    pub fn build(
        self,
    ) -> crate::operation::remove_schema_version_metadata::RemoveSchemaVersionMetadataOutput {
        crate::operation::remove_schema_version_metadata::RemoveSchemaVersionMetadataOutput {
            schema_arn: self.schema_arn,
            schema_name: self.schema_name,
            registry_name: self.registry_name,
            latest_version: self.latest_version.unwrap_or_default(),
            version_number: self.version_number.unwrap_or_default(),
            schema_version_id: self.schema_version_id,
            metadata_key: self.metadata_key,
            metadata_value: self.metadata_value,
            _request_id: self._request_id,
        }
    }
}
