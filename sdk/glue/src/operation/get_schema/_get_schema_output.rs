// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSchemaOutput {
    /// <p>The name of the registry.</p>
    #[doc(hidden)]
    pub registry_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the registry.</p>
    #[doc(hidden)]
    pub registry_arn: std::option::Option<std::string::String>,
    /// <p>The name of the schema.</p>
    #[doc(hidden)]
    pub schema_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the schema.</p>
    #[doc(hidden)]
    pub schema_arn: std::option::Option<std::string::String>,
    /// <p>A description of schema if specified when created</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
    #[doc(hidden)]
    pub data_format: std::option::Option<crate::types::DataFormat>,
    /// <p>The compatibility mode of the schema.</p>
    #[doc(hidden)]
    pub compatibility: std::option::Option<crate::types::Compatibility>,
    /// <p>The version number of the checkpoint (the last time the compatibility mode was changed).</p>
    #[doc(hidden)]
    pub schema_checkpoint: i64,
    /// <p>The latest version of the schema associated with the returned schema definition.</p>
    #[doc(hidden)]
    pub latest_schema_version: i64,
    /// <p>The next version of the schema associated with the returned schema definition.</p>
    #[doc(hidden)]
    pub next_schema_version: i64,
    /// <p>The status of the schema.</p>
    #[doc(hidden)]
    pub schema_status: std::option::Option<crate::types::SchemaStatus>,
    /// <p>The date and time the schema was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<std::string::String>,
    /// <p>The date and time the schema was updated.</p>
    #[doc(hidden)]
    pub updated_time: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetSchemaOutput {
    /// <p>The name of the registry.</p>
    pub fn registry_name(&self) -> std::option::Option<&str> {
        self.registry_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the registry.</p>
    pub fn registry_arn(&self) -> std::option::Option<&str> {
        self.registry_arn.as_deref()
    }
    /// <p>The name of the schema.</p>
    pub fn schema_name(&self) -> std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the schema.</p>
    pub fn schema_arn(&self) -> std::option::Option<&str> {
        self.schema_arn.as_deref()
    }
    /// <p>A description of schema if specified when created</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
    pub fn data_format(&self) -> std::option::Option<&crate::types::DataFormat> {
        self.data_format.as_ref()
    }
    /// <p>The compatibility mode of the schema.</p>
    pub fn compatibility(&self) -> std::option::Option<&crate::types::Compatibility> {
        self.compatibility.as_ref()
    }
    /// <p>The version number of the checkpoint (the last time the compatibility mode was changed).</p>
    pub fn schema_checkpoint(&self) -> i64 {
        self.schema_checkpoint
    }
    /// <p>The latest version of the schema associated with the returned schema definition.</p>
    pub fn latest_schema_version(&self) -> i64 {
        self.latest_schema_version
    }
    /// <p>The next version of the schema associated with the returned schema definition.</p>
    pub fn next_schema_version(&self) -> i64 {
        self.next_schema_version
    }
    /// <p>The status of the schema.</p>
    pub fn schema_status(&self) -> std::option::Option<&crate::types::SchemaStatus> {
        self.schema_status.as_ref()
    }
    /// <p>The date and time the schema was created.</p>
    pub fn created_time(&self) -> std::option::Option<&str> {
        self.created_time.as_deref()
    }
    /// <p>The date and time the schema was updated.</p>
    pub fn updated_time(&self) -> std::option::Option<&str> {
        self.updated_time.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetSchemaOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSchemaOutput {
    /// Creates a new builder-style object to manufacture [`GetSchemaOutput`](crate::operation::get_schema::GetSchemaOutput).
    pub fn builder() -> crate::operation::get_schema::builders::GetSchemaOutputBuilder {
        crate::operation::get_schema::builders::GetSchemaOutputBuilder::default()
    }
}

/// A builder for [`GetSchemaOutput`](crate::operation::get_schema::GetSchemaOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSchemaOutputBuilder {
    pub(crate) registry_name: std::option::Option<std::string::String>,
    pub(crate) registry_arn: std::option::Option<std::string::String>,
    pub(crate) schema_name: std::option::Option<std::string::String>,
    pub(crate) schema_arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) data_format: std::option::Option<crate::types::DataFormat>,
    pub(crate) compatibility: std::option::Option<crate::types::Compatibility>,
    pub(crate) schema_checkpoint: std::option::Option<i64>,
    pub(crate) latest_schema_version: std::option::Option<i64>,
    pub(crate) next_schema_version: std::option::Option<i64>,
    pub(crate) schema_status: std::option::Option<crate::types::SchemaStatus>,
    pub(crate) created_time: std::option::Option<std::string::String>,
    pub(crate) updated_time: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetSchemaOutputBuilder {
    /// <p>The name of the registry.</p>
    pub fn registry_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_name = Some(input.into());
        self
    }
    /// <p>The name of the registry.</p>
    pub fn set_registry_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the registry.</p>
    pub fn registry_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the registry.</p>
    pub fn set_registry_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_arn = input;
        self
    }
    /// <p>The name of the schema.</p>
    pub fn schema_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_name = Some(input.into());
        self
    }
    /// <p>The name of the schema.</p>
    pub fn set_schema_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the schema.</p>
    pub fn schema_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the schema.</p>
    pub fn set_schema_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_arn = input;
        self
    }
    /// <p>A description of schema if specified when created</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of schema if specified when created</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
    pub fn data_format(mut self, input: crate::types::DataFormat) -> Self {
        self.data_format = Some(input);
        self
    }
    /// <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
    pub fn set_data_format(mut self, input: std::option::Option<crate::types::DataFormat>) -> Self {
        self.data_format = input;
        self
    }
    /// <p>The compatibility mode of the schema.</p>
    pub fn compatibility(mut self, input: crate::types::Compatibility) -> Self {
        self.compatibility = Some(input);
        self
    }
    /// <p>The compatibility mode of the schema.</p>
    pub fn set_compatibility(
        mut self,
        input: std::option::Option<crate::types::Compatibility>,
    ) -> Self {
        self.compatibility = input;
        self
    }
    /// <p>The version number of the checkpoint (the last time the compatibility mode was changed).</p>
    pub fn schema_checkpoint(mut self, input: i64) -> Self {
        self.schema_checkpoint = Some(input);
        self
    }
    /// <p>The version number of the checkpoint (the last time the compatibility mode was changed).</p>
    pub fn set_schema_checkpoint(mut self, input: std::option::Option<i64>) -> Self {
        self.schema_checkpoint = input;
        self
    }
    /// <p>The latest version of the schema associated with the returned schema definition.</p>
    pub fn latest_schema_version(mut self, input: i64) -> Self {
        self.latest_schema_version = Some(input);
        self
    }
    /// <p>The latest version of the schema associated with the returned schema definition.</p>
    pub fn set_latest_schema_version(mut self, input: std::option::Option<i64>) -> Self {
        self.latest_schema_version = input;
        self
    }
    /// <p>The next version of the schema associated with the returned schema definition.</p>
    pub fn next_schema_version(mut self, input: i64) -> Self {
        self.next_schema_version = Some(input);
        self
    }
    /// <p>The next version of the schema associated with the returned schema definition.</p>
    pub fn set_next_schema_version(mut self, input: std::option::Option<i64>) -> Self {
        self.next_schema_version = input;
        self
    }
    /// <p>The status of the schema.</p>
    pub fn schema_status(mut self, input: crate::types::SchemaStatus) -> Self {
        self.schema_status = Some(input);
        self
    }
    /// <p>The status of the schema.</p>
    pub fn set_schema_status(
        mut self,
        input: std::option::Option<crate::types::SchemaStatus>,
    ) -> Self {
        self.schema_status = input;
        self
    }
    /// <p>The date and time the schema was created.</p>
    pub fn created_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_time = Some(input.into());
        self
    }
    /// <p>The date and time the schema was created.</p>
    pub fn set_created_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time the schema was updated.</p>
    pub fn updated_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.updated_time = Some(input.into());
        self
    }
    /// <p>The date and time the schema was updated.</p>
    pub fn set_updated_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.updated_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSchemaOutput`](crate::operation::get_schema::GetSchemaOutput).
    pub fn build(self) -> crate::operation::get_schema::GetSchemaOutput {
        crate::operation::get_schema::GetSchemaOutput {
            registry_name: self.registry_name,
            registry_arn: self.registry_arn,
            schema_name: self.schema_name,
            schema_arn: self.schema_arn,
            description: self.description,
            data_format: self.data_format,
            compatibility: self.compatibility,
            schema_checkpoint: self.schema_checkpoint.unwrap_or_default(),
            latest_schema_version: self.latest_schema_version.unwrap_or_default(),
            next_schema_version: self.next_schema_version.unwrap_or_default(),
            schema_status: self.schema_status,
            created_time: self.created_time,
            updated_time: self.updated_time,
            _request_id: self._request_id,
        }
    }
}
