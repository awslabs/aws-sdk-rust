// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePartitionInput {
    /// <p>The ID of the Data Catalog where the partition to be updated resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>The name of the catalog database in which the table in question resides.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The name of the table in which the partition to be updated is located.</p>
    #[doc(hidden)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>List of partition key values that define the partition to update.</p>
    #[doc(hidden)]
    pub partition_value_list: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The new partition object to update the partition to.</p>
    /// <p>The <code>Values</code> property can't be changed. If you want to change the partition key values for a partition, delete and recreate the partition.</p>
    #[doc(hidden)]
    pub partition_input: std::option::Option<crate::types::PartitionInput>,
}
impl UpdatePartitionInput {
    /// <p>The ID of the Data Catalog where the partition to be updated resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of the catalog database in which the table in question resides.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the table in which the partition to be updated is located.</p>
    pub fn table_name(&self) -> std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>List of partition key values that define the partition to update.</p>
    pub fn partition_value_list(&self) -> std::option::Option<&[std::string::String]> {
        self.partition_value_list.as_deref()
    }
    /// <p>The new partition object to update the partition to.</p>
    /// <p>The <code>Values</code> property can't be changed. If you want to change the partition key values for a partition, delete and recreate the partition.</p>
    pub fn partition_input(&self) -> std::option::Option<&crate::types::PartitionInput> {
        self.partition_input.as_ref()
    }
}
impl UpdatePartitionInput {
    /// Creates a new builder-style object to manufacture [`UpdatePartitionInput`](crate::operation::update_partition::UpdatePartitionInput).
    pub fn builder() -> crate::operation::update_partition::builders::UpdatePartitionInputBuilder {
        crate::operation::update_partition::builders::UpdatePartitionInputBuilder::default()
    }
}

/// A builder for [`UpdatePartitionInput`](crate::operation::update_partition::UpdatePartitionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdatePartitionInputBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) table_name: std::option::Option<std::string::String>,
    pub(crate) partition_value_list: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) partition_input: std::option::Option<crate::types::PartitionInput>,
}
impl UpdatePartitionInputBuilder {
    /// <p>The ID of the Data Catalog where the partition to be updated resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog where the partition to be updated resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The name of the catalog database in which the table in question resides.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>The name of the catalog database in which the table in question resides.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the table in which the partition to be updated is located.</p>
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_name = Some(input.into());
        self
    }
    /// <p>The name of the table in which the partition to be updated is located.</p>
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// Appends an item to `partition_value_list`.
    ///
    /// To override the contents of this collection use [`set_partition_value_list`](Self::set_partition_value_list).
    ///
    /// <p>List of partition key values that define the partition to update.</p>
    pub fn partition_value_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.partition_value_list.unwrap_or_default();
        v.push(input.into());
        self.partition_value_list = Some(v);
        self
    }
    /// <p>List of partition key values that define the partition to update.</p>
    pub fn set_partition_value_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.partition_value_list = input;
        self
    }
    /// <p>The new partition object to update the partition to.</p>
    /// <p>The <code>Values</code> property can't be changed. If you want to change the partition key values for a partition, delete and recreate the partition.</p>
    pub fn partition_input(mut self, input: crate::types::PartitionInput) -> Self {
        self.partition_input = Some(input);
        self
    }
    /// <p>The new partition object to update the partition to.</p>
    /// <p>The <code>Values</code> property can't be changed. If you want to change the partition key values for a partition, delete and recreate the partition.</p>
    pub fn set_partition_input(
        mut self,
        input: std::option::Option<crate::types::PartitionInput>,
    ) -> Self {
        self.partition_input = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdatePartitionInput`](crate::operation::update_partition::UpdatePartitionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_partition::UpdatePartitionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_partition::UpdatePartitionInput {
            catalog_id: self.catalog_id,
            database_name: self.database_name,
            table_name: self.table_name,
            partition_value_list: self.partition_value_list,
            partition_input: self.partition_input,
        })
    }
}
