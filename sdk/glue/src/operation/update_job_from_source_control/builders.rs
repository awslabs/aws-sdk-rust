// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_job_from_source_control::_update_job_from_source_control_output::UpdateJobFromSourceControlOutputBuilder;

pub use crate::operation::update_job_from_source_control::_update_job_from_source_control_input::UpdateJobFromSourceControlInputBuilder;

impl UpdateJobFromSourceControlInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_job_from_source_control::UpdateJobFromSourceControlOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_job_from_source_control::UpdateJobFromSourceControlError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_job_from_source_control();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateJobFromSourceControl`.
///
/// <p>Synchronizes a job from the source control repository. This operation takes the job artifacts that are located in the remote repository and updates the Glue internal stores with these artifacts.</p>
/// <p>This API supports optional parameters which take in the repository information.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateJobFromSourceControlFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_job_from_source_control::builders::UpdateJobFromSourceControlInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_job_from_source_control::UpdateJobFromSourceControlOutput,
        crate::operation::update_job_from_source_control::UpdateJobFromSourceControlError,
    > for UpdateJobFromSourceControlFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_job_from_source_control::UpdateJobFromSourceControlOutput,
            crate::operation::update_job_from_source_control::UpdateJobFromSourceControlError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateJobFromSourceControlFluentBuilder {
    /// Creates a new `UpdateJobFromSourceControl`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateJobFromSourceControl as a reference.
    pub fn as_input(&self) -> &crate::operation::update_job_from_source_control::builders::UpdateJobFromSourceControlInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_job_from_source_control::UpdateJobFromSourceControlOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_job_from_source_control::UpdateJobFromSourceControlError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_job_from_source_control::UpdateJobFromSourceControl::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_job_from_source_control::UpdateJobFromSourceControl::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_job_from_source_control::UpdateJobFromSourceControlOutput,
        crate::operation::update_job_from_source_control::UpdateJobFromSourceControlError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the Glue job to be synchronized to or from the remote repository.</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p>The name of the Glue job to be synchronized to or from the remote repository.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
    /// <p>The name of the Glue job to be synchronized to or from the remote repository.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_name()
    }
    /// <p> The provider for the remote repository. Possible values: GITHUB, AWS_CODE_COMMIT, GITLAB, BITBUCKET. </p>
    pub fn provider(mut self, input: crate::types::SourceControlProvider) -> Self {
        self.inner = self.inner.provider(input);
        self
    }
    /// <p> The provider for the remote repository. Possible values: GITHUB, AWS_CODE_COMMIT, GITLAB, BITBUCKET. </p>
    pub fn set_provider(mut self, input: ::std::option::Option<crate::types::SourceControlProvider>) -> Self {
        self.inner = self.inner.set_provider(input);
        self
    }
    /// <p> The provider for the remote repository. Possible values: GITHUB, AWS_CODE_COMMIT, GITLAB, BITBUCKET. </p>
    pub fn get_provider(&self) -> &::std::option::Option<crate::types::SourceControlProvider> {
        self.inner.get_provider()
    }
    /// <p>The name of the remote repository that contains the job artifacts. For BitBucket providers, <code>RepositoryName</code> should include <code>WorkspaceName</code>. Use the format <code>
    /// <workspacename>
    /// /
    /// <repositoryname></repositoryname>
    /// </workspacename></code>. </p>
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.repository_name(input.into());
        self
    }
    /// <p>The name of the remote repository that contains the job artifacts. For BitBucket providers, <code>RepositoryName</code> should include <code>WorkspaceName</code>. Use the format <code>
    /// <workspacename>
    /// /
    /// <repositoryname></repositoryname>
    /// </workspacename></code>. </p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_repository_name(input);
        self
    }
    /// <p>The name of the remote repository that contains the job artifacts. For BitBucket providers, <code>RepositoryName</code> should include <code>WorkspaceName</code>. Use the format <code>
    /// <workspacename>
    /// /
    /// <repositoryname></repositoryname>
    /// </workspacename></code>. </p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_repository_name()
    }
    /// <p>The owner of the remote repository that contains the job artifacts.</p>
    pub fn repository_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.repository_owner(input.into());
        self
    }
    /// <p>The owner of the remote repository that contains the job artifacts.</p>
    pub fn set_repository_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_repository_owner(input);
        self
    }
    /// <p>The owner of the remote repository that contains the job artifacts.</p>
    pub fn get_repository_owner(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_repository_owner()
    }
    /// <p>An optional branch in the remote repository.</p>
    pub fn branch_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.branch_name(input.into());
        self
    }
    /// <p>An optional branch in the remote repository.</p>
    pub fn set_branch_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_branch_name(input);
        self
    }
    /// <p>An optional branch in the remote repository.</p>
    pub fn get_branch_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_branch_name()
    }
    /// <p>An optional folder in the remote repository.</p>
    pub fn folder(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.folder(input.into());
        self
    }
    /// <p>An optional folder in the remote repository.</p>
    pub fn set_folder(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_folder(input);
        self
    }
    /// <p>An optional folder in the remote repository.</p>
    pub fn get_folder(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_folder()
    }
    /// <p>A commit ID for a commit in the remote repository.</p>
    pub fn commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.commit_id(input.into());
        self
    }
    /// <p>A commit ID for a commit in the remote repository.</p>
    pub fn set_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_commit_id(input);
        self
    }
    /// <p>A commit ID for a commit in the remote repository.</p>
    pub fn get_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_commit_id()
    }
    /// <p>The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token.</p>
    pub fn auth_strategy(mut self, input: crate::types::SourceControlAuthStrategy) -> Self {
        self.inner = self.inner.auth_strategy(input);
        self
    }
    /// <p>The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token.</p>
    pub fn set_auth_strategy(mut self, input: ::std::option::Option<crate::types::SourceControlAuthStrategy>) -> Self {
        self.inner = self.inner.set_auth_strategy(input);
        self
    }
    /// <p>The type of authentication, which can be an authentication token stored in Amazon Web Services Secrets Manager, or a personal access token.</p>
    pub fn get_auth_strategy(&self) -> &::std::option::Option<crate::types::SourceControlAuthStrategy> {
        self.inner.get_auth_strategy()
    }
    /// <p>The value of the authorization token.</p>
    pub fn auth_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.auth_token(input.into());
        self
    }
    /// <p>The value of the authorization token.</p>
    pub fn set_auth_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_auth_token(input);
        self
    }
    /// <p>The value of the authorization token.</p>
    pub fn get_auth_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_auth_token()
    }
}
