// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMlTransformsInput {
    /// <p>A paginated token to offset the results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The filter transformation criteria.</p>
    #[doc(hidden)]
    pub filter: std::option::Option<crate::types::TransformFilterCriteria>,
    /// <p>The sorting criteria.</p>
    #[doc(hidden)]
    pub sort: std::option::Option<crate::types::TransformSortCriteria>,
}
impl GetMlTransformsInput {
    /// <p>A paginated token to offset the results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The filter transformation criteria.</p>
    pub fn filter(&self) -> std::option::Option<&crate::types::TransformFilterCriteria> {
        self.filter.as_ref()
    }
    /// <p>The sorting criteria.</p>
    pub fn sort(&self) -> std::option::Option<&crate::types::TransformSortCriteria> {
        self.sort.as_ref()
    }
}
impl GetMlTransformsInput {
    /// Creates a new builder-style object to manufacture [`GetMlTransformsInput`](crate::operation::get_ml_transforms::GetMlTransformsInput).
    pub fn builder() -> crate::operation::get_ml_transforms::builders::GetMlTransformsInputBuilder {
        crate::operation::get_ml_transforms::builders::GetMlTransformsInputBuilder::default()
    }
}

/// A builder for [`GetMlTransformsInput`](crate::operation::get_ml_transforms::GetMlTransformsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetMlTransformsInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) filter: std::option::Option<crate::types::TransformFilterCriteria>,
    pub(crate) sort: std::option::Option<crate::types::TransformSortCriteria>,
}
impl GetMlTransformsInputBuilder {
    /// <p>A paginated token to offset the results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A paginated token to offset the results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The filter transformation criteria.</p>
    pub fn filter(mut self, input: crate::types::TransformFilterCriteria) -> Self {
        self.filter = Some(input);
        self
    }
    /// <p>The filter transformation criteria.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::types::TransformFilterCriteria>,
    ) -> Self {
        self.filter = input;
        self
    }
    /// <p>The sorting criteria.</p>
    pub fn sort(mut self, input: crate::types::TransformSortCriteria) -> Self {
        self.sort = Some(input);
        self
    }
    /// <p>The sorting criteria.</p>
    pub fn set_sort(
        mut self,
        input: std::option::Option<crate::types::TransformSortCriteria>,
    ) -> Self {
        self.sort = input;
        self
    }
    /// Consumes the builder and constructs a [`GetMlTransformsInput`](crate::operation::get_ml_transforms::GetMlTransformsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_ml_transforms::GetMlTransformsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_ml_transforms::GetMlTransformsInput {
            next_token: self.next_token,
            max_results: self.max_results,
            filter: self.filter,
            sort: self.sort,
        })
    }
}
