// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_ml_transforms::_get_ml_transforms_output::GetMlTransformsOutputBuilder;

pub use crate::operation::get_ml_transforms::_get_ml_transforms_input::GetMlTransformsInputBuilder;

/// Fluent builder constructing a request to `GetMLTransforms`.
///
/// <p>Gets a sortable, filterable list of existing Glue machine learning transforms. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by Glue, and you can retrieve their metadata by calling <code>GetMLTransforms</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetMLTransformsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_ml_transforms::builders::GetMlTransformsInputBuilder,
}
impl GetMLTransformsFluentBuilder {
    /// Creates a new `GetMLTransforms`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_ml_transforms::GetMLTransforms,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_ml_transforms::GetMLTransformsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_ml_transforms::GetMlTransformsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_ml_transforms::GetMLTransformsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_ml_transforms::paginator::GetMlTransformsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::get_ml_transforms::paginator::GetMlTransformsPaginator {
        crate::operation::get_ml_transforms::paginator::GetMlTransformsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>A paginated token to offset the results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A paginated token to offset the results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The filter transformation criteria.</p>
    pub fn filter(mut self, input: crate::types::TransformFilterCriteria) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>The filter transformation criteria.</p>
    pub fn set_filter(
        mut self,
        input: std::option::Option<crate::types::TransformFilterCriteria>,
    ) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
    /// <p>The sorting criteria.</p>
    pub fn sort(mut self, input: crate::types::TransformSortCriteria) -> Self {
        self.inner = self.inner.sort(input);
        self
    }
    /// <p>The sorting criteria.</p>
    pub fn set_sort(
        mut self,
        input: std::option::Option<crate::types::TransformSortCriteria>,
    ) -> Self {
        self.inner = self.inner.set_sort(input);
        self
    }
}
