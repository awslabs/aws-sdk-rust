// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_ml_labeling_set_generation_task_run::_start_ml_labeling_set_generation_task_run_output::StartMlLabelingSetGenerationTaskRunOutputBuilder;

pub use crate::operation::start_ml_labeling_set_generation_task_run::_start_ml_labeling_set_generation_task_run_input::StartMlLabelingSetGenerationTaskRunInputBuilder;

/// Fluent builder constructing a request to `StartMLLabelingSetGenerationTaskRun`.
///
/// <p>Starts the active learning workflow for your machine learning transform to improve the transform's quality by generating label sets and adding labels.</p>
/// <p>When the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, Glue will have generated a "labeling set" or a set of questions for humans to answer.</p>
/// <p>In the case of the <code>FindMatches</code> transform, these questions are of the form, “What is the correct way to group these rows together into groups composed entirely of matching records?” </p>
/// <p>After the labeling process is finished, you can upload your labels with a call to <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes, all future runs of the machine learning transform will use the new and improved labels and perform a higher-quality transformation.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartMLLabelingSetGenerationTaskRunFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::start_ml_labeling_set_generation_task_run::builders::StartMlLabelingSetGenerationTaskRunInputBuilder
            }
impl StartMLLabelingSetGenerationTaskRunFluentBuilder {
    /// Creates a new `StartMLLabelingSetGenerationTaskRun`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::start_ml_labeling_set_generation_task_run::StartMLLabelingSetGenerationTaskRun, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::start_ml_labeling_set_generation_task_run::StartMLLabelingSetGenerationTaskRunError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::start_ml_labeling_set_generation_task_run::StartMlLabelingSetGenerationTaskRunOutput, aws_smithy_http::result::SdkError<crate::operation::start_ml_labeling_set_generation_task_run::StartMLLabelingSetGenerationTaskRunError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the machine learning transform.</p>
    pub fn transform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.transform_id(input.into());
        self
    }
    /// <p>The unique identifier of the machine learning transform.</p>
    pub fn set_transform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_transform_id(input);
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where you generate the labeling set.</p>
    pub fn output_s3_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.output_s3_path(input.into());
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path where you generate the labeling set.</p>
    pub fn set_output_s3_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_output_s3_path(input);
        self
    }
}
