// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDataQualityResultOutput {
    /// <p>A unique result ID for the data quality result.</p>
    pub result_id: ::std::option::Option<::std::string::String>,
    /// <p>An aggregate data quality score. Represents the ratio of rules that passed to the total number of rules.</p>
    pub score: ::std::option::Option<f64>,
    /// <p>The table associated with the data quality result, if any.</p>
    pub data_source: ::std::option::Option<crate::types::DataSource>,
    /// <p>The name of the ruleset associated with the data quality result.</p>
    pub ruleset_name: ::std::option::Option<::std::string::String>,
    /// <p>In the context of a job in Glue Studio, each node in the canvas is typically assigned some sort of name and data quality nodes will have names. In the case of multiple nodes, the <code>evaluationContext</code> can differentiate the nodes.</p>
    pub evaluation_context: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the run for this data quality result started.</p>
    pub started_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the run for this data quality result was completed.</p>
    pub completed_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The job name associated with the data quality result, if any.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>The job run ID associated with the data quality result, if any.</p>
    pub job_run_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique run ID associated with the ruleset evaluation.</p>
    pub ruleset_evaluation_run_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>DataQualityRuleResult</code> objects representing the results for each rule. </p>
    pub rule_results: ::std::option::Option<::std::vec::Vec<crate::types::DataQualityRuleResult>>,
    _request_id: Option<String>,
}
impl GetDataQualityResultOutput {
    /// <p>A unique result ID for the data quality result.</p>
    pub fn result_id(&self) -> ::std::option::Option<&str> {
        self.result_id.as_deref()
    }
    /// <p>An aggregate data quality score. Represents the ratio of rules that passed to the total number of rules.</p>
    pub fn score(&self) -> ::std::option::Option<f64> {
        self.score
    }
    /// <p>The table associated with the data quality result, if any.</p>
    pub fn data_source(&self) -> ::std::option::Option<&crate::types::DataSource> {
        self.data_source.as_ref()
    }
    /// <p>The name of the ruleset associated with the data quality result.</p>
    pub fn ruleset_name(&self) -> ::std::option::Option<&str> {
        self.ruleset_name.as_deref()
    }
    /// <p>In the context of a job in Glue Studio, each node in the canvas is typically assigned some sort of name and data quality nodes will have names. In the case of multiple nodes, the <code>evaluationContext</code> can differentiate the nodes.</p>
    pub fn evaluation_context(&self) -> ::std::option::Option<&str> {
        self.evaluation_context.as_deref()
    }
    /// <p>The date and time when the run for this data quality result started.</p>
    pub fn started_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_on.as_ref()
    }
    /// <p>The date and time when the run for this data quality result was completed.</p>
    pub fn completed_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completed_on.as_ref()
    }
    /// <p>The job name associated with the data quality result, if any.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The job run ID associated with the data quality result, if any.</p>
    pub fn job_run_id(&self) -> ::std::option::Option<&str> {
        self.job_run_id.as_deref()
    }
    /// <p>The unique run ID associated with the ruleset evaluation.</p>
    pub fn ruleset_evaluation_run_id(&self) -> ::std::option::Option<&str> {
        self.ruleset_evaluation_run_id.as_deref()
    }
    /// <p>A list of <code>DataQualityRuleResult</code> objects representing the results for each rule. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rule_results.is_none()`.
    pub fn rule_results(&self) -> &[crate::types::DataQualityRuleResult] {
        self.rule_results.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for GetDataQualityResultOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDataQualityResultOutput {
    /// Creates a new builder-style object to manufacture [`GetDataQualityResultOutput`](crate::operation::get_data_quality_result::GetDataQualityResultOutput).
    pub fn builder() -> crate::operation::get_data_quality_result::builders::GetDataQualityResultOutputBuilder {
        crate::operation::get_data_quality_result::builders::GetDataQualityResultOutputBuilder::default()
    }
}

/// A builder for [`GetDataQualityResultOutput`](crate::operation::get_data_quality_result::GetDataQualityResultOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDataQualityResultOutputBuilder {
    pub(crate) result_id: ::std::option::Option<::std::string::String>,
    pub(crate) score: ::std::option::Option<f64>,
    pub(crate) data_source: ::std::option::Option<crate::types::DataSource>,
    pub(crate) ruleset_name: ::std::option::Option<::std::string::String>,
    pub(crate) evaluation_context: ::std::option::Option<::std::string::String>,
    pub(crate) started_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completed_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) job_run_id: ::std::option::Option<::std::string::String>,
    pub(crate) ruleset_evaluation_run_id: ::std::option::Option<::std::string::String>,
    pub(crate) rule_results: ::std::option::Option<::std::vec::Vec<crate::types::DataQualityRuleResult>>,
    _request_id: Option<String>,
}
impl GetDataQualityResultOutputBuilder {
    /// <p>A unique result ID for the data quality result.</p>
    pub fn result_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.result_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique result ID for the data quality result.</p>
    pub fn set_result_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.result_id = input;
        self
    }
    /// <p>A unique result ID for the data quality result.</p>
    pub fn get_result_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.result_id
    }
    /// <p>An aggregate data quality score. Represents the ratio of rules that passed to the total number of rules.</p>
    pub fn score(mut self, input: f64) -> Self {
        self.score = ::std::option::Option::Some(input);
        self
    }
    /// <p>An aggregate data quality score. Represents the ratio of rules that passed to the total number of rules.</p>
    pub fn set_score(mut self, input: ::std::option::Option<f64>) -> Self {
        self.score = input;
        self
    }
    /// <p>An aggregate data quality score. Represents the ratio of rules that passed to the total number of rules.</p>
    pub fn get_score(&self) -> &::std::option::Option<f64> {
        &self.score
    }
    /// <p>The table associated with the data quality result, if any.</p>
    pub fn data_source(mut self, input: crate::types::DataSource) -> Self {
        self.data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The table associated with the data quality result, if any.</p>
    pub fn set_data_source(mut self, input: ::std::option::Option<crate::types::DataSource>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>The table associated with the data quality result, if any.</p>
    pub fn get_data_source(&self) -> &::std::option::Option<crate::types::DataSource> {
        &self.data_source
    }
    /// <p>The name of the ruleset associated with the data quality result.</p>
    pub fn ruleset_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ruleset_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the ruleset associated with the data quality result.</p>
    pub fn set_ruleset_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ruleset_name = input;
        self
    }
    /// <p>The name of the ruleset associated with the data quality result.</p>
    pub fn get_ruleset_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.ruleset_name
    }
    /// <p>In the context of a job in Glue Studio, each node in the canvas is typically assigned some sort of name and data quality nodes will have names. In the case of multiple nodes, the <code>evaluationContext</code> can differentiate the nodes.</p>
    pub fn evaluation_context(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.evaluation_context = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>In the context of a job in Glue Studio, each node in the canvas is typically assigned some sort of name and data quality nodes will have names. In the case of multiple nodes, the <code>evaluationContext</code> can differentiate the nodes.</p>
    pub fn set_evaluation_context(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.evaluation_context = input;
        self
    }
    /// <p>In the context of a job in Glue Studio, each node in the canvas is typically assigned some sort of name and data quality nodes will have names. In the case of multiple nodes, the <code>evaluationContext</code> can differentiate the nodes.</p>
    pub fn get_evaluation_context(&self) -> &::std::option::Option<::std::string::String> {
        &self.evaluation_context
    }
    /// <p>The date and time when the run for this data quality result started.</p>
    pub fn started_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the run for this data quality result started.</p>
    pub fn set_started_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_on = input;
        self
    }
    /// <p>The date and time when the run for this data quality result started.</p>
    pub fn get_started_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_on
    }
    /// <p>The date and time when the run for this data quality result was completed.</p>
    pub fn completed_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completed_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the run for this data quality result was completed.</p>
    pub fn set_completed_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completed_on = input;
        self
    }
    /// <p>The date and time when the run for this data quality result was completed.</p>
    pub fn get_completed_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completed_on
    }
    /// <p>The job name associated with the data quality result, if any.</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job name associated with the data quality result, if any.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The job name associated with the data quality result, if any.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The job run ID associated with the data quality result, if any.</p>
    pub fn job_run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job run ID associated with the data quality result, if any.</p>
    pub fn set_job_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_run_id = input;
        self
    }
    /// <p>The job run ID associated with the data quality result, if any.</p>
    pub fn get_job_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_run_id
    }
    /// <p>The unique run ID associated with the ruleset evaluation.</p>
    pub fn ruleset_evaluation_run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ruleset_evaluation_run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique run ID associated with the ruleset evaluation.</p>
    pub fn set_ruleset_evaluation_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ruleset_evaluation_run_id = input;
        self
    }
    /// <p>The unique run ID associated with the ruleset evaluation.</p>
    pub fn get_ruleset_evaluation_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ruleset_evaluation_run_id
    }
    /// Appends an item to `rule_results`.
    ///
    /// To override the contents of this collection use [`set_rule_results`](Self::set_rule_results).
    ///
    /// <p>A list of <code>DataQualityRuleResult</code> objects representing the results for each rule. </p>
    pub fn rule_results(mut self, input: crate::types::DataQualityRuleResult) -> Self {
        let mut v = self.rule_results.unwrap_or_default();
        v.push(input);
        self.rule_results = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>DataQualityRuleResult</code> objects representing the results for each rule. </p>
    pub fn set_rule_results(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataQualityRuleResult>>) -> Self {
        self.rule_results = input;
        self
    }
    /// <p>A list of <code>DataQualityRuleResult</code> objects representing the results for each rule. </p>
    pub fn get_rule_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataQualityRuleResult>> {
        &self.rule_results
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDataQualityResultOutput`](crate::operation::get_data_quality_result::GetDataQualityResultOutput).
    pub fn build(self) -> crate::operation::get_data_quality_result::GetDataQualityResultOutput {
        crate::operation::get_data_quality_result::GetDataQualityResultOutput {
            result_id: self.result_id,
            score: self.score,
            data_source: self.data_source,
            ruleset_name: self.ruleset_name,
            evaluation_context: self.evaluation_context,
            started_on: self.started_on,
            completed_on: self.completed_on,
            job_name: self.job_name,
            job_run_id: self.job_run_id,
            ruleset_evaluation_run_id: self.ruleset_evaluation_run_id,
            rule_results: self.rule_results,
            _request_id: self._request_id,
        }
    }
}
