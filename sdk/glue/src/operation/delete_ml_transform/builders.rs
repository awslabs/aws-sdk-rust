// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_ml_transform::_delete_ml_transform_output::DeleteMlTransformOutputBuilder;

pub use crate::operation::delete_ml_transform::_delete_ml_transform_input::DeleteMlTransformInputBuilder;

/// Fluent builder constructing a request to `DeleteMLTransform`.
///
/// <p>Deletes an Glue machine learning transform. Machine learning transforms are a special type of transform that use machine learning to learn the details of the transformation to be performed by learning from examples provided by humans. These transformations are then saved by Glue. If you no longer need a transform, you can delete it by calling <code>DeleteMLTransforms</code>. However, any Glue jobs that still reference the deleted transform will no longer succeed.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMLTransformFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_ml_transform::builders::DeleteMlTransformInputBuilder,
}
impl DeleteMLTransformFluentBuilder {
    /// Creates a new `DeleteMLTransform`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_ml_transform::DeleteMLTransform,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_ml_transform::DeleteMLTransformError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_ml_transform::DeleteMlTransformOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_ml_transform::DeleteMLTransformError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the transform to delete.</p>
    pub fn transform_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.transform_id(input.into());
        self
    }
    /// <p>The unique identifier of the transform to delete.</p>
    pub fn set_transform_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_transform_id(input);
        self
    }
}
