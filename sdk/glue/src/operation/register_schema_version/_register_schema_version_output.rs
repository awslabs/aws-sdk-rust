// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterSchemaVersionOutput {
    /// <p>The unique ID that represents the version of this schema.</p>
    #[doc(hidden)]
    pub schema_version_id: std::option::Option<std::string::String>,
    /// <p>The version of this schema (for sync flow only, in case this is the first version).</p>
    #[doc(hidden)]
    pub version_number: i64,
    /// <p>The status of the schema version.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::SchemaVersionStatus>,
    _request_id: Option<String>,
}
impl RegisterSchemaVersionOutput {
    /// <p>The unique ID that represents the version of this schema.</p>
    pub fn schema_version_id(&self) -> std::option::Option<&str> {
        self.schema_version_id.as_deref()
    }
    /// <p>The version of this schema (for sync flow only, in case this is the first version).</p>
    pub fn version_number(&self) -> i64 {
        self.version_number
    }
    /// <p>The status of the schema version.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::SchemaVersionStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for RegisterSchemaVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RegisterSchemaVersionOutput {
    /// Creates a new builder-style object to manufacture [`RegisterSchemaVersionOutput`](crate::operation::register_schema_version::RegisterSchemaVersionOutput).
    pub fn builder(
    ) -> crate::operation::register_schema_version::builders::RegisterSchemaVersionOutputBuilder
    {
        crate::operation::register_schema_version::builders::RegisterSchemaVersionOutputBuilder::default()
    }
}

/// A builder for [`RegisterSchemaVersionOutput`](crate::operation::register_schema_version::RegisterSchemaVersionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisterSchemaVersionOutputBuilder {
    pub(crate) schema_version_id: std::option::Option<std::string::String>,
    pub(crate) version_number: std::option::Option<i64>,
    pub(crate) status: std::option::Option<crate::types::SchemaVersionStatus>,
    _request_id: Option<String>,
}
impl RegisterSchemaVersionOutputBuilder {
    /// <p>The unique ID that represents the version of this schema.</p>
    pub fn schema_version_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_version_id = Some(input.into());
        self
    }
    /// <p>The unique ID that represents the version of this schema.</p>
    pub fn set_schema_version_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schema_version_id = input;
        self
    }
    /// <p>The version of this schema (for sync flow only, in case this is the first version).</p>
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = Some(input);
        self
    }
    /// <p>The version of this schema (for sync flow only, in case this is the first version).</p>
    pub fn set_version_number(mut self, input: std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The status of the schema version.</p>
    pub fn status(mut self, input: crate::types::SchemaVersionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the schema version.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::SchemaVersionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RegisterSchemaVersionOutput`](crate::operation::register_schema_version::RegisterSchemaVersionOutput).
    pub fn build(self) -> crate::operation::register_schema_version::RegisterSchemaVersionOutput {
        crate::operation::register_schema_version::RegisterSchemaVersionOutput {
            schema_version_id: self.schema_version_id,
            version_number: self.version_number.unwrap_or_default(),
            status: self.status,
            _request_id: self._request_id,
        }
    }
}
