// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDatabaseInput {
    /// <p>The ID of the Data Catalog in which the metadata database resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>The name of the database to update in the catalog. For Hive compatibility, this is folded to lowercase.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A <code>DatabaseInput</code> object specifying the new definition of the metadata database in the catalog.</p>
    #[doc(hidden)]
    pub database_input: std::option::Option<crate::types::DatabaseInput>,
}
impl UpdateDatabaseInput {
    /// <p>The ID of the Data Catalog in which the metadata database resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of the database to update in the catalog. For Hive compatibility, this is folded to lowercase.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A <code>DatabaseInput</code> object specifying the new definition of the metadata database in the catalog.</p>
    pub fn database_input(&self) -> std::option::Option<&crate::types::DatabaseInput> {
        self.database_input.as_ref()
    }
}
impl UpdateDatabaseInput {
    /// Creates a new builder-style object to manufacture [`UpdateDatabaseInput`](crate::operation::update_database::UpdateDatabaseInput).
    pub fn builder() -> crate::operation::update_database::builders::UpdateDatabaseInputBuilder {
        crate::operation::update_database::builders::UpdateDatabaseInputBuilder::default()
    }
}

/// A builder for [`UpdateDatabaseInput`](crate::operation::update_database::UpdateDatabaseInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateDatabaseInputBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) database_input: std::option::Option<crate::types::DatabaseInput>,
}
impl UpdateDatabaseInputBuilder {
    /// <p>The ID of the Data Catalog in which the metadata database resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog in which the metadata database resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The name of the database to update in the catalog. For Hive compatibility, this is folded to lowercase.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the database to update in the catalog. For Hive compatibility, this is folded to lowercase.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A <code>DatabaseInput</code> object specifying the new definition of the metadata database in the catalog.</p>
    pub fn database_input(mut self, input: crate::types::DatabaseInput) -> Self {
        self.database_input = Some(input);
        self
    }
    /// <p>A <code>DatabaseInput</code> object specifying the new definition of the metadata database in the catalog.</p>
    pub fn set_database_input(
        mut self,
        input: std::option::Option<crate::types::DatabaseInput>,
    ) -> Self {
        self.database_input = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDatabaseInput`](crate::operation::update_database::UpdateDatabaseInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_database::UpdateDatabaseInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_database::UpdateDatabaseInput {
            catalog_id: self.catalog_id,
            name: self.name,
            database_input: self.database_input,
        })
    }
}
