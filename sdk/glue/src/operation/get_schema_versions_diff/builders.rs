// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_schema_versions_diff::_get_schema_versions_diff_output::GetSchemaVersionsDiffOutputBuilder;

pub use crate::operation::get_schema_versions_diff::_get_schema_versions_diff_input::GetSchemaVersionsDiffInputBuilder;

/// Fluent builder constructing a request to `GetSchemaVersionsDiff`.
///
/// <p>Fetches the schema version difference in the specified difference type between two stored schema versions in the Schema Registry.</p>
/// <p>This API allows you to compare two schema versions between two schema definitions under the same schema.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSchemaVersionsDiffFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_schema_versions_diff::builders::GetSchemaVersionsDiffInputBuilder,
}
impl GetSchemaVersionsDiffFluentBuilder {
    /// Creates a new `GetSchemaVersionsDiff`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_schema_versions_diff::GetSchemaVersionsDiff,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_schema_versions_diff::GetSchemaVersionsDiffError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_schema_versions_diff::GetSchemaVersionsDiffOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_schema_versions_diff::GetSchemaVersionsDiffError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
    /// <ul>
    /// <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li>
    /// <li> <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li>
    /// </ul>
    pub fn schema_id(mut self, input: crate::types::SchemaId) -> Self {
        self.inner = self.inner.schema_id(input);
        self
    }
    /// <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
    /// <ul>
    /// <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li>
    /// <li> <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li>
    /// </ul>
    pub fn set_schema_id(mut self, input: std::option::Option<crate::types::SchemaId>) -> Self {
        self.inner = self.inner.set_schema_id(input);
        self
    }
    /// <p>The first of the two schema versions to be compared.</p>
    pub fn first_schema_version_number(mut self, input: crate::types::SchemaVersionNumber) -> Self {
        self.inner = self.inner.first_schema_version_number(input);
        self
    }
    /// <p>The first of the two schema versions to be compared.</p>
    pub fn set_first_schema_version_number(
        mut self,
        input: std::option::Option<crate::types::SchemaVersionNumber>,
    ) -> Self {
        self.inner = self.inner.set_first_schema_version_number(input);
        self
    }
    /// <p>The second of the two schema versions to be compared.</p>
    pub fn second_schema_version_number(
        mut self,
        input: crate::types::SchemaVersionNumber,
    ) -> Self {
        self.inner = self.inner.second_schema_version_number(input);
        self
    }
    /// <p>The second of the two schema versions to be compared.</p>
    pub fn set_second_schema_version_number(
        mut self,
        input: std::option::Option<crate::types::SchemaVersionNumber>,
    ) -> Self {
        self.inner = self.inner.set_second_schema_version_number(input);
        self
    }
    /// <p>Refers to <code>SYNTAX_DIFF</code>, which is the currently supported diff type.</p>
    pub fn schema_diff_type(mut self, input: crate::types::SchemaDiffType) -> Self {
        self.inner = self.inner.schema_diff_type(input);
        self
    }
    /// <p>Refers to <code>SYNTAX_DIFF</code>, which is the currently supported diff type.</p>
    pub fn set_schema_diff_type(
        mut self,
        input: std::option::Option<crate::types::SchemaDiffType>,
    ) -> Self {
        self.inner = self.inner.set_schema_diff_type(input);
        self
    }
}
