// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDeleteTableInput {
    /// <p>The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>The name of the catalog database in which the tables to delete reside. For Hive compatibility, this name is entirely lowercase.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>A list of the table to delete.</p>
    #[doc(hidden)]
    pub tables_to_delete: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The transaction ID at which to delete the table contents.</p>
    #[doc(hidden)]
    pub transaction_id: std::option::Option<std::string::String>,
}
impl BatchDeleteTableInput {
    /// <p>The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of the catalog database in which the tables to delete reside. For Hive compatibility, this name is entirely lowercase.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>A list of the table to delete.</p>
    pub fn tables_to_delete(&self) -> std::option::Option<&[std::string::String]> {
        self.tables_to_delete.as_deref()
    }
    /// <p>The transaction ID at which to delete the table contents.</p>
    pub fn transaction_id(&self) -> std::option::Option<&str> {
        self.transaction_id.as_deref()
    }
}
impl BatchDeleteTableInput {
    /// Creates a new builder-style object to manufacture [`BatchDeleteTableInput`](crate::operation::batch_delete_table::BatchDeleteTableInput).
    pub fn builder() -> crate::operation::batch_delete_table::builders::BatchDeleteTableInputBuilder
    {
        crate::operation::batch_delete_table::builders::BatchDeleteTableInputBuilder::default()
    }
}

/// A builder for [`BatchDeleteTableInput`](crate::operation::batch_delete_table::BatchDeleteTableInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchDeleteTableInputBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) tables_to_delete: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) transaction_id: std::option::Option<std::string::String>,
}
impl BatchDeleteTableInputBuilder {
    /// <p>The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The name of the catalog database in which the tables to delete reside. For Hive compatibility, this name is entirely lowercase.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>The name of the catalog database in which the tables to delete reside. For Hive compatibility, this name is entirely lowercase.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// Appends an item to `tables_to_delete`.
    ///
    /// To override the contents of this collection use [`set_tables_to_delete`](Self::set_tables_to_delete).
    ///
    /// <p>A list of the table to delete.</p>
    pub fn tables_to_delete(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.tables_to_delete.unwrap_or_default();
        v.push(input.into());
        self.tables_to_delete = Some(v);
        self
    }
    /// <p>A list of the table to delete.</p>
    pub fn set_tables_to_delete(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.tables_to_delete = input;
        self
    }
    /// <p>The transaction ID at which to delete the table contents.</p>
    pub fn transaction_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transaction_id = Some(input.into());
        self
    }
    /// <p>The transaction ID at which to delete the table contents.</p>
    pub fn set_transaction_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.transaction_id = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchDeleteTableInput`](crate::operation::batch_delete_table::BatchDeleteTableInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::batch_delete_table::BatchDeleteTableInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::batch_delete_table::BatchDeleteTableInput {
                catalog_id: self.catalog_id,
                database_name: self.database_name,
                tables_to_delete: self.tables_to_delete,
                transaction_id: self.transaction_id,
            },
        )
    }
}
