// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreatePartitionInput {
    /// <p>The Amazon Web Services account ID of the catalog in which the partition is to be created.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the metadata database in which the partition is to be created.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the metadata table in which the partition is to be created.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>A <code>PartitionInput</code> structure defining the partition to be created.</p>
    pub partition_input: ::std::option::Option<crate::types::PartitionInput>,
}
impl CreatePartitionInput {
    /// <p>The Amazon Web Services account ID of the catalog in which the partition is to be created.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of the metadata database in which the partition is to be created.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the metadata table in which the partition is to be created.</p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>A <code>PartitionInput</code> structure defining the partition to be created.</p>
    pub fn partition_input(&self) -> ::std::option::Option<&crate::types::PartitionInput> {
        self.partition_input.as_ref()
    }
}
impl CreatePartitionInput {
    /// Creates a new builder-style object to manufacture [`CreatePartitionInput`](crate::operation::create_partition::CreatePartitionInput).
    pub fn builder() -> crate::operation::create_partition::builders::CreatePartitionInputBuilder {
        crate::operation::create_partition::builders::CreatePartitionInputBuilder::default()
    }
}

/// A builder for [`CreatePartitionInput`](crate::operation::create_partition::CreatePartitionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreatePartitionInputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) partition_input: ::std::option::Option<crate::types::PartitionInput>,
}
impl CreatePartitionInputBuilder {
    /// <p>The Amazon Web Services account ID of the catalog in which the partition is to be created.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the catalog in which the partition is to be created.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the catalog in which the partition is to be created.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The name of the metadata database in which the partition is to be created.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the metadata database in which the partition is to be created.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the metadata database in which the partition is to be created.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the metadata table in which the partition is to be created.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the metadata table in which the partition is to be created.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the metadata table in which the partition is to be created.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>A <code>PartitionInput</code> structure defining the partition to be created.</p>
    /// This field is required.
    pub fn partition_input(mut self, input: crate::types::PartitionInput) -> Self {
        self.partition_input = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>PartitionInput</code> structure defining the partition to be created.</p>
    pub fn set_partition_input(mut self, input: ::std::option::Option<crate::types::PartitionInput>) -> Self {
        self.partition_input = input;
        self
    }
    /// <p>A <code>PartitionInput</code> structure defining the partition to be created.</p>
    pub fn get_partition_input(&self) -> &::std::option::Option<crate::types::PartitionInput> {
        &self.partition_input
    }
    /// Consumes the builder and constructs a [`CreatePartitionInput`](crate::operation::create_partition::CreatePartitionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_partition::CreatePartitionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_partition::CreatePartitionInput {
            catalog_id: self.catalog_id,
            database_name: self.database_name,
            table_name: self.table_name,
            partition_input: self.partition_input,
        })
    }
}
