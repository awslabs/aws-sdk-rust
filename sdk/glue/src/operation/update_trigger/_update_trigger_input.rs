// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTriggerInput {
    /// <p>The name of the trigger to update.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The new values with which to update the trigger.</p>
    pub trigger_update: ::std::option::Option<crate::types::TriggerUpdate>,
}
impl UpdateTriggerInput {
    /// <p>The name of the trigger to update.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The new values with which to update the trigger.</p>
    pub fn trigger_update(&self) -> ::std::option::Option<&crate::types::TriggerUpdate> {
        self.trigger_update.as_ref()
    }
}
impl UpdateTriggerInput {
    /// Creates a new builder-style object to manufacture [`UpdateTriggerInput`](crate::operation::update_trigger::UpdateTriggerInput).
    pub fn builder() -> crate::operation::update_trigger::builders::UpdateTriggerInputBuilder {
        crate::operation::update_trigger::builders::UpdateTriggerInputBuilder::default()
    }
}

/// A builder for [`UpdateTriggerInput`](crate::operation::update_trigger::UpdateTriggerInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateTriggerInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) trigger_update: ::std::option::Option<crate::types::TriggerUpdate>,
}
impl UpdateTriggerInputBuilder {
    /// <p>The name of the trigger to update.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the trigger to update.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the trigger to update.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The new values with which to update the trigger.</p>
    /// This field is required.
    pub fn trigger_update(mut self, input: crate::types::TriggerUpdate) -> Self {
        self.trigger_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new values with which to update the trigger.</p>
    pub fn set_trigger_update(mut self, input: ::std::option::Option<crate::types::TriggerUpdate>) -> Self {
        self.trigger_update = input;
        self
    }
    /// <p>The new values with which to update the trigger.</p>
    pub fn get_trigger_update(&self) -> &::std::option::Option<crate::types::TriggerUpdate> {
        &self.trigger_update
    }
    /// Consumes the builder and constructs a [`UpdateTriggerInput`](crate::operation::update_trigger::UpdateTriggerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_trigger::UpdateTriggerInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_trigger::UpdateTriggerInput {
            name: self.name,
            trigger_update: self.trigger_update,
        })
    }
}
