// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSchemaVersionsOutput {
    /// <p>A list of <code>SchemaVersionErrorItem</code> objects, each containing an error and schema version.</p>
    #[doc(hidden)]
    pub schema_version_errors:
        std::option::Option<std::vec::Vec<crate::types::SchemaVersionErrorItem>>,
    _request_id: Option<String>,
}
impl DeleteSchemaVersionsOutput {
    /// <p>A list of <code>SchemaVersionErrorItem</code> objects, each containing an error and schema version.</p>
    pub fn schema_version_errors(
        &self,
    ) -> std::option::Option<&[crate::types::SchemaVersionErrorItem]> {
        self.schema_version_errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteSchemaVersionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteSchemaVersionsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSchemaVersionsOutput`](crate::operation::delete_schema_versions::DeleteSchemaVersionsOutput).
    pub fn builder(
    ) -> crate::operation::delete_schema_versions::builders::DeleteSchemaVersionsOutputBuilder {
        crate::operation::delete_schema_versions::builders::DeleteSchemaVersionsOutputBuilder::default()
    }
}

/// A builder for [`DeleteSchemaVersionsOutput`](crate::operation::delete_schema_versions::DeleteSchemaVersionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteSchemaVersionsOutputBuilder {
    pub(crate) schema_version_errors:
        std::option::Option<std::vec::Vec<crate::types::SchemaVersionErrorItem>>,
    _request_id: Option<String>,
}
impl DeleteSchemaVersionsOutputBuilder {
    /// Appends an item to `schema_version_errors`.
    ///
    /// To override the contents of this collection use [`set_schema_version_errors`](Self::set_schema_version_errors).
    ///
    /// <p>A list of <code>SchemaVersionErrorItem</code> objects, each containing an error and schema version.</p>
    pub fn schema_version_errors(mut self, input: crate::types::SchemaVersionErrorItem) -> Self {
        let mut v = self.schema_version_errors.unwrap_or_default();
        v.push(input);
        self.schema_version_errors = Some(v);
        self
    }
    /// <p>A list of <code>SchemaVersionErrorItem</code> objects, each containing an error and schema version.</p>
    pub fn set_schema_version_errors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SchemaVersionErrorItem>>,
    ) -> Self {
        self.schema_version_errors = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteSchemaVersionsOutput`](crate::operation::delete_schema_versions::DeleteSchemaVersionsOutput).
    pub fn build(self) -> crate::operation::delete_schema_versions::DeleteSchemaVersionsOutput {
        crate::operation::delete_schema_versions::DeleteSchemaVersionsOutput {
            schema_version_errors: self.schema_version_errors,
            _request_id: self._request_id,
        }
    }
}
