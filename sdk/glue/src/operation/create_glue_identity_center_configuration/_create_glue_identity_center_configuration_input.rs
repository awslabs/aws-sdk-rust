// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request to create a new Glue Identity Center configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateGlueIdentityCenterConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) of the Identity Center instance to be associated with the Glue configuration.</p>
    pub instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of Identity Center scopes that define the permissions and access levels for the Glue configuration.</p>
    pub scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies whether users can run background sessions when using Identity Center authentication with Glue services.</p>
    pub user_background_sessions_enabled: ::std::option::Option<bool>,
}
impl CreateGlueIdentityCenterConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) of the Identity Center instance to be associated with the Glue configuration.</p>
    pub fn instance_arn(&self) -> ::std::option::Option<&str> {
        self.instance_arn.as_deref()
    }
    /// <p>A list of Identity Center scopes that define the permissions and access levels for the Glue configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scopes.is_none()`.
    pub fn scopes(&self) -> &[::std::string::String] {
        self.scopes.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether users can run background sessions when using Identity Center authentication with Glue services.</p>
    pub fn user_background_sessions_enabled(&self) -> ::std::option::Option<bool> {
        self.user_background_sessions_enabled
    }
}
impl CreateGlueIdentityCenterConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateGlueIdentityCenterConfigurationInput`](crate::operation::create_glue_identity_center_configuration::CreateGlueIdentityCenterConfigurationInput).
    pub fn builder() -> crate::operation::create_glue_identity_center_configuration::builders::CreateGlueIdentityCenterConfigurationInputBuilder {
        crate::operation::create_glue_identity_center_configuration::builders::CreateGlueIdentityCenterConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateGlueIdentityCenterConfigurationInput`](crate::operation::create_glue_identity_center_configuration::CreateGlueIdentityCenterConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateGlueIdentityCenterConfigurationInputBuilder {
    pub(crate) instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) user_background_sessions_enabled: ::std::option::Option<bool>,
}
impl CreateGlueIdentityCenterConfigurationInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Identity Center instance to be associated with the Glue configuration.</p>
    /// This field is required.
    pub fn instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity Center instance to be associated with the Glue configuration.</p>
    pub fn set_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity Center instance to be associated with the Glue configuration.</p>
    pub fn get_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_arn
    }
    /// Appends an item to `scopes`.
    ///
    /// To override the contents of this collection use [`set_scopes`](Self::set_scopes).
    ///
    /// <p>A list of Identity Center scopes that define the permissions and access levels for the Glue configuration.</p>
    pub fn scopes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.scopes.unwrap_or_default();
        v.push(input.into());
        self.scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Identity Center scopes that define the permissions and access levels for the Glue configuration.</p>
    pub fn set_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.scopes = input;
        self
    }
    /// <p>A list of Identity Center scopes that define the permissions and access levels for the Glue configuration.</p>
    pub fn get_scopes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.scopes
    }
    /// <p>Specifies whether users can run background sessions when using Identity Center authentication with Glue services.</p>
    pub fn user_background_sessions_enabled(mut self, input: bool) -> Self {
        self.user_background_sessions_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether users can run background sessions when using Identity Center authentication with Glue services.</p>
    pub fn set_user_background_sessions_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.user_background_sessions_enabled = input;
        self
    }
    /// <p>Specifies whether users can run background sessions when using Identity Center authentication with Glue services.</p>
    pub fn get_user_background_sessions_enabled(&self) -> &::std::option::Option<bool> {
        &self.user_background_sessions_enabled
    }
    /// Consumes the builder and constructs a [`CreateGlueIdentityCenterConfigurationInput`](crate::operation::create_glue_identity_center_configuration::CreateGlueIdentityCenterConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_glue_identity_center_configuration::CreateGlueIdentityCenterConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_glue_identity_center_configuration::CreateGlueIdentityCenterConfigurationInput {
                instance_arn: self.instance_arn,
                scopes: self.scopes,
                user_background_sessions_enabled: self.user_background_sessions_enabled,
            },
        )
    }
}
