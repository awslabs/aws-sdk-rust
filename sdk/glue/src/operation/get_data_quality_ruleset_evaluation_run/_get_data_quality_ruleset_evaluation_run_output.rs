// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDataQualityRulesetEvaluationRunOutput {
    /// <p>The unique run identifier associated with this run.</p>
    pub run_id: ::std::option::Option<::std::string::String>,
    /// <p>The data source (an Glue table) associated with this evaluation run.</p>
    pub data_source: ::std::option::Option<crate::types::DataSource>,
    /// <p>An IAM role supplied to encrypt the results of the run.</p>
    pub role: ::std::option::Option<::std::string::String>,
    /// <p>The number of <code>G.1X</code> workers to be used in the run. The default is 5.</p>
    pub number_of_workers: ::std::option::Option<i32>,
    /// <p>The timeout for a run in minutes. This is the maximum time that a run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>
    pub timeout: ::std::option::Option<i32>,
    /// <p>Additional run options you can specify for an evaluation run.</p>
    pub additional_run_options: ::std::option::Option<crate::types::DataQualityEvaluationRunAdditionalRunOptions>,
    /// <p>The status for this run.</p>
    pub status: ::std::option::Option<crate::types::TaskStatusType>,
    /// <p>The error strings that are associated with the run.</p>
    pub error_string: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when this run started.</p>
    pub started_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp. The last point in time when this data quality rule recommendation run was modified.</p>
    pub last_modified_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when this run was completed.</p>
    pub completed_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The amount of time (in seconds) that the run consumed resources.</p>
    pub execution_time: i32,
    /// <p>A list of ruleset names for the run.</p>
    pub ruleset_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of result IDs for the data quality results for the run.</p>
    pub result_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A map of reference strings to additional data sources you can specify for an evaluation run.</p>
    pub additional_data_sources: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::DataSource>>,
    _request_id: Option<String>,
}
impl GetDataQualityRulesetEvaluationRunOutput {
    /// <p>The unique run identifier associated with this run.</p>
    pub fn run_id(&self) -> ::std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p>The data source (an Glue table) associated with this evaluation run.</p>
    pub fn data_source(&self) -> ::std::option::Option<&crate::types::DataSource> {
        self.data_source.as_ref()
    }
    /// <p>An IAM role supplied to encrypt the results of the run.</p>
    pub fn role(&self) -> ::std::option::Option<&str> {
        self.role.as_deref()
    }
    /// <p>The number of <code>G.1X</code> workers to be used in the run. The default is 5.</p>
    pub fn number_of_workers(&self) -> ::std::option::Option<i32> {
        self.number_of_workers
    }
    /// <p>The timeout for a run in minutes. This is the maximum time that a run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>
    pub fn timeout(&self) -> ::std::option::Option<i32> {
        self.timeout
    }
    /// <p>Additional run options you can specify for an evaluation run.</p>
    pub fn additional_run_options(&self) -> ::std::option::Option<&crate::types::DataQualityEvaluationRunAdditionalRunOptions> {
        self.additional_run_options.as_ref()
    }
    /// <p>The status for this run.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TaskStatusType> {
        self.status.as_ref()
    }
    /// <p>The error strings that are associated with the run.</p>
    pub fn error_string(&self) -> ::std::option::Option<&str> {
        self.error_string.as_deref()
    }
    /// <p>The date and time when this run started.</p>
    pub fn started_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_on.as_ref()
    }
    /// <p>A timestamp. The last point in time when this data quality rule recommendation run was modified.</p>
    pub fn last_modified_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_on.as_ref()
    }
    /// <p>The date and time when this run was completed.</p>
    pub fn completed_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completed_on.as_ref()
    }
    /// <p>The amount of time (in seconds) that the run consumed resources.</p>
    pub fn execution_time(&self) -> i32 {
        self.execution_time
    }
    /// <p>A list of ruleset names for the run.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ruleset_names.is_none()`.
    pub fn ruleset_names(&self) -> &[::std::string::String] {
        self.ruleset_names.as_deref().unwrap_or_default()
    }
    /// <p>A list of result IDs for the data quality results for the run.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.result_ids.is_none()`.
    pub fn result_ids(&self) -> &[::std::string::String] {
        self.result_ids.as_deref().unwrap_or_default()
    }
    /// <p>A map of reference strings to additional data sources you can specify for an evaluation run.</p>
    pub fn additional_data_sources(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::DataSource>> {
        self.additional_data_sources.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetDataQualityRulesetEvaluationRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDataQualityRulesetEvaluationRunOutput {
    /// Creates a new builder-style object to manufacture [`GetDataQualityRulesetEvaluationRunOutput`](crate::operation::get_data_quality_ruleset_evaluation_run::GetDataQualityRulesetEvaluationRunOutput).
    pub fn builder() -> crate::operation::get_data_quality_ruleset_evaluation_run::builders::GetDataQualityRulesetEvaluationRunOutputBuilder {
        crate::operation::get_data_quality_ruleset_evaluation_run::builders::GetDataQualityRulesetEvaluationRunOutputBuilder::default()
    }
}

/// A builder for [`GetDataQualityRulesetEvaluationRunOutput`](crate::operation::get_data_quality_ruleset_evaluation_run::GetDataQualityRulesetEvaluationRunOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDataQualityRulesetEvaluationRunOutputBuilder {
    pub(crate) run_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_source: ::std::option::Option<crate::types::DataSource>,
    pub(crate) role: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_workers: ::std::option::Option<i32>,
    pub(crate) timeout: ::std::option::Option<i32>,
    pub(crate) additional_run_options: ::std::option::Option<crate::types::DataQualityEvaluationRunAdditionalRunOptions>,
    pub(crate) status: ::std::option::Option<crate::types::TaskStatusType>,
    pub(crate) error_string: ::std::option::Option<::std::string::String>,
    pub(crate) started_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completed_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) execution_time: ::std::option::Option<i32>,
    pub(crate) ruleset_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) result_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) additional_data_sources: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::DataSource>>,
    _request_id: Option<String>,
}
impl GetDataQualityRulesetEvaluationRunOutputBuilder {
    /// <p>The unique run identifier associated with this run.</p>
    pub fn run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique run identifier associated with this run.</p>
    pub fn set_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The unique run identifier associated with this run.</p>
    pub fn get_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_id
    }
    /// <p>The data source (an Glue table) associated with this evaluation run.</p>
    pub fn data_source(mut self, input: crate::types::DataSource) -> Self {
        self.data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data source (an Glue table) associated with this evaluation run.</p>
    pub fn set_data_source(mut self, input: ::std::option::Option<crate::types::DataSource>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>The data source (an Glue table) associated with this evaluation run.</p>
    pub fn get_data_source(&self) -> &::std::option::Option<crate::types::DataSource> {
        &self.data_source
    }
    /// <p>An IAM role supplied to encrypt the results of the run.</p>
    pub fn role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An IAM role supplied to encrypt the results of the run.</p>
    pub fn set_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role = input;
        self
    }
    /// <p>An IAM role supplied to encrypt the results of the run.</p>
    pub fn get_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.role
    }
    /// <p>The number of <code>G.1X</code> workers to be used in the run. The default is 5.</p>
    pub fn number_of_workers(mut self, input: i32) -> Self {
        self.number_of_workers = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of <code>G.1X</code> workers to be used in the run. The default is 5.</p>
    pub fn set_number_of_workers(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_workers = input;
        self
    }
    /// <p>The number of <code>G.1X</code> workers to be used in the run. The default is 5.</p>
    pub fn get_number_of_workers(&self) -> &::std::option::Option<i32> {
        &self.number_of_workers
    }
    /// <p>The timeout for a run in minutes. This is the maximum time that a run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>
    pub fn timeout(mut self, input: i32) -> Self {
        self.timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timeout for a run in minutes. This is the maximum time that a run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>
    pub fn set_timeout(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout = input;
        self
    }
    /// <p>The timeout for a run in minutes. This is the maximum time that a run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>
    pub fn get_timeout(&self) -> &::std::option::Option<i32> {
        &self.timeout
    }
    /// <p>Additional run options you can specify for an evaluation run.</p>
    pub fn additional_run_options(mut self, input: crate::types::DataQualityEvaluationRunAdditionalRunOptions) -> Self {
        self.additional_run_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional run options you can specify for an evaluation run.</p>
    pub fn set_additional_run_options(mut self, input: ::std::option::Option<crate::types::DataQualityEvaluationRunAdditionalRunOptions>) -> Self {
        self.additional_run_options = input;
        self
    }
    /// <p>Additional run options you can specify for an evaluation run.</p>
    pub fn get_additional_run_options(&self) -> &::std::option::Option<crate::types::DataQualityEvaluationRunAdditionalRunOptions> {
        &self.additional_run_options
    }
    /// <p>The status for this run.</p>
    pub fn status(mut self, input: crate::types::TaskStatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status for this run.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TaskStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status for this run.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TaskStatusType> {
        &self.status
    }
    /// <p>The error strings that are associated with the run.</p>
    pub fn error_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error strings that are associated with the run.</p>
    pub fn set_error_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_string = input;
        self
    }
    /// <p>The error strings that are associated with the run.</p>
    pub fn get_error_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_string
    }
    /// <p>The date and time when this run started.</p>
    pub fn started_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when this run started.</p>
    pub fn set_started_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_on = input;
        self
    }
    /// <p>The date and time when this run started.</p>
    pub fn get_started_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_on
    }
    /// <p>A timestamp. The last point in time when this data quality rule recommendation run was modified.</p>
    pub fn last_modified_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp. The last point in time when this data quality rule recommendation run was modified.</p>
    pub fn set_last_modified_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_on = input;
        self
    }
    /// <p>A timestamp. The last point in time when this data quality rule recommendation run was modified.</p>
    pub fn get_last_modified_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_on
    }
    /// <p>The date and time when this run was completed.</p>
    pub fn completed_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completed_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when this run was completed.</p>
    pub fn set_completed_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completed_on = input;
        self
    }
    /// <p>The date and time when this run was completed.</p>
    pub fn get_completed_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completed_on
    }
    /// <p>The amount of time (in seconds) that the run consumed resources.</p>
    pub fn execution_time(mut self, input: i32) -> Self {
        self.execution_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time (in seconds) that the run consumed resources.</p>
    pub fn set_execution_time(mut self, input: ::std::option::Option<i32>) -> Self {
        self.execution_time = input;
        self
    }
    /// <p>The amount of time (in seconds) that the run consumed resources.</p>
    pub fn get_execution_time(&self) -> &::std::option::Option<i32> {
        &self.execution_time
    }
    /// Appends an item to `ruleset_names`.
    ///
    /// To override the contents of this collection use [`set_ruleset_names`](Self::set_ruleset_names).
    ///
    /// <p>A list of ruleset names for the run.</p>
    pub fn ruleset_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ruleset_names.unwrap_or_default();
        v.push(input.into());
        self.ruleset_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of ruleset names for the run.</p>
    pub fn set_ruleset_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ruleset_names = input;
        self
    }
    /// <p>A list of ruleset names for the run.</p>
    pub fn get_ruleset_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ruleset_names
    }
    /// Appends an item to `result_ids`.
    ///
    /// To override the contents of this collection use [`set_result_ids`](Self::set_result_ids).
    ///
    /// <p>A list of result IDs for the data quality results for the run.</p>
    pub fn result_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.result_ids.unwrap_or_default();
        v.push(input.into());
        self.result_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of result IDs for the data quality results for the run.</p>
    pub fn set_result_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.result_ids = input;
        self
    }
    /// <p>A list of result IDs for the data quality results for the run.</p>
    pub fn get_result_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.result_ids
    }
    /// Adds a key-value pair to `additional_data_sources`.
    ///
    /// To override the contents of this collection use [`set_additional_data_sources`](Self::set_additional_data_sources).
    ///
    /// <p>A map of reference strings to additional data sources you can specify for an evaluation run.</p>
    pub fn additional_data_sources(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::DataSource) -> Self {
        let mut hash_map = self.additional_data_sources.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.additional_data_sources = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of reference strings to additional data sources you can specify for an evaluation run.</p>
    pub fn set_additional_data_sources(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::DataSource>>,
    ) -> Self {
        self.additional_data_sources = input;
        self
    }
    /// <p>A map of reference strings to additional data sources you can specify for an evaluation run.</p>
    pub fn get_additional_data_sources(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::DataSource>> {
        &self.additional_data_sources
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDataQualityRulesetEvaluationRunOutput`](crate::operation::get_data_quality_ruleset_evaluation_run::GetDataQualityRulesetEvaluationRunOutput).
    pub fn build(self) -> crate::operation::get_data_quality_ruleset_evaluation_run::GetDataQualityRulesetEvaluationRunOutput {
        crate::operation::get_data_quality_ruleset_evaluation_run::GetDataQualityRulesetEvaluationRunOutput {
            run_id: self.run_id,
            data_source: self.data_source,
            role: self.role,
            number_of_workers: self.number_of_workers,
            timeout: self.timeout,
            additional_run_options: self.additional_run_options,
            status: self.status,
            error_string: self.error_string,
            started_on: self.started_on,
            last_modified_on: self.last_modified_on,
            completed_on: self.completed_on,
            execution_time: self.execution_time.unwrap_or_default(),
            ruleset_names: self.ruleset_names,
            result_ids: self.result_ids,
            additional_data_sources: self.additional_data_sources,
            _request_id: self._request_id,
        }
    }
}
