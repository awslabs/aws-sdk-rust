// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartBlueprintRunInput {
    /// <p>The name of the blueprint.</p>
    pub blueprint_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the parameters as a <code>BlueprintParameters</code> object.</p>
    pub parameters: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the IAM role used to create the workflow.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
}
impl StartBlueprintRunInput {
    /// <p>The name of the blueprint.</p>
    pub fn blueprint_name(&self) -> ::std::option::Option<&str> {
        self.blueprint_name.as_deref()
    }
    /// <p>Specifies the parameters as a <code>BlueprintParameters</code> object.</p>
    pub fn parameters(&self) -> ::std::option::Option<&str> {
        self.parameters.as_deref()
    }
    /// <p>Specifies the IAM role used to create the workflow.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl StartBlueprintRunInput {
    /// Creates a new builder-style object to manufacture [`StartBlueprintRunInput`](crate::operation::start_blueprint_run::StartBlueprintRunInput).
    pub fn builder() -> crate::operation::start_blueprint_run::builders::StartBlueprintRunInputBuilder {
        crate::operation::start_blueprint_run::builders::StartBlueprintRunInputBuilder::default()
    }
}

/// A builder for [`StartBlueprintRunInput`](crate::operation::start_blueprint_run::StartBlueprintRunInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartBlueprintRunInputBuilder {
    pub(crate) blueprint_name: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl StartBlueprintRunInputBuilder {
    /// <p>The name of the blueprint.</p>
    /// This field is required.
    pub fn blueprint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blueprint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the blueprint.</p>
    pub fn set_blueprint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blueprint_name = input;
        self
    }
    /// <p>The name of the blueprint.</p>
    pub fn get_blueprint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.blueprint_name
    }
    /// <p>Specifies the parameters as a <code>BlueprintParameters</code> object.</p>
    pub fn parameters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameters = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the parameters as a <code>BlueprintParameters</code> object.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Specifies the parameters as a <code>BlueprintParameters</code> object.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameters
    }
    /// <p>Specifies the IAM role used to create the workflow.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the IAM role used to create the workflow.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>Specifies the IAM role used to create the workflow.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`StartBlueprintRunInput`](crate::operation::start_blueprint_run::StartBlueprintRunInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_blueprint_run::StartBlueprintRunInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_blueprint_run::StartBlueprintRunInput {
            blueprint_name: self.blueprint_name,
            parameters: self.parameters,
            role_arn: self.role_arn,
        })
    }
}
