// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMappingInput {
    /// <p>Specifies the source table.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::CatalogEntry>,
    /// <p>A list of target tables.</p>
    #[doc(hidden)]
    pub sinks: std::option::Option<std::vec::Vec<crate::types::CatalogEntry>>,
    /// <p>Parameters for the mapping.</p>
    #[doc(hidden)]
    pub location: std::option::Option<crate::types::Location>,
}
impl GetMappingInput {
    /// <p>Specifies the source table.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::CatalogEntry> {
        self.source.as_ref()
    }
    /// <p>A list of target tables.</p>
    pub fn sinks(&self) -> std::option::Option<&[crate::types::CatalogEntry]> {
        self.sinks.as_deref()
    }
    /// <p>Parameters for the mapping.</p>
    pub fn location(&self) -> std::option::Option<&crate::types::Location> {
        self.location.as_ref()
    }
}
impl GetMappingInput {
    /// Creates a new builder-style object to manufacture [`GetMappingInput`](crate::operation::get_mapping::GetMappingInput).
    pub fn builder() -> crate::operation::get_mapping::builders::GetMappingInputBuilder {
        crate::operation::get_mapping::builders::GetMappingInputBuilder::default()
    }
}

/// A builder for [`GetMappingInput`](crate::operation::get_mapping::GetMappingInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetMappingInputBuilder {
    pub(crate) source: std::option::Option<crate::types::CatalogEntry>,
    pub(crate) sinks: std::option::Option<std::vec::Vec<crate::types::CatalogEntry>>,
    pub(crate) location: std::option::Option<crate::types::Location>,
}
impl GetMappingInputBuilder {
    /// <p>Specifies the source table.</p>
    pub fn source(mut self, input: crate::types::CatalogEntry) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>Specifies the source table.</p>
    pub fn set_source(mut self, input: std::option::Option<crate::types::CatalogEntry>) -> Self {
        self.source = input;
        self
    }
    /// Appends an item to `sinks`.
    ///
    /// To override the contents of this collection use [`set_sinks`](Self::set_sinks).
    ///
    /// <p>A list of target tables.</p>
    pub fn sinks(mut self, input: crate::types::CatalogEntry) -> Self {
        let mut v = self.sinks.unwrap_or_default();
        v.push(input);
        self.sinks = Some(v);
        self
    }
    /// <p>A list of target tables.</p>
    pub fn set_sinks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CatalogEntry>>,
    ) -> Self {
        self.sinks = input;
        self
    }
    /// <p>Parameters for the mapping.</p>
    pub fn location(mut self, input: crate::types::Location) -> Self {
        self.location = Some(input);
        self
    }
    /// <p>Parameters for the mapping.</p>
    pub fn set_location(mut self, input: std::option::Option<crate::types::Location>) -> Self {
        self.location = input;
        self
    }
    /// Consumes the builder and constructs a [`GetMappingInput`](crate::operation::get_mapping::GetMappingInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_mapping::GetMappingInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_mapping::GetMappingInput {
            source: self.source,
            sinks: self.sinks,
            location: self.location,
        })
    }
}
