// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetPartitionInput {
    /// <p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the catalog database where the partitions reside.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the partitions' table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of partition values identifying the partitions to retrieve.</p>
    pub partitions_to_get: ::std::option::Option<::std::vec::Vec<crate::types::PartitionValueList>>,
}
impl BatchGetPartitionInput {
    /// <p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of the catalog database where the partitions reside.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the partitions' table.</p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>A list of partition values identifying the partitions to retrieve.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.partitions_to_get.is_none()`.
    pub fn partitions_to_get(&self) -> &[crate::types::PartitionValueList] {
        self.partitions_to_get.as_deref().unwrap_or_default()
    }
}
impl BatchGetPartitionInput {
    /// Creates a new builder-style object to manufacture [`BatchGetPartitionInput`](crate::operation::batch_get_partition::BatchGetPartitionInput).
    pub fn builder() -> crate::operation::batch_get_partition::builders::BatchGetPartitionInputBuilder {
        crate::operation::batch_get_partition::builders::BatchGetPartitionInputBuilder::default()
    }
}

/// A builder for [`BatchGetPartitionInput`](crate::operation::batch_get_partition::BatchGetPartitionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetPartitionInputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) partitions_to_get: ::std::option::Option<::std::vec::Vec<crate::types::PartitionValueList>>,
}
impl BatchGetPartitionInputBuilder {
    /// <p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The name of the catalog database where the partitions reside.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the catalog database where the partitions reside.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the catalog database where the partitions reside.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the partitions' table.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the partitions' table.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the partitions' table.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// Appends an item to `partitions_to_get`.
    ///
    /// To override the contents of this collection use [`set_partitions_to_get`](Self::set_partitions_to_get).
    ///
    /// <p>A list of partition values identifying the partitions to retrieve.</p>
    pub fn partitions_to_get(mut self, input: crate::types::PartitionValueList) -> Self {
        let mut v = self.partitions_to_get.unwrap_or_default();
        v.push(input);
        self.partitions_to_get = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of partition values identifying the partitions to retrieve.</p>
    pub fn set_partitions_to_get(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PartitionValueList>>) -> Self {
        self.partitions_to_get = input;
        self
    }
    /// <p>A list of partition values identifying the partitions to retrieve.</p>
    pub fn get_partitions_to_get(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PartitionValueList>> {
        &self.partitions_to_get
    }
    /// Consumes the builder and constructs a [`BatchGetPartitionInput`](crate::operation::batch_get_partition::BatchGetPartitionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_get_partition::BatchGetPartitionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::batch_get_partition::BatchGetPartitionInput {
            catalog_id: self.catalog_id,
            database_name: self.database_name,
            table_name: self.table_name,
            partitions_to_get: self.partitions_to_get,
        })
    }
}
