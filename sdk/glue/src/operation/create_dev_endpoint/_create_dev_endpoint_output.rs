// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDevEndpointOutput {
    /// <p>The name assigned to the new <code>DevEndpoint</code>.</p>
    pub endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the new <code>DevEndpoint</code>.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The security groups assigned to the new <code>DevEndpoint</code>.</p>
    pub security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The subnet ID assigned to the new <code>DevEndpoint</code>.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the role assigned to the new <code>DevEndpoint</code>.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The address of the YARN endpoint used by this <code>DevEndpoint</code>.</p>
    pub yarn_endpoint_address: ::std::option::Option<::std::string::String>,
    /// <p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>
    pub zeppelin_remote_spark_interpreter_port: i32,
    /// <p>The number of Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>
    pub number_of_nodes: i32,
    /// <p>The type of predefined worker that is allocated to the development endpoint. May be a value of Standard, G.1X, or G.2X.</p>
    pub worker_type: ::std::option::Option<crate::types::WorkerType>,
    /// <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p>
    /// <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
    pub glue_version: ::std::option::Option<::std::string::String>,
    /// <p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p>
    pub number_of_workers: ::std::option::Option<i32>,
    /// <p>The Amazon Web Services Availability Zone where this <code>DevEndpoint</code> is located.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the virtual private cloud (VPC) used by this <code>DevEndpoint</code>.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The paths to one or more Python libraries in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>
    pub extra_python_libs_s3_path: ::std::option::Option<::std::string::String>,
    /// <p>Path to one or more Java <code>.jar</code> files in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>
    pub extra_jars_s3_path: ::std::option::Option<::std::string::String>,
    /// <p>The reason for a current failure in this <code>DevEndpoint</code>.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The name of the <code>SecurityConfiguration</code> structure being used with this <code>DevEndpoint</code>.</p>
    pub security_configuration: ::std::option::Option<::std::string::String>,
    /// <p>The point in time at which this <code>DevEndpoint</code> was created.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The map of arguments used to configure this <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li> <p> <code>"--enable-glue-datacatalog": ""</code> </p> </li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub arguments: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl CreateDevEndpointOutput {
    /// <p>The name assigned to the new <code>DevEndpoint</code>.</p>
    pub fn endpoint_name(&self) -> ::std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>The current status of the new <code>DevEndpoint</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The security groups assigned to the new <code>DevEndpoint</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_ids.is_none()`.
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        self.security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>The subnet ID assigned to the new <code>DevEndpoint</code>.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the role assigned to the new <code>DevEndpoint</code>.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The address of the YARN endpoint used by this <code>DevEndpoint</code>.</p>
    pub fn yarn_endpoint_address(&self) -> ::std::option::Option<&str> {
        self.yarn_endpoint_address.as_deref()
    }
    /// <p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>
    pub fn zeppelin_remote_spark_interpreter_port(&self) -> i32 {
        self.zeppelin_remote_spark_interpreter_port
    }
    /// <p>The number of Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>
    pub fn number_of_nodes(&self) -> i32 {
        self.number_of_nodes
    }
    /// <p>The type of predefined worker that is allocated to the development endpoint. May be a value of Standard, G.1X, or G.2X.</p>
    pub fn worker_type(&self) -> ::std::option::Option<&crate::types::WorkerType> {
        self.worker_type.as_ref()
    }
    /// <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p>
    /// <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
    pub fn glue_version(&self) -> ::std::option::Option<&str> {
        self.glue_version.as_deref()
    }
    /// <p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p>
    pub fn number_of_workers(&self) -> ::std::option::Option<i32> {
        self.number_of_workers
    }
    /// <p>The Amazon Web Services Availability Zone where this <code>DevEndpoint</code> is located.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The ID of the virtual private cloud (VPC) used by this <code>DevEndpoint</code>.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The paths to one or more Python libraries in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>
    pub fn extra_python_libs_s3_path(&self) -> ::std::option::Option<&str> {
        self.extra_python_libs_s3_path.as_deref()
    }
    /// <p>Path to one or more Java <code>.jar</code> files in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>
    pub fn extra_jars_s3_path(&self) -> ::std::option::Option<&str> {
        self.extra_jars_s3_path.as_deref()
    }
    /// <p>The reason for a current failure in this <code>DevEndpoint</code>.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The name of the <code>SecurityConfiguration</code> structure being used with this <code>DevEndpoint</code>.</p>
    pub fn security_configuration(&self) -> ::std::option::Option<&str> {
        self.security_configuration.as_deref()
    }
    /// <p>The point in time at which this <code>DevEndpoint</code> was created.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The map of arguments used to configure this <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li> <p> <code>"--enable-glue-datacatalog": ""</code> </p> </li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub fn arguments(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.arguments.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for CreateDevEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateDevEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateDevEndpointOutput`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput).
    pub fn builder() -> crate::operation::create_dev_endpoint::builders::CreateDevEndpointOutputBuilder {
        crate::operation::create_dev_endpoint::builders::CreateDevEndpointOutputBuilder::default()
    }
}

/// A builder for [`CreateDevEndpointOutput`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDevEndpointOutputBuilder {
    pub(crate) endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) yarn_endpoint_address: ::std::option::Option<::std::string::String>,
    pub(crate) zeppelin_remote_spark_interpreter_port: ::std::option::Option<i32>,
    pub(crate) number_of_nodes: ::std::option::Option<i32>,
    pub(crate) worker_type: ::std::option::Option<crate::types::WorkerType>,
    pub(crate) glue_version: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_workers: ::std::option::Option<i32>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) extra_python_libs_s3_path: ::std::option::Option<::std::string::String>,
    pub(crate) extra_jars_s3_path: ::std::option::Option<::std::string::String>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) security_configuration: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) arguments: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl CreateDevEndpointOutputBuilder {
    /// <p>The name assigned to the new <code>DevEndpoint</code>.</p>
    pub fn endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name assigned to the new <code>DevEndpoint</code>.</p>
    pub fn set_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>The name assigned to the new <code>DevEndpoint</code>.</p>
    pub fn get_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_name
    }
    /// <p>The current status of the new <code>DevEndpoint</code>.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current status of the new <code>DevEndpoint</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the new <code>DevEndpoint</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The security groups assigned to the new <code>DevEndpoint</code>.</p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The security groups assigned to the new <code>DevEndpoint</code>.</p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The security groups assigned to the new <code>DevEndpoint</code>.</p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// <p>The subnet ID assigned to the new <code>DevEndpoint</code>.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subnet ID assigned to the new <code>DevEndpoint</code>.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The subnet ID assigned to the new <code>DevEndpoint</code>.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>The Amazon Resource Name (ARN) of the role assigned to the new <code>DevEndpoint</code>.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role assigned to the new <code>DevEndpoint</code>.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role assigned to the new <code>DevEndpoint</code>.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The address of the YARN endpoint used by this <code>DevEndpoint</code>.</p>
    pub fn yarn_endpoint_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.yarn_endpoint_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The address of the YARN endpoint used by this <code>DevEndpoint</code>.</p>
    pub fn set_yarn_endpoint_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.yarn_endpoint_address = input;
        self
    }
    /// <p>The address of the YARN endpoint used by this <code>DevEndpoint</code>.</p>
    pub fn get_yarn_endpoint_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.yarn_endpoint_address
    }
    /// <p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>
    pub fn zeppelin_remote_spark_interpreter_port(mut self, input: i32) -> Self {
        self.zeppelin_remote_spark_interpreter_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>
    pub fn set_zeppelin_remote_spark_interpreter_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.zeppelin_remote_spark_interpreter_port = input;
        self
    }
    /// <p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>
    pub fn get_zeppelin_remote_spark_interpreter_port(&self) -> &::std::option::Option<i32> {
        &self.zeppelin_remote_spark_interpreter_port
    }
    /// <p>The number of Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>
    pub fn number_of_nodes(mut self, input: i32) -> Self {
        self.number_of_nodes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>
    pub fn set_number_of_nodes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_nodes = input;
        self
    }
    /// <p>The number of Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>
    pub fn get_number_of_nodes(&self) -> &::std::option::Option<i32> {
        &self.number_of_nodes
    }
    /// <p>The type of predefined worker that is allocated to the development endpoint. May be a value of Standard, G.1X, or G.2X.</p>
    pub fn worker_type(mut self, input: crate::types::WorkerType) -> Self {
        self.worker_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of predefined worker that is allocated to the development endpoint. May be a value of Standard, G.1X, or G.2X.</p>
    pub fn set_worker_type(mut self, input: ::std::option::Option<crate::types::WorkerType>) -> Self {
        self.worker_type = input;
        self
    }
    /// <p>The type of predefined worker that is allocated to the development endpoint. May be a value of Standard, G.1X, or G.2X.</p>
    pub fn get_worker_type(&self) -> &::std::option::Option<crate::types::WorkerType> {
        &self.worker_type
    }
    /// <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p>
    /// <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
    pub fn glue_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.glue_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p>
    /// <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
    pub fn set_glue_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.glue_version = input;
        self
    }
    /// <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p>
    /// <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
    pub fn get_glue_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.glue_version
    }
    /// <p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p>
    pub fn number_of_workers(mut self, input: i32) -> Self {
        self.number_of_workers = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p>
    pub fn set_number_of_workers(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_workers = input;
        self
    }
    /// <p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p>
    pub fn get_number_of_workers(&self) -> &::std::option::Option<i32> {
        &self.number_of_workers
    }
    /// <p>The Amazon Web Services Availability Zone where this <code>DevEndpoint</code> is located.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Availability Zone where this <code>DevEndpoint</code> is located.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Amazon Web Services Availability Zone where this <code>DevEndpoint</code> is located.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The ID of the virtual private cloud (VPC) used by this <code>DevEndpoint</code>.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the virtual private cloud (VPC) used by this <code>DevEndpoint</code>.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the virtual private cloud (VPC) used by this <code>DevEndpoint</code>.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The paths to one or more Python libraries in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>
    pub fn extra_python_libs_s3_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.extra_python_libs_s3_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The paths to one or more Python libraries in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>
    pub fn set_extra_python_libs_s3_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.extra_python_libs_s3_path = input;
        self
    }
    /// <p>The paths to one or more Python libraries in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>
    pub fn get_extra_python_libs_s3_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.extra_python_libs_s3_path
    }
    /// <p>Path to one or more Java <code>.jar</code> files in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>
    pub fn extra_jars_s3_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.extra_jars_s3_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Path to one or more Java <code>.jar</code> files in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>
    pub fn set_extra_jars_s3_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.extra_jars_s3_path = input;
        self
    }
    /// <p>Path to one or more Java <code>.jar</code> files in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>
    pub fn get_extra_jars_s3_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.extra_jars_s3_path
    }
    /// <p>The reason for a current failure in this <code>DevEndpoint</code>.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for a current failure in this <code>DevEndpoint</code>.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The reason for a current failure in this <code>DevEndpoint</code>.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The name of the <code>SecurityConfiguration</code> structure being used with this <code>DevEndpoint</code>.</p>
    pub fn security_configuration(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.security_configuration = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the <code>SecurityConfiguration</code> structure being used with this <code>DevEndpoint</code>.</p>
    pub fn set_security_configuration(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.security_configuration = input;
        self
    }
    /// <p>The name of the <code>SecurityConfiguration</code> structure being used with this <code>DevEndpoint</code>.</p>
    pub fn get_security_configuration(&self) -> &::std::option::Option<::std::string::String> {
        &self.security_configuration
    }
    /// <p>The point in time at which this <code>DevEndpoint</code> was created.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The point in time at which this <code>DevEndpoint</code> was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The point in time at which this <code>DevEndpoint</code> was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// Adds a key-value pair to `arguments`.
    ///
    /// To override the contents of this collection use [`set_arguments`](Self::set_arguments).
    ///
    /// <p>The map of arguments used to configure this <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li> <p> <code>"--enable-glue-datacatalog": ""</code> </p> </li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub fn arguments(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.arguments.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.arguments = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The map of arguments used to configure this <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li> <p> <code>"--enable-glue-datacatalog": ""</code> </p> </li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub fn set_arguments(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.arguments = input;
        self
    }
    /// <p>The map of arguments used to configure this <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li> <p> <code>"--enable-glue-datacatalog": ""</code> </p> </li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub fn get_arguments(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.arguments
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateDevEndpointOutput`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput).
    pub fn build(self) -> crate::operation::create_dev_endpoint::CreateDevEndpointOutput {
        crate::operation::create_dev_endpoint::CreateDevEndpointOutput {
            endpoint_name: self.endpoint_name,
            status: self.status,
            security_group_ids: self.security_group_ids,
            subnet_id: self.subnet_id,
            role_arn: self.role_arn,
            yarn_endpoint_address: self.yarn_endpoint_address,
            zeppelin_remote_spark_interpreter_port: self.zeppelin_remote_spark_interpreter_port.unwrap_or_default(),
            number_of_nodes: self.number_of_nodes.unwrap_or_default(),
            worker_type: self.worker_type,
            glue_version: self.glue_version,
            number_of_workers: self.number_of_workers,
            availability_zone: self.availability_zone,
            vpc_id: self.vpc_id,
            extra_python_libs_s3_path: self.extra_python_libs_s3_path,
            extra_jars_s3_path: self.extra_jars_s3_path,
            failure_reason: self.failure_reason,
            security_configuration: self.security_configuration,
            created_timestamp: self.created_timestamp,
            arguments: self.arguments,
            _request_id: self._request_id,
        }
    }
}
