// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResumeWorkflowRunOutput {
    /// <p>The new ID assigned to the resumed workflow run. Each resume of a workflow run will have a new run ID.</p>
    pub run_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of the node IDs for the nodes that were actually restarted.</p>
    pub node_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl ResumeWorkflowRunOutput {
    /// <p>The new ID assigned to the resumed workflow run. Each resume of a workflow run will have a new run ID.</p>
    pub fn run_id(&self) -> ::std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p>A list of the node IDs for the nodes that were actually restarted.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.node_ids.is_none()`.
    pub fn node_ids(&self) -> &[::std::string::String] {
        self.node_ids.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for ResumeWorkflowRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ResumeWorkflowRunOutput {
    /// Creates a new builder-style object to manufacture [`ResumeWorkflowRunOutput`](crate::operation::resume_workflow_run::ResumeWorkflowRunOutput).
    pub fn builder() -> crate::operation::resume_workflow_run::builders::ResumeWorkflowRunOutputBuilder {
        crate::operation::resume_workflow_run::builders::ResumeWorkflowRunOutputBuilder::default()
    }
}

/// A builder for [`ResumeWorkflowRunOutput`](crate::operation::resume_workflow_run::ResumeWorkflowRunOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResumeWorkflowRunOutputBuilder {
    pub(crate) run_id: ::std::option::Option<::std::string::String>,
    pub(crate) node_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl ResumeWorkflowRunOutputBuilder {
    /// <p>The new ID assigned to the resumed workflow run. Each resume of a workflow run will have a new run ID.</p>
    pub fn run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new ID assigned to the resumed workflow run. Each resume of a workflow run will have a new run ID.</p>
    pub fn set_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The new ID assigned to the resumed workflow run. Each resume of a workflow run will have a new run ID.</p>
    pub fn get_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_id
    }
    /// Appends an item to `node_ids`.
    ///
    /// To override the contents of this collection use [`set_node_ids`](Self::set_node_ids).
    ///
    /// <p>A list of the node IDs for the nodes that were actually restarted.</p>
    pub fn node_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.node_ids.unwrap_or_default();
        v.push(input.into());
        self.node_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the node IDs for the nodes that were actually restarted.</p>
    pub fn set_node_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.node_ids = input;
        self
    }
    /// <p>A list of the node IDs for the nodes that were actually restarted.</p>
    pub fn get_node_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.node_ids
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ResumeWorkflowRunOutput`](crate::operation::resume_workflow_run::ResumeWorkflowRunOutput).
    pub fn build(self) -> crate::operation::resume_workflow_run::ResumeWorkflowRunOutput {
        crate::operation::resume_workflow_run::ResumeWorkflowRunOutput {
            run_id: self.run_id,
            node_ids: self.node_ids,
            _request_id: self._request_id,
        }
    }
}
