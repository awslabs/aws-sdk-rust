// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResumeWorkflowRunInput {
    /// <p>The name of the workflow to resume.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ID of the workflow run to resume.</p>
    #[doc(hidden)]
    pub run_id: std::option::Option<std::string::String>,
    /// <p>A list of the node IDs for the nodes you want to restart. The nodes that are to be restarted must have a run attempt in the original run.</p>
    #[doc(hidden)]
    pub node_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ResumeWorkflowRunInput {
    /// <p>The name of the workflow to resume.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the workflow run to resume.</p>
    pub fn run_id(&self) -> std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p>A list of the node IDs for the nodes you want to restart. The nodes that are to be restarted must have a run attempt in the original run.</p>
    pub fn node_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.node_ids.as_deref()
    }
}
impl ResumeWorkflowRunInput {
    /// Creates a new builder-style object to manufacture [`ResumeWorkflowRunInput`](crate::operation::resume_workflow_run::ResumeWorkflowRunInput).
    pub fn builder(
    ) -> crate::operation::resume_workflow_run::builders::ResumeWorkflowRunInputBuilder {
        crate::operation::resume_workflow_run::builders::ResumeWorkflowRunInputBuilder::default()
    }
}

/// A builder for [`ResumeWorkflowRunInput`](crate::operation::resume_workflow_run::ResumeWorkflowRunInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResumeWorkflowRunInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) run_id: std::option::Option<std::string::String>,
    pub(crate) node_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ResumeWorkflowRunInputBuilder {
    /// <p>The name of the workflow to resume.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the workflow to resume.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ID of the workflow run to resume.</p>
    pub fn run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.run_id = Some(input.into());
        self
    }
    /// <p>The ID of the workflow run to resume.</p>
    pub fn set_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// Appends an item to `node_ids`.
    ///
    /// To override the contents of this collection use [`set_node_ids`](Self::set_node_ids).
    ///
    /// <p>A list of the node IDs for the nodes you want to restart. The nodes that are to be restarted must have a run attempt in the original run.</p>
    pub fn node_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.node_ids.unwrap_or_default();
        v.push(input.into());
        self.node_ids = Some(v);
        self
    }
    /// <p>A list of the node IDs for the nodes you want to restart. The nodes that are to be restarted must have a run attempt in the original run.</p>
    pub fn set_node_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.node_ids = input;
        self
    }
    /// Consumes the builder and constructs a [`ResumeWorkflowRunInput`](crate::operation::resume_workflow_run::ResumeWorkflowRunInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::resume_workflow_run::ResumeWorkflowRunInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::resume_workflow_run::ResumeWorkflowRunInput {
                name: self.name,
                run_id: self.run_id,
                node_ids: self.node_ids,
            },
        )
    }
}
