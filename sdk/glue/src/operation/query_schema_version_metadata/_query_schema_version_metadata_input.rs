// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QuerySchemaVersionMetadataInput {
    /// <p>A wrapper structure that may contain the schema name and Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub schema_id: std::option::Option<crate::types::SchemaId>,
    /// <p>The version number of the schema.</p>
    #[doc(hidden)]
    pub schema_version_number: std::option::Option<crate::types::SchemaVersionNumber>,
    /// <p>The unique version ID of the schema version.</p>
    #[doc(hidden)]
    pub schema_version_id: std::option::Option<std::string::String>,
    /// <p>Search key-value pairs for metadata, if they are not provided all the metadata information will be fetched.</p>
    #[doc(hidden)]
    pub metadata_list: std::option::Option<std::vec::Vec<crate::types::MetadataKeyValuePair>>,
    /// <p>Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.</p>
    #[doc(hidden)]
    pub max_results: i32,
    /// <p>A continuation token, if this is a continuation call.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl QuerySchemaVersionMetadataInput {
    /// <p>A wrapper structure that may contain the schema name and Amazon Resource Name (ARN).</p>
    pub fn schema_id(&self) -> std::option::Option<&crate::types::SchemaId> {
        self.schema_id.as_ref()
    }
    /// <p>The version number of the schema.</p>
    pub fn schema_version_number(&self) -> std::option::Option<&crate::types::SchemaVersionNumber> {
        self.schema_version_number.as_ref()
    }
    /// <p>The unique version ID of the schema version.</p>
    pub fn schema_version_id(&self) -> std::option::Option<&str> {
        self.schema_version_id.as_deref()
    }
    /// <p>Search key-value pairs for metadata, if they are not provided all the metadata information will be fetched.</p>
    pub fn metadata_list(&self) -> std::option::Option<&[crate::types::MetadataKeyValuePair]> {
        self.metadata_list.as_deref()
    }
    /// <p>Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
    /// <p>A continuation token, if this is a continuation call.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl QuerySchemaVersionMetadataInput {
    /// Creates a new builder-style object to manufacture [`QuerySchemaVersionMetadataInput`](crate::operation::query_schema_version_metadata::QuerySchemaVersionMetadataInput).
    pub fn builder() -> crate::operation::query_schema_version_metadata::builders::QuerySchemaVersionMetadataInputBuilder{
        crate::operation::query_schema_version_metadata::builders::QuerySchemaVersionMetadataInputBuilder::default()
    }
}

/// A builder for [`QuerySchemaVersionMetadataInput`](crate::operation::query_schema_version_metadata::QuerySchemaVersionMetadataInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QuerySchemaVersionMetadataInputBuilder {
    pub(crate) schema_id: std::option::Option<crate::types::SchemaId>,
    pub(crate) schema_version_number: std::option::Option<crate::types::SchemaVersionNumber>,
    pub(crate) schema_version_id: std::option::Option<std::string::String>,
    pub(crate) metadata_list:
        std::option::Option<std::vec::Vec<crate::types::MetadataKeyValuePair>>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl QuerySchemaVersionMetadataInputBuilder {
    /// <p>A wrapper structure that may contain the schema name and Amazon Resource Name (ARN).</p>
    pub fn schema_id(mut self, input: crate::types::SchemaId) -> Self {
        self.schema_id = Some(input);
        self
    }
    /// <p>A wrapper structure that may contain the schema name and Amazon Resource Name (ARN).</p>
    pub fn set_schema_id(mut self, input: std::option::Option<crate::types::SchemaId>) -> Self {
        self.schema_id = input;
        self
    }
    /// <p>The version number of the schema.</p>
    pub fn schema_version_number(mut self, input: crate::types::SchemaVersionNumber) -> Self {
        self.schema_version_number = Some(input);
        self
    }
    /// <p>The version number of the schema.</p>
    pub fn set_schema_version_number(
        mut self,
        input: std::option::Option<crate::types::SchemaVersionNumber>,
    ) -> Self {
        self.schema_version_number = input;
        self
    }
    /// <p>The unique version ID of the schema version.</p>
    pub fn schema_version_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_version_id = Some(input.into());
        self
    }
    /// <p>The unique version ID of the schema version.</p>
    pub fn set_schema_version_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schema_version_id = input;
        self
    }
    /// Appends an item to `metadata_list`.
    ///
    /// To override the contents of this collection use [`set_metadata_list`](Self::set_metadata_list).
    ///
    /// <p>Search key-value pairs for metadata, if they are not provided all the metadata information will be fetched.</p>
    pub fn metadata_list(mut self, input: crate::types::MetadataKeyValuePair) -> Self {
        let mut v = self.metadata_list.unwrap_or_default();
        v.push(input);
        self.metadata_list = Some(v);
        self
    }
    /// <p>Search key-value pairs for metadata, if they are not provided all the metadata information will be fetched.</p>
    pub fn set_metadata_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetadataKeyValuePair>>,
    ) -> Self {
        self.metadata_list = input;
        self
    }
    /// <p>Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>A continuation token, if this is a continuation call.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A continuation token, if this is a continuation call.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`QuerySchemaVersionMetadataInput`](crate::operation::query_schema_version_metadata::QuerySchemaVersionMetadataInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::query_schema_version_metadata::QuerySchemaVersionMetadataInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::query_schema_version_metadata::QuerySchemaVersionMetadataInput {
                schema_id: self.schema_id,
                schema_version_number: self.schema_version_number,
                schema_version_id: self.schema_version_id,
                metadata_list: self.metadata_list,
                max_results: self.max_results.unwrap_or_default(),
                next_token: self.next_token,
            },
        )
    }
}
