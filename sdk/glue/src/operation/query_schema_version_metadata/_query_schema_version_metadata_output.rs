// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QuerySchemaVersionMetadataOutput {
    /// <p>A map of a metadata key and associated values.</p>
    #[doc(hidden)]
    pub metadata_info_map: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::MetadataInfo>,
    >,
    /// <p>The unique version ID of the schema version.</p>
    #[doc(hidden)]
    pub schema_version_id: std::option::Option<std::string::String>,
    /// <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl QuerySchemaVersionMetadataOutput {
    /// <p>A map of a metadata key and associated values.</p>
    pub fn metadata_info_map(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::MetadataInfo>,
    > {
        self.metadata_info_map.as_ref()
    }
    /// <p>The unique version ID of the schema version.</p>
    pub fn schema_version_id(&self) -> std::option::Option<&str> {
        self.schema_version_id.as_deref()
    }
    /// <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for QuerySchemaVersionMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl QuerySchemaVersionMetadataOutput {
    /// Creates a new builder-style object to manufacture [`QuerySchemaVersionMetadataOutput`](crate::operation::query_schema_version_metadata::QuerySchemaVersionMetadataOutput).
    pub fn builder() -> crate::operation::query_schema_version_metadata::builders::QuerySchemaVersionMetadataOutputBuilder{
        crate::operation::query_schema_version_metadata::builders::QuerySchemaVersionMetadataOutputBuilder::default()
    }
}

/// A builder for [`QuerySchemaVersionMetadataOutput`](crate::operation::query_schema_version_metadata::QuerySchemaVersionMetadataOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QuerySchemaVersionMetadataOutputBuilder {
    pub(crate) metadata_info_map: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::MetadataInfo>,
    >,
    pub(crate) schema_version_id: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl QuerySchemaVersionMetadataOutputBuilder {
    /// Adds a key-value pair to `metadata_info_map`.
    ///
    /// To override the contents of this collection use [`set_metadata_info_map`](Self::set_metadata_info_map).
    ///
    /// <p>A map of a metadata key and associated values.</p>
    pub fn metadata_info_map(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::MetadataInfo,
    ) -> Self {
        let mut hash_map = self.metadata_info_map.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.metadata_info_map = Some(hash_map);
        self
    }
    /// <p>A map of a metadata key and associated values.</p>
    pub fn set_metadata_info_map(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::MetadataInfo>,
        >,
    ) -> Self {
        self.metadata_info_map = input;
        self
    }
    /// <p>The unique version ID of the schema version.</p>
    pub fn schema_version_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_version_id = Some(input.into());
        self
    }
    /// <p>The unique version ID of the schema version.</p>
    pub fn set_schema_version_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schema_version_id = input;
        self
    }
    /// <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`QuerySchemaVersionMetadataOutput`](crate::operation::query_schema_version_metadata::QuerySchemaVersionMetadataOutput).
    pub fn build(
        self,
    ) -> crate::operation::query_schema_version_metadata::QuerySchemaVersionMetadataOutput {
        crate::operation::query_schema_version_metadata::QuerySchemaVersionMetadataOutput {
            metadata_info_map: self.metadata_info_map,
            schema_version_id: self.schema_version_id,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
