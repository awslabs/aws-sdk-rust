// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateTableInput {
    /// <p>The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The <code>TableInput</code> object that defines the metadata table to create in the catalog.</p>
    pub table_input: ::std::option::Option<crate::types::TableInput>,
    /// <p>A list of partition indexes, <code>PartitionIndex</code> structures, to create in the table.</p>
    pub partition_indexes: ::std::option::Option<::std::vec::Vec<crate::types::PartitionIndex>>,
    /// <p>The ID of the transaction.</p>
    pub transaction_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies an <code>OpenTableFormatInput</code> structure when creating an open format table.</p>
    pub open_table_format_input: ::std::option::Option<crate::types::OpenTableFormatInput>,
}
impl CreateTableInput {
    /// <p>The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The <code>TableInput</code> object that defines the metadata table to create in the catalog.</p>
    pub fn table_input(&self) -> ::std::option::Option<&crate::types::TableInput> {
        self.table_input.as_ref()
    }
    /// <p>A list of partition indexes, <code>PartitionIndex</code> structures, to create in the table.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.partition_indexes.is_none()`.
    pub fn partition_indexes(&self) -> &[crate::types::PartitionIndex] {
        self.partition_indexes.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the transaction.</p>
    pub fn transaction_id(&self) -> ::std::option::Option<&str> {
        self.transaction_id.as_deref()
    }
    /// <p>Specifies an <code>OpenTableFormatInput</code> structure when creating an open format table.</p>
    pub fn open_table_format_input(&self) -> ::std::option::Option<&crate::types::OpenTableFormatInput> {
        self.open_table_format_input.as_ref()
    }
}
impl CreateTableInput {
    /// Creates a new builder-style object to manufacture [`CreateTableInput`](crate::operation::create_table::CreateTableInput).
    pub fn builder() -> crate::operation::create_table::builders::CreateTableInputBuilder {
        crate::operation::create_table::builders::CreateTableInputBuilder::default()
    }
}

/// A builder for [`CreateTableInput`](crate::operation::create_table::CreateTableInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateTableInputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_input: ::std::option::Option<crate::types::TableInput>,
    pub(crate) partition_indexes: ::std::option::Option<::std::vec::Vec<crate::types::PartitionIndex>>,
    pub(crate) transaction_id: ::std::option::Option<::std::string::String>,
    pub(crate) open_table_format_input: ::std::option::Option<crate::types::OpenTableFormatInput>,
}
impl CreateTableInputBuilder {
    /// <p>The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The <code>TableInput</code> object that defines the metadata table to create in the catalog.</p>
    /// This field is required.
    pub fn table_input(mut self, input: crate::types::TableInput) -> Self {
        self.table_input = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>TableInput</code> object that defines the metadata table to create in the catalog.</p>
    pub fn set_table_input(mut self, input: ::std::option::Option<crate::types::TableInput>) -> Self {
        self.table_input = input;
        self
    }
    /// <p>The <code>TableInput</code> object that defines the metadata table to create in the catalog.</p>
    pub fn get_table_input(&self) -> &::std::option::Option<crate::types::TableInput> {
        &self.table_input
    }
    /// Appends an item to `partition_indexes`.
    ///
    /// To override the contents of this collection use [`set_partition_indexes`](Self::set_partition_indexes).
    ///
    /// <p>A list of partition indexes, <code>PartitionIndex</code> structures, to create in the table.</p>
    pub fn partition_indexes(mut self, input: crate::types::PartitionIndex) -> Self {
        let mut v = self.partition_indexes.unwrap_or_default();
        v.push(input);
        self.partition_indexes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of partition indexes, <code>PartitionIndex</code> structures, to create in the table.</p>
    pub fn set_partition_indexes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PartitionIndex>>) -> Self {
        self.partition_indexes = input;
        self
    }
    /// <p>A list of partition indexes, <code>PartitionIndex</code> structures, to create in the table.</p>
    pub fn get_partition_indexes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PartitionIndex>> {
        &self.partition_indexes
    }
    /// <p>The ID of the transaction.</p>
    pub fn transaction_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transaction_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the transaction.</p>
    pub fn set_transaction_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transaction_id = input;
        self
    }
    /// <p>The ID of the transaction.</p>
    pub fn get_transaction_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transaction_id
    }
    /// <p>Specifies an <code>OpenTableFormatInput</code> structure when creating an open format table.</p>
    pub fn open_table_format_input(mut self, input: crate::types::OpenTableFormatInput) -> Self {
        self.open_table_format_input = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies an <code>OpenTableFormatInput</code> structure when creating an open format table.</p>
    pub fn set_open_table_format_input(mut self, input: ::std::option::Option<crate::types::OpenTableFormatInput>) -> Self {
        self.open_table_format_input = input;
        self
    }
    /// <p>Specifies an <code>OpenTableFormatInput</code> structure when creating an open format table.</p>
    pub fn get_open_table_format_input(&self) -> &::std::option::Option<crate::types::OpenTableFormatInput> {
        &self.open_table_format_input
    }
    /// Consumes the builder and constructs a [`CreateTableInput`](crate::operation::create_table::CreateTableInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_table::CreateTableInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_table::CreateTableInput {
            catalog_id: self.catalog_id,
            database_name: self.database_name,
            table_input: self.table_input,
            partition_indexes: self.partition_indexes,
            transaction_id: self.transaction_id,
            open_table_format_input: self.open_table_format_input,
        })
    }
}
