// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTableInput {
    /// <p>The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The <code>TableInput</code> object that defines the metadata table to create in the catalog.</p>
    #[doc(hidden)]
    pub table_input: std::option::Option<crate::types::TableInput>,
    /// <p>A list of partition indexes, <code>PartitionIndex</code> structures, to create in the table.</p>
    #[doc(hidden)]
    pub partition_indexes: std::option::Option<std::vec::Vec<crate::types::PartitionIndex>>,
    /// <p>The ID of the transaction.</p>
    #[doc(hidden)]
    pub transaction_id: std::option::Option<std::string::String>,
}
impl CreateTableInput {
    /// <p>The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The <code>TableInput</code> object that defines the metadata table to create in the catalog.</p>
    pub fn table_input(&self) -> std::option::Option<&crate::types::TableInput> {
        self.table_input.as_ref()
    }
    /// <p>A list of partition indexes, <code>PartitionIndex</code> structures, to create in the table.</p>
    pub fn partition_indexes(&self) -> std::option::Option<&[crate::types::PartitionIndex]> {
        self.partition_indexes.as_deref()
    }
    /// <p>The ID of the transaction.</p>
    pub fn transaction_id(&self) -> std::option::Option<&str> {
        self.transaction_id.as_deref()
    }
}
impl CreateTableInput {
    /// Creates a new builder-style object to manufacture [`CreateTableInput`](crate::operation::create_table::CreateTableInput).
    pub fn builder() -> crate::operation::create_table::builders::CreateTableInputBuilder {
        crate::operation::create_table::builders::CreateTableInputBuilder::default()
    }
}

/// A builder for [`CreateTableInput`](crate::operation::create_table::CreateTableInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateTableInputBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) table_input: std::option::Option<crate::types::TableInput>,
    pub(crate) partition_indexes: std::option::Option<std::vec::Vec<crate::types::PartitionIndex>>,
    pub(crate) transaction_id: std::option::Option<std::string::String>,
}
impl CreateTableInputBuilder {
    /// <p>The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The <code>TableInput</code> object that defines the metadata table to create in the catalog.</p>
    pub fn table_input(mut self, input: crate::types::TableInput) -> Self {
        self.table_input = Some(input);
        self
    }
    /// <p>The <code>TableInput</code> object that defines the metadata table to create in the catalog.</p>
    pub fn set_table_input(mut self, input: std::option::Option<crate::types::TableInput>) -> Self {
        self.table_input = input;
        self
    }
    /// Appends an item to `partition_indexes`.
    ///
    /// To override the contents of this collection use [`set_partition_indexes`](Self::set_partition_indexes).
    ///
    /// <p>A list of partition indexes, <code>PartitionIndex</code> structures, to create in the table.</p>
    pub fn partition_indexes(mut self, input: crate::types::PartitionIndex) -> Self {
        let mut v = self.partition_indexes.unwrap_or_default();
        v.push(input);
        self.partition_indexes = Some(v);
        self
    }
    /// <p>A list of partition indexes, <code>PartitionIndex</code> structures, to create in the table.</p>
    pub fn set_partition_indexes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PartitionIndex>>,
    ) -> Self {
        self.partition_indexes = input;
        self
    }
    /// <p>The ID of the transaction.</p>
    pub fn transaction_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transaction_id = Some(input.into());
        self
    }
    /// <p>The ID of the transaction.</p>
    pub fn set_transaction_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.transaction_id = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateTableInput`](crate::operation::create_table::CreateTableInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_table::CreateTableInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_table::CreateTableInput {
            catalog_id: self.catalog_id,
            database_name: self.database_name,
            table_input: self.table_input,
            partition_indexes: self.partition_indexes,
            transaction_id: self.transaction_id,
        })
    }
}
