// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRegistryOutput {
    /// <p>The name of the registry.</p>
    #[doc(hidden)]
    pub registry_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the registry.</p>
    #[doc(hidden)]
    pub registry_arn: std::option::Option<std::string::String>,
    /// <p>A description of the registry.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The status of the registry.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::RegistryStatus>,
    /// <p>The date and time the registry was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<std::string::String>,
    /// <p>The date and time the registry was updated.</p>
    #[doc(hidden)]
    pub updated_time: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetRegistryOutput {
    /// <p>The name of the registry.</p>
    pub fn registry_name(&self) -> std::option::Option<&str> {
        self.registry_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the registry.</p>
    pub fn registry_arn(&self) -> std::option::Option<&str> {
        self.registry_arn.as_deref()
    }
    /// <p>A description of the registry.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the registry.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::RegistryStatus> {
        self.status.as_ref()
    }
    /// <p>The date and time the registry was created.</p>
    pub fn created_time(&self) -> std::option::Option<&str> {
        self.created_time.as_deref()
    }
    /// <p>The date and time the registry was updated.</p>
    pub fn updated_time(&self) -> std::option::Option<&str> {
        self.updated_time.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetRegistryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRegistryOutput {
    /// Creates a new builder-style object to manufacture [`GetRegistryOutput`](crate::operation::get_registry::GetRegistryOutput).
    pub fn builder() -> crate::operation::get_registry::builders::GetRegistryOutputBuilder {
        crate::operation::get_registry::builders::GetRegistryOutputBuilder::default()
    }
}

/// A builder for [`GetRegistryOutput`](crate::operation::get_registry::GetRegistryOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRegistryOutputBuilder {
    pub(crate) registry_name: std::option::Option<std::string::String>,
    pub(crate) registry_arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::RegistryStatus>,
    pub(crate) created_time: std::option::Option<std::string::String>,
    pub(crate) updated_time: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetRegistryOutputBuilder {
    /// <p>The name of the registry.</p>
    pub fn registry_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_name = Some(input.into());
        self
    }
    /// <p>The name of the registry.</p>
    pub fn set_registry_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the registry.</p>
    pub fn registry_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the registry.</p>
    pub fn set_registry_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_arn = input;
        self
    }
    /// <p>A description of the registry.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the registry.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The status of the registry.</p>
    pub fn status(mut self, input: crate::types::RegistryStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the registry.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::RegistryStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The date and time the registry was created.</p>
    pub fn created_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_time = Some(input.into());
        self
    }
    /// <p>The date and time the registry was created.</p>
    pub fn set_created_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time the registry was updated.</p>
    pub fn updated_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.updated_time = Some(input.into());
        self
    }
    /// <p>The date and time the registry was updated.</p>
    pub fn set_updated_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.updated_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRegistryOutput`](crate::operation::get_registry::GetRegistryOutput).
    pub fn build(self) -> crate::operation::get_registry::GetRegistryOutput {
        crate::operation::get_registry::GetRegistryOutput {
            registry_name: self.registry_name,
            registry_arn: self.registry_arn,
            description: self.description,
            status: self.status,
            created_time: self.created_time,
            updated_time: self.updated_time,
            _request_id: self._request_id,
        }
    }
}
