// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDatabaseInput {
    /// <p>The ID of the Data Catalog in which to create the database. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The metadata for the database.</p>
    pub database_input: ::std::option::Option<crate::types::DatabaseInput>,
    /// <p>The tags you assign to the database.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateDatabaseInput {
    /// <p>The ID of the Data Catalog in which to create the database. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The metadata for the database.</p>
    pub fn database_input(&self) -> ::std::option::Option<&crate::types::DatabaseInput> {
        self.database_input.as_ref()
    }
    /// <p>The tags you assign to the database.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateDatabaseInput {
    /// Creates a new builder-style object to manufacture [`CreateDatabaseInput`](crate::operation::create_database::CreateDatabaseInput).
    pub fn builder() -> crate::operation::create_database::builders::CreateDatabaseInputBuilder {
        crate::operation::create_database::builders::CreateDatabaseInputBuilder::default()
    }
}

/// A builder for [`CreateDatabaseInput`](crate::operation::create_database::CreateDatabaseInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDatabaseInputBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_input: ::std::option::Option<crate::types::DatabaseInput>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateDatabaseInputBuilder {
    /// <p>The ID of the Data Catalog in which to create the database. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog in which to create the database. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The ID of the Data Catalog in which to create the database. If none is provided, the Amazon Web Services account ID is used by default.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>The metadata for the database.</p>
    /// This field is required.
    pub fn database_input(mut self, input: crate::types::DatabaseInput) -> Self {
        self.database_input = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata for the database.</p>
    pub fn set_database_input(mut self, input: ::std::option::Option<crate::types::DatabaseInput>) -> Self {
        self.database_input = input;
        self
    }
    /// <p>The metadata for the database.</p>
    pub fn get_database_input(&self) -> &::std::option::Option<crate::types::DatabaseInput> {
        &self.database_input
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags you assign to the database.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags you assign to the database.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags you assign to the database.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateDatabaseInput`](crate::operation::create_database::CreateDatabaseInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_database::CreateDatabaseInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_database::CreateDatabaseInput {
            catalog_id: self.catalog_id,
            database_input: self.database_input,
            tags: self.tags,
        })
    }
}
