// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateScriptInput {
    /// <p>A list of the nodes in the DAG.</p>
    #[doc(hidden)]
    pub dag_nodes: std::option::Option<std::vec::Vec<crate::types::CodeGenNode>>,
    /// <p>A list of the edges in the DAG.</p>
    #[doc(hidden)]
    pub dag_edges: std::option::Option<std::vec::Vec<crate::types::CodeGenEdge>>,
    /// <p>The programming language of the resulting code from the DAG.</p>
    #[doc(hidden)]
    pub language: std::option::Option<crate::types::Language>,
}
impl CreateScriptInput {
    /// <p>A list of the nodes in the DAG.</p>
    pub fn dag_nodes(&self) -> std::option::Option<&[crate::types::CodeGenNode]> {
        self.dag_nodes.as_deref()
    }
    /// <p>A list of the edges in the DAG.</p>
    pub fn dag_edges(&self) -> std::option::Option<&[crate::types::CodeGenEdge]> {
        self.dag_edges.as_deref()
    }
    /// <p>The programming language of the resulting code from the DAG.</p>
    pub fn language(&self) -> std::option::Option<&crate::types::Language> {
        self.language.as_ref()
    }
}
impl CreateScriptInput {
    /// Creates a new builder-style object to manufacture [`CreateScriptInput`](crate::operation::create_script::CreateScriptInput).
    pub fn builder() -> crate::operation::create_script::builders::CreateScriptInputBuilder {
        crate::operation::create_script::builders::CreateScriptInputBuilder::default()
    }
}

/// A builder for [`CreateScriptInput`](crate::operation::create_script::CreateScriptInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateScriptInputBuilder {
    pub(crate) dag_nodes: std::option::Option<std::vec::Vec<crate::types::CodeGenNode>>,
    pub(crate) dag_edges: std::option::Option<std::vec::Vec<crate::types::CodeGenEdge>>,
    pub(crate) language: std::option::Option<crate::types::Language>,
}
impl CreateScriptInputBuilder {
    /// Appends an item to `dag_nodes`.
    ///
    /// To override the contents of this collection use [`set_dag_nodes`](Self::set_dag_nodes).
    ///
    /// <p>A list of the nodes in the DAG.</p>
    pub fn dag_nodes(mut self, input: crate::types::CodeGenNode) -> Self {
        let mut v = self.dag_nodes.unwrap_or_default();
        v.push(input);
        self.dag_nodes = Some(v);
        self
    }
    /// <p>A list of the nodes in the DAG.</p>
    pub fn set_dag_nodes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CodeGenNode>>,
    ) -> Self {
        self.dag_nodes = input;
        self
    }
    /// Appends an item to `dag_edges`.
    ///
    /// To override the contents of this collection use [`set_dag_edges`](Self::set_dag_edges).
    ///
    /// <p>A list of the edges in the DAG.</p>
    pub fn dag_edges(mut self, input: crate::types::CodeGenEdge) -> Self {
        let mut v = self.dag_edges.unwrap_or_default();
        v.push(input);
        self.dag_edges = Some(v);
        self
    }
    /// <p>A list of the edges in the DAG.</p>
    pub fn set_dag_edges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CodeGenEdge>>,
    ) -> Self {
        self.dag_edges = input;
        self
    }
    /// <p>The programming language of the resulting code from the DAG.</p>
    pub fn language(mut self, input: crate::types::Language) -> Self {
        self.language = Some(input);
        self
    }
    /// <p>The programming language of the resulting code from the DAG.</p>
    pub fn set_language(mut self, input: std::option::Option<crate::types::Language>) -> Self {
        self.language = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateScriptInput`](crate::operation::create_script::CreateScriptInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_script::CreateScriptInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_script::CreateScriptInput {
            dag_nodes: self.dag_nodes,
            dag_edges: self.dag_edges,
            language: self.language,
        })
    }
}
