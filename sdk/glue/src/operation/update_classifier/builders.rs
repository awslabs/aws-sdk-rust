// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_classifier::_update_classifier_output::UpdateClassifierOutputBuilder;

pub use crate::operation::update_classifier::_update_classifier_input::UpdateClassifierInputBuilder;

/// Fluent builder constructing a request to `UpdateClassifier`.
///
/// <p>Modifies an existing classifier (a <code>GrokClassifier</code>, an <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending on which field is present).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateClassifierFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_classifier::builders::UpdateClassifierInputBuilder,
}
impl UpdateClassifierFluentBuilder {
    /// Creates a new `UpdateClassifier`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_classifier::UpdateClassifier,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_classifier::UpdateClassifierError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_classifier::UpdateClassifierOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_classifier::UpdateClassifierError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A <code>GrokClassifier</code> object with updated fields.</p>
    pub fn grok_classifier(mut self, input: crate::types::UpdateGrokClassifierRequest) -> Self {
        self.inner = self.inner.grok_classifier(input);
        self
    }
    /// <p>A <code>GrokClassifier</code> object with updated fields.</p>
    pub fn set_grok_classifier(
        mut self,
        input: std::option::Option<crate::types::UpdateGrokClassifierRequest>,
    ) -> Self {
        self.inner = self.inner.set_grok_classifier(input);
        self
    }
    /// <p>An <code>XMLClassifier</code> object with updated fields.</p>
    pub fn xml_classifier(mut self, input: crate::types::UpdateXmlClassifierRequest) -> Self {
        self.inner = self.inner.xml_classifier(input);
        self
    }
    /// <p>An <code>XMLClassifier</code> object with updated fields.</p>
    pub fn set_xml_classifier(
        mut self,
        input: std::option::Option<crate::types::UpdateXmlClassifierRequest>,
    ) -> Self {
        self.inner = self.inner.set_xml_classifier(input);
        self
    }
    /// <p>A <code>JsonClassifier</code> object with updated fields.</p>
    pub fn json_classifier(mut self, input: crate::types::UpdateJsonClassifierRequest) -> Self {
        self.inner = self.inner.json_classifier(input);
        self
    }
    /// <p>A <code>JsonClassifier</code> object with updated fields.</p>
    pub fn set_json_classifier(
        mut self,
        input: std::option::Option<crate::types::UpdateJsonClassifierRequest>,
    ) -> Self {
        self.inner = self.inner.set_json_classifier(input);
        self
    }
    /// <p>A <code>CsvClassifier</code> object with updated fields.</p>
    pub fn csv_classifier(mut self, input: crate::types::UpdateCsvClassifierRequest) -> Self {
        self.inner = self.inner.csv_classifier(input);
        self
    }
    /// <p>A <code>CsvClassifier</code> object with updated fields.</p>
    pub fn set_csv_classifier(
        mut self,
        input: std::option::Option<crate::types::UpdateCsvClassifierRequest>,
    ) -> Self {
        self.inner = self.inner.set_csv_classifier(input);
        self
    }
}
