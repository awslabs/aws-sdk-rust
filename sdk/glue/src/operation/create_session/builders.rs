// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_session::_create_session_output::CreateSessionOutputBuilder;

pub use crate::operation::create_session::_create_session_input::CreateSessionInputBuilder;

/// Fluent builder constructing a request to `CreateSession`.
///
/// <p>Creates a new session.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateSessionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_session::builders::CreateSessionInputBuilder,
}
impl CreateSessionFluentBuilder {
    /// Creates a new `CreateSession`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_session::CreateSession,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_session::CreateSessionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_session::CreateSessionOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_session::CreateSessionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the session request. </p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The ID of the session request. </p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The description of the session. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the session. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The IAM Role ARN </p>
    pub fn role(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role(input.into());
        self
    }
    /// <p>The IAM Role ARN </p>
    pub fn set_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role(input);
        self
    }
    /// <p>The <code>SessionCommand</code> that runs the job. </p>
    pub fn command(mut self, input: crate::types::SessionCommand) -> Self {
        self.inner = self.inner.command(input);
        self
    }
    /// <p>The <code>SessionCommand</code> that runs the job. </p>
    pub fn set_command(mut self, input: std::option::Option<crate::types::SessionCommand>) -> Self {
        self.inner = self.inner.set_command(input);
        self
    }
    /// <p>The number of seconds before request times out. </p>
    pub fn timeout(mut self, input: i32) -> Self {
        self.inner = self.inner.timeout(input);
        self
    }
    /// <p>The number of seconds before request times out. </p>
    pub fn set_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_timeout(input);
        self
    }
    /// <p>The number of seconds when idle before request times out. </p>
    pub fn idle_timeout(mut self, input: i32) -> Self {
        self.inner = self.inner.idle_timeout(input);
        self
    }
    /// <p>The number of seconds when idle before request times out. </p>
    pub fn set_idle_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_idle_timeout(input);
        self
    }
    /// Adds a key-value pair to `DefaultArguments`.
    ///
    /// To override the contents of this collection use [`set_default_arguments`](Self::set_default_arguments).
    ///
    /// <p>A map array of key-value pairs. Max is 75 pairs. </p>
    pub fn default_arguments(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.default_arguments(k.into(), v.into());
        self
    }
    /// <p>A map array of key-value pairs. Max is 75 pairs. </p>
    pub fn set_default_arguments(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_default_arguments(input);
        self
    }
    /// <p>The number of connections to use for the session. </p>
    pub fn connections(mut self, input: crate::types::ConnectionsList) -> Self {
        self.inner = self.inner.connections(input);
        self
    }
    /// <p>The number of connections to use for the session. </p>
    pub fn set_connections(
        mut self,
        input: std::option::Option<crate::types::ConnectionsList>,
    ) -> Self {
        self.inner = self.inner.set_connections(input);
        self
    }
    /// <p>The number of Glue data processing units (DPUs) that can be allocated when the job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB memory. </p>
    pub fn max_capacity(mut self, input: f64) -> Self {
        self.inner = self.inner.max_capacity(input);
        self
    }
    /// <p>The number of Glue data processing units (DPUs) that can be allocated when the job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB memory. </p>
    pub fn set_max_capacity(mut self, input: std::option::Option<f64>) -> Self {
        self.inner = self.inner.set_max_capacity(input);
        self
    }
    /// <p>The number of workers of a defined <code>WorkerType</code> to use for the session. </p>
    pub fn number_of_workers(mut self, input: i32) -> Self {
        self.inner = self.inner.number_of_workers(input);
        self
    }
    /// <p>The number of workers of a defined <code>WorkerType</code> to use for the session. </p>
    pub fn set_number_of_workers(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_number_of_workers(input);
        self
    }
    /// <p>The type of predefined worker that is allocated to use for the session. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p>
    /// <ul>
    /// <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li>
    /// <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li>
    /// <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li>
    /// <li> <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p> </li>
    /// </ul>
    pub fn worker_type(mut self, input: crate::types::WorkerType) -> Self {
        self.inner = self.inner.worker_type(input);
        self
    }
    /// <p>The type of predefined worker that is allocated to use for the session. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p>
    /// <ul>
    /// <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li>
    /// <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li>
    /// <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li>
    /// <li> <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p> </li>
    /// </ul>
    pub fn set_worker_type(mut self, input: std::option::Option<crate::types::WorkerType>) -> Self {
        self.inner = self.inner.set_worker_type(input);
        self
    }
    /// <p>The name of the SecurityConfiguration structure to be used with the session </p>
    pub fn security_configuration(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.security_configuration(input.into());
        self
    }
    /// <p>The name of the SecurityConfiguration structure to be used with the session </p>
    pub fn set_security_configuration(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_security_configuration(input);
        self
    }
    /// <p>The Glue version determines the versions of Apache Spark and Python that Glue supports. The GlueVersion must be greater than 2.0. </p>
    pub fn glue_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.glue_version(input.into());
        self
    }
    /// <p>The Glue version determines the versions of Apache Spark and Python that Glue supports. The GlueVersion must be greater than 2.0. </p>
    pub fn set_glue_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_glue_version(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The map of key value pairs (tags) belonging to the session.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The map of key value pairs (tags) belonging to the session.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The origin of the request. </p>
    pub fn request_origin(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.request_origin(input.into());
        self
    }
    /// <p>The origin of the request. </p>
    pub fn set_request_origin(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_request_origin(input);
        self
    }
}
