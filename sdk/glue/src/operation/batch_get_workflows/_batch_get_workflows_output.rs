// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetWorkflowsOutput {
    /// <p>A list of workflow resource metadata.</p>
    pub workflows: ::std::option::Option<::std::vec::Vec<crate::types::Workflow>>,
    /// <p>A list of names of workflows not found.</p>
    pub missing_workflows: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl BatchGetWorkflowsOutput {
    /// <p>A list of workflow resource metadata.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.workflows.is_none()`.
    pub fn workflows(&self) -> &[crate::types::Workflow] {
        self.workflows.as_deref().unwrap_or_default()
    }
    /// <p>A list of names of workflows not found.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.missing_workflows.is_none()`.
    pub fn missing_workflows(&self) -> &[::std::string::String] {
        self.missing_workflows.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for BatchGetWorkflowsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetWorkflowsOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetWorkflowsOutput`](crate::operation::batch_get_workflows::BatchGetWorkflowsOutput).
    pub fn builder() -> crate::operation::batch_get_workflows::builders::BatchGetWorkflowsOutputBuilder {
        crate::operation::batch_get_workflows::builders::BatchGetWorkflowsOutputBuilder::default()
    }
}

/// A builder for [`BatchGetWorkflowsOutput`](crate::operation::batch_get_workflows::BatchGetWorkflowsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetWorkflowsOutputBuilder {
    pub(crate) workflows: ::std::option::Option<::std::vec::Vec<crate::types::Workflow>>,
    pub(crate) missing_workflows: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl BatchGetWorkflowsOutputBuilder {
    /// Appends an item to `workflows`.
    ///
    /// To override the contents of this collection use [`set_workflows`](Self::set_workflows).
    ///
    /// <p>A list of workflow resource metadata.</p>
    pub fn workflows(mut self, input: crate::types::Workflow) -> Self {
        let mut v = self.workflows.unwrap_or_default();
        v.push(input);
        self.workflows = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of workflow resource metadata.</p>
    pub fn set_workflows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Workflow>>) -> Self {
        self.workflows = input;
        self
    }
    /// <p>A list of workflow resource metadata.</p>
    pub fn get_workflows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Workflow>> {
        &self.workflows
    }
    /// Appends an item to `missing_workflows`.
    ///
    /// To override the contents of this collection use [`set_missing_workflows`](Self::set_missing_workflows).
    ///
    /// <p>A list of names of workflows not found.</p>
    pub fn missing_workflows(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.missing_workflows.unwrap_or_default();
        v.push(input.into());
        self.missing_workflows = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of names of workflows not found.</p>
    pub fn set_missing_workflows(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.missing_workflows = input;
        self
    }
    /// <p>A list of names of workflows not found.</p>
    pub fn get_missing_workflows(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.missing_workflows
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetWorkflowsOutput`](crate::operation::batch_get_workflows::BatchGetWorkflowsOutput).
    pub fn build(self) -> crate::operation::batch_get_workflows::BatchGetWorkflowsOutput {
        crate::operation::batch_get_workflows::BatchGetWorkflowsOutput {
            workflows: self.workflows,
            missing_workflows: self.missing_workflows,
            _request_id: self._request_id,
        }
    }
}
