// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_dev_endpoint::_update_dev_endpoint_output::UpdateDevEndpointOutputBuilder;

pub use crate::operation::update_dev_endpoint::_update_dev_endpoint_input::UpdateDevEndpointInputBuilder;

impl crate::operation::update_dev_endpoint::builders::UpdateDevEndpointInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_dev_endpoint::UpdateDevEndpointOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_dev_endpoint::UpdateDevEndpointError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_dev_endpoint();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateDevEndpoint`.
///
/// <p>Updates a specified development endpoint.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateDevEndpointFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_dev_endpoint::builders::UpdateDevEndpointInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_dev_endpoint::UpdateDevEndpointOutput,
        crate::operation::update_dev_endpoint::UpdateDevEndpointError,
    > for UpdateDevEndpointFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_dev_endpoint::UpdateDevEndpointOutput,
            crate::operation::update_dev_endpoint::UpdateDevEndpointError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateDevEndpointFluentBuilder {
    /// Creates a new `UpdateDevEndpoint`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateDevEndpoint as a reference.
    pub fn as_input(&self) -> &crate::operation::update_dev_endpoint::builders::UpdateDevEndpointInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_dev_endpoint::UpdateDevEndpointOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_dev_endpoint::UpdateDevEndpointError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_dev_endpoint::UpdateDevEndpoint::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_dev_endpoint::UpdateDevEndpoint::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_dev_endpoint::UpdateDevEndpointOutput,
        crate::operation::update_dev_endpoint::UpdateDevEndpointError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the <code>DevEndpoint</code> to be updated.</p>
    pub fn endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.endpoint_name(input.into());
        self
    }
    /// <p>The name of the <code>DevEndpoint</code> to be updated.</p>
    pub fn set_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_name(input);
        self
    }
    /// <p>The name of the <code>DevEndpoint</code> to be updated.</p>
    pub fn get_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_endpoint_name()
    }
    /// <p>The public key for the <code>DevEndpoint</code> to use.</p>
    pub fn public_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.public_key(input.into());
        self
    }
    /// <p>The public key for the <code>DevEndpoint</code> to use.</p>
    pub fn set_public_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_public_key(input);
        self
    }
    /// <p>The public key for the <code>DevEndpoint</code> to use.</p>
    pub fn get_public_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_public_key()
    }
    ///
    /// Appends an item to `AddPublicKeys`.
    ///
    /// To override the contents of this collection use [`set_add_public_keys`](Self::set_add_public_keys).
    ///
    /// <p>The list of public keys for the <code>DevEndpoint</code> to use.</p>
    pub fn add_public_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.add_public_keys(input.into());
        self
    }
    /// <p>The list of public keys for the <code>DevEndpoint</code> to use.</p>
    pub fn set_add_public_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_add_public_keys(input);
        self
    }
    /// <p>The list of public keys for the <code>DevEndpoint</code> to use.</p>
    pub fn get_add_public_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_add_public_keys()
    }
    ///
    /// Appends an item to `DeletePublicKeys`.
    ///
    /// To override the contents of this collection use [`set_delete_public_keys`](Self::set_delete_public_keys).
    ///
    /// <p>The list of public keys to be deleted from the <code>DevEndpoint</code>.</p>
    pub fn delete_public_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.delete_public_keys(input.into());
        self
    }
    /// <p>The list of public keys to be deleted from the <code>DevEndpoint</code>.</p>
    pub fn set_delete_public_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_delete_public_keys(input);
        self
    }
    /// <p>The list of public keys to be deleted from the <code>DevEndpoint</code>.</p>
    pub fn get_delete_public_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_delete_public_keys()
    }
    /// <p>Custom Python or Java libraries to be loaded in the <code>DevEndpoint</code>.</p>
    pub fn custom_libraries(mut self, input: crate::types::DevEndpointCustomLibraries) -> Self {
        self.inner = self.inner.custom_libraries(input);
        self
    }
    /// <p>Custom Python or Java libraries to be loaded in the <code>DevEndpoint</code>.</p>
    pub fn set_custom_libraries(mut self, input: ::std::option::Option<crate::types::DevEndpointCustomLibraries>) -> Self {
        self.inner = self.inner.set_custom_libraries(input);
        self
    }
    /// <p>Custom Python or Java libraries to be loaded in the <code>DevEndpoint</code>.</p>
    pub fn get_custom_libraries(&self) -> &::std::option::Option<crate::types::DevEndpointCustomLibraries> {
        self.inner.get_custom_libraries()
    }
    /// <p><code>True</code> if the list of custom libraries to be loaded in the development endpoint needs to be updated, or <code>False</code> if otherwise.</p>
    pub fn update_etl_libraries(mut self, input: bool) -> Self {
        self.inner = self.inner.update_etl_libraries(input);
        self
    }
    /// <p><code>True</code> if the list of custom libraries to be loaded in the development endpoint needs to be updated, or <code>False</code> if otherwise.</p>
    pub fn set_update_etl_libraries(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_update_etl_libraries(input);
        self
    }
    /// <p><code>True</code> if the list of custom libraries to be loaded in the development endpoint needs to be updated, or <code>False</code> if otherwise.</p>
    pub fn get_update_etl_libraries(&self) -> &::std::option::Option<bool> {
        self.inner.get_update_etl_libraries()
    }
    ///
    /// Appends an item to `DeleteArguments`.
    ///
    /// To override the contents of this collection use [`set_delete_arguments`](Self::set_delete_arguments).
    ///
    /// <p>The list of argument keys to be deleted from the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    pub fn delete_arguments(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.delete_arguments(input.into());
        self
    }
    /// <p>The list of argument keys to be deleted from the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    pub fn set_delete_arguments(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_delete_arguments(input);
        self
    }
    /// <p>The list of argument keys to be deleted from the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    pub fn get_delete_arguments(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_delete_arguments()
    }
    ///
    /// Adds a key-value pair to `AddArguments`.
    ///
    /// To override the contents of this collection use [`set_add_arguments`](Self::set_add_arguments).
    ///
    /// <p>The map of arguments to add the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li>
    /// <p><code>"--enable-glue-datacatalog": ""</code></p></li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub fn add_arguments(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.add_arguments(k.into(), v.into());
        self
    }
    /// <p>The map of arguments to add the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li>
    /// <p><code>"--enable-glue-datacatalog": ""</code></p></li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub fn set_add_arguments(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_add_arguments(input);
        self
    }
    /// <p>The map of arguments to add the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li>
    /// <p><code>"--enable-glue-datacatalog": ""</code></p></li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub fn get_add_arguments(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_add_arguments()
    }
}
