// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDevEndpointInput {
    /// <p>The name of the <code>DevEndpoint</code> to be updated.</p>
    pub endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>The public key for the <code>DevEndpoint</code> to use.</p>
    pub public_key: ::std::option::Option<::std::string::String>,
    /// <p>The list of public keys for the <code>DevEndpoint</code> to use.</p>
    pub add_public_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of public keys to be deleted from the <code>DevEndpoint</code>.</p>
    pub delete_public_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Custom Python or Java libraries to be loaded in the <code>DevEndpoint</code>.</p>
    pub custom_libraries: ::std::option::Option<crate::types::DevEndpointCustomLibraries>,
    /// <p> <code>True</code> if the list of custom libraries to be loaded in the development endpoint needs to be updated, or <code>False</code> if otherwise.</p>
    pub update_etl_libraries: ::std::option::Option<bool>,
    /// <p>The list of argument keys to be deleted from the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    pub delete_arguments: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The map of arguments to add the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li> <p> <code>"--enable-glue-datacatalog": ""</code> </p> </li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub add_arguments: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl UpdateDevEndpointInput {
    /// <p>The name of the <code>DevEndpoint</code> to be updated.</p>
    pub fn endpoint_name(&self) -> ::std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>The public key for the <code>DevEndpoint</code> to use.</p>
    pub fn public_key(&self) -> ::std::option::Option<&str> {
        self.public_key.as_deref()
    }
    /// <p>The list of public keys for the <code>DevEndpoint</code> to use.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.add_public_keys.is_none()`.
    pub fn add_public_keys(&self) -> &[::std::string::String] {
        self.add_public_keys.as_deref().unwrap_or_default()
    }
    /// <p>The list of public keys to be deleted from the <code>DevEndpoint</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.delete_public_keys.is_none()`.
    pub fn delete_public_keys(&self) -> &[::std::string::String] {
        self.delete_public_keys.as_deref().unwrap_or_default()
    }
    /// <p>Custom Python or Java libraries to be loaded in the <code>DevEndpoint</code>.</p>
    pub fn custom_libraries(&self) -> ::std::option::Option<&crate::types::DevEndpointCustomLibraries> {
        self.custom_libraries.as_ref()
    }
    /// <p> <code>True</code> if the list of custom libraries to be loaded in the development endpoint needs to be updated, or <code>False</code> if otherwise.</p>
    pub fn update_etl_libraries(&self) -> ::std::option::Option<bool> {
        self.update_etl_libraries
    }
    /// <p>The list of argument keys to be deleted from the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.delete_arguments.is_none()`.
    pub fn delete_arguments(&self) -> &[::std::string::String] {
        self.delete_arguments.as_deref().unwrap_or_default()
    }
    /// <p>The map of arguments to add the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li> <p> <code>"--enable-glue-datacatalog": ""</code> </p> </li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub fn add_arguments(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.add_arguments.as_ref()
    }
}
impl UpdateDevEndpointInput {
    /// Creates a new builder-style object to manufacture [`UpdateDevEndpointInput`](crate::operation::update_dev_endpoint::UpdateDevEndpointInput).
    pub fn builder() -> crate::operation::update_dev_endpoint::builders::UpdateDevEndpointInputBuilder {
        crate::operation::update_dev_endpoint::builders::UpdateDevEndpointInputBuilder::default()
    }
}

/// A builder for [`UpdateDevEndpointInput`](crate::operation::update_dev_endpoint::UpdateDevEndpointInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDevEndpointInputBuilder {
    pub(crate) endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) public_key: ::std::option::Option<::std::string::String>,
    pub(crate) add_public_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) delete_public_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) custom_libraries: ::std::option::Option<crate::types::DevEndpointCustomLibraries>,
    pub(crate) update_etl_libraries: ::std::option::Option<bool>,
    pub(crate) delete_arguments: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) add_arguments: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl UpdateDevEndpointInputBuilder {
    /// <p>The name of the <code>DevEndpoint</code> to be updated.</p>
    /// This field is required.
    pub fn endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the <code>DevEndpoint</code> to be updated.</p>
    pub fn set_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>The name of the <code>DevEndpoint</code> to be updated.</p>
    pub fn get_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_name
    }
    /// <p>The public key for the <code>DevEndpoint</code> to use.</p>
    pub fn public_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public key for the <code>DevEndpoint</code> to use.</p>
    pub fn set_public_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_key = input;
        self
    }
    /// <p>The public key for the <code>DevEndpoint</code> to use.</p>
    pub fn get_public_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_key
    }
    /// Appends an item to `add_public_keys`.
    ///
    /// To override the contents of this collection use [`set_add_public_keys`](Self::set_add_public_keys).
    ///
    /// <p>The list of public keys for the <code>DevEndpoint</code> to use.</p>
    pub fn add_public_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.add_public_keys.unwrap_or_default();
        v.push(input.into());
        self.add_public_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of public keys for the <code>DevEndpoint</code> to use.</p>
    pub fn set_add_public_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.add_public_keys = input;
        self
    }
    /// <p>The list of public keys for the <code>DevEndpoint</code> to use.</p>
    pub fn get_add_public_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.add_public_keys
    }
    /// Appends an item to `delete_public_keys`.
    ///
    /// To override the contents of this collection use [`set_delete_public_keys`](Self::set_delete_public_keys).
    ///
    /// <p>The list of public keys to be deleted from the <code>DevEndpoint</code>.</p>
    pub fn delete_public_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.delete_public_keys.unwrap_or_default();
        v.push(input.into());
        self.delete_public_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of public keys to be deleted from the <code>DevEndpoint</code>.</p>
    pub fn set_delete_public_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.delete_public_keys = input;
        self
    }
    /// <p>The list of public keys to be deleted from the <code>DevEndpoint</code>.</p>
    pub fn get_delete_public_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.delete_public_keys
    }
    /// <p>Custom Python or Java libraries to be loaded in the <code>DevEndpoint</code>.</p>
    pub fn custom_libraries(mut self, input: crate::types::DevEndpointCustomLibraries) -> Self {
        self.custom_libraries = ::std::option::Option::Some(input);
        self
    }
    /// <p>Custom Python or Java libraries to be loaded in the <code>DevEndpoint</code>.</p>
    pub fn set_custom_libraries(mut self, input: ::std::option::Option<crate::types::DevEndpointCustomLibraries>) -> Self {
        self.custom_libraries = input;
        self
    }
    /// <p>Custom Python or Java libraries to be loaded in the <code>DevEndpoint</code>.</p>
    pub fn get_custom_libraries(&self) -> &::std::option::Option<crate::types::DevEndpointCustomLibraries> {
        &self.custom_libraries
    }
    /// <p> <code>True</code> if the list of custom libraries to be loaded in the development endpoint needs to be updated, or <code>False</code> if otherwise.</p>
    pub fn update_etl_libraries(mut self, input: bool) -> Self {
        self.update_etl_libraries = ::std::option::Option::Some(input);
        self
    }
    /// <p> <code>True</code> if the list of custom libraries to be loaded in the development endpoint needs to be updated, or <code>False</code> if otherwise.</p>
    pub fn set_update_etl_libraries(mut self, input: ::std::option::Option<bool>) -> Self {
        self.update_etl_libraries = input;
        self
    }
    /// <p> <code>True</code> if the list of custom libraries to be loaded in the development endpoint needs to be updated, or <code>False</code> if otherwise.</p>
    pub fn get_update_etl_libraries(&self) -> &::std::option::Option<bool> {
        &self.update_etl_libraries
    }
    /// Appends an item to `delete_arguments`.
    ///
    /// To override the contents of this collection use [`set_delete_arguments`](Self::set_delete_arguments).
    ///
    /// <p>The list of argument keys to be deleted from the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    pub fn delete_arguments(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.delete_arguments.unwrap_or_default();
        v.push(input.into());
        self.delete_arguments = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of argument keys to be deleted from the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    pub fn set_delete_arguments(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.delete_arguments = input;
        self
    }
    /// <p>The list of argument keys to be deleted from the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    pub fn get_delete_arguments(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.delete_arguments
    }
    /// Adds a key-value pair to `add_arguments`.
    ///
    /// To override the contents of this collection use [`set_add_arguments`](Self::set_add_arguments).
    ///
    /// <p>The map of arguments to add the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li> <p> <code>"--enable-glue-datacatalog": ""</code> </p> </li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub fn add_arguments(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.add_arguments.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.add_arguments = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The map of arguments to add the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li> <p> <code>"--enable-glue-datacatalog": ""</code> </p> </li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub fn set_add_arguments(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.add_arguments = input;
        self
    }
    /// <p>The map of arguments to add the map of arguments used to configure the <code>DevEndpoint</code>.</p>
    /// <p>Valid arguments are:</p>
    /// <ul>
    /// <li> <p> <code>"--enable-glue-datacatalog": ""</code> </p> </li>
    /// </ul>
    /// <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    pub fn get_add_arguments(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.add_arguments
    }
    /// Consumes the builder and constructs a [`UpdateDevEndpointInput`](crate::operation::update_dev_endpoint::UpdateDevEndpointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_dev_endpoint::UpdateDevEndpointInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_dev_endpoint::UpdateDevEndpointInput {
            endpoint_name: self.endpoint_name,
            public_key: self.public_key,
            add_public_keys: self.add_public_keys,
            delete_public_keys: self.delete_public_keys,
            custom_libraries: self.custom_libraries,
            update_etl_libraries: self.update_etl_libraries,
            delete_arguments: self.delete_arguments,
            add_arguments: self.add_arguments,
        })
    }
}
