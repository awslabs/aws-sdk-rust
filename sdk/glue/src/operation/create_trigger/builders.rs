// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_trigger::_create_trigger_output::CreateTriggerOutputBuilder;

pub use crate::operation::create_trigger::_create_trigger_input::CreateTriggerInputBuilder;

impl crate::operation::create_trigger::builders::CreateTriggerInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_trigger::CreateTriggerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_trigger::CreateTriggerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_trigger();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateTrigger`.
///
/// <p>Creates a new trigger.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateTriggerFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_trigger::builders::CreateTriggerInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_trigger::CreateTriggerOutput,
        crate::operation::create_trigger::CreateTriggerError,
    > for CreateTriggerFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_trigger::CreateTriggerOutput,
            crate::operation::create_trigger::CreateTriggerError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateTriggerFluentBuilder {
    /// Creates a new `CreateTrigger`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateTrigger as a reference.
    pub fn as_input(&self) -> &crate::operation::create_trigger::builders::CreateTriggerInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_trigger::CreateTriggerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_trigger::CreateTriggerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_trigger::CreateTrigger::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_trigger::CreateTrigger::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_trigger::CreateTriggerOutput,
        crate::operation::create_trigger::CreateTriggerError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the trigger.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the trigger.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the trigger.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The name of the workflow associated with the trigger.</p>
    pub fn workflow_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.workflow_name(input.into());
        self
    }
    /// <p>The name of the workflow associated with the trigger.</p>
    pub fn set_workflow_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_workflow_name(input);
        self
    }
    /// <p>The name of the workflow associated with the trigger.</p>
    pub fn get_workflow_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_workflow_name()
    }
    /// <p>The type of the new trigger.</p>
    pub fn r#type(mut self, input: crate::types::TriggerType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The type of the new trigger.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TriggerType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The type of the new trigger.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TriggerType> {
        self.inner.get_type()
    }
    /// <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>
    /// <p>This field is required when the trigger type is SCHEDULED.</p>
    pub fn schedule(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.schedule(input.into());
        self
    }
    /// <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>
    /// <p>This field is required when the trigger type is SCHEDULED.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_schedule(input);
        self
    }
    /// <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>
    /// <p>This field is required when the trigger type is SCHEDULED.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_schedule()
    }
    /// <p>A predicate to specify when the new trigger should fire.</p>
    /// <p>This field is required when the trigger type is <code>CONDITIONAL</code>.</p>
    pub fn predicate(mut self, input: crate::types::Predicate) -> Self {
        self.inner = self.inner.predicate(input);
        self
    }
    /// <p>A predicate to specify when the new trigger should fire.</p>
    /// <p>This field is required when the trigger type is <code>CONDITIONAL</code>.</p>
    pub fn set_predicate(mut self, input: ::std::option::Option<crate::types::Predicate>) -> Self {
        self.inner = self.inner.set_predicate(input);
        self
    }
    /// <p>A predicate to specify when the new trigger should fire.</p>
    /// <p>This field is required when the trigger type is <code>CONDITIONAL</code>.</p>
    pub fn get_predicate(&self) -> &::std::option::Option<crate::types::Predicate> {
        self.inner.get_predicate()
    }
    ///
    /// Appends an item to `Actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions initiated by this trigger when it fires.</p>
    pub fn actions(mut self, input: crate::types::Action) -> Self {
        self.inner = self.inner.actions(input);
        self
    }
    /// <p>The actions initiated by this trigger when it fires.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Action>>) -> Self {
        self.inner = self.inner.set_actions(input);
        self
    }
    /// <p>The actions initiated by this trigger when it fires.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Action>> {
        self.inner.get_actions()
    }
    /// <p>A description of the new trigger.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the new trigger.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description of the new trigger.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>Set to <code>true</code> to start <code>SCHEDULED</code> and <code>CONDITIONAL</code> triggers when created. True is not supported for <code>ON_DEMAND</code> triggers.</p>
    pub fn start_on_creation(mut self, input: bool) -> Self {
        self.inner = self.inner.start_on_creation(input);
        self
    }
    /// <p>Set to <code>true</code> to start <code>SCHEDULED</code> and <code>CONDITIONAL</code> triggers when created. True is not supported for <code>ON_DEMAND</code> triggers.</p>
    pub fn set_start_on_creation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_start_on_creation(input);
        self
    }
    /// <p>Set to <code>true</code> to start <code>SCHEDULED</code> and <code>CONDITIONAL</code> triggers when created. True is not supported for <code>ON_DEMAND</code> triggers.</p>
    pub fn get_start_on_creation(&self) -> &::std::option::Option<bool> {
        self.inner.get_start_on_creation()
    }
    ///
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to use with this trigger. You may use tags to limit access to the trigger. For more information about tags in Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">Amazon Web Services Tags in Glue</a> in the developer guide.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags to use with this trigger. You may use tags to limit access to the trigger. For more information about tags in Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">Amazon Web Services Tags in Glue</a> in the developer guide.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags to use with this trigger. You may use tags to limit access to the trigger. For more information about tags in Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">Amazon Web Services Tags in Glue</a> in the developer guide.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
    pub fn event_batching_condition(mut self, input: crate::types::EventBatchingCondition) -> Self {
        self.inner = self.inner.event_batching_condition(input);
        self
    }
    /// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
    pub fn set_event_batching_condition(mut self, input: ::std::option::Option<crate::types::EventBatchingCondition>) -> Self {
        self.inner = self.inner.set_event_batching_condition(input);
        self
    }
    /// <p>Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.</p>
    pub fn get_event_batching_condition(&self) -> &::std::option::Option<crate::types::EventBatchingCondition> {
        self.inner.get_event_batching_condition()
    }
}
