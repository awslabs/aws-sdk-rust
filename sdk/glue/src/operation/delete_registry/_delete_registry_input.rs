// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteRegistryInput {
    /// <p>This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub registry_id: std::option::Option<crate::types::RegistryId>,
}
impl DeleteRegistryInput {
    /// <p>This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>
    pub fn registry_id(&self) -> std::option::Option<&crate::types::RegistryId> {
        self.registry_id.as_ref()
    }
}
impl DeleteRegistryInput {
    /// Creates a new builder-style object to manufacture [`DeleteRegistryInput`](crate::operation::delete_registry::DeleteRegistryInput).
    pub fn builder() -> crate::operation::delete_registry::builders::DeleteRegistryInputBuilder {
        crate::operation::delete_registry::builders::DeleteRegistryInputBuilder::default()
    }
}

/// A builder for [`DeleteRegistryInput`](crate::operation::delete_registry::DeleteRegistryInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteRegistryInputBuilder {
    pub(crate) registry_id: std::option::Option<crate::types::RegistryId>,
}
impl DeleteRegistryInputBuilder {
    /// <p>This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>
    pub fn registry_id(mut self, input: crate::types::RegistryId) -> Self {
        self.registry_id = Some(input);
        self
    }
    /// <p>This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>
    pub fn set_registry_id(mut self, input: std::option::Option<crate::types::RegistryId>) -> Self {
        self.registry_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteRegistryInput`](crate::operation::delete_registry::DeleteRegistryInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_registry::DeleteRegistryInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_registry::DeleteRegistryInput {
            registry_id: self.registry_id,
        })
    }
}
