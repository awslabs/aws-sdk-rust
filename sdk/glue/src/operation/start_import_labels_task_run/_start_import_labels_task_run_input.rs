// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartImportLabelsTaskRunInput {
    /// <p>The unique identifier of the machine learning transform.</p>
    pub transform_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Simple Storage Service (Amazon S3) path from where you import the labels.</p>
    pub input_s3_path: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether to overwrite your existing labels.</p>
    pub replace_all_labels: ::std::option::Option<bool>,
}
impl StartImportLabelsTaskRunInput {
    /// <p>The unique identifier of the machine learning transform.</p>
    pub fn transform_id(&self) -> ::std::option::Option<&str> {
        self.transform_id.as_deref()
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path from where you import the labels.</p>
    pub fn input_s3_path(&self) -> ::std::option::Option<&str> {
        self.input_s3_path.as_deref()
    }
    /// <p>Indicates whether to overwrite your existing labels.</p>
    pub fn replace_all_labels(&self) -> ::std::option::Option<bool> {
        self.replace_all_labels
    }
}
impl StartImportLabelsTaskRunInput {
    /// Creates a new builder-style object to manufacture [`StartImportLabelsTaskRunInput`](crate::operation::start_import_labels_task_run::StartImportLabelsTaskRunInput).
    pub fn builder() -> crate::operation::start_import_labels_task_run::builders::StartImportLabelsTaskRunInputBuilder {
        crate::operation::start_import_labels_task_run::builders::StartImportLabelsTaskRunInputBuilder::default()
    }
}

/// A builder for [`StartImportLabelsTaskRunInput`](crate::operation::start_import_labels_task_run::StartImportLabelsTaskRunInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartImportLabelsTaskRunInputBuilder {
    pub(crate) transform_id: ::std::option::Option<::std::string::String>,
    pub(crate) input_s3_path: ::std::option::Option<::std::string::String>,
    pub(crate) replace_all_labels: ::std::option::Option<bool>,
}
impl StartImportLabelsTaskRunInputBuilder {
    /// <p>The unique identifier of the machine learning transform.</p>
    /// This field is required.
    pub fn transform_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transform_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the machine learning transform.</p>
    pub fn set_transform_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transform_id = input;
        self
    }
    /// <p>The unique identifier of the machine learning transform.</p>
    pub fn get_transform_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transform_id
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path from where you import the labels.</p>
    /// This field is required.
    pub fn input_s3_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_s3_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path from where you import the labels.</p>
    pub fn set_input_s3_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_s3_path = input;
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path from where you import the labels.</p>
    pub fn get_input_s3_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_s3_path
    }
    /// <p>Indicates whether to overwrite your existing labels.</p>
    pub fn replace_all_labels(mut self, input: bool) -> Self {
        self.replace_all_labels = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to overwrite your existing labels.</p>
    pub fn set_replace_all_labels(mut self, input: ::std::option::Option<bool>) -> Self {
        self.replace_all_labels = input;
        self
    }
    /// <p>Indicates whether to overwrite your existing labels.</p>
    pub fn get_replace_all_labels(&self) -> &::std::option::Option<bool> {
        &self.replace_all_labels
    }
    /// Consumes the builder and constructs a [`StartImportLabelsTaskRunInput`](crate::operation::start_import_labels_task_run::StartImportLabelsTaskRunInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_import_labels_task_run::StartImportLabelsTaskRunInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_import_labels_task_run::StartImportLabelsTaskRunInput {
            transform_id: self.transform_id,
            input_s3_path: self.input_s3_path,
            replace_all_labels: self.replace_all_labels,
        })
    }
}
