// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateColumnStatisticsForPartitionInput {
    /// <p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>The name of the catalog database where the partitions reside.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The name of the partitions' table.</p>
    #[doc(hidden)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>A list of partition values identifying the partition.</p>
    #[doc(hidden)]
    pub partition_values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of the column statistics.</p>
    #[doc(hidden)]
    pub column_statistics_list: std::option::Option<std::vec::Vec<crate::types::ColumnStatistics>>,
}
impl UpdateColumnStatisticsForPartitionInput {
    /// <p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The name of the catalog database where the partitions reside.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the partitions' table.</p>
    pub fn table_name(&self) -> std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>A list of partition values identifying the partition.</p>
    pub fn partition_values(&self) -> std::option::Option<&[std::string::String]> {
        self.partition_values.as_deref()
    }
    /// <p>A list of the column statistics.</p>
    pub fn column_statistics_list(&self) -> std::option::Option<&[crate::types::ColumnStatistics]> {
        self.column_statistics_list.as_deref()
    }
}
impl UpdateColumnStatisticsForPartitionInput {
    /// Creates a new builder-style object to manufacture [`UpdateColumnStatisticsForPartitionInput`](crate::operation::update_column_statistics_for_partition::UpdateColumnStatisticsForPartitionInput).
    pub fn builder() -> crate::operation::update_column_statistics_for_partition::builders::UpdateColumnStatisticsForPartitionInputBuilder{
        crate::operation::update_column_statistics_for_partition::builders::UpdateColumnStatisticsForPartitionInputBuilder::default()
    }
}

/// A builder for [`UpdateColumnStatisticsForPartitionInput`](crate::operation::update_column_statistics_for_partition::UpdateColumnStatisticsForPartitionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateColumnStatisticsForPartitionInputBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) table_name: std::option::Option<std::string::String>,
    pub(crate) partition_values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) column_statistics_list:
        std::option::Option<std::vec::Vec<crate::types::ColumnStatistics>>,
}
impl UpdateColumnStatisticsForPartitionInputBuilder {
    /// <p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.</p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The name of the catalog database where the partitions reside.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>The name of the catalog database where the partitions reside.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the partitions' table.</p>
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_name = Some(input.into());
        self
    }
    /// <p>The name of the partitions' table.</p>
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// Appends an item to `partition_values`.
    ///
    /// To override the contents of this collection use [`set_partition_values`](Self::set_partition_values).
    ///
    /// <p>A list of partition values identifying the partition.</p>
    pub fn partition_values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.partition_values.unwrap_or_default();
        v.push(input.into());
        self.partition_values = Some(v);
        self
    }
    /// <p>A list of partition values identifying the partition.</p>
    pub fn set_partition_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.partition_values = input;
        self
    }
    /// Appends an item to `column_statistics_list`.
    ///
    /// To override the contents of this collection use [`set_column_statistics_list`](Self::set_column_statistics_list).
    ///
    /// <p>A list of the column statistics.</p>
    pub fn column_statistics_list(mut self, input: crate::types::ColumnStatistics) -> Self {
        let mut v = self.column_statistics_list.unwrap_or_default();
        v.push(input);
        self.column_statistics_list = Some(v);
        self
    }
    /// <p>A list of the column statistics.</p>
    pub fn set_column_statistics_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ColumnStatistics>>,
    ) -> Self {
        self.column_statistics_list = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateColumnStatisticsForPartitionInput`](crate::operation::update_column_statistics_for_partition::UpdateColumnStatisticsForPartitionInput).
    pub fn build(self) -> Result<crate::operation::update_column_statistics_for_partition::UpdateColumnStatisticsForPartitionInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::update_column_statistics_for_partition::UpdateColumnStatisticsForPartitionInput {
                catalog_id: self.catalog_id
                ,
                database_name: self.database_name
                ,
                table_name: self.table_name
                ,
                partition_values: self.partition_values
                ,
                column_statistics_list: self.column_statistics_list
                ,
            }
        )
    }
}
