// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_unfiltered_partition_metadata::_get_unfiltered_partition_metadata_output::GetUnfilteredPartitionMetadataOutputBuilder;

pub use crate::operation::get_unfiltered_partition_metadata::_get_unfiltered_partition_metadata_input::GetUnfilteredPartitionMetadataInputBuilder;

/// Fluent builder constructing a request to `GetUnfilteredPartitionMetadata`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetUnfilteredPartitionMetadataFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::get_unfiltered_partition_metadata::builders::GetUnfilteredPartitionMetadataInputBuilder
            }
impl GetUnfilteredPartitionMetadataFluentBuilder {
    /// Creates a new `GetUnfilteredPartitionMetadata`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::get_unfiltered_partition_metadata::GetUnfilteredPartitionMetadata, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::get_unfiltered_partition_metadata::GetUnfilteredPartitionMetadataError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::get_unfiltered_partition_metadata::GetUnfilteredPartitionMetadataOutput, aws_smithy_http::result::SdkError<crate::operation::get_unfiltered_partition_metadata::GetUnfilteredPartitionMetadataError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.catalog_id(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_catalog_id(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.database_name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_database_name(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.table_name(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_table_name(input);
        self
    }
    /// Appends an item to `PartitionValues`.
    ///
    /// To override the contents of this collection use [`set_partition_values`](Self::set_partition_values).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn partition_values(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.partition_values(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_partition_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_partition_values(input);
        self
    }
    /// <p>A structure containing information for audit.</p>
    pub fn audit_context(mut self, input: crate::types::AuditContext) -> Self {
        self.inner = self.inner.audit_context(input);
        self
    }
    /// <p>A structure containing information for audit.</p>
    pub fn set_audit_context(
        mut self,
        input: std::option::Option<crate::types::AuditContext>,
    ) -> Self {
        self.inner = self.inner.set_audit_context(input);
        self
    }
    /// Appends an item to `SupportedPermissionTypes`.
    ///
    /// To override the contents of this collection use [`set_supported_permission_types`](Self::set_supported_permission_types).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn supported_permission_types(mut self, input: crate::types::PermissionType) -> Self {
        self.inner = self.inner.supported_permission_types(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_supported_permission_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PermissionType>>,
    ) -> Self {
        self.inner = self.inner.set_supported_permission_types(input);
        self
    }
}
