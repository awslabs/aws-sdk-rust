// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSchemaByDefinitionInput {
    /// <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
    /// <ul>
    /// <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li>
    /// <li> <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub schema_id: std::option::Option<crate::types::SchemaId>,
    /// <p>The definition of the schema for which schema details are required.</p>
    #[doc(hidden)]
    pub schema_definition: std::option::Option<std::string::String>,
}
impl GetSchemaByDefinitionInput {
    /// <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
    /// <ul>
    /// <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li>
    /// <li> <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li>
    /// </ul>
    pub fn schema_id(&self) -> std::option::Option<&crate::types::SchemaId> {
        self.schema_id.as_ref()
    }
    /// <p>The definition of the schema for which schema details are required.</p>
    pub fn schema_definition(&self) -> std::option::Option<&str> {
        self.schema_definition.as_deref()
    }
}
impl GetSchemaByDefinitionInput {
    /// Creates a new builder-style object to manufacture [`GetSchemaByDefinitionInput`](crate::operation::get_schema_by_definition::GetSchemaByDefinitionInput).
    pub fn builder(
    ) -> crate::operation::get_schema_by_definition::builders::GetSchemaByDefinitionInputBuilder
    {
        crate::operation::get_schema_by_definition::builders::GetSchemaByDefinitionInputBuilder::default()
    }
}

/// A builder for [`GetSchemaByDefinitionInput`](crate::operation::get_schema_by_definition::GetSchemaByDefinitionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSchemaByDefinitionInputBuilder {
    pub(crate) schema_id: std::option::Option<crate::types::SchemaId>,
    pub(crate) schema_definition: std::option::Option<std::string::String>,
}
impl GetSchemaByDefinitionInputBuilder {
    /// <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
    /// <ul>
    /// <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li>
    /// <li> <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li>
    /// </ul>
    pub fn schema_id(mut self, input: crate::types::SchemaId) -> Self {
        self.schema_id = Some(input);
        self
    }
    /// <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
    /// <ul>
    /// <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li>
    /// <li> <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p> </li>
    /// </ul>
    pub fn set_schema_id(mut self, input: std::option::Option<crate::types::SchemaId>) -> Self {
        self.schema_id = input;
        self
    }
    /// <p>The definition of the schema for which schema details are required.</p>
    pub fn schema_definition(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_definition = Some(input.into());
        self
    }
    /// <p>The definition of the schema for which schema details are required.</p>
    pub fn set_schema_definition(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schema_definition = input;
        self
    }
    /// Consumes the builder and constructs a [`GetSchemaByDefinitionInput`](crate::operation::get_schema_by_definition::GetSchemaByDefinitionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_schema_by_definition::GetSchemaByDefinitionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_schema_by_definition::GetSchemaByDefinitionInput {
                schema_id: self.schema_id,
                schema_definition: self.schema_definition,
            },
        )
    }
}
