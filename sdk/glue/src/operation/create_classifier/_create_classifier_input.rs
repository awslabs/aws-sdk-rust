// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateClassifierInput {
    /// <p>A <code>GrokClassifier</code> object specifying the classifier to create.</p>
    pub grok_classifier: ::std::option::Option<crate::types::CreateGrokClassifierRequest>,
    /// <p>An <code>XMLClassifier</code> object specifying the classifier to create.</p>
    pub xml_classifier: ::std::option::Option<crate::types::CreateXmlClassifierRequest>,
    /// <p>A <code>JsonClassifier</code> object specifying the classifier to create.</p>
    pub json_classifier: ::std::option::Option<crate::types::CreateJsonClassifierRequest>,
    /// <p>A <code>CsvClassifier</code> object specifying the classifier to create.</p>
    pub csv_classifier: ::std::option::Option<crate::types::CreateCsvClassifierRequest>,
}
impl CreateClassifierInput {
    /// <p>A <code>GrokClassifier</code> object specifying the classifier to create.</p>
    pub fn grok_classifier(&self) -> ::std::option::Option<&crate::types::CreateGrokClassifierRequest> {
        self.grok_classifier.as_ref()
    }
    /// <p>An <code>XMLClassifier</code> object specifying the classifier to create.</p>
    pub fn xml_classifier(&self) -> ::std::option::Option<&crate::types::CreateXmlClassifierRequest> {
        self.xml_classifier.as_ref()
    }
    /// <p>A <code>JsonClassifier</code> object specifying the classifier to create.</p>
    pub fn json_classifier(&self) -> ::std::option::Option<&crate::types::CreateJsonClassifierRequest> {
        self.json_classifier.as_ref()
    }
    /// <p>A <code>CsvClassifier</code> object specifying the classifier to create.</p>
    pub fn csv_classifier(&self) -> ::std::option::Option<&crate::types::CreateCsvClassifierRequest> {
        self.csv_classifier.as_ref()
    }
}
impl CreateClassifierInput {
    /// Creates a new builder-style object to manufacture [`CreateClassifierInput`](crate::operation::create_classifier::CreateClassifierInput).
    pub fn builder() -> crate::operation::create_classifier::builders::CreateClassifierInputBuilder {
        crate::operation::create_classifier::builders::CreateClassifierInputBuilder::default()
    }
}

/// A builder for [`CreateClassifierInput`](crate::operation::create_classifier::CreateClassifierInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateClassifierInputBuilder {
    pub(crate) grok_classifier: ::std::option::Option<crate::types::CreateGrokClassifierRequest>,
    pub(crate) xml_classifier: ::std::option::Option<crate::types::CreateXmlClassifierRequest>,
    pub(crate) json_classifier: ::std::option::Option<crate::types::CreateJsonClassifierRequest>,
    pub(crate) csv_classifier: ::std::option::Option<crate::types::CreateCsvClassifierRequest>,
}
impl CreateClassifierInputBuilder {
    /// <p>A <code>GrokClassifier</code> object specifying the classifier to create.</p>
    pub fn grok_classifier(mut self, input: crate::types::CreateGrokClassifierRequest) -> Self {
        self.grok_classifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>GrokClassifier</code> object specifying the classifier to create.</p>
    pub fn set_grok_classifier(mut self, input: ::std::option::Option<crate::types::CreateGrokClassifierRequest>) -> Self {
        self.grok_classifier = input;
        self
    }
    /// <p>A <code>GrokClassifier</code> object specifying the classifier to create.</p>
    pub fn get_grok_classifier(&self) -> &::std::option::Option<crate::types::CreateGrokClassifierRequest> {
        &self.grok_classifier
    }
    /// <p>An <code>XMLClassifier</code> object specifying the classifier to create.</p>
    pub fn xml_classifier(mut self, input: crate::types::CreateXmlClassifierRequest) -> Self {
        self.xml_classifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>An <code>XMLClassifier</code> object specifying the classifier to create.</p>
    pub fn set_xml_classifier(mut self, input: ::std::option::Option<crate::types::CreateXmlClassifierRequest>) -> Self {
        self.xml_classifier = input;
        self
    }
    /// <p>An <code>XMLClassifier</code> object specifying the classifier to create.</p>
    pub fn get_xml_classifier(&self) -> &::std::option::Option<crate::types::CreateXmlClassifierRequest> {
        &self.xml_classifier
    }
    /// <p>A <code>JsonClassifier</code> object specifying the classifier to create.</p>
    pub fn json_classifier(mut self, input: crate::types::CreateJsonClassifierRequest) -> Self {
        self.json_classifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>JsonClassifier</code> object specifying the classifier to create.</p>
    pub fn set_json_classifier(mut self, input: ::std::option::Option<crate::types::CreateJsonClassifierRequest>) -> Self {
        self.json_classifier = input;
        self
    }
    /// <p>A <code>JsonClassifier</code> object specifying the classifier to create.</p>
    pub fn get_json_classifier(&self) -> &::std::option::Option<crate::types::CreateJsonClassifierRequest> {
        &self.json_classifier
    }
    /// <p>A <code>CsvClassifier</code> object specifying the classifier to create.</p>
    pub fn csv_classifier(mut self, input: crate::types::CreateCsvClassifierRequest) -> Self {
        self.csv_classifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>CsvClassifier</code> object specifying the classifier to create.</p>
    pub fn set_csv_classifier(mut self, input: ::std::option::Option<crate::types::CreateCsvClassifierRequest>) -> Self {
        self.csv_classifier = input;
        self
    }
    /// <p>A <code>CsvClassifier</code> object specifying the classifier to create.</p>
    pub fn get_csv_classifier(&self) -> &::std::option::Option<crate::types::CreateCsvClassifierRequest> {
        &self.csv_classifier
    }
    /// Consumes the builder and constructs a [`CreateClassifierInput`](crate::operation::create_classifier::CreateClassifierInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_classifier::CreateClassifierInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_classifier::CreateClassifierInput {
            grok_classifier: self.grok_classifier,
            xml_classifier: self.xml_classifier,
            json_classifier: self.json_classifier,
            csv_classifier: self.csv_classifier,
        })
    }
}
