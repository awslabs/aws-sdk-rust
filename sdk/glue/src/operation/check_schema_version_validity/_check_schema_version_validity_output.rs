// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CheckSchemaVersionValidityOutput {
    /// <p>Return true, if the schema is valid and false otherwise.</p>
    #[doc(hidden)]
    pub valid: bool,
    /// <p>A validation failure error message.</p>
    #[doc(hidden)]
    pub error: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CheckSchemaVersionValidityOutput {
    /// <p>Return true, if the schema is valid and false otherwise.</p>
    pub fn valid(&self) -> bool {
        self.valid
    }
    /// <p>A validation failure error message.</p>
    pub fn error(&self) -> std::option::Option<&str> {
        self.error.as_deref()
    }
}
impl aws_http::request_id::RequestId for CheckSchemaVersionValidityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CheckSchemaVersionValidityOutput {
    /// Creates a new builder-style object to manufacture [`CheckSchemaVersionValidityOutput`](crate::operation::check_schema_version_validity::CheckSchemaVersionValidityOutput).
    pub fn builder() -> crate::operation::check_schema_version_validity::builders::CheckSchemaVersionValidityOutputBuilder{
        crate::operation::check_schema_version_validity::builders::CheckSchemaVersionValidityOutputBuilder::default()
    }
}

/// A builder for [`CheckSchemaVersionValidityOutput`](crate::operation::check_schema_version_validity::CheckSchemaVersionValidityOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CheckSchemaVersionValidityOutputBuilder {
    pub(crate) valid: std::option::Option<bool>,
    pub(crate) error: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CheckSchemaVersionValidityOutputBuilder {
    /// <p>Return true, if the schema is valid and false otherwise.</p>
    pub fn valid(mut self, input: bool) -> Self {
        self.valid = Some(input);
        self
    }
    /// <p>Return true, if the schema is valid and false otherwise.</p>
    pub fn set_valid(mut self, input: std::option::Option<bool>) -> Self {
        self.valid = input;
        self
    }
    /// <p>A validation failure error message.</p>
    pub fn error(mut self, input: impl Into<std::string::String>) -> Self {
        self.error = Some(input.into());
        self
    }
    /// <p>A validation failure error message.</p>
    pub fn set_error(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CheckSchemaVersionValidityOutput`](crate::operation::check_schema_version_validity::CheckSchemaVersionValidityOutput).
    pub fn build(
        self,
    ) -> crate::operation::check_schema_version_validity::CheckSchemaVersionValidityOutput {
        crate::operation::check_schema_version_validity::CheckSchemaVersionValidityOutput {
            valid: self.valid.unwrap_or_default(),
            error: self.error,
            _request_id: self._request_id,
        }
    }
}
