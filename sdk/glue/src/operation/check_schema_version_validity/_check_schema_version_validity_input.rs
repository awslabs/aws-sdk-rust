// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CheckSchemaVersionValidityInput {
    /// <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
    pub data_format: ::std::option::Option<crate::types::DataFormat>,
    /// <p>The definition of the schema that has to be validated.</p>
    pub schema_definition: ::std::option::Option<::std::string::String>,
}
impl CheckSchemaVersionValidityInput {
    /// <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
    pub fn data_format(&self) -> ::std::option::Option<&crate::types::DataFormat> {
        self.data_format.as_ref()
    }
    /// <p>The definition of the schema that has to be validated.</p>
    pub fn schema_definition(&self) -> ::std::option::Option<&str> {
        self.schema_definition.as_deref()
    }
}
impl CheckSchemaVersionValidityInput {
    /// Creates a new builder-style object to manufacture [`CheckSchemaVersionValidityInput`](crate::operation::check_schema_version_validity::CheckSchemaVersionValidityInput).
    pub fn builder() -> crate::operation::check_schema_version_validity::builders::CheckSchemaVersionValidityInputBuilder {
        crate::operation::check_schema_version_validity::builders::CheckSchemaVersionValidityInputBuilder::default()
    }
}

/// A builder for [`CheckSchemaVersionValidityInput`](crate::operation::check_schema_version_validity::CheckSchemaVersionValidityInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CheckSchemaVersionValidityInputBuilder {
    pub(crate) data_format: ::std::option::Option<crate::types::DataFormat>,
    pub(crate) schema_definition: ::std::option::Option<::std::string::String>,
}
impl CheckSchemaVersionValidityInputBuilder {
    /// <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
    /// This field is required.
    pub fn data_format(mut self, input: crate::types::DataFormat) -> Self {
        self.data_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
    pub fn set_data_format(mut self, input: ::std::option::Option<crate::types::DataFormat>) -> Self {
        self.data_format = input;
        self
    }
    /// <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
    pub fn get_data_format(&self) -> &::std::option::Option<crate::types::DataFormat> {
        &self.data_format
    }
    /// <p>The definition of the schema that has to be validated.</p>
    /// This field is required.
    pub fn schema_definition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_definition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The definition of the schema that has to be validated.</p>
    pub fn set_schema_definition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_definition = input;
        self
    }
    /// <p>The definition of the schema that has to be validated.</p>
    pub fn get_schema_definition(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_definition
    }
    /// Consumes the builder and constructs a [`CheckSchemaVersionValidityInput`](crate::operation::check_schema_version_validity::CheckSchemaVersionValidityInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::check_schema_version_validity::CheckSchemaVersionValidityInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::check_schema_version_validity::CheckSchemaVersionValidityInput {
            data_format: self.data_format,
            schema_definition: self.schema_definition,
        })
    }
}
