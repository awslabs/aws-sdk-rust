// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetDataQualityResultOutput {
    /// <p>A list of <code>DataQualityResult</code> objects representing the data quality results.</p>
    #[doc(hidden)]
    pub results: std::option::Option<std::vec::Vec<crate::types::DataQualityResult>>,
    /// <p>A list of result IDs for which results were not found.</p>
    #[doc(hidden)]
    pub results_not_found: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl BatchGetDataQualityResultOutput {
    /// <p>A list of <code>DataQualityResult</code> objects representing the data quality results.</p>
    pub fn results(&self) -> std::option::Option<&[crate::types::DataQualityResult]> {
        self.results.as_deref()
    }
    /// <p>A list of result IDs for which results were not found.</p>
    pub fn results_not_found(&self) -> std::option::Option<&[std::string::String]> {
        self.results_not_found.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchGetDataQualityResultOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetDataQualityResultOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetDataQualityResultOutput`](crate::operation::batch_get_data_quality_result::BatchGetDataQualityResultOutput).
    pub fn builder() -> crate::operation::batch_get_data_quality_result::builders::BatchGetDataQualityResultOutputBuilder{
        crate::operation::batch_get_data_quality_result::builders::BatchGetDataQualityResultOutputBuilder::default()
    }
}

/// A builder for [`BatchGetDataQualityResultOutput`](crate::operation::batch_get_data_quality_result::BatchGetDataQualityResultOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchGetDataQualityResultOutputBuilder {
    pub(crate) results: std::option::Option<std::vec::Vec<crate::types::DataQualityResult>>,
    pub(crate) results_not_found: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl BatchGetDataQualityResultOutputBuilder {
    /// Appends an item to `results`.
    ///
    /// To override the contents of this collection use [`set_results`](Self::set_results).
    ///
    /// <p>A list of <code>DataQualityResult</code> objects representing the data quality results.</p>
    pub fn results(mut self, input: crate::types::DataQualityResult) -> Self {
        let mut v = self.results.unwrap_or_default();
        v.push(input);
        self.results = Some(v);
        self
    }
    /// <p>A list of <code>DataQualityResult</code> objects representing the data quality results.</p>
    pub fn set_results(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataQualityResult>>,
    ) -> Self {
        self.results = input;
        self
    }
    /// Appends an item to `results_not_found`.
    ///
    /// To override the contents of this collection use [`set_results_not_found`](Self::set_results_not_found).
    ///
    /// <p>A list of result IDs for which results were not found.</p>
    pub fn results_not_found(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.results_not_found.unwrap_or_default();
        v.push(input.into());
        self.results_not_found = Some(v);
        self
    }
    /// <p>A list of result IDs for which results were not found.</p>
    pub fn set_results_not_found(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.results_not_found = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetDataQualityResultOutput`](crate::operation::batch_get_data_quality_result::BatchGetDataQualityResultOutput).
    pub fn build(
        self,
    ) -> crate::operation::batch_get_data_quality_result::BatchGetDataQualityResultOutput {
        crate::operation::batch_get_data_quality_result::BatchGetDataQualityResultOutput {
            results: self.results,
            results_not_found: self.results_not_found,
            _request_id: self._request_id,
        }
    }
}
