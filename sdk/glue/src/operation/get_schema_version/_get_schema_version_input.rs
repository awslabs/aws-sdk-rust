// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSchemaVersionInput {
    /// <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
    /// <ul>
    /// <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li>
    /// <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub schema_id: std::option::Option<crate::types::SchemaId>,
    /// <p>The <code>SchemaVersionId</code> of the schema version. This field is required for fetching by schema ID. Either this or the <code>SchemaId</code> wrapper has to be provided.</p>
    #[doc(hidden)]
    pub schema_version_id: std::option::Option<std::string::String>,
    /// <p>The version number of the schema.</p>
    #[doc(hidden)]
    pub schema_version_number: std::option::Option<crate::types::SchemaVersionNumber>,
}
impl GetSchemaVersionInput {
    /// <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
    /// <ul>
    /// <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li>
    /// <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li>
    /// </ul>
    pub fn schema_id(&self) -> std::option::Option<&crate::types::SchemaId> {
        self.schema_id.as_ref()
    }
    /// <p>The <code>SchemaVersionId</code> of the schema version. This field is required for fetching by schema ID. Either this or the <code>SchemaId</code> wrapper has to be provided.</p>
    pub fn schema_version_id(&self) -> std::option::Option<&str> {
        self.schema_version_id.as_deref()
    }
    /// <p>The version number of the schema.</p>
    pub fn schema_version_number(&self) -> std::option::Option<&crate::types::SchemaVersionNumber> {
        self.schema_version_number.as_ref()
    }
}
impl GetSchemaVersionInput {
    /// Creates a new builder-style object to manufacture [`GetSchemaVersionInput`](crate::operation::get_schema_version::GetSchemaVersionInput).
    pub fn builder() -> crate::operation::get_schema_version::builders::GetSchemaVersionInputBuilder
    {
        crate::operation::get_schema_version::builders::GetSchemaVersionInputBuilder::default()
    }
}

/// A builder for [`GetSchemaVersionInput`](crate::operation::get_schema_version::GetSchemaVersionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSchemaVersionInputBuilder {
    pub(crate) schema_id: std::option::Option<crate::types::SchemaId>,
    pub(crate) schema_version_id: std::option::Option<std::string::String>,
    pub(crate) schema_version_number: std::option::Option<crate::types::SchemaVersionNumber>,
}
impl GetSchemaVersionInputBuilder {
    /// <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
    /// <ul>
    /// <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li>
    /// <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li>
    /// </ul>
    pub fn schema_id(mut self, input: crate::types::SchemaId) -> Self {
        self.schema_id = Some(input);
        self
    }
    /// <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
    /// <ul>
    /// <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li>
    /// <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li>
    /// </ul>
    pub fn set_schema_id(mut self, input: std::option::Option<crate::types::SchemaId>) -> Self {
        self.schema_id = input;
        self
    }
    /// <p>The <code>SchemaVersionId</code> of the schema version. This field is required for fetching by schema ID. Either this or the <code>SchemaId</code> wrapper has to be provided.</p>
    pub fn schema_version_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_version_id = Some(input.into());
        self
    }
    /// <p>The <code>SchemaVersionId</code> of the schema version. This field is required for fetching by schema ID. Either this or the <code>SchemaId</code> wrapper has to be provided.</p>
    pub fn set_schema_version_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schema_version_id = input;
        self
    }
    /// <p>The version number of the schema.</p>
    pub fn schema_version_number(mut self, input: crate::types::SchemaVersionNumber) -> Self {
        self.schema_version_number = Some(input);
        self
    }
    /// <p>The version number of the schema.</p>
    pub fn set_schema_version_number(
        mut self,
        input: std::option::Option<crate::types::SchemaVersionNumber>,
    ) -> Self {
        self.schema_version_number = input;
        self
    }
    /// Consumes the builder and constructs a [`GetSchemaVersionInput`](crate::operation::get_schema_version::GetSchemaVersionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_schema_version::GetSchemaVersionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_schema_version::GetSchemaVersionInput {
                schema_id: self.schema_id,
                schema_version_id: self.schema_version_id,
                schema_version_number: self.schema_version_number,
            },
        )
    }
}
