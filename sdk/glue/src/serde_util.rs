// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn batch_get_data_quality_result_output_correct_errors(
    mut builder: crate::operation::batch_get_data_quality_result::builders::BatchGetDataQualityResultOutputBuilder,
) -> crate::operation::batch_get_data_quality_result::builders::BatchGetDataQualityResultOutputBuilder {
    if builder.results.is_none() {
        builder.results = Some(Default::default())
    }
    builder
}

pub(crate) fn get_databases_output_correct_errors(
    mut builder: crate::operation::get_databases::builders::GetDatabasesOutputBuilder,
) -> crate::operation::get_databases::builders::GetDatabasesOutputBuilder {
    if builder.database_list.is_none() {
        builder.database_list = Some(Default::default())
    }
    builder
}

pub(crate) fn get_mapping_output_correct_errors(
    mut builder: crate::operation::get_mapping::builders::GetMappingOutputBuilder,
) -> crate::operation::get_mapping::builders::GetMappingOutputBuilder {
    if builder.mapping.is_none() {
        builder.mapping = Some(Default::default())
    }
    builder
}

pub(crate) fn get_ml_transforms_output_correct_errors(
    mut builder: crate::operation::get_ml_transforms::builders::GetMlTransformsOutputBuilder,
) -> crate::operation::get_ml_transforms::builders::GetMlTransformsOutputBuilder {
    if builder.transforms.is_none() {
        builder.transforms = Some(Default::default())
    }
    builder
}

pub(crate) fn list_data_quality_results_output_correct_errors(
    mut builder: crate::operation::list_data_quality_results::builders::ListDataQualityResultsOutputBuilder,
) -> crate::operation::list_data_quality_results::builders::ListDataQualityResultsOutputBuilder {
    if builder.results.is_none() {
        builder.results = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ml_transforms_output_correct_errors(
    mut builder: crate::operation::list_ml_transforms::builders::ListMlTransformsOutputBuilder,
) -> crate::operation::list_ml_transforms::builders::ListMlTransformsOutputBuilder {
    if builder.transform_ids.is_none() {
        builder.transform_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn data_quality_target_table_correct_errors(
    mut builder: crate::types::builders::DataQualityTargetTableBuilder,
) -> crate::types::builders::DataQualityTargetTableBuilder {
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    builder
}

pub(crate) fn data_source_correct_errors(mut builder: crate::types::builders::DataSourceBuilder) -> crate::types::builders::DataSourceBuilder {
    if builder.glue_table.is_none() {
        builder.glue_table = {
            let builder = crate::types::builders::GlueTableBuilder::default();
            crate::serde_util::glue_table_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn database_correct_errors(mut builder: crate::types::builders::DatabaseBuilder) -> crate::types::builders::DatabaseBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_metrics_correct_errors(
    mut builder: crate::types::builders::EvaluationMetricsBuilder,
) -> crate::types::builders::EvaluationMetricsBuilder {
    if builder.transform_type.is_none() {
        builder.transform_type = "no value was set".parse::<crate::types::TransformType>().ok()
    }
    builder
}

pub(crate) fn table_correct_errors(mut builder: crate::types::builders::TableBuilder) -> crate::types::builders::TableBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn transform_parameters_correct_errors(
    mut builder: crate::types::builders::TransformParametersBuilder,
) -> crate::types::builders::TransformParametersBuilder {
    if builder.transform_type.is_none() {
        builder.transform_type = "no value was set".parse::<crate::types::TransformType>().ok()
    }
    builder
}

pub(crate) fn code_gen_edge_correct_errors(mut builder: crate::types::builders::CodeGenEdgeBuilder) -> crate::types::builders::CodeGenEdgeBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    builder
}

pub(crate) fn code_gen_node_correct_errors(mut builder: crate::types::builders::CodeGenNodeBuilder) -> crate::types::builders::CodeGenNodeBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.node_type.is_none() {
        builder.node_type = Some(Default::default())
    }
    if builder.args.is_none() {
        builder.args = Some(Default::default())
    }
    builder
}

pub(crate) fn column_statistics_correct_errors(
    mut builder: crate::types::builders::ColumnStatisticsBuilder,
) -> crate::types::builders::ColumnStatisticsBuilder {
    if builder.column_name.is_none() {
        builder.column_name = Some(Default::default())
    }
    if builder.column_type.is_none() {
        builder.column_type = Some(Default::default())
    }
    if builder.analyzed_time.is_none() {
        builder.analyzed_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.statistics_data.is_none() {
        builder.statistics_data = {
            let builder = crate::types::builders::ColumnStatisticsDataBuilder::default();
            crate::serde_util::column_statistics_data_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn connection_password_encryption_correct_errors(
    mut builder: crate::types::builders::ConnectionPasswordEncryptionBuilder,
) -> crate::types::builders::ConnectionPasswordEncryptionBuilder {
    if builder.return_connection_password_encrypted.is_none() {
        builder.return_connection_password_encrypted = Some(Default::default())
    }
    builder
}

pub(crate) fn csv_classifier_correct_errors(
    mut builder: crate::types::builders::CsvClassifierBuilder,
) -> crate::types::builders::CsvClassifierBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_entity_type_correct_errors(
    mut builder: crate::types::builders::CustomEntityTypeBuilder,
) -> crate::types::builders::CustomEntityTypeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.regex_string.is_none() {
        builder.regex_string = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_at_rest_correct_errors(
    mut builder: crate::types::builders::EncryptionAtRestBuilder,
) -> crate::types::builders::EncryptionAtRestBuilder {
    if builder.catalog_encryption_mode.is_none() {
        builder.catalog_encryption_mode = "no value was set".parse::<crate::types::CatalogEncryptionMode>().ok()
    }
    builder
}

pub(crate) fn event_batching_condition_correct_errors(
    mut builder: crate::types::builders::EventBatchingConditionBuilder,
) -> crate::types::builders::EventBatchingConditionBuilder {
    if builder.batch_size.is_none() {
        builder.batch_size = Some(Default::default())
    }
    builder
}

pub(crate) fn glue_table_correct_errors(mut builder: crate::types::builders::GlueTableBuilder) -> crate::types::builders::GlueTableBuilder {
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    builder
}

pub(crate) fn grok_classifier_correct_errors(
    mut builder: crate::types::builders::GrokClassifierBuilder,
) -> crate::types::builders::GrokClassifierBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.classification.is_none() {
        builder.classification = Some(Default::default())
    }
    if builder.grok_pattern.is_none() {
        builder.grok_pattern = Some(Default::default())
    }
    builder
}

pub(crate) fn json_classifier_correct_errors(
    mut builder: crate::types::builders::JsonClassifierBuilder,
) -> crate::types::builders::JsonClassifierBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.json_path.is_none() {
        builder.json_path = Some(Default::default())
    }
    builder
}

pub(crate) fn ml_user_data_encryption_correct_errors(
    mut builder: crate::types::builders::MlUserDataEncryptionBuilder,
) -> crate::types::builders::MlUserDataEncryptionBuilder {
    if builder.ml_user_data_encryption_mode.is_none() {
        builder.ml_user_data_encryption_mode = "no value was set".parse::<crate::types::MlUserDataEncryptionModeString>().ok()
    }
    builder
}

pub(crate) fn partition_index_descriptor_correct_errors(
    mut builder: crate::types::builders::PartitionIndexDescriptorBuilder,
) -> crate::types::builders::PartitionIndexDescriptorBuilder {
    if builder.index_name.is_none() {
        builder.index_name = Some(Default::default())
    }
    if builder.keys.is_none() {
        builder.keys = Some(Default::default())
    }
    if builder.index_status.is_none() {
        builder.index_status = "no value was set".parse::<crate::types::PartitionIndexStatus>().ok()
    }
    builder
}

pub(crate) fn partition_value_list_correct_errors(
    mut builder: crate::types::builders::PartitionValueListBuilder,
) -> crate::types::builders::PartitionValueListBuilder {
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn xml_classifier_correct_errors(
    mut builder: crate::types::builders::XmlClassifierBuilder,
) -> crate::types::builders::XmlClassifierBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.classification.is_none() {
        builder.classification = Some(Default::default())
    }
    builder
}

pub(crate) fn column_correct_errors(mut builder: crate::types::builders::ColumnBuilder) -> crate::types::builders::ColumnBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn column_statistics_data_correct_errors(
    mut builder: crate::types::builders::ColumnStatisticsDataBuilder,
) -> crate::types::builders::ColumnStatisticsDataBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ColumnStatisticsType>().ok()
    }
    builder
}

pub(crate) fn aggregate_correct_errors(mut builder: crate::types::builders::AggregateBuilder) -> crate::types::builders::AggregateBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.groups.is_none() {
        builder.groups = Some(Default::default())
    }
    if builder.aggs.is_none() {
        builder.aggs = Some(Default::default())
    }
    builder
}

pub(crate) fn apply_mapping_correct_errors(mut builder: crate::types::builders::ApplyMappingBuilder) -> crate::types::builders::ApplyMappingBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.mapping.is_none() {
        builder.mapping = Some(Default::default())
    }
    builder
}

pub(crate) fn athena_connector_source_correct_errors(
    mut builder: crate::types::builders::AthenaConnectorSourceBuilder,
) -> crate::types::builders::AthenaConnectorSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.connection_name.is_none() {
        builder.connection_name = Some(Default::default())
    }
    if builder.connector_name.is_none() {
        builder.connector_name = Some(Default::default())
    }
    if builder.connection_type.is_none() {
        builder.connection_type = Some(Default::default())
    }
    if builder.schema_name.is_none() {
        builder.schema_name = Some(Default::default())
    }
    builder
}

pub(crate) fn basic_catalog_target_correct_errors(
    mut builder: crate::types::builders::BasicCatalogTargetBuilder,
) -> crate::types::builders::BasicCatalogTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn binary_column_statistics_data_correct_errors(
    mut builder: crate::types::builders::BinaryColumnStatisticsDataBuilder,
) -> crate::types::builders::BinaryColumnStatisticsDataBuilder {
    if builder.maximum_length.is_none() {
        builder.maximum_length = Some(Default::default())
    }
    if builder.average_length.is_none() {
        builder.average_length = Some(Default::default())
    }
    if builder.number_of_nulls.is_none() {
        builder.number_of_nulls = Some(Default::default())
    }
    builder
}

pub(crate) fn boolean_column_statistics_data_correct_errors(
    mut builder: crate::types::builders::BooleanColumnStatisticsDataBuilder,
) -> crate::types::builders::BooleanColumnStatisticsDataBuilder {
    if builder.number_of_trues.is_none() {
        builder.number_of_trues = Some(Default::default())
    }
    if builder.number_of_falses.is_none() {
        builder.number_of_falses = Some(Default::default())
    }
    if builder.number_of_nulls.is_none() {
        builder.number_of_nulls = Some(Default::default())
    }
    builder
}

pub(crate) fn catalog_delta_source_correct_errors(
    mut builder: crate::types::builders::CatalogDeltaSourceBuilder,
) -> crate::types::builders::CatalogDeltaSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn catalog_hudi_source_correct_errors(
    mut builder: crate::types::builders::CatalogHudiSourceBuilder,
) -> crate::types::builders::CatalogHudiSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn catalog_kafka_source_correct_errors(
    mut builder: crate::types::builders::CatalogKafkaSourceBuilder,
) -> crate::types::builders::CatalogKafkaSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn catalog_kinesis_source_correct_errors(
    mut builder: crate::types::builders::CatalogKinesisSourceBuilder,
) -> crate::types::builders::CatalogKinesisSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn catalog_source_correct_errors(
    mut builder: crate::types::builders::CatalogSourceBuilder,
) -> crate::types::builders::CatalogSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn catalog_target_correct_errors(
    mut builder: crate::types::builders::CatalogTargetBuilder,
) -> crate::types::builders::CatalogTargetBuilder {
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    if builder.tables.is_none() {
        builder.tables = Some(Default::default())
    }
    builder
}

pub(crate) fn code_gen_node_arg_correct_errors(
    mut builder: crate::types::builders::CodeGenNodeArgBuilder,
) -> crate::types::builders::CodeGenNodeArgBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_code_correct_errors(mut builder: crate::types::builders::CustomCodeBuilder) -> crate::types::builders::CustomCodeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.class_name.is_none() {
        builder.class_name = Some(Default::default())
    }
    builder
}

pub(crate) fn date_column_statistics_data_correct_errors(
    mut builder: crate::types::builders::DateColumnStatisticsDataBuilder,
) -> crate::types::builders::DateColumnStatisticsDataBuilder {
    if builder.number_of_nulls.is_none() {
        builder.number_of_nulls = Some(Default::default())
    }
    if builder.number_of_distinct_values.is_none() {
        builder.number_of_distinct_values = Some(Default::default())
    }
    builder
}

pub(crate) fn decimal_column_statistics_data_correct_errors(
    mut builder: crate::types::builders::DecimalColumnStatisticsDataBuilder,
) -> crate::types::builders::DecimalColumnStatisticsDataBuilder {
    if builder.number_of_nulls.is_none() {
        builder.number_of_nulls = Some(Default::default())
    }
    if builder.number_of_distinct_values.is_none() {
        builder.number_of_distinct_values = Some(Default::default())
    }
    builder
}

pub(crate) fn direct_jdbc_source_correct_errors(
    mut builder: crate::types::builders::DirectJdbcSourceBuilder,
) -> crate::types::builders::DirectJdbcSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    if builder.connection_name.is_none() {
        builder.connection_name = Some(Default::default())
    }
    if builder.connection_type.is_none() {
        builder.connection_type = "no value was set".parse::<crate::types::JdbcConnectionType>().ok()
    }
    builder
}

pub(crate) fn direct_kafka_source_correct_errors(
    mut builder: crate::types::builders::DirectKafkaSourceBuilder,
) -> crate::types::builders::DirectKafkaSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn direct_kinesis_source_correct_errors(
    mut builder: crate::types::builders::DirectKinesisSourceBuilder,
) -> crate::types::builders::DirectKinesisSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn double_column_statistics_data_correct_errors(
    mut builder: crate::types::builders::DoubleColumnStatisticsDataBuilder,
) -> crate::types::builders::DoubleColumnStatisticsDataBuilder {
    if builder.number_of_nulls.is_none() {
        builder.number_of_nulls = Some(Default::default())
    }
    if builder.number_of_distinct_values.is_none() {
        builder.number_of_distinct_values = Some(Default::default())
    }
    builder
}

pub(crate) fn drop_duplicates_correct_errors(
    mut builder: crate::types::builders::DropDuplicatesBuilder,
) -> crate::types::builders::DropDuplicatesBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    builder
}

pub(crate) fn drop_fields_correct_errors(mut builder: crate::types::builders::DropFieldsBuilder) -> crate::types::builders::DropFieldsBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.paths.is_none() {
        builder.paths = Some(Default::default())
    }
    builder
}

pub(crate) fn drop_null_fields_correct_errors(
    mut builder: crate::types::builders::DropNullFieldsBuilder,
) -> crate::types::builders::DropNullFieldsBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    builder
}

pub(crate) fn dynamic_transform_correct_errors(
    mut builder: crate::types::builders::DynamicTransformBuilder,
) -> crate::types::builders::DynamicTransformBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.transform_name.is_none() {
        builder.transform_name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.function_name.is_none() {
        builder.function_name = Some(Default::default())
    }
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    builder
}

pub(crate) fn dynamo_db_catalog_source_correct_errors(
    mut builder: crate::types::builders::DynamoDbCatalogSourceBuilder,
) -> crate::types::builders::DynamoDbCatalogSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluate_data_quality_correct_errors(
    mut builder: crate::types::builders::EvaluateDataQualityBuilder,
) -> crate::types::builders::EvaluateDataQualityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.ruleset.is_none() {
        builder.ruleset = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluate_data_quality_multi_frame_correct_errors(
    mut builder: crate::types::builders::EvaluateDataQualityMultiFrameBuilder,
) -> crate::types::builders::EvaluateDataQualityMultiFrameBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.ruleset.is_none() {
        builder.ruleset = Some(Default::default())
    }
    builder
}

pub(crate) fn fill_missing_values_correct_errors(
    mut builder: crate::types::builders::FillMissingValuesBuilder,
) -> crate::types::builders::FillMissingValuesBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.imputed_path.is_none() {
        builder.imputed_path = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_correct_errors(mut builder: crate::types::builders::FilterBuilder) -> crate::types::builders::FilterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.logical_operator.is_none() {
        builder.logical_operator = "no value was set".parse::<crate::types::FilterLogicalOperator>().ok()
    }
    if builder.filters.is_none() {
        builder.filters = Some(Default::default())
    }
    builder
}

pub(crate) fn governed_catalog_source_correct_errors(
    mut builder: crate::types::builders::GovernedCatalogSourceBuilder,
) -> crate::types::builders::GovernedCatalogSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn governed_catalog_target_correct_errors(
    mut builder: crate::types::builders::GovernedCatalogTargetBuilder,
) -> crate::types::builders::GovernedCatalogTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn jdbc_connector_source_correct_errors(
    mut builder: crate::types::builders::JdbcConnectorSourceBuilder,
) -> crate::types::builders::JdbcConnectorSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.connection_name.is_none() {
        builder.connection_name = Some(Default::default())
    }
    if builder.connector_name.is_none() {
        builder.connector_name = Some(Default::default())
    }
    if builder.connection_type.is_none() {
        builder.connection_type = Some(Default::default())
    }
    builder
}

pub(crate) fn jdbc_connector_target_correct_errors(
    mut builder: crate::types::builders::JdbcConnectorTargetBuilder,
) -> crate::types::builders::JdbcConnectorTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.connection_name.is_none() {
        builder.connection_name = Some(Default::default())
    }
    if builder.connection_table.is_none() {
        builder.connection_table = Some(Default::default())
    }
    if builder.connector_name.is_none() {
        builder.connector_name = Some(Default::default())
    }
    if builder.connection_type.is_none() {
        builder.connection_type = Some(Default::default())
    }
    builder
}

pub(crate) fn join_correct_errors(mut builder: crate::types::builders::JoinBuilder) -> crate::types::builders::JoinBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.join_type.is_none() {
        builder.join_type = "no value was set".parse::<crate::types::JoinType>().ok()
    }
    if builder.columns.is_none() {
        builder.columns = Some(Default::default())
    }
    builder
}

pub(crate) fn key_schema_element_correct_errors(
    mut builder: crate::types::builders::KeySchemaElementBuilder,
) -> crate::types::builders::KeySchemaElementBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn long_column_statistics_data_correct_errors(
    mut builder: crate::types::builders::LongColumnStatisticsDataBuilder,
) -> crate::types::builders::LongColumnStatisticsDataBuilder {
    if builder.number_of_nulls.is_none() {
        builder.number_of_nulls = Some(Default::default())
    }
    if builder.number_of_distinct_values.is_none() {
        builder.number_of_distinct_values = Some(Default::default())
    }
    builder
}

pub(crate) fn merge_correct_errors(mut builder: crate::types::builders::MergeBuilder) -> crate::types::builders::MergeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.primary_keys.is_none() {
        builder.primary_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn microsoft_sql_server_catalog_source_correct_errors(
    mut builder: crate::types::builders::MicrosoftSqlServerCatalogSourceBuilder,
) -> crate::types::builders::MicrosoftSqlServerCatalogSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn microsoft_sql_server_catalog_target_correct_errors(
    mut builder: crate::types::builders::MicrosoftSqlServerCatalogTargetBuilder,
) -> crate::types::builders::MicrosoftSqlServerCatalogTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn my_sql_catalog_source_correct_errors(
    mut builder: crate::types::builders::MySqlCatalogSourceBuilder,
) -> crate::types::builders::MySqlCatalogSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn my_sql_catalog_target_correct_errors(
    mut builder: crate::types::builders::MySqlCatalogTargetBuilder,
) -> crate::types::builders::MySqlCatalogTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn oracle_sql_catalog_source_correct_errors(
    mut builder: crate::types::builders::OracleSqlCatalogSourceBuilder,
) -> crate::types::builders::OracleSqlCatalogSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn oracle_sql_catalog_target_correct_errors(
    mut builder: crate::types::builders::OracleSqlCatalogTargetBuilder,
) -> crate::types::builders::OracleSqlCatalogTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn order_correct_errors(mut builder: crate::types::builders::OrderBuilder) -> crate::types::builders::OrderBuilder {
    if builder.column.is_none() {
        builder.column = Some(Default::default())
    }
    if builder.sort_order.is_none() {
        builder.sort_order = Some(Default::default())
    }
    builder
}

pub(crate) fn pii_detection_correct_errors(mut builder: crate::types::builders::PiiDetectionBuilder) -> crate::types::builders::PiiDetectionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.pii_type.is_none() {
        builder.pii_type = "no value was set".parse::<crate::types::PiiType>().ok()
    }
    if builder.entity_types_to_detect.is_none() {
        builder.entity_types_to_detect = Some(Default::default())
    }
    builder
}

pub(crate) fn postgre_sql_catalog_source_correct_errors(
    mut builder: crate::types::builders::PostgreSqlCatalogSourceBuilder,
) -> crate::types::builders::PostgreSqlCatalogSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn postgre_sql_catalog_target_correct_errors(
    mut builder: crate::types::builders::PostgreSqlCatalogTargetBuilder,
) -> crate::types::builders::PostgreSqlCatalogTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn recipe_correct_errors(mut builder: crate::types::builders::RecipeBuilder) -> crate::types::builders::RecipeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.recipe_reference.is_none() {
        builder.recipe_reference = {
            let builder = crate::types::builders::RecipeReferenceBuilder::default();
            crate::serde_util::recipe_reference_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn redshift_source_correct_errors(
    mut builder: crate::types::builders::RedshiftSourceBuilder,
) -> crate::types::builders::RedshiftSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_target_correct_errors(
    mut builder: crate::types::builders::RedshiftTargetBuilder,
) -> crate::types::builders::RedshiftTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn relational_catalog_source_correct_errors(
    mut builder: crate::types::builders::RelationalCatalogSourceBuilder,
) -> crate::types::builders::RelationalCatalogSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn rename_field_correct_errors(mut builder: crate::types::builders::RenameFieldBuilder) -> crate::types::builders::RenameFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.source_path.is_none() {
        builder.source_path = Some(Default::default())
    }
    if builder.target_path.is_none() {
        builder.target_path = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_catalog_delta_source_correct_errors(
    mut builder: crate::types::builders::S3CatalogDeltaSourceBuilder,
) -> crate::types::builders::S3CatalogDeltaSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_catalog_hudi_source_correct_errors(
    mut builder: crate::types::builders::S3CatalogHudiSourceBuilder,
) -> crate::types::builders::S3CatalogHudiSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_catalog_source_correct_errors(
    mut builder: crate::types::builders::S3CatalogSourceBuilder,
) -> crate::types::builders::S3CatalogSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_catalog_target_correct_errors(
    mut builder: crate::types::builders::S3CatalogTargetBuilder,
) -> crate::types::builders::S3CatalogTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_csv_source_correct_errors(mut builder: crate::types::builders::S3CsvSourceBuilder) -> crate::types::builders::S3CsvSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.paths.is_none() {
        builder.paths = Some(Default::default())
    }
    if builder.separator.is_none() {
        builder.separator = "no value was set".parse::<crate::types::Separator>().ok()
    }
    if builder.quote_char.is_none() {
        builder.quote_char = "no value was set".parse::<crate::types::QuoteChar>().ok()
    }
    builder
}

pub(crate) fn s3_delta_catalog_target_correct_errors(
    mut builder: crate::types::builders::S3DeltaCatalogTargetBuilder,
) -> crate::types::builders::S3DeltaCatalogTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_delta_direct_target_correct_errors(
    mut builder: crate::types::builders::S3DeltaDirectTargetBuilder,
) -> crate::types::builders::S3DeltaDirectTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.compression.is_none() {
        builder.compression = "no value was set".parse::<crate::types::DeltaTargetCompressionType>().ok()
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::TargetFormat>().ok()
    }
    builder
}

pub(crate) fn s3_delta_source_correct_errors(
    mut builder: crate::types::builders::S3DeltaSourceBuilder,
) -> crate::types::builders::S3DeltaSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.paths.is_none() {
        builder.paths = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_direct_target_correct_errors(
    mut builder: crate::types::builders::S3DirectTargetBuilder,
) -> crate::types::builders::S3DirectTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::TargetFormat>().ok()
    }
    builder
}

pub(crate) fn s3_glue_parquet_target_correct_errors(
    mut builder: crate::types::builders::S3GlueParquetTargetBuilder,
) -> crate::types::builders::S3GlueParquetTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_hudi_catalog_target_correct_errors(
    mut builder: crate::types::builders::S3HudiCatalogTargetBuilder,
) -> crate::types::builders::S3HudiCatalogTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.table.is_none() {
        builder.table = Some(Default::default())
    }
    if builder.database.is_none() {
        builder.database = Some(Default::default())
    }
    if builder.additional_options.is_none() {
        builder.additional_options = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_hudi_direct_target_correct_errors(
    mut builder: crate::types::builders::S3HudiDirectTargetBuilder,
) -> crate::types::builders::S3HudiDirectTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.compression.is_none() {
        builder.compression = "no value was set".parse::<crate::types::HudiTargetCompressionType>().ok()
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::TargetFormat>().ok()
    }
    if builder.additional_options.is_none() {
        builder.additional_options = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_hudi_source_correct_errors(mut builder: crate::types::builders::S3HudiSourceBuilder) -> crate::types::builders::S3HudiSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.paths.is_none() {
        builder.paths = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_json_source_correct_errors(mut builder: crate::types::builders::S3JsonSourceBuilder) -> crate::types::builders::S3JsonSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.paths.is_none() {
        builder.paths = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_parquet_source_correct_errors(
    mut builder: crate::types::builders::S3ParquetSourceBuilder,
) -> crate::types::builders::S3ParquetSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.paths.is_none() {
        builder.paths = Some(Default::default())
    }
    builder
}

pub(crate) fn select_fields_correct_errors(mut builder: crate::types::builders::SelectFieldsBuilder) -> crate::types::builders::SelectFieldsBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.paths.is_none() {
        builder.paths = Some(Default::default())
    }
    builder
}

pub(crate) fn select_from_collection_correct_errors(
    mut builder: crate::types::builders::SelectFromCollectionBuilder,
) -> crate::types::builders::SelectFromCollectionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.index.is_none() {
        builder.index = Some(Default::default())
    }
    builder
}

pub(crate) fn snowflake_source_correct_errors(
    mut builder: crate::types::builders::SnowflakeSourceBuilder,
) -> crate::types::builders::SnowflakeSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.data.is_none() {
        builder.data = {
            let builder = crate::types::builders::SnowflakeNodeDataBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn snowflake_target_correct_errors(
    mut builder: crate::types::builders::SnowflakeTargetBuilder,
) -> crate::types::builders::SnowflakeTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.data.is_none() {
        builder.data = {
            let builder = crate::types::builders::SnowflakeNodeDataBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn spark_connector_source_correct_errors(
    mut builder: crate::types::builders::SparkConnectorSourceBuilder,
) -> crate::types::builders::SparkConnectorSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.connection_name.is_none() {
        builder.connection_name = Some(Default::default())
    }
    if builder.connector_name.is_none() {
        builder.connector_name = Some(Default::default())
    }
    if builder.connection_type.is_none() {
        builder.connection_type = Some(Default::default())
    }
    builder
}

pub(crate) fn spark_connector_target_correct_errors(
    mut builder: crate::types::builders::SparkConnectorTargetBuilder,
) -> crate::types::builders::SparkConnectorTargetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.connection_name.is_none() {
        builder.connection_name = Some(Default::default())
    }
    if builder.connector_name.is_none() {
        builder.connector_name = Some(Default::default())
    }
    if builder.connection_type.is_none() {
        builder.connection_type = Some(Default::default())
    }
    builder
}

pub(crate) fn spark_sql_correct_errors(mut builder: crate::types::builders::SparkSqlBuilder) -> crate::types::builders::SparkSqlBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.sql_query.is_none() {
        builder.sql_query = Some(Default::default())
    }
    if builder.sql_aliases.is_none() {
        builder.sql_aliases = Some(Default::default())
    }
    builder
}

pub(crate) fn spigot_correct_errors(mut builder: crate::types::builders::SpigotBuilder) -> crate::types::builders::SpigotBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    builder
}

pub(crate) fn split_fields_correct_errors(mut builder: crate::types::builders::SplitFieldsBuilder) -> crate::types::builders::SplitFieldsBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.paths.is_none() {
        builder.paths = Some(Default::default())
    }
    builder
}

pub(crate) fn string_column_statistics_data_correct_errors(
    mut builder: crate::types::builders::StringColumnStatisticsDataBuilder,
) -> crate::types::builders::StringColumnStatisticsDataBuilder {
    if builder.maximum_length.is_none() {
        builder.maximum_length = Some(Default::default())
    }
    if builder.average_length.is_none() {
        builder.average_length = Some(Default::default())
    }
    if builder.number_of_nulls.is_none() {
        builder.number_of_nulls = Some(Default::default())
    }
    if builder.number_of_distinct_values.is_none() {
        builder.number_of_distinct_values = Some(Default::default())
    }
    builder
}

pub(crate) fn union_correct_errors(mut builder: crate::types::builders::UnionBuilder) -> crate::types::builders::UnionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.inputs.is_none() {
        builder.inputs = Some(Default::default())
    }
    if builder.union_type.is_none() {
        builder.union_type = "no value was set".parse::<crate::types::UnionType>().ok()
    }
    builder
}

pub(crate) fn decimal_number_correct_errors(
    mut builder: crate::types::builders::DecimalNumberBuilder,
) -> crate::types::builders::DecimalNumberBuilder {
    if builder.unscaled_value.is_none() {
        builder.unscaled_value = Some(::aws_smithy_types::Blob::new(""))
    }
    if builder.scale.is_none() {
        builder.scale = Some(Default::default())
    }
    builder
}

pub(crate) fn recipe_reference_correct_errors(
    mut builder: crate::types::builders::RecipeReferenceBuilder,
) -> crate::types::builders::RecipeReferenceBuilder {
    if builder.recipe_arn.is_none() {
        builder.recipe_arn = Some(Default::default())
    }
    if builder.recipe_version.is_none() {
        builder.recipe_version = Some(Default::default())
    }
    builder
}

pub(crate) fn aggregate_operation_correct_errors(
    mut builder: crate::types::builders::AggregateOperationBuilder,
) -> crate::types::builders::AggregateOperationBuilder {
    if builder.column.is_none() {
        builder.column = Some(Default::default())
    }
    if builder.agg_func.is_none() {
        builder.agg_func = "no value was set".parse::<crate::types::AggFunction>().ok()
    }
    builder
}

pub(crate) fn filter_expression_correct_errors(
    mut builder: crate::types::builders::FilterExpressionBuilder,
) -> crate::types::builders::FilterExpressionBuilder {
    if builder.operation.is_none() {
        builder.operation = "no value was set".parse::<crate::types::FilterOperation>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn join_column_correct_errors(mut builder: crate::types::builders::JoinColumnBuilder) -> crate::types::builders::JoinColumnBuilder {
    if builder.from.is_none() {
        builder.from = Some(Default::default())
    }
    if builder.keys.is_none() {
        builder.keys = Some(Default::default())
    }
    builder
}

pub(crate) fn null_value_field_correct_errors(
    mut builder: crate::types::builders::NullValueFieldBuilder,
) -> crate::types::builders::NullValueFieldBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.datatype.is_none() {
        builder.datatype = {
            let builder = crate::types::builders::DatatypeBuilder::default();
            crate::serde_util::datatype_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn sql_alias_correct_errors(mut builder: crate::types::builders::SqlAliasBuilder) -> crate::types::builders::SqlAliasBuilder {
    if builder.from.is_none() {
        builder.from = Some(Default::default())
    }
    if builder.alias.is_none() {
        builder.alias = Some(Default::default())
    }
    builder
}

pub(crate) fn transform_config_parameter_correct_errors(
    mut builder: crate::types::builders::TransformConfigParameterBuilder,
) -> crate::types::builders::TransformConfigParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ParamType>().ok()
    }
    builder
}

pub(crate) fn datatype_correct_errors(mut builder: crate::types::builders::DatatypeBuilder) -> crate::types::builders::DatatypeBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.label.is_none() {
        builder.label = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_value_correct_errors(mut builder: crate::types::builders::FilterValueBuilder) -> crate::types::builders::FilterValueBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FilterValueType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn glue_studio_schema_column_correct_errors(
    mut builder: crate::types::builders::GlueStudioSchemaColumnBuilder,
) -> crate::types::builders::GlueStudioSchemaColumnBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}
