// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_statistic_summary<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::StatisticSummary>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::StatisticSummaryBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "StatisticId" => {
                            builder = builder.set_statistic_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ProfileId" => {
                            builder = builder.set_profile_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RunIdentifier" => {
                            builder = builder.set_run_identifier(crate::protocol_serde::shape_run_identifier::de_run_identifier(tokens)?);
                        }
                        "StatisticName" => {
                            builder = builder.set_statistic_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DoubleValue" => {
                            builder = builder.set_double_value(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "EvaluationLevel" => {
                            builder = builder.set_evaluation_level(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::StatisticEvaluationLevel::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ColumnsReferenced" => {
                            builder = builder.set_columns_referenced(crate::protocol_serde::shape_column_name_list::de_column_name_list(tokens)?);
                        }
                        "ReferencedDatasets" => {
                            builder = builder
                                .set_referenced_datasets(crate::protocol_serde::shape_reference_datasets_list::de_reference_datasets_list(tokens)?);
                        }
                        "StatisticProperties" => {
                            builder = builder.set_statistic_properties(
                                crate::protocol_serde::shape_statistic_properties_map::de_statistic_properties_map(tokens)?,
                            );
                        }
                        "RecordedOn" => {
                            builder = builder.set_recorded_on(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "InclusionAnnotation" => {
                            builder = builder.set_inclusion_annotation(
                                crate::protocol_serde::shape_timestamped_inclusion_annotation::de_timestamped_inclusion_annotation(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
