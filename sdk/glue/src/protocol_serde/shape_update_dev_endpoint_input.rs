// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_dev_endpoint::UpdateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.endpoint_name {
        object.key("EndpointName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.public_key {
        object.key("PublicKey").string(var_2.as_str());
    }
    if let Some(var_3) = &input.add_public_keys {
        let mut array_4 = object.key("AddPublicKeys").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.delete_public_keys {
        let mut array_7 = object.key("DeletePublicKeys").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.custom_libraries {
        #[allow(unused_mut)]
        let mut object_10 = object.key("CustomLibraries").start_object();
        crate::protocol_serde::shape_dev_endpoint_custom_libraries::ser_dev_endpoint_custom_libraries(&mut object_10, var_9)?;
        object_10.finish();
    }
    if input.update_etl_libraries {
        object
            .key("UpdateEtlLibraries")
            .boolean(input.update_etl_libraries);
    }
    if let Some(var_11) = &input.delete_arguments {
        let mut array_12 = object.key("DeleteArguments").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.add_arguments {
        #[allow(unused_mut)]
        let mut object_15 = object.key("AddArguments").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16.as_str()).string(value_17.as_str());
            }
        }
        object_15.finish();
    }
    Ok(())
}
