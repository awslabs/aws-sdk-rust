// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_trigger_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_trigger::CreateTriggerInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.workflow_name {
        object.key("WorkflowName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.r#type {
        object.key("Type").string(var_3.as_str());
    }
    if let Some(var_4) = &input.schedule {
        object.key("Schedule").string(var_4.as_str());
    }
    if let Some(var_5) = &input.predicate {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Predicate").start_object();
        crate::protocol_serde::shape_predicate::ser_predicate(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.actions {
        let mut array_8 = object.key("Actions").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_action::ser_action(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.description {
        object.key("Description").string(var_11.as_str());
    }
    if let Some(var_12) = &input.start_on_creation {
        object.key("StartOnCreation").boolean(*var_12);
    }
    if let Some(var_13) = &input.tags {
        #[allow(unused_mut)]
        let mut object_14 = object.key("Tags").start_object();
        for (key_15, value_16) in var_13 {
            {
                object_14.key(key_15.as_str()).string(value_16.as_str());
            }
        }
        object_14.finish();
    }
    if let Some(var_17) = &input.event_batching_condition {
        #[allow(unused_mut)]
        let mut object_18 = object.key("EventBatchingCondition").start_object();
        crate::protocol_serde::shape_event_batching_condition::ser_event_batching_condition(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}
