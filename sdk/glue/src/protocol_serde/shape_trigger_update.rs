// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_trigger_update(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TriggerUpdate,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.schedule {
        object.key("Schedule").string(var_3.as_str());
    }
    if let Some(var_4) = &input.actions {
        let mut array_5 = object.key("Actions").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_action::ser_action(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.predicate {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Predicate").start_object();
        crate::protocol_serde::shape_predicate::ser_predicate(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.event_batching_condition {
        #[allow(unused_mut)]
        let mut object_11 = object.key("EventBatchingCondition").start_object();
        crate::protocol_serde::shape_event_batching_condition::ser_event_batching_condition(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
