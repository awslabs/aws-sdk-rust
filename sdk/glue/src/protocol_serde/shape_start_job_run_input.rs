// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_job_run_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_job_run::StartJobRunInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.job_name {
        object.key("JobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.job_run_queuing_enabled {
        object.key("JobRunQueuingEnabled").boolean(*var_2);
    }
    if let Some(var_3) = &input.job_run_id {
        object.key("JobRunId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.arguments {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Arguments").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.allocated_capacity {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_11.as_str());
    }
    if let Some(var_12) = &input.notification_property {
        #[allow(unused_mut)]
        let mut object_13 = object.key("NotificationProperty").start_object();
        crate::protocol_serde::shape_notification_property::ser_notification_property(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.worker_type {
        object.key("WorkerType").string(var_14.as_str());
    }
    if let Some(var_15) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.execution_class {
        object.key("ExecutionClass").string(var_16.as_str());
    }
    if let Some(var_17) = &input.execution_role_session_policy {
        object.key("ExecutionRoleSessionPolicy").string(var_17.as_str());
    }
    Ok(())
}
