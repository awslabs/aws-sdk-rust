// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_session::CreateSessionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("Id").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.role {
        object.key("Role").string(var_3.as_str());
    }
    if let Some(var_4) = &input.command {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Command").start_object();
        crate::protocol_serde::shape_session_command::ser_session_command(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.idle_timeout {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.default_arguments {
        #[allow(unused_mut)]
        let mut object_9 = object.key("DefaultArguments").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.connections {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Connections").start_object();
        crate::protocol_serde::shape_connections_list::ser_connections_list(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.worker_type {
        object.key("WorkerType").string(var_16.as_str());
    }
    if let Some(var_17) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_17.as_str());
    }
    if let Some(var_18) = &input.glue_version {
        object.key("GlueVersion").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tags {
        #[allow(unused_mut)]
        let mut object_20 = object.key("Tags").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21.as_str()).string(value_22.as_str());
            }
        }
        object_20.finish();
    }
    if let Some(var_23) = &input.request_origin {
        object.key("RequestOrigin").string(var_23.as_str());
    }
    Ok(())
}
