// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_pii_detection(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PiiDetection,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("Name").string(input.name.as_str());
    }
    {
        let mut array_1 = object.key("Inputs").start_array();
        for item_2 in &input.inputs {
            {
                array_1.value().string(item_2.as_str());
            }
        }
        array_1.finish();
    }
    {
        object.key("PiiType").string(input.pii_type.as_str());
    }
    {
        let mut array_3 = object.key("EntityTypesToDetect").start_array();
        for item_4 in &input.entity_types_to_detect {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.output_column_name {
        object.key("OutputColumnName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.sample_fraction {
        object.key("SampleFraction").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.threshold_fraction {
        object.key("ThresholdFraction").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.mask_value {
        object.key("MaskValue").string(var_8.as_str());
    }
    if let Some(var_9) = &input.redact_text {
        object.key("RedactText").string(var_9.as_str());
    }
    if let Some(var_10) = &input.redact_char {
        object.key("RedactChar").string(var_10.as_str());
    }
    if let Some(var_11) = &input.match_pattern {
        object.key("MatchPattern").string(var_11.as_str());
    }
    if let Some(var_12) = &input.num_left_chars_to_exclude {
        object.key("NumLeftCharsToExclude").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.num_right_chars_to_exclude {
        object.key("NumRightCharsToExclude").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.detection_parameters {
        object.key("DetectionParameters").string(var_14.as_str());
    }
    if let Some(var_15) = &input.detection_sensitivity {
        object.key("DetectionSensitivity").string(var_15.as_str());
    }
    Ok(())
}

pub(crate) fn de_pii_detection<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::PiiDetection>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PiiDetectionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Inputs" => {
                            builder = builder.set_inputs(crate::protocol_serde::shape_one_input::de_one_input(tokens)?);
                        }
                        "PiiType" => {
                            builder = builder.set_pii_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PiiType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "EntityTypesToDetect" => {
                            builder = builder.set_entity_types_to_detect(
                                crate::protocol_serde::shape_enclosed_in_string_properties::de_enclosed_in_string_properties(tokens)?,
                            );
                        }
                        "OutputColumnName" => {
                            builder = builder.set_output_column_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SampleFraction" => {
                            builder = builder.set_sample_fraction(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "ThresholdFraction" => {
                            builder = builder.set_threshold_fraction(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "MaskValue" => {
                            builder = builder.set_mask_value(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RedactText" => {
                            builder = builder.set_redact_text(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RedactChar" => {
                            builder = builder.set_redact_char(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MatchPattern" => {
                            builder = builder.set_match_pattern(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "NumLeftCharsToExclude" => {
                            builder = builder.set_num_left_chars_to_exclude(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "NumRightCharsToExclude" => {
                            builder = builder.set_num_right_chars_to_exclude(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "DetectionParameters" => {
                            builder = builder.set_detection_parameters(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DetectionSensitivity" => {
                            builder = builder.set_detection_sensitivity(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::pii_detection_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
