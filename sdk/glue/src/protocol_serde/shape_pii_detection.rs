// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_pii_detection(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PiiDetection,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.inputs {
        let mut array_3 = object.key("Inputs").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.pii_type {
        object.key("PiiType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.entity_types_to_detect {
        let mut array_7 = object.key("EntityTypesToDetect").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.output_column_name {
        object.key("OutputColumnName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.sample_fraction {
        object.key("SampleFraction").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.threshold_fraction {
        object.key("ThresholdFraction").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.mask_value {
        object.key("MaskValue").string(var_12.as_str());
    }
    Ok(())
}

pub(crate) fn de_pii_detection<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::PiiDetection>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PiiDetectionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Name" => {
                                builder = builder.set_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Inputs" => {
                                builder = builder.set_inputs(
                                    crate::protocol_serde::shape_one_input::de_one_input(tokens)?,
                                );
                            }
                            "PiiType" => {
                                builder = builder.set_pii_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::PiiType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "EntityTypesToDetect" => {
                                builder = builder.set_entity_types_to_detect(
                                    crate::protocol_serde::shape_enclosed_in_string_properties::de_enclosed_in_string_properties(tokens)?
                                );
                            }
                            "OutputColumnName" => {
                                builder = builder.set_output_column_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SampleFraction" => {
                                builder = builder.set_sample_fraction(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "ThresholdFraction" => {
                                builder = builder.set_threshold_fraction(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "MaskValue" => {
                                builder = builder.set_mask_value(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
