// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_s3_parquet_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::S3ParquetSource,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.paths {
        let mut array_3 = object.key("Paths").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.compression_type {
        object.key("CompressionType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.exclusions {
        let mut array_7 = object.key("Exclusions").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.group_size {
        object.key("GroupSize").string(var_9.as_str());
    }
    if let Some(var_10) = &input.group_files {
        object.key("GroupFiles").string(var_10.as_str());
    }
    if let Some(var_11) = &input.recurse {
        object.key("Recurse").boolean(*var_11);
    }
    if let Some(var_12) = &input.max_band {
        object.key("MaxBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_15 = object.key("AdditionalOptions").start_object();
        crate::protocol_serde::shape_s3_direct_source_additional_options::ser_s3_direct_source_additional_options(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.output_schemas {
        let mut array_17 = object.key("OutputSchemas").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_glue_schema::ser_glue_schema(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}

pub(crate) fn de_s3_parquet_source<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::S3ParquetSource>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::S3ParquetSourceBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Name" => {
                                builder = builder.set_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Paths" => {
                                builder = builder.set_paths(
                                    crate::protocol_serde::shape_enclosed_in_string_properties::de_enclosed_in_string_properties(tokens)?
                                );
                            }
                            "CompressionType" => {
                                builder = builder.set_compression_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ParquetCompressionType::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "Exclusions" => {
                                builder = builder.set_exclusions(
                                    crate::protocol_serde::shape_enclosed_in_string_properties::de_enclosed_in_string_properties(tokens)?
                                );
                            }
                            "GroupSize" => {
                                builder = builder.set_group_size(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "GroupFiles" => {
                                builder = builder.set_group_files(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Recurse" => {
                                builder = builder.set_recurse(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "MaxBand" => {
                                builder = builder.set_max_band(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "MaxFilesInBand" => {
                                builder = builder.set_max_files_in_band(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "AdditionalOptions" => {
                                builder = builder.set_additional_options(
                                    crate::protocol_serde::shape_s3_direct_source_additional_options::de_s3_direct_source_additional_options(tokens)?
                                );
                            }
                            "OutputSchemas" => {
                                builder = builder.set_output_schemas(
                                    crate::protocol_serde::shape_glue_schemas::de_glue_schemas(
                                        tokens,
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
