// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_ml_transform::CreateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.input_record_tables {
        let mut array_4 = object.key("InputRecordTables").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_glue_table::ser_glue_table(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Parameters").start_object();
        crate::protocol_serde::shape_transform_parameters::ser_transform_parameters(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.role {
        object.key("Role").string(var_9.as_str());
    }
    if let Some(var_10) = &input.glue_version {
        object.key("GlueVersion").string(var_10.as_str());
    }
    if let Some(var_11) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.worker_type {
        object.key("WorkerType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.tags {
        #[allow(unused_mut)]
        let mut object_17 = object.key("Tags").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    if let Some(var_20) = &input.transform_encryption {
        #[allow(unused_mut)]
        let mut object_21 = object.key("TransformEncryption").start_object();
        crate::protocol_serde::shape_transform_encryption::ser_transform_encryption(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    Ok(())
}
