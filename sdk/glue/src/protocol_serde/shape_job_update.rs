// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_job_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::JobUpdate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.log_uri {
        object.key("LogUri").string(var_2.as_str());
    }
    if let Some(var_3) = &input.role {
        object.key("Role").string(var_3.as_str());
    }
    if let Some(var_4) = &input.execution_property {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ExecutionProperty").start_object();
        crate::protocol_serde::shape_execution_property::ser_execution_property(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.command {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Command").start_object();
        crate::protocol_serde::shape_job_command::ser_job_command(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.default_arguments {
        #[allow(unused_mut)]
        let mut object_9 = object.key("DefaultArguments").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.non_overridable_arguments {
        #[allow(unused_mut)]
        let mut object_13 = object.key("NonOverridableArguments").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if let Some(var_16) = &input.connections {
        #[allow(unused_mut)]
        let mut object_17 = object.key("Connections").start_object();
        crate::protocol_serde::shape_connections_list::ser_connections_list(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_18) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.worker_type {
        object.key("WorkerType").string(var_20.as_str());
    }
    if let Some(var_21) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_21).into()),
        );
    }
    if let Some(var_22) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_22.as_str());
    }
    if let Some(var_23) = &input.notification_property {
        #[allow(unused_mut)]
        let mut object_24 = object.key("NotificationProperty").start_object();
        crate::protocol_serde::shape_notification_property::ser_notification_property(
            &mut object_24,
            var_23,
        )?;
        object_24.finish();
    }
    if let Some(var_25) = &input.glue_version {
        object.key("GlueVersion").string(var_25.as_str());
    }
    if let Some(var_26) = &input.code_gen_configuration_nodes {
        #[allow(unused_mut)]
        let mut object_27 = object.key("CodeGenConfigurationNodes").start_object();
        for (key_28, value_29) in var_26 {
            {
                #[allow(unused_mut)]
                let mut object_30 = object_27.key(key_28.as_str()).start_object();
                crate::protocol_serde::shape_code_gen_configuration_node::ser_code_gen_configuration_node(&mut object_30, value_29)?;
                object_30.finish();
            }
        }
        object_27.finish();
    }
    if let Some(var_31) = &input.execution_class {
        object.key("ExecutionClass").string(var_31.as_str());
    }
    if let Some(var_32) = &input.source_control_details {
        #[allow(unused_mut)]
        let mut object_33 = object.key("SourceControlDetails").start_object();
        crate::protocol_serde::shape_source_control_details::ser_source_control_details(
            &mut object_33,
            var_32,
        )?;
        object_33.finish();
    }
    Ok(())
}
