// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_snowflake_node_data(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SnowflakeNodeData,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.source_type {
        object.key("SourceType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.connection {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Connection").start_object();
        crate::protocol_serde::shape_option::ser_option(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.schema {
        object.key("Schema").string(var_4.as_str());
    }
    if let Some(var_5) = &input.table {
        object.key("Table").string(var_5.as_str());
    }
    if let Some(var_6) = &input.database {
        object.key("Database").string(var_6.as_str());
    }
    if let Some(var_7) = &input.temp_dir {
        object.key("TempDir").string(var_7.as_str());
    }
    if let Some(var_8) = &input.iam_role {
        #[allow(unused_mut)]
        let mut object_9 = object.key("IamRole").start_object();
        crate::protocol_serde::shape_option::ser_option(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_11 = object.key("AdditionalOptions").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    if let Some(var_14) = &input.sample_query {
        object.key("SampleQuery").string(var_14.as_str());
    }
    if let Some(var_15) = &input.pre_action {
        object.key("PreAction").string(var_15.as_str());
    }
    if let Some(var_16) = &input.post_action {
        object.key("PostAction").string(var_16.as_str());
    }
    if let Some(var_17) = &input.action {
        object.key("Action").string(var_17.as_str());
    }
    if input.upsert {
        object.key("Upsert").boolean(input.upsert);
    }
    if let Some(var_18) = &input.merge_action {
        object.key("MergeAction").string(var_18.as_str());
    }
    if let Some(var_19) = &input.merge_when_matched {
        object.key("MergeWhenMatched").string(var_19.as_str());
    }
    if let Some(var_20) = &input.merge_when_not_matched {
        object.key("MergeWhenNotMatched").string(var_20.as_str());
    }
    if let Some(var_21) = &input.merge_clause {
        object.key("MergeClause").string(var_21.as_str());
    }
    if let Some(var_22) = &input.staging_table {
        object.key("StagingTable").string(var_22.as_str());
    }
    if let Some(var_23) = &input.selected_columns {
        let mut array_24 = object.key("SelectedColumns").start_array();
        for item_25 in var_23 {
            {
                #[allow(unused_mut)]
                let mut object_26 = array_24.value().start_object();
                crate::protocol_serde::shape_option::ser_option(&mut object_26, item_25)?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if input.auto_pushdown {
        object.key("AutoPushdown").boolean(input.auto_pushdown);
    }
    if let Some(var_27) = &input.table_schema {
        let mut array_28 = object.key("TableSchema").start_array();
        for item_29 in var_27 {
            {
                #[allow(unused_mut)]
                let mut object_30 = array_28.value().start_object();
                crate::protocol_serde::shape_option::ser_option(&mut object_30, item_29)?;
                object_30.finish();
            }
        }
        array_28.finish();
    }
    Ok(())
}

pub(crate) fn de_snowflake_node_data<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::SnowflakeNodeData>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SnowflakeNodeDataBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "SourceType" => {
                            builder = builder.set_source_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Connection" => {
                            builder = builder.set_connection(crate::protocol_serde::shape_option::de_option(tokens)?);
                        }
                        "Schema" => {
                            builder = builder.set_schema(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Table" => {
                            builder = builder.set_table(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Database" => {
                            builder = builder.set_database(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "TempDir" => {
                            builder = builder.set_temp_dir(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "IamRole" => {
                            builder = builder.set_iam_role(crate::protocol_serde::shape_option::de_option(tokens)?);
                        }
                        "AdditionalOptions" => {
                            builder = builder.set_additional_options(crate::protocol_serde::shape_additional_options::de_additional_options(tokens)?);
                        }
                        "SampleQuery" => {
                            builder = builder.set_sample_query(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PreAction" => {
                            builder = builder.set_pre_action(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PostAction" => {
                            builder = builder.set_post_action(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Action" => {
                            builder = builder.set_action(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Upsert" => {
                            builder = builder.set_upsert(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "MergeAction" => {
                            builder = builder.set_merge_action(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MergeWhenMatched" => {
                            builder = builder.set_merge_when_matched(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MergeWhenNotMatched" => {
                            builder = builder.set_merge_when_not_matched(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MergeClause" => {
                            builder = builder.set_merge_clause(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "StagingTable" => {
                            builder = builder.set_staging_table(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SelectedColumns" => {
                            builder = builder.set_selected_columns(crate::protocol_serde::shape_option_list::de_option_list(tokens)?);
                        }
                        "AutoPushdown" => {
                            builder = builder.set_auto_pushdown(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "TableSchema" => {
                            builder = builder.set_table_schema(crate::protocol_serde::shape_option_list::de_option_list(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
