// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_dev_endpoint_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_dev_endpoint::CreateDevEndpointInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.endpoint_name {
        object.key("EndpointName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.role_arn {
        object.key("RoleArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.security_group_ids {
        let mut array_4 = object.key("SecurityGroupIds").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.subnet_id {
        object.key("SubnetId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.public_key {
        object.key("PublicKey").string(var_7.as_str());
    }
    if let Some(var_8) = &input.public_keys {
        let mut array_9 = object.key("PublicKeys").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.number_of_nodes {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.worker_type {
        object.key("WorkerType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.glue_version {
        object.key("GlueVersion").string(var_13.as_str());
    }
    if let Some(var_14) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_15.as_str());
    }
    if let Some(var_16) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_16.as_str());
    }
    if let Some(var_17) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_17.as_str());
    }
    if let Some(var_18) = &input.tags {
        #[allow(unused_mut)]
        let mut object_19 = object.key("Tags").start_object();
        for (key_20, value_21) in var_18 {
            {
                object_19.key(key_20.as_str()).string(value_21.as_str());
            }
        }
        object_19.finish();
    }
    if let Some(var_22) = &input.arguments {
        #[allow(unused_mut)]
        let mut object_23 = object.key("Arguments").start_object();
        for (key_24, value_25) in var_22 {
            {
                object_23.key(key_24.as_str()).string(value_25.as_str());
            }
        }
        object_23.finish();
    }
    Ok(())
}
