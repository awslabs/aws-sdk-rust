// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_transform_filter_criteria(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TransformFilterCriteria,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.transform_type {
        object.key("TransformType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.status {
        object.key("Status").string(var_3.as_str());
    }
    if let Some(var_4) = &input.glue_version {
        object.key("GlueVersion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_5, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_6) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_6, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_7) = &input.last_modified_before {
        object
            .key("LastModifiedBefore")
            .date_time(var_7, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_8) = &input.last_modified_after {
        object
            .key("LastModifiedAfter")
            .date_time(var_8, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_9) = &input.schema {
        let mut array_10 = object.key("Schema").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_schema_column::ser_schema_column(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}
