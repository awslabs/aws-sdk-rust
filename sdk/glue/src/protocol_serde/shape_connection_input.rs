// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ConnectionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.connection_type {
        object.key("ConnectionType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.match_criteria {
        let mut array_5 = object.key("MatchCriteria").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.connection_properties {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ConnectionProperties").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.physical_connection_requirements {
        #[allow(unused_mut)]
        let mut object_12 = object.key("PhysicalConnectionRequirements").start_object();
        crate::protocol_serde::shape_physical_connection_requirements::ser_physical_connection_requirements(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
