// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_job::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.log_uri {
        object.key("LogUri").string(var_3.as_str());
    }
    if let Some(var_4) = &input.role {
        object.key("Role").string(var_4.as_str());
    }
    if let Some(var_5) = &input.execution_property {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ExecutionProperty").start_object();
        crate::protocol_serde::shape_execution_property::ser_execution_property(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.command {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Command").start_object();
        crate::protocol_serde::shape_job_command::ser_job_command(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.default_arguments {
        #[allow(unused_mut)]
        let mut object_10 = object.key("DefaultArguments").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.non_overridable_arguments {
        #[allow(unused_mut)]
        let mut object_14 = object.key("NonOverridableArguments").start_object();
        for (key_15, value_16) in var_13 {
            {
                object_14.key(key_15.as_str()).string(value_16.as_str());
            }
        }
        object_14.finish();
    }
    if let Some(var_17) = &input.connections {
        #[allow(unused_mut)]
        let mut object_18 = object.key("Connections").start_object();
        crate::protocol_serde::shape_connections_list::ser_connections_list(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_19) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_20).into()),
        );
    }
    if let Some(var_21) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_21.as_str());
    }
    if let Some(var_22) = &input.tags {
        #[allow(unused_mut)]
        let mut object_23 = object.key("Tags").start_object();
        for (key_24, value_25) in var_22 {
            {
                object_23.key(key_24.as_str()).string(value_25.as_str());
            }
        }
        object_23.finish();
    }
    if let Some(var_26) = &input.notification_property {
        #[allow(unused_mut)]
        let mut object_27 = object.key("NotificationProperty").start_object();
        crate::protocol_serde::shape_notification_property::ser_notification_property(
            &mut object_27,
            var_26,
        )?;
        object_27.finish();
    }
    if let Some(var_28) = &input.glue_version {
        object.key("GlueVersion").string(var_28.as_str());
    }
    if let Some(var_29) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_29).into()),
        );
    }
    if let Some(var_30) = &input.worker_type {
        object.key("WorkerType").string(var_30.as_str());
    }
    if let Some(var_31) = &input.code_gen_configuration_nodes {
        #[allow(unused_mut)]
        let mut object_32 = object.key("CodeGenConfigurationNodes").start_object();
        for (key_33, value_34) in var_31 {
            {
                #[allow(unused_mut)]
                let mut object_35 = object_32.key(key_33.as_str()).start_object();
                crate::protocol_serde::shape_code_gen_configuration_node::ser_code_gen_configuration_node(&mut object_35, value_34)?;
                object_35.finish();
            }
        }
        object_32.finish();
    }
    if let Some(var_36) = &input.execution_class {
        object.key("ExecutionClass").string(var_36.as_str());
    }
    if let Some(var_37) = &input.source_control_details {
        #[allow(unused_mut)]
        let mut object_38 = object.key("SourceControlDetails").start_object();
        crate::protocol_serde::shape_source_control_details::ser_source_control_details(
            &mut object_38,
            var_37,
        )?;
        object_38.finish();
    }
    Ok(())
}
