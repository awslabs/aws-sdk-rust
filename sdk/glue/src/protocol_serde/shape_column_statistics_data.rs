// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_column_statistics_data(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ColumnStatisticsData,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("Type").string(input.r#type.as_str());
    }
    if let Some(var_1) = &input.boolean_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_2 = object.key("BooleanColumnStatisticsData").start_object();
        crate::protocol_serde::shape_boolean_column_statistics_data::ser_boolean_column_statistics_data(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.date_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_4 = object.key("DateColumnStatisticsData").start_object();
        crate::protocol_serde::shape_date_column_statistics_data::ser_date_column_statistics_data(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.decimal_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_6 = object.key("DecimalColumnStatisticsData").start_object();
        crate::protocol_serde::shape_decimal_column_statistics_data::ser_decimal_column_statistics_data(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.double_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_8 = object.key("DoubleColumnStatisticsData").start_object();
        crate::protocol_serde::shape_double_column_statistics_data::ser_double_column_statistics_data(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.long_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_10 = object.key("LongColumnStatisticsData").start_object();
        crate::protocol_serde::shape_long_column_statistics_data::ser_long_column_statistics_data(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.string_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_12 = object.key("StringColumnStatisticsData").start_object();
        crate::protocol_serde::shape_string_column_statistics_data::ser_string_column_statistics_data(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.binary_column_statistics_data {
        #[allow(unused_mut)]
        let mut object_14 = object.key("BinaryColumnStatisticsData").start_object();
        crate::protocol_serde::shape_binary_column_statistics_data::ser_binary_column_statistics_data(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}

pub(crate) fn de_column_statistics_data<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ColumnStatisticsData>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ColumnStatisticsDataBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Type" => {
                            builder = builder.set_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ColumnStatisticsType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "BooleanColumnStatisticsData" => {
                            builder = builder.set_boolean_column_statistics_data(
                                crate::protocol_serde::shape_boolean_column_statistics_data::de_boolean_column_statistics_data(tokens)?,
                            );
                        }
                        "DateColumnStatisticsData" => {
                            builder = builder.set_date_column_statistics_data(
                                crate::protocol_serde::shape_date_column_statistics_data::de_date_column_statistics_data(tokens)?,
                            );
                        }
                        "DecimalColumnStatisticsData" => {
                            builder = builder.set_decimal_column_statistics_data(
                                crate::protocol_serde::shape_decimal_column_statistics_data::de_decimal_column_statistics_data(tokens)?,
                            );
                        }
                        "DoubleColumnStatisticsData" => {
                            builder = builder.set_double_column_statistics_data(
                                crate::protocol_serde::shape_double_column_statistics_data::de_double_column_statistics_data(tokens)?,
                            );
                        }
                        "LongColumnStatisticsData" => {
                            builder = builder.set_long_column_statistics_data(
                                crate::protocol_serde::shape_long_column_statistics_data::de_long_column_statistics_data(tokens)?,
                            );
                        }
                        "StringColumnStatisticsData" => {
                            builder = builder.set_string_column_statistics_data(
                                crate::protocol_serde::shape_string_column_statistics_data::de_string_column_statistics_data(tokens)?,
                            );
                        }
                        "BinaryColumnStatisticsData" => {
                            builder = builder.set_binary_column_statistics_data(
                                crate::protocol_serde::shape_binary_column_statistics_data::de_binary_column_statistics_data(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::column_statistics_data_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
