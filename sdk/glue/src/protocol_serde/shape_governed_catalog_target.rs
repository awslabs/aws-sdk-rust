// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_governed_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::GovernedCatalogTarget,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.inputs {
        let mut array_3 = object.key("Inputs").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.partition_keys {
        let mut array_6 = object.key("PartitionKeys").start_array();
        for item_7 in var_5 {
            {
                let mut array_8 = array_6.value().start_array();
                for item_9 in item_7 {
                    {
                        array_8.value().string(item_9.as_str());
                    }
                }
                array_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_10) = &input.table {
        object.key("Table").string(var_10.as_str());
    }
    if let Some(var_11) = &input.database {
        object.key("Database").string(var_11.as_str());
    }
    if let Some(var_12) = &input.schema_change_policy {
        #[allow(unused_mut)]
        let mut object_13 = object.key("SchemaChangePolicy").start_object();
        crate::protocol_serde::shape_catalog_schema_change_policy::ser_catalog_schema_change_policy(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}

pub(crate) fn de_governed_catalog_target<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::GovernedCatalogTarget>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::GovernedCatalogTargetBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Name" => {
                                builder = builder.set_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Inputs" => {
                                builder = builder.set_inputs(
                                    crate::protocol_serde::shape_one_input::de_one_input(tokens)?,
                                );
                            }
                            "PartitionKeys" => {
                                builder = builder.set_partition_keys(
                                    crate::protocol_serde::shape_glue_studio_path_list::de_glue_studio_path_list(tokens)?
                                );
                            }
                            "Table" => {
                                builder = builder.set_table(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Database" => {
                                builder = builder.set_database(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SchemaChangePolicy" => {
                                builder = builder.set_schema_change_policy(
                                    crate::protocol_serde::shape_catalog_schema_change_policy::de_catalog_schema_change_policy(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
