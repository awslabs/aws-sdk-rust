// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_plan::GetPlanInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.mapping {
        let mut array_2 = object.key("Mapping").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_mapping_entry::ser_mapping_entry(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.source {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Source").start_object();
        crate::protocol_serde::shape_catalog_entry::ser_catalog_entry(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.sinks {
        let mut array_8 = object.key("Sinks").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_catalog_entry::ser_catalog_entry(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.location {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Location").start_object();
        crate::protocol_serde::shape_location::ser_location(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.language {
        object.key("Language").string(var_13.as_str());
    }
    if let Some(var_14) = &input.additional_plan_options_map {
        #[allow(unused_mut)]
        let mut object_15 = object.key("AdditionalPlanOptionsMap").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16.as_str()).string(value_17.as_str());
            }
        }
        object_15.finish();
    }
    Ok(())
}
