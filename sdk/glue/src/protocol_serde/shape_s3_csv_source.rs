// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_s3_csv_source(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::S3CsvSource,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("Name").string(input.name.as_str());
    }
    {
        let mut array_1 = object.key("Paths").start_array();
        for item_2 in &input.paths {
            {
                array_1.value().string(item_2.as_str());
            }
        }
        array_1.finish();
    }
    if let Some(var_3) = &input.compression_type {
        object.key("CompressionType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.exclusions {
        let mut array_5 = object.key("Exclusions").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.group_size {
        object.key("GroupSize").string(var_7.as_str());
    }
    if let Some(var_8) = &input.group_files {
        object.key("GroupFiles").string(var_8.as_str());
    }
    if let Some(var_9) = &input.recurse {
        object.key("Recurse").boolean(*var_9);
    }
    if let Some(var_10) = &input.max_band {
        object.key("MaxBand").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.additional_options {
        #[allow(unused_mut)]
        let mut object_13 = object.key("AdditionalOptions").start_object();
        crate::protocol_serde::shape_s3_direct_source_additional_options::ser_s3_direct_source_additional_options(&mut object_13, var_12)?;
        object_13.finish();
    }
    {
        object.key("Separator").string(input.separator.as_str());
    }
    if let Some(var_14) = &input.escaper {
        object.key("Escaper").string(var_14.as_str());
    }
    {
        object.key("QuoteChar").string(input.quote_char.as_str());
    }
    if let Some(var_15) = &input.multiline {
        object.key("Multiline").boolean(*var_15);
    }
    if let Some(var_16) = &input.with_header {
        object.key("WithHeader").boolean(*var_16);
    }
    if let Some(var_17) = &input.write_header {
        object.key("WriteHeader").boolean(*var_17);
    }
    if let Some(var_18) = &input.skip_first {
        object.key("SkipFirst").boolean(*var_18);
    }
    if input.optimize_performance {
        object.key("OptimizePerformance").boolean(input.optimize_performance);
    }
    if let Some(var_19) = &input.output_schemas {
        let mut array_20 = object.key("OutputSchemas").start_array();
        for item_21 in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::protocol_serde::shape_glue_schema::ser_glue_schema(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    Ok(())
}

pub(crate) fn de_s3_csv_source<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::S3CsvSource>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::S3CsvSourceBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Paths" => {
                            builder = builder
                                .set_paths(crate::protocol_serde::shape_enclosed_in_string_properties::de_enclosed_in_string_properties(tokens)?);
                        }
                        "CompressionType" => {
                            builder = builder.set_compression_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CompressionType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Exclusions" => {
                            builder = builder.set_exclusions(
                                crate::protocol_serde::shape_enclosed_in_string_properties::de_enclosed_in_string_properties(tokens)?,
                            );
                        }
                        "GroupSize" => {
                            builder = builder.set_group_size(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "GroupFiles" => {
                            builder = builder.set_group_files(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Recurse" => {
                            builder = builder.set_recurse(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "MaxBand" => {
                            builder = builder.set_max_band(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "MaxFilesInBand" => {
                            builder = builder.set_max_files_in_band(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "AdditionalOptions" => {
                            builder = builder.set_additional_options(
                                crate::protocol_serde::shape_s3_direct_source_additional_options::de_s3_direct_source_additional_options(tokens)?,
                            );
                        }
                        "Separator" => {
                            builder = builder.set_separator(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Separator::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Escaper" => {
                            builder = builder.set_escaper(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "QuoteChar" => {
                            builder = builder.set_quote_char(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::QuoteChar::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Multiline" => {
                            builder = builder.set_multiline(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "WithHeader" => {
                            builder = builder.set_with_header(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "WriteHeader" => {
                            builder = builder.set_write_header(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "SkipFirst" => {
                            builder = builder.set_skip_first(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "OptimizePerformance" => {
                            builder = builder.set_optimize_performance(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "OutputSchemas" => {
                            builder = builder.set_output_schemas(crate::protocol_serde::shape_glue_schemas::de_glue_schemas(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::s3_csv_source_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
