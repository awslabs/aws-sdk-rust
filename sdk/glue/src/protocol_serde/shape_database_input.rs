// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_database_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::DatabaseInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("Name").string(input.name.as_str());
    }
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.location_uri {
        object.key("LocationUri").string(var_2.as_str());
    }
    if let Some(var_3) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Parameters").start_object();
        for (key_5, value_6) in var_3 {
            {
                object_4.key(key_5.as_str()).string(value_6.as_str());
            }
        }
        object_4.finish();
    }
    if let Some(var_7) = &input.create_table_default_permissions {
        let mut array_8 = object.key("CreateTableDefaultPermissions").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_principal_permissions::ser_principal_permissions(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.target_database {
        #[allow(unused_mut)]
        let mut object_12 = object.key("TargetDatabase").start_object();
        crate::protocol_serde::shape_database_identifier::ser_database_identifier(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.federated_database {
        #[allow(unused_mut)]
        let mut object_14 = object.key("FederatedDatabase").start_object();
        crate::protocol_serde::shape_federated_database::ser_federated_database(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}
