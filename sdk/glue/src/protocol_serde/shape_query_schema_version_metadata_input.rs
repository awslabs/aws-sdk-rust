// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_query_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::query_schema_version_metadata::QuerySchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.schema_id {
        #[allow(unused_mut)]
        let mut object_2 = object.key("SchemaId").start_object();
        crate::protocol_serde::shape_schema_id::ser_schema_id(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.schema_version_number {
        #[allow(unused_mut)]
        let mut object_4 = object.key("SchemaVersionNumber").start_object();
        crate::protocol_serde::shape_schema_version_number::ser_schema_version_number(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.metadata_list {
        let mut array_7 = object.key("MetadataList").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_metadata_key_value_pair::ser_metadata_key_value_pair(
                    &mut object_9,
                    item_8,
                )?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_10) = &input.next_token {
        object.key("NextToken").string(var_10.as_str());
    }
    Ok(())
}
