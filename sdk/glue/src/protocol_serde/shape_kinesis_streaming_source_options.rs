// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_kinesis_streaming_source_options(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::KinesisStreamingSourceOptions,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.endpoint_url {
        object.key("EndpointUrl").string(var_1.as_str());
    }
    if let Some(var_2) = &input.stream_name {
        object.key("StreamName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.classification {
        object.key("Classification").string(var_3.as_str());
    }
    if let Some(var_4) = &input.delimiter {
        object.key("Delimiter").string(var_4.as_str());
    }
    if let Some(var_5) = &input.starting_position {
        object.key("StartingPosition").string(var_5.as_str());
    }
    if let Some(var_6) = &input.max_fetch_time_in_ms {
        object.key("MaxFetchTimeInMs").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.max_fetch_records_per_shard {
        object.key("MaxFetchRecordsPerShard").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.max_record_per_read {
        object.key("MaxRecordPerRead").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.add_idle_time_between_reads {
        object.key("AddIdleTimeBetweenReads").boolean(*var_9);
    }
    if let Some(var_10) = &input.idle_time_between_reads_in_ms {
        object.key("IdleTimeBetweenReadsInMs").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.describe_shard_interval {
        object.key("DescribeShardInterval").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.num_retries {
        object.key("NumRetries").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.retry_interval_ms {
        object.key("RetryIntervalMs").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.max_retry_interval_ms {
        object.key("MaxRetryIntervalMs").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.avoid_empty_batches {
        object.key("AvoidEmptyBatches").boolean(*var_15);
    }
    if let Some(var_16) = &input.stream_arn {
        object.key("StreamArn").string(var_16.as_str());
    }
    if let Some(var_17) = &input.role_arn {
        object.key("RoleArn").string(var_17.as_str());
    }
    if let Some(var_18) = &input.role_session_name {
        object.key("RoleSessionName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.add_record_timestamp {
        object.key("AddRecordTimestamp").string(var_19.as_str());
    }
    if let Some(var_20) = &input.emit_consumer_lag_metrics {
        object.key("EmitConsumerLagMetrics").string(var_20.as_str());
    }
    if let Some(var_21) = &input.starting_timestamp {
        object
            .key("StartingTimestamp")
            .date_time(var_21, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

pub(crate) fn de_kinesis_streaming_source_options<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::KinesisStreamingSourceOptions>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::KinesisStreamingSourceOptionsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "EndpointUrl" => {
                            builder = builder.set_endpoint_url(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "StreamName" => {
                            builder = builder.set_stream_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Classification" => {
                            builder = builder.set_classification(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Delimiter" => {
                            builder = builder.set_delimiter(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "StartingPosition" => {
                            builder = builder.set_starting_position(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::StartingPosition::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "MaxFetchTimeInMs" => {
                            builder = builder.set_max_fetch_time_in_ms(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "MaxFetchRecordsPerShard" => {
                            builder = builder.set_max_fetch_records_per_shard(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "MaxRecordPerRead" => {
                            builder = builder.set_max_record_per_read(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "AddIdleTimeBetweenReads" => {
                            builder =
                                builder.set_add_idle_time_between_reads(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IdleTimeBetweenReadsInMs" => {
                            builder = builder.set_idle_time_between_reads_in_ms(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "DescribeShardInterval" => {
                            builder = builder.set_describe_shard_interval(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "NumRetries" => {
                            builder = builder.set_num_retries(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "RetryIntervalMs" => {
                            builder = builder.set_retry_interval_ms(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "MaxRetryIntervalMs" => {
                            builder = builder.set_max_retry_interval_ms(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "AvoidEmptyBatches" => {
                            builder = builder.set_avoid_empty_batches(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "StreamArn" => {
                            builder = builder.set_stream_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RoleArn" => {
                            builder = builder.set_role_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "RoleSessionName" => {
                            builder = builder.set_role_session_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AddRecordTimestamp" => {
                            builder = builder.set_add_record_timestamp(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EmitConsumerLagMetrics" => {
                            builder = builder.set_emit_consumer_lag_metrics(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "StartingTimestamp" => {
                            builder = builder.set_starting_timestamp(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::DateTimeWithOffset,
                            )?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
