// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1);
    }
    if let Some(var_2) = &input.database_name {
        object.key("DatabaseName").string(var_2);
    }
    if let Some(var_3) = &input.table_name {
        object.key("TableName").string(var_3);
    }
    if let Some(var_4) = &input.partition_input_list {
        let mut array_5 = object.key("PartitionInputList").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_input(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.catalog_id {
        object.key("CatalogId").string(var_8);
    }
    if let Some(var_9) = &input.connection_name_list {
        let mut array_10 = object.key("ConnectionNameList").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11);
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.catalog_id {
        object.key("CatalogId").string(var_12);
    }
    if let Some(var_13) = &input.database_name {
        object.key("DatabaseName").string(var_13);
    }
    if let Some(var_14) = &input.table_name {
        object.key("TableName").string(var_14);
    }
    if let Some(var_15) = &input.partitions_to_delete {
        let mut array_16 = object.key("PartitionsToDelete").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.catalog_id {
        object.key("CatalogId").string(var_19);
    }
    if let Some(var_20) = &input.database_name {
        object.key("DatabaseName").string(var_20);
    }
    if let Some(var_21) = &input.tables_to_delete {
        let mut array_22 = object.key("TablesToDelete").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23);
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.transaction_id {
        object.key("TransactionId").string(var_24);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.catalog_id {
        object.key("CatalogId").string(var_25);
    }
    if let Some(var_26) = &input.database_name {
        object.key("DatabaseName").string(var_26);
    }
    if let Some(var_27) = &input.table_name {
        object.key("TableName").string(var_27);
    }
    if let Some(var_28) = &input.version_ids {
        let mut array_29 = object.key("VersionIds").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30);
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.names {
        let mut array_32 = object.key("Names").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33);
            }
        }
        array_32.finish();
    }
    if let Some(var_34) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_34);
    }
    if let Some(var_35) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_35);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.crawler_names {
        let mut array_37 = object.key("CrawlerNames").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38);
            }
        }
        array_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.dev_endpoint_names {
        let mut array_40 = object.key("DevEndpointNames").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41);
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.job_names {
        let mut array_43 = object.key("JobNames").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44);
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.catalog_id {
        object.key("CatalogId").string(var_45);
    }
    if let Some(var_46) = &input.database_name {
        object.key("DatabaseName").string(var_46);
    }
    if let Some(var_47) = &input.table_name {
        object.key("TableName").string(var_47);
    }
    if let Some(var_48) = &input.partitions_to_get {
        let mut array_49 = object.key("PartitionsToGet").start_array();
        for item_50 in var_48 {
            {
                let mut object_51 = array_49.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_51,
                    item_50,
                )?;
                object_51.finish();
            }
        }
        array_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.trigger_names {
        let mut array_53 = object.key("TriggerNames").start_array();
        for item_54 in var_52 {
            {
                array_53.value().string(item_54);
            }
        }
        array_53.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.names {
        let mut array_56 = object.key("Names").start_array();
        for item_57 in var_55 {
            {
                array_56.value().string(item_57);
            }
        }
        array_56.finish();
    }
    if let Some(var_58) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_58);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_stop_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchStopJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.job_name {
        object.key("JobName").string(var_59);
    }
    if let Some(var_60) = &input.job_run_ids {
        let mut array_61 = object.key("JobRunIds").start_array();
        for item_62 in var_60 {
            {
                array_61.value().string(item_62);
            }
        }
        array_61.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.catalog_id {
        object.key("CatalogId").string(var_63);
    }
    if let Some(var_64) = &input.database_name {
        object.key("DatabaseName").string(var_64);
    }
    if let Some(var_65) = &input.table_name {
        object.key("TableName").string(var_65);
    }
    if let Some(var_66) = &input.entries {
        let mut array_67 = object.key("Entries").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_update_partition_request_entry(&mut object_69, item_68)?;
                object_69.finish();
            }
        }
        array_67.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.transform_id {
        object.key("TransformId").string(var_70);
    }
    if let Some(var_71) = &input.task_run_id {
        object.key("TaskRunId").string(var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_check_schema_version_validity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckSchemaVersionValidityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.data_format {
        object.key("DataFormat").string(var_72.as_str());
    }
    if let Some(var_73) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_73);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.name {
        object.key("Name").string(var_74);
    }
    if let Some(var_75) = &input.description {
        object.key("Description").string(var_75);
    }
    if let Some(var_76) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_76);
    }
    if let Some(var_77) = &input.tags {
        let mut object_78 = object.key("Tags").start_object();
        for (key_79, value_80) in var_77 {
            {
                object_78.key(key_79).string(value_80);
            }
        }
        object_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.grok_classifier {
        let mut object_82 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_grok_classifier_request(
            &mut object_82,
            var_81,
        )?;
        object_82.finish();
    }
    if let Some(var_83) = &input.xml_classifier {
        let mut object_84 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_xml_classifier_request(
            &mut object_84,
            var_83,
        )?;
        object_84.finish();
    }
    if let Some(var_85) = &input.json_classifier {
        let mut object_86 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_json_classifier_request(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    if let Some(var_87) = &input.csv_classifier {
        let mut object_88 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_csv_classifier_request(
            &mut object_88,
            var_87,
        )?;
        object_88.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.catalog_id {
        object.key("CatalogId").string(var_89);
    }
    if let Some(var_90) = &input.connection_input {
        let mut object_91 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(&mut object_91, var_90)?;
        object_91.finish();
    }
    if let Some(var_92) = &input.tags {
        let mut object_93 = object.key("Tags").start_object();
        for (key_94, value_95) in var_92 {
            {
                object_93.key(key_94).string(value_95);
            }
        }
        object_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.name {
        object.key("Name").string(var_96);
    }
    if let Some(var_97) = &input.role {
        object.key("Role").string(var_97);
    }
    if let Some(var_98) = &input.database_name {
        object.key("DatabaseName").string(var_98);
    }
    if let Some(var_99) = &input.description {
        object.key("Description").string(var_99);
    }
    if let Some(var_100) = &input.targets {
        let mut object_101 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_101, var_100)?;
        object_101.finish();
    }
    if let Some(var_102) = &input.schedule {
        object.key("Schedule").string(var_102);
    }
    if let Some(var_103) = &input.classifiers {
        let mut array_104 = object.key("Classifiers").start_array();
        for item_105 in var_103 {
            {
                array_104.value().string(item_105);
            }
        }
        array_104.finish();
    }
    if let Some(var_106) = &input.table_prefix {
        object.key("TablePrefix").string(var_106);
    }
    if let Some(var_107) = &input.schema_change_policy {
        let mut object_108 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_108,
            var_107,
        )?;
        object_108.finish();
    }
    if let Some(var_109) = &input.recrawl_policy {
        let mut object_110 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_110, var_109)?;
        object_110.finish();
    }
    if let Some(var_111) = &input.lineage_configuration {
        let mut object_112 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_112,
            var_111,
        )?;
        object_112.finish();
    }
    if let Some(var_113) = &input.lake_formation_configuration {
        let mut object_114 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    if let Some(var_115) = &input.configuration {
        object.key("Configuration").string(var_115);
    }
    if let Some(var_116) = &input.crawler_security_configuration {
        object.key("CrawlerSecurityConfiguration").string(var_116);
    }
    if let Some(var_117) = &input.tags {
        let mut object_118 = object.key("Tags").start_object();
        for (key_119, value_120) in var_117 {
            {
                object_118.key(key_119).string(value_120);
            }
        }
        object_118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.catalog_id {
        object.key("CatalogId").string(var_121);
    }
    if let Some(var_122) = &input.database_input {
        let mut object_123 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_123, var_122)?;
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.endpoint_name {
        object.key("EndpointName").string(var_124);
    }
    if let Some(var_125) = &input.role_arn {
        object.key("RoleArn").string(var_125);
    }
    if let Some(var_126) = &input.security_group_ids {
        let mut array_127 = object.key("SecurityGroupIds").start_array();
        for item_128 in var_126 {
            {
                array_127.value().string(item_128);
            }
        }
        array_127.finish();
    }
    if let Some(var_129) = &input.subnet_id {
        object.key("SubnetId").string(var_129);
    }
    if let Some(var_130) = &input.public_key {
        object.key("PublicKey").string(var_130);
    }
    if let Some(var_131) = &input.public_keys {
        let mut array_132 = object.key("PublicKeys").start_array();
        for item_133 in var_131 {
            {
                array_132.value().string(item_133);
            }
        }
        array_132.finish();
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_134) = &input.worker_type {
        object.key("WorkerType").string(var_134.as_str());
    }
    if let Some(var_135) = &input.glue_version {
        object.key("GlueVersion").string(var_135);
    }
    if let Some(var_136) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_136).into()),
        );
    }
    if let Some(var_137) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_137);
    }
    if let Some(var_138) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_138);
    }
    if let Some(var_139) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_139);
    }
    if let Some(var_140) = &input.tags {
        let mut object_141 = object.key("Tags").start_object();
        for (key_142, value_143) in var_140 {
            {
                object_141.key(key_142).string(value_143);
            }
        }
        object_141.finish();
    }
    if let Some(var_144) = &input.arguments {
        let mut object_145 = object.key("Arguments").start_object();
        for (key_146, value_147) in var_144 {
            {
                object_145.key(key_146).string(value_147);
            }
        }
        object_145.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.name {
        object.key("Name").string(var_148);
    }
    if let Some(var_149) = &input.description {
        object.key("Description").string(var_149);
    }
    if let Some(var_150) = &input.log_uri {
        object.key("LogUri").string(var_150);
    }
    if let Some(var_151) = &input.role {
        object.key("Role").string(var_151);
    }
    if let Some(var_152) = &input.execution_property {
        let mut object_153 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_153,
            var_152,
        )?;
        object_153.finish();
    }
    if let Some(var_154) = &input.command {
        let mut object_155 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_155, var_154)?;
        object_155.finish();
    }
    if let Some(var_156) = &input.default_arguments {
        let mut object_157 = object.key("DefaultArguments").start_object();
        for (key_158, value_159) in var_156 {
            {
                object_157.key(key_158).string(value_159);
            }
        }
        object_157.finish();
    }
    if let Some(var_160) = &input.non_overridable_arguments {
        let mut object_161 = object.key("NonOverridableArguments").start_object();
        for (key_162, value_163) in var_160 {
            {
                object_161.key(key_162).string(value_163);
            }
        }
        object_161.finish();
    }
    if let Some(var_164) = &input.connections {
        let mut object_165 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_165,
            var_164,
        )?;
        object_165.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_166) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_166).into()),
        );
    }
    if let Some(var_167) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_167).into()),
        );
    }
    if let Some(var_168) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_168);
    }
    if let Some(var_169) = &input.tags {
        let mut object_170 = object.key("Tags").start_object();
        for (key_171, value_172) in var_169 {
            {
                object_170.key(key_171).string(value_172);
            }
        }
        object_170.finish();
    }
    if let Some(var_173) = &input.notification_property {
        let mut object_174 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_174,
            var_173,
        )?;
        object_174.finish();
    }
    if let Some(var_175) = &input.glue_version {
        object.key("GlueVersion").string(var_175);
    }
    if let Some(var_176) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_176).into()),
        );
    }
    if let Some(var_177) = &input.worker_type {
        object.key("WorkerType").string(var_177.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.name {
        object.key("Name").string(var_178);
    }
    if let Some(var_179) = &input.description {
        object.key("Description").string(var_179);
    }
    if let Some(var_180) = &input.input_record_tables {
        let mut array_181 = object.key("InputRecordTables").start_array();
        for item_182 in var_180 {
            {
                let mut object_183 = array_181.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_table(
                    &mut object_183,
                    item_182,
                )?;
                object_183.finish();
            }
        }
        array_181.finish();
    }
    if let Some(var_184) = &input.parameters {
        let mut object_185 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_185,
            var_184,
        )?;
        object_185.finish();
    }
    if let Some(var_186) = &input.role {
        object.key("Role").string(var_186);
    }
    if let Some(var_187) = &input.glue_version {
        object.key("GlueVersion").string(var_187);
    }
    if let Some(var_188) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_188).into()),
        );
    }
    if let Some(var_189) = &input.worker_type {
        object.key("WorkerType").string(var_189.as_str());
    }
    if let Some(var_190) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_190).into()),
        );
    }
    if let Some(var_191) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    if let Some(var_192) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_192).into()),
        );
    }
    if let Some(var_193) = &input.tags {
        let mut object_194 = object.key("Tags").start_object();
        for (key_195, value_196) in var_193 {
            {
                object_194.key(key_195).string(value_196);
            }
        }
        object_194.finish();
    }
    if let Some(var_197) = &input.transform_encryption {
        let mut object_198 = object.key("TransformEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_encryption(
            &mut object_198,
            var_197,
        )?;
        object_198.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_199) = &input.catalog_id {
        object.key("CatalogId").string(var_199);
    }
    if let Some(var_200) = &input.database_name {
        object.key("DatabaseName").string(var_200);
    }
    if let Some(var_201) = &input.table_name {
        object.key("TableName").string(var_201);
    }
    if let Some(var_202) = &input.partition_input {
        let mut object_203 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_203, var_202)?;
        object_203.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_204) = &input.catalog_id {
        object.key("CatalogId").string(var_204);
    }
    if let Some(var_205) = &input.database_name {
        object.key("DatabaseName").string(var_205);
    }
    if let Some(var_206) = &input.table_name {
        object.key("TableName").string(var_206);
    }
    if let Some(var_207) = &input.partition_index {
        let mut object_208 = object.key("PartitionIndex").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_index(&mut object_208, var_207)?;
        object_208.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.registry_name {
        object.key("RegistryName").string(var_209);
    }
    if let Some(var_210) = &input.description {
        object.key("Description").string(var_210);
    }
    if let Some(var_211) = &input.tags {
        let mut object_212 = object.key("Tags").start_object();
        for (key_213, value_214) in var_211 {
            {
                object_212.key(key_213).string(value_214);
            }
        }
        object_212.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_215) = &input.registry_id {
        let mut object_216 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_216, var_215)?;
        object_216.finish();
    }
    if let Some(var_217) = &input.schema_name {
        object.key("SchemaName").string(var_217);
    }
    if let Some(var_218) = &input.data_format {
        object.key("DataFormat").string(var_218.as_str());
    }
    if let Some(var_219) = &input.compatibility {
        object.key("Compatibility").string(var_219.as_str());
    }
    if let Some(var_220) = &input.description {
        object.key("Description").string(var_220);
    }
    if let Some(var_221) = &input.tags {
        let mut object_222 = object.key("Tags").start_object();
        for (key_223, value_224) in var_221 {
            {
                object_222.key(key_223).string(value_224);
            }
        }
        object_222.finish();
    }
    if let Some(var_225) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_225);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_script_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateScriptInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.dag_nodes {
        let mut array_227 = object.key("DagNodes").start_array();
        for item_228 in var_226 {
            {
                let mut object_229 = array_227.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node(
                    &mut object_229,
                    item_228,
                )?;
                object_229.finish();
            }
        }
        array_227.finish();
    }
    if let Some(var_230) = &input.dag_edges {
        let mut array_231 = object.key("DagEdges").start_array();
        for item_232 in var_230 {
            {
                let mut object_233 = array_231.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_edge(
                    &mut object_233,
                    item_232,
                )?;
                object_233.finish();
            }
        }
        array_231.finish();
    }
    if let Some(var_234) = &input.language {
        object.key("Language").string(var_234.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.name {
        object.key("Name").string(var_235);
    }
    if let Some(var_236) = &input.encryption_configuration {
        let mut object_237 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(
            &mut object_237,
            var_236,
        )?;
        object_237.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_238) = &input.catalog_id {
        object.key("CatalogId").string(var_238);
    }
    if let Some(var_239) = &input.database_name {
        object.key("DatabaseName").string(var_239);
    }
    if let Some(var_240) = &input.table_input {
        let mut object_241 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_241, var_240)?;
        object_241.finish();
    }
    if let Some(var_242) = &input.partition_indexes {
        let mut array_243 = object.key("PartitionIndexes").start_array();
        for item_244 in var_242 {
            {
                let mut object_245 = array_243.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_index(
                    &mut object_245,
                    item_244,
                )?;
                object_245.finish();
            }
        }
        array_243.finish();
    }
    if let Some(var_246) = &input.transaction_id {
        object.key("TransactionId").string(var_246);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.name {
        object.key("Name").string(var_247);
    }
    if let Some(var_248) = &input.workflow_name {
        object.key("WorkflowName").string(var_248);
    }
    if let Some(var_249) = &input.r#type {
        object.key("Type").string(var_249.as_str());
    }
    if let Some(var_250) = &input.schedule {
        object.key("Schedule").string(var_250);
    }
    if let Some(var_251) = &input.predicate {
        let mut object_252 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_252, var_251)?;
        object_252.finish();
    }
    if let Some(var_253) = &input.actions {
        let mut array_254 = object.key("Actions").start_array();
        for item_255 in var_253 {
            {
                let mut object_256 = array_254.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_256, item_255)?;
                object_256.finish();
            }
        }
        array_254.finish();
    }
    if let Some(var_257) = &input.description {
        object.key("Description").string(var_257);
    }
    if input.start_on_creation {
        object
            .key("StartOnCreation")
            .boolean(input.start_on_creation);
    }
    if let Some(var_258) = &input.tags {
        let mut object_259 = object.key("Tags").start_object();
        for (key_260, value_261) in var_258 {
            {
                object_259.key(key_260).string(value_261);
            }
        }
        object_259.finish();
    }
    if let Some(var_262) = &input.event_batching_condition {
        let mut object_263 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_263,
            var_262,
        )?;
        object_263.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.catalog_id {
        object.key("CatalogId").string(var_264);
    }
    if let Some(var_265) = &input.database_name {
        object.key("DatabaseName").string(var_265);
    }
    if let Some(var_266) = &input.function_input {
        let mut object_267 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_267,
            var_266,
        )?;
        object_267.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.name {
        object.key("Name").string(var_268);
    }
    if let Some(var_269) = &input.description {
        object.key("Description").string(var_269);
    }
    if let Some(var_270) = &input.default_run_properties {
        let mut object_271 = object.key("DefaultRunProperties").start_object();
        for (key_272, value_273) in var_270 {
            {
                object_271.key(key_272).string(value_273);
            }
        }
        object_271.finish();
    }
    if let Some(var_274) = &input.tags {
        let mut object_275 = object.key("Tags").start_object();
        for (key_276, value_277) in var_274 {
            {
                object_275.key(key_276).string(value_277);
            }
        }
        object_275.finish();
    }
    if let Some(var_278) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.name {
        object.key("Name").string(var_279);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_280) = &input.name {
        object.key("Name").string(var_280);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.catalog_id {
        object.key("CatalogId").string(var_281);
    }
    if let Some(var_282) = &input.database_name {
        object.key("DatabaseName").string(var_282);
    }
    if let Some(var_283) = &input.table_name {
        object.key("TableName").string(var_283);
    }
    if let Some(var_284) = &input.partition_values {
        let mut array_285 = object.key("PartitionValues").start_array();
        for item_286 in var_284 {
            {
                array_285.value().string(item_286);
            }
        }
        array_285.finish();
    }
    if let Some(var_287) = &input.column_name {
        object.key("ColumnName").string(var_287);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_288) = &input.catalog_id {
        object.key("CatalogId").string(var_288);
    }
    if let Some(var_289) = &input.database_name {
        object.key("DatabaseName").string(var_289);
    }
    if let Some(var_290) = &input.table_name {
        object.key("TableName").string(var_290);
    }
    if let Some(var_291) = &input.column_name {
        object.key("ColumnName").string(var_291);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.catalog_id {
        object.key("CatalogId").string(var_292);
    }
    if let Some(var_293) = &input.connection_name {
        object.key("ConnectionName").string(var_293);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_294) = &input.name {
        object.key("Name").string(var_294);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_295) = &input.catalog_id {
        object.key("CatalogId").string(var_295);
    }
    if let Some(var_296) = &input.name {
        object.key("Name").string(var_296);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_297) = &input.endpoint_name {
        object.key("EndpointName").string(var_297);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.job_name {
        object.key("JobName").string(var_298);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.transform_id {
        object.key("TransformId").string(var_299);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_300) = &input.catalog_id {
        object.key("CatalogId").string(var_300);
    }
    if let Some(var_301) = &input.database_name {
        object.key("DatabaseName").string(var_301);
    }
    if let Some(var_302) = &input.table_name {
        object.key("TableName").string(var_302);
    }
    if let Some(var_303) = &input.partition_values {
        let mut array_304 = object.key("PartitionValues").start_array();
        for item_305 in var_303 {
            {
                array_304.value().string(item_305);
            }
        }
        array_304.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_306) = &input.catalog_id {
        object.key("CatalogId").string(var_306);
    }
    if let Some(var_307) = &input.database_name {
        object.key("DatabaseName").string(var_307);
    }
    if let Some(var_308) = &input.table_name {
        object.key("TableName").string(var_308);
    }
    if let Some(var_309) = &input.index_name {
        object.key("IndexName").string(var_309);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.registry_id {
        let mut object_311 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_311, var_310)?;
        object_311.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_312);
    }
    if let Some(var_313) = &input.resource_arn {
        object.key("ResourceArn").string(var_313);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_314) = &input.schema_id {
        let mut object_315 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_315, var_314)?;
        object_315.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.schema_id {
        let mut object_317 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_317, var_316)?;
        object_317.finish();
    }
    if let Some(var_318) = &input.versions {
        object.key("Versions").string(var_318);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.name {
        object.key("Name").string(var_319);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_320) = &input.catalog_id {
        object.key("CatalogId").string(var_320);
    }
    if let Some(var_321) = &input.database_name {
        object.key("DatabaseName").string(var_321);
    }
    if let Some(var_322) = &input.name {
        object.key("Name").string(var_322);
    }
    if let Some(var_323) = &input.transaction_id {
        object.key("TransactionId").string(var_323);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.catalog_id {
        object.key("CatalogId").string(var_324);
    }
    if let Some(var_325) = &input.database_name {
        object.key("DatabaseName").string(var_325);
    }
    if let Some(var_326) = &input.table_name {
        object.key("TableName").string(var_326);
    }
    if let Some(var_327) = &input.version_id {
        object.key("VersionId").string(var_327);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_328) = &input.name {
        object.key("Name").string(var_328);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_329) = &input.catalog_id {
        object.key("CatalogId").string(var_329);
    }
    if let Some(var_330) = &input.database_name {
        object.key("DatabaseName").string(var_330);
    }
    if let Some(var_331) = &input.function_name {
        object.key("FunctionName").string(var_331);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_332) = &input.name {
        object.key("Name").string(var_332);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.name {
        object.key("Name").string(var_333);
    }
    if let Some(var_334) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_334);
    }
    if let Some(var_335) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_335);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.blueprint_name {
        object.key("BlueprintName").string(var_336);
    }
    if let Some(var_337) = &input.run_id {
        object.key("RunId").string(var_337);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.blueprint_name {
        object.key("BlueprintName").string(var_338);
    }
    if let Some(var_339) = &input.next_token {
        object.key("NextToken").string(var_339);
    }
    if let Some(var_340) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_340).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_catalog_import_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCatalogImportStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_341) = &input.catalog_id {
        object.key("CatalogId").string(var_341);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_342) = &input.name {
        object.key("Name").string(var_342);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifiers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifiersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_343).into()),
        );
    }
    if let Some(var_344) = &input.next_token {
        object.key("NextToken").string(var_344);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.catalog_id {
        object.key("CatalogId").string(var_345);
    }
    if let Some(var_346) = &input.database_name {
        object.key("DatabaseName").string(var_346);
    }
    if let Some(var_347) = &input.table_name {
        object.key("TableName").string(var_347);
    }
    if let Some(var_348) = &input.partition_values {
        let mut array_349 = object.key("PartitionValues").start_array();
        for item_350 in var_348 {
            {
                array_349.value().string(item_350);
            }
        }
        array_349.finish();
    }
    if let Some(var_351) = &input.column_names {
        let mut array_352 = object.key("ColumnNames").start_array();
        for item_353 in var_351 {
            {
                array_352.value().string(item_353);
            }
        }
        array_352.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_354) = &input.catalog_id {
        object.key("CatalogId").string(var_354);
    }
    if let Some(var_355) = &input.database_name {
        object.key("DatabaseName").string(var_355);
    }
    if let Some(var_356) = &input.table_name {
        object.key("TableName").string(var_356);
    }
    if let Some(var_357) = &input.column_names {
        let mut array_358 = object.key("ColumnNames").start_array();
        for item_359 in var_357 {
            {
                array_358.value().string(item_359);
            }
        }
        array_358.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.catalog_id {
        object.key("CatalogId").string(var_360);
    }
    if let Some(var_361) = &input.name {
        object.key("Name").string(var_361);
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_362) = &input.catalog_id {
        object.key("CatalogId").string(var_362);
    }
    if let Some(var_363) = &input.filter {
        let mut object_364 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_get_connections_filter(
            &mut object_364,
            var_363,
        )?;
        object_364.finish();
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    if let Some(var_365) = &input.next_token {
        object.key("NextToken").string(var_365);
    }
    if let Some(var_366) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_366).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.name {
        object.key("Name").string(var_367);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.crawler_name_list {
        let mut array_369 = object.key("CrawlerNameList").start_array();
        for item_370 in var_368 {
            {
                array_369.value().string(item_370);
            }
        }
        array_369.finish();
    }
    if let Some(var_371) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_371).into()),
        );
    }
    if let Some(var_372) = &input.next_token {
        object.key("NextToken").string(var_372);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_373) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_373).into()),
        );
    }
    if let Some(var_374) = &input.next_token {
        object.key("NextToken").string(var_374);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.catalog_id {
        object.key("CatalogId").string(var_375);
    }
    if let Some(var_376) = &input.name {
        object.key("Name").string(var_376);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_databases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.catalog_id {
        object.key("CatalogId").string(var_377);
    }
    if let Some(var_378) = &input.next_token {
        object.key("NextToken").string(var_378);
    }
    if let Some(var_379) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_379).into()),
        );
    }
    if let Some(var_380) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.catalog_id {
        object.key("CatalogId").string(var_381);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dataflow_graph_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataflowGraphInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.python_script {
        object.key("PythonScript").string(var_382);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.endpoint_name {
        object.key("EndpointName").string(var_383);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_384).into()),
        );
    }
    if let Some(var_385) = &input.next_token {
        object.key("NextToken").string(var_385);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.job_name {
        object.key("JobName").string(var_386);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.job_name {
        object.key("JobName").string(var_387);
    }
    if let Some(var_388) = &input.run_id {
        object.key("RunId").string(var_388);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.job_name {
        object.key("JobName").string(var_389);
    }
    if let Some(var_390) = &input.run_id {
        object.key("RunId").string(var_390);
    }
    if input.predecessors_included {
        object
            .key("PredecessorsIncluded")
            .boolean(input.predecessors_included);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_391) = &input.job_name {
        object.key("JobName").string(var_391);
    }
    if let Some(var_392) = &input.next_token {
        object.key("NextToken").string(var_392);
    }
    if let Some(var_393) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_393).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_394) = &input.next_token {
        object.key("NextToken").string(var_394);
    }
    if let Some(var_395) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_395).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_396) = &input.source {
        let mut object_397 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_397, var_396)?;
        object_397.finish();
    }
    if let Some(var_398) = &input.sinks {
        let mut array_399 = object.key("Sinks").start_array();
        for item_400 in var_398 {
            {
                let mut object_401 = array_399.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_401,
                    item_400,
                )?;
                object_401.finish();
            }
        }
        array_399.finish();
    }
    if let Some(var_402) = &input.location {
        let mut object_403 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_403, var_402)?;
        object_403.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_404) = &input.transform_id {
        object.key("TransformId").string(var_404);
    }
    if let Some(var_405) = &input.task_run_id {
        object.key("TaskRunId").string(var_405);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_406) = &input.transform_id {
        object.key("TransformId").string(var_406);
    }
    if let Some(var_407) = &input.next_token {
        object.key("NextToken").string(var_407);
    }
    if let Some(var_408) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_408).into()),
        );
    }
    if let Some(var_409) = &input.filter {
        let mut object_410 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_filter_criteria(
            &mut object_410,
            var_409,
        )?;
        object_410.finish();
    }
    if let Some(var_411) = &input.sort {
        let mut object_412 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_sort_criteria(
            &mut object_412,
            var_411,
        )?;
        object_412.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_413) = &input.transform_id {
        object.key("TransformId").string(var_413);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_414) = &input.next_token {
        object.key("NextToken").string(var_414);
    }
    if let Some(var_415) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_415).into()),
        );
    }
    if let Some(var_416) = &input.filter {
        let mut object_417 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_417,
            var_416,
        )?;
        object_417.finish();
    }
    if let Some(var_418) = &input.sort {
        let mut object_419 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_419,
            var_418,
        )?;
        object_419.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_420) = &input.catalog_id {
        object.key("CatalogId").string(var_420);
    }
    if let Some(var_421) = &input.database_name {
        object.key("DatabaseName").string(var_421);
    }
    if let Some(var_422) = &input.table_name {
        object.key("TableName").string(var_422);
    }
    if let Some(var_423) = &input.partition_values {
        let mut array_424 = object.key("PartitionValues").start_array();
        for item_425 in var_423 {
            {
                array_424.value().string(item_425);
            }
        }
        array_424.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_indexes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionIndexesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_426) = &input.catalog_id {
        object.key("CatalogId").string(var_426);
    }
    if let Some(var_427) = &input.database_name {
        object.key("DatabaseName").string(var_427);
    }
    if let Some(var_428) = &input.table_name {
        object.key("TableName").string(var_428);
    }
    if let Some(var_429) = &input.next_token {
        object.key("NextToken").string(var_429);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_430) = &input.catalog_id {
        object.key("CatalogId").string(var_430);
    }
    if let Some(var_431) = &input.database_name {
        object.key("DatabaseName").string(var_431);
    }
    if let Some(var_432) = &input.table_name {
        object.key("TableName").string(var_432);
    }
    if let Some(var_433) = &input.expression {
        object.key("Expression").string(var_433);
    }
    if let Some(var_434) = &input.next_token {
        object.key("NextToken").string(var_434);
    }
    if let Some(var_435) = &input.segment {
        let mut object_436 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_436, var_435)?;
        object_436.finish();
    }
    if let Some(var_437) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_437).into()),
        );
    }
    if let Some(var_438) = &input.exclude_column_schema {
        object.key("ExcludeColumnSchema").boolean(*var_438);
    }
    if let Some(var_439) = &input.transaction_id {
        object.key("TransactionId").string(var_439);
    }
    if let Some(var_440) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_440, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_441) = &input.mapping {
        let mut array_442 = object.key("Mapping").start_array();
        for item_443 in var_441 {
            {
                let mut object_444 = array_442.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping_entry(
                    &mut object_444,
                    item_443,
                )?;
                object_444.finish();
            }
        }
        array_442.finish();
    }
    if let Some(var_445) = &input.source {
        let mut object_446 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_446, var_445)?;
        object_446.finish();
    }
    if let Some(var_447) = &input.sinks {
        let mut array_448 = object.key("Sinks").start_array();
        for item_449 in var_447 {
            {
                let mut object_450 = array_448.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_450,
                    item_449,
                )?;
                object_450.finish();
            }
        }
        array_448.finish();
    }
    if let Some(var_451) = &input.location {
        let mut object_452 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_452, var_451)?;
        object_452.finish();
    }
    if let Some(var_453) = &input.language {
        object.key("Language").string(var_453.as_str());
    }
    if let Some(var_454) = &input.additional_plan_options_map {
        let mut object_455 = object.key("AdditionalPlanOptionsMap").start_object();
        for (key_456, value_457) in var_454 {
            {
                object_455.key(key_456).string(value_457);
            }
        }
        object_455.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_458) = &input.registry_id {
        let mut object_459 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_459, var_458)?;
        object_459.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_460) = &input.next_token {
        object.key("NextToken").string(var_460);
    }
    if let Some(var_461) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_461).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_462) = &input.resource_arn {
        object.key("ResourceArn").string(var_462);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_463) = &input.schema_id {
        let mut object_464 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_464, var_463)?;
        object_464.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_by_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaByDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_465) = &input.schema_id {
        let mut object_466 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_466, var_465)?;
        object_466.finish();
    }
    if let Some(var_467) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_467);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_468) = &input.schema_id {
        let mut object_469 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_469, var_468)?;
        object_469.finish();
    }
    if let Some(var_470) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_470);
    }
    if let Some(var_471) = &input.schema_version_number {
        let mut object_472 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_472,
            var_471,
        )?;
        object_472.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_versions_diff_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionsDiffInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.schema_id {
        let mut object_474 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_474, var_473)?;
        object_474.finish();
    }
    if let Some(var_475) = &input.first_schema_version_number {
        let mut object_476 = object.key("FirstSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_476,
            var_475,
        )?;
        object_476.finish();
    }
    if let Some(var_477) = &input.second_schema_version_number {
        let mut object_478 = object.key("SecondSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_478,
            var_477,
        )?;
        object_478.finish();
    }
    if let Some(var_479) = &input.schema_diff_type {
        object.key("SchemaDiffType").string(var_479.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_480) = &input.name {
        object.key("Name").string(var_480);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_481) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_481).into()),
        );
    }
    if let Some(var_482) = &input.next_token {
        object.key("NextToken").string(var_482);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_483) = &input.catalog_id {
        object.key("CatalogId").string(var_483);
    }
    if let Some(var_484) = &input.database_name {
        object.key("DatabaseName").string(var_484);
    }
    if let Some(var_485) = &input.name {
        object.key("Name").string(var_485);
    }
    if let Some(var_486) = &input.transaction_id {
        object.key("TransactionId").string(var_486);
    }
    if let Some(var_487) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_487, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.catalog_id {
        object.key("CatalogId").string(var_488);
    }
    if let Some(var_489) = &input.database_name {
        object.key("DatabaseName").string(var_489);
    }
    if let Some(var_490) = &input.expression {
        object.key("Expression").string(var_490);
    }
    if let Some(var_491) = &input.next_token {
        object.key("NextToken").string(var_491);
    }
    if let Some(var_492) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_492).into()),
        );
    }
    if let Some(var_493) = &input.transaction_id {
        object.key("TransactionId").string(var_493);
    }
    if let Some(var_494) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_494, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_495) = &input.catalog_id {
        object.key("CatalogId").string(var_495);
    }
    if let Some(var_496) = &input.database_name {
        object.key("DatabaseName").string(var_496);
    }
    if let Some(var_497) = &input.table_name {
        object.key("TableName").string(var_497);
    }
    if let Some(var_498) = &input.version_id {
        object.key("VersionId").string(var_498);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_499) = &input.catalog_id {
        object.key("CatalogId").string(var_499);
    }
    if let Some(var_500) = &input.database_name {
        object.key("DatabaseName").string(var_500);
    }
    if let Some(var_501) = &input.table_name {
        object.key("TableName").string(var_501);
    }
    if let Some(var_502) = &input.next_token {
        object.key("NextToken").string(var_502);
    }
    if let Some(var_503) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_503).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_504) = &input.resource_arn {
        object.key("ResourceArn").string(var_504);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_505) = &input.name {
        object.key("Name").string(var_505);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_506) = &input.next_token {
        object.key("NextToken").string(var_506);
    }
    if let Some(var_507) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_507);
    }
    if let Some(var_508) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_508).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partition_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredPartitionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_509) = &input.catalog_id {
        object.key("CatalogId").string(var_509);
    }
    if let Some(var_510) = &input.database_name {
        object.key("DatabaseName").string(var_510);
    }
    if let Some(var_511) = &input.table_name {
        object.key("TableName").string(var_511);
    }
    if let Some(var_512) = &input.partition_values {
        let mut array_513 = object.key("PartitionValues").start_array();
        for item_514 in var_512 {
            {
                array_513.value().string(item_514);
            }
        }
        array_513.finish();
    }
    if let Some(var_515) = &input.audit_context {
        let mut object_516 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_516, var_515)?;
        object_516.finish();
    }
    if let Some(var_517) = &input.supported_permission_types {
        let mut array_518 = object.key("SupportedPermissionTypes").start_array();
        for item_519 in var_517 {
            {
                array_518.value().string(item_519.as_str());
            }
        }
        array_518.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partitions_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredPartitionsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_520) = &input.catalog_id {
        object.key("CatalogId").string(var_520);
    }
    if let Some(var_521) = &input.database_name {
        object.key("DatabaseName").string(var_521);
    }
    if let Some(var_522) = &input.table_name {
        object.key("TableName").string(var_522);
    }
    if let Some(var_523) = &input.expression {
        object.key("Expression").string(var_523);
    }
    if let Some(var_524) = &input.audit_context {
        let mut object_525 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_525, var_524)?;
        object_525.finish();
    }
    if let Some(var_526) = &input.supported_permission_types {
        let mut array_527 = object.key("SupportedPermissionTypes").start_array();
        for item_528 in var_526 {
            {
                array_527.value().string(item_528.as_str());
            }
        }
        array_527.finish();
    }
    if let Some(var_529) = &input.next_token {
        object.key("NextToken").string(var_529);
    }
    if let Some(var_530) = &input.segment {
        let mut object_531 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_531, var_530)?;
        object_531.finish();
    }
    if let Some(var_532) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_532).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_table_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredTableMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_533) = &input.catalog_id {
        object.key("CatalogId").string(var_533);
    }
    if let Some(var_534) = &input.database_name {
        object.key("DatabaseName").string(var_534);
    }
    if let Some(var_535) = &input.name {
        object.key("Name").string(var_535);
    }
    if let Some(var_536) = &input.audit_context {
        let mut object_537 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_537, var_536)?;
        object_537.finish();
    }
    if let Some(var_538) = &input.supported_permission_types {
        let mut array_539 = object.key("SupportedPermissionTypes").start_array();
        for item_540 in var_538 {
            {
                array_539.value().string(item_540.as_str());
            }
        }
        array_539.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_541) = &input.catalog_id {
        object.key("CatalogId").string(var_541);
    }
    if let Some(var_542) = &input.database_name {
        object.key("DatabaseName").string(var_542);
    }
    if let Some(var_543) = &input.function_name {
        object.key("FunctionName").string(var_543);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_functions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_544) = &input.catalog_id {
        object.key("CatalogId").string(var_544);
    }
    if let Some(var_545) = &input.database_name {
        object.key("DatabaseName").string(var_545);
    }
    if let Some(var_546) = &input.pattern {
        object.key("Pattern").string(var_546);
    }
    if let Some(var_547) = &input.next_token {
        object.key("NextToken").string(var_547);
    }
    if let Some(var_548) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_548).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_549) = &input.name {
        object.key("Name").string(var_549);
    }
    if let Some(var_550) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_550);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_551) = &input.name {
        object.key("Name").string(var_551);
    }
    if let Some(var_552) = &input.run_id {
        object.key("RunId").string(var_552);
    }
    if let Some(var_553) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_553);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_554) = &input.name {
        object.key("Name").string(var_554);
    }
    if let Some(var_555) = &input.run_id {
        object.key("RunId").string(var_555);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_556) = &input.name {
        object.key("Name").string(var_556);
    }
    if let Some(var_557) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_557);
    }
    if let Some(var_558) = &input.next_token {
        object.key("NextToken").string(var_558);
    }
    if let Some(var_559) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_559).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_catalog_to_glue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCatalogToGlueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_560) = &input.catalog_id {
        object.key("CatalogId").string(var_560);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_561) = &input.next_token {
        object.key("NextToken").string(var_561);
    }
    if let Some(var_562) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_562).into()),
        );
    }
    if let Some(var_563) = &input.tags {
        let mut object_564 = object.key("Tags").start_object();
        for (key_565, value_566) in var_563 {
            {
                object_564.key(key_565).string(value_566);
            }
        }
        object_564.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_567) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_567).into()),
        );
    }
    if let Some(var_568) = &input.next_token {
        object.key("NextToken").string(var_568);
    }
    if let Some(var_569) = &input.tags {
        let mut object_570 = object.key("Tags").start_object();
        for (key_571, value_572) in var_569 {
            {
                object_570.key(key_571).string(value_572);
            }
        }
        object_570.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_573) = &input.next_token {
        object.key("NextToken").string(var_573);
    }
    if let Some(var_574) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_574).into()),
        );
    }
    if let Some(var_575) = &input.tags {
        let mut object_576 = object.key("Tags").start_object();
        for (key_577, value_578) in var_575 {
            {
                object_576.key(key_577).string(value_578);
            }
        }
        object_576.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_579) = &input.next_token {
        object.key("NextToken").string(var_579);
    }
    if let Some(var_580) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_580).into()),
        );
    }
    if let Some(var_581) = &input.tags {
        let mut object_582 = object.key("Tags").start_object();
        for (key_583, value_584) in var_581 {
            {
                object_582.key(key_583).string(value_584);
            }
        }
        object_582.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_585) = &input.next_token {
        object.key("NextToken").string(var_585);
    }
    if let Some(var_586) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_586).into()),
        );
    }
    if let Some(var_587) = &input.filter {
        let mut object_588 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_588,
            var_587,
        )?;
        object_588.finish();
    }
    if let Some(var_589) = &input.sort {
        let mut object_590 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_590,
            var_589,
        )?;
        object_590.finish();
    }
    if let Some(var_591) = &input.tags {
        let mut object_592 = object.key("Tags").start_object();
        for (key_593, value_594) in var_591 {
            {
                object_592.key(key_593).string(value_594);
            }
        }
        object_592.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_registries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegistriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_595) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_595).into()),
        );
    }
    if let Some(var_596) = &input.next_token {
        object.key("NextToken").string(var_596);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_597) = &input.registry_id {
        let mut object_598 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_598, var_597)?;
        object_598.finish();
    }
    if let Some(var_599) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_599).into()),
        );
    }
    if let Some(var_600) = &input.next_token {
        object.key("NextToken").string(var_600);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_601) = &input.schema_id {
        let mut object_602 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_602, var_601)?;
        object_602.finish();
    }
    if let Some(var_603) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_603).into()),
        );
    }
    if let Some(var_604) = &input.next_token {
        object.key("NextToken").string(var_604);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_605) = &input.next_token {
        object.key("NextToken").string(var_605);
    }
    if let Some(var_606) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_606);
    }
    if let Some(var_607) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_607).into()),
        );
    }
    if let Some(var_608) = &input.tags {
        let mut object_609 = object.key("Tags").start_object();
        for (key_610, value_611) in var_608 {
            {
                object_609.key(key_610).string(value_611);
            }
        }
        object_609.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_612) = &input.next_token {
        object.key("NextToken").string(var_612);
    }
    if let Some(var_613) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_613).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_614) = &input.catalog_id {
        object.key("CatalogId").string(var_614);
    }
    if let Some(var_615) = &input.data_catalog_encryption_settings {
        let mut object_616 = object.key("DataCatalogEncryptionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_encryption_settings(
            &mut object_616,
            var_615,
        )?;
        object_616.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_617) = &input.policy_in_json {
        object.key("PolicyInJson").string(var_617);
    }
    if let Some(var_618) = &input.resource_arn {
        object.key("ResourceArn").string(var_618);
    }
    if let Some(var_619) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_619);
    }
    if let Some(var_620) = &input.policy_exists_condition {
        object.key("PolicyExistsCondition").string(var_620.as_str());
    }
    if let Some(var_621) = &input.enable_hybrid {
        object.key("EnableHybrid").string(var_621.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_622) = &input.schema_id {
        let mut object_623 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_623, var_622)?;
        object_623.finish();
    }
    if let Some(var_624) = &input.schema_version_number {
        let mut object_625 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_625,
            var_624,
        )?;
        object_625.finish();
    }
    if let Some(var_626) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_626);
    }
    if let Some(var_627) = &input.metadata_key_value {
        let mut object_628 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_628,
            var_627,
        )?;
        object_628.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_629) = &input.name {
        object.key("Name").string(var_629);
    }
    if let Some(var_630) = &input.run_id {
        object.key("RunId").string(var_630);
    }
    if let Some(var_631) = &input.run_properties {
        let mut object_632 = object.key("RunProperties").start_object();
        for (key_633, value_634) in var_631 {
            {
                object_632.key(key_633).string(value_634);
            }
        }
        object_632.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QuerySchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_635) = &input.schema_id {
        let mut object_636 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_636, var_635)?;
        object_636.finish();
    }
    if let Some(var_637) = &input.schema_version_number {
        let mut object_638 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_638,
            var_637,
        )?;
        object_638.finish();
    }
    if let Some(var_639) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_639);
    }
    if let Some(var_640) = &input.metadata_list {
        let mut array_641 = object.key("MetadataList").start_array();
        for item_642 in var_640 {
            {
                let mut object_643 = array_641.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
                    &mut object_643,
                    item_642,
                )?;
                object_643.finish();
            }
        }
        array_641.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_644) = &input.next_token {
        object.key("NextToken").string(var_644);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_645) = &input.schema_id {
        let mut object_646 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_646, var_645)?;
        object_646.finish();
    }
    if let Some(var_647) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_647);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_648) = &input.schema_id {
        let mut object_649 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_649, var_648)?;
        object_649.finish();
    }
    if let Some(var_650) = &input.schema_version_number {
        let mut object_651 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_651,
            var_650,
        )?;
        object_651.finish();
    }
    if let Some(var_652) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_652);
    }
    if let Some(var_653) = &input.metadata_key_value {
        let mut object_654 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_654,
            var_653,
        )?;
        object_654.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_655) = &input.job_name {
        object.key("JobName").string(var_655);
    }
    if let Some(var_656) = &input.run_id {
        object.key("RunId").string(var_656);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_657) = &input.name {
        object.key("Name").string(var_657);
    }
    if let Some(var_658) = &input.run_id {
        object.key("RunId").string(var_658);
    }
    if let Some(var_659) = &input.node_ids {
        let mut array_660 = object.key("NodeIds").start_array();
        for item_661 in var_659 {
            {
                array_660.value().string(item_661);
            }
        }
        array_660.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_662) = &input.catalog_id {
        object.key("CatalogId").string(var_662);
    }
    if let Some(var_663) = &input.next_token {
        object.key("NextToken").string(var_663);
    }
    if let Some(var_664) = &input.filters {
        let mut array_665 = object.key("Filters").start_array();
        for item_666 in var_664 {
            {
                let mut object_667 = array_665.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_predicate(
                    &mut object_667,
                    item_666,
                )?;
                object_667.finish();
            }
        }
        array_665.finish();
    }
    if let Some(var_668) = &input.search_text {
        object.key("SearchText").string(var_668);
    }
    if let Some(var_669) = &input.sort_criteria {
        let mut array_670 = object.key("SortCriteria").start_array();
        for item_671 in var_669 {
            {
                let mut object_672 = array_670.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_criterion(
                    &mut object_672,
                    item_671,
                )?;
                object_672.finish();
            }
        }
        array_670.finish();
    }
    if let Some(var_673) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_673).into()),
        );
    }
    if let Some(var_674) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_674.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_675) = &input.blueprint_name {
        object.key("BlueprintName").string(var_675);
    }
    if let Some(var_676) = &input.parameters {
        object.key("Parameters").string(var_676);
    }
    if let Some(var_677) = &input.role_arn {
        object.key("RoleArn").string(var_677);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_678) = &input.name {
        object.key("Name").string(var_678);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_679) = &input.crawler_name {
        object.key("CrawlerName").string(var_679);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_export_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartExportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_680) = &input.transform_id {
        object.key("TransformId").string(var_680);
    }
    if let Some(var_681) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_681);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_682) = &input.transform_id {
        object.key("TransformId").string(var_682);
    }
    if let Some(var_683) = &input.input_s3_path {
        object.key("InputS3Path").string(var_683);
    }
    if input.replace_all_labels {
        object
            .key("ReplaceAllLabels")
            .boolean(input.replace_all_labels);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_684) = &input.job_name {
        object.key("JobName").string(var_684);
    }
    if let Some(var_685) = &input.job_run_id {
        object.key("JobRunId").string(var_685);
    }
    if let Some(var_686) = &input.arguments {
        let mut object_687 = object.key("Arguments").start_object();
        for (key_688, value_689) in var_686 {
            {
                object_687.key(key_688).string(value_689);
            }
        }
        object_687.finish();
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_690) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_690).into()),
        );
    }
    if let Some(var_691) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_691).into()),
        );
    }
    if let Some(var_692) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_692);
    }
    if let Some(var_693) = &input.notification_property {
        let mut object_694 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_694,
            var_693,
        )?;
        object_694.finish();
    }
    if let Some(var_695) = &input.worker_type {
        object.key("WorkerType").string(var_695.as_str());
    }
    if let Some(var_696) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_696).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_evaluation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlEvaluationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_697) = &input.transform_id {
        object.key("TransformId").string(var_697);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_labeling_set_generation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlLabelingSetGenerationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_698) = &input.transform_id {
        object.key("TransformId").string(var_698);
    }
    if let Some(var_699) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_699);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_700) = &input.name {
        object.key("Name").string(var_700);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_701) = &input.name {
        object.key("Name").string(var_701);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_702) = &input.name {
        object.key("Name").string(var_702);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_703) = &input.crawler_name {
        object.key("CrawlerName").string(var_703);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_704) = &input.name {
        object.key("Name").string(var_704);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_705) = &input.name {
        object.key("Name").string(var_705);
    }
    if let Some(var_706) = &input.run_id {
        object.key("RunId").string(var_706);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_707) = &input.resource_arn {
        object.key("ResourceArn").string(var_707);
    }
    if let Some(var_708) = &input.tags_to_add {
        let mut object_709 = object.key("TagsToAdd").start_object();
        for (key_710, value_711) in var_708 {
            {
                object_709.key(key_710).string(value_711);
            }
        }
        object_709.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_712) = &input.resource_arn {
        object.key("ResourceArn").string(var_712);
    }
    if let Some(var_713) = &input.tags_to_remove {
        let mut array_714 = object.key("TagsToRemove").start_array();
        for item_715 in var_713 {
            {
                array_714.value().string(item_715);
            }
        }
        array_714.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_716) = &input.name {
        object.key("Name").string(var_716);
    }
    if let Some(var_717) = &input.description {
        object.key("Description").string(var_717);
    }
    if let Some(var_718) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_718);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_719) = &input.grok_classifier {
        let mut object_720 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_grok_classifier_request(
            &mut object_720,
            var_719,
        )?;
        object_720.finish();
    }
    if let Some(var_721) = &input.xml_classifier {
        let mut object_722 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_xml_classifier_request(
            &mut object_722,
            var_721,
        )?;
        object_722.finish();
    }
    if let Some(var_723) = &input.json_classifier {
        let mut object_724 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_json_classifier_request(
            &mut object_724,
            var_723,
        )?;
        object_724.finish();
    }
    if let Some(var_725) = &input.csv_classifier {
        let mut object_726 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_csv_classifier_request(
            &mut object_726,
            var_725,
        )?;
        object_726.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_727) = &input.catalog_id {
        object.key("CatalogId").string(var_727);
    }
    if let Some(var_728) = &input.database_name {
        object.key("DatabaseName").string(var_728);
    }
    if let Some(var_729) = &input.table_name {
        object.key("TableName").string(var_729);
    }
    if let Some(var_730) = &input.partition_values {
        let mut array_731 = object.key("PartitionValues").start_array();
        for item_732 in var_730 {
            {
                array_731.value().string(item_732);
            }
        }
        array_731.finish();
    }
    if let Some(var_733) = &input.column_statistics_list {
        let mut array_734 = object.key("ColumnStatisticsList").start_array();
        for item_735 in var_733 {
            {
                let mut object_736 = array_734.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_736,
                    item_735,
                )?;
                object_736.finish();
            }
        }
        array_734.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_737) = &input.catalog_id {
        object.key("CatalogId").string(var_737);
    }
    if let Some(var_738) = &input.database_name {
        object.key("DatabaseName").string(var_738);
    }
    if let Some(var_739) = &input.table_name {
        object.key("TableName").string(var_739);
    }
    if let Some(var_740) = &input.column_statistics_list {
        let mut array_741 = object.key("ColumnStatisticsList").start_array();
        for item_742 in var_740 {
            {
                let mut object_743 = array_741.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_743,
                    item_742,
                )?;
                object_743.finish();
            }
        }
        array_741.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_744) = &input.catalog_id {
        object.key("CatalogId").string(var_744);
    }
    if let Some(var_745) = &input.name {
        object.key("Name").string(var_745);
    }
    if let Some(var_746) = &input.connection_input {
        let mut object_747 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(
            &mut object_747,
            var_746,
        )?;
        object_747.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_748) = &input.name {
        object.key("Name").string(var_748);
    }
    if let Some(var_749) = &input.role {
        object.key("Role").string(var_749);
    }
    if let Some(var_750) = &input.database_name {
        object.key("DatabaseName").string(var_750);
    }
    if let Some(var_751) = &input.description {
        object.key("Description").string(var_751);
    }
    if let Some(var_752) = &input.targets {
        let mut object_753 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_753, var_752)?;
        object_753.finish();
    }
    if let Some(var_754) = &input.schedule {
        object.key("Schedule").string(var_754);
    }
    if let Some(var_755) = &input.classifiers {
        let mut array_756 = object.key("Classifiers").start_array();
        for item_757 in var_755 {
            {
                array_756.value().string(item_757);
            }
        }
        array_756.finish();
    }
    if let Some(var_758) = &input.table_prefix {
        object.key("TablePrefix").string(var_758);
    }
    if let Some(var_759) = &input.schema_change_policy {
        let mut object_760 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_760,
            var_759,
        )?;
        object_760.finish();
    }
    if let Some(var_761) = &input.recrawl_policy {
        let mut object_762 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_762, var_761)?;
        object_762.finish();
    }
    if let Some(var_763) = &input.lineage_configuration {
        let mut object_764 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_764,
            var_763,
        )?;
        object_764.finish();
    }
    if let Some(var_765) = &input.lake_formation_configuration {
        let mut object_766 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(
            &mut object_766,
            var_765,
        )?;
        object_766.finish();
    }
    if let Some(var_767) = &input.configuration {
        object.key("Configuration").string(var_767);
    }
    if let Some(var_768) = &input.crawler_security_configuration {
        object.key("CrawlerSecurityConfiguration").string(var_768);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_769) = &input.crawler_name {
        object.key("CrawlerName").string(var_769);
    }
    if let Some(var_770) = &input.schedule {
        object.key("Schedule").string(var_770);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_771) = &input.catalog_id {
        object.key("CatalogId").string(var_771);
    }
    if let Some(var_772) = &input.name {
        object.key("Name").string(var_772);
    }
    if let Some(var_773) = &input.database_input {
        let mut object_774 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_774, var_773)?;
        object_774.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_775) = &input.endpoint_name {
        object.key("EndpointName").string(var_775);
    }
    if let Some(var_776) = &input.public_key {
        object.key("PublicKey").string(var_776);
    }
    if let Some(var_777) = &input.add_public_keys {
        let mut array_778 = object.key("AddPublicKeys").start_array();
        for item_779 in var_777 {
            {
                array_778.value().string(item_779);
            }
        }
        array_778.finish();
    }
    if let Some(var_780) = &input.delete_public_keys {
        let mut array_781 = object.key("DeletePublicKeys").start_array();
        for item_782 in var_780 {
            {
                array_781.value().string(item_782);
            }
        }
        array_781.finish();
    }
    if let Some(var_783) = &input.custom_libraries {
        let mut object_784 = object.key("CustomLibraries").start_object();
        crate::json_ser::serialize_structure_crate_model_dev_endpoint_custom_libraries(
            &mut object_784,
            var_783,
        )?;
        object_784.finish();
    }
    if input.update_etl_libraries {
        object
            .key("UpdateEtlLibraries")
            .boolean(input.update_etl_libraries);
    }
    if let Some(var_785) = &input.delete_arguments {
        let mut array_786 = object.key("DeleteArguments").start_array();
        for item_787 in var_785 {
            {
                array_786.value().string(item_787);
            }
        }
        array_786.finish();
    }
    if let Some(var_788) = &input.add_arguments {
        let mut object_789 = object.key("AddArguments").start_object();
        for (key_790, value_791) in var_788 {
            {
                object_789.key(key_790).string(value_791);
            }
        }
        object_789.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_792) = &input.job_name {
        object.key("JobName").string(var_792);
    }
    if let Some(var_793) = &input.job_update {
        let mut object_794 = object.key("JobUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_job_update(&mut object_794, var_793)?;
        object_794.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_795) = &input.transform_id {
        object.key("TransformId").string(var_795);
    }
    if let Some(var_796) = &input.name {
        object.key("Name").string(var_796);
    }
    if let Some(var_797) = &input.description {
        object.key("Description").string(var_797);
    }
    if let Some(var_798) = &input.parameters {
        let mut object_799 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_799,
            var_798,
        )?;
        object_799.finish();
    }
    if let Some(var_800) = &input.role {
        object.key("Role").string(var_800);
    }
    if let Some(var_801) = &input.glue_version {
        object.key("GlueVersion").string(var_801);
    }
    if let Some(var_802) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_802).into()),
        );
    }
    if let Some(var_803) = &input.worker_type {
        object.key("WorkerType").string(var_803.as_str());
    }
    if let Some(var_804) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_804).into()),
        );
    }
    if let Some(var_805) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_805).into()),
        );
    }
    if let Some(var_806) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_806).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_807) = &input.catalog_id {
        object.key("CatalogId").string(var_807);
    }
    if let Some(var_808) = &input.database_name {
        object.key("DatabaseName").string(var_808);
    }
    if let Some(var_809) = &input.table_name {
        object.key("TableName").string(var_809);
    }
    if let Some(var_810) = &input.partition_value_list {
        let mut array_811 = object.key("PartitionValueList").start_array();
        for item_812 in var_810 {
            {
                array_811.value().string(item_812);
            }
        }
        array_811.finish();
    }
    if let Some(var_813) = &input.partition_input {
        let mut object_814 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_814, var_813)?;
        object_814.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_815) = &input.registry_id {
        let mut object_816 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_816, var_815)?;
        object_816.finish();
    }
    if let Some(var_817) = &input.description {
        object.key("Description").string(var_817);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_818) = &input.schema_id {
        let mut object_819 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_819, var_818)?;
        object_819.finish();
    }
    if let Some(var_820) = &input.schema_version_number {
        let mut object_821 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_821,
            var_820,
        )?;
        object_821.finish();
    }
    if let Some(var_822) = &input.compatibility {
        object.key("Compatibility").string(var_822.as_str());
    }
    if let Some(var_823) = &input.description {
        object.key("Description").string(var_823);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_824) = &input.catalog_id {
        object.key("CatalogId").string(var_824);
    }
    if let Some(var_825) = &input.database_name {
        object.key("DatabaseName").string(var_825);
    }
    if let Some(var_826) = &input.table_input {
        let mut object_827 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_827, var_826)?;
        object_827.finish();
    }
    if let Some(var_828) = &input.skip_archive {
        object.key("SkipArchive").boolean(*var_828);
    }
    if let Some(var_829) = &input.transaction_id {
        object.key("TransactionId").string(var_829);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_830) = &input.name {
        object.key("Name").string(var_830);
    }
    if let Some(var_831) = &input.trigger_update {
        let mut object_832 = object.key("TriggerUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_update(&mut object_832, var_831)?;
        object_832.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_833) = &input.catalog_id {
        object.key("CatalogId").string(var_833);
    }
    if let Some(var_834) = &input.database_name {
        object.key("DatabaseName").string(var_834);
    }
    if let Some(var_835) = &input.function_name {
        object.key("FunctionName").string(var_835);
    }
    if let Some(var_836) = &input.function_input {
        let mut object_837 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_837,
            var_836,
        )?;
        object_837.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_838) = &input.name {
        object.key("Name").string(var_838);
    }
    if let Some(var_839) = &input.description {
        object.key("Description").string(var_839);
    }
    if let Some(var_840) = &input.default_run_properties {
        let mut object_841 = object.key("DefaultRunProperties").start_object();
        for (key_842, value_843) in var_840 {
            {
                object_841.key(key_842).string(value_843);
            }
        }
        object_841.finish();
    }
    if let Some(var_844) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_844).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_845) = &input.values {
        let mut array_846 = object.key("Values").start_array();
        for item_847 in var_845 {
            {
                array_846.value().string(item_847);
            }
        }
        array_846.finish();
    }
    if let Some(var_848) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_848, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_849) = &input.storage_descriptor {
        let mut object_850 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_850,
            var_849,
        )?;
        object_850.finish();
    }
    if let Some(var_851) = &input.parameters {
        let mut object_852 = object.key("Parameters").start_object();
        for (key_853, value_854) in var_851 {
            {
                object_852.key(key_853).string(value_854);
            }
        }
        object_852.finish();
    }
    if let Some(var_855) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_855, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_value_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionValueList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_856) = &input.values {
        let mut array_857 = object.key("Values").start_array();
        for item_858 in var_856 {
            {
                array_857.value().string(item_858);
            }
        }
        array_857.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_update_partition_request_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchUpdatePartitionRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_859) = &input.partition_value_list {
        let mut array_860 = object.key("PartitionValueList").start_array();
        for item_861 in var_859 {
            {
                array_860.value().string(item_861);
            }
        }
        array_860.finish();
    }
    if let Some(var_862) = &input.partition_input {
        let mut object_863 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_863, var_862)?;
        object_863.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_864) = &input.classification {
        object.key("Classification").string(var_864);
    }
    if let Some(var_865) = &input.name {
        object.key("Name").string(var_865);
    }
    if let Some(var_866) = &input.grok_pattern {
        object.key("GrokPattern").string(var_866);
    }
    if let Some(var_867) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_867);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_868) = &input.classification {
        object.key("Classification").string(var_868);
    }
    if let Some(var_869) = &input.name {
        object.key("Name").string(var_869);
    }
    if let Some(var_870) = &input.row_tag {
        object.key("RowTag").string(var_870);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_871) = &input.name {
        object.key("Name").string(var_871);
    }
    if let Some(var_872) = &input.json_path {
        object.key("JsonPath").string(var_872);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_873) = &input.name {
        object.key("Name").string(var_873);
    }
    if let Some(var_874) = &input.delimiter {
        object.key("Delimiter").string(var_874);
    }
    if let Some(var_875) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_875);
    }
    if let Some(var_876) = &input.contains_header {
        object.key("ContainsHeader").string(var_876.as_str());
    }
    if let Some(var_877) = &input.header {
        let mut array_878 = object.key("Header").start_array();
        for item_879 in var_877 {
            {
                array_878.value().string(item_879);
            }
        }
        array_878.finish();
    }
    if let Some(var_880) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_880);
    }
    if let Some(var_881) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_881);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_882) = &input.name {
        object.key("Name").string(var_882);
    }
    if let Some(var_883) = &input.description {
        object.key("Description").string(var_883);
    }
    if let Some(var_884) = &input.connection_type {
        object.key("ConnectionType").string(var_884.as_str());
    }
    if let Some(var_885) = &input.match_criteria {
        let mut array_886 = object.key("MatchCriteria").start_array();
        for item_887 in var_885 {
            {
                array_886.value().string(item_887);
            }
        }
        array_886.finish();
    }
    if let Some(var_888) = &input.connection_properties {
        let mut object_889 = object.key("ConnectionProperties").start_object();
        for (key_890, value_891) in var_888 {
            {
                object_889.key(key_890.as_str()).string(value_891);
            }
        }
        object_889.finish();
    }
    if let Some(var_892) = &input.physical_connection_requirements {
        let mut object_893 = object.key("PhysicalConnectionRequirements").start_object();
        crate::json_ser::serialize_structure_crate_model_physical_connection_requirements(
            &mut object_893,
            var_892,
        )?;
        object_893.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_crawler_targets(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CrawlerTargets,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_894) = &input.s3_targets {
        let mut array_895 = object.key("S3Targets").start_array();
        for item_896 in var_894 {
            {
                let mut object_897 = array_895.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_target(
                    &mut object_897,
                    item_896,
                )?;
                object_897.finish();
            }
        }
        array_895.finish();
    }
    if let Some(var_898) = &input.jdbc_targets {
        let mut array_899 = object.key("JdbcTargets").start_array();
        for item_900 in var_898 {
            {
                let mut object_901 = array_899.value().start_object();
                crate::json_ser::serialize_structure_crate_model_jdbc_target(
                    &mut object_901,
                    item_900,
                )?;
                object_901.finish();
            }
        }
        array_899.finish();
    }
    if let Some(var_902) = &input.mongo_db_targets {
        let mut array_903 = object.key("MongoDBTargets").start_array();
        for item_904 in var_902 {
            {
                let mut object_905 = array_903.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mongo_db_target(
                    &mut object_905,
                    item_904,
                )?;
                object_905.finish();
            }
        }
        array_903.finish();
    }
    if let Some(var_906) = &input.dynamo_db_targets {
        let mut array_907 = object.key("DynamoDBTargets").start_array();
        for item_908 in var_906 {
            {
                let mut object_909 = array_907.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dynamo_db_target(
                    &mut object_909,
                    item_908,
                )?;
                object_909.finish();
            }
        }
        array_907.finish();
    }
    if let Some(var_910) = &input.catalog_targets {
        let mut array_911 = object.key("CatalogTargets").start_array();
        for item_912 in var_910 {
            {
                let mut object_913 = array_911.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_target(
                    &mut object_913,
                    item_912,
                )?;
                object_913.finish();
            }
        }
        array_911.finish();
    }
    if let Some(var_914) = &input.delta_targets {
        let mut array_915 = object.key("DeltaTargets").start_array();
        for item_916 in var_914 {
            {
                let mut object_917 = array_915.value().start_object();
                crate::json_ser::serialize_structure_crate_model_delta_target(
                    &mut object_917,
                    item_916,
                )?;
                object_917.finish();
            }
        }
        array_915.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_change_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaChangePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_918) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_918.as_str());
    }
    if let Some(var_919) = &input.delete_behavior {
        object.key("DeleteBehavior").string(var_919.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recrawl_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecrawlPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_920) = &input.recrawl_behavior {
        object.key("RecrawlBehavior").string(var_920.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lineage_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LineageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_921) = &input.crawler_lineage_settings {
        object
            .key("CrawlerLineageSettings")
            .string(var_921.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lake_formation_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LakeFormationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_922) = &input.use_lake_formation_credentials {
        object.key("UseLakeFormationCredentials").boolean(*var_922);
    }
    if let Some(var_923) = &input.account_id {
        object.key("AccountId").string(var_923);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_924) = &input.name {
        object.key("Name").string(var_924);
    }
    if let Some(var_925) = &input.description {
        object.key("Description").string(var_925);
    }
    if let Some(var_926) = &input.location_uri {
        object.key("LocationUri").string(var_926);
    }
    if let Some(var_927) = &input.parameters {
        let mut object_928 = object.key("Parameters").start_object();
        for (key_929, value_930) in var_927 {
            {
                object_928.key(key_929).string(value_930);
            }
        }
        object_928.finish();
    }
    if let Some(var_931) = &input.create_table_default_permissions {
        let mut array_932 = object.key("CreateTableDefaultPermissions").start_array();
        for item_933 in var_931 {
            {
                let mut object_934 = array_932.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal_permissions(
                    &mut object_934,
                    item_933,
                )?;
                object_934.finish();
            }
        }
        array_932.finish();
    }
    if let Some(var_935) = &input.target_database {
        let mut object_936 = object.key("TargetDatabase").start_object();
        crate::json_ser::serialize_structure_crate_model_database_identifier(
            &mut object_936,
            var_935,
        )?;
        object_936.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execution_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_concurrent_runs != 0 {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_concurrent_runs).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_command(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobCommand,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_937) = &input.name {
        object.key("Name").string(var_937);
    }
    if let Some(var_938) = &input.script_location {
        object.key("ScriptLocation").string(var_938);
    }
    if let Some(var_939) = &input.python_version {
        object.key("PythonVersion").string(var_939);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connections_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionsList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_940) = &input.connections {
        let mut array_941 = object.key("Connections").start_array();
        for item_942 in var_940 {
            {
                array_941.value().string(item_942);
            }
        }
        array_941.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_943) = &input.notify_delay_after {
        object.key("NotifyDelayAfter").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_943).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_944) = &input.database_name {
        object.key("DatabaseName").string(var_944);
    }
    if let Some(var_945) = &input.table_name {
        object.key("TableName").string(var_945);
    }
    if let Some(var_946) = &input.catalog_id {
        object.key("CatalogId").string(var_946);
    }
    if let Some(var_947) = &input.connection_name {
        object.key("ConnectionName").string(var_947);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_948) = &input.transform_type {
        object.key("TransformType").string(var_948.as_str());
    }
    if let Some(var_949) = &input.find_matches_parameters {
        let mut object_950 = object.key("FindMatchesParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_find_matches_parameters(
            &mut object_950,
            var_949,
        )?;
        object_950.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_951) = &input.ml_user_data_encryption {
        let mut object_952 = object.key("MlUserDataEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_ml_user_data_encryption(
            &mut object_952,
            var_951,
        )?;
        object_952.finish();
    }
    if let Some(var_953) = &input.task_run_security_configuration_name {
        object
            .key("TaskRunSecurityConfigurationName")
            .string(var_953);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_954) = &input.keys {
        let mut array_955 = object.key("Keys").start_array();
        for item_956 in var_954 {
            {
                array_955.value().string(item_956);
            }
        }
        array_955.finish();
    }
    if let Some(var_957) = &input.index_name {
        object.key("IndexName").string(var_957);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registry_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistryId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_958) = &input.registry_name {
        object.key("RegistryName").string(var_958);
    }
    if let Some(var_959) = &input.registry_arn {
        object.key("RegistryArn").string(var_959);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_960) = &input.id {
        object.key("Id").string(var_960);
    }
    if let Some(var_961) = &input.node_type {
        object.key("NodeType").string(var_961);
    }
    if let Some(var_962) = &input.args {
        let mut array_963 = object.key("Args").start_array();
        for item_964 in var_962 {
            {
                let mut object_965 = array_963.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_965,
                    item_964,
                )?;
                object_965.finish();
            }
        }
        array_963.finish();
    }
    if input.line_number != 0 {
        object.key("LineNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.line_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_edge(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenEdge,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_966) = &input.source {
        object.key("Source").string(var_966);
    }
    if let Some(var_967) = &input.target {
        object.key("Target").string(var_967);
    }
    if let Some(var_968) = &input.target_parameter {
        object.key("TargetParameter").string(var_968);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_969) = &input.s3_encryption {
        let mut array_970 = object.key("S3Encryption").start_array();
        for item_971 in var_969 {
            {
                let mut object_972 = array_970.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_encryption(
                    &mut object_972,
                    item_971,
                )?;
                object_972.finish();
            }
        }
        array_970.finish();
    }
    if let Some(var_973) = &input.cloud_watch_encryption {
        let mut object_974 = object.key("CloudWatchEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_encryption(
            &mut object_974,
            var_973,
        )?;
        object_974.finish();
    }
    if let Some(var_975) = &input.job_bookmarks_encryption {
        let mut object_976 = object.key("JobBookmarksEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_job_bookmarks_encryption(
            &mut object_976,
            var_975,
        )?;
        object_976.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_977) = &input.name {
        object.key("Name").string(var_977);
    }
    if let Some(var_978) = &input.description {
        object.key("Description").string(var_978);
    }
    if let Some(var_979) = &input.owner {
        object.key("Owner").string(var_979);
    }
    if let Some(var_980) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_980, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_981) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_981, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if input.retention != 0 {
        object.key("Retention").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention).into()),
        );
    }
    if let Some(var_982) = &input.storage_descriptor {
        let mut object_983 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_983,
            var_982,
        )?;
        object_983.finish();
    }
    if let Some(var_984) = &input.partition_keys {
        let mut array_985 = object.key("PartitionKeys").start_array();
        for item_986 in var_984 {
            {
                let mut object_987 = array_985.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(&mut object_987, item_986)?;
                object_987.finish();
            }
        }
        array_985.finish();
    }
    if let Some(var_988) = &input.view_original_text {
        object.key("ViewOriginalText").string(var_988);
    }
    if let Some(var_989) = &input.view_expanded_text {
        object.key("ViewExpandedText").string(var_989);
    }
    if let Some(var_990) = &input.table_type {
        object.key("TableType").string(var_990);
    }
    if let Some(var_991) = &input.parameters {
        let mut object_992 = object.key("Parameters").start_object();
        for (key_993, value_994) in var_991 {
            {
                object_992.key(key_993).string(value_994);
            }
        }
        object_992.finish();
    }
    if let Some(var_995) = &input.target_table {
        let mut object_996 = object.key("TargetTable").start_object();
        crate::json_ser::serialize_structure_crate_model_table_identifier(
            &mut object_996,
            var_995,
        )?;
        object_996.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Predicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_997) = &input.logical {
        object.key("Logical").string(var_997.as_str());
    }
    if let Some(var_998) = &input.conditions {
        let mut array_999 = object.key("Conditions").start_array();
        for item_1000 in var_998 {
            {
                let mut object_1001 = array_999.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_1001,
                    item_1000,
                )?;
                object_1001.finish();
            }
        }
        array_999.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1002) = &input.job_name {
        object.key("JobName").string(var_1002);
    }
    if let Some(var_1003) = &input.arguments {
        let mut object_1004 = object.key("Arguments").start_object();
        for (key_1005, value_1006) in var_1003 {
            {
                object_1004.key(key_1005).string(value_1006);
            }
        }
        object_1004.finish();
    }
    if let Some(var_1007) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1007).into()),
        );
    }
    if let Some(var_1008) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_1008);
    }
    if let Some(var_1009) = &input.notification_property {
        let mut object_1010 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_1010,
            var_1009,
        )?;
        object_1010.finish();
    }
    if let Some(var_1011) = &input.crawler_name {
        object.key("CrawlerName").string(var_1011);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event_batching_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventBatchingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.batch_size).into()),
        );
    }
    if let Some(var_1012) = &input.batch_window {
        object.key("BatchWindow").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1012).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1013) = &input.function_name {
        object.key("FunctionName").string(var_1013);
    }
    if let Some(var_1014) = &input.class_name {
        object.key("ClassName").string(var_1014);
    }
    if let Some(var_1015) = &input.owner_name {
        object.key("OwnerName").string(var_1015);
    }
    if let Some(var_1016) = &input.owner_type {
        object.key("OwnerType").string(var_1016.as_str());
    }
    if let Some(var_1017) = &input.resource_uris {
        let mut array_1018 = object.key("ResourceUris").start_array();
        for item_1019 in var_1017 {
            {
                let mut object_1020 = array_1018.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_uri(
                    &mut object_1020,
                    item_1019,
                )?;
                object_1020.finish();
            }
        }
        array_1018.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1021) = &input.schema_arn {
        object.key("SchemaArn").string(var_1021);
    }
    if let Some(var_1022) = &input.schema_name {
        object.key("SchemaName").string(var_1022);
    }
    if let Some(var_1023) = &input.registry_name {
        object.key("RegistryName").string(var_1023);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_get_connections_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GetConnectionsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1024) = &input.match_criteria {
        let mut array_1025 = object.key("MatchCriteria").start_array();
        for item_1026 in var_1024 {
            {
                array_1025.value().string(item_1026);
            }
        }
        array_1025.finish();
    }
    if let Some(var_1027) = &input.connection_type {
        object.key("ConnectionType").string(var_1027.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1028) = &input.database_name {
        object.key("DatabaseName").string(var_1028);
    }
    if let Some(var_1029) = &input.table_name {
        object.key("TableName").string(var_1029);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1030) = &input.jdbc {
        let mut array_1031 = object.key("Jdbc").start_array();
        for item_1032 in var_1030 {
            {
                let mut object_1033 = array_1031.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1033,
                    item_1032,
                )?;
                object_1033.finish();
            }
        }
        array_1031.finish();
    }
    if let Some(var_1034) = &input.s3 {
        let mut array_1035 = object.key("S3").start_array();
        for item_1036 in var_1034 {
            {
                let mut object_1037 = array_1035.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1037,
                    item_1036,
                )?;
                object_1037.finish();
            }
        }
        array_1035.finish();
    }
    if let Some(var_1038) = &input.dynamo_db {
        let mut array_1039 = object.key("DynamoDB").start_array();
        for item_1040 in var_1038 {
            {
                let mut object_1041 = array_1039.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1041,
                    item_1040,
                )?;
                object_1041.finish();
            }
        }
        array_1039.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1042) = &input.task_run_type {
        object.key("TaskRunType").string(var_1042.as_str());
    }
    if let Some(var_1043) = &input.status {
        object.key("Status").string(var_1043.as_str());
    }
    if let Some(var_1044) = &input.started_before {
        object
            .key("StartedBefore")
            .date_time(var_1044, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1045) = &input.started_after {
        object
            .key("StartedAfter")
            .date_time(var_1045, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1046) = &input.column {
        object.key("Column").string(var_1046.as_str());
    }
    if let Some(var_1047) = &input.sort_direction {
        object.key("SortDirection").string(var_1047.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1048) = &input.name {
        object.key("Name").string(var_1048);
    }
    if let Some(var_1049) = &input.transform_type {
        object.key("TransformType").string(var_1049.as_str());
    }
    if let Some(var_1050) = &input.status {
        object.key("Status").string(var_1050.as_str());
    }
    if let Some(var_1051) = &input.glue_version {
        object.key("GlueVersion").string(var_1051);
    }
    if let Some(var_1052) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1052, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1053) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1053, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1054) = &input.last_modified_before {
        object
            .key("LastModifiedBefore")
            .date_time(var_1054, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1055) = &input.last_modified_after {
        object
            .key("LastModifiedAfter")
            .date_time(var_1055, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1056) = &input.schema {
        let mut array_1057 = object.key("Schema").start_array();
        for item_1058 in var_1056 {
            {
                let mut object_1059 = array_1057.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_column(
                    &mut object_1059,
                    item_1058,
                )?;
                object_1059.finish();
            }
        }
        array_1057.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1060) = &input.column {
        object.key("Column").string(var_1060.as_str());
    }
    if let Some(var_1061) = &input.sort_direction {
        object.key("SortDirection").string(var_1061.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_segment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Segment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("SegmentNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_number).into()),
        );
    }
    {
        object.key("TotalSegments").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_segments).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MappingEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1062) = &input.source_table {
        object.key("SourceTable").string(var_1062);
    }
    if let Some(var_1063) = &input.source_path {
        object.key("SourcePath").string(var_1063);
    }
    if let Some(var_1064) = &input.source_type {
        object.key("SourceType").string(var_1064);
    }
    if let Some(var_1065) = &input.target_table {
        object.key("TargetTable").string(var_1065);
    }
    if let Some(var_1066) = &input.target_path {
        object.key("TargetPath").string(var_1066);
    }
    if let Some(var_1067) = &input.target_type {
        object.key("TargetType").string(var_1067);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_version_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaVersionNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.latest_version {
        object.key("LatestVersion").boolean(input.latest_version);
    }
    if input.version_number != 0 {
        object.key("VersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.version_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1068) = &input.additional_audit_context {
        object.key("AdditionalAuditContext").string(var_1068);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_encryption_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogEncryptionSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1069) = &input.encryption_at_rest {
        let mut object_1070 = object.key("EncryptionAtRest").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_at_rest(
            &mut object_1070,
            var_1069,
        )?;
        object_1070.finish();
    }
    if let Some(var_1071) = &input.connection_password_encryption {
        let mut object_1072 = object.key("ConnectionPasswordEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_password_encryption(
            &mut object_1072,
            var_1071,
        )?;
        object_1072.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_key_value_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataKeyValuePair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1073) = &input.metadata_key {
        object.key("MetadataKey").string(var_1073);
    }
    if let Some(var_1074) = &input.metadata_value {
        object.key("MetadataValue").string(var_1074);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1075) = &input.key {
        object.key("Key").string(var_1075);
    }
    if let Some(var_1076) = &input.value {
        object.key("Value").string(var_1076);
    }
    if let Some(var_1077) = &input.comparator {
        object.key("Comparator").string(var_1077.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criterion(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1078) = &input.field_name {
        object.key("FieldName").string(var_1078);
    }
    if let Some(var_1079) = &input.sort {
        object.key("Sort").string(var_1079.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1080) = &input.name {
        object.key("Name").string(var_1080);
    }
    if let Some(var_1081) = &input.classification {
        object.key("Classification").string(var_1081);
    }
    if let Some(var_1082) = &input.grok_pattern {
        object.key("GrokPattern").string(var_1082);
    }
    if let Some(var_1083) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_1083);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1084) = &input.name {
        object.key("Name").string(var_1084);
    }
    if let Some(var_1085) = &input.classification {
        object.key("Classification").string(var_1085);
    }
    if let Some(var_1086) = &input.row_tag {
        object.key("RowTag").string(var_1086);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1087) = &input.name {
        object.key("Name").string(var_1087);
    }
    if let Some(var_1088) = &input.json_path {
        object.key("JsonPath").string(var_1088);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1089) = &input.name {
        object.key("Name").string(var_1089);
    }
    if let Some(var_1090) = &input.delimiter {
        object.key("Delimiter").string(var_1090);
    }
    if let Some(var_1091) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_1091);
    }
    if let Some(var_1092) = &input.contains_header {
        object.key("ContainsHeader").string(var_1092.as_str());
    }
    if let Some(var_1093) = &input.header {
        let mut array_1094 = object.key("Header").start_array();
        for item_1095 in var_1093 {
            {
                array_1094.value().string(item_1095);
            }
        }
        array_1094.finish();
    }
    if let Some(var_1096) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_1096);
    }
    if let Some(var_1097) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_1097);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatistics,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1098) = &input.column_name {
        object.key("ColumnName").string(var_1098);
    }
    if let Some(var_1099) = &input.column_type {
        object.key("ColumnType").string(var_1099);
    }
    if let Some(var_1100) = &input.analyzed_time {
        object
            .key("AnalyzedTime")
            .date_time(var_1100, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1101) = &input.statistics_data {
        let mut object_1102 = object.key("StatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_column_statistics_data(
            &mut object_1102,
            var_1101,
        )?;
        object_1102.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dev_endpoint_custom_libraries(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DevEndpointCustomLibraries,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1103) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_1103);
    }
    if let Some(var_1104) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_1104);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1105) = &input.description {
        object.key("Description").string(var_1105);
    }
    if let Some(var_1106) = &input.log_uri {
        object.key("LogUri").string(var_1106);
    }
    if let Some(var_1107) = &input.role {
        object.key("Role").string(var_1107);
    }
    if let Some(var_1108) = &input.execution_property {
        let mut object_1109 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_1109,
            var_1108,
        )?;
        object_1109.finish();
    }
    if let Some(var_1110) = &input.command {
        let mut object_1111 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_1111, var_1110)?;
        object_1111.finish();
    }
    if let Some(var_1112) = &input.default_arguments {
        let mut object_1113 = object.key("DefaultArguments").start_object();
        for (key_1114, value_1115) in var_1112 {
            {
                object_1113.key(key_1114).string(value_1115);
            }
        }
        object_1113.finish();
    }
    if let Some(var_1116) = &input.non_overridable_arguments {
        let mut object_1117 = object.key("NonOverridableArguments").start_object();
        for (key_1118, value_1119) in var_1116 {
            {
                object_1117.key(key_1118).string(value_1119);
            }
        }
        object_1117.finish();
    }
    if let Some(var_1120) = &input.connections {
        let mut object_1121 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_1121,
            var_1120,
        )?;
        object_1121.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_1122) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1122).into()),
        );
    }
    if let Some(var_1123) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1123).into()),
        );
    }
    if let Some(var_1124) = &input.worker_type {
        object.key("WorkerType").string(var_1124.as_str());
    }
    if let Some(var_1125) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1125).into()),
        );
    }
    if let Some(var_1126) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_1126);
    }
    if let Some(var_1127) = &input.notification_property {
        let mut object_1128 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_1128,
            var_1127,
        )?;
        object_1128.finish();
    }
    if let Some(var_1129) = &input.glue_version {
        object.key("GlueVersion").string(var_1129);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1130) = &input.name {
        object.key("Name").string(var_1130);
    }
    if let Some(var_1131) = &input.description {
        object.key("Description").string(var_1131);
    }
    if let Some(var_1132) = &input.schedule {
        object.key("Schedule").string(var_1132);
    }
    if let Some(var_1133) = &input.actions {
        let mut array_1134 = object.key("Actions").start_array();
        for item_1135 in var_1133 {
            {
                let mut object_1136 = array_1134.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(
                    &mut object_1136,
                    item_1135,
                )?;
                object_1136.finish();
            }
        }
        array_1134.finish();
    }
    if let Some(var_1137) = &input.predicate {
        let mut object_1138 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_1138, var_1137)?;
        object_1138.finish();
    }
    if let Some(var_1139) = &input.event_batching_condition {
        let mut object_1140 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_1140,
            var_1139,
        )?;
        object_1140.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1141) = &input.columns {
        let mut array_1142 = object.key("Columns").start_array();
        for item_1143 in var_1141 {
            {
                let mut object_1144 = array_1142.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(
                    &mut object_1144,
                    item_1143,
                )?;
                object_1144.finish();
            }
        }
        array_1142.finish();
    }
    if let Some(var_1145) = &input.location {
        object.key("Location").string(var_1145);
    }
    if let Some(var_1146) = &input.additional_locations {
        let mut array_1147 = object.key("AdditionalLocations").start_array();
        for item_1148 in var_1146 {
            {
                array_1147.value().string(item_1148);
            }
        }
        array_1147.finish();
    }
    if let Some(var_1149) = &input.input_format {
        object.key("InputFormat").string(var_1149);
    }
    if let Some(var_1150) = &input.output_format {
        object.key("OutputFormat").string(var_1150);
    }
    if input.compressed {
        object.key("Compressed").boolean(input.compressed);
    }
    if input.number_of_buckets != 0 {
        object.key("NumberOfBuckets").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_buckets).into()),
        );
    }
    if let Some(var_1151) = &input.serde_info {
        let mut object_1152 = object.key("SerdeInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_ser_de_info(&mut object_1152, var_1151)?;
        object_1152.finish();
    }
    if let Some(var_1153) = &input.bucket_columns {
        let mut array_1154 = object.key("BucketColumns").start_array();
        for item_1155 in var_1153 {
            {
                array_1154.value().string(item_1155);
            }
        }
        array_1154.finish();
    }
    if let Some(var_1156) = &input.sort_columns {
        let mut array_1157 = object.key("SortColumns").start_array();
        for item_1158 in var_1156 {
            {
                let mut object_1159 = array_1157.value().start_object();
                crate::json_ser::serialize_structure_crate_model_order(
                    &mut object_1159,
                    item_1158,
                )?;
                object_1159.finish();
            }
        }
        array_1157.finish();
    }
    if let Some(var_1160) = &input.parameters {
        let mut object_1161 = object.key("Parameters").start_object();
        for (key_1162, value_1163) in var_1160 {
            {
                object_1161.key(key_1162).string(value_1163);
            }
        }
        object_1161.finish();
    }
    if let Some(var_1164) = &input.skewed_info {
        let mut object_1165 = object.key("SkewedInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_skewed_info(&mut object_1165, var_1164)?;
        object_1165.finish();
    }
    if input.stored_as_sub_directories {
        object
            .key("StoredAsSubDirectories")
            .boolean(input.stored_as_sub_directories);
    }
    if let Some(var_1166) = &input.schema_reference {
        let mut object_1167 = object.key("SchemaReference").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_reference(
            &mut object_1167,
            var_1166,
        )?;
        object_1167.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_physical_connection_requirements(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalConnectionRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1168) = &input.subnet_id {
        object.key("SubnetId").string(var_1168);
    }
    if let Some(var_1169) = &input.security_group_id_list {
        let mut array_1170 = object.key("SecurityGroupIdList").start_array();
        for item_1171 in var_1169 {
            {
                array_1170.value().string(item_1171);
            }
        }
        array_1170.finish();
    }
    if let Some(var_1172) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1172);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Target,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1173) = &input.path {
        object.key("Path").string(var_1173);
    }
    if let Some(var_1174) = &input.exclusions {
        let mut array_1175 = object.key("Exclusions").start_array();
        for item_1176 in var_1174 {
            {
                array_1175.value().string(item_1176);
            }
        }
        array_1175.finish();
    }
    if let Some(var_1177) = &input.connection_name {
        object.key("ConnectionName").string(var_1177);
    }
    if let Some(var_1178) = &input.sample_size {
        object.key("SampleSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1178).into()),
        );
    }
    if let Some(var_1179) = &input.event_queue_arn {
        object.key("EventQueueArn").string(var_1179);
    }
    if let Some(var_1180) = &input.dlq_event_queue_arn {
        object.key("DlqEventQueueArn").string(var_1180);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1181) = &input.connection_name {
        object.key("ConnectionName").string(var_1181);
    }
    if let Some(var_1182) = &input.path {
        object.key("Path").string(var_1182);
    }
    if let Some(var_1183) = &input.exclusions {
        let mut array_1184 = object.key("Exclusions").start_array();
        for item_1185 in var_1183 {
            {
                array_1184.value().string(item_1185);
            }
        }
        array_1184.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mongo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MongoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1186) = &input.connection_name {
        object.key("ConnectionName").string(var_1186);
    }
    if let Some(var_1187) = &input.path {
        object.key("Path").string(var_1187);
    }
    if let Some(var_1188) = &input.scan_all {
        object.key("ScanAll").boolean(*var_1188);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1189) = &input.path {
        object.key("Path").string(var_1189);
    }
    if let Some(var_1190) = &input.scan_all {
        object.key("scanAll").boolean(*var_1190);
    }
    if let Some(var_1191) = &input.scan_rate {
        object.key("scanRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1191).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1192) = &input.database_name {
        object.key("DatabaseName").string(var_1192);
    }
    if let Some(var_1193) = &input.tables {
        let mut array_1194 = object.key("Tables").start_array();
        for item_1195 in var_1193 {
            {
                array_1194.value().string(item_1195);
            }
        }
        array_1194.finish();
    }
    if let Some(var_1196) = &input.connection_name {
        object.key("ConnectionName").string(var_1196);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delta_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeltaTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1197) = &input.delta_tables {
        let mut array_1198 = object.key("DeltaTables").start_array();
        for item_1199 in var_1197 {
            {
                array_1198.value().string(item_1199);
            }
        }
        array_1198.finish();
    }
    if let Some(var_1200) = &input.connection_name {
        object.key("ConnectionName").string(var_1200);
    }
    if let Some(var_1201) = &input.write_manifest {
        object.key("WriteManifest").boolean(*var_1201);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal_permissions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrincipalPermissions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1202) = &input.principal {
        let mut object_1203 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_crate_model_data_lake_principal(
            &mut object_1203,
            var_1202,
        )?;
        object_1203.finish();
    }
    if let Some(var_1204) = &input.permissions {
        let mut array_1205 = object.key("Permissions").start_array();
        for item_1206 in var_1204 {
            {
                array_1205.value().string(item_1206.as_str());
            }
        }
        array_1205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1207) = &input.catalog_id {
        object.key("CatalogId").string(var_1207);
    }
    if let Some(var_1208) = &input.database_name {
        object.key("DatabaseName").string(var_1208);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_find_matches_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindMatchesParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1209) = &input.primary_key_column_name {
        object.key("PrimaryKeyColumnName").string(var_1209);
    }
    if let Some(var_1210) = &input.precision_recall_tradeoff {
        object.key("PrecisionRecallTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1210).into()),
        );
    }
    if let Some(var_1211) = &input.accuracy_cost_tradeoff {
        object.key("AccuracyCostTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1211).into()),
        );
    }
    if let Some(var_1212) = &input.enforce_provided_labels {
        object.key("EnforceProvidedLabels").boolean(*var_1212);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ml_user_data_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MlUserDataEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1213) = &input.ml_user_data_encryption_mode {
        object
            .key("MlUserDataEncryptionMode")
            .string(var_1213.as_str());
    }
    if let Some(var_1214) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1214);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node_arg(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNodeArg,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1215) = &input.name {
        object.key("Name").string(var_1215);
    }
    if let Some(var_1216) = &input.value {
        object.key("Value").string(var_1216);
    }
    if input.param {
        object.key("Param").boolean(input.param);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Encryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1217) = &input.s3_encryption_mode {
        object.key("S3EncryptionMode").string(var_1217.as_str());
    }
    if let Some(var_1218) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1218);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1219) = &input.cloud_watch_encryption_mode {
        object
            .key("CloudWatchEncryptionMode")
            .string(var_1219.as_str());
    }
    if let Some(var_1220) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1220);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_bookmarks_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobBookmarksEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1221) = &input.job_bookmarks_encryption_mode {
        object
            .key("JobBookmarksEncryptionMode")
            .string(var_1221.as_str());
    }
    if let Some(var_1222) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1222);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Column,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1223) = &input.name {
        object.key("Name").string(var_1223);
    }
    if let Some(var_1224) = &input.r#type {
        object.key("Type").string(var_1224);
    }
    if let Some(var_1225) = &input.comment {
        object.key("Comment").string(var_1225);
    }
    if let Some(var_1226) = &input.parameters {
        let mut object_1227 = object.key("Parameters").start_object();
        for (key_1228, value_1229) in var_1226 {
            {
                object_1227.key(key_1228).string(value_1229);
            }
        }
        object_1227.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1230) = &input.catalog_id {
        object.key("CatalogId").string(var_1230);
    }
    if let Some(var_1231) = &input.database_name {
        object.key("DatabaseName").string(var_1231);
    }
    if let Some(var_1232) = &input.name {
        object.key("Name").string(var_1232);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1233) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1233.as_str());
    }
    if let Some(var_1234) = &input.job_name {
        object.key("JobName").string(var_1234);
    }
    if let Some(var_1235) = &input.state {
        object.key("State").string(var_1235.as_str());
    }
    if let Some(var_1236) = &input.crawler_name {
        object.key("CrawlerName").string(var_1236);
    }
    if let Some(var_1237) = &input.crawl_state {
        object.key("CrawlState").string(var_1237.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_uri(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceUri,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1238) = &input.resource_type {
        object.key("ResourceType").string(var_1238.as_str());
    }
    if let Some(var_1239) = &input.uri {
        object.key("Uri").string(var_1239);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1240) = &input.name {
        object.key("Name").string(var_1240);
    }
    if let Some(var_1241) = &input.data_type {
        object.key("DataType").string(var_1241);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_at_rest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionAtRest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1242) = &input.catalog_encryption_mode {
        object
            .key("CatalogEncryptionMode")
            .string(var_1242.as_str());
    }
    if let Some(var_1243) = &input.sse_aws_kms_key_id {
        object.key("SseAwsKmsKeyId").string(var_1243);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_password_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionPasswordEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("ReturnConnectionPasswordEncrypted")
            .boolean(input.return_connection_password_encrypted);
    }
    if let Some(var_1244) = &input.aws_kms_key_id {
        object.key("AwsKmsKeyId").string(var_1244);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1245) = &input.r#type {
        object.key("Type").string(var_1245.as_str());
    }
    if let Some(var_1246) = &input.boolean_column_statistics_data {
        let mut object_1247 = object.key("BooleanColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_boolean_column_statistics_data(
            &mut object_1247,
            var_1246,
        )?;
        object_1247.finish();
    }
    if let Some(var_1248) = &input.date_column_statistics_data {
        let mut object_1249 = object.key("DateColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_date_column_statistics_data(
            &mut object_1249,
            var_1248,
        )?;
        object_1249.finish();
    }
    if let Some(var_1250) = &input.decimal_column_statistics_data {
        let mut object_1251 = object.key("DecimalColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_column_statistics_data(
            &mut object_1251,
            var_1250,
        )?;
        object_1251.finish();
    }
    if let Some(var_1252) = &input.double_column_statistics_data {
        let mut object_1253 = object.key("DoubleColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_double_column_statistics_data(
            &mut object_1253,
            var_1252,
        )?;
        object_1253.finish();
    }
    if let Some(var_1254) = &input.long_column_statistics_data {
        let mut object_1255 = object.key("LongColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_long_column_statistics_data(
            &mut object_1255,
            var_1254,
        )?;
        object_1255.finish();
    }
    if let Some(var_1256) = &input.string_column_statistics_data {
        let mut object_1257 = object.key("StringColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_string_column_statistics_data(
            &mut object_1257,
            var_1256,
        )?;
        object_1257.finish();
    }
    if let Some(var_1258) = &input.binary_column_statistics_data {
        let mut object_1259 = object.key("BinaryColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_binary_column_statistics_data(
            &mut object_1259,
            var_1258,
        )?;
        object_1259.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ser_de_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SerDeInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1260) = &input.name {
        object.key("Name").string(var_1260);
    }
    if let Some(var_1261) = &input.serialization_library {
        object.key("SerializationLibrary").string(var_1261);
    }
    if let Some(var_1262) = &input.parameters {
        let mut object_1263 = object.key("Parameters").start_object();
        for (key_1264, value_1265) in var_1262 {
            {
                object_1263.key(key_1264).string(value_1265);
            }
        }
        object_1263.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_order(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Order,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1266) = &input.column {
        object.key("Column").string(var_1266);
    }
    {
        object.key("SortOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sort_order).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_skewed_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SkewedInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1267) = &input.skewed_column_names {
        let mut array_1268 = object.key("SkewedColumnNames").start_array();
        for item_1269 in var_1267 {
            {
                array_1268.value().string(item_1269);
            }
        }
        array_1268.finish();
    }
    if let Some(var_1270) = &input.skewed_column_values {
        let mut array_1271 = object.key("SkewedColumnValues").start_array();
        for item_1272 in var_1270 {
            {
                array_1271.value().string(item_1272);
            }
        }
        array_1271.finish();
    }
    if let Some(var_1273) = &input.skewed_column_value_location_maps {
        let mut object_1274 = object.key("SkewedColumnValueLocationMaps").start_object();
        for (key_1275, value_1276) in var_1273 {
            {
                object_1274.key(key_1275).string(value_1276);
            }
        }
        object_1274.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1277) = &input.schema_id {
        let mut object_1278 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_1278, var_1277)?;
        object_1278.finish();
    }
    if let Some(var_1279) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_1279);
    }
    if let Some(var_1280) = &input.schema_version_number {
        object.key("SchemaVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1280).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_lake_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataLakePrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1281) = &input.data_lake_principal_identifier {
        object.key("DataLakePrincipalIdentifier").string(var_1281);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_boolean_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BooleanColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("NumberOfTrues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_trues).into()),
        );
    }
    {
        object.key("NumberOfFalses").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_falses).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1282) = &input.minimum_value {
        object
            .key("MinimumValue")
            .date_time(var_1282, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1283) = &input.maximum_value {
        object
            .key("MaximumValue")
            .date_time(var_1283, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1284) = &input.minimum_value {
        let mut object_1285 = object.key("MinimumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_1285,
            var_1284,
        )?;
        object_1285.finish();
    }
    if let Some(var_1286) = &input.maximum_value {
        let mut object_1287 = object.key("MaximumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_1287,
            var_1286,
        )?;
        object_1287.finish();
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_double_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DoubleColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0.0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0.0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_long_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LongColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_binary_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BinaryColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1288) = &input.unscaled_value {
        object
            .key("UnscaledValue")
            .string_unchecked(&aws_smithy_types::base64::encode(var_1288));
    }
    {
        object.key("Scale").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.scale).into()),
        );
    }
    Ok(())
}
