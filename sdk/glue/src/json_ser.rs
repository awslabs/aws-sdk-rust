// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.database_name {
        object.key("DatabaseName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.table_name {
        object.key("TableName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.partition_input_list {
        let mut array_5 = object.key("PartitionInputList").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_input(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.catalog_id {
        object.key("CatalogId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.connection_name_list {
        let mut array_10 = object.key("ConnectionNameList").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.catalog_id {
        object.key("CatalogId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.database_name {
        object.key("DatabaseName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.table_name {
        object.key("TableName").string(var_14.as_str());
    }
    if let Some(var_15) = &input.partitions_to_delete {
        let mut array_16 = object.key("PartitionsToDelete").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.catalog_id {
        object.key("CatalogId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.database_name {
        object.key("DatabaseName").string(var_20.as_str());
    }
    if let Some(var_21) = &input.tables_to_delete {
        let mut array_22 = object.key("TablesToDelete").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.transaction_id {
        object.key("TransactionId").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.catalog_id {
        object.key("CatalogId").string(var_25.as_str());
    }
    if let Some(var_26) = &input.database_name {
        object.key("DatabaseName").string(var_26.as_str());
    }
    if let Some(var_27) = &input.table_name {
        object.key("TableName").string(var_27.as_str());
    }
    if let Some(var_28) = &input.version_ids {
        let mut array_29 = object.key("VersionIds").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.names {
        let mut array_32 = object.key("Names").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33.as_str());
            }
        }
        array_32.finish();
    }
    if let Some(var_34) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_34);
    }
    if let Some(var_35) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_35);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.crawler_names {
        let mut array_37 = object.key("CrawlerNames").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.dev_endpoint_names {
        let mut array_40 = object.key("DevEndpointNames").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41.as_str());
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.job_names {
        let mut array_43 = object.key("JobNames").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.catalog_id {
        object.key("CatalogId").string(var_45.as_str());
    }
    if let Some(var_46) = &input.database_name {
        object.key("DatabaseName").string(var_46.as_str());
    }
    if let Some(var_47) = &input.table_name {
        object.key("TableName").string(var_47.as_str());
    }
    if let Some(var_48) = &input.partitions_to_get {
        let mut array_49 = object.key("PartitionsToGet").start_array();
        for item_50 in var_48 {
            {
                let mut object_51 = array_49.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_51,
                    item_50,
                )?;
                object_51.finish();
            }
        }
        array_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.trigger_names {
        let mut array_53 = object.key("TriggerNames").start_array();
        for item_54 in var_52 {
            {
                array_53.value().string(item_54.as_str());
            }
        }
        array_53.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.names {
        let mut array_56 = object.key("Names").start_array();
        for item_57 in var_55 {
            {
                array_56.value().string(item_57.as_str());
            }
        }
        array_56.finish();
    }
    if let Some(var_58) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_58);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_stop_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchStopJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.job_name {
        object.key("JobName").string(var_59.as_str());
    }
    if let Some(var_60) = &input.job_run_ids {
        let mut array_61 = object.key("JobRunIds").start_array();
        for item_62 in var_60 {
            {
                array_61.value().string(item_62.as_str());
            }
        }
        array_61.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.catalog_id {
        object.key("CatalogId").string(var_63.as_str());
    }
    if let Some(var_64) = &input.database_name {
        object.key("DatabaseName").string(var_64.as_str());
    }
    if let Some(var_65) = &input.table_name {
        object.key("TableName").string(var_65.as_str());
    }
    if let Some(var_66) = &input.entries {
        let mut array_67 = object.key("Entries").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_update_partition_request_entry(&mut object_69, item_68)?;
                object_69.finish();
            }
        }
        array_67.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.transform_id {
        object.key("TransformId").string(var_70.as_str());
    }
    if let Some(var_71) = &input.task_run_id {
        object.key("TaskRunId").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.session_id {
        object.key("SessionId").string(var_72.as_str());
    }
    {
        object.key("Id").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.id).into()),
        );
    }
    if let Some(var_73) = &input.request_origin {
        object.key("RequestOrigin").string(var_73.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_check_schema_version_validity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckSchemaVersionValidityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.data_format {
        object.key("DataFormat").string(var_74.as_str());
    }
    if let Some(var_75) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_75.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.name {
        object.key("Name").string(var_76.as_str());
    }
    if let Some(var_77) = &input.description {
        object.key("Description").string(var_77.as_str());
    }
    if let Some(var_78) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_78.as_str());
    }
    if let Some(var_79) = &input.tags {
        let mut object_80 = object.key("Tags").start_object();
        for (key_81, value_82) in var_79 {
            {
                object_80.key(key_81).string(value_82.as_str());
            }
        }
        object_80.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.grok_classifier {
        let mut object_84 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_grok_classifier_request(
            &mut object_84,
            var_83,
        )?;
        object_84.finish();
    }
    if let Some(var_85) = &input.xml_classifier {
        let mut object_86 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_xml_classifier_request(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    if let Some(var_87) = &input.json_classifier {
        let mut object_88 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_json_classifier_request(
            &mut object_88,
            var_87,
        )?;
        object_88.finish();
    }
    if let Some(var_89) = &input.csv_classifier {
        let mut object_90 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_csv_classifier_request(
            &mut object_90,
            var_89,
        )?;
        object_90.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.catalog_id {
        object.key("CatalogId").string(var_91.as_str());
    }
    if let Some(var_92) = &input.connection_input {
        let mut object_93 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(&mut object_93, var_92)?;
        object_93.finish();
    }
    if let Some(var_94) = &input.tags {
        let mut object_95 = object.key("Tags").start_object();
        for (key_96, value_97) in var_94 {
            {
                object_95.key(key_96).string(value_97.as_str());
            }
        }
        object_95.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.name {
        object.key("Name").string(var_98.as_str());
    }
    if let Some(var_99) = &input.role {
        object.key("Role").string(var_99.as_str());
    }
    if let Some(var_100) = &input.database_name {
        object.key("DatabaseName").string(var_100.as_str());
    }
    if let Some(var_101) = &input.description {
        object.key("Description").string(var_101.as_str());
    }
    if let Some(var_102) = &input.targets {
        let mut object_103 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_103, var_102)?;
        object_103.finish();
    }
    if let Some(var_104) = &input.schedule {
        object.key("Schedule").string(var_104.as_str());
    }
    if let Some(var_105) = &input.classifiers {
        let mut array_106 = object.key("Classifiers").start_array();
        for item_107 in var_105 {
            {
                array_106.value().string(item_107.as_str());
            }
        }
        array_106.finish();
    }
    if let Some(var_108) = &input.table_prefix {
        object.key("TablePrefix").string(var_108.as_str());
    }
    if let Some(var_109) = &input.schema_change_policy {
        let mut object_110 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_110,
            var_109,
        )?;
        object_110.finish();
    }
    if let Some(var_111) = &input.recrawl_policy {
        let mut object_112 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_112, var_111)?;
        object_112.finish();
    }
    if let Some(var_113) = &input.lineage_configuration {
        let mut object_114 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    if let Some(var_115) = &input.lake_formation_configuration {
        let mut object_116 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(
            &mut object_116,
            var_115,
        )?;
        object_116.finish();
    }
    if let Some(var_117) = &input.configuration {
        object.key("Configuration").string(var_117.as_str());
    }
    if let Some(var_118) = &input.crawler_security_configuration {
        object
            .key("CrawlerSecurityConfiguration")
            .string(var_118.as_str());
    }
    if let Some(var_119) = &input.tags {
        let mut object_120 = object.key("Tags").start_object();
        for (key_121, value_122) in var_119 {
            {
                object_120.key(key_121).string(value_122.as_str());
            }
        }
        object_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.catalog_id {
        object.key("CatalogId").string(var_123.as_str());
    }
    if let Some(var_124) = &input.database_input {
        let mut object_125 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_125, var_124)?;
        object_125.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.endpoint_name {
        object.key("EndpointName").string(var_126.as_str());
    }
    if let Some(var_127) = &input.role_arn {
        object.key("RoleArn").string(var_127.as_str());
    }
    if let Some(var_128) = &input.security_group_ids {
        let mut array_129 = object.key("SecurityGroupIds").start_array();
        for item_130 in var_128 {
            {
                array_129.value().string(item_130.as_str());
            }
        }
        array_129.finish();
    }
    if let Some(var_131) = &input.subnet_id {
        object.key("SubnetId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.public_key {
        object.key("PublicKey").string(var_132.as_str());
    }
    if let Some(var_133) = &input.public_keys {
        let mut array_134 = object.key("PublicKeys").start_array();
        for item_135 in var_133 {
            {
                array_134.value().string(item_135.as_str());
            }
        }
        array_134.finish();
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_136) = &input.worker_type {
        object.key("WorkerType").string(var_136.as_str());
    }
    if let Some(var_137) = &input.glue_version {
        object.key("GlueVersion").string(var_137.as_str());
    }
    if let Some(var_138) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    if let Some(var_139) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_139.as_str());
    }
    if let Some(var_140) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_140.as_str());
    }
    if let Some(var_141) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_141.as_str());
    }
    if let Some(var_142) = &input.tags {
        let mut object_143 = object.key("Tags").start_object();
        for (key_144, value_145) in var_142 {
            {
                object_143.key(key_144).string(value_145.as_str());
            }
        }
        object_143.finish();
    }
    if let Some(var_146) = &input.arguments {
        let mut object_147 = object.key("Arguments").start_object();
        for (key_148, value_149) in var_146 {
            {
                object_147.key(key_148).string(value_149.as_str());
            }
        }
        object_147.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.name {
        object.key("Name").string(var_150.as_str());
    }
    if let Some(var_151) = &input.description {
        object.key("Description").string(var_151.as_str());
    }
    if let Some(var_152) = &input.log_uri {
        object.key("LogUri").string(var_152.as_str());
    }
    if let Some(var_153) = &input.role {
        object.key("Role").string(var_153.as_str());
    }
    if let Some(var_154) = &input.execution_property {
        let mut object_155 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_155,
            var_154,
        )?;
        object_155.finish();
    }
    if let Some(var_156) = &input.command {
        let mut object_157 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_157, var_156)?;
        object_157.finish();
    }
    if let Some(var_158) = &input.default_arguments {
        let mut object_159 = object.key("DefaultArguments").start_object();
        for (key_160, value_161) in var_158 {
            {
                object_159.key(key_160).string(value_161.as_str());
            }
        }
        object_159.finish();
    }
    if let Some(var_162) = &input.non_overridable_arguments {
        let mut object_163 = object.key("NonOverridableArguments").start_object();
        for (key_164, value_165) in var_162 {
            {
                object_163.key(key_164).string(value_165.as_str());
            }
        }
        object_163.finish();
    }
    if let Some(var_166) = &input.connections {
        let mut object_167 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_167,
            var_166,
        )?;
        object_167.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_168) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    if let Some(var_169) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_169).into()),
        );
    }
    if let Some(var_170) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_170.as_str());
    }
    if let Some(var_171) = &input.tags {
        let mut object_172 = object.key("Tags").start_object();
        for (key_173, value_174) in var_171 {
            {
                object_172.key(key_173).string(value_174.as_str());
            }
        }
        object_172.finish();
    }
    if let Some(var_175) = &input.notification_property {
        let mut object_176 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_176,
            var_175,
        )?;
        object_176.finish();
    }
    if let Some(var_177) = &input.glue_version {
        object.key("GlueVersion").string(var_177.as_str());
    }
    if let Some(var_178) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_178).into()),
        );
    }
    if let Some(var_179) = &input.worker_type {
        object.key("WorkerType").string(var_179.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.name {
        object.key("Name").string(var_180.as_str());
    }
    if let Some(var_181) = &input.description {
        object.key("Description").string(var_181.as_str());
    }
    if let Some(var_182) = &input.input_record_tables {
        let mut array_183 = object.key("InputRecordTables").start_array();
        for item_184 in var_182 {
            {
                let mut object_185 = array_183.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_table(
                    &mut object_185,
                    item_184,
                )?;
                object_185.finish();
            }
        }
        array_183.finish();
    }
    if let Some(var_186) = &input.parameters {
        let mut object_187 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_187,
            var_186,
        )?;
        object_187.finish();
    }
    if let Some(var_188) = &input.role {
        object.key("Role").string(var_188.as_str());
    }
    if let Some(var_189) = &input.glue_version {
        object.key("GlueVersion").string(var_189.as_str());
    }
    if let Some(var_190) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_190).into()),
        );
    }
    if let Some(var_191) = &input.worker_type {
        object.key("WorkerType").string(var_191.as_str());
    }
    if let Some(var_192) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_192).into()),
        );
    }
    if let Some(var_193) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_193).into()),
        );
    }
    if let Some(var_194) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_194).into()),
        );
    }
    if let Some(var_195) = &input.tags {
        let mut object_196 = object.key("Tags").start_object();
        for (key_197, value_198) in var_195 {
            {
                object_196.key(key_197).string(value_198.as_str());
            }
        }
        object_196.finish();
    }
    if let Some(var_199) = &input.transform_encryption {
        let mut object_200 = object.key("TransformEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_encryption(
            &mut object_200,
            var_199,
        )?;
        object_200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.catalog_id {
        object.key("CatalogId").string(var_201.as_str());
    }
    if let Some(var_202) = &input.database_name {
        object.key("DatabaseName").string(var_202.as_str());
    }
    if let Some(var_203) = &input.table_name {
        object.key("TableName").string(var_203.as_str());
    }
    if let Some(var_204) = &input.partition_input {
        let mut object_205 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_205, var_204)?;
        object_205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_206) = &input.catalog_id {
        object.key("CatalogId").string(var_206.as_str());
    }
    if let Some(var_207) = &input.database_name {
        object.key("DatabaseName").string(var_207.as_str());
    }
    if let Some(var_208) = &input.table_name {
        object.key("TableName").string(var_208.as_str());
    }
    if let Some(var_209) = &input.partition_index {
        let mut object_210 = object.key("PartitionIndex").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_index(&mut object_210, var_209)?;
        object_210.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.registry_name {
        object.key("RegistryName").string(var_211.as_str());
    }
    if let Some(var_212) = &input.description {
        object.key("Description").string(var_212.as_str());
    }
    if let Some(var_213) = &input.tags {
        let mut object_214 = object.key("Tags").start_object();
        for (key_215, value_216) in var_213 {
            {
                object_214.key(key_215).string(value_216.as_str());
            }
        }
        object_214.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_217) = &input.registry_id {
        let mut object_218 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_218, var_217)?;
        object_218.finish();
    }
    if let Some(var_219) = &input.schema_name {
        object.key("SchemaName").string(var_219.as_str());
    }
    if let Some(var_220) = &input.data_format {
        object.key("DataFormat").string(var_220.as_str());
    }
    if let Some(var_221) = &input.compatibility {
        object.key("Compatibility").string(var_221.as_str());
    }
    if let Some(var_222) = &input.description {
        object.key("Description").string(var_222.as_str());
    }
    if let Some(var_223) = &input.tags {
        let mut object_224 = object.key("Tags").start_object();
        for (key_225, value_226) in var_223 {
            {
                object_224.key(key_225).string(value_226.as_str());
            }
        }
        object_224.finish();
    }
    if let Some(var_227) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_227.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_script_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateScriptInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.dag_nodes {
        let mut array_229 = object.key("DagNodes").start_array();
        for item_230 in var_228 {
            {
                let mut object_231 = array_229.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node(
                    &mut object_231,
                    item_230,
                )?;
                object_231.finish();
            }
        }
        array_229.finish();
    }
    if let Some(var_232) = &input.dag_edges {
        let mut array_233 = object.key("DagEdges").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_edge(
                    &mut object_235,
                    item_234,
                )?;
                object_235.finish();
            }
        }
        array_233.finish();
    }
    if let Some(var_236) = &input.language {
        object.key("Language").string(var_236.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_237) = &input.name {
        object.key("Name").string(var_237.as_str());
    }
    if let Some(var_238) = &input.encryption_configuration {
        let mut object_239 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(
            &mut object_239,
            var_238,
        )?;
        object_239.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_240) = &input.id {
        object.key("Id").string(var_240.as_str());
    }
    if let Some(var_241) = &input.description {
        object.key("Description").string(var_241.as_str());
    }
    if let Some(var_242) = &input.role {
        object.key("Role").string(var_242.as_str());
    }
    if let Some(var_243) = &input.command {
        let mut object_244 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_session_command(&mut object_244, var_243)?;
        object_244.finish();
    }
    if let Some(var_245) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_245).into()),
        );
    }
    if let Some(var_246) = &input.idle_timeout {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_246).into()),
        );
    }
    if let Some(var_247) = &input.default_arguments {
        let mut object_248 = object.key("DefaultArguments").start_object();
        for (key_249, value_250) in var_247 {
            {
                object_248.key(key_249).string(value_250.as_str());
            }
        }
        object_248.finish();
    }
    if let Some(var_251) = &input.connections {
        let mut object_252 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_252,
            var_251,
        )?;
        object_252.finish();
    }
    if let Some(var_253) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_253).into()),
        );
    }
    if let Some(var_254) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_254).into()),
        );
    }
    if let Some(var_255) = &input.worker_type {
        object.key("WorkerType").string(var_255.as_str());
    }
    if let Some(var_256) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_256.as_str());
    }
    if let Some(var_257) = &input.glue_version {
        object.key("GlueVersion").string(var_257.as_str());
    }
    if let Some(var_258) = &input.tags {
        let mut object_259 = object.key("Tags").start_object();
        for (key_260, value_261) in var_258 {
            {
                object_259.key(key_260).string(value_261.as_str());
            }
        }
        object_259.finish();
    }
    if let Some(var_262) = &input.request_origin {
        object.key("RequestOrigin").string(var_262.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.catalog_id {
        object.key("CatalogId").string(var_263.as_str());
    }
    if let Some(var_264) = &input.database_name {
        object.key("DatabaseName").string(var_264.as_str());
    }
    if let Some(var_265) = &input.table_input {
        let mut object_266 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_266, var_265)?;
        object_266.finish();
    }
    if let Some(var_267) = &input.partition_indexes {
        let mut array_268 = object.key("PartitionIndexes").start_array();
        for item_269 in var_267 {
            {
                let mut object_270 = array_268.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_index(
                    &mut object_270,
                    item_269,
                )?;
                object_270.finish();
            }
        }
        array_268.finish();
    }
    if let Some(var_271) = &input.transaction_id {
        object.key("TransactionId").string(var_271.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.name {
        object.key("Name").string(var_272.as_str());
    }
    if let Some(var_273) = &input.workflow_name {
        object.key("WorkflowName").string(var_273.as_str());
    }
    if let Some(var_274) = &input.r#type {
        object.key("Type").string(var_274.as_str());
    }
    if let Some(var_275) = &input.schedule {
        object.key("Schedule").string(var_275.as_str());
    }
    if let Some(var_276) = &input.predicate {
        let mut object_277 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_277, var_276)?;
        object_277.finish();
    }
    if let Some(var_278) = &input.actions {
        let mut array_279 = object.key("Actions").start_array();
        for item_280 in var_278 {
            {
                let mut object_281 = array_279.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_281, item_280)?;
                object_281.finish();
            }
        }
        array_279.finish();
    }
    if let Some(var_282) = &input.description {
        object.key("Description").string(var_282.as_str());
    }
    if input.start_on_creation {
        object
            .key("StartOnCreation")
            .boolean(input.start_on_creation);
    }
    if let Some(var_283) = &input.tags {
        let mut object_284 = object.key("Tags").start_object();
        for (key_285, value_286) in var_283 {
            {
                object_284.key(key_285).string(value_286.as_str());
            }
        }
        object_284.finish();
    }
    if let Some(var_287) = &input.event_batching_condition {
        let mut object_288 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_288,
            var_287,
        )?;
        object_288.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.catalog_id {
        object.key("CatalogId").string(var_289.as_str());
    }
    if let Some(var_290) = &input.database_name {
        object.key("DatabaseName").string(var_290.as_str());
    }
    if let Some(var_291) = &input.function_input {
        let mut object_292 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_292,
            var_291,
        )?;
        object_292.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.name {
        object.key("Name").string(var_293.as_str());
    }
    if let Some(var_294) = &input.description {
        object.key("Description").string(var_294.as_str());
    }
    if let Some(var_295) = &input.default_run_properties {
        let mut object_296 = object.key("DefaultRunProperties").start_object();
        for (key_297, value_298) in var_295 {
            {
                object_296.key(key_297).string(value_298.as_str());
            }
        }
        object_296.finish();
    }
    if let Some(var_299) = &input.tags {
        let mut object_300 = object.key("Tags").start_object();
        for (key_301, value_302) in var_299 {
            {
                object_300.key(key_301).string(value_302.as_str());
            }
        }
        object_300.finish();
    }
    if let Some(var_303) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_303).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_304) = &input.name {
        object.key("Name").string(var_304.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.name {
        object.key("Name").string(var_305.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_306) = &input.catalog_id {
        object.key("CatalogId").string(var_306.as_str());
    }
    if let Some(var_307) = &input.database_name {
        object.key("DatabaseName").string(var_307.as_str());
    }
    if let Some(var_308) = &input.table_name {
        object.key("TableName").string(var_308.as_str());
    }
    if let Some(var_309) = &input.partition_values {
        let mut array_310 = object.key("PartitionValues").start_array();
        for item_311 in var_309 {
            {
                array_310.value().string(item_311.as_str());
            }
        }
        array_310.finish();
    }
    if let Some(var_312) = &input.column_name {
        object.key("ColumnName").string(var_312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_313) = &input.catalog_id {
        object.key("CatalogId").string(var_313.as_str());
    }
    if let Some(var_314) = &input.database_name {
        object.key("DatabaseName").string(var_314.as_str());
    }
    if let Some(var_315) = &input.table_name {
        object.key("TableName").string(var_315.as_str());
    }
    if let Some(var_316) = &input.column_name {
        object.key("ColumnName").string(var_316.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_317) = &input.catalog_id {
        object.key("CatalogId").string(var_317.as_str());
    }
    if let Some(var_318) = &input.connection_name {
        object.key("ConnectionName").string(var_318.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.name {
        object.key("Name").string(var_319.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_320) = &input.catalog_id {
        object.key("CatalogId").string(var_320.as_str());
    }
    if let Some(var_321) = &input.name {
        object.key("Name").string(var_321.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.endpoint_name {
        object.key("EndpointName").string(var_322.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_323) = &input.job_name {
        object.key("JobName").string(var_323.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.transform_id {
        object.key("TransformId").string(var_324.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_325) = &input.catalog_id {
        object.key("CatalogId").string(var_325.as_str());
    }
    if let Some(var_326) = &input.database_name {
        object.key("DatabaseName").string(var_326.as_str());
    }
    if let Some(var_327) = &input.table_name {
        object.key("TableName").string(var_327.as_str());
    }
    if let Some(var_328) = &input.partition_values {
        let mut array_329 = object.key("PartitionValues").start_array();
        for item_330 in var_328 {
            {
                array_329.value().string(item_330.as_str());
            }
        }
        array_329.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.catalog_id {
        object.key("CatalogId").string(var_331.as_str());
    }
    if let Some(var_332) = &input.database_name {
        object.key("DatabaseName").string(var_332.as_str());
    }
    if let Some(var_333) = &input.table_name {
        object.key("TableName").string(var_333.as_str());
    }
    if let Some(var_334) = &input.index_name {
        object.key("IndexName").string(var_334.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_335) = &input.registry_id {
        let mut object_336 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_336, var_335)?;
        object_336.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_337.as_str());
    }
    if let Some(var_338) = &input.resource_arn {
        object.key("ResourceArn").string(var_338.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_339) = &input.schema_id {
        let mut object_340 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_340, var_339)?;
        object_340.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_341) = &input.schema_id {
        let mut object_342 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_342, var_341)?;
        object_342.finish();
    }
    if let Some(var_343) = &input.versions {
        object.key("Versions").string(var_343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.name {
        object.key("Name").string(var_344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.id {
        object.key("Id").string(var_345.as_str());
    }
    if let Some(var_346) = &input.request_origin {
        object.key("RequestOrigin").string(var_346.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.catalog_id {
        object.key("CatalogId").string(var_347.as_str());
    }
    if let Some(var_348) = &input.database_name {
        object.key("DatabaseName").string(var_348.as_str());
    }
    if let Some(var_349) = &input.name {
        object.key("Name").string(var_349.as_str());
    }
    if let Some(var_350) = &input.transaction_id {
        object.key("TransactionId").string(var_350.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_351) = &input.catalog_id {
        object.key("CatalogId").string(var_351.as_str());
    }
    if let Some(var_352) = &input.database_name {
        object.key("DatabaseName").string(var_352.as_str());
    }
    if let Some(var_353) = &input.table_name {
        object.key("TableName").string(var_353.as_str());
    }
    if let Some(var_354) = &input.version_id {
        object.key("VersionId").string(var_354.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_355) = &input.name {
        object.key("Name").string(var_355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.catalog_id {
        object.key("CatalogId").string(var_356.as_str());
    }
    if let Some(var_357) = &input.database_name {
        object.key("DatabaseName").string(var_357.as_str());
    }
    if let Some(var_358) = &input.function_name {
        object.key("FunctionName").string(var_358.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_359) = &input.name {
        object.key("Name").string(var_359.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.name {
        object.key("Name").string(var_360.as_str());
    }
    if let Some(var_361) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_361);
    }
    if let Some(var_362) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_362);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_363) = &input.blueprint_name {
        object.key("BlueprintName").string(var_363.as_str());
    }
    if let Some(var_364) = &input.run_id {
        object.key("RunId").string(var_364.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_365) = &input.blueprint_name {
        object.key("BlueprintName").string(var_365.as_str());
    }
    if let Some(var_366) = &input.next_token {
        object.key("NextToken").string(var_366.as_str());
    }
    if let Some(var_367) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_367).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_catalog_import_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCatalogImportStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.catalog_id {
        object.key("CatalogId").string(var_368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.name {
        object.key("Name").string(var_369.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifiers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifiersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_370).into()),
        );
    }
    if let Some(var_371) = &input.next_token {
        object.key("NextToken").string(var_371.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.catalog_id {
        object.key("CatalogId").string(var_372.as_str());
    }
    if let Some(var_373) = &input.database_name {
        object.key("DatabaseName").string(var_373.as_str());
    }
    if let Some(var_374) = &input.table_name {
        object.key("TableName").string(var_374.as_str());
    }
    if let Some(var_375) = &input.partition_values {
        let mut array_376 = object.key("PartitionValues").start_array();
        for item_377 in var_375 {
            {
                array_376.value().string(item_377.as_str());
            }
        }
        array_376.finish();
    }
    if let Some(var_378) = &input.column_names {
        let mut array_379 = object.key("ColumnNames").start_array();
        for item_380 in var_378 {
            {
                array_379.value().string(item_380.as_str());
            }
        }
        array_379.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.catalog_id {
        object.key("CatalogId").string(var_381.as_str());
    }
    if let Some(var_382) = &input.database_name {
        object.key("DatabaseName").string(var_382.as_str());
    }
    if let Some(var_383) = &input.table_name {
        object.key("TableName").string(var_383.as_str());
    }
    if let Some(var_384) = &input.column_names {
        let mut array_385 = object.key("ColumnNames").start_array();
        for item_386 in var_384 {
            {
                array_385.value().string(item_386.as_str());
            }
        }
        array_385.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.catalog_id {
        object.key("CatalogId").string(var_387.as_str());
    }
    if let Some(var_388) = &input.name {
        object.key("Name").string(var_388.as_str());
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.catalog_id {
        object.key("CatalogId").string(var_389.as_str());
    }
    if let Some(var_390) = &input.filter {
        let mut object_391 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_get_connections_filter(
            &mut object_391,
            var_390,
        )?;
        object_391.finish();
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    if let Some(var_392) = &input.next_token {
        object.key("NextToken").string(var_392.as_str());
    }
    if let Some(var_393) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_393).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_394) = &input.name {
        object.key("Name").string(var_394.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.crawler_name_list {
        let mut array_396 = object.key("CrawlerNameList").start_array();
        for item_397 in var_395 {
            {
                array_396.value().string(item_397.as_str());
            }
        }
        array_396.finish();
    }
    if let Some(var_398) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_398).into()),
        );
    }
    if let Some(var_399) = &input.next_token {
        object.key("NextToken").string(var_399.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_400) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_400).into()),
        );
    }
    if let Some(var_401) = &input.next_token {
        object.key("NextToken").string(var_401.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_402) = &input.catalog_id {
        object.key("CatalogId").string(var_402.as_str());
    }
    if let Some(var_403) = &input.name {
        object.key("Name").string(var_403.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_databases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_404) = &input.catalog_id {
        object.key("CatalogId").string(var_404.as_str());
    }
    if let Some(var_405) = &input.next_token {
        object.key("NextToken").string(var_405.as_str());
    }
    if let Some(var_406) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_406).into()),
        );
    }
    if let Some(var_407) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_407.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_408) = &input.catalog_id {
        object.key("CatalogId").string(var_408.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dataflow_graph_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataflowGraphInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_409) = &input.python_script {
        object.key("PythonScript").string(var_409.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_410) = &input.endpoint_name {
        object.key("EndpointName").string(var_410.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_411) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_411).into()),
        );
    }
    if let Some(var_412) = &input.next_token {
        object.key("NextToken").string(var_412.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_413) = &input.job_name {
        object.key("JobName").string(var_413.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_414) = &input.job_name {
        object.key("JobName").string(var_414.as_str());
    }
    if let Some(var_415) = &input.run_id {
        object.key("RunId").string(var_415.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_416) = &input.job_name {
        object.key("JobName").string(var_416.as_str());
    }
    if let Some(var_417) = &input.run_id {
        object.key("RunId").string(var_417.as_str());
    }
    if input.predecessors_included {
        object
            .key("PredecessorsIncluded")
            .boolean(input.predecessors_included);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.job_name {
        object.key("JobName").string(var_418.as_str());
    }
    if let Some(var_419) = &input.next_token {
        object.key("NextToken").string(var_419.as_str());
    }
    if let Some(var_420) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_420).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_421) = &input.next_token {
        object.key("NextToken").string(var_421.as_str());
    }
    if let Some(var_422) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_422).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.source {
        let mut object_424 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_424, var_423)?;
        object_424.finish();
    }
    if let Some(var_425) = &input.sinks {
        let mut array_426 = object.key("Sinks").start_array();
        for item_427 in var_425 {
            {
                let mut object_428 = array_426.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_428,
                    item_427,
                )?;
                object_428.finish();
            }
        }
        array_426.finish();
    }
    if let Some(var_429) = &input.location {
        let mut object_430 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_430, var_429)?;
        object_430.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.transform_id {
        object.key("TransformId").string(var_431.as_str());
    }
    if let Some(var_432) = &input.task_run_id {
        object.key("TaskRunId").string(var_432.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_433) = &input.transform_id {
        object.key("TransformId").string(var_433.as_str());
    }
    if let Some(var_434) = &input.next_token {
        object.key("NextToken").string(var_434.as_str());
    }
    if let Some(var_435) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_435).into()),
        );
    }
    if let Some(var_436) = &input.filter {
        let mut object_437 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_filter_criteria(
            &mut object_437,
            var_436,
        )?;
        object_437.finish();
    }
    if let Some(var_438) = &input.sort {
        let mut object_439 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_sort_criteria(
            &mut object_439,
            var_438,
        )?;
        object_439.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.transform_id {
        object.key("TransformId").string(var_440.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_441) = &input.next_token {
        object.key("NextToken").string(var_441.as_str());
    }
    if let Some(var_442) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_442).into()),
        );
    }
    if let Some(var_443) = &input.filter {
        let mut object_444 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_444,
            var_443,
        )?;
        object_444.finish();
    }
    if let Some(var_445) = &input.sort {
        let mut object_446 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_446,
            var_445,
        )?;
        object_446.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_447) = &input.catalog_id {
        object.key("CatalogId").string(var_447.as_str());
    }
    if let Some(var_448) = &input.database_name {
        object.key("DatabaseName").string(var_448.as_str());
    }
    if let Some(var_449) = &input.table_name {
        object.key("TableName").string(var_449.as_str());
    }
    if let Some(var_450) = &input.partition_values {
        let mut array_451 = object.key("PartitionValues").start_array();
        for item_452 in var_450 {
            {
                array_451.value().string(item_452.as_str());
            }
        }
        array_451.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_indexes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionIndexesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_453) = &input.catalog_id {
        object.key("CatalogId").string(var_453.as_str());
    }
    if let Some(var_454) = &input.database_name {
        object.key("DatabaseName").string(var_454.as_str());
    }
    if let Some(var_455) = &input.table_name {
        object.key("TableName").string(var_455.as_str());
    }
    if let Some(var_456) = &input.next_token {
        object.key("NextToken").string(var_456.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_457) = &input.catalog_id {
        object.key("CatalogId").string(var_457.as_str());
    }
    if let Some(var_458) = &input.database_name {
        object.key("DatabaseName").string(var_458.as_str());
    }
    if let Some(var_459) = &input.table_name {
        object.key("TableName").string(var_459.as_str());
    }
    if let Some(var_460) = &input.expression {
        object.key("Expression").string(var_460.as_str());
    }
    if let Some(var_461) = &input.next_token {
        object.key("NextToken").string(var_461.as_str());
    }
    if let Some(var_462) = &input.segment {
        let mut object_463 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_463, var_462)?;
        object_463.finish();
    }
    if let Some(var_464) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_464).into()),
        );
    }
    if let Some(var_465) = &input.exclude_column_schema {
        object.key("ExcludeColumnSchema").boolean(*var_465);
    }
    if let Some(var_466) = &input.transaction_id {
        object.key("TransactionId").string(var_466.as_str());
    }
    if let Some(var_467) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_467, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_468) = &input.mapping {
        let mut array_469 = object.key("Mapping").start_array();
        for item_470 in var_468 {
            {
                let mut object_471 = array_469.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping_entry(
                    &mut object_471,
                    item_470,
                )?;
                object_471.finish();
            }
        }
        array_469.finish();
    }
    if let Some(var_472) = &input.source {
        let mut object_473 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_473, var_472)?;
        object_473.finish();
    }
    if let Some(var_474) = &input.sinks {
        let mut array_475 = object.key("Sinks").start_array();
        for item_476 in var_474 {
            {
                let mut object_477 = array_475.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_477,
                    item_476,
                )?;
                object_477.finish();
            }
        }
        array_475.finish();
    }
    if let Some(var_478) = &input.location {
        let mut object_479 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_479, var_478)?;
        object_479.finish();
    }
    if let Some(var_480) = &input.language {
        object.key("Language").string(var_480.as_str());
    }
    if let Some(var_481) = &input.additional_plan_options_map {
        let mut object_482 = object.key("AdditionalPlanOptionsMap").start_object();
        for (key_483, value_484) in var_481 {
            {
                object_482.key(key_483).string(value_484.as_str());
            }
        }
        object_482.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_485) = &input.registry_id {
        let mut object_486 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_486, var_485)?;
        object_486.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_487) = &input.next_token {
        object.key("NextToken").string(var_487.as_str());
    }
    if let Some(var_488) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_488).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_489) = &input.resource_arn {
        object.key("ResourceArn").string(var_489.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_490) = &input.schema_id {
        let mut object_491 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_491, var_490)?;
        object_491.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_by_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaByDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_492) = &input.schema_id {
        let mut object_493 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_493, var_492)?;
        object_493.finish();
    }
    if let Some(var_494) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_494.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_495) = &input.schema_id {
        let mut object_496 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_496, var_495)?;
        object_496.finish();
    }
    if let Some(var_497) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_497.as_str());
    }
    if let Some(var_498) = &input.schema_version_number {
        let mut object_499 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_499,
            var_498,
        )?;
        object_499.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_versions_diff_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionsDiffInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_500) = &input.schema_id {
        let mut object_501 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_501, var_500)?;
        object_501.finish();
    }
    if let Some(var_502) = &input.first_schema_version_number {
        let mut object_503 = object.key("FirstSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_503,
            var_502,
        )?;
        object_503.finish();
    }
    if let Some(var_504) = &input.second_schema_version_number {
        let mut object_505 = object.key("SecondSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_505,
            var_504,
        )?;
        object_505.finish();
    }
    if let Some(var_506) = &input.schema_diff_type {
        object.key("SchemaDiffType").string(var_506.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_507) = &input.name {
        object.key("Name").string(var_507.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_508) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_508).into()),
        );
    }
    if let Some(var_509) = &input.next_token {
        object.key("NextToken").string(var_509.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_510) = &input.id {
        object.key("Id").string(var_510.as_str());
    }
    if let Some(var_511) = &input.request_origin {
        object.key("RequestOrigin").string(var_511.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_512) = &input.session_id {
        object.key("SessionId").string(var_512.as_str());
    }
    {
        object.key("Id").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.id).into()),
        );
    }
    if let Some(var_513) = &input.request_origin {
        object.key("RequestOrigin").string(var_513.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_514) = &input.catalog_id {
        object.key("CatalogId").string(var_514.as_str());
    }
    if let Some(var_515) = &input.database_name {
        object.key("DatabaseName").string(var_515.as_str());
    }
    if let Some(var_516) = &input.name {
        object.key("Name").string(var_516.as_str());
    }
    if let Some(var_517) = &input.transaction_id {
        object.key("TransactionId").string(var_517.as_str());
    }
    if let Some(var_518) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_518, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_519) = &input.catalog_id {
        object.key("CatalogId").string(var_519.as_str());
    }
    if let Some(var_520) = &input.database_name {
        object.key("DatabaseName").string(var_520.as_str());
    }
    if let Some(var_521) = &input.expression {
        object.key("Expression").string(var_521.as_str());
    }
    if let Some(var_522) = &input.next_token {
        object.key("NextToken").string(var_522.as_str());
    }
    if let Some(var_523) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_523).into()),
        );
    }
    if let Some(var_524) = &input.transaction_id {
        object.key("TransactionId").string(var_524.as_str());
    }
    if let Some(var_525) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_525, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_526) = &input.catalog_id {
        object.key("CatalogId").string(var_526.as_str());
    }
    if let Some(var_527) = &input.database_name {
        object.key("DatabaseName").string(var_527.as_str());
    }
    if let Some(var_528) = &input.table_name {
        object.key("TableName").string(var_528.as_str());
    }
    if let Some(var_529) = &input.version_id {
        object.key("VersionId").string(var_529.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_530) = &input.catalog_id {
        object.key("CatalogId").string(var_530.as_str());
    }
    if let Some(var_531) = &input.database_name {
        object.key("DatabaseName").string(var_531.as_str());
    }
    if let Some(var_532) = &input.table_name {
        object.key("TableName").string(var_532.as_str());
    }
    if let Some(var_533) = &input.next_token {
        object.key("NextToken").string(var_533.as_str());
    }
    if let Some(var_534) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_534).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_535) = &input.resource_arn {
        object.key("ResourceArn").string(var_535.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_536) = &input.name {
        object.key("Name").string(var_536.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_537) = &input.next_token {
        object.key("NextToken").string(var_537.as_str());
    }
    if let Some(var_538) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_538.as_str());
    }
    if let Some(var_539) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_539).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partition_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredPartitionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_540) = &input.catalog_id {
        object.key("CatalogId").string(var_540.as_str());
    }
    if let Some(var_541) = &input.database_name {
        object.key("DatabaseName").string(var_541.as_str());
    }
    if let Some(var_542) = &input.table_name {
        object.key("TableName").string(var_542.as_str());
    }
    if let Some(var_543) = &input.partition_values {
        let mut array_544 = object.key("PartitionValues").start_array();
        for item_545 in var_543 {
            {
                array_544.value().string(item_545.as_str());
            }
        }
        array_544.finish();
    }
    if let Some(var_546) = &input.audit_context {
        let mut object_547 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_547, var_546)?;
        object_547.finish();
    }
    if let Some(var_548) = &input.supported_permission_types {
        let mut array_549 = object.key("SupportedPermissionTypes").start_array();
        for item_550 in var_548 {
            {
                array_549.value().string(item_550.as_str());
            }
        }
        array_549.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partitions_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredPartitionsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_551) = &input.catalog_id {
        object.key("CatalogId").string(var_551.as_str());
    }
    if let Some(var_552) = &input.database_name {
        object.key("DatabaseName").string(var_552.as_str());
    }
    if let Some(var_553) = &input.table_name {
        object.key("TableName").string(var_553.as_str());
    }
    if let Some(var_554) = &input.expression {
        object.key("Expression").string(var_554.as_str());
    }
    if let Some(var_555) = &input.audit_context {
        let mut object_556 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_556, var_555)?;
        object_556.finish();
    }
    if let Some(var_557) = &input.supported_permission_types {
        let mut array_558 = object.key("SupportedPermissionTypes").start_array();
        for item_559 in var_557 {
            {
                array_558.value().string(item_559.as_str());
            }
        }
        array_558.finish();
    }
    if let Some(var_560) = &input.next_token {
        object.key("NextToken").string(var_560.as_str());
    }
    if let Some(var_561) = &input.segment {
        let mut object_562 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_562, var_561)?;
        object_562.finish();
    }
    if let Some(var_563) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_563).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_table_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredTableMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_564) = &input.catalog_id {
        object.key("CatalogId").string(var_564.as_str());
    }
    if let Some(var_565) = &input.database_name {
        object.key("DatabaseName").string(var_565.as_str());
    }
    if let Some(var_566) = &input.name {
        object.key("Name").string(var_566.as_str());
    }
    if let Some(var_567) = &input.audit_context {
        let mut object_568 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_568, var_567)?;
        object_568.finish();
    }
    if let Some(var_569) = &input.supported_permission_types {
        let mut array_570 = object.key("SupportedPermissionTypes").start_array();
        for item_571 in var_569 {
            {
                array_570.value().string(item_571.as_str());
            }
        }
        array_570.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_572) = &input.catalog_id {
        object.key("CatalogId").string(var_572.as_str());
    }
    if let Some(var_573) = &input.database_name {
        object.key("DatabaseName").string(var_573.as_str());
    }
    if let Some(var_574) = &input.function_name {
        object.key("FunctionName").string(var_574.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_functions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_575) = &input.catalog_id {
        object.key("CatalogId").string(var_575.as_str());
    }
    if let Some(var_576) = &input.database_name {
        object.key("DatabaseName").string(var_576.as_str());
    }
    if let Some(var_577) = &input.pattern {
        object.key("Pattern").string(var_577.as_str());
    }
    if let Some(var_578) = &input.next_token {
        object.key("NextToken").string(var_578.as_str());
    }
    if let Some(var_579) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_579).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_580) = &input.name {
        object.key("Name").string(var_580.as_str());
    }
    if let Some(var_581) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_581);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_582) = &input.name {
        object.key("Name").string(var_582.as_str());
    }
    if let Some(var_583) = &input.run_id {
        object.key("RunId").string(var_583.as_str());
    }
    if let Some(var_584) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_584);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_585) = &input.name {
        object.key("Name").string(var_585.as_str());
    }
    if let Some(var_586) = &input.run_id {
        object.key("RunId").string(var_586.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_587) = &input.name {
        object.key("Name").string(var_587.as_str());
    }
    if let Some(var_588) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_588);
    }
    if let Some(var_589) = &input.next_token {
        object.key("NextToken").string(var_589.as_str());
    }
    if let Some(var_590) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_590).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_catalog_to_glue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCatalogToGlueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_591) = &input.catalog_id {
        object.key("CatalogId").string(var_591.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_592) = &input.next_token {
        object.key("NextToken").string(var_592.as_str());
    }
    if let Some(var_593) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_593).into()),
        );
    }
    if let Some(var_594) = &input.tags {
        let mut object_595 = object.key("Tags").start_object();
        for (key_596, value_597) in var_594 {
            {
                object_595.key(key_596).string(value_597.as_str());
            }
        }
        object_595.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_598) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_598).into()),
        );
    }
    if let Some(var_599) = &input.next_token {
        object.key("NextToken").string(var_599.as_str());
    }
    if let Some(var_600) = &input.tags {
        let mut object_601 = object.key("Tags").start_object();
        for (key_602, value_603) in var_600 {
            {
                object_601.key(key_602).string(value_603.as_str());
            }
        }
        object_601.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_604) = &input.next_token {
        object.key("NextToken").string(var_604.as_str());
    }
    if let Some(var_605) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_605).into()),
        );
    }
    if let Some(var_606) = &input.tags {
        let mut object_607 = object.key("Tags").start_object();
        for (key_608, value_609) in var_606 {
            {
                object_607.key(key_608).string(value_609.as_str());
            }
        }
        object_607.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_610) = &input.next_token {
        object.key("NextToken").string(var_610.as_str());
    }
    if let Some(var_611) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_611).into()),
        );
    }
    if let Some(var_612) = &input.tags {
        let mut object_613 = object.key("Tags").start_object();
        for (key_614, value_615) in var_612 {
            {
                object_613.key(key_614).string(value_615.as_str());
            }
        }
        object_613.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_616) = &input.next_token {
        object.key("NextToken").string(var_616.as_str());
    }
    if let Some(var_617) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_617).into()),
        );
    }
    if let Some(var_618) = &input.filter {
        let mut object_619 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_619,
            var_618,
        )?;
        object_619.finish();
    }
    if let Some(var_620) = &input.sort {
        let mut object_621 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_621,
            var_620,
        )?;
        object_621.finish();
    }
    if let Some(var_622) = &input.tags {
        let mut object_623 = object.key("Tags").start_object();
        for (key_624, value_625) in var_622 {
            {
                object_623.key(key_624).string(value_625.as_str());
            }
        }
        object_623.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_registries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegistriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_626) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_626).into()),
        );
    }
    if let Some(var_627) = &input.next_token {
        object.key("NextToken").string(var_627.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_628) = &input.registry_id {
        let mut object_629 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_629, var_628)?;
        object_629.finish();
    }
    if let Some(var_630) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_630).into()),
        );
    }
    if let Some(var_631) = &input.next_token {
        object.key("NextToken").string(var_631.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_632) = &input.schema_id {
        let mut object_633 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_633, var_632)?;
        object_633.finish();
    }
    if let Some(var_634) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_634).into()),
        );
    }
    if let Some(var_635) = &input.next_token {
        object.key("NextToken").string(var_635.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_sessions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSessionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_636) = &input.next_token {
        object.key("NextToken").string(var_636.as_str());
    }
    if let Some(var_637) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_637).into()),
        );
    }
    if let Some(var_638) = &input.tags {
        let mut object_639 = object.key("Tags").start_object();
        for (key_640, value_641) in var_638 {
            {
                object_639.key(key_640).string(value_641.as_str());
            }
        }
        object_639.finish();
    }
    if let Some(var_642) = &input.request_origin {
        object.key("RequestOrigin").string(var_642.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_statements_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStatementsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_643) = &input.session_id {
        object.key("SessionId").string(var_643.as_str());
    }
    if let Some(var_644) = &input.request_origin {
        object.key("RequestOrigin").string(var_644.as_str());
    }
    if let Some(var_645) = &input.next_token {
        object.key("NextToken").string(var_645.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_646) = &input.next_token {
        object.key("NextToken").string(var_646.as_str());
    }
    if let Some(var_647) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_647.as_str());
    }
    if let Some(var_648) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_648).into()),
        );
    }
    if let Some(var_649) = &input.tags {
        let mut object_650 = object.key("Tags").start_object();
        for (key_651, value_652) in var_649 {
            {
                object_650.key(key_651).string(value_652.as_str());
            }
        }
        object_650.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_653) = &input.next_token {
        object.key("NextToken").string(var_653.as_str());
    }
    if let Some(var_654) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_654).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_655) = &input.catalog_id {
        object.key("CatalogId").string(var_655.as_str());
    }
    if let Some(var_656) = &input.data_catalog_encryption_settings {
        let mut object_657 = object.key("DataCatalogEncryptionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_encryption_settings(
            &mut object_657,
            var_656,
        )?;
        object_657.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_658) = &input.policy_in_json {
        object.key("PolicyInJson").string(var_658.as_str());
    }
    if let Some(var_659) = &input.resource_arn {
        object.key("ResourceArn").string(var_659.as_str());
    }
    if let Some(var_660) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_660.as_str());
    }
    if let Some(var_661) = &input.policy_exists_condition {
        object.key("PolicyExistsCondition").string(var_661.as_str());
    }
    if let Some(var_662) = &input.enable_hybrid {
        object.key("EnableHybrid").string(var_662.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_663) = &input.schema_id {
        let mut object_664 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_664, var_663)?;
        object_664.finish();
    }
    if let Some(var_665) = &input.schema_version_number {
        let mut object_666 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_666,
            var_665,
        )?;
        object_666.finish();
    }
    if let Some(var_667) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_667.as_str());
    }
    if let Some(var_668) = &input.metadata_key_value {
        let mut object_669 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_669,
            var_668,
        )?;
        object_669.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_670) = &input.name {
        object.key("Name").string(var_670.as_str());
    }
    if let Some(var_671) = &input.run_id {
        object.key("RunId").string(var_671.as_str());
    }
    if let Some(var_672) = &input.run_properties {
        let mut object_673 = object.key("RunProperties").start_object();
        for (key_674, value_675) in var_672 {
            {
                object_673.key(key_674).string(value_675.as_str());
            }
        }
        object_673.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QuerySchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_676) = &input.schema_id {
        let mut object_677 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_677, var_676)?;
        object_677.finish();
    }
    if let Some(var_678) = &input.schema_version_number {
        let mut object_679 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_679,
            var_678,
        )?;
        object_679.finish();
    }
    if let Some(var_680) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_680.as_str());
    }
    if let Some(var_681) = &input.metadata_list {
        let mut array_682 = object.key("MetadataList").start_array();
        for item_683 in var_681 {
            {
                let mut object_684 = array_682.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
                    &mut object_684,
                    item_683,
                )?;
                object_684.finish();
            }
        }
        array_682.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_685) = &input.next_token {
        object.key("NextToken").string(var_685.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_686) = &input.schema_id {
        let mut object_687 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_687, var_686)?;
        object_687.finish();
    }
    if let Some(var_688) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_688.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_689) = &input.schema_id {
        let mut object_690 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_690, var_689)?;
        object_690.finish();
    }
    if let Some(var_691) = &input.schema_version_number {
        let mut object_692 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_692,
            var_691,
        )?;
        object_692.finish();
    }
    if let Some(var_693) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_693.as_str());
    }
    if let Some(var_694) = &input.metadata_key_value {
        let mut object_695 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_695,
            var_694,
        )?;
        object_695.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_696) = &input.job_name {
        object.key("JobName").string(var_696.as_str());
    }
    if let Some(var_697) = &input.run_id {
        object.key("RunId").string(var_697.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_698) = &input.name {
        object.key("Name").string(var_698.as_str());
    }
    if let Some(var_699) = &input.run_id {
        object.key("RunId").string(var_699.as_str());
    }
    if let Some(var_700) = &input.node_ids {
        let mut array_701 = object.key("NodeIds").start_array();
        for item_702 in var_700 {
            {
                array_701.value().string(item_702.as_str());
            }
        }
        array_701.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_run_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RunStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_703) = &input.session_id {
        object.key("SessionId").string(var_703.as_str());
    }
    if let Some(var_704) = &input.code {
        object.key("Code").string(var_704.as_str());
    }
    if let Some(var_705) = &input.request_origin {
        object.key("RequestOrigin").string(var_705.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_706) = &input.catalog_id {
        object.key("CatalogId").string(var_706.as_str());
    }
    if let Some(var_707) = &input.next_token {
        object.key("NextToken").string(var_707.as_str());
    }
    if let Some(var_708) = &input.filters {
        let mut array_709 = object.key("Filters").start_array();
        for item_710 in var_708 {
            {
                let mut object_711 = array_709.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_predicate(
                    &mut object_711,
                    item_710,
                )?;
                object_711.finish();
            }
        }
        array_709.finish();
    }
    if let Some(var_712) = &input.search_text {
        object.key("SearchText").string(var_712.as_str());
    }
    if let Some(var_713) = &input.sort_criteria {
        let mut array_714 = object.key("SortCriteria").start_array();
        for item_715 in var_713 {
            {
                let mut object_716 = array_714.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_criterion(
                    &mut object_716,
                    item_715,
                )?;
                object_716.finish();
            }
        }
        array_714.finish();
    }
    if let Some(var_717) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_717).into()),
        );
    }
    if let Some(var_718) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_718.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_719) = &input.blueprint_name {
        object.key("BlueprintName").string(var_719.as_str());
    }
    if let Some(var_720) = &input.parameters {
        object.key("Parameters").string(var_720.as_str());
    }
    if let Some(var_721) = &input.role_arn {
        object.key("RoleArn").string(var_721.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_722) = &input.name {
        object.key("Name").string(var_722.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_723) = &input.crawler_name {
        object.key("CrawlerName").string(var_723.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_export_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartExportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_724) = &input.transform_id {
        object.key("TransformId").string(var_724.as_str());
    }
    if let Some(var_725) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_725.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_726) = &input.transform_id {
        object.key("TransformId").string(var_726.as_str());
    }
    if let Some(var_727) = &input.input_s3_path {
        object.key("InputS3Path").string(var_727.as_str());
    }
    if input.replace_all_labels {
        object
            .key("ReplaceAllLabels")
            .boolean(input.replace_all_labels);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_728) = &input.job_name {
        object.key("JobName").string(var_728.as_str());
    }
    if let Some(var_729) = &input.job_run_id {
        object.key("JobRunId").string(var_729.as_str());
    }
    if let Some(var_730) = &input.arguments {
        let mut object_731 = object.key("Arguments").start_object();
        for (key_732, value_733) in var_730 {
            {
                object_731.key(key_732).string(value_733.as_str());
            }
        }
        object_731.finish();
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_734) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_734).into()),
        );
    }
    if let Some(var_735) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_735).into()),
        );
    }
    if let Some(var_736) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_736.as_str());
    }
    if let Some(var_737) = &input.notification_property {
        let mut object_738 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_738,
            var_737,
        )?;
        object_738.finish();
    }
    if let Some(var_739) = &input.worker_type {
        object.key("WorkerType").string(var_739.as_str());
    }
    if let Some(var_740) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_740).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_evaluation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlEvaluationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_741) = &input.transform_id {
        object.key("TransformId").string(var_741.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_labeling_set_generation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlLabelingSetGenerationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_742) = &input.transform_id {
        object.key("TransformId").string(var_742.as_str());
    }
    if let Some(var_743) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_743.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_744) = &input.name {
        object.key("Name").string(var_744.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_745) = &input.name {
        object.key("Name").string(var_745.as_str());
    }
    if let Some(var_746) = &input.run_properties {
        let mut object_747 = object.key("RunProperties").start_object();
        for (key_748, value_749) in var_746 {
            {
                object_747.key(key_748).string(value_749.as_str());
            }
        }
        object_747.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_750) = &input.name {
        object.key("Name").string(var_750.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_751) = &input.crawler_name {
        object.key("CrawlerName").string(var_751.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_752) = &input.id {
        object.key("Id").string(var_752.as_str());
    }
    if let Some(var_753) = &input.request_origin {
        object.key("RequestOrigin").string(var_753.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_754) = &input.name {
        object.key("Name").string(var_754.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_755) = &input.name {
        object.key("Name").string(var_755.as_str());
    }
    if let Some(var_756) = &input.run_id {
        object.key("RunId").string(var_756.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_757) = &input.resource_arn {
        object.key("ResourceArn").string(var_757.as_str());
    }
    if let Some(var_758) = &input.tags_to_add {
        let mut object_759 = object.key("TagsToAdd").start_object();
        for (key_760, value_761) in var_758 {
            {
                object_759.key(key_760).string(value_761.as_str());
            }
        }
        object_759.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_762) = &input.resource_arn {
        object.key("ResourceArn").string(var_762.as_str());
    }
    if let Some(var_763) = &input.tags_to_remove {
        let mut array_764 = object.key("TagsToRemove").start_array();
        for item_765 in var_763 {
            {
                array_764.value().string(item_765.as_str());
            }
        }
        array_764.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_766) = &input.name {
        object.key("Name").string(var_766.as_str());
    }
    if let Some(var_767) = &input.description {
        object.key("Description").string(var_767.as_str());
    }
    if let Some(var_768) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_768.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_769) = &input.grok_classifier {
        let mut object_770 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_grok_classifier_request(
            &mut object_770,
            var_769,
        )?;
        object_770.finish();
    }
    if let Some(var_771) = &input.xml_classifier {
        let mut object_772 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_xml_classifier_request(
            &mut object_772,
            var_771,
        )?;
        object_772.finish();
    }
    if let Some(var_773) = &input.json_classifier {
        let mut object_774 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_json_classifier_request(
            &mut object_774,
            var_773,
        )?;
        object_774.finish();
    }
    if let Some(var_775) = &input.csv_classifier {
        let mut object_776 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_csv_classifier_request(
            &mut object_776,
            var_775,
        )?;
        object_776.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_777) = &input.catalog_id {
        object.key("CatalogId").string(var_777.as_str());
    }
    if let Some(var_778) = &input.database_name {
        object.key("DatabaseName").string(var_778.as_str());
    }
    if let Some(var_779) = &input.table_name {
        object.key("TableName").string(var_779.as_str());
    }
    if let Some(var_780) = &input.partition_values {
        let mut array_781 = object.key("PartitionValues").start_array();
        for item_782 in var_780 {
            {
                array_781.value().string(item_782.as_str());
            }
        }
        array_781.finish();
    }
    if let Some(var_783) = &input.column_statistics_list {
        let mut array_784 = object.key("ColumnStatisticsList").start_array();
        for item_785 in var_783 {
            {
                let mut object_786 = array_784.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_786,
                    item_785,
                )?;
                object_786.finish();
            }
        }
        array_784.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_787) = &input.catalog_id {
        object.key("CatalogId").string(var_787.as_str());
    }
    if let Some(var_788) = &input.database_name {
        object.key("DatabaseName").string(var_788.as_str());
    }
    if let Some(var_789) = &input.table_name {
        object.key("TableName").string(var_789.as_str());
    }
    if let Some(var_790) = &input.column_statistics_list {
        let mut array_791 = object.key("ColumnStatisticsList").start_array();
        for item_792 in var_790 {
            {
                let mut object_793 = array_791.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_793,
                    item_792,
                )?;
                object_793.finish();
            }
        }
        array_791.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_794) = &input.catalog_id {
        object.key("CatalogId").string(var_794.as_str());
    }
    if let Some(var_795) = &input.name {
        object.key("Name").string(var_795.as_str());
    }
    if let Some(var_796) = &input.connection_input {
        let mut object_797 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(
            &mut object_797,
            var_796,
        )?;
        object_797.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_798) = &input.name {
        object.key("Name").string(var_798.as_str());
    }
    if let Some(var_799) = &input.role {
        object.key("Role").string(var_799.as_str());
    }
    if let Some(var_800) = &input.database_name {
        object.key("DatabaseName").string(var_800.as_str());
    }
    if let Some(var_801) = &input.description {
        object.key("Description").string(var_801.as_str());
    }
    if let Some(var_802) = &input.targets {
        let mut object_803 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_803, var_802)?;
        object_803.finish();
    }
    if let Some(var_804) = &input.schedule {
        object.key("Schedule").string(var_804.as_str());
    }
    if let Some(var_805) = &input.classifiers {
        let mut array_806 = object.key("Classifiers").start_array();
        for item_807 in var_805 {
            {
                array_806.value().string(item_807.as_str());
            }
        }
        array_806.finish();
    }
    if let Some(var_808) = &input.table_prefix {
        object.key("TablePrefix").string(var_808.as_str());
    }
    if let Some(var_809) = &input.schema_change_policy {
        let mut object_810 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_810,
            var_809,
        )?;
        object_810.finish();
    }
    if let Some(var_811) = &input.recrawl_policy {
        let mut object_812 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_812, var_811)?;
        object_812.finish();
    }
    if let Some(var_813) = &input.lineage_configuration {
        let mut object_814 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_814,
            var_813,
        )?;
        object_814.finish();
    }
    if let Some(var_815) = &input.lake_formation_configuration {
        let mut object_816 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(
            &mut object_816,
            var_815,
        )?;
        object_816.finish();
    }
    if let Some(var_817) = &input.configuration {
        object.key("Configuration").string(var_817.as_str());
    }
    if let Some(var_818) = &input.crawler_security_configuration {
        object
            .key("CrawlerSecurityConfiguration")
            .string(var_818.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_819) = &input.crawler_name {
        object.key("CrawlerName").string(var_819.as_str());
    }
    if let Some(var_820) = &input.schedule {
        object.key("Schedule").string(var_820.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_821) = &input.catalog_id {
        object.key("CatalogId").string(var_821.as_str());
    }
    if let Some(var_822) = &input.name {
        object.key("Name").string(var_822.as_str());
    }
    if let Some(var_823) = &input.database_input {
        let mut object_824 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_824, var_823)?;
        object_824.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_825) = &input.endpoint_name {
        object.key("EndpointName").string(var_825.as_str());
    }
    if let Some(var_826) = &input.public_key {
        object.key("PublicKey").string(var_826.as_str());
    }
    if let Some(var_827) = &input.add_public_keys {
        let mut array_828 = object.key("AddPublicKeys").start_array();
        for item_829 in var_827 {
            {
                array_828.value().string(item_829.as_str());
            }
        }
        array_828.finish();
    }
    if let Some(var_830) = &input.delete_public_keys {
        let mut array_831 = object.key("DeletePublicKeys").start_array();
        for item_832 in var_830 {
            {
                array_831.value().string(item_832.as_str());
            }
        }
        array_831.finish();
    }
    if let Some(var_833) = &input.custom_libraries {
        let mut object_834 = object.key("CustomLibraries").start_object();
        crate::json_ser::serialize_structure_crate_model_dev_endpoint_custom_libraries(
            &mut object_834,
            var_833,
        )?;
        object_834.finish();
    }
    if input.update_etl_libraries {
        object
            .key("UpdateEtlLibraries")
            .boolean(input.update_etl_libraries);
    }
    if let Some(var_835) = &input.delete_arguments {
        let mut array_836 = object.key("DeleteArguments").start_array();
        for item_837 in var_835 {
            {
                array_836.value().string(item_837.as_str());
            }
        }
        array_836.finish();
    }
    if let Some(var_838) = &input.add_arguments {
        let mut object_839 = object.key("AddArguments").start_object();
        for (key_840, value_841) in var_838 {
            {
                object_839.key(key_840).string(value_841.as_str());
            }
        }
        object_839.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_842) = &input.job_name {
        object.key("JobName").string(var_842.as_str());
    }
    if let Some(var_843) = &input.job_update {
        let mut object_844 = object.key("JobUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_job_update(&mut object_844, var_843)?;
        object_844.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_845) = &input.transform_id {
        object.key("TransformId").string(var_845.as_str());
    }
    if let Some(var_846) = &input.name {
        object.key("Name").string(var_846.as_str());
    }
    if let Some(var_847) = &input.description {
        object.key("Description").string(var_847.as_str());
    }
    if let Some(var_848) = &input.parameters {
        let mut object_849 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_849,
            var_848,
        )?;
        object_849.finish();
    }
    if let Some(var_850) = &input.role {
        object.key("Role").string(var_850.as_str());
    }
    if let Some(var_851) = &input.glue_version {
        object.key("GlueVersion").string(var_851.as_str());
    }
    if let Some(var_852) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_852).into()),
        );
    }
    if let Some(var_853) = &input.worker_type {
        object.key("WorkerType").string(var_853.as_str());
    }
    if let Some(var_854) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_854).into()),
        );
    }
    if let Some(var_855) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_855).into()),
        );
    }
    if let Some(var_856) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_856).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_857) = &input.catalog_id {
        object.key("CatalogId").string(var_857.as_str());
    }
    if let Some(var_858) = &input.database_name {
        object.key("DatabaseName").string(var_858.as_str());
    }
    if let Some(var_859) = &input.table_name {
        object.key("TableName").string(var_859.as_str());
    }
    if let Some(var_860) = &input.partition_value_list {
        let mut array_861 = object.key("PartitionValueList").start_array();
        for item_862 in var_860 {
            {
                array_861.value().string(item_862.as_str());
            }
        }
        array_861.finish();
    }
    if let Some(var_863) = &input.partition_input {
        let mut object_864 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_864, var_863)?;
        object_864.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_865) = &input.registry_id {
        let mut object_866 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_866, var_865)?;
        object_866.finish();
    }
    if let Some(var_867) = &input.description {
        object.key("Description").string(var_867.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_868) = &input.schema_id {
        let mut object_869 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_869, var_868)?;
        object_869.finish();
    }
    if let Some(var_870) = &input.schema_version_number {
        let mut object_871 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_871,
            var_870,
        )?;
        object_871.finish();
    }
    if let Some(var_872) = &input.compatibility {
        object.key("Compatibility").string(var_872.as_str());
    }
    if let Some(var_873) = &input.description {
        object.key("Description").string(var_873.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_874) = &input.catalog_id {
        object.key("CatalogId").string(var_874.as_str());
    }
    if let Some(var_875) = &input.database_name {
        object.key("DatabaseName").string(var_875.as_str());
    }
    if let Some(var_876) = &input.table_input {
        let mut object_877 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_877, var_876)?;
        object_877.finish();
    }
    if let Some(var_878) = &input.skip_archive {
        object.key("SkipArchive").boolean(*var_878);
    }
    if let Some(var_879) = &input.transaction_id {
        object.key("TransactionId").string(var_879.as_str());
    }
    if let Some(var_880) = &input.version_id {
        object.key("VersionId").string(var_880.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_881) = &input.name {
        object.key("Name").string(var_881.as_str());
    }
    if let Some(var_882) = &input.trigger_update {
        let mut object_883 = object.key("TriggerUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_update(&mut object_883, var_882)?;
        object_883.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_884) = &input.catalog_id {
        object.key("CatalogId").string(var_884.as_str());
    }
    if let Some(var_885) = &input.database_name {
        object.key("DatabaseName").string(var_885.as_str());
    }
    if let Some(var_886) = &input.function_name {
        object.key("FunctionName").string(var_886.as_str());
    }
    if let Some(var_887) = &input.function_input {
        let mut object_888 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_888,
            var_887,
        )?;
        object_888.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_889) = &input.name {
        object.key("Name").string(var_889.as_str());
    }
    if let Some(var_890) = &input.description {
        object.key("Description").string(var_890.as_str());
    }
    if let Some(var_891) = &input.default_run_properties {
        let mut object_892 = object.key("DefaultRunProperties").start_object();
        for (key_893, value_894) in var_891 {
            {
                object_892.key(key_893).string(value_894.as_str());
            }
        }
        object_892.finish();
    }
    if let Some(var_895) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_895).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_896) = &input.values {
        let mut array_897 = object.key("Values").start_array();
        for item_898 in var_896 {
            {
                array_897.value().string(item_898.as_str());
            }
        }
        array_897.finish();
    }
    if let Some(var_899) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_899, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_900) = &input.storage_descriptor {
        let mut object_901 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_901,
            var_900,
        )?;
        object_901.finish();
    }
    if let Some(var_902) = &input.parameters {
        let mut object_903 = object.key("Parameters").start_object();
        for (key_904, value_905) in var_902 {
            {
                object_903.key(key_904).string(value_905.as_str());
            }
        }
        object_903.finish();
    }
    if let Some(var_906) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_906, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_value_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionValueList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_907) = &input.values {
        let mut array_908 = object.key("Values").start_array();
        for item_909 in var_907 {
            {
                array_908.value().string(item_909.as_str());
            }
        }
        array_908.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_update_partition_request_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchUpdatePartitionRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_910) = &input.partition_value_list {
        let mut array_911 = object.key("PartitionValueList").start_array();
        for item_912 in var_910 {
            {
                array_911.value().string(item_912.as_str());
            }
        }
        array_911.finish();
    }
    if let Some(var_913) = &input.partition_input {
        let mut object_914 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_914, var_913)?;
        object_914.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_915) = &input.classification {
        object.key("Classification").string(var_915.as_str());
    }
    if let Some(var_916) = &input.name {
        object.key("Name").string(var_916.as_str());
    }
    if let Some(var_917) = &input.grok_pattern {
        object.key("GrokPattern").string(var_917.as_str());
    }
    if let Some(var_918) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_918.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_919) = &input.classification {
        object.key("Classification").string(var_919.as_str());
    }
    if let Some(var_920) = &input.name {
        object.key("Name").string(var_920.as_str());
    }
    if let Some(var_921) = &input.row_tag {
        object.key("RowTag").string(var_921.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_922) = &input.name {
        object.key("Name").string(var_922.as_str());
    }
    if let Some(var_923) = &input.json_path {
        object.key("JsonPath").string(var_923.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_924) = &input.name {
        object.key("Name").string(var_924.as_str());
    }
    if let Some(var_925) = &input.delimiter {
        object.key("Delimiter").string(var_925.as_str());
    }
    if let Some(var_926) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_926.as_str());
    }
    if let Some(var_927) = &input.contains_header {
        object.key("ContainsHeader").string(var_927.as_str());
    }
    if let Some(var_928) = &input.header {
        let mut array_929 = object.key("Header").start_array();
        for item_930 in var_928 {
            {
                array_929.value().string(item_930.as_str());
            }
        }
        array_929.finish();
    }
    if let Some(var_931) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_931);
    }
    if let Some(var_932) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_932);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_933) = &input.name {
        object.key("Name").string(var_933.as_str());
    }
    if let Some(var_934) = &input.description {
        object.key("Description").string(var_934.as_str());
    }
    if let Some(var_935) = &input.connection_type {
        object.key("ConnectionType").string(var_935.as_str());
    }
    if let Some(var_936) = &input.match_criteria {
        let mut array_937 = object.key("MatchCriteria").start_array();
        for item_938 in var_936 {
            {
                array_937.value().string(item_938.as_str());
            }
        }
        array_937.finish();
    }
    if let Some(var_939) = &input.connection_properties {
        let mut object_940 = object.key("ConnectionProperties").start_object();
        for (key_941, value_942) in var_939 {
            {
                object_940.key(key_941.as_str()).string(value_942.as_str());
            }
        }
        object_940.finish();
    }
    if let Some(var_943) = &input.physical_connection_requirements {
        let mut object_944 = object.key("PhysicalConnectionRequirements").start_object();
        crate::json_ser::serialize_structure_crate_model_physical_connection_requirements(
            &mut object_944,
            var_943,
        )?;
        object_944.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_crawler_targets(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CrawlerTargets,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_945) = &input.s3_targets {
        let mut array_946 = object.key("S3Targets").start_array();
        for item_947 in var_945 {
            {
                let mut object_948 = array_946.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_target(
                    &mut object_948,
                    item_947,
                )?;
                object_948.finish();
            }
        }
        array_946.finish();
    }
    if let Some(var_949) = &input.jdbc_targets {
        let mut array_950 = object.key("JdbcTargets").start_array();
        for item_951 in var_949 {
            {
                let mut object_952 = array_950.value().start_object();
                crate::json_ser::serialize_structure_crate_model_jdbc_target(
                    &mut object_952,
                    item_951,
                )?;
                object_952.finish();
            }
        }
        array_950.finish();
    }
    if let Some(var_953) = &input.mongo_db_targets {
        let mut array_954 = object.key("MongoDBTargets").start_array();
        for item_955 in var_953 {
            {
                let mut object_956 = array_954.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mongo_db_target(
                    &mut object_956,
                    item_955,
                )?;
                object_956.finish();
            }
        }
        array_954.finish();
    }
    if let Some(var_957) = &input.dynamo_db_targets {
        let mut array_958 = object.key("DynamoDBTargets").start_array();
        for item_959 in var_957 {
            {
                let mut object_960 = array_958.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dynamo_db_target(
                    &mut object_960,
                    item_959,
                )?;
                object_960.finish();
            }
        }
        array_958.finish();
    }
    if let Some(var_961) = &input.catalog_targets {
        let mut array_962 = object.key("CatalogTargets").start_array();
        for item_963 in var_961 {
            {
                let mut object_964 = array_962.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_target(
                    &mut object_964,
                    item_963,
                )?;
                object_964.finish();
            }
        }
        array_962.finish();
    }
    if let Some(var_965) = &input.delta_targets {
        let mut array_966 = object.key("DeltaTargets").start_array();
        for item_967 in var_965 {
            {
                let mut object_968 = array_966.value().start_object();
                crate::json_ser::serialize_structure_crate_model_delta_target(
                    &mut object_968,
                    item_967,
                )?;
                object_968.finish();
            }
        }
        array_966.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_change_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaChangePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_969) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_969.as_str());
    }
    if let Some(var_970) = &input.delete_behavior {
        object.key("DeleteBehavior").string(var_970.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recrawl_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecrawlPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_971) = &input.recrawl_behavior {
        object.key("RecrawlBehavior").string(var_971.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lineage_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LineageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_972) = &input.crawler_lineage_settings {
        object
            .key("CrawlerLineageSettings")
            .string(var_972.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lake_formation_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LakeFormationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_973) = &input.use_lake_formation_credentials {
        object.key("UseLakeFormationCredentials").boolean(*var_973);
    }
    if let Some(var_974) = &input.account_id {
        object.key("AccountId").string(var_974.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_975) = &input.name {
        object.key("Name").string(var_975.as_str());
    }
    if let Some(var_976) = &input.description {
        object.key("Description").string(var_976.as_str());
    }
    if let Some(var_977) = &input.location_uri {
        object.key("LocationUri").string(var_977.as_str());
    }
    if let Some(var_978) = &input.parameters {
        let mut object_979 = object.key("Parameters").start_object();
        for (key_980, value_981) in var_978 {
            {
                object_979.key(key_980).string(value_981.as_str());
            }
        }
        object_979.finish();
    }
    if let Some(var_982) = &input.create_table_default_permissions {
        let mut array_983 = object.key("CreateTableDefaultPermissions").start_array();
        for item_984 in var_982 {
            {
                let mut object_985 = array_983.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal_permissions(
                    &mut object_985,
                    item_984,
                )?;
                object_985.finish();
            }
        }
        array_983.finish();
    }
    if let Some(var_986) = &input.target_database {
        let mut object_987 = object.key("TargetDatabase").start_object();
        crate::json_ser::serialize_structure_crate_model_database_identifier(
            &mut object_987,
            var_986,
        )?;
        object_987.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execution_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_concurrent_runs != 0 {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_concurrent_runs).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_command(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobCommand,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_988) = &input.name {
        object.key("Name").string(var_988.as_str());
    }
    if let Some(var_989) = &input.script_location {
        object.key("ScriptLocation").string(var_989.as_str());
    }
    if let Some(var_990) = &input.python_version {
        object.key("PythonVersion").string(var_990.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connections_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionsList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_991) = &input.connections {
        let mut array_992 = object.key("Connections").start_array();
        for item_993 in var_991 {
            {
                array_992.value().string(item_993.as_str());
            }
        }
        array_992.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_994) = &input.notify_delay_after {
        object.key("NotifyDelayAfter").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_994).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_995) = &input.database_name {
        object.key("DatabaseName").string(var_995.as_str());
    }
    if let Some(var_996) = &input.table_name {
        object.key("TableName").string(var_996.as_str());
    }
    if let Some(var_997) = &input.catalog_id {
        object.key("CatalogId").string(var_997.as_str());
    }
    if let Some(var_998) = &input.connection_name {
        object.key("ConnectionName").string(var_998.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_999) = &input.transform_type {
        object.key("TransformType").string(var_999.as_str());
    }
    if let Some(var_1000) = &input.find_matches_parameters {
        let mut object_1001 = object.key("FindMatchesParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_find_matches_parameters(
            &mut object_1001,
            var_1000,
        )?;
        object_1001.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1002) = &input.ml_user_data_encryption {
        let mut object_1003 = object.key("MlUserDataEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_ml_user_data_encryption(
            &mut object_1003,
            var_1002,
        )?;
        object_1003.finish();
    }
    if let Some(var_1004) = &input.task_run_security_configuration_name {
        object
            .key("TaskRunSecurityConfigurationName")
            .string(var_1004.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1005) = &input.keys {
        let mut array_1006 = object.key("Keys").start_array();
        for item_1007 in var_1005 {
            {
                array_1006.value().string(item_1007.as_str());
            }
        }
        array_1006.finish();
    }
    if let Some(var_1008) = &input.index_name {
        object.key("IndexName").string(var_1008.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registry_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistryId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1009) = &input.registry_name {
        object.key("RegistryName").string(var_1009.as_str());
    }
    if let Some(var_1010) = &input.registry_arn {
        object.key("RegistryArn").string(var_1010.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1011) = &input.id {
        object.key("Id").string(var_1011.as_str());
    }
    if let Some(var_1012) = &input.node_type {
        object.key("NodeType").string(var_1012.as_str());
    }
    if let Some(var_1013) = &input.args {
        let mut array_1014 = object.key("Args").start_array();
        for item_1015 in var_1013 {
            {
                let mut object_1016 = array_1014.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1016,
                    item_1015,
                )?;
                object_1016.finish();
            }
        }
        array_1014.finish();
    }
    if input.line_number != 0 {
        object.key("LineNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.line_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_edge(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenEdge,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1017) = &input.source {
        object.key("Source").string(var_1017.as_str());
    }
    if let Some(var_1018) = &input.target {
        object.key("Target").string(var_1018.as_str());
    }
    if let Some(var_1019) = &input.target_parameter {
        object.key("TargetParameter").string(var_1019.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1020) = &input.s3_encryption {
        let mut array_1021 = object.key("S3Encryption").start_array();
        for item_1022 in var_1020 {
            {
                let mut object_1023 = array_1021.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_encryption(
                    &mut object_1023,
                    item_1022,
                )?;
                object_1023.finish();
            }
        }
        array_1021.finish();
    }
    if let Some(var_1024) = &input.cloud_watch_encryption {
        let mut object_1025 = object.key("CloudWatchEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_encryption(
            &mut object_1025,
            var_1024,
        )?;
        object_1025.finish();
    }
    if let Some(var_1026) = &input.job_bookmarks_encryption {
        let mut object_1027 = object.key("JobBookmarksEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_job_bookmarks_encryption(
            &mut object_1027,
            var_1026,
        )?;
        object_1027.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_command(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionCommand,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1028) = &input.name {
        object.key("Name").string(var_1028.as_str());
    }
    if let Some(var_1029) = &input.python_version {
        object.key("PythonVersion").string(var_1029.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1030) = &input.name {
        object.key("Name").string(var_1030.as_str());
    }
    if let Some(var_1031) = &input.description {
        object.key("Description").string(var_1031.as_str());
    }
    if let Some(var_1032) = &input.owner {
        object.key("Owner").string(var_1032.as_str());
    }
    if let Some(var_1033) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_1033, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1034) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_1034, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if input.retention != 0 {
        object.key("Retention").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention).into()),
        );
    }
    if let Some(var_1035) = &input.storage_descriptor {
        let mut object_1036 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_1036,
            var_1035,
        )?;
        object_1036.finish();
    }
    if let Some(var_1037) = &input.partition_keys {
        let mut array_1038 = object.key("PartitionKeys").start_array();
        for item_1039 in var_1037 {
            {
                let mut object_1040 = array_1038.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(
                    &mut object_1040,
                    item_1039,
                )?;
                object_1040.finish();
            }
        }
        array_1038.finish();
    }
    if let Some(var_1041) = &input.view_original_text {
        object.key("ViewOriginalText").string(var_1041.as_str());
    }
    if let Some(var_1042) = &input.view_expanded_text {
        object.key("ViewExpandedText").string(var_1042.as_str());
    }
    if let Some(var_1043) = &input.table_type {
        object.key("TableType").string(var_1043.as_str());
    }
    if let Some(var_1044) = &input.parameters {
        let mut object_1045 = object.key("Parameters").start_object();
        for (key_1046, value_1047) in var_1044 {
            {
                object_1045.key(key_1046).string(value_1047.as_str());
            }
        }
        object_1045.finish();
    }
    if let Some(var_1048) = &input.target_table {
        let mut object_1049 = object.key("TargetTable").start_object();
        crate::json_ser::serialize_structure_crate_model_table_identifier(
            &mut object_1049,
            var_1048,
        )?;
        object_1049.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Predicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1050) = &input.logical {
        object.key("Logical").string(var_1050.as_str());
    }
    if let Some(var_1051) = &input.conditions {
        let mut array_1052 = object.key("Conditions").start_array();
        for item_1053 in var_1051 {
            {
                let mut object_1054 = array_1052.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_1054,
                    item_1053,
                )?;
                object_1054.finish();
            }
        }
        array_1052.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1055) = &input.job_name {
        object.key("JobName").string(var_1055.as_str());
    }
    if let Some(var_1056) = &input.arguments {
        let mut object_1057 = object.key("Arguments").start_object();
        for (key_1058, value_1059) in var_1056 {
            {
                object_1057.key(key_1058).string(value_1059.as_str());
            }
        }
        object_1057.finish();
    }
    if let Some(var_1060) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1060).into()),
        );
    }
    if let Some(var_1061) = &input.security_configuration {
        object
            .key("SecurityConfiguration")
            .string(var_1061.as_str());
    }
    if let Some(var_1062) = &input.notification_property {
        let mut object_1063 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_1063,
            var_1062,
        )?;
        object_1063.finish();
    }
    if let Some(var_1064) = &input.crawler_name {
        object.key("CrawlerName").string(var_1064.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event_batching_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventBatchingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.batch_size).into()),
        );
    }
    if let Some(var_1065) = &input.batch_window {
        object.key("BatchWindow").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1065).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1066) = &input.function_name {
        object.key("FunctionName").string(var_1066.as_str());
    }
    if let Some(var_1067) = &input.class_name {
        object.key("ClassName").string(var_1067.as_str());
    }
    if let Some(var_1068) = &input.owner_name {
        object.key("OwnerName").string(var_1068.as_str());
    }
    if let Some(var_1069) = &input.owner_type {
        object.key("OwnerType").string(var_1069.as_str());
    }
    if let Some(var_1070) = &input.resource_uris {
        let mut array_1071 = object.key("ResourceUris").start_array();
        for item_1072 in var_1070 {
            {
                let mut object_1073 = array_1071.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_uri(
                    &mut object_1073,
                    item_1072,
                )?;
                object_1073.finish();
            }
        }
        array_1071.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1074) = &input.schema_arn {
        object.key("SchemaArn").string(var_1074.as_str());
    }
    if let Some(var_1075) = &input.schema_name {
        object.key("SchemaName").string(var_1075.as_str());
    }
    if let Some(var_1076) = &input.registry_name {
        object.key("RegistryName").string(var_1076.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_get_connections_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GetConnectionsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1077) = &input.match_criteria {
        let mut array_1078 = object.key("MatchCriteria").start_array();
        for item_1079 in var_1077 {
            {
                array_1078.value().string(item_1079.as_str());
            }
        }
        array_1078.finish();
    }
    if let Some(var_1080) = &input.connection_type {
        object.key("ConnectionType").string(var_1080.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1081) = &input.database_name {
        object.key("DatabaseName").string(var_1081.as_str());
    }
    if let Some(var_1082) = &input.table_name {
        object.key("TableName").string(var_1082.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1083) = &input.jdbc {
        let mut array_1084 = object.key("Jdbc").start_array();
        for item_1085 in var_1083 {
            {
                let mut object_1086 = array_1084.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1086,
                    item_1085,
                )?;
                object_1086.finish();
            }
        }
        array_1084.finish();
    }
    if let Some(var_1087) = &input.s3 {
        let mut array_1088 = object.key("S3").start_array();
        for item_1089 in var_1087 {
            {
                let mut object_1090 = array_1088.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1090,
                    item_1089,
                )?;
                object_1090.finish();
            }
        }
        array_1088.finish();
    }
    if let Some(var_1091) = &input.dynamo_db {
        let mut array_1092 = object.key("DynamoDB").start_array();
        for item_1093 in var_1091 {
            {
                let mut object_1094 = array_1092.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1094,
                    item_1093,
                )?;
                object_1094.finish();
            }
        }
        array_1092.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1095) = &input.task_run_type {
        object.key("TaskRunType").string(var_1095.as_str());
    }
    if let Some(var_1096) = &input.status {
        object.key("Status").string(var_1096.as_str());
    }
    if let Some(var_1097) = &input.started_before {
        object
            .key("StartedBefore")
            .date_time(var_1097, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1098) = &input.started_after {
        object
            .key("StartedAfter")
            .date_time(var_1098, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1099) = &input.column {
        object.key("Column").string(var_1099.as_str());
    }
    if let Some(var_1100) = &input.sort_direction {
        object.key("SortDirection").string(var_1100.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1101) = &input.name {
        object.key("Name").string(var_1101.as_str());
    }
    if let Some(var_1102) = &input.transform_type {
        object.key("TransformType").string(var_1102.as_str());
    }
    if let Some(var_1103) = &input.status {
        object.key("Status").string(var_1103.as_str());
    }
    if let Some(var_1104) = &input.glue_version {
        object.key("GlueVersion").string(var_1104.as_str());
    }
    if let Some(var_1105) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1105, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1106) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1106, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1107) = &input.last_modified_before {
        object
            .key("LastModifiedBefore")
            .date_time(var_1107, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1108) = &input.last_modified_after {
        object
            .key("LastModifiedAfter")
            .date_time(var_1108, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1109) = &input.schema {
        let mut array_1110 = object.key("Schema").start_array();
        for item_1111 in var_1109 {
            {
                let mut object_1112 = array_1110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_column(
                    &mut object_1112,
                    item_1111,
                )?;
                object_1112.finish();
            }
        }
        array_1110.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1113) = &input.column {
        object.key("Column").string(var_1113.as_str());
    }
    if let Some(var_1114) = &input.sort_direction {
        object.key("SortDirection").string(var_1114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_segment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Segment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("SegmentNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_number).into()),
        );
    }
    {
        object.key("TotalSegments").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_segments).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MappingEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1115) = &input.source_table {
        object.key("SourceTable").string(var_1115.as_str());
    }
    if let Some(var_1116) = &input.source_path {
        object.key("SourcePath").string(var_1116.as_str());
    }
    if let Some(var_1117) = &input.source_type {
        object.key("SourceType").string(var_1117.as_str());
    }
    if let Some(var_1118) = &input.target_table {
        object.key("TargetTable").string(var_1118.as_str());
    }
    if let Some(var_1119) = &input.target_path {
        object.key("TargetPath").string(var_1119.as_str());
    }
    if let Some(var_1120) = &input.target_type {
        object.key("TargetType").string(var_1120.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_version_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaVersionNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.latest_version {
        object.key("LatestVersion").boolean(input.latest_version);
    }
    if input.version_number != 0 {
        object.key("VersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.version_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1121) = &input.additional_audit_context {
        object
            .key("AdditionalAuditContext")
            .string(var_1121.as_str());
    }
    if let Some(var_1122) = &input.requested_columns {
        let mut array_1123 = object.key("RequestedColumns").start_array();
        for item_1124 in var_1122 {
            {
                array_1123.value().string(item_1124.as_str());
            }
        }
        array_1123.finish();
    }
    if let Some(var_1125) = &input.all_columns_requested {
        object.key("AllColumnsRequested").boolean(*var_1125);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_encryption_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogEncryptionSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1126) = &input.encryption_at_rest {
        let mut object_1127 = object.key("EncryptionAtRest").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_at_rest(
            &mut object_1127,
            var_1126,
        )?;
        object_1127.finish();
    }
    if let Some(var_1128) = &input.connection_password_encryption {
        let mut object_1129 = object.key("ConnectionPasswordEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_password_encryption(
            &mut object_1129,
            var_1128,
        )?;
        object_1129.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_key_value_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataKeyValuePair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1130) = &input.metadata_key {
        object.key("MetadataKey").string(var_1130.as_str());
    }
    if let Some(var_1131) = &input.metadata_value {
        object.key("MetadataValue").string(var_1131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1132) = &input.key {
        object.key("Key").string(var_1132.as_str());
    }
    if let Some(var_1133) = &input.value {
        object.key("Value").string(var_1133.as_str());
    }
    if let Some(var_1134) = &input.comparator {
        object.key("Comparator").string(var_1134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criterion(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1135) = &input.field_name {
        object.key("FieldName").string(var_1135.as_str());
    }
    if let Some(var_1136) = &input.sort {
        object.key("Sort").string(var_1136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1137) = &input.name {
        object.key("Name").string(var_1137.as_str());
    }
    if let Some(var_1138) = &input.classification {
        object.key("Classification").string(var_1138.as_str());
    }
    if let Some(var_1139) = &input.grok_pattern {
        object.key("GrokPattern").string(var_1139.as_str());
    }
    if let Some(var_1140) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_1140.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1141) = &input.name {
        object.key("Name").string(var_1141.as_str());
    }
    if let Some(var_1142) = &input.classification {
        object.key("Classification").string(var_1142.as_str());
    }
    if let Some(var_1143) = &input.row_tag {
        object.key("RowTag").string(var_1143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1144) = &input.name {
        object.key("Name").string(var_1144.as_str());
    }
    if let Some(var_1145) = &input.json_path {
        object.key("JsonPath").string(var_1145.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1146) = &input.name {
        object.key("Name").string(var_1146.as_str());
    }
    if let Some(var_1147) = &input.delimiter {
        object.key("Delimiter").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_1148.as_str());
    }
    if let Some(var_1149) = &input.contains_header {
        object.key("ContainsHeader").string(var_1149.as_str());
    }
    if let Some(var_1150) = &input.header {
        let mut array_1151 = object.key("Header").start_array();
        for item_1152 in var_1150 {
            {
                array_1151.value().string(item_1152.as_str());
            }
        }
        array_1151.finish();
    }
    if let Some(var_1153) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_1153);
    }
    if let Some(var_1154) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_1154);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatistics,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1155) = &input.column_name {
        object.key("ColumnName").string(var_1155.as_str());
    }
    if let Some(var_1156) = &input.column_type {
        object.key("ColumnType").string(var_1156.as_str());
    }
    if let Some(var_1157) = &input.analyzed_time {
        object
            .key("AnalyzedTime")
            .date_time(var_1157, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1158) = &input.statistics_data {
        let mut object_1159 = object.key("StatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_column_statistics_data(
            &mut object_1159,
            var_1158,
        )?;
        object_1159.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dev_endpoint_custom_libraries(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DevEndpointCustomLibraries,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1160) = &input.extra_python_libs_s3_path {
        object
            .key("ExtraPythonLibsS3Path")
            .string(var_1160.as_str());
    }
    if let Some(var_1161) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_1161.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1162) = &input.description {
        object.key("Description").string(var_1162.as_str());
    }
    if let Some(var_1163) = &input.log_uri {
        object.key("LogUri").string(var_1163.as_str());
    }
    if let Some(var_1164) = &input.role {
        object.key("Role").string(var_1164.as_str());
    }
    if let Some(var_1165) = &input.execution_property {
        let mut object_1166 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_1166,
            var_1165,
        )?;
        object_1166.finish();
    }
    if let Some(var_1167) = &input.command {
        let mut object_1168 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_1168, var_1167)?;
        object_1168.finish();
    }
    if let Some(var_1169) = &input.default_arguments {
        let mut object_1170 = object.key("DefaultArguments").start_object();
        for (key_1171, value_1172) in var_1169 {
            {
                object_1170.key(key_1171).string(value_1172.as_str());
            }
        }
        object_1170.finish();
    }
    if let Some(var_1173) = &input.non_overridable_arguments {
        let mut object_1174 = object.key("NonOverridableArguments").start_object();
        for (key_1175, value_1176) in var_1173 {
            {
                object_1174.key(key_1175).string(value_1176.as_str());
            }
        }
        object_1174.finish();
    }
    if let Some(var_1177) = &input.connections {
        let mut object_1178 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_1178,
            var_1177,
        )?;
        object_1178.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_1179) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1179).into()),
        );
    }
    if let Some(var_1180) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1180).into()),
        );
    }
    if let Some(var_1181) = &input.worker_type {
        object.key("WorkerType").string(var_1181.as_str());
    }
    if let Some(var_1182) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1182).into()),
        );
    }
    if let Some(var_1183) = &input.security_configuration {
        object
            .key("SecurityConfiguration")
            .string(var_1183.as_str());
    }
    if let Some(var_1184) = &input.notification_property {
        let mut object_1185 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_1185,
            var_1184,
        )?;
        object_1185.finish();
    }
    if let Some(var_1186) = &input.glue_version {
        object.key("GlueVersion").string(var_1186.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1187) = &input.name {
        object.key("Name").string(var_1187.as_str());
    }
    if let Some(var_1188) = &input.description {
        object.key("Description").string(var_1188.as_str());
    }
    if let Some(var_1189) = &input.schedule {
        object.key("Schedule").string(var_1189.as_str());
    }
    if let Some(var_1190) = &input.actions {
        let mut array_1191 = object.key("Actions").start_array();
        for item_1192 in var_1190 {
            {
                let mut object_1193 = array_1191.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(
                    &mut object_1193,
                    item_1192,
                )?;
                object_1193.finish();
            }
        }
        array_1191.finish();
    }
    if let Some(var_1194) = &input.predicate {
        let mut object_1195 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_1195, var_1194)?;
        object_1195.finish();
    }
    if let Some(var_1196) = &input.event_batching_condition {
        let mut object_1197 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_1197,
            var_1196,
        )?;
        object_1197.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1198) = &input.columns {
        let mut array_1199 = object.key("Columns").start_array();
        for item_1200 in var_1198 {
            {
                let mut object_1201 = array_1199.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(
                    &mut object_1201,
                    item_1200,
                )?;
                object_1201.finish();
            }
        }
        array_1199.finish();
    }
    if let Some(var_1202) = &input.location {
        object.key("Location").string(var_1202.as_str());
    }
    if let Some(var_1203) = &input.additional_locations {
        let mut array_1204 = object.key("AdditionalLocations").start_array();
        for item_1205 in var_1203 {
            {
                array_1204.value().string(item_1205.as_str());
            }
        }
        array_1204.finish();
    }
    if let Some(var_1206) = &input.input_format {
        object.key("InputFormat").string(var_1206.as_str());
    }
    if let Some(var_1207) = &input.output_format {
        object.key("OutputFormat").string(var_1207.as_str());
    }
    if input.compressed {
        object.key("Compressed").boolean(input.compressed);
    }
    if input.number_of_buckets != 0 {
        object.key("NumberOfBuckets").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_buckets).into()),
        );
    }
    if let Some(var_1208) = &input.serde_info {
        let mut object_1209 = object.key("SerdeInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_ser_de_info(&mut object_1209, var_1208)?;
        object_1209.finish();
    }
    if let Some(var_1210) = &input.bucket_columns {
        let mut array_1211 = object.key("BucketColumns").start_array();
        for item_1212 in var_1210 {
            {
                array_1211.value().string(item_1212.as_str());
            }
        }
        array_1211.finish();
    }
    if let Some(var_1213) = &input.sort_columns {
        let mut array_1214 = object.key("SortColumns").start_array();
        for item_1215 in var_1213 {
            {
                let mut object_1216 = array_1214.value().start_object();
                crate::json_ser::serialize_structure_crate_model_order(
                    &mut object_1216,
                    item_1215,
                )?;
                object_1216.finish();
            }
        }
        array_1214.finish();
    }
    if let Some(var_1217) = &input.parameters {
        let mut object_1218 = object.key("Parameters").start_object();
        for (key_1219, value_1220) in var_1217 {
            {
                object_1218.key(key_1219).string(value_1220.as_str());
            }
        }
        object_1218.finish();
    }
    if let Some(var_1221) = &input.skewed_info {
        let mut object_1222 = object.key("SkewedInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_skewed_info(&mut object_1222, var_1221)?;
        object_1222.finish();
    }
    if input.stored_as_sub_directories {
        object
            .key("StoredAsSubDirectories")
            .boolean(input.stored_as_sub_directories);
    }
    if let Some(var_1223) = &input.schema_reference {
        let mut object_1224 = object.key("SchemaReference").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_reference(
            &mut object_1224,
            var_1223,
        )?;
        object_1224.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_physical_connection_requirements(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalConnectionRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1225) = &input.subnet_id {
        object.key("SubnetId").string(var_1225.as_str());
    }
    if let Some(var_1226) = &input.security_group_id_list {
        let mut array_1227 = object.key("SecurityGroupIdList").start_array();
        for item_1228 in var_1226 {
            {
                array_1227.value().string(item_1228.as_str());
            }
        }
        array_1227.finish();
    }
    if let Some(var_1229) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1229.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Target,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1230) = &input.path {
        object.key("Path").string(var_1230.as_str());
    }
    if let Some(var_1231) = &input.exclusions {
        let mut array_1232 = object.key("Exclusions").start_array();
        for item_1233 in var_1231 {
            {
                array_1232.value().string(item_1233.as_str());
            }
        }
        array_1232.finish();
    }
    if let Some(var_1234) = &input.connection_name {
        object.key("ConnectionName").string(var_1234.as_str());
    }
    if let Some(var_1235) = &input.sample_size {
        object.key("SampleSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1235).into()),
        );
    }
    if let Some(var_1236) = &input.event_queue_arn {
        object.key("EventQueueArn").string(var_1236.as_str());
    }
    if let Some(var_1237) = &input.dlq_event_queue_arn {
        object.key("DlqEventQueueArn").string(var_1237.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1238) = &input.connection_name {
        object.key("ConnectionName").string(var_1238.as_str());
    }
    if let Some(var_1239) = &input.path {
        object.key("Path").string(var_1239.as_str());
    }
    if let Some(var_1240) = &input.exclusions {
        let mut array_1241 = object.key("Exclusions").start_array();
        for item_1242 in var_1240 {
            {
                array_1241.value().string(item_1242.as_str());
            }
        }
        array_1241.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mongo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MongoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1243) = &input.connection_name {
        object.key("ConnectionName").string(var_1243.as_str());
    }
    if let Some(var_1244) = &input.path {
        object.key("Path").string(var_1244.as_str());
    }
    if let Some(var_1245) = &input.scan_all {
        object.key("ScanAll").boolean(*var_1245);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1246) = &input.path {
        object.key("Path").string(var_1246.as_str());
    }
    if let Some(var_1247) = &input.scan_all {
        object.key("scanAll").boolean(*var_1247);
    }
    if let Some(var_1248) = &input.scan_rate {
        object.key("scanRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1248).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1249) = &input.database_name {
        object.key("DatabaseName").string(var_1249.as_str());
    }
    if let Some(var_1250) = &input.tables {
        let mut array_1251 = object.key("Tables").start_array();
        for item_1252 in var_1250 {
            {
                array_1251.value().string(item_1252.as_str());
            }
        }
        array_1251.finish();
    }
    if let Some(var_1253) = &input.connection_name {
        object.key("ConnectionName").string(var_1253.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delta_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeltaTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1254) = &input.delta_tables {
        let mut array_1255 = object.key("DeltaTables").start_array();
        for item_1256 in var_1254 {
            {
                array_1255.value().string(item_1256.as_str());
            }
        }
        array_1255.finish();
    }
    if let Some(var_1257) = &input.connection_name {
        object.key("ConnectionName").string(var_1257.as_str());
    }
    if let Some(var_1258) = &input.write_manifest {
        object.key("WriteManifest").boolean(*var_1258);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal_permissions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrincipalPermissions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1259) = &input.principal {
        let mut object_1260 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_crate_model_data_lake_principal(
            &mut object_1260,
            var_1259,
        )?;
        object_1260.finish();
    }
    if let Some(var_1261) = &input.permissions {
        let mut array_1262 = object.key("Permissions").start_array();
        for item_1263 in var_1261 {
            {
                array_1262.value().string(item_1263.as_str());
            }
        }
        array_1262.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1264) = &input.catalog_id {
        object.key("CatalogId").string(var_1264.as_str());
    }
    if let Some(var_1265) = &input.database_name {
        object.key("DatabaseName").string(var_1265.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_find_matches_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindMatchesParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1266) = &input.primary_key_column_name {
        object.key("PrimaryKeyColumnName").string(var_1266.as_str());
    }
    if let Some(var_1267) = &input.precision_recall_tradeoff {
        object.key("PrecisionRecallTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1267).into()),
        );
    }
    if let Some(var_1268) = &input.accuracy_cost_tradeoff {
        object.key("AccuracyCostTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1268).into()),
        );
    }
    if let Some(var_1269) = &input.enforce_provided_labels {
        object.key("EnforceProvidedLabels").boolean(*var_1269);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ml_user_data_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MlUserDataEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1270) = &input.ml_user_data_encryption_mode {
        object
            .key("MlUserDataEncryptionMode")
            .string(var_1270.as_str());
    }
    if let Some(var_1271) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1271.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node_arg(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNodeArg,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1272) = &input.name {
        object.key("Name").string(var_1272.as_str());
    }
    if let Some(var_1273) = &input.value {
        object.key("Value").string(var_1273.as_str());
    }
    if input.param {
        object.key("Param").boolean(input.param);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Encryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1274) = &input.s3_encryption_mode {
        object.key("S3EncryptionMode").string(var_1274.as_str());
    }
    if let Some(var_1275) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1275.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1276) = &input.cloud_watch_encryption_mode {
        object
            .key("CloudWatchEncryptionMode")
            .string(var_1276.as_str());
    }
    if let Some(var_1277) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1277.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_bookmarks_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobBookmarksEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1278) = &input.job_bookmarks_encryption_mode {
        object
            .key("JobBookmarksEncryptionMode")
            .string(var_1278.as_str());
    }
    if let Some(var_1279) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1279.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Column,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1280) = &input.name {
        object.key("Name").string(var_1280.as_str());
    }
    if let Some(var_1281) = &input.r#type {
        object.key("Type").string(var_1281.as_str());
    }
    if let Some(var_1282) = &input.comment {
        object.key("Comment").string(var_1282.as_str());
    }
    if let Some(var_1283) = &input.parameters {
        let mut object_1284 = object.key("Parameters").start_object();
        for (key_1285, value_1286) in var_1283 {
            {
                object_1284.key(key_1285).string(value_1286.as_str());
            }
        }
        object_1284.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1287) = &input.catalog_id {
        object.key("CatalogId").string(var_1287.as_str());
    }
    if let Some(var_1288) = &input.database_name {
        object.key("DatabaseName").string(var_1288.as_str());
    }
    if let Some(var_1289) = &input.name {
        object.key("Name").string(var_1289.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1290) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1290.as_str());
    }
    if let Some(var_1291) = &input.job_name {
        object.key("JobName").string(var_1291.as_str());
    }
    if let Some(var_1292) = &input.state {
        object.key("State").string(var_1292.as_str());
    }
    if let Some(var_1293) = &input.crawler_name {
        object.key("CrawlerName").string(var_1293.as_str());
    }
    if let Some(var_1294) = &input.crawl_state {
        object.key("CrawlState").string(var_1294.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_uri(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceUri,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1295) = &input.resource_type {
        object.key("ResourceType").string(var_1295.as_str());
    }
    if let Some(var_1296) = &input.uri {
        object.key("Uri").string(var_1296.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1297) = &input.name {
        object.key("Name").string(var_1297.as_str());
    }
    if let Some(var_1298) = &input.data_type {
        object.key("DataType").string(var_1298.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_at_rest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionAtRest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1299) = &input.catalog_encryption_mode {
        object
            .key("CatalogEncryptionMode")
            .string(var_1299.as_str());
    }
    if let Some(var_1300) = &input.sse_aws_kms_key_id {
        object.key("SseAwsKmsKeyId").string(var_1300.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_password_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionPasswordEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("ReturnConnectionPasswordEncrypted")
            .boolean(input.return_connection_password_encrypted);
    }
    if let Some(var_1301) = &input.aws_kms_key_id {
        object.key("AwsKmsKeyId").string(var_1301.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1302) = &input.r#type {
        object.key("Type").string(var_1302.as_str());
    }
    if let Some(var_1303) = &input.boolean_column_statistics_data {
        let mut object_1304 = object.key("BooleanColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_boolean_column_statistics_data(
            &mut object_1304,
            var_1303,
        )?;
        object_1304.finish();
    }
    if let Some(var_1305) = &input.date_column_statistics_data {
        let mut object_1306 = object.key("DateColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_date_column_statistics_data(
            &mut object_1306,
            var_1305,
        )?;
        object_1306.finish();
    }
    if let Some(var_1307) = &input.decimal_column_statistics_data {
        let mut object_1308 = object.key("DecimalColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_column_statistics_data(
            &mut object_1308,
            var_1307,
        )?;
        object_1308.finish();
    }
    if let Some(var_1309) = &input.double_column_statistics_data {
        let mut object_1310 = object.key("DoubleColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_double_column_statistics_data(
            &mut object_1310,
            var_1309,
        )?;
        object_1310.finish();
    }
    if let Some(var_1311) = &input.long_column_statistics_data {
        let mut object_1312 = object.key("LongColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_long_column_statistics_data(
            &mut object_1312,
            var_1311,
        )?;
        object_1312.finish();
    }
    if let Some(var_1313) = &input.string_column_statistics_data {
        let mut object_1314 = object.key("StringColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_string_column_statistics_data(
            &mut object_1314,
            var_1313,
        )?;
        object_1314.finish();
    }
    if let Some(var_1315) = &input.binary_column_statistics_data {
        let mut object_1316 = object.key("BinaryColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_binary_column_statistics_data(
            &mut object_1316,
            var_1315,
        )?;
        object_1316.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ser_de_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SerDeInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1317) = &input.name {
        object.key("Name").string(var_1317.as_str());
    }
    if let Some(var_1318) = &input.serialization_library {
        object.key("SerializationLibrary").string(var_1318.as_str());
    }
    if let Some(var_1319) = &input.parameters {
        let mut object_1320 = object.key("Parameters").start_object();
        for (key_1321, value_1322) in var_1319 {
            {
                object_1320.key(key_1321).string(value_1322.as_str());
            }
        }
        object_1320.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_order(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Order,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1323) = &input.column {
        object.key("Column").string(var_1323.as_str());
    }
    {
        object.key("SortOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sort_order).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_skewed_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SkewedInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1324) = &input.skewed_column_names {
        let mut array_1325 = object.key("SkewedColumnNames").start_array();
        for item_1326 in var_1324 {
            {
                array_1325.value().string(item_1326.as_str());
            }
        }
        array_1325.finish();
    }
    if let Some(var_1327) = &input.skewed_column_values {
        let mut array_1328 = object.key("SkewedColumnValues").start_array();
        for item_1329 in var_1327 {
            {
                array_1328.value().string(item_1329.as_str());
            }
        }
        array_1328.finish();
    }
    if let Some(var_1330) = &input.skewed_column_value_location_maps {
        let mut object_1331 = object.key("SkewedColumnValueLocationMaps").start_object();
        for (key_1332, value_1333) in var_1330 {
            {
                object_1331.key(key_1332).string(value_1333.as_str());
            }
        }
        object_1331.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1334) = &input.schema_id {
        let mut object_1335 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_1335, var_1334)?;
        object_1335.finish();
    }
    if let Some(var_1336) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_1336.as_str());
    }
    if let Some(var_1337) = &input.schema_version_number {
        object.key("SchemaVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1337).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_lake_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataLakePrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1338) = &input.data_lake_principal_identifier {
        object
            .key("DataLakePrincipalIdentifier")
            .string(var_1338.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_boolean_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BooleanColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("NumberOfTrues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_trues).into()),
        );
    }
    {
        object.key("NumberOfFalses").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_falses).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1339) = &input.minimum_value {
        object
            .key("MinimumValue")
            .date_time(var_1339, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1340) = &input.maximum_value {
        object
            .key("MaximumValue")
            .date_time(var_1340, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1341) = &input.minimum_value {
        let mut object_1342 = object.key("MinimumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_1342,
            var_1341,
        )?;
        object_1342.finish();
    }
    if let Some(var_1343) = &input.maximum_value {
        let mut object_1344 = object.key("MaximumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_1344,
            var_1343,
        )?;
        object_1344.finish();
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_double_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DoubleColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0.0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0.0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_long_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LongColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_binary_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BinaryColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1345) = &input.unscaled_value {
        object
            .key("UnscaledValue")
            .string_unchecked(&aws_smithy_types::base64::encode(var_1345));
    }
    {
        object.key("Scale").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.scale).into()),
        );
    }
    Ok(())
}
