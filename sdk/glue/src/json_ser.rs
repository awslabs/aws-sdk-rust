// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_batch_create_partition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreatePartitionInput,
) {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1);
    }
    if let Some(var_2) = &input.database_name {
        object.key("DatabaseName").string(var_2);
    }
    if let Some(var_3) = &input.table_name {
        object.key("TableName").string(var_3);
    }
    if let Some(var_4) = &input.partition_input_list {
        let mut array_5 = object.key("PartitionInputList").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_partition_input(&mut object_7, item_6);
                object_7.finish();
            }
        }
        array_5.finish();
    }
}

pub fn serialize_structure_batch_delete_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteConnectionInput,
) {
    if let Some(var_8) = &input.catalog_id {
        object.key("CatalogId").string(var_8);
    }
    if let Some(var_9) = &input.connection_name_list {
        let mut array_10 = object.key("ConnectionNameList").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11);
            }
        }
        array_10.finish();
    }
}

pub fn serialize_structure_batch_delete_partition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeletePartitionInput,
) {
    if let Some(var_12) = &input.catalog_id {
        object.key("CatalogId").string(var_12);
    }
    if let Some(var_13) = &input.database_name {
        object.key("DatabaseName").string(var_13);
    }
    if let Some(var_14) = &input.table_name {
        object.key("TableName").string(var_14);
    }
    if let Some(var_15) = &input.partitions_to_delete {
        let mut array_16 = object.key("PartitionsToDelete").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_partition_value_list(&mut object_18, item_17);
                object_18.finish();
            }
        }
        array_16.finish();
    }
}

pub fn serialize_structure_batch_delete_table_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableInput,
) {
    if let Some(var_19) = &input.catalog_id {
        object.key("CatalogId").string(var_19);
    }
    if let Some(var_20) = &input.database_name {
        object.key("DatabaseName").string(var_20);
    }
    if let Some(var_21) = &input.tables_to_delete {
        let mut array_22 = object.key("TablesToDelete").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23);
            }
        }
        array_22.finish();
    }
}

pub fn serialize_structure_batch_delete_table_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableVersionInput,
) {
    if let Some(var_24) = &input.catalog_id {
        object.key("CatalogId").string(var_24);
    }
    if let Some(var_25) = &input.database_name {
        object.key("DatabaseName").string(var_25);
    }
    if let Some(var_26) = &input.table_name {
        object.key("TableName").string(var_26);
    }
    if let Some(var_27) = &input.version_ids {
        let mut array_28 = object.key("VersionIds").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29);
            }
        }
        array_28.finish();
    }
}

pub fn serialize_structure_batch_get_crawlers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetCrawlersInput,
) {
    if let Some(var_30) = &input.crawler_names {
        let mut array_31 = object.key("CrawlerNames").start_array();
        for item_32 in var_30 {
            {
                array_31.value().string(item_32);
            }
        }
        array_31.finish();
    }
}

pub fn serialize_structure_batch_get_dev_endpoints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDevEndpointsInput,
) {
    if let Some(var_33) = &input.dev_endpoint_names {
        let mut array_34 = object.key("DevEndpointNames").start_array();
        for item_35 in var_33 {
            {
                array_34.value().string(item_35);
            }
        }
        array_34.finish();
    }
}

pub fn serialize_structure_batch_get_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetJobsInput,
) {
    if let Some(var_36) = &input.job_names {
        let mut array_37 = object.key("JobNames").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38);
            }
        }
        array_37.finish();
    }
}

pub fn serialize_structure_batch_get_partition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetPartitionInput,
) {
    if let Some(var_39) = &input.catalog_id {
        object.key("CatalogId").string(var_39);
    }
    if let Some(var_40) = &input.database_name {
        object.key("DatabaseName").string(var_40);
    }
    if let Some(var_41) = &input.table_name {
        object.key("TableName").string(var_41);
    }
    if let Some(var_42) = &input.partitions_to_get {
        let mut array_43 = object.key("PartitionsToGet").start_array();
        for item_44 in var_42 {
            {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_partition_value_list(&mut object_45, item_44);
                object_45.finish();
            }
        }
        array_43.finish();
    }
}

pub fn serialize_structure_batch_get_triggers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetTriggersInput,
) {
    if let Some(var_46) = &input.trigger_names {
        let mut array_47 = object.key("TriggerNames").start_array();
        for item_48 in var_46 {
            {
                array_47.value().string(item_48);
            }
        }
        array_47.finish();
    }
}

pub fn serialize_structure_batch_get_workflows_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetWorkflowsInput,
) {
    if let Some(var_49) = &input.names {
        let mut array_50 = object.key("Names").start_array();
        for item_51 in var_49 {
            {
                array_50.value().string(item_51);
            }
        }
        array_50.finish();
    }
    if let Some(var_52) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_52);
    }
}

pub fn serialize_structure_batch_stop_job_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchStopJobRunInput,
) {
    if let Some(var_53) = &input.job_name {
        object.key("JobName").string(var_53);
    }
    if let Some(var_54) = &input.job_run_ids {
        let mut array_55 = object.key("JobRunIds").start_array();
        for item_56 in var_54 {
            {
                array_55.value().string(item_56);
            }
        }
        array_55.finish();
    }
}

pub fn serialize_structure_batch_update_partition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdatePartitionInput,
) {
    if let Some(var_57) = &input.catalog_id {
        object.key("CatalogId").string(var_57);
    }
    if let Some(var_58) = &input.database_name {
        object.key("DatabaseName").string(var_58);
    }
    if let Some(var_59) = &input.table_name {
        object.key("TableName").string(var_59);
    }
    if let Some(var_60) = &input.entries {
        let mut array_61 = object.key("Entries").start_array();
        for item_62 in var_60 {
            {
                let mut object_63 = array_61.value().start_object();
                crate::json_ser::serialize_structure_batch_update_partition_request_entry(
                    &mut object_63,
                    item_62,
                );
                object_63.finish();
            }
        }
        array_61.finish();
    }
}

pub fn serialize_structure_cancel_ml_task_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMlTaskRunInput,
) {
    if let Some(var_64) = &input.transform_id {
        object.key("TransformId").string(var_64);
    }
    if let Some(var_65) = &input.task_run_id {
        object.key("TaskRunId").string(var_65);
    }
}

pub fn serialize_structure_check_schema_version_validity_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckSchemaVersionValidityInput,
) {
    if let Some(var_66) = &input.data_format {
        object.key("DataFormat").string(var_66.as_str());
    }
    if let Some(var_67) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_67);
    }
}

pub fn serialize_structure_create_classifier_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClassifierInput,
) {
    if let Some(var_68) = &input.grok_classifier {
        let mut object_69 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_create_grok_classifier_request(&mut object_69, var_68);
        object_69.finish();
    }
    if let Some(var_70) = &input.xml_classifier {
        let mut object_71 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_create_xml_classifier_request(&mut object_71, var_70);
        object_71.finish();
    }
    if let Some(var_72) = &input.json_classifier {
        let mut object_73 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_create_json_classifier_request(&mut object_73, var_72);
        object_73.finish();
    }
    if let Some(var_74) = &input.csv_classifier {
        let mut object_75 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_create_csv_classifier_request(&mut object_75, var_74);
        object_75.finish();
    }
}

pub fn serialize_structure_create_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectionInput,
) {
    if let Some(var_76) = &input.catalog_id {
        object.key("CatalogId").string(var_76);
    }
    if let Some(var_77) = &input.connection_input {
        let mut object_78 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_connection_input(&mut object_78, var_77);
        object_78.finish();
    }
}

pub fn serialize_structure_create_crawler_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCrawlerInput,
) {
    if let Some(var_79) = &input.name {
        object.key("Name").string(var_79);
    }
    if let Some(var_80) = &input.role {
        object.key("Role").string(var_80);
    }
    if let Some(var_81) = &input.database_name {
        object.key("DatabaseName").string(var_81);
    }
    if let Some(var_82) = &input.description {
        object.key("Description").string(var_82);
    }
    if let Some(var_83) = &input.targets {
        let mut object_84 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crawler_targets(&mut object_84, var_83);
        object_84.finish();
    }
    if let Some(var_85) = &input.schedule {
        object.key("Schedule").string(var_85);
    }
    if let Some(var_86) = &input.classifiers {
        let mut array_87 = object.key("Classifiers").start_array();
        for item_88 in var_86 {
            {
                array_87.value().string(item_88);
            }
        }
        array_87.finish();
    }
    if let Some(var_89) = &input.table_prefix {
        object.key("TablePrefix").string(var_89);
    }
    if let Some(var_90) = &input.schema_change_policy {
        let mut object_91 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_schema_change_policy(&mut object_91, var_90);
        object_91.finish();
    }
    if let Some(var_92) = &input.recrawl_policy {
        let mut object_93 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_recrawl_policy(&mut object_93, var_92);
        object_93.finish();
    }
    if let Some(var_94) = &input.lineage_configuration {
        let mut object_95 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_lineage_configuration(&mut object_95, var_94);
        object_95.finish();
    }
    if let Some(var_96) = &input.configuration {
        object.key("Configuration").string(var_96);
    }
    if let Some(var_97) = &input.crawler_security_configuration {
        object.key("CrawlerSecurityConfiguration").string(var_97);
    }
    if let Some(var_98) = &input.tags {
        let mut object_99 = object.key("Tags").start_object();
        for (key_100, value_101) in var_98 {
            {
                object_99.key(key_100).string(value_101);
            }
        }
        object_99.finish();
    }
}

pub fn serialize_structure_create_database_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatabaseInput,
) {
    if let Some(var_102) = &input.catalog_id {
        object.key("CatalogId").string(var_102);
    }
    if let Some(var_103) = &input.database_input {
        let mut object_104 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_database_input(&mut object_104, var_103);
        object_104.finish();
    }
}

pub fn serialize_structure_create_dev_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDevEndpointInput,
) {
    if let Some(var_105) = &input.endpoint_name {
        object.key("EndpointName").string(var_105);
    }
    if let Some(var_106) = &input.role_arn {
        object.key("RoleArn").string(var_106);
    }
    if let Some(var_107) = &input.security_group_ids {
        let mut array_108 = object.key("SecurityGroupIds").start_array();
        for item_109 in var_107 {
            {
                array_108.value().string(item_109);
            }
        }
        array_108.finish();
    }
    if let Some(var_110) = &input.subnet_id {
        object.key("SubnetId").string(var_110);
    }
    if let Some(var_111) = &input.public_key {
        object.key("PublicKey").string(var_111);
    }
    if let Some(var_112) = &input.public_keys {
        let mut array_113 = object.key("PublicKeys").start_array();
        for item_114 in var_112 {
            {
                array_113.value().string(item_114);
            }
        }
        array_113.finish();
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_115) = &input.worker_type {
        object.key("WorkerType").string(var_115.as_str());
    }
    if let Some(var_116) = &input.glue_version {
        object.key("GlueVersion").string(var_116);
    }
    if let Some(var_117) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_117).into()),
        );
    }
    if let Some(var_118) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_118);
    }
    if let Some(var_119) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_119);
    }
    if let Some(var_120) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_120);
    }
    if let Some(var_121) = &input.tags {
        let mut object_122 = object.key("Tags").start_object();
        for (key_123, value_124) in var_121 {
            {
                object_122.key(key_123).string(value_124);
            }
        }
        object_122.finish();
    }
    if let Some(var_125) = &input.arguments {
        let mut object_126 = object.key("Arguments").start_object();
        for (key_127, value_128) in var_125 {
            {
                object_126.key(key_127).string(value_128);
            }
        }
        object_126.finish();
    }
}

pub fn serialize_structure_create_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) {
    if let Some(var_129) = &input.name {
        object.key("Name").string(var_129);
    }
    if let Some(var_130) = &input.description {
        object.key("Description").string(var_130);
    }
    if let Some(var_131) = &input.log_uri {
        object.key("LogUri").string(var_131);
    }
    if let Some(var_132) = &input.role {
        object.key("Role").string(var_132);
    }
    if let Some(var_133) = &input.execution_property {
        let mut object_134 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_execution_property(&mut object_134, var_133);
        object_134.finish();
    }
    if let Some(var_135) = &input.command {
        let mut object_136 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_job_command(&mut object_136, var_135);
        object_136.finish();
    }
    if let Some(var_137) = &input.default_arguments {
        let mut object_138 = object.key("DefaultArguments").start_object();
        for (key_139, value_140) in var_137 {
            {
                object_138.key(key_139).string(value_140);
            }
        }
        object_138.finish();
    }
    if let Some(var_141) = &input.non_overridable_arguments {
        let mut object_142 = object.key("NonOverridableArguments").start_object();
        for (key_143, value_144) in var_141 {
            {
                object_142.key(key_143).string(value_144);
            }
        }
        object_142.finish();
    }
    if let Some(var_145) = &input.connections {
        let mut object_146 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_connections_list(&mut object_146, var_145);
        object_146.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_147) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_147).into()),
        );
    }
    if let Some(var_148) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_148).into()),
        );
    }
    if let Some(var_149) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_149);
    }
    if let Some(var_150) = &input.tags {
        let mut object_151 = object.key("Tags").start_object();
        for (key_152, value_153) in var_150 {
            {
                object_151.key(key_152).string(value_153);
            }
        }
        object_151.finish();
    }
    if let Some(var_154) = &input.notification_property {
        let mut object_155 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_notification_property(&mut object_155, var_154);
        object_155.finish();
    }
    if let Some(var_156) = &input.glue_version {
        object.key("GlueVersion").string(var_156);
    }
    if let Some(var_157) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_157).into()),
        );
    }
    if let Some(var_158) = &input.worker_type {
        object.key("WorkerType").string(var_158.as_str());
    }
}

pub fn serialize_structure_create_ml_transform_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMlTransformInput,
) {
    if let Some(var_159) = &input.name {
        object.key("Name").string(var_159);
    }
    if let Some(var_160) = &input.description {
        object.key("Description").string(var_160);
    }
    if let Some(var_161) = &input.input_record_tables {
        let mut array_162 = object.key("InputRecordTables").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_glue_table(&mut object_164, item_163);
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.parameters {
        let mut object_166 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_transform_parameters(&mut object_166, var_165);
        object_166.finish();
    }
    if let Some(var_167) = &input.role {
        object.key("Role").string(var_167);
    }
    if let Some(var_168) = &input.glue_version {
        object.key("GlueVersion").string(var_168);
    }
    if let Some(var_169) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_169).into()),
        );
    }
    if let Some(var_170) = &input.worker_type {
        object.key("WorkerType").string(var_170.as_str());
    }
    if let Some(var_171) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_171).into()),
        );
    }
    if let Some(var_172) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_172).into()),
        );
    }
    if let Some(var_173) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    if let Some(var_174) = &input.tags {
        let mut object_175 = object.key("Tags").start_object();
        for (key_176, value_177) in var_174 {
            {
                object_175.key(key_176).string(value_177);
            }
        }
        object_175.finish();
    }
    if let Some(var_178) = &input.transform_encryption {
        let mut object_179 = object.key("TransformEncryption").start_object();
        crate::json_ser::serialize_structure_transform_encryption(&mut object_179, var_178);
        object_179.finish();
    }
}

pub fn serialize_structure_create_partition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionInput,
) {
    if let Some(var_180) = &input.catalog_id {
        object.key("CatalogId").string(var_180);
    }
    if let Some(var_181) = &input.database_name {
        object.key("DatabaseName").string(var_181);
    }
    if let Some(var_182) = &input.table_name {
        object.key("TableName").string(var_182);
    }
    if let Some(var_183) = &input.partition_input {
        let mut object_184 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_partition_input(&mut object_184, var_183);
        object_184.finish();
    }
}

pub fn serialize_structure_create_partition_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionIndexInput,
) {
    if let Some(var_185) = &input.catalog_id {
        object.key("CatalogId").string(var_185);
    }
    if let Some(var_186) = &input.database_name {
        object.key("DatabaseName").string(var_186);
    }
    if let Some(var_187) = &input.table_name {
        object.key("TableName").string(var_187);
    }
    if let Some(var_188) = &input.partition_index {
        let mut object_189 = object.key("PartitionIndex").start_object();
        crate::json_ser::serialize_structure_partition_index(&mut object_189, var_188);
        object_189.finish();
    }
}

pub fn serialize_structure_create_registry_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegistryInput,
) {
    if let Some(var_190) = &input.registry_name {
        object.key("RegistryName").string(var_190);
    }
    if let Some(var_191) = &input.description {
        object.key("Description").string(var_191);
    }
    if let Some(var_192) = &input.tags {
        let mut object_193 = object.key("Tags").start_object();
        for (key_194, value_195) in var_192 {
            {
                object_193.key(key_194).string(value_195);
            }
        }
        object_193.finish();
    }
}

pub fn serialize_structure_create_schema_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSchemaInput,
) {
    if let Some(var_196) = &input.registry_id {
        let mut object_197 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_registry_id(&mut object_197, var_196);
        object_197.finish();
    }
    if let Some(var_198) = &input.schema_name {
        object.key("SchemaName").string(var_198);
    }
    if let Some(var_199) = &input.data_format {
        object.key("DataFormat").string(var_199.as_str());
    }
    if let Some(var_200) = &input.compatibility {
        object.key("Compatibility").string(var_200.as_str());
    }
    if let Some(var_201) = &input.description {
        object.key("Description").string(var_201);
    }
    if let Some(var_202) = &input.tags {
        let mut object_203 = object.key("Tags").start_object();
        for (key_204, value_205) in var_202 {
            {
                object_203.key(key_204).string(value_205);
            }
        }
        object_203.finish();
    }
    if let Some(var_206) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_206);
    }
}

pub fn serialize_structure_create_script_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateScriptInput,
) {
    if let Some(var_207) = &input.dag_nodes {
        let mut array_208 = object.key("DagNodes").start_array();
        for item_209 in var_207 {
            {
                let mut object_210 = array_208.value().start_object();
                crate::json_ser::serialize_structure_code_gen_node(&mut object_210, item_209);
                object_210.finish();
            }
        }
        array_208.finish();
    }
    if let Some(var_211) = &input.dag_edges {
        let mut array_212 = object.key("DagEdges").start_array();
        for item_213 in var_211 {
            {
                let mut object_214 = array_212.value().start_object();
                crate::json_ser::serialize_structure_code_gen_edge(&mut object_214, item_213);
                object_214.finish();
            }
        }
        array_212.finish();
    }
    if let Some(var_215) = &input.language {
        object.key("Language").string(var_215.as_str());
    }
}

pub fn serialize_structure_create_security_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) {
    if let Some(var_216) = &input.name {
        object.key("Name").string(var_216);
    }
    if let Some(var_217) = &input.encryption_configuration {
        let mut object_218 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_encryption_configuration(&mut object_218, var_217);
        object_218.finish();
    }
}

pub fn serialize_structure_create_table_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTableInput,
) {
    if let Some(var_219) = &input.catalog_id {
        object.key("CatalogId").string(var_219);
    }
    if let Some(var_220) = &input.database_name {
        object.key("DatabaseName").string(var_220);
    }
    if let Some(var_221) = &input.table_input {
        let mut object_222 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_table_input(&mut object_222, var_221);
        object_222.finish();
    }
    if let Some(var_223) = &input.partition_indexes {
        let mut array_224 = object.key("PartitionIndexes").start_array();
        for item_225 in var_223 {
            {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_partition_index(&mut object_226, item_225);
                object_226.finish();
            }
        }
        array_224.finish();
    }
}

pub fn serialize_structure_create_trigger_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTriggerInput,
) {
    if let Some(var_227) = &input.name {
        object.key("Name").string(var_227);
    }
    if let Some(var_228) = &input.workflow_name {
        object.key("WorkflowName").string(var_228);
    }
    if let Some(var_229) = &input.r#type {
        object.key("Type").string(var_229.as_str());
    }
    if let Some(var_230) = &input.schedule {
        object.key("Schedule").string(var_230);
    }
    if let Some(var_231) = &input.predicate {
        let mut object_232 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_predicate(&mut object_232, var_231);
        object_232.finish();
    }
    if let Some(var_233) = &input.actions {
        let mut array_234 = object.key("Actions").start_array();
        for item_235 in var_233 {
            {
                let mut object_236 = array_234.value().start_object();
                crate::json_ser::serialize_structure_action(&mut object_236, item_235);
                object_236.finish();
            }
        }
        array_234.finish();
    }
    if let Some(var_237) = &input.description {
        object.key("Description").string(var_237);
    }
    if input.start_on_creation {
        object
            .key("StartOnCreation")
            .boolean(input.start_on_creation);
    }
    if let Some(var_238) = &input.tags {
        let mut object_239 = object.key("Tags").start_object();
        for (key_240, value_241) in var_238 {
            {
                object_239.key(key_240).string(value_241);
            }
        }
        object_239.finish();
    }
}

pub fn serialize_structure_create_user_defined_function_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserDefinedFunctionInput,
) {
    if let Some(var_242) = &input.catalog_id {
        object.key("CatalogId").string(var_242);
    }
    if let Some(var_243) = &input.database_name {
        object.key("DatabaseName").string(var_243);
    }
    if let Some(var_244) = &input.function_input {
        let mut object_245 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_user_defined_function_input(&mut object_245, var_244);
        object_245.finish();
    }
}

pub fn serialize_structure_create_workflow_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkflowInput,
) {
    if let Some(var_246) = &input.name {
        object.key("Name").string(var_246);
    }
    if let Some(var_247) = &input.description {
        object.key("Description").string(var_247);
    }
    if let Some(var_248) = &input.default_run_properties {
        let mut object_249 = object.key("DefaultRunProperties").start_object();
        for (key_250, value_251) in var_248 {
            {
                object_249.key(key_250).string(value_251);
            }
        }
        object_249.finish();
    }
    if let Some(var_252) = &input.tags {
        let mut object_253 = object.key("Tags").start_object();
        for (key_254, value_255) in var_252 {
            {
                object_253.key(key_254).string(value_255);
            }
        }
        object_253.finish();
    }
    if let Some(var_256) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_256).into()),
        );
    }
}

pub fn serialize_structure_delete_classifier_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteClassifierInput,
) {
    if let Some(var_257) = &input.name {
        object.key("Name").string(var_257);
    }
}

pub fn serialize_structure_delete_column_statistics_for_partition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForPartitionInput,
) {
    if let Some(var_258) = &input.catalog_id {
        object.key("CatalogId").string(var_258);
    }
    if let Some(var_259) = &input.database_name {
        object.key("DatabaseName").string(var_259);
    }
    if let Some(var_260) = &input.table_name {
        object.key("TableName").string(var_260);
    }
    if let Some(var_261) = &input.partition_values {
        let mut array_262 = object.key("PartitionValues").start_array();
        for item_263 in var_261 {
            {
                array_262.value().string(item_263);
            }
        }
        array_262.finish();
    }
    if let Some(var_264) = &input.column_name {
        object.key("ColumnName").string(var_264);
    }
}

pub fn serialize_structure_delete_column_statistics_for_table_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForTableInput,
) {
    if let Some(var_265) = &input.catalog_id {
        object.key("CatalogId").string(var_265);
    }
    if let Some(var_266) = &input.database_name {
        object.key("DatabaseName").string(var_266);
    }
    if let Some(var_267) = &input.table_name {
        object.key("TableName").string(var_267);
    }
    if let Some(var_268) = &input.column_name {
        object.key("ColumnName").string(var_268);
    }
}

pub fn serialize_structure_delete_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) {
    if let Some(var_269) = &input.catalog_id {
        object.key("CatalogId").string(var_269);
    }
    if let Some(var_270) = &input.connection_name {
        object.key("ConnectionName").string(var_270);
    }
}

pub fn serialize_structure_delete_crawler_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCrawlerInput,
) {
    if let Some(var_271) = &input.name {
        object.key("Name").string(var_271);
    }
}

pub fn serialize_structure_delete_database_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatabaseInput,
) {
    if let Some(var_272) = &input.catalog_id {
        object.key("CatalogId").string(var_272);
    }
    if let Some(var_273) = &input.name {
        object.key("Name").string(var_273);
    }
}

pub fn serialize_structure_delete_dev_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDevEndpointInput,
) {
    if let Some(var_274) = &input.endpoint_name {
        object.key("EndpointName").string(var_274);
    }
}

pub fn serialize_structure_delete_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobInput,
) {
    if let Some(var_275) = &input.job_name {
        object.key("JobName").string(var_275);
    }
}

pub fn serialize_structure_delete_ml_transform_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMlTransformInput,
) {
    if let Some(var_276) = &input.transform_id {
        object.key("TransformId").string(var_276);
    }
}

pub fn serialize_structure_delete_partition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionInput,
) {
    if let Some(var_277) = &input.catalog_id {
        object.key("CatalogId").string(var_277);
    }
    if let Some(var_278) = &input.database_name {
        object.key("DatabaseName").string(var_278);
    }
    if let Some(var_279) = &input.table_name {
        object.key("TableName").string(var_279);
    }
    if let Some(var_280) = &input.partition_values {
        let mut array_281 = object.key("PartitionValues").start_array();
        for item_282 in var_280 {
            {
                array_281.value().string(item_282);
            }
        }
        array_281.finish();
    }
}

pub fn serialize_structure_delete_partition_index_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionIndexInput,
) {
    if let Some(var_283) = &input.catalog_id {
        object.key("CatalogId").string(var_283);
    }
    if let Some(var_284) = &input.database_name {
        object.key("DatabaseName").string(var_284);
    }
    if let Some(var_285) = &input.table_name {
        object.key("TableName").string(var_285);
    }
    if let Some(var_286) = &input.index_name {
        object.key("IndexName").string(var_286);
    }
}

pub fn serialize_structure_delete_registry_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegistryInput,
) {
    if let Some(var_287) = &input.registry_id {
        let mut object_288 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_registry_id(&mut object_288, var_287);
        object_288.finish();
    }
}

pub fn serialize_structure_delete_resource_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourcePolicyInput,
) {
    if let Some(var_289) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_289);
    }
    if let Some(var_290) = &input.resource_arn {
        object.key("ResourceArn").string(var_290);
    }
}

pub fn serialize_structure_delete_schema_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaInput,
) {
    if let Some(var_291) = &input.schema_id {
        let mut object_292 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_292, var_291);
        object_292.finish();
    }
}

pub fn serialize_structure_delete_schema_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaVersionsInput,
) {
    if let Some(var_293) = &input.schema_id {
        let mut object_294 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_294, var_293);
        object_294.finish();
    }
    if let Some(var_295) = &input.versions {
        object.key("Versions").string(var_295);
    }
}

pub fn serialize_structure_delete_security_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) {
    if let Some(var_296) = &input.name {
        object.key("Name").string(var_296);
    }
}

pub fn serialize_structure_delete_table_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableInput,
) {
    if let Some(var_297) = &input.catalog_id {
        object.key("CatalogId").string(var_297);
    }
    if let Some(var_298) = &input.database_name {
        object.key("DatabaseName").string(var_298);
    }
    if let Some(var_299) = &input.name {
        object.key("Name").string(var_299);
    }
}

pub fn serialize_structure_delete_table_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableVersionInput,
) {
    if let Some(var_300) = &input.catalog_id {
        object.key("CatalogId").string(var_300);
    }
    if let Some(var_301) = &input.database_name {
        object.key("DatabaseName").string(var_301);
    }
    if let Some(var_302) = &input.table_name {
        object.key("TableName").string(var_302);
    }
    if let Some(var_303) = &input.version_id {
        object.key("VersionId").string(var_303);
    }
}

pub fn serialize_structure_delete_trigger_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTriggerInput,
) {
    if let Some(var_304) = &input.name {
        object.key("Name").string(var_304);
    }
}

pub fn serialize_structure_delete_user_defined_function_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserDefinedFunctionInput,
) {
    if let Some(var_305) = &input.catalog_id {
        object.key("CatalogId").string(var_305);
    }
    if let Some(var_306) = &input.database_name {
        object.key("DatabaseName").string(var_306);
    }
    if let Some(var_307) = &input.function_name {
        object.key("FunctionName").string(var_307);
    }
}

pub fn serialize_structure_delete_workflow_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkflowInput,
) {
    if let Some(var_308) = &input.name {
        object.key("Name").string(var_308);
    }
}

pub fn serialize_structure_get_catalog_import_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCatalogImportStatusInput,
) {
    if let Some(var_309) = &input.catalog_id {
        object.key("CatalogId").string(var_309);
    }
}

pub fn serialize_structure_get_classifier_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifierInput,
) {
    if let Some(var_310) = &input.name {
        object.key("Name").string(var_310);
    }
}

pub fn serialize_structure_get_classifiers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifiersInput,
) {
    if let Some(var_311) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    if let Some(var_312) = &input.next_token {
        object.key("NextToken").string(var_312);
    }
}

pub fn serialize_structure_get_column_statistics_for_partition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForPartitionInput,
) {
    if let Some(var_313) = &input.catalog_id {
        object.key("CatalogId").string(var_313);
    }
    if let Some(var_314) = &input.database_name {
        object.key("DatabaseName").string(var_314);
    }
    if let Some(var_315) = &input.table_name {
        object.key("TableName").string(var_315);
    }
    if let Some(var_316) = &input.partition_values {
        let mut array_317 = object.key("PartitionValues").start_array();
        for item_318 in var_316 {
            {
                array_317.value().string(item_318);
            }
        }
        array_317.finish();
    }
    if let Some(var_319) = &input.column_names {
        let mut array_320 = object.key("ColumnNames").start_array();
        for item_321 in var_319 {
            {
                array_320.value().string(item_321);
            }
        }
        array_320.finish();
    }
}

pub fn serialize_structure_get_column_statistics_for_table_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForTableInput,
) {
    if let Some(var_322) = &input.catalog_id {
        object.key("CatalogId").string(var_322);
    }
    if let Some(var_323) = &input.database_name {
        object.key("DatabaseName").string(var_323);
    }
    if let Some(var_324) = &input.table_name {
        object.key("TableName").string(var_324);
    }
    if let Some(var_325) = &input.column_names {
        let mut array_326 = object.key("ColumnNames").start_array();
        for item_327 in var_325 {
            {
                array_326.value().string(item_327);
            }
        }
        array_326.finish();
    }
}

pub fn serialize_structure_get_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionInput,
) {
    if let Some(var_328) = &input.catalog_id {
        object.key("CatalogId").string(var_328);
    }
    if let Some(var_329) = &input.name {
        object.key("Name").string(var_329);
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
}

pub fn serialize_structure_get_connections_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionsInput,
) {
    if let Some(var_330) = &input.catalog_id {
        object.key("CatalogId").string(var_330);
    }
    if let Some(var_331) = &input.filter {
        let mut object_332 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_get_connections_filter(&mut object_332, var_331);
        object_332.finish();
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    if let Some(var_333) = &input.next_token {
        object.key("NextToken").string(var_333);
    }
    if let Some(var_334) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_334).into()),
        );
    }
}

pub fn serialize_structure_get_crawler_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerInput,
) {
    if let Some(var_335) = &input.name {
        object.key("Name").string(var_335);
    }
}

pub fn serialize_structure_get_crawler_metrics_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerMetricsInput,
) {
    if let Some(var_336) = &input.crawler_name_list {
        let mut array_337 = object.key("CrawlerNameList").start_array();
        for item_338 in var_336 {
            {
                array_337.value().string(item_338);
            }
        }
        array_337.finish();
    }
    if let Some(var_339) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_339).into()),
        );
    }
    if let Some(var_340) = &input.next_token {
        object.key("NextToken").string(var_340);
    }
}

pub fn serialize_structure_get_crawlers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlersInput,
) {
    if let Some(var_341) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_341).into()),
        );
    }
    if let Some(var_342) = &input.next_token {
        object.key("NextToken").string(var_342);
    }
}

pub fn serialize_structure_get_database_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabaseInput,
) {
    if let Some(var_343) = &input.catalog_id {
        object.key("CatalogId").string(var_343);
    }
    if let Some(var_344) = &input.name {
        object.key("Name").string(var_344);
    }
}

pub fn serialize_structure_get_databases_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabasesInput,
) {
    if let Some(var_345) = &input.catalog_id {
        object.key("CatalogId").string(var_345);
    }
    if let Some(var_346) = &input.next_token {
        object.key("NextToken").string(var_346);
    }
    if let Some(var_347) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_347).into()),
        );
    }
    if let Some(var_348) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_348.as_str());
    }
}

pub fn serialize_structure_get_data_catalog_encryption_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataCatalogEncryptionSettingsInput,
) {
    if let Some(var_349) = &input.catalog_id {
        object.key("CatalogId").string(var_349);
    }
}

pub fn serialize_structure_get_dataflow_graph_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataflowGraphInput,
) {
    if let Some(var_350) = &input.python_script {
        object.key("PythonScript").string(var_350);
    }
}

pub fn serialize_structure_get_dev_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointInput,
) {
    if let Some(var_351) = &input.endpoint_name {
        object.key("EndpointName").string(var_351);
    }
}

pub fn serialize_structure_get_dev_endpoints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointsInput,
) {
    if let Some(var_352) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_352).into()),
        );
    }
    if let Some(var_353) = &input.next_token {
        object.key("NextToken").string(var_353);
    }
}

pub fn serialize_structure_get_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobInput,
) {
    if let Some(var_354) = &input.job_name {
        object.key("JobName").string(var_354);
    }
}

pub fn serialize_structure_get_job_bookmark_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobBookmarkInput,
) {
    if let Some(var_355) = &input.job_name {
        object.key("JobName").string(var_355);
    }
    if let Some(var_356) = &input.run_id {
        object.key("RunId").string(var_356);
    }
}

pub fn serialize_structure_get_job_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunInput,
) {
    if let Some(var_357) = &input.job_name {
        object.key("JobName").string(var_357);
    }
    if let Some(var_358) = &input.run_id {
        object.key("RunId").string(var_358);
    }
    if input.predecessors_included {
        object
            .key("PredecessorsIncluded")
            .boolean(input.predecessors_included);
    }
}

pub fn serialize_structure_get_job_runs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunsInput,
) {
    if let Some(var_359) = &input.job_name {
        object.key("JobName").string(var_359);
    }
    if let Some(var_360) = &input.next_token {
        object.key("NextToken").string(var_360);
    }
    if let Some(var_361) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_361).into()),
        );
    }
}

pub fn serialize_structure_get_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobsInput,
) {
    if let Some(var_362) = &input.next_token {
        object.key("NextToken").string(var_362);
    }
    if let Some(var_363) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_363).into()),
        );
    }
}

pub fn serialize_structure_get_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMappingInput,
) {
    if let Some(var_364) = &input.source {
        let mut object_365 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_catalog_entry(&mut object_365, var_364);
        object_365.finish();
    }
    if let Some(var_366) = &input.sinks {
        let mut array_367 = object.key("Sinks").start_array();
        for item_368 in var_366 {
            {
                let mut object_369 = array_367.value().start_object();
                crate::json_ser::serialize_structure_catalog_entry(&mut object_369, item_368);
                object_369.finish();
            }
        }
        array_367.finish();
    }
    if let Some(var_370) = &input.location {
        let mut object_371 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_location(&mut object_371, var_370);
        object_371.finish();
    }
}

pub fn serialize_structure_get_ml_task_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunInput,
) {
    if let Some(var_372) = &input.transform_id {
        object.key("TransformId").string(var_372);
    }
    if let Some(var_373) = &input.task_run_id {
        object.key("TaskRunId").string(var_373);
    }
}

pub fn serialize_structure_get_ml_task_runs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunsInput,
) {
    if let Some(var_374) = &input.transform_id {
        object.key("TransformId").string(var_374);
    }
    if let Some(var_375) = &input.next_token {
        object.key("NextToken").string(var_375);
    }
    if let Some(var_376) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_376).into()),
        );
    }
    if let Some(var_377) = &input.filter {
        let mut object_378 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_task_run_filter_criteria(&mut object_378, var_377);
        object_378.finish();
    }
    if let Some(var_379) = &input.sort {
        let mut object_380 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_task_run_sort_criteria(&mut object_380, var_379);
        object_380.finish();
    }
}

pub fn serialize_structure_get_ml_transform_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformInput,
) {
    if let Some(var_381) = &input.transform_id {
        object.key("TransformId").string(var_381);
    }
}

pub fn serialize_structure_get_ml_transforms_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformsInput,
) {
    if let Some(var_382) = &input.next_token {
        object.key("NextToken").string(var_382);
    }
    if let Some(var_383) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_383).into()),
        );
    }
    if let Some(var_384) = &input.filter {
        let mut object_385 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_transform_filter_criteria(&mut object_385, var_384);
        object_385.finish();
    }
    if let Some(var_386) = &input.sort {
        let mut object_387 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_transform_sort_criteria(&mut object_387, var_386);
        object_387.finish();
    }
}

pub fn serialize_structure_get_partition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionInput,
) {
    if let Some(var_388) = &input.catalog_id {
        object.key("CatalogId").string(var_388);
    }
    if let Some(var_389) = &input.database_name {
        object.key("DatabaseName").string(var_389);
    }
    if let Some(var_390) = &input.table_name {
        object.key("TableName").string(var_390);
    }
    if let Some(var_391) = &input.partition_values {
        let mut array_392 = object.key("PartitionValues").start_array();
        for item_393 in var_391 {
            {
                array_392.value().string(item_393);
            }
        }
        array_392.finish();
    }
}

pub fn serialize_structure_get_partition_indexes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionIndexesInput,
) {
    if let Some(var_394) = &input.catalog_id {
        object.key("CatalogId").string(var_394);
    }
    if let Some(var_395) = &input.database_name {
        object.key("DatabaseName").string(var_395);
    }
    if let Some(var_396) = &input.table_name {
        object.key("TableName").string(var_396);
    }
    if let Some(var_397) = &input.next_token {
        object.key("NextToken").string(var_397);
    }
}

pub fn serialize_structure_get_partitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionsInput,
) {
    if let Some(var_398) = &input.catalog_id {
        object.key("CatalogId").string(var_398);
    }
    if let Some(var_399) = &input.database_name {
        object.key("DatabaseName").string(var_399);
    }
    if let Some(var_400) = &input.table_name {
        object.key("TableName").string(var_400);
    }
    if let Some(var_401) = &input.expression {
        object.key("Expression").string(var_401);
    }
    if let Some(var_402) = &input.next_token {
        object.key("NextToken").string(var_402);
    }
    if let Some(var_403) = &input.segment {
        let mut object_404 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_segment(&mut object_404, var_403);
        object_404.finish();
    }
    if let Some(var_405) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_405).into()),
        );
    }
    if let Some(var_406) = &input.exclude_column_schema {
        object.key("ExcludeColumnSchema").boolean(*var_406);
    }
}

pub fn serialize_structure_get_plan_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPlanInput,
) {
    if let Some(var_407) = &input.mapping {
        let mut array_408 = object.key("Mapping").start_array();
        for item_409 in var_407 {
            {
                let mut object_410 = array_408.value().start_object();
                crate::json_ser::serialize_structure_mapping_entry(&mut object_410, item_409);
                object_410.finish();
            }
        }
        array_408.finish();
    }
    if let Some(var_411) = &input.source {
        let mut object_412 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_catalog_entry(&mut object_412, var_411);
        object_412.finish();
    }
    if let Some(var_413) = &input.sinks {
        let mut array_414 = object.key("Sinks").start_array();
        for item_415 in var_413 {
            {
                let mut object_416 = array_414.value().start_object();
                crate::json_ser::serialize_structure_catalog_entry(&mut object_416, item_415);
                object_416.finish();
            }
        }
        array_414.finish();
    }
    if let Some(var_417) = &input.location {
        let mut object_418 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_location(&mut object_418, var_417);
        object_418.finish();
    }
    if let Some(var_419) = &input.language {
        object.key("Language").string(var_419.as_str());
    }
    if let Some(var_420) = &input.additional_plan_options_map {
        let mut object_421 = object.key("AdditionalPlanOptionsMap").start_object();
        for (key_422, value_423) in var_420 {
            {
                object_421.key(key_422).string(value_423);
            }
        }
        object_421.finish();
    }
}

pub fn serialize_structure_get_registry_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegistryInput,
) {
    if let Some(var_424) = &input.registry_id {
        let mut object_425 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_registry_id(&mut object_425, var_424);
        object_425.finish();
    }
}

pub fn serialize_structure_get_resource_policies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePoliciesInput,
) {
    if let Some(var_426) = &input.next_token {
        object.key("NextToken").string(var_426);
    }
    if let Some(var_427) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_427).into()),
        );
    }
}

pub fn serialize_structure_get_resource_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePolicyInput,
) {
    if let Some(var_428) = &input.resource_arn {
        object.key("ResourceArn").string(var_428);
    }
}

pub fn serialize_structure_get_schema_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaInput,
) {
    if let Some(var_429) = &input.schema_id {
        let mut object_430 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_430, var_429);
        object_430.finish();
    }
}

pub fn serialize_structure_get_schema_by_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaByDefinitionInput,
) {
    if let Some(var_431) = &input.schema_id {
        let mut object_432 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_432, var_431);
        object_432.finish();
    }
    if let Some(var_433) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_433);
    }
}

pub fn serialize_structure_get_schema_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionInput,
) {
    if let Some(var_434) = &input.schema_id {
        let mut object_435 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_435, var_434);
        object_435.finish();
    }
    if let Some(var_436) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_436);
    }
    if let Some(var_437) = &input.schema_version_number {
        let mut object_438 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_schema_version_number(&mut object_438, var_437);
        object_438.finish();
    }
}

pub fn serialize_structure_get_schema_versions_diff_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionsDiffInput,
) {
    if let Some(var_439) = &input.schema_id {
        let mut object_440 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_440, var_439);
        object_440.finish();
    }
    if let Some(var_441) = &input.first_schema_version_number {
        let mut object_442 = object.key("FirstSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_schema_version_number(&mut object_442, var_441);
        object_442.finish();
    }
    if let Some(var_443) = &input.second_schema_version_number {
        let mut object_444 = object.key("SecondSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_schema_version_number(&mut object_444, var_443);
        object_444.finish();
    }
    if let Some(var_445) = &input.schema_diff_type {
        object.key("SchemaDiffType").string(var_445.as_str());
    }
}

pub fn serialize_structure_get_security_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationInput,
) {
    if let Some(var_446) = &input.name {
        object.key("Name").string(var_446);
    }
}

pub fn serialize_structure_get_security_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationsInput,
) {
    if let Some(var_447) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_447).into()),
        );
    }
    if let Some(var_448) = &input.next_token {
        object.key("NextToken").string(var_448);
    }
}

pub fn serialize_structure_get_table_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableInput,
) {
    if let Some(var_449) = &input.catalog_id {
        object.key("CatalogId").string(var_449);
    }
    if let Some(var_450) = &input.database_name {
        object.key("DatabaseName").string(var_450);
    }
    if let Some(var_451) = &input.name {
        object.key("Name").string(var_451);
    }
}

pub fn serialize_structure_get_tables_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTablesInput,
) {
    if let Some(var_452) = &input.catalog_id {
        object.key("CatalogId").string(var_452);
    }
    if let Some(var_453) = &input.database_name {
        object.key("DatabaseName").string(var_453);
    }
    if let Some(var_454) = &input.expression {
        object.key("Expression").string(var_454);
    }
    if let Some(var_455) = &input.next_token {
        object.key("NextToken").string(var_455);
    }
    if let Some(var_456) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_456).into()),
        );
    }
}

pub fn serialize_structure_get_table_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionInput,
) {
    if let Some(var_457) = &input.catalog_id {
        object.key("CatalogId").string(var_457);
    }
    if let Some(var_458) = &input.database_name {
        object.key("DatabaseName").string(var_458);
    }
    if let Some(var_459) = &input.table_name {
        object.key("TableName").string(var_459);
    }
    if let Some(var_460) = &input.version_id {
        object.key("VersionId").string(var_460);
    }
}

pub fn serialize_structure_get_table_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionsInput,
) {
    if let Some(var_461) = &input.catalog_id {
        object.key("CatalogId").string(var_461);
    }
    if let Some(var_462) = &input.database_name {
        object.key("DatabaseName").string(var_462);
    }
    if let Some(var_463) = &input.table_name {
        object.key("TableName").string(var_463);
    }
    if let Some(var_464) = &input.next_token {
        object.key("NextToken").string(var_464);
    }
    if let Some(var_465) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_465).into()),
        );
    }
}

pub fn serialize_structure_get_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTagsInput,
) {
    if let Some(var_466) = &input.resource_arn {
        object.key("ResourceArn").string(var_466);
    }
}

pub fn serialize_structure_get_trigger_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggerInput,
) {
    if let Some(var_467) = &input.name {
        object.key("Name").string(var_467);
    }
}

pub fn serialize_structure_get_triggers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggersInput,
) {
    if let Some(var_468) = &input.next_token {
        object.key("NextToken").string(var_468);
    }
    if let Some(var_469) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_469);
    }
    if let Some(var_470) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_470).into()),
        );
    }
}

pub fn serialize_structure_get_user_defined_function_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionInput,
) {
    if let Some(var_471) = &input.catalog_id {
        object.key("CatalogId").string(var_471);
    }
    if let Some(var_472) = &input.database_name {
        object.key("DatabaseName").string(var_472);
    }
    if let Some(var_473) = &input.function_name {
        object.key("FunctionName").string(var_473);
    }
}

pub fn serialize_structure_get_user_defined_functions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionsInput,
) {
    if let Some(var_474) = &input.catalog_id {
        object.key("CatalogId").string(var_474);
    }
    if let Some(var_475) = &input.database_name {
        object.key("DatabaseName").string(var_475);
    }
    if let Some(var_476) = &input.pattern {
        object.key("Pattern").string(var_476);
    }
    if let Some(var_477) = &input.next_token {
        object.key("NextToken").string(var_477);
    }
    if let Some(var_478) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_478).into()),
        );
    }
}

pub fn serialize_structure_get_workflow_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowInput,
) {
    if let Some(var_479) = &input.name {
        object.key("Name").string(var_479);
    }
    if let Some(var_480) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_480);
    }
}

pub fn serialize_structure_get_workflow_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunInput,
) {
    if let Some(var_481) = &input.name {
        object.key("Name").string(var_481);
    }
    if let Some(var_482) = &input.run_id {
        object.key("RunId").string(var_482);
    }
    if let Some(var_483) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_483);
    }
}

pub fn serialize_structure_get_workflow_run_properties_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunPropertiesInput,
) {
    if let Some(var_484) = &input.name {
        object.key("Name").string(var_484);
    }
    if let Some(var_485) = &input.run_id {
        object.key("RunId").string(var_485);
    }
}

pub fn serialize_structure_get_workflow_runs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunsInput,
) {
    if let Some(var_486) = &input.name {
        object.key("Name").string(var_486);
    }
    if let Some(var_487) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_487);
    }
    if let Some(var_488) = &input.next_token {
        object.key("NextToken").string(var_488);
    }
    if let Some(var_489) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_489).into()),
        );
    }
}

pub fn serialize_structure_import_catalog_to_glue_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCatalogToGlueInput,
) {
    if let Some(var_490) = &input.catalog_id {
        object.key("CatalogId").string(var_490);
    }
}

pub fn serialize_structure_list_crawlers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCrawlersInput,
) {
    if let Some(var_491) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_491).into()),
        );
    }
    if let Some(var_492) = &input.next_token {
        object.key("NextToken").string(var_492);
    }
    if let Some(var_493) = &input.tags {
        let mut object_494 = object.key("Tags").start_object();
        for (key_495, value_496) in var_493 {
            {
                object_494.key(key_495).string(value_496);
            }
        }
        object_494.finish();
    }
}

pub fn serialize_structure_list_dev_endpoints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevEndpointsInput,
) {
    if let Some(var_497) = &input.next_token {
        object.key("NextToken").string(var_497);
    }
    if let Some(var_498) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_498).into()),
        );
    }
    if let Some(var_499) = &input.tags {
        let mut object_500 = object.key("Tags").start_object();
        for (key_501, value_502) in var_499 {
            {
                object_500.key(key_501).string(value_502);
            }
        }
        object_500.finish();
    }
}

pub fn serialize_structure_list_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListJobsInput,
) {
    if let Some(var_503) = &input.next_token {
        object.key("NextToken").string(var_503);
    }
    if let Some(var_504) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_504).into()),
        );
    }
    if let Some(var_505) = &input.tags {
        let mut object_506 = object.key("Tags").start_object();
        for (key_507, value_508) in var_505 {
            {
                object_506.key(key_507).string(value_508);
            }
        }
        object_506.finish();
    }
}

pub fn serialize_structure_list_ml_transforms_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMlTransformsInput,
) {
    if let Some(var_509) = &input.next_token {
        object.key("NextToken").string(var_509);
    }
    if let Some(var_510) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_510).into()),
        );
    }
    if let Some(var_511) = &input.filter {
        let mut object_512 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_transform_filter_criteria(&mut object_512, var_511);
        object_512.finish();
    }
    if let Some(var_513) = &input.sort {
        let mut object_514 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_transform_sort_criteria(&mut object_514, var_513);
        object_514.finish();
    }
    if let Some(var_515) = &input.tags {
        let mut object_516 = object.key("Tags").start_object();
        for (key_517, value_518) in var_515 {
            {
                object_516.key(key_517).string(value_518);
            }
        }
        object_516.finish();
    }
}

pub fn serialize_structure_list_registries_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegistriesInput,
) {
    if let Some(var_519) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_519).into()),
        );
    }
    if let Some(var_520) = &input.next_token {
        object.key("NextToken").string(var_520);
    }
}

pub fn serialize_structure_list_schemas_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemasInput,
) {
    if let Some(var_521) = &input.registry_id {
        let mut object_522 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_registry_id(&mut object_522, var_521);
        object_522.finish();
    }
    if let Some(var_523) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_523).into()),
        );
    }
    if let Some(var_524) = &input.next_token {
        object.key("NextToken").string(var_524);
    }
}

pub fn serialize_structure_list_schema_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemaVersionsInput,
) {
    if let Some(var_525) = &input.schema_id {
        let mut object_526 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_526, var_525);
        object_526.finish();
    }
    if let Some(var_527) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_527).into()),
        );
    }
    if let Some(var_528) = &input.next_token {
        object.key("NextToken").string(var_528);
    }
}

pub fn serialize_structure_list_triggers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTriggersInput,
) {
    if let Some(var_529) = &input.next_token {
        object.key("NextToken").string(var_529);
    }
    if let Some(var_530) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_530);
    }
    if let Some(var_531) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_531).into()),
        );
    }
    if let Some(var_532) = &input.tags {
        let mut object_533 = object.key("Tags").start_object();
        for (key_534, value_535) in var_532 {
            {
                object_533.key(key_534).string(value_535);
            }
        }
        object_533.finish();
    }
}

pub fn serialize_structure_list_workflows_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkflowsInput,
) {
    if let Some(var_536) = &input.next_token {
        object.key("NextToken").string(var_536);
    }
    if let Some(var_537) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_537).into()),
        );
    }
}

pub fn serialize_structure_put_data_catalog_encryption_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDataCatalogEncryptionSettingsInput,
) {
    if let Some(var_538) = &input.catalog_id {
        object.key("CatalogId").string(var_538);
    }
    if let Some(var_539) = &input.data_catalog_encryption_settings {
        let mut object_540 = object.key("DataCatalogEncryptionSettings").start_object();
        crate::json_ser::serialize_structure_data_catalog_encryption_settings(
            &mut object_540,
            var_539,
        );
        object_540.finish();
    }
}

pub fn serialize_structure_put_resource_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourcePolicyInput,
) {
    if let Some(var_541) = &input.policy_in_json {
        object.key("PolicyInJson").string(var_541);
    }
    if let Some(var_542) = &input.resource_arn {
        object.key("ResourceArn").string(var_542);
    }
    if let Some(var_543) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_543);
    }
    if let Some(var_544) = &input.policy_exists_condition {
        object.key("PolicyExistsCondition").string(var_544.as_str());
    }
    if let Some(var_545) = &input.enable_hybrid {
        object.key("EnableHybrid").string(var_545.as_str());
    }
}

pub fn serialize_structure_put_schema_version_metadata_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutSchemaVersionMetadataInput,
) {
    if let Some(var_546) = &input.schema_id {
        let mut object_547 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_547, var_546);
        object_547.finish();
    }
    if let Some(var_548) = &input.schema_version_number {
        let mut object_549 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_schema_version_number(&mut object_549, var_548);
        object_549.finish();
    }
    if let Some(var_550) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_550);
    }
    if let Some(var_551) = &input.metadata_key_value {
        let mut object_552 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_metadata_key_value_pair(&mut object_552, var_551);
        object_552.finish();
    }
}

pub fn serialize_structure_put_workflow_run_properties_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutWorkflowRunPropertiesInput,
) {
    if let Some(var_553) = &input.name {
        object.key("Name").string(var_553);
    }
    if let Some(var_554) = &input.run_id {
        object.key("RunId").string(var_554);
    }
    if let Some(var_555) = &input.run_properties {
        let mut object_556 = object.key("RunProperties").start_object();
        for (key_557, value_558) in var_555 {
            {
                object_556.key(key_557).string(value_558);
            }
        }
        object_556.finish();
    }
}

pub fn serialize_structure_query_schema_version_metadata_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QuerySchemaVersionMetadataInput,
) {
    if let Some(var_559) = &input.schema_id {
        let mut object_560 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_560, var_559);
        object_560.finish();
    }
    if let Some(var_561) = &input.schema_version_number {
        let mut object_562 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_schema_version_number(&mut object_562, var_561);
        object_562.finish();
    }
    if let Some(var_563) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_563);
    }
    if let Some(var_564) = &input.metadata_list {
        let mut array_565 = object.key("MetadataList").start_array();
        for item_566 in var_564 {
            {
                let mut object_567 = array_565.value().start_object();
                crate::json_ser::serialize_structure_metadata_key_value_pair(
                    &mut object_567,
                    item_566,
                );
                object_567.finish();
            }
        }
        array_565.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_568) = &input.next_token {
        object.key("NextToken").string(var_568);
    }
}

pub fn serialize_structure_register_schema_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterSchemaVersionInput,
) {
    if let Some(var_569) = &input.schema_id {
        let mut object_570 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_570, var_569);
        object_570.finish();
    }
    if let Some(var_571) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_571);
    }
}

pub fn serialize_structure_remove_schema_version_metadata_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveSchemaVersionMetadataInput,
) {
    if let Some(var_572) = &input.schema_id {
        let mut object_573 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_573, var_572);
        object_573.finish();
    }
    if let Some(var_574) = &input.schema_version_number {
        let mut object_575 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_schema_version_number(&mut object_575, var_574);
        object_575.finish();
    }
    if let Some(var_576) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_576);
    }
    if let Some(var_577) = &input.metadata_key_value {
        let mut object_578 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_metadata_key_value_pair(&mut object_578, var_577);
        object_578.finish();
    }
}

pub fn serialize_structure_reset_job_bookmark_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetJobBookmarkInput,
) {
    if let Some(var_579) = &input.job_name {
        object.key("JobName").string(var_579);
    }
    if let Some(var_580) = &input.run_id {
        object.key("RunId").string(var_580);
    }
}

pub fn serialize_structure_resume_workflow_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeWorkflowRunInput,
) {
    if let Some(var_581) = &input.name {
        object.key("Name").string(var_581);
    }
    if let Some(var_582) = &input.run_id {
        object.key("RunId").string(var_582);
    }
    if let Some(var_583) = &input.node_ids {
        let mut array_584 = object.key("NodeIds").start_array();
        for item_585 in var_583 {
            {
                array_584.value().string(item_585);
            }
        }
        array_584.finish();
    }
}

pub fn serialize_structure_search_tables_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchTablesInput,
) {
    if let Some(var_586) = &input.catalog_id {
        object.key("CatalogId").string(var_586);
    }
    if let Some(var_587) = &input.next_token {
        object.key("NextToken").string(var_587);
    }
    if let Some(var_588) = &input.filters {
        let mut array_589 = object.key("Filters").start_array();
        for item_590 in var_588 {
            {
                let mut object_591 = array_589.value().start_object();
                crate::json_ser::serialize_structure_property_predicate(&mut object_591, item_590);
                object_591.finish();
            }
        }
        array_589.finish();
    }
    if let Some(var_592) = &input.search_text {
        object.key("SearchText").string(var_592);
    }
    if let Some(var_593) = &input.sort_criteria {
        let mut array_594 = object.key("SortCriteria").start_array();
        for item_595 in var_593 {
            {
                let mut object_596 = array_594.value().start_object();
                crate::json_ser::serialize_structure_sort_criterion(&mut object_596, item_595);
                object_596.finish();
            }
        }
        array_594.finish();
    }
    if let Some(var_597) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_597).into()),
        );
    }
    if let Some(var_598) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_598.as_str());
    }
}

pub fn serialize_structure_start_crawler_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerInput,
) {
    if let Some(var_599) = &input.name {
        object.key("Name").string(var_599);
    }
}

pub fn serialize_structure_start_crawler_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerScheduleInput,
) {
    if let Some(var_600) = &input.crawler_name {
        object.key("CrawlerName").string(var_600);
    }
}

pub fn serialize_structure_start_export_labels_task_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartExportLabelsTaskRunInput,
) {
    if let Some(var_601) = &input.transform_id {
        object.key("TransformId").string(var_601);
    }
    if let Some(var_602) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_602);
    }
}

pub fn serialize_structure_start_import_labels_task_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportLabelsTaskRunInput,
) {
    if let Some(var_603) = &input.transform_id {
        object.key("TransformId").string(var_603);
    }
    if let Some(var_604) = &input.input_s3_path {
        object.key("InputS3Path").string(var_604);
    }
    if input.replace_all_labels {
        object
            .key("ReplaceAllLabels")
            .boolean(input.replace_all_labels);
    }
}

pub fn serialize_structure_start_job_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartJobRunInput,
) {
    if let Some(var_605) = &input.job_name {
        object.key("JobName").string(var_605);
    }
    if let Some(var_606) = &input.job_run_id {
        object.key("JobRunId").string(var_606);
    }
    if let Some(var_607) = &input.arguments {
        let mut object_608 = object.key("Arguments").start_object();
        for (key_609, value_610) in var_607 {
            {
                object_608.key(key_609).string(value_610);
            }
        }
        object_608.finish();
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_611) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_611).into()),
        );
    }
    if let Some(var_612) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_612).into()),
        );
    }
    if let Some(var_613) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_613);
    }
    if let Some(var_614) = &input.notification_property {
        let mut object_615 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_notification_property(&mut object_615, var_614);
        object_615.finish();
    }
    if let Some(var_616) = &input.worker_type {
        object.key("WorkerType").string(var_616.as_str());
    }
    if let Some(var_617) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_617).into()),
        );
    }
}

pub fn serialize_structure_start_ml_evaluation_task_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlEvaluationTaskRunInput,
) {
    if let Some(var_618) = &input.transform_id {
        object.key("TransformId").string(var_618);
    }
}

pub fn serialize_structure_start_ml_labeling_set_generation_task_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlLabelingSetGenerationTaskRunInput,
) {
    if let Some(var_619) = &input.transform_id {
        object.key("TransformId").string(var_619);
    }
    if let Some(var_620) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_620);
    }
}

pub fn serialize_structure_start_trigger_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTriggerInput,
) {
    if let Some(var_621) = &input.name {
        object.key("Name").string(var_621);
    }
}

pub fn serialize_structure_start_workflow_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartWorkflowRunInput,
) {
    if let Some(var_622) = &input.name {
        object.key("Name").string(var_622);
    }
}

pub fn serialize_structure_stop_crawler_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerInput,
) {
    if let Some(var_623) = &input.name {
        object.key("Name").string(var_623);
    }
}

pub fn serialize_structure_stop_crawler_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerScheduleInput,
) {
    if let Some(var_624) = &input.crawler_name {
        object.key("CrawlerName").string(var_624);
    }
}

pub fn serialize_structure_stop_trigger_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTriggerInput,
) {
    if let Some(var_625) = &input.name {
        object.key("Name").string(var_625);
    }
}

pub fn serialize_structure_stop_workflow_run_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopWorkflowRunInput,
) {
    if let Some(var_626) = &input.name {
        object.key("Name").string(var_626);
    }
    if let Some(var_627) = &input.run_id {
        object.key("RunId").string(var_627);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_628) = &input.resource_arn {
        object.key("ResourceArn").string(var_628);
    }
    if let Some(var_629) = &input.tags_to_add {
        let mut object_630 = object.key("TagsToAdd").start_object();
        for (key_631, value_632) in var_629 {
            {
                object_630.key(key_631).string(value_632);
            }
        }
        object_630.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_633) = &input.resource_arn {
        object.key("ResourceArn").string(var_633);
    }
    if let Some(var_634) = &input.tags_to_remove {
        let mut array_635 = object.key("TagsToRemove").start_array();
        for item_636 in var_634 {
            {
                array_635.value().string(item_636);
            }
        }
        array_635.finish();
    }
}

pub fn serialize_structure_update_classifier_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClassifierInput,
) {
    if let Some(var_637) = &input.grok_classifier {
        let mut object_638 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_update_grok_classifier_request(
            &mut object_638,
            var_637,
        );
        object_638.finish();
    }
    if let Some(var_639) = &input.xml_classifier {
        let mut object_640 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_update_xml_classifier_request(
            &mut object_640,
            var_639,
        );
        object_640.finish();
    }
    if let Some(var_641) = &input.json_classifier {
        let mut object_642 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_update_json_classifier_request(
            &mut object_642,
            var_641,
        );
        object_642.finish();
    }
    if let Some(var_643) = &input.csv_classifier {
        let mut object_644 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_update_csv_classifier_request(
            &mut object_644,
            var_643,
        );
        object_644.finish();
    }
}

pub fn serialize_structure_update_column_statistics_for_partition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForPartitionInput,
) {
    if let Some(var_645) = &input.catalog_id {
        object.key("CatalogId").string(var_645);
    }
    if let Some(var_646) = &input.database_name {
        object.key("DatabaseName").string(var_646);
    }
    if let Some(var_647) = &input.table_name {
        object.key("TableName").string(var_647);
    }
    if let Some(var_648) = &input.partition_values {
        let mut array_649 = object.key("PartitionValues").start_array();
        for item_650 in var_648 {
            {
                array_649.value().string(item_650);
            }
        }
        array_649.finish();
    }
    if let Some(var_651) = &input.column_statistics_list {
        let mut array_652 = object.key("ColumnStatisticsList").start_array();
        for item_653 in var_651 {
            {
                let mut object_654 = array_652.value().start_object();
                crate::json_ser::serialize_structure_column_statistics(&mut object_654, item_653);
                object_654.finish();
            }
        }
        array_652.finish();
    }
}

pub fn serialize_structure_update_column_statistics_for_table_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForTableInput,
) {
    if let Some(var_655) = &input.catalog_id {
        object.key("CatalogId").string(var_655);
    }
    if let Some(var_656) = &input.database_name {
        object.key("DatabaseName").string(var_656);
    }
    if let Some(var_657) = &input.table_name {
        object.key("TableName").string(var_657);
    }
    if let Some(var_658) = &input.column_statistics_list {
        let mut array_659 = object.key("ColumnStatisticsList").start_array();
        for item_660 in var_658 {
            {
                let mut object_661 = array_659.value().start_object();
                crate::json_ser::serialize_structure_column_statistics(&mut object_661, item_660);
                object_661.finish();
            }
        }
        array_659.finish();
    }
}

pub fn serialize_structure_update_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectionInput,
) {
    if let Some(var_662) = &input.catalog_id {
        object.key("CatalogId").string(var_662);
    }
    if let Some(var_663) = &input.name {
        object.key("Name").string(var_663);
    }
    if let Some(var_664) = &input.connection_input {
        let mut object_665 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_connection_input(&mut object_665, var_664);
        object_665.finish();
    }
}

pub fn serialize_structure_update_crawler_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerInput,
) {
    if let Some(var_666) = &input.name {
        object.key("Name").string(var_666);
    }
    if let Some(var_667) = &input.role {
        object.key("Role").string(var_667);
    }
    if let Some(var_668) = &input.database_name {
        object.key("DatabaseName").string(var_668);
    }
    if let Some(var_669) = &input.description {
        object.key("Description").string(var_669);
    }
    if let Some(var_670) = &input.targets {
        let mut object_671 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crawler_targets(&mut object_671, var_670);
        object_671.finish();
    }
    if let Some(var_672) = &input.schedule {
        object.key("Schedule").string(var_672);
    }
    if let Some(var_673) = &input.classifiers {
        let mut array_674 = object.key("Classifiers").start_array();
        for item_675 in var_673 {
            {
                array_674.value().string(item_675);
            }
        }
        array_674.finish();
    }
    if let Some(var_676) = &input.table_prefix {
        object.key("TablePrefix").string(var_676);
    }
    if let Some(var_677) = &input.schema_change_policy {
        let mut object_678 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_schema_change_policy(&mut object_678, var_677);
        object_678.finish();
    }
    if let Some(var_679) = &input.recrawl_policy {
        let mut object_680 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_recrawl_policy(&mut object_680, var_679);
        object_680.finish();
    }
    if let Some(var_681) = &input.lineage_configuration {
        let mut object_682 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_lineage_configuration(&mut object_682, var_681);
        object_682.finish();
    }
    if let Some(var_683) = &input.configuration {
        object.key("Configuration").string(var_683);
    }
    if let Some(var_684) = &input.crawler_security_configuration {
        object.key("CrawlerSecurityConfiguration").string(var_684);
    }
}

pub fn serialize_structure_update_crawler_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerScheduleInput,
) {
    if let Some(var_685) = &input.crawler_name {
        object.key("CrawlerName").string(var_685);
    }
    if let Some(var_686) = &input.schedule {
        object.key("Schedule").string(var_686);
    }
}

pub fn serialize_structure_update_database_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatabaseInput,
) {
    if let Some(var_687) = &input.catalog_id {
        object.key("CatalogId").string(var_687);
    }
    if let Some(var_688) = &input.name {
        object.key("Name").string(var_688);
    }
    if let Some(var_689) = &input.database_input {
        let mut object_690 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_database_input(&mut object_690, var_689);
        object_690.finish();
    }
}

pub fn serialize_structure_update_dev_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevEndpointInput,
) {
    if let Some(var_691) = &input.endpoint_name {
        object.key("EndpointName").string(var_691);
    }
    if let Some(var_692) = &input.public_key {
        object.key("PublicKey").string(var_692);
    }
    if let Some(var_693) = &input.add_public_keys {
        let mut array_694 = object.key("AddPublicKeys").start_array();
        for item_695 in var_693 {
            {
                array_694.value().string(item_695);
            }
        }
        array_694.finish();
    }
    if let Some(var_696) = &input.delete_public_keys {
        let mut array_697 = object.key("DeletePublicKeys").start_array();
        for item_698 in var_696 {
            {
                array_697.value().string(item_698);
            }
        }
        array_697.finish();
    }
    if let Some(var_699) = &input.custom_libraries {
        let mut object_700 = object.key("CustomLibraries").start_object();
        crate::json_ser::serialize_structure_dev_endpoint_custom_libraries(
            &mut object_700,
            var_699,
        );
        object_700.finish();
    }
    if input.update_etl_libraries {
        object
            .key("UpdateEtlLibraries")
            .boolean(input.update_etl_libraries);
    }
    if let Some(var_701) = &input.delete_arguments {
        let mut array_702 = object.key("DeleteArguments").start_array();
        for item_703 in var_701 {
            {
                array_702.value().string(item_703);
            }
        }
        array_702.finish();
    }
    if let Some(var_704) = &input.add_arguments {
        let mut object_705 = object.key("AddArguments").start_object();
        for (key_706, value_707) in var_704 {
            {
                object_705.key(key_706).string(value_707);
            }
        }
        object_705.finish();
    }
}

pub fn serialize_structure_update_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobInput,
) {
    if let Some(var_708) = &input.job_name {
        object.key("JobName").string(var_708);
    }
    if let Some(var_709) = &input.job_update {
        let mut object_710 = object.key("JobUpdate").start_object();
        crate::json_ser::serialize_structure_job_update(&mut object_710, var_709);
        object_710.finish();
    }
}

pub fn serialize_structure_update_ml_transform_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMlTransformInput,
) {
    if let Some(var_711) = &input.transform_id {
        object.key("TransformId").string(var_711);
    }
    if let Some(var_712) = &input.name {
        object.key("Name").string(var_712);
    }
    if let Some(var_713) = &input.description {
        object.key("Description").string(var_713);
    }
    if let Some(var_714) = &input.parameters {
        let mut object_715 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_transform_parameters(&mut object_715, var_714);
        object_715.finish();
    }
    if let Some(var_716) = &input.role {
        object.key("Role").string(var_716);
    }
    if let Some(var_717) = &input.glue_version {
        object.key("GlueVersion").string(var_717);
    }
    if let Some(var_718) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_718).into()),
        );
    }
    if let Some(var_719) = &input.worker_type {
        object.key("WorkerType").string(var_719.as_str());
    }
    if let Some(var_720) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_720).into()),
        );
    }
    if let Some(var_721) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_721).into()),
        );
    }
    if let Some(var_722) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_722).into()),
        );
    }
}

pub fn serialize_structure_update_partition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePartitionInput,
) {
    if let Some(var_723) = &input.catalog_id {
        object.key("CatalogId").string(var_723);
    }
    if let Some(var_724) = &input.database_name {
        object.key("DatabaseName").string(var_724);
    }
    if let Some(var_725) = &input.table_name {
        object.key("TableName").string(var_725);
    }
    if let Some(var_726) = &input.partition_value_list {
        let mut array_727 = object.key("PartitionValueList").start_array();
        for item_728 in var_726 {
            {
                array_727.value().string(item_728);
            }
        }
        array_727.finish();
    }
    if let Some(var_729) = &input.partition_input {
        let mut object_730 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_partition_input(&mut object_730, var_729);
        object_730.finish();
    }
}

pub fn serialize_structure_update_registry_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegistryInput,
) {
    if let Some(var_731) = &input.registry_id {
        let mut object_732 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_registry_id(&mut object_732, var_731);
        object_732.finish();
    }
    if let Some(var_733) = &input.description {
        object.key("Description").string(var_733);
    }
}

pub fn serialize_structure_update_schema_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSchemaInput,
) {
    if let Some(var_734) = &input.schema_id {
        let mut object_735 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_735, var_734);
        object_735.finish();
    }
    if let Some(var_736) = &input.schema_version_number {
        let mut object_737 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_schema_version_number(&mut object_737, var_736);
        object_737.finish();
    }
    if let Some(var_738) = &input.compatibility {
        object.key("Compatibility").string(var_738.as_str());
    }
    if let Some(var_739) = &input.description {
        object.key("Description").string(var_739);
    }
}

pub fn serialize_structure_update_table_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTableInput,
) {
    if let Some(var_740) = &input.catalog_id {
        object.key("CatalogId").string(var_740);
    }
    if let Some(var_741) = &input.database_name {
        object.key("DatabaseName").string(var_741);
    }
    if let Some(var_742) = &input.table_input {
        let mut object_743 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_table_input(&mut object_743, var_742);
        object_743.finish();
    }
    if let Some(var_744) = &input.skip_archive {
        object.key("SkipArchive").boolean(*var_744);
    }
}

pub fn serialize_structure_update_trigger_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTriggerInput,
) {
    if let Some(var_745) = &input.name {
        object.key("Name").string(var_745);
    }
    if let Some(var_746) = &input.trigger_update {
        let mut object_747 = object.key("TriggerUpdate").start_object();
        crate::json_ser::serialize_structure_trigger_update(&mut object_747, var_746);
        object_747.finish();
    }
}

pub fn serialize_structure_update_user_defined_function_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserDefinedFunctionInput,
) {
    if let Some(var_748) = &input.catalog_id {
        object.key("CatalogId").string(var_748);
    }
    if let Some(var_749) = &input.database_name {
        object.key("DatabaseName").string(var_749);
    }
    if let Some(var_750) = &input.function_name {
        object.key("FunctionName").string(var_750);
    }
    if let Some(var_751) = &input.function_input {
        let mut object_752 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_user_defined_function_input(&mut object_752, var_751);
        object_752.finish();
    }
}

pub fn serialize_structure_update_workflow_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkflowInput,
) {
    if let Some(var_753) = &input.name {
        object.key("Name").string(var_753);
    }
    if let Some(var_754) = &input.description {
        object.key("Description").string(var_754);
    }
    if let Some(var_755) = &input.default_run_properties {
        let mut object_756 = object.key("DefaultRunProperties").start_object();
        for (key_757, value_758) in var_755 {
            {
                object_756.key(key_757).string(value_758);
            }
        }
        object_756.finish();
    }
    if let Some(var_759) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_759).into()),
        );
    }
}

pub fn serialize_structure_partition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionInput,
) {
    if let Some(var_760) = &input.values {
        let mut array_761 = object.key("Values").start_array();
        for item_762 in var_760 {
            {
                array_761.value().string(item_762);
            }
        }
        array_761.finish();
    }
    if let Some(var_763) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .instant(var_763, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_764) = &input.storage_descriptor {
        let mut object_765 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_storage_descriptor(&mut object_765, var_764);
        object_765.finish();
    }
    if let Some(var_766) = &input.parameters {
        let mut object_767 = object.key("Parameters").start_object();
        for (key_768, value_769) in var_766 {
            {
                object_767.key(key_768).string(value_769);
            }
        }
        object_767.finish();
    }
    if let Some(var_770) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .instant(var_770, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_partition_value_list(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionValueList,
) {
    if let Some(var_771) = &input.values {
        let mut array_772 = object.key("Values").start_array();
        for item_773 in var_771 {
            {
                array_772.value().string(item_773);
            }
        }
        array_772.finish();
    }
}

pub fn serialize_structure_batch_update_partition_request_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchUpdatePartitionRequestEntry,
) {
    if let Some(var_774) = &input.partition_value_list {
        let mut array_775 = object.key("PartitionValueList").start_array();
        for item_776 in var_774 {
            {
                array_775.value().string(item_776);
            }
        }
        array_775.finish();
    }
    if let Some(var_777) = &input.partition_input {
        let mut object_778 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_partition_input(&mut object_778, var_777);
        object_778.finish();
    }
}

pub fn serialize_structure_create_grok_classifier_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateGrokClassifierRequest,
) {
    if let Some(var_779) = &input.classification {
        object.key("Classification").string(var_779);
    }
    if let Some(var_780) = &input.name {
        object.key("Name").string(var_780);
    }
    if let Some(var_781) = &input.grok_pattern {
        object.key("GrokPattern").string(var_781);
    }
    if let Some(var_782) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_782);
    }
}

pub fn serialize_structure_create_xml_classifier_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateXmlClassifierRequest,
) {
    if let Some(var_783) = &input.classification {
        object.key("Classification").string(var_783);
    }
    if let Some(var_784) = &input.name {
        object.key("Name").string(var_784);
    }
    if let Some(var_785) = &input.row_tag {
        object.key("RowTag").string(var_785);
    }
}

pub fn serialize_structure_create_json_classifier_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateJsonClassifierRequest,
) {
    if let Some(var_786) = &input.name {
        object.key("Name").string(var_786);
    }
    if let Some(var_787) = &input.json_path {
        object.key("JsonPath").string(var_787);
    }
}

pub fn serialize_structure_create_csv_classifier_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateCsvClassifierRequest,
) {
    if let Some(var_788) = &input.name {
        object.key("Name").string(var_788);
    }
    if let Some(var_789) = &input.delimiter {
        object.key("Delimiter").string(var_789);
    }
    if let Some(var_790) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_790);
    }
    if let Some(var_791) = &input.contains_header {
        object.key("ContainsHeader").string(var_791.as_str());
    }
    if let Some(var_792) = &input.header {
        let mut array_793 = object.key("Header").start_array();
        for item_794 in var_792 {
            {
                array_793.value().string(item_794);
            }
        }
        array_793.finish();
    }
    if let Some(var_795) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_795);
    }
    if let Some(var_796) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_796);
    }
}

pub fn serialize_structure_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionInput,
) {
    if let Some(var_797) = &input.name {
        object.key("Name").string(var_797);
    }
    if let Some(var_798) = &input.description {
        object.key("Description").string(var_798);
    }
    if let Some(var_799) = &input.connection_type {
        object.key("ConnectionType").string(var_799.as_str());
    }
    if let Some(var_800) = &input.match_criteria {
        let mut array_801 = object.key("MatchCriteria").start_array();
        for item_802 in var_800 {
            {
                array_801.value().string(item_802);
            }
        }
        array_801.finish();
    }
    if let Some(var_803) = &input.connection_properties {
        let mut object_804 = object.key("ConnectionProperties").start_object();
        for (key_805, value_806) in var_803 {
            {
                object_804.key(key_805.as_str()).string(value_806);
            }
        }
        object_804.finish();
    }
    if let Some(var_807) = &input.physical_connection_requirements {
        let mut object_808 = object.key("PhysicalConnectionRequirements").start_object();
        crate::json_ser::serialize_structure_physical_connection_requirements(
            &mut object_808,
            var_807,
        );
        object_808.finish();
    }
}

pub fn serialize_structure_crawler_targets(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CrawlerTargets,
) {
    if let Some(var_809) = &input.s3_targets {
        let mut array_810 = object.key("S3Targets").start_array();
        for item_811 in var_809 {
            {
                let mut object_812 = array_810.value().start_object();
                crate::json_ser::serialize_structure_s3_target(&mut object_812, item_811);
                object_812.finish();
            }
        }
        array_810.finish();
    }
    if let Some(var_813) = &input.jdbc_targets {
        let mut array_814 = object.key("JdbcTargets").start_array();
        for item_815 in var_813 {
            {
                let mut object_816 = array_814.value().start_object();
                crate::json_ser::serialize_structure_jdbc_target(&mut object_816, item_815);
                object_816.finish();
            }
        }
        array_814.finish();
    }
    if let Some(var_817) = &input.mongo_db_targets {
        let mut array_818 = object.key("MongoDBTargets").start_array();
        for item_819 in var_817 {
            {
                let mut object_820 = array_818.value().start_object();
                crate::json_ser::serialize_structure_mongo_db_target(&mut object_820, item_819);
                object_820.finish();
            }
        }
        array_818.finish();
    }
    if let Some(var_821) = &input.dynamo_db_targets {
        let mut array_822 = object.key("DynamoDBTargets").start_array();
        for item_823 in var_821 {
            {
                let mut object_824 = array_822.value().start_object();
                crate::json_ser::serialize_structure_dynamo_db_target(&mut object_824, item_823);
                object_824.finish();
            }
        }
        array_822.finish();
    }
    if let Some(var_825) = &input.catalog_targets {
        let mut array_826 = object.key("CatalogTargets").start_array();
        for item_827 in var_825 {
            {
                let mut object_828 = array_826.value().start_object();
                crate::json_ser::serialize_structure_catalog_target(&mut object_828, item_827);
                object_828.finish();
            }
        }
        array_826.finish();
    }
}

pub fn serialize_structure_schema_change_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaChangePolicy,
) {
    if let Some(var_829) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_829.as_str());
    }
    if let Some(var_830) = &input.delete_behavior {
        object.key("DeleteBehavior").string(var_830.as_str());
    }
}

pub fn serialize_structure_recrawl_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecrawlPolicy,
) {
    if let Some(var_831) = &input.recrawl_behavior {
        object.key("RecrawlBehavior").string(var_831.as_str());
    }
}

pub fn serialize_structure_lineage_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LineageConfiguration,
) {
    if let Some(var_832) = &input.crawler_lineage_settings {
        object
            .key("CrawlerLineageSettings")
            .string(var_832.as_str());
    }
}

pub fn serialize_structure_database_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseInput,
) {
    if let Some(var_833) = &input.name {
        object.key("Name").string(var_833);
    }
    if let Some(var_834) = &input.description {
        object.key("Description").string(var_834);
    }
    if let Some(var_835) = &input.location_uri {
        object.key("LocationUri").string(var_835);
    }
    if let Some(var_836) = &input.parameters {
        let mut object_837 = object.key("Parameters").start_object();
        for (key_838, value_839) in var_836 {
            {
                object_837.key(key_838).string(value_839);
            }
        }
        object_837.finish();
    }
    if let Some(var_840) = &input.create_table_default_permissions {
        let mut array_841 = object.key("CreateTableDefaultPermissions").start_array();
        for item_842 in var_840 {
            {
                let mut object_843 = array_841.value().start_object();
                crate::json_ser::serialize_structure_principal_permissions(
                    &mut object_843,
                    item_842,
                );
                object_843.finish();
            }
        }
        array_841.finish();
    }
    if let Some(var_844) = &input.target_database {
        let mut object_845 = object.key("TargetDatabase").start_object();
        crate::json_ser::serialize_structure_database_identifier(&mut object_845, var_844);
        object_845.finish();
    }
}

pub fn serialize_structure_execution_property(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionProperty,
) {
    if input.max_concurrent_runs != 0 {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_concurrent_runs).into()),
        );
    }
}

pub fn serialize_structure_job_command(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobCommand,
) {
    if let Some(var_846) = &input.name {
        object.key("Name").string(var_846);
    }
    if let Some(var_847) = &input.script_location {
        object.key("ScriptLocation").string(var_847);
    }
    if let Some(var_848) = &input.python_version {
        object.key("PythonVersion").string(var_848);
    }
}

pub fn serialize_structure_connections_list(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionsList,
) {
    if let Some(var_849) = &input.connections {
        let mut array_850 = object.key("Connections").start_array();
        for item_851 in var_849 {
            {
                array_850.value().string(item_851);
            }
        }
        array_850.finish();
    }
}

pub fn serialize_structure_notification_property(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationProperty,
) {
    if let Some(var_852) = &input.notify_delay_after {
        object.key("NotifyDelayAfter").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_852).into()),
        );
    }
}

pub fn serialize_structure_glue_table(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueTable,
) {
    if let Some(var_853) = &input.database_name {
        object.key("DatabaseName").string(var_853);
    }
    if let Some(var_854) = &input.table_name {
        object.key("TableName").string(var_854);
    }
    if let Some(var_855) = &input.catalog_id {
        object.key("CatalogId").string(var_855);
    }
    if let Some(var_856) = &input.connection_name {
        object.key("ConnectionName").string(var_856);
    }
}

pub fn serialize_structure_transform_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformParameters,
) {
    if let Some(var_857) = &input.transform_type {
        object.key("TransformType").string(var_857.as_str());
    }
    if let Some(var_858) = &input.find_matches_parameters {
        let mut object_859 = object.key("FindMatchesParameters").start_object();
        crate::json_ser::serialize_structure_find_matches_parameters(&mut object_859, var_858);
        object_859.finish();
    }
}

pub fn serialize_structure_transform_encryption(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformEncryption,
) {
    if let Some(var_860) = &input.ml_user_data_encryption {
        let mut object_861 = object.key("MlUserDataEncryption").start_object();
        crate::json_ser::serialize_structure_ml_user_data_encryption(&mut object_861, var_860);
        object_861.finish();
    }
    if let Some(var_862) = &input.task_run_security_configuration_name {
        object
            .key("TaskRunSecurityConfigurationName")
            .string(var_862);
    }
}

pub fn serialize_structure_partition_index(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionIndex,
) {
    if let Some(var_863) = &input.keys {
        let mut array_864 = object.key("Keys").start_array();
        for item_865 in var_863 {
            {
                array_864.value().string(item_865);
            }
        }
        array_864.finish();
    }
    if let Some(var_866) = &input.index_name {
        object.key("IndexName").string(var_866);
    }
}

pub fn serialize_structure_registry_id(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistryId,
) {
    if let Some(var_867) = &input.registry_name {
        object.key("RegistryName").string(var_867);
    }
    if let Some(var_868) = &input.registry_arn {
        object.key("RegistryArn").string(var_868);
    }
}

pub fn serialize_structure_code_gen_node(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNode,
) {
    if let Some(var_869) = &input.id {
        object.key("Id").string(var_869);
    }
    if let Some(var_870) = &input.node_type {
        object.key("NodeType").string(var_870);
    }
    if let Some(var_871) = &input.args {
        let mut array_872 = object.key("Args").start_array();
        for item_873 in var_871 {
            {
                let mut object_874 = array_872.value().start_object();
                crate::json_ser::serialize_structure_code_gen_node_arg(&mut object_874, item_873);
                object_874.finish();
            }
        }
        array_872.finish();
    }
    if input.line_number != 0 {
        object.key("LineNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.line_number).into()),
        );
    }
}

pub fn serialize_structure_code_gen_edge(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenEdge,
) {
    if let Some(var_875) = &input.source {
        object.key("Source").string(var_875);
    }
    if let Some(var_876) = &input.target {
        object.key("Target").string(var_876);
    }
    if let Some(var_877) = &input.target_parameter {
        object.key("TargetParameter").string(var_877);
    }
}

pub fn serialize_structure_encryption_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfiguration,
) {
    if let Some(var_878) = &input.s3_encryption {
        let mut array_879 = object.key("S3Encryption").start_array();
        for item_880 in var_878 {
            {
                let mut object_881 = array_879.value().start_object();
                crate::json_ser::serialize_structure_s3_encryption(&mut object_881, item_880);
                object_881.finish();
            }
        }
        array_879.finish();
    }
    if let Some(var_882) = &input.cloud_watch_encryption {
        let mut object_883 = object.key("CloudWatchEncryption").start_object();
        crate::json_ser::serialize_structure_cloud_watch_encryption(&mut object_883, var_882);
        object_883.finish();
    }
    if let Some(var_884) = &input.job_bookmarks_encryption {
        let mut object_885 = object.key("JobBookmarksEncryption").start_object();
        crate::json_ser::serialize_structure_job_bookmarks_encryption(&mut object_885, var_884);
        object_885.finish();
    }
}

pub fn serialize_structure_table_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableInput,
) {
    if let Some(var_886) = &input.name {
        object.key("Name").string(var_886);
    }
    if let Some(var_887) = &input.description {
        object.key("Description").string(var_887);
    }
    if let Some(var_888) = &input.owner {
        object.key("Owner").string(var_888);
    }
    if let Some(var_889) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .instant(var_889, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_890) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .instant(var_890, smithy_types::instant::Format::EpochSeconds);
    }
    if input.retention != 0 {
        object.key("Retention").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.retention).into()),
        );
    }
    if let Some(var_891) = &input.storage_descriptor {
        let mut object_892 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_storage_descriptor(&mut object_892, var_891);
        object_892.finish();
    }
    if let Some(var_893) = &input.partition_keys {
        let mut array_894 = object.key("PartitionKeys").start_array();
        for item_895 in var_893 {
            {
                let mut object_896 = array_894.value().start_object();
                crate::json_ser::serialize_structure_column(&mut object_896, item_895);
                object_896.finish();
            }
        }
        array_894.finish();
    }
    if let Some(var_897) = &input.view_original_text {
        object.key("ViewOriginalText").string(var_897);
    }
    if let Some(var_898) = &input.view_expanded_text {
        object.key("ViewExpandedText").string(var_898);
    }
    if let Some(var_899) = &input.table_type {
        object.key("TableType").string(var_899);
    }
    if let Some(var_900) = &input.parameters {
        let mut object_901 = object.key("Parameters").start_object();
        for (key_902, value_903) in var_900 {
            {
                object_901.key(key_902).string(value_903);
            }
        }
        object_901.finish();
    }
    if let Some(var_904) = &input.target_table {
        let mut object_905 = object.key("TargetTable").start_object();
        crate::json_ser::serialize_structure_table_identifier(&mut object_905, var_904);
        object_905.finish();
    }
}

pub fn serialize_structure_predicate(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Predicate,
) {
    if let Some(var_906) = &input.logical {
        object.key("Logical").string(var_906.as_str());
    }
    if let Some(var_907) = &input.conditions {
        let mut array_908 = object.key("Conditions").start_array();
        for item_909 in var_907 {
            {
                let mut object_910 = array_908.value().start_object();
                crate::json_ser::serialize_structure_condition(&mut object_910, item_909);
                object_910.finish();
            }
        }
        array_908.finish();
    }
}

pub fn serialize_structure_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) {
    if let Some(var_911) = &input.job_name {
        object.key("JobName").string(var_911);
    }
    if let Some(var_912) = &input.arguments {
        let mut object_913 = object.key("Arguments").start_object();
        for (key_914, value_915) in var_912 {
            {
                object_913.key(key_914).string(value_915);
            }
        }
        object_913.finish();
    }
    if let Some(var_916) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_916).into()),
        );
    }
    if let Some(var_917) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_917);
    }
    if let Some(var_918) = &input.notification_property {
        let mut object_919 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_notification_property(&mut object_919, var_918);
        object_919.finish();
    }
    if let Some(var_920) = &input.crawler_name {
        object.key("CrawlerName").string(var_920);
    }
}

pub fn serialize_structure_user_defined_function_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserDefinedFunctionInput,
) {
    if let Some(var_921) = &input.function_name {
        object.key("FunctionName").string(var_921);
    }
    if let Some(var_922) = &input.class_name {
        object.key("ClassName").string(var_922);
    }
    if let Some(var_923) = &input.owner_name {
        object.key("OwnerName").string(var_923);
    }
    if let Some(var_924) = &input.owner_type {
        object.key("OwnerType").string(var_924.as_str());
    }
    if let Some(var_925) = &input.resource_uris {
        let mut array_926 = object.key("ResourceUris").start_array();
        for item_927 in var_925 {
            {
                let mut object_928 = array_926.value().start_object();
                crate::json_ser::serialize_structure_resource_uri(&mut object_928, item_927);
                object_928.finish();
            }
        }
        array_926.finish();
    }
}

pub fn serialize_structure_schema_id(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaId,
) {
    if let Some(var_929) = &input.schema_arn {
        object.key("SchemaArn").string(var_929);
    }
    if let Some(var_930) = &input.schema_name {
        object.key("SchemaName").string(var_930);
    }
    if let Some(var_931) = &input.registry_name {
        object.key("RegistryName").string(var_931);
    }
}

pub fn serialize_structure_get_connections_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GetConnectionsFilter,
) {
    if let Some(var_932) = &input.match_criteria {
        let mut array_933 = object.key("MatchCriteria").start_array();
        for item_934 in var_932 {
            {
                array_933.value().string(item_934);
            }
        }
        array_933.finish();
    }
    if let Some(var_935) = &input.connection_type {
        object.key("ConnectionType").string(var_935.as_str());
    }
}

pub fn serialize_structure_catalog_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogEntry,
) {
    if let Some(var_936) = &input.database_name {
        object.key("DatabaseName").string(var_936);
    }
    if let Some(var_937) = &input.table_name {
        object.key("TableName").string(var_937);
    }
}

pub fn serialize_structure_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Location,
) {
    if let Some(var_938) = &input.jdbc {
        let mut array_939 = object.key("Jdbc").start_array();
        for item_940 in var_938 {
            {
                let mut object_941 = array_939.value().start_object();
                crate::json_ser::serialize_structure_code_gen_node_arg(&mut object_941, item_940);
                object_941.finish();
            }
        }
        array_939.finish();
    }
    if let Some(var_942) = &input.s3 {
        let mut array_943 = object.key("S3").start_array();
        for item_944 in var_942 {
            {
                let mut object_945 = array_943.value().start_object();
                crate::json_ser::serialize_structure_code_gen_node_arg(&mut object_945, item_944);
                object_945.finish();
            }
        }
        array_943.finish();
    }
    if let Some(var_946) = &input.dynamo_db {
        let mut array_947 = object.key("DynamoDB").start_array();
        for item_948 in var_946 {
            {
                let mut object_949 = array_947.value().start_object();
                crate::json_ser::serialize_structure_code_gen_node_arg(&mut object_949, item_948);
                object_949.finish();
            }
        }
        array_947.finish();
    }
}

pub fn serialize_structure_task_run_filter_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunFilterCriteria,
) {
    if let Some(var_950) = &input.task_run_type {
        object.key("TaskRunType").string(var_950.as_str());
    }
    if let Some(var_951) = &input.status {
        object.key("Status").string(var_951.as_str());
    }
    if let Some(var_952) = &input.started_before {
        object
            .key("StartedBefore")
            .instant(var_952, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_953) = &input.started_after {
        object
            .key("StartedAfter")
            .instant(var_953, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_task_run_sort_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunSortCriteria,
) {
    if let Some(var_954) = &input.column {
        object.key("Column").string(var_954.as_str());
    }
    if let Some(var_955) = &input.sort_direction {
        object.key("SortDirection").string(var_955.as_str());
    }
}

pub fn serialize_structure_transform_filter_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformFilterCriteria,
) {
    if let Some(var_956) = &input.name {
        object.key("Name").string(var_956);
    }
    if let Some(var_957) = &input.transform_type {
        object.key("TransformType").string(var_957.as_str());
    }
    if let Some(var_958) = &input.status {
        object.key("Status").string(var_958.as_str());
    }
    if let Some(var_959) = &input.glue_version {
        object.key("GlueVersion").string(var_959);
    }
    if let Some(var_960) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_960, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_961) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_961, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_962) = &input.last_modified_before {
        object
            .key("LastModifiedBefore")
            .instant(var_962, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_963) = &input.last_modified_after {
        object
            .key("LastModifiedAfter")
            .instant(var_963, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_964) = &input.schema {
        let mut array_965 = object.key("Schema").start_array();
        for item_966 in var_964 {
            {
                let mut object_967 = array_965.value().start_object();
                crate::json_ser::serialize_structure_schema_column(&mut object_967, item_966);
                object_967.finish();
            }
        }
        array_965.finish();
    }
}

pub fn serialize_structure_transform_sort_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformSortCriteria,
) {
    if let Some(var_968) = &input.column {
        object.key("Column").string(var_968.as_str());
    }
    if let Some(var_969) = &input.sort_direction {
        object.key("SortDirection").string(var_969.as_str());
    }
}

pub fn serialize_structure_segment(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Segment,
) {
    {
        object.key("SegmentNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.segment_number).into()),
        );
    }
    {
        object.key("TotalSegments").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.total_segments).into()),
        );
    }
}

pub fn serialize_structure_mapping_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MappingEntry,
) {
    if let Some(var_970) = &input.source_table {
        object.key("SourceTable").string(var_970);
    }
    if let Some(var_971) = &input.source_path {
        object.key("SourcePath").string(var_971);
    }
    if let Some(var_972) = &input.source_type {
        object.key("SourceType").string(var_972);
    }
    if let Some(var_973) = &input.target_table {
        object.key("TargetTable").string(var_973);
    }
    if let Some(var_974) = &input.target_path {
        object.key("TargetPath").string(var_974);
    }
    if let Some(var_975) = &input.target_type {
        object.key("TargetType").string(var_975);
    }
}

pub fn serialize_structure_schema_version_number(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaVersionNumber,
) {
    if input.latest_version {
        object.key("LatestVersion").boolean(input.latest_version);
    }
    if input.version_number != 0 {
        object.key("VersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.version_number).into()),
        );
    }
}

pub fn serialize_structure_data_catalog_encryption_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogEncryptionSettings,
) {
    if let Some(var_976) = &input.encryption_at_rest {
        let mut object_977 = object.key("EncryptionAtRest").start_object();
        crate::json_ser::serialize_structure_encryption_at_rest(&mut object_977, var_976);
        object_977.finish();
    }
    if let Some(var_978) = &input.connection_password_encryption {
        let mut object_979 = object.key("ConnectionPasswordEncryption").start_object();
        crate::json_ser::serialize_structure_connection_password_encryption(
            &mut object_979,
            var_978,
        );
        object_979.finish();
    }
}

pub fn serialize_structure_metadata_key_value_pair(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataKeyValuePair,
) {
    if let Some(var_980) = &input.metadata_key {
        object.key("MetadataKey").string(var_980);
    }
    if let Some(var_981) = &input.metadata_value {
        object.key("MetadataValue").string(var_981);
    }
}

pub fn serialize_structure_property_predicate(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyPredicate,
) {
    if let Some(var_982) = &input.key {
        object.key("Key").string(var_982);
    }
    if let Some(var_983) = &input.value {
        object.key("Value").string(var_983);
    }
    if let Some(var_984) = &input.comparator {
        object.key("Comparator").string(var_984.as_str());
    }
}

pub fn serialize_structure_sort_criterion(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) {
    if let Some(var_985) = &input.field_name {
        object.key("FieldName").string(var_985);
    }
    if let Some(var_986) = &input.sort {
        object.key("Sort").string(var_986.as_str());
    }
}

pub fn serialize_structure_update_grok_classifier_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateGrokClassifierRequest,
) {
    if let Some(var_987) = &input.name {
        object.key("Name").string(var_987);
    }
    if let Some(var_988) = &input.classification {
        object.key("Classification").string(var_988);
    }
    if let Some(var_989) = &input.grok_pattern {
        object.key("GrokPattern").string(var_989);
    }
    if let Some(var_990) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_990);
    }
}

pub fn serialize_structure_update_xml_classifier_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateXmlClassifierRequest,
) {
    if let Some(var_991) = &input.name {
        object.key("Name").string(var_991);
    }
    if let Some(var_992) = &input.classification {
        object.key("Classification").string(var_992);
    }
    if let Some(var_993) = &input.row_tag {
        object.key("RowTag").string(var_993);
    }
}

pub fn serialize_structure_update_json_classifier_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateJsonClassifierRequest,
) {
    if let Some(var_994) = &input.name {
        object.key("Name").string(var_994);
    }
    if let Some(var_995) = &input.json_path {
        object.key("JsonPath").string(var_995);
    }
}

pub fn serialize_structure_update_csv_classifier_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCsvClassifierRequest,
) {
    if let Some(var_996) = &input.name {
        object.key("Name").string(var_996);
    }
    if let Some(var_997) = &input.delimiter {
        object.key("Delimiter").string(var_997);
    }
    if let Some(var_998) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_998);
    }
    if let Some(var_999) = &input.contains_header {
        object.key("ContainsHeader").string(var_999.as_str());
    }
    if let Some(var_1000) = &input.header {
        let mut array_1001 = object.key("Header").start_array();
        for item_1002 in var_1000 {
            {
                array_1001.value().string(item_1002);
            }
        }
        array_1001.finish();
    }
    if let Some(var_1003) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_1003);
    }
    if let Some(var_1004) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_1004);
    }
}

pub fn serialize_structure_column_statistics(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatistics,
) {
    if let Some(var_1005) = &input.column_name {
        object.key("ColumnName").string(var_1005);
    }
    if let Some(var_1006) = &input.column_type {
        object.key("ColumnType").string(var_1006);
    }
    if let Some(var_1007) = &input.analyzed_time {
        object
            .key("AnalyzedTime")
            .instant(var_1007, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1008) = &input.statistics_data {
        let mut object_1009 = object.key("StatisticsData").start_object();
        crate::json_ser::serialize_structure_column_statistics_data(&mut object_1009, var_1008);
        object_1009.finish();
    }
}

pub fn serialize_structure_dev_endpoint_custom_libraries(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DevEndpointCustomLibraries,
) {
    if let Some(var_1010) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_1010);
    }
    if let Some(var_1011) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_1011);
    }
}

pub fn serialize_structure_job_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobUpdate,
) {
    if let Some(var_1012) = &input.description {
        object.key("Description").string(var_1012);
    }
    if let Some(var_1013) = &input.log_uri {
        object.key("LogUri").string(var_1013);
    }
    if let Some(var_1014) = &input.role {
        object.key("Role").string(var_1014);
    }
    if let Some(var_1015) = &input.execution_property {
        let mut object_1016 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_execution_property(&mut object_1016, var_1015);
        object_1016.finish();
    }
    if let Some(var_1017) = &input.command {
        let mut object_1018 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_job_command(&mut object_1018, var_1017);
        object_1018.finish();
    }
    if let Some(var_1019) = &input.default_arguments {
        let mut object_1020 = object.key("DefaultArguments").start_object();
        for (key_1021, value_1022) in var_1019 {
            {
                object_1020.key(key_1021).string(value_1022);
            }
        }
        object_1020.finish();
    }
    if let Some(var_1023) = &input.non_overridable_arguments {
        let mut object_1024 = object.key("NonOverridableArguments").start_object();
        for (key_1025, value_1026) in var_1023 {
            {
                object_1024.key(key_1025).string(value_1026);
            }
        }
        object_1024.finish();
    }
    if let Some(var_1027) = &input.connections {
        let mut object_1028 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_connections_list(&mut object_1028, var_1027);
        object_1028.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_1029) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1029).into()),
        );
    }
    if let Some(var_1030) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1030).into()),
        );
    }
    if let Some(var_1031) = &input.worker_type {
        object.key("WorkerType").string(var_1031.as_str());
    }
    if let Some(var_1032) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1032).into()),
        );
    }
    if let Some(var_1033) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_1033);
    }
    if let Some(var_1034) = &input.notification_property {
        let mut object_1035 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_notification_property(&mut object_1035, var_1034);
        object_1035.finish();
    }
    if let Some(var_1036) = &input.glue_version {
        object.key("GlueVersion").string(var_1036);
    }
}

pub fn serialize_structure_trigger_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerUpdate,
) {
    if let Some(var_1037) = &input.name {
        object.key("Name").string(var_1037);
    }
    if let Some(var_1038) = &input.description {
        object.key("Description").string(var_1038);
    }
    if let Some(var_1039) = &input.schedule {
        object.key("Schedule").string(var_1039);
    }
    if let Some(var_1040) = &input.actions {
        let mut array_1041 = object.key("Actions").start_array();
        for item_1042 in var_1040 {
            {
                let mut object_1043 = array_1041.value().start_object();
                crate::json_ser::serialize_structure_action(&mut object_1043, item_1042);
                object_1043.finish();
            }
        }
        array_1041.finish();
    }
    if let Some(var_1044) = &input.predicate {
        let mut object_1045 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_predicate(&mut object_1045, var_1044);
        object_1045.finish();
    }
}

pub fn serialize_structure_storage_descriptor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageDescriptor,
) {
    if let Some(var_1046) = &input.columns {
        let mut array_1047 = object.key("Columns").start_array();
        for item_1048 in var_1046 {
            {
                let mut object_1049 = array_1047.value().start_object();
                crate::json_ser::serialize_structure_column(&mut object_1049, item_1048);
                object_1049.finish();
            }
        }
        array_1047.finish();
    }
    if let Some(var_1050) = &input.location {
        object.key("Location").string(var_1050);
    }
    if let Some(var_1051) = &input.input_format {
        object.key("InputFormat").string(var_1051);
    }
    if let Some(var_1052) = &input.output_format {
        object.key("OutputFormat").string(var_1052);
    }
    if input.compressed {
        object.key("Compressed").boolean(input.compressed);
    }
    if input.number_of_buckets != 0 {
        object.key("NumberOfBuckets").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_buckets).into()),
        );
    }
    if let Some(var_1053) = &input.serde_info {
        let mut object_1054 = object.key("SerdeInfo").start_object();
        crate::json_ser::serialize_structure_ser_de_info(&mut object_1054, var_1053);
        object_1054.finish();
    }
    if let Some(var_1055) = &input.bucket_columns {
        let mut array_1056 = object.key("BucketColumns").start_array();
        for item_1057 in var_1055 {
            {
                array_1056.value().string(item_1057);
            }
        }
        array_1056.finish();
    }
    if let Some(var_1058) = &input.sort_columns {
        let mut array_1059 = object.key("SortColumns").start_array();
        for item_1060 in var_1058 {
            {
                let mut object_1061 = array_1059.value().start_object();
                crate::json_ser::serialize_structure_order(&mut object_1061, item_1060);
                object_1061.finish();
            }
        }
        array_1059.finish();
    }
    if let Some(var_1062) = &input.parameters {
        let mut object_1063 = object.key("Parameters").start_object();
        for (key_1064, value_1065) in var_1062 {
            {
                object_1063.key(key_1064).string(value_1065);
            }
        }
        object_1063.finish();
    }
    if let Some(var_1066) = &input.skewed_info {
        let mut object_1067 = object.key("SkewedInfo").start_object();
        crate::json_ser::serialize_structure_skewed_info(&mut object_1067, var_1066);
        object_1067.finish();
    }
    if input.stored_as_sub_directories {
        object
            .key("StoredAsSubDirectories")
            .boolean(input.stored_as_sub_directories);
    }
    if let Some(var_1068) = &input.schema_reference {
        let mut object_1069 = object.key("SchemaReference").start_object();
        crate::json_ser::serialize_structure_schema_reference(&mut object_1069, var_1068);
        object_1069.finish();
    }
}

pub fn serialize_structure_physical_connection_requirements(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalConnectionRequirements,
) {
    if let Some(var_1070) = &input.subnet_id {
        object.key("SubnetId").string(var_1070);
    }
    if let Some(var_1071) = &input.security_group_id_list {
        let mut array_1072 = object.key("SecurityGroupIdList").start_array();
        for item_1073 in var_1071 {
            {
                array_1072.value().string(item_1073);
            }
        }
        array_1072.finish();
    }
    if let Some(var_1074) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1074);
    }
}

pub fn serialize_structure_s3_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Target,
) {
    if let Some(var_1075) = &input.path {
        object.key("Path").string(var_1075);
    }
    if let Some(var_1076) = &input.exclusions {
        let mut array_1077 = object.key("Exclusions").start_array();
        for item_1078 in var_1076 {
            {
                array_1077.value().string(item_1078);
            }
        }
        array_1077.finish();
    }
    if let Some(var_1079) = &input.connection_name {
        object.key("ConnectionName").string(var_1079);
    }
    if let Some(var_1080) = &input.sample_size {
        object.key("SampleSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1080).into()),
        );
    }
}

pub fn serialize_structure_jdbc_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcTarget,
) {
    if let Some(var_1081) = &input.connection_name {
        object.key("ConnectionName").string(var_1081);
    }
    if let Some(var_1082) = &input.path {
        object.key("Path").string(var_1082);
    }
    if let Some(var_1083) = &input.exclusions {
        let mut array_1084 = object.key("Exclusions").start_array();
        for item_1085 in var_1083 {
            {
                array_1084.value().string(item_1085);
            }
        }
        array_1084.finish();
    }
}

pub fn serialize_structure_mongo_db_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MongoDbTarget,
) {
    if let Some(var_1086) = &input.connection_name {
        object.key("ConnectionName").string(var_1086);
    }
    if let Some(var_1087) = &input.path {
        object.key("Path").string(var_1087);
    }
    if let Some(var_1088) = &input.scan_all {
        object.key("ScanAll").boolean(*var_1088);
    }
}

pub fn serialize_structure_dynamo_db_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbTarget,
) {
    if let Some(var_1089) = &input.path {
        object.key("Path").string(var_1089);
    }
    if let Some(var_1090) = &input.scan_all {
        object.key("scanAll").boolean(*var_1090);
    }
    if let Some(var_1091) = &input.scan_rate {
        object.key("scanRate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1091).into()),
        );
    }
}

pub fn serialize_structure_catalog_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogTarget,
) {
    if let Some(var_1092) = &input.database_name {
        object.key("DatabaseName").string(var_1092);
    }
    if let Some(var_1093) = &input.tables {
        let mut array_1094 = object.key("Tables").start_array();
        for item_1095 in var_1093 {
            {
                array_1094.value().string(item_1095);
            }
        }
        array_1094.finish();
    }
}

pub fn serialize_structure_principal_permissions(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrincipalPermissions,
) {
    if let Some(var_1096) = &input.principal {
        let mut object_1097 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_data_lake_principal(&mut object_1097, var_1096);
        object_1097.finish();
    }
    if let Some(var_1098) = &input.permissions {
        let mut array_1099 = object.key("Permissions").start_array();
        for item_1100 in var_1098 {
            {
                array_1099.value().string(item_1100.as_str());
            }
        }
        array_1099.finish();
    }
}

pub fn serialize_structure_database_identifier(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseIdentifier,
) {
    if let Some(var_1101) = &input.catalog_id {
        object.key("CatalogId").string(var_1101);
    }
    if let Some(var_1102) = &input.database_name {
        object.key("DatabaseName").string(var_1102);
    }
}

pub fn serialize_structure_find_matches_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindMatchesParameters,
) {
    if let Some(var_1103) = &input.primary_key_column_name {
        object.key("PrimaryKeyColumnName").string(var_1103);
    }
    if let Some(var_1104) = &input.precision_recall_tradeoff {
        object.key("PrecisionRecallTradeoff").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1104).into()),
        );
    }
    if let Some(var_1105) = &input.accuracy_cost_tradeoff {
        object.key("AccuracyCostTradeoff").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1105).into()),
        );
    }
    if let Some(var_1106) = &input.enforce_provided_labels {
        object.key("EnforceProvidedLabels").boolean(*var_1106);
    }
}

pub fn serialize_structure_ml_user_data_encryption(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MlUserDataEncryption,
) {
    if let Some(var_1107) = &input.ml_user_data_encryption_mode {
        object
            .key("MlUserDataEncryptionMode")
            .string(var_1107.as_str());
    }
    if let Some(var_1108) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1108);
    }
}

pub fn serialize_structure_code_gen_node_arg(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNodeArg,
) {
    if let Some(var_1109) = &input.name {
        object.key("Name").string(var_1109);
    }
    if let Some(var_1110) = &input.value {
        object.key("Value").string(var_1110);
    }
    if input.param {
        object.key("Param").boolean(input.param);
    }
}

pub fn serialize_structure_s3_encryption(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Encryption,
) {
    if let Some(var_1111) = &input.s3_encryption_mode {
        object.key("S3EncryptionMode").string(var_1111.as_str());
    }
    if let Some(var_1112) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1112);
    }
}

pub fn serialize_structure_cloud_watch_encryption(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchEncryption,
) {
    if let Some(var_1113) = &input.cloud_watch_encryption_mode {
        object
            .key("CloudWatchEncryptionMode")
            .string(var_1113.as_str());
    }
    if let Some(var_1114) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1114);
    }
}

pub fn serialize_structure_job_bookmarks_encryption(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobBookmarksEncryption,
) {
    if let Some(var_1115) = &input.job_bookmarks_encryption_mode {
        object
            .key("JobBookmarksEncryptionMode")
            .string(var_1115.as_str());
    }
    if let Some(var_1116) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1116);
    }
}

pub fn serialize_structure_column(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Column,
) {
    if let Some(var_1117) = &input.name {
        object.key("Name").string(var_1117);
    }
    if let Some(var_1118) = &input.r#type {
        object.key("Type").string(var_1118);
    }
    if let Some(var_1119) = &input.comment {
        object.key("Comment").string(var_1119);
    }
    if let Some(var_1120) = &input.parameters {
        let mut object_1121 = object.key("Parameters").start_object();
        for (key_1122, value_1123) in var_1120 {
            {
                object_1121.key(key_1122).string(value_1123);
            }
        }
        object_1121.finish();
    }
}

pub fn serialize_structure_table_identifier(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableIdentifier,
) {
    if let Some(var_1124) = &input.catalog_id {
        object.key("CatalogId").string(var_1124);
    }
    if let Some(var_1125) = &input.database_name {
        object.key("DatabaseName").string(var_1125);
    }
    if let Some(var_1126) = &input.name {
        object.key("Name").string(var_1126);
    }
}

pub fn serialize_structure_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) {
    if let Some(var_1127) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1127.as_str());
    }
    if let Some(var_1128) = &input.job_name {
        object.key("JobName").string(var_1128);
    }
    if let Some(var_1129) = &input.state {
        object.key("State").string(var_1129.as_str());
    }
    if let Some(var_1130) = &input.crawler_name {
        object.key("CrawlerName").string(var_1130);
    }
    if let Some(var_1131) = &input.crawl_state {
        object.key("CrawlState").string(var_1131.as_str());
    }
}

pub fn serialize_structure_resource_uri(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceUri,
) {
    if let Some(var_1132) = &input.resource_type {
        object.key("ResourceType").string(var_1132.as_str());
    }
    if let Some(var_1133) = &input.uri {
        object.key("Uri").string(var_1133);
    }
}

pub fn serialize_structure_schema_column(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaColumn,
) {
    if let Some(var_1134) = &input.name {
        object.key("Name").string(var_1134);
    }
    if let Some(var_1135) = &input.data_type {
        object.key("DataType").string(var_1135);
    }
}

pub fn serialize_structure_encryption_at_rest(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionAtRest,
) {
    if let Some(var_1136) = &input.catalog_encryption_mode {
        object
            .key("CatalogEncryptionMode")
            .string(var_1136.as_str());
    }
    if let Some(var_1137) = &input.sse_aws_kms_key_id {
        object.key("SseAwsKmsKeyId").string(var_1137);
    }
}

pub fn serialize_structure_connection_password_encryption(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionPasswordEncryption,
) {
    {
        object
            .key("ReturnConnectionPasswordEncrypted")
            .boolean(input.return_connection_password_encrypted);
    }
    if let Some(var_1138) = &input.aws_kms_key_id {
        object.key("AwsKmsKeyId").string(var_1138);
    }
}

pub fn serialize_structure_column_statistics_data(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatisticsData,
) {
    if let Some(var_1139) = &input.r#type {
        object.key("Type").string(var_1139.as_str());
    }
    if let Some(var_1140) = &input.boolean_column_statistics_data {
        let mut object_1141 = object.key("BooleanColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_boolean_column_statistics_data(
            &mut object_1141,
            var_1140,
        );
        object_1141.finish();
    }
    if let Some(var_1142) = &input.date_column_statistics_data {
        let mut object_1143 = object.key("DateColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_date_column_statistics_data(
            &mut object_1143,
            var_1142,
        );
        object_1143.finish();
    }
    if let Some(var_1144) = &input.decimal_column_statistics_data {
        let mut object_1145 = object.key("DecimalColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_decimal_column_statistics_data(
            &mut object_1145,
            var_1144,
        );
        object_1145.finish();
    }
    if let Some(var_1146) = &input.double_column_statistics_data {
        let mut object_1147 = object.key("DoubleColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_double_column_statistics_data(
            &mut object_1147,
            var_1146,
        );
        object_1147.finish();
    }
    if let Some(var_1148) = &input.long_column_statistics_data {
        let mut object_1149 = object.key("LongColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_long_column_statistics_data(
            &mut object_1149,
            var_1148,
        );
        object_1149.finish();
    }
    if let Some(var_1150) = &input.string_column_statistics_data {
        let mut object_1151 = object.key("StringColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_string_column_statistics_data(
            &mut object_1151,
            var_1150,
        );
        object_1151.finish();
    }
    if let Some(var_1152) = &input.binary_column_statistics_data {
        let mut object_1153 = object.key("BinaryColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_binary_column_statistics_data(
            &mut object_1153,
            var_1152,
        );
        object_1153.finish();
    }
}

pub fn serialize_structure_ser_de_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SerDeInfo,
) {
    if let Some(var_1154) = &input.name {
        object.key("Name").string(var_1154);
    }
    if let Some(var_1155) = &input.serialization_library {
        object.key("SerializationLibrary").string(var_1155);
    }
    if let Some(var_1156) = &input.parameters {
        let mut object_1157 = object.key("Parameters").start_object();
        for (key_1158, value_1159) in var_1156 {
            {
                object_1157.key(key_1158).string(value_1159);
            }
        }
        object_1157.finish();
    }
}

pub fn serialize_structure_order(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Order,
) {
    if let Some(var_1160) = &input.column {
        object.key("Column").string(var_1160);
    }
    {
        object.key("SortOrder").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.sort_order).into()),
        );
    }
}

pub fn serialize_structure_skewed_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SkewedInfo,
) {
    if let Some(var_1161) = &input.skewed_column_names {
        let mut array_1162 = object.key("SkewedColumnNames").start_array();
        for item_1163 in var_1161 {
            {
                array_1162.value().string(item_1163);
            }
        }
        array_1162.finish();
    }
    if let Some(var_1164) = &input.skewed_column_values {
        let mut array_1165 = object.key("SkewedColumnValues").start_array();
        for item_1166 in var_1164 {
            {
                array_1165.value().string(item_1166);
            }
        }
        array_1165.finish();
    }
    if let Some(var_1167) = &input.skewed_column_value_location_maps {
        let mut object_1168 = object.key("SkewedColumnValueLocationMaps").start_object();
        for (key_1169, value_1170) in var_1167 {
            {
                object_1168.key(key_1169).string(value_1170);
            }
        }
        object_1168.finish();
    }
}

pub fn serialize_structure_schema_reference(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaReference,
) {
    if let Some(var_1171) = &input.schema_id {
        let mut object_1172 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_schema_id(&mut object_1172, var_1171);
        object_1172.finish();
    }
    if let Some(var_1173) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_1173);
    }
    if let Some(var_1174) = &input.schema_version_number {
        object.key("SchemaVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1174).into()),
        );
    }
}

pub fn serialize_structure_data_lake_principal(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataLakePrincipal,
) {
    if let Some(var_1175) = &input.data_lake_principal_identifier {
        object.key("DataLakePrincipalIdentifier").string(var_1175);
    }
}

pub fn serialize_structure_boolean_column_statistics_data(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BooleanColumnStatisticsData,
) {
    {
        object.key("NumberOfTrues").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_trues).into()),
        );
    }
    {
        object.key("NumberOfFalses").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_falses).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
}

pub fn serialize_structure_date_column_statistics_data(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateColumnStatisticsData,
) {
    if let Some(var_1176) = &input.minimum_value {
        object
            .key("MinimumValue")
            .instant(var_1176, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1177) = &input.maximum_value {
        object
            .key("MaximumValue")
            .instant(var_1177, smithy_types::instant::Format::EpochSeconds);
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
}

pub fn serialize_structure_decimal_column_statistics_data(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalColumnStatisticsData,
) {
    if let Some(var_1178) = &input.minimum_value {
        let mut object_1179 = object.key("MinimumValue").start_object();
        crate::json_ser::serialize_structure_decimal_number(&mut object_1179, var_1178);
        object_1179.finish();
    }
    if let Some(var_1180) = &input.maximum_value {
        let mut object_1181 = object.key("MaximumValue").start_object();
        crate::json_ser::serialize_structure_decimal_number(&mut object_1181, var_1180);
        object_1181.finish();
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
}

pub fn serialize_structure_double_column_statistics_data(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DoubleColumnStatisticsData,
) {
    if input.minimum_value != 0.0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0.0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
}

pub fn serialize_structure_long_column_statistics_data(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LongColumnStatisticsData,
) {
    if input.minimum_value != 0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
}

pub fn serialize_structure_string_column_statistics_data(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringColumnStatisticsData,
) {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
}

pub fn serialize_structure_binary_column_statistics_data(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BinaryColumnStatisticsData,
) {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
}

pub fn serialize_structure_decimal_number(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalNumber,
) {
    if let Some(var_1182) = &input.unscaled_value {
        object
            .key("UnscaledValue")
            .string_unchecked(&smithy_types::base64::encode(var_1182));
    }
    {
        object.key("Scale").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.scale).into()),
        );
    }
}
