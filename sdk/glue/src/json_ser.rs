// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1);
    }
    if let Some(var_2) = &input.database_name {
        object.key("DatabaseName").string(var_2);
    }
    if let Some(var_3) = &input.table_name {
        object.key("TableName").string(var_3);
    }
    if let Some(var_4) = &input.partition_input_list {
        let mut array_5 = object.key("PartitionInputList").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_input(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.catalog_id {
        object.key("CatalogId").string(var_8);
    }
    if let Some(var_9) = &input.connection_name_list {
        let mut array_10 = object.key("ConnectionNameList").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11);
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.catalog_id {
        object.key("CatalogId").string(var_12);
    }
    if let Some(var_13) = &input.database_name {
        object.key("DatabaseName").string(var_13);
    }
    if let Some(var_14) = &input.table_name {
        object.key("TableName").string(var_14);
    }
    if let Some(var_15) = &input.partitions_to_delete {
        let mut array_16 = object.key("PartitionsToDelete").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.catalog_id {
        object.key("CatalogId").string(var_19);
    }
    if let Some(var_20) = &input.database_name {
        object.key("DatabaseName").string(var_20);
    }
    if let Some(var_21) = &input.tables_to_delete {
        let mut array_22 = object.key("TablesToDelete").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23);
            }
        }
        array_22.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.catalog_id {
        object.key("CatalogId").string(var_24);
    }
    if let Some(var_25) = &input.database_name {
        object.key("DatabaseName").string(var_25);
    }
    if let Some(var_26) = &input.table_name {
        object.key("TableName").string(var_26);
    }
    if let Some(var_27) = &input.version_ids {
        let mut array_28 = object.key("VersionIds").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29);
            }
        }
        array_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.names {
        let mut array_31 = object.key("Names").start_array();
        for item_32 in var_30 {
            {
                array_31.value().string(item_32);
            }
        }
        array_31.finish();
    }
    if let Some(var_33) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_33);
    }
    if let Some(var_34) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_34);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.crawler_names {
        let mut array_36 = object.key("CrawlerNames").start_array();
        for item_37 in var_35 {
            {
                array_36.value().string(item_37);
            }
        }
        array_36.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_38) = &input.dev_endpoint_names {
        let mut array_39 = object.key("DevEndpointNames").start_array();
        for item_40 in var_38 {
            {
                array_39.value().string(item_40);
            }
        }
        array_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.job_names {
        let mut array_42 = object.key("JobNames").start_array();
        for item_43 in var_41 {
            {
                array_42.value().string(item_43);
            }
        }
        array_42.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.catalog_id {
        object.key("CatalogId").string(var_44);
    }
    if let Some(var_45) = &input.database_name {
        object.key("DatabaseName").string(var_45);
    }
    if let Some(var_46) = &input.table_name {
        object.key("TableName").string(var_46);
    }
    if let Some(var_47) = &input.partitions_to_get {
        let mut array_48 = object.key("PartitionsToGet").start_array();
        for item_49 in var_47 {
            {
                let mut object_50 = array_48.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_50,
                    item_49,
                )?;
                object_50.finish();
            }
        }
        array_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.trigger_names {
        let mut array_52 = object.key("TriggerNames").start_array();
        for item_53 in var_51 {
            {
                array_52.value().string(item_53);
            }
        }
        array_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.names {
        let mut array_55 = object.key("Names").start_array();
        for item_56 in var_54 {
            {
                array_55.value().string(item_56);
            }
        }
        array_55.finish();
    }
    if let Some(var_57) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_57);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_stop_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchStopJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.job_name {
        object.key("JobName").string(var_58);
    }
    if let Some(var_59) = &input.job_run_ids {
        let mut array_60 = object.key("JobRunIds").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61);
            }
        }
        array_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.catalog_id {
        object.key("CatalogId").string(var_62);
    }
    if let Some(var_63) = &input.database_name {
        object.key("DatabaseName").string(var_63);
    }
    if let Some(var_64) = &input.table_name {
        object.key("TableName").string(var_64);
    }
    if let Some(var_65) = &input.entries {
        let mut array_66 = object.key("Entries").start_array();
        for item_67 in var_65 {
            {
                let mut object_68 = array_66.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_update_partition_request_entry(&mut object_68, item_67)?;
                object_68.finish();
            }
        }
        array_66.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.transform_id {
        object.key("TransformId").string(var_69);
    }
    if let Some(var_70) = &input.task_run_id {
        object.key("TaskRunId").string(var_70);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_check_schema_version_validity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckSchemaVersionValidityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.data_format {
        object.key("DataFormat").string(var_71.as_str());
    }
    if let Some(var_72) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_72);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.name {
        object.key("Name").string(var_73);
    }
    if let Some(var_74) = &input.description {
        object.key("Description").string(var_74);
    }
    if let Some(var_75) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_75);
    }
    if let Some(var_76) = &input.tags {
        let mut object_77 = object.key("Tags").start_object();
        for (key_78, value_79) in var_76 {
            {
                object_77.key(key_78).string(value_79);
            }
        }
        object_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.grok_classifier {
        let mut object_81 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_grok_classifier_request(
            &mut object_81,
            var_80,
        )?;
        object_81.finish();
    }
    if let Some(var_82) = &input.xml_classifier {
        let mut object_83 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_xml_classifier_request(
            &mut object_83,
            var_82,
        )?;
        object_83.finish();
    }
    if let Some(var_84) = &input.json_classifier {
        let mut object_85 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_json_classifier_request(
            &mut object_85,
            var_84,
        )?;
        object_85.finish();
    }
    if let Some(var_86) = &input.csv_classifier {
        let mut object_87 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_csv_classifier_request(
            &mut object_87,
            var_86,
        )?;
        object_87.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.catalog_id {
        object.key("CatalogId").string(var_88);
    }
    if let Some(var_89) = &input.connection_input {
        let mut object_90 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(&mut object_90, var_89)?;
        object_90.finish();
    }
    if let Some(var_91) = &input.tags {
        let mut object_92 = object.key("Tags").start_object();
        for (key_93, value_94) in var_91 {
            {
                object_92.key(key_93).string(value_94);
            }
        }
        object_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.name {
        object.key("Name").string(var_95);
    }
    if let Some(var_96) = &input.role {
        object.key("Role").string(var_96);
    }
    if let Some(var_97) = &input.database_name {
        object.key("DatabaseName").string(var_97);
    }
    if let Some(var_98) = &input.description {
        object.key("Description").string(var_98);
    }
    if let Some(var_99) = &input.targets {
        let mut object_100 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_100, var_99)?;
        object_100.finish();
    }
    if let Some(var_101) = &input.schedule {
        object.key("Schedule").string(var_101);
    }
    if let Some(var_102) = &input.classifiers {
        let mut array_103 = object.key("Classifiers").start_array();
        for item_104 in var_102 {
            {
                array_103.value().string(item_104);
            }
        }
        array_103.finish();
    }
    if let Some(var_105) = &input.table_prefix {
        object.key("TablePrefix").string(var_105);
    }
    if let Some(var_106) = &input.schema_change_policy {
        let mut object_107 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_107,
            var_106,
        )?;
        object_107.finish();
    }
    if let Some(var_108) = &input.recrawl_policy {
        let mut object_109 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_109, var_108)?;
        object_109.finish();
    }
    if let Some(var_110) = &input.lineage_configuration {
        let mut object_111 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_111,
            var_110,
        )?;
        object_111.finish();
    }
    if let Some(var_112) = &input.configuration {
        object.key("Configuration").string(var_112);
    }
    if let Some(var_113) = &input.crawler_security_configuration {
        object.key("CrawlerSecurityConfiguration").string(var_113);
    }
    if let Some(var_114) = &input.tags {
        let mut object_115 = object.key("Tags").start_object();
        for (key_116, value_117) in var_114 {
            {
                object_115.key(key_116).string(value_117);
            }
        }
        object_115.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_118) = &input.catalog_id {
        object.key("CatalogId").string(var_118);
    }
    if let Some(var_119) = &input.database_input {
        let mut object_120 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_120, var_119)?;
        object_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.endpoint_name {
        object.key("EndpointName").string(var_121);
    }
    if let Some(var_122) = &input.role_arn {
        object.key("RoleArn").string(var_122);
    }
    if let Some(var_123) = &input.security_group_ids {
        let mut array_124 = object.key("SecurityGroupIds").start_array();
        for item_125 in var_123 {
            {
                array_124.value().string(item_125);
            }
        }
        array_124.finish();
    }
    if let Some(var_126) = &input.subnet_id {
        object.key("SubnetId").string(var_126);
    }
    if let Some(var_127) = &input.public_key {
        object.key("PublicKey").string(var_127);
    }
    if let Some(var_128) = &input.public_keys {
        let mut array_129 = object.key("PublicKeys").start_array();
        for item_130 in var_128 {
            {
                array_129.value().string(item_130);
            }
        }
        array_129.finish();
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_131) = &input.worker_type {
        object.key("WorkerType").string(var_131.as_str());
    }
    if let Some(var_132) = &input.glue_version {
        object.key("GlueVersion").string(var_132);
    }
    if let Some(var_133) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_133).into()),
        );
    }
    if let Some(var_134) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_134);
    }
    if let Some(var_135) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_135);
    }
    if let Some(var_136) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_136);
    }
    if let Some(var_137) = &input.tags {
        let mut object_138 = object.key("Tags").start_object();
        for (key_139, value_140) in var_137 {
            {
                object_138.key(key_139).string(value_140);
            }
        }
        object_138.finish();
    }
    if let Some(var_141) = &input.arguments {
        let mut object_142 = object.key("Arguments").start_object();
        for (key_143, value_144) in var_141 {
            {
                object_142.key(key_143).string(value_144);
            }
        }
        object_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.name {
        object.key("Name").string(var_145);
    }
    if let Some(var_146) = &input.description {
        object.key("Description").string(var_146);
    }
    if let Some(var_147) = &input.log_uri {
        object.key("LogUri").string(var_147);
    }
    if let Some(var_148) = &input.role {
        object.key("Role").string(var_148);
    }
    if let Some(var_149) = &input.execution_property {
        let mut object_150 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    if let Some(var_151) = &input.command {
        let mut object_152 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_152, var_151)?;
        object_152.finish();
    }
    if let Some(var_153) = &input.default_arguments {
        let mut object_154 = object.key("DefaultArguments").start_object();
        for (key_155, value_156) in var_153 {
            {
                object_154.key(key_155).string(value_156);
            }
        }
        object_154.finish();
    }
    if let Some(var_157) = &input.non_overridable_arguments {
        let mut object_158 = object.key("NonOverridableArguments").start_object();
        for (key_159, value_160) in var_157 {
            {
                object_158.key(key_159).string(value_160);
            }
        }
        object_158.finish();
    }
    if let Some(var_161) = &input.connections {
        let mut object_162 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_162,
            var_161,
        )?;
        object_162.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_163) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_163).into()),
        );
    }
    if let Some(var_164) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_165);
    }
    if let Some(var_166) = &input.tags {
        let mut object_167 = object.key("Tags").start_object();
        for (key_168, value_169) in var_166 {
            {
                object_167.key(key_168).string(value_169);
            }
        }
        object_167.finish();
    }
    if let Some(var_170) = &input.notification_property {
        let mut object_171 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_171,
            var_170,
        )?;
        object_171.finish();
    }
    if let Some(var_172) = &input.glue_version {
        object.key("GlueVersion").string(var_172);
    }
    if let Some(var_173) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    if let Some(var_174) = &input.worker_type {
        object.key("WorkerType").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.name {
        object.key("Name").string(var_175);
    }
    if let Some(var_176) = &input.description {
        object.key("Description").string(var_176);
    }
    if let Some(var_177) = &input.input_record_tables {
        let mut array_178 = object.key("InputRecordTables").start_array();
        for item_179 in var_177 {
            {
                let mut object_180 = array_178.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_table(
                    &mut object_180,
                    item_179,
                )?;
                object_180.finish();
            }
        }
        array_178.finish();
    }
    if let Some(var_181) = &input.parameters {
        let mut object_182 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_182,
            var_181,
        )?;
        object_182.finish();
    }
    if let Some(var_183) = &input.role {
        object.key("Role").string(var_183);
    }
    if let Some(var_184) = &input.glue_version {
        object.key("GlueVersion").string(var_184);
    }
    if let Some(var_185) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_185).into()),
        );
    }
    if let Some(var_186) = &input.worker_type {
        object.key("WorkerType").string(var_186.as_str());
    }
    if let Some(var_187) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_187).into()),
        );
    }
    if let Some(var_188) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_188).into()),
        );
    }
    if let Some(var_189) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    if let Some(var_190) = &input.tags {
        let mut object_191 = object.key("Tags").start_object();
        for (key_192, value_193) in var_190 {
            {
                object_191.key(key_192).string(value_193);
            }
        }
        object_191.finish();
    }
    if let Some(var_194) = &input.transform_encryption {
        let mut object_195 = object.key("TransformEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_encryption(
            &mut object_195,
            var_194,
        )?;
        object_195.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.catalog_id {
        object.key("CatalogId").string(var_196);
    }
    if let Some(var_197) = &input.database_name {
        object.key("DatabaseName").string(var_197);
    }
    if let Some(var_198) = &input.table_name {
        object.key("TableName").string(var_198);
    }
    if let Some(var_199) = &input.partition_input {
        let mut object_200 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_200, var_199)?;
        object_200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.catalog_id {
        object.key("CatalogId").string(var_201);
    }
    if let Some(var_202) = &input.database_name {
        object.key("DatabaseName").string(var_202);
    }
    if let Some(var_203) = &input.table_name {
        object.key("TableName").string(var_203);
    }
    if let Some(var_204) = &input.partition_index {
        let mut object_205 = object.key("PartitionIndex").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_index(&mut object_205, var_204)?;
        object_205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_206) = &input.registry_name {
        object.key("RegistryName").string(var_206);
    }
    if let Some(var_207) = &input.description {
        object.key("Description").string(var_207);
    }
    if let Some(var_208) = &input.tags {
        let mut object_209 = object.key("Tags").start_object();
        for (key_210, value_211) in var_208 {
            {
                object_209.key(key_210).string(value_211);
            }
        }
        object_209.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.registry_id {
        let mut object_213 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_213, var_212)?;
        object_213.finish();
    }
    if let Some(var_214) = &input.schema_name {
        object.key("SchemaName").string(var_214);
    }
    if let Some(var_215) = &input.data_format {
        object.key("DataFormat").string(var_215.as_str());
    }
    if let Some(var_216) = &input.compatibility {
        object.key("Compatibility").string(var_216.as_str());
    }
    if let Some(var_217) = &input.description {
        object.key("Description").string(var_217);
    }
    if let Some(var_218) = &input.tags {
        let mut object_219 = object.key("Tags").start_object();
        for (key_220, value_221) in var_218 {
            {
                object_219.key(key_220).string(value_221);
            }
        }
        object_219.finish();
    }
    if let Some(var_222) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_222);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_script_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateScriptInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.dag_nodes {
        let mut array_224 = object.key("DagNodes").start_array();
        for item_225 in var_223 {
            {
                let mut object_226 = array_224.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node(
                    &mut object_226,
                    item_225,
                )?;
                object_226.finish();
            }
        }
        array_224.finish();
    }
    if let Some(var_227) = &input.dag_edges {
        let mut array_228 = object.key("DagEdges").start_array();
        for item_229 in var_227 {
            {
                let mut object_230 = array_228.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_edge(
                    &mut object_230,
                    item_229,
                )?;
                object_230.finish();
            }
        }
        array_228.finish();
    }
    if let Some(var_231) = &input.language {
        object.key("Language").string(var_231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.name {
        object.key("Name").string(var_232);
    }
    if let Some(var_233) = &input.encryption_configuration {
        let mut object_234 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(
            &mut object_234,
            var_233,
        )?;
        object_234.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.catalog_id {
        object.key("CatalogId").string(var_235);
    }
    if let Some(var_236) = &input.database_name {
        object.key("DatabaseName").string(var_236);
    }
    if let Some(var_237) = &input.table_input {
        let mut object_238 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_238, var_237)?;
        object_238.finish();
    }
    if let Some(var_239) = &input.partition_indexes {
        let mut array_240 = object.key("PartitionIndexes").start_array();
        for item_241 in var_239 {
            {
                let mut object_242 = array_240.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_index(
                    &mut object_242,
                    item_241,
                )?;
                object_242.finish();
            }
        }
        array_240.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.name {
        object.key("Name").string(var_243);
    }
    if let Some(var_244) = &input.workflow_name {
        object.key("WorkflowName").string(var_244);
    }
    if let Some(var_245) = &input.r#type {
        object.key("Type").string(var_245.as_str());
    }
    if let Some(var_246) = &input.schedule {
        object.key("Schedule").string(var_246);
    }
    if let Some(var_247) = &input.predicate {
        let mut object_248 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_248, var_247)?;
        object_248.finish();
    }
    if let Some(var_249) = &input.actions {
        let mut array_250 = object.key("Actions").start_array();
        for item_251 in var_249 {
            {
                let mut object_252 = array_250.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_252, item_251)?;
                object_252.finish();
            }
        }
        array_250.finish();
    }
    if let Some(var_253) = &input.description {
        object.key("Description").string(var_253);
    }
    if input.start_on_creation {
        object
            .key("StartOnCreation")
            .boolean(input.start_on_creation);
    }
    if let Some(var_254) = &input.tags {
        let mut object_255 = object.key("Tags").start_object();
        for (key_256, value_257) in var_254 {
            {
                object_255.key(key_256).string(value_257);
            }
        }
        object_255.finish();
    }
    if let Some(var_258) = &input.event_batching_condition {
        let mut object_259 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_259,
            var_258,
        )?;
        object_259.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.catalog_id {
        object.key("CatalogId").string(var_260);
    }
    if let Some(var_261) = &input.database_name {
        object.key("DatabaseName").string(var_261);
    }
    if let Some(var_262) = &input.function_input {
        let mut object_263 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_263,
            var_262,
        )?;
        object_263.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.name {
        object.key("Name").string(var_264);
    }
    if let Some(var_265) = &input.description {
        object.key("Description").string(var_265);
    }
    if let Some(var_266) = &input.default_run_properties {
        let mut object_267 = object.key("DefaultRunProperties").start_object();
        for (key_268, value_269) in var_266 {
            {
                object_267.key(key_268).string(value_269);
            }
        }
        object_267.finish();
    }
    if let Some(var_270) = &input.tags {
        let mut object_271 = object.key("Tags").start_object();
        for (key_272, value_273) in var_270 {
            {
                object_271.key(key_272).string(value_273);
            }
        }
        object_271.finish();
    }
    if let Some(var_274) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_274).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_275) = &input.name {
        object.key("Name").string(var_275);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_276) = &input.name {
        object.key("Name").string(var_276);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.catalog_id {
        object.key("CatalogId").string(var_277);
    }
    if let Some(var_278) = &input.database_name {
        object.key("DatabaseName").string(var_278);
    }
    if let Some(var_279) = &input.table_name {
        object.key("TableName").string(var_279);
    }
    if let Some(var_280) = &input.partition_values {
        let mut array_281 = object.key("PartitionValues").start_array();
        for item_282 in var_280 {
            {
                array_281.value().string(item_282);
            }
        }
        array_281.finish();
    }
    if let Some(var_283) = &input.column_name {
        object.key("ColumnName").string(var_283);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_284) = &input.catalog_id {
        object.key("CatalogId").string(var_284);
    }
    if let Some(var_285) = &input.database_name {
        object.key("DatabaseName").string(var_285);
    }
    if let Some(var_286) = &input.table_name {
        object.key("TableName").string(var_286);
    }
    if let Some(var_287) = &input.column_name {
        object.key("ColumnName").string(var_287);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_288) = &input.catalog_id {
        object.key("CatalogId").string(var_288);
    }
    if let Some(var_289) = &input.connection_name {
        object.key("ConnectionName").string(var_289);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_290) = &input.name {
        object.key("Name").string(var_290);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_291) = &input.catalog_id {
        object.key("CatalogId").string(var_291);
    }
    if let Some(var_292) = &input.name {
        object.key("Name").string(var_292);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.endpoint_name {
        object.key("EndpointName").string(var_293);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_294) = &input.job_name {
        object.key("JobName").string(var_294);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_295) = &input.transform_id {
        object.key("TransformId").string(var_295);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_296) = &input.catalog_id {
        object.key("CatalogId").string(var_296);
    }
    if let Some(var_297) = &input.database_name {
        object.key("DatabaseName").string(var_297);
    }
    if let Some(var_298) = &input.table_name {
        object.key("TableName").string(var_298);
    }
    if let Some(var_299) = &input.partition_values {
        let mut array_300 = object.key("PartitionValues").start_array();
        for item_301 in var_299 {
            {
                array_300.value().string(item_301);
            }
        }
        array_300.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_302) = &input.catalog_id {
        object.key("CatalogId").string(var_302);
    }
    if let Some(var_303) = &input.database_name {
        object.key("DatabaseName").string(var_303);
    }
    if let Some(var_304) = &input.table_name {
        object.key("TableName").string(var_304);
    }
    if let Some(var_305) = &input.index_name {
        object.key("IndexName").string(var_305);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_306) = &input.registry_id {
        let mut object_307 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_307, var_306)?;
        object_307.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_308) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_308);
    }
    if let Some(var_309) = &input.resource_arn {
        object.key("ResourceArn").string(var_309);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.schema_id {
        let mut object_311 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_311, var_310)?;
        object_311.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.schema_id {
        let mut object_313 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_313, var_312)?;
        object_313.finish();
    }
    if let Some(var_314) = &input.versions {
        object.key("Versions").string(var_314);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_315) = &input.name {
        object.key("Name").string(var_315);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.catalog_id {
        object.key("CatalogId").string(var_316);
    }
    if let Some(var_317) = &input.database_name {
        object.key("DatabaseName").string(var_317);
    }
    if let Some(var_318) = &input.name {
        object.key("Name").string(var_318);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.catalog_id {
        object.key("CatalogId").string(var_319);
    }
    if let Some(var_320) = &input.database_name {
        object.key("DatabaseName").string(var_320);
    }
    if let Some(var_321) = &input.table_name {
        object.key("TableName").string(var_321);
    }
    if let Some(var_322) = &input.version_id {
        object.key("VersionId").string(var_322);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_323) = &input.name {
        object.key("Name").string(var_323);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.catalog_id {
        object.key("CatalogId").string(var_324);
    }
    if let Some(var_325) = &input.database_name {
        object.key("DatabaseName").string(var_325);
    }
    if let Some(var_326) = &input.function_name {
        object.key("FunctionName").string(var_326);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_327) = &input.name {
        object.key("Name").string(var_327);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_328) = &input.name {
        object.key("Name").string(var_328);
    }
    if let Some(var_329) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_329);
    }
    if let Some(var_330) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_330);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.blueprint_name {
        object.key("BlueprintName").string(var_331);
    }
    if let Some(var_332) = &input.run_id {
        object.key("RunId").string(var_332);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.blueprint_name {
        object.key("BlueprintName").string(var_333);
    }
    if let Some(var_334) = &input.next_token {
        object.key("NextToken").string(var_334);
    }
    if let Some(var_335) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_335).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_catalog_import_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCatalogImportStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.catalog_id {
        object.key("CatalogId").string(var_336);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.name {
        object.key("Name").string(var_337);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifiers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifiersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_338).into()),
        );
    }
    if let Some(var_339) = &input.next_token {
        object.key("NextToken").string(var_339);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.catalog_id {
        object.key("CatalogId").string(var_340);
    }
    if let Some(var_341) = &input.database_name {
        object.key("DatabaseName").string(var_341);
    }
    if let Some(var_342) = &input.table_name {
        object.key("TableName").string(var_342);
    }
    if let Some(var_343) = &input.partition_values {
        let mut array_344 = object.key("PartitionValues").start_array();
        for item_345 in var_343 {
            {
                array_344.value().string(item_345);
            }
        }
        array_344.finish();
    }
    if let Some(var_346) = &input.column_names {
        let mut array_347 = object.key("ColumnNames").start_array();
        for item_348 in var_346 {
            {
                array_347.value().string(item_348);
            }
        }
        array_347.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.catalog_id {
        object.key("CatalogId").string(var_349);
    }
    if let Some(var_350) = &input.database_name {
        object.key("DatabaseName").string(var_350);
    }
    if let Some(var_351) = &input.table_name {
        object.key("TableName").string(var_351);
    }
    if let Some(var_352) = &input.column_names {
        let mut array_353 = object.key("ColumnNames").start_array();
        for item_354 in var_352 {
            {
                array_353.value().string(item_354);
            }
        }
        array_353.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_355) = &input.catalog_id {
        object.key("CatalogId").string(var_355);
    }
    if let Some(var_356) = &input.name {
        object.key("Name").string(var_356);
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_357) = &input.catalog_id {
        object.key("CatalogId").string(var_357);
    }
    if let Some(var_358) = &input.filter {
        let mut object_359 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_get_connections_filter(
            &mut object_359,
            var_358,
        )?;
        object_359.finish();
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    if let Some(var_360) = &input.next_token {
        object.key("NextToken").string(var_360);
    }
    if let Some(var_361) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_361).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_362) = &input.name {
        object.key("Name").string(var_362);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_363) = &input.crawler_name_list {
        let mut array_364 = object.key("CrawlerNameList").start_array();
        for item_365 in var_363 {
            {
                array_364.value().string(item_365);
            }
        }
        array_364.finish();
    }
    if let Some(var_366) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_366).into()),
        );
    }
    if let Some(var_367) = &input.next_token {
        object.key("NextToken").string(var_367);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_368).into()),
        );
    }
    if let Some(var_369) = &input.next_token {
        object.key("NextToken").string(var_369);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.catalog_id {
        object.key("CatalogId").string(var_370);
    }
    if let Some(var_371) = &input.name {
        object.key("Name").string(var_371);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_databases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.catalog_id {
        object.key("CatalogId").string(var_372);
    }
    if let Some(var_373) = &input.next_token {
        object.key("NextToken").string(var_373);
    }
    if let Some(var_374) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_374).into()),
        );
    }
    if let Some(var_375) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_375.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_376) = &input.catalog_id {
        object.key("CatalogId").string(var_376);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dataflow_graph_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataflowGraphInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.python_script {
        object.key("PythonScript").string(var_377);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_378) = &input.endpoint_name {
        object.key("EndpointName").string(var_378);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_379).into()),
        );
    }
    if let Some(var_380) = &input.next_token {
        object.key("NextToken").string(var_380);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.job_name {
        object.key("JobName").string(var_381);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.job_name {
        object.key("JobName").string(var_382);
    }
    if let Some(var_383) = &input.run_id {
        object.key("RunId").string(var_383);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.job_name {
        object.key("JobName").string(var_384);
    }
    if let Some(var_385) = &input.run_id {
        object.key("RunId").string(var_385);
    }
    if input.predecessors_included {
        object
            .key("PredecessorsIncluded")
            .boolean(input.predecessors_included);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.job_name {
        object.key("JobName").string(var_386);
    }
    if let Some(var_387) = &input.next_token {
        object.key("NextToken").string(var_387);
    }
    if let Some(var_388) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_388).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.next_token {
        object.key("NextToken").string(var_389);
    }
    if let Some(var_390) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_390).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_391) = &input.source {
        let mut object_392 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_392, var_391)?;
        object_392.finish();
    }
    if let Some(var_393) = &input.sinks {
        let mut array_394 = object.key("Sinks").start_array();
        for item_395 in var_393 {
            {
                let mut object_396 = array_394.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_396,
                    item_395,
                )?;
                object_396.finish();
            }
        }
        array_394.finish();
    }
    if let Some(var_397) = &input.location {
        let mut object_398 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_398, var_397)?;
        object_398.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_399) = &input.transform_id {
        object.key("TransformId").string(var_399);
    }
    if let Some(var_400) = &input.task_run_id {
        object.key("TaskRunId").string(var_400);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_401) = &input.transform_id {
        object.key("TransformId").string(var_401);
    }
    if let Some(var_402) = &input.next_token {
        object.key("NextToken").string(var_402);
    }
    if let Some(var_403) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_403).into()),
        );
    }
    if let Some(var_404) = &input.filter {
        let mut object_405 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_filter_criteria(
            &mut object_405,
            var_404,
        )?;
        object_405.finish();
    }
    if let Some(var_406) = &input.sort {
        let mut object_407 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_sort_criteria(
            &mut object_407,
            var_406,
        )?;
        object_407.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_408) = &input.transform_id {
        object.key("TransformId").string(var_408);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_409) = &input.next_token {
        object.key("NextToken").string(var_409);
    }
    if let Some(var_410) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_410).into()),
        );
    }
    if let Some(var_411) = &input.filter {
        let mut object_412 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_412,
            var_411,
        )?;
        object_412.finish();
    }
    if let Some(var_413) = &input.sort {
        let mut object_414 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_414,
            var_413,
        )?;
        object_414.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_415) = &input.catalog_id {
        object.key("CatalogId").string(var_415);
    }
    if let Some(var_416) = &input.database_name {
        object.key("DatabaseName").string(var_416);
    }
    if let Some(var_417) = &input.table_name {
        object.key("TableName").string(var_417);
    }
    if let Some(var_418) = &input.partition_values {
        let mut array_419 = object.key("PartitionValues").start_array();
        for item_420 in var_418 {
            {
                array_419.value().string(item_420);
            }
        }
        array_419.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_indexes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionIndexesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_421) = &input.catalog_id {
        object.key("CatalogId").string(var_421);
    }
    if let Some(var_422) = &input.database_name {
        object.key("DatabaseName").string(var_422);
    }
    if let Some(var_423) = &input.table_name {
        object.key("TableName").string(var_423);
    }
    if let Some(var_424) = &input.next_token {
        object.key("NextToken").string(var_424);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.catalog_id {
        object.key("CatalogId").string(var_425);
    }
    if let Some(var_426) = &input.database_name {
        object.key("DatabaseName").string(var_426);
    }
    if let Some(var_427) = &input.table_name {
        object.key("TableName").string(var_427);
    }
    if let Some(var_428) = &input.expression {
        object.key("Expression").string(var_428);
    }
    if let Some(var_429) = &input.next_token {
        object.key("NextToken").string(var_429);
    }
    if let Some(var_430) = &input.segment {
        let mut object_431 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_431, var_430)?;
        object_431.finish();
    }
    if let Some(var_432) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_432).into()),
        );
    }
    if let Some(var_433) = &input.exclude_column_schema {
        object.key("ExcludeColumnSchema").boolean(*var_433);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_434) = &input.mapping {
        let mut array_435 = object.key("Mapping").start_array();
        for item_436 in var_434 {
            {
                let mut object_437 = array_435.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping_entry(
                    &mut object_437,
                    item_436,
                )?;
                object_437.finish();
            }
        }
        array_435.finish();
    }
    if let Some(var_438) = &input.source {
        let mut object_439 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_439, var_438)?;
        object_439.finish();
    }
    if let Some(var_440) = &input.sinks {
        let mut array_441 = object.key("Sinks").start_array();
        for item_442 in var_440 {
            {
                let mut object_443 = array_441.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_443,
                    item_442,
                )?;
                object_443.finish();
            }
        }
        array_441.finish();
    }
    if let Some(var_444) = &input.location {
        let mut object_445 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_445, var_444)?;
        object_445.finish();
    }
    if let Some(var_446) = &input.language {
        object.key("Language").string(var_446.as_str());
    }
    if let Some(var_447) = &input.additional_plan_options_map {
        let mut object_448 = object.key("AdditionalPlanOptionsMap").start_object();
        for (key_449, value_450) in var_447 {
            {
                object_448.key(key_449).string(value_450);
            }
        }
        object_448.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.registry_id {
        let mut object_452 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_452, var_451)?;
        object_452.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_453) = &input.next_token {
        object.key("NextToken").string(var_453);
    }
    if let Some(var_454) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_454).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_455) = &input.resource_arn {
        object.key("ResourceArn").string(var_455);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.schema_id {
        let mut object_457 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_457, var_456)?;
        object_457.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_by_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaByDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_458) = &input.schema_id {
        let mut object_459 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_459, var_458)?;
        object_459.finish();
    }
    if let Some(var_460) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_460);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_461) = &input.schema_id {
        let mut object_462 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_462, var_461)?;
        object_462.finish();
    }
    if let Some(var_463) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_463);
    }
    if let Some(var_464) = &input.schema_version_number {
        let mut object_465 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_465,
            var_464,
        )?;
        object_465.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_versions_diff_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionsDiffInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_466) = &input.schema_id {
        let mut object_467 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_467, var_466)?;
        object_467.finish();
    }
    if let Some(var_468) = &input.first_schema_version_number {
        let mut object_469 = object.key("FirstSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_469,
            var_468,
        )?;
        object_469.finish();
    }
    if let Some(var_470) = &input.second_schema_version_number {
        let mut object_471 = object.key("SecondSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_471,
            var_470,
        )?;
        object_471.finish();
    }
    if let Some(var_472) = &input.schema_diff_type {
        object.key("SchemaDiffType").string(var_472.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.name {
        object.key("Name").string(var_473);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_474) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_474).into()),
        );
    }
    if let Some(var_475) = &input.next_token {
        object.key("NextToken").string(var_475);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_476) = &input.catalog_id {
        object.key("CatalogId").string(var_476);
    }
    if let Some(var_477) = &input.database_name {
        object.key("DatabaseName").string(var_477);
    }
    if let Some(var_478) = &input.name {
        object.key("Name").string(var_478);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_479) = &input.catalog_id {
        object.key("CatalogId").string(var_479);
    }
    if let Some(var_480) = &input.database_name {
        object.key("DatabaseName").string(var_480);
    }
    if let Some(var_481) = &input.expression {
        object.key("Expression").string(var_481);
    }
    if let Some(var_482) = &input.next_token {
        object.key("NextToken").string(var_482);
    }
    if let Some(var_483) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_483).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_484) = &input.catalog_id {
        object.key("CatalogId").string(var_484);
    }
    if let Some(var_485) = &input.database_name {
        object.key("DatabaseName").string(var_485);
    }
    if let Some(var_486) = &input.table_name {
        object.key("TableName").string(var_486);
    }
    if let Some(var_487) = &input.version_id {
        object.key("VersionId").string(var_487);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.catalog_id {
        object.key("CatalogId").string(var_488);
    }
    if let Some(var_489) = &input.database_name {
        object.key("DatabaseName").string(var_489);
    }
    if let Some(var_490) = &input.table_name {
        object.key("TableName").string(var_490);
    }
    if let Some(var_491) = &input.next_token {
        object.key("NextToken").string(var_491);
    }
    if let Some(var_492) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_492).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_493) = &input.resource_arn {
        object.key("ResourceArn").string(var_493);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_494) = &input.name {
        object.key("Name").string(var_494);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_495) = &input.next_token {
        object.key("NextToken").string(var_495);
    }
    if let Some(var_496) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_496);
    }
    if let Some(var_497) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_497).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_498) = &input.catalog_id {
        object.key("CatalogId").string(var_498);
    }
    if let Some(var_499) = &input.database_name {
        object.key("DatabaseName").string(var_499);
    }
    if let Some(var_500) = &input.function_name {
        object.key("FunctionName").string(var_500);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_functions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_501) = &input.catalog_id {
        object.key("CatalogId").string(var_501);
    }
    if let Some(var_502) = &input.database_name {
        object.key("DatabaseName").string(var_502);
    }
    if let Some(var_503) = &input.pattern {
        object.key("Pattern").string(var_503);
    }
    if let Some(var_504) = &input.next_token {
        object.key("NextToken").string(var_504);
    }
    if let Some(var_505) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_505).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_506) = &input.name {
        object.key("Name").string(var_506);
    }
    if let Some(var_507) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_507);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_508) = &input.name {
        object.key("Name").string(var_508);
    }
    if let Some(var_509) = &input.run_id {
        object.key("RunId").string(var_509);
    }
    if let Some(var_510) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_510);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_511) = &input.name {
        object.key("Name").string(var_511);
    }
    if let Some(var_512) = &input.run_id {
        object.key("RunId").string(var_512);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_513) = &input.name {
        object.key("Name").string(var_513);
    }
    if let Some(var_514) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_514);
    }
    if let Some(var_515) = &input.next_token {
        object.key("NextToken").string(var_515);
    }
    if let Some(var_516) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_516).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_catalog_to_glue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCatalogToGlueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_517) = &input.catalog_id {
        object.key("CatalogId").string(var_517);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_518) = &input.next_token {
        object.key("NextToken").string(var_518);
    }
    if let Some(var_519) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_519).into()),
        );
    }
    if let Some(var_520) = &input.tags {
        let mut object_521 = object.key("Tags").start_object();
        for (key_522, value_523) in var_520 {
            {
                object_521.key(key_522).string(value_523);
            }
        }
        object_521.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_524) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_524).into()),
        );
    }
    if let Some(var_525) = &input.next_token {
        object.key("NextToken").string(var_525);
    }
    if let Some(var_526) = &input.tags {
        let mut object_527 = object.key("Tags").start_object();
        for (key_528, value_529) in var_526 {
            {
                object_527.key(key_528).string(value_529);
            }
        }
        object_527.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_530) = &input.next_token {
        object.key("NextToken").string(var_530);
    }
    if let Some(var_531) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_531).into()),
        );
    }
    if let Some(var_532) = &input.tags {
        let mut object_533 = object.key("Tags").start_object();
        for (key_534, value_535) in var_532 {
            {
                object_533.key(key_534).string(value_535);
            }
        }
        object_533.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_536) = &input.next_token {
        object.key("NextToken").string(var_536);
    }
    if let Some(var_537) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_537).into()),
        );
    }
    if let Some(var_538) = &input.tags {
        let mut object_539 = object.key("Tags").start_object();
        for (key_540, value_541) in var_538 {
            {
                object_539.key(key_540).string(value_541);
            }
        }
        object_539.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_542) = &input.next_token {
        object.key("NextToken").string(var_542);
    }
    if let Some(var_543) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_543).into()),
        );
    }
    if let Some(var_544) = &input.filter {
        let mut object_545 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_545,
            var_544,
        )?;
        object_545.finish();
    }
    if let Some(var_546) = &input.sort {
        let mut object_547 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_547,
            var_546,
        )?;
        object_547.finish();
    }
    if let Some(var_548) = &input.tags {
        let mut object_549 = object.key("Tags").start_object();
        for (key_550, value_551) in var_548 {
            {
                object_549.key(key_550).string(value_551);
            }
        }
        object_549.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_registries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegistriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_552) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_552).into()),
        );
    }
    if let Some(var_553) = &input.next_token {
        object.key("NextToken").string(var_553);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_554) = &input.registry_id {
        let mut object_555 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_555, var_554)?;
        object_555.finish();
    }
    if let Some(var_556) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_556).into()),
        );
    }
    if let Some(var_557) = &input.next_token {
        object.key("NextToken").string(var_557);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_558) = &input.schema_id {
        let mut object_559 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_559, var_558)?;
        object_559.finish();
    }
    if let Some(var_560) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_560).into()),
        );
    }
    if let Some(var_561) = &input.next_token {
        object.key("NextToken").string(var_561);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_562) = &input.next_token {
        object.key("NextToken").string(var_562);
    }
    if let Some(var_563) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_563);
    }
    if let Some(var_564) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_564).into()),
        );
    }
    if let Some(var_565) = &input.tags {
        let mut object_566 = object.key("Tags").start_object();
        for (key_567, value_568) in var_565 {
            {
                object_566.key(key_567).string(value_568);
            }
        }
        object_566.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_569) = &input.next_token {
        object.key("NextToken").string(var_569);
    }
    if let Some(var_570) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_570).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_571) = &input.catalog_id {
        object.key("CatalogId").string(var_571);
    }
    if let Some(var_572) = &input.data_catalog_encryption_settings {
        let mut object_573 = object.key("DataCatalogEncryptionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_encryption_settings(
            &mut object_573,
            var_572,
        )?;
        object_573.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_574) = &input.policy_in_json {
        object.key("PolicyInJson").string(var_574);
    }
    if let Some(var_575) = &input.resource_arn {
        object.key("ResourceArn").string(var_575);
    }
    if let Some(var_576) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_576);
    }
    if let Some(var_577) = &input.policy_exists_condition {
        object.key("PolicyExistsCondition").string(var_577.as_str());
    }
    if let Some(var_578) = &input.enable_hybrid {
        object.key("EnableHybrid").string(var_578.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_579) = &input.schema_id {
        let mut object_580 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_580, var_579)?;
        object_580.finish();
    }
    if let Some(var_581) = &input.schema_version_number {
        let mut object_582 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_582,
            var_581,
        )?;
        object_582.finish();
    }
    if let Some(var_583) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_583);
    }
    if let Some(var_584) = &input.metadata_key_value {
        let mut object_585 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_585,
            var_584,
        )?;
        object_585.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_586) = &input.name {
        object.key("Name").string(var_586);
    }
    if let Some(var_587) = &input.run_id {
        object.key("RunId").string(var_587);
    }
    if let Some(var_588) = &input.run_properties {
        let mut object_589 = object.key("RunProperties").start_object();
        for (key_590, value_591) in var_588 {
            {
                object_589.key(key_590).string(value_591);
            }
        }
        object_589.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QuerySchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_592) = &input.schema_id {
        let mut object_593 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_593, var_592)?;
        object_593.finish();
    }
    if let Some(var_594) = &input.schema_version_number {
        let mut object_595 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_595,
            var_594,
        )?;
        object_595.finish();
    }
    if let Some(var_596) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_596);
    }
    if let Some(var_597) = &input.metadata_list {
        let mut array_598 = object.key("MetadataList").start_array();
        for item_599 in var_597 {
            {
                let mut object_600 = array_598.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
                    &mut object_600,
                    item_599,
                )?;
                object_600.finish();
            }
        }
        array_598.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_601) = &input.next_token {
        object.key("NextToken").string(var_601);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_602) = &input.schema_id {
        let mut object_603 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_603, var_602)?;
        object_603.finish();
    }
    if let Some(var_604) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_604);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_605) = &input.schema_id {
        let mut object_606 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_606, var_605)?;
        object_606.finish();
    }
    if let Some(var_607) = &input.schema_version_number {
        let mut object_608 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_608,
            var_607,
        )?;
        object_608.finish();
    }
    if let Some(var_609) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_609);
    }
    if let Some(var_610) = &input.metadata_key_value {
        let mut object_611 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_611,
            var_610,
        )?;
        object_611.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_612) = &input.job_name {
        object.key("JobName").string(var_612);
    }
    if let Some(var_613) = &input.run_id {
        object.key("RunId").string(var_613);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_614) = &input.name {
        object.key("Name").string(var_614);
    }
    if let Some(var_615) = &input.run_id {
        object.key("RunId").string(var_615);
    }
    if let Some(var_616) = &input.node_ids {
        let mut array_617 = object.key("NodeIds").start_array();
        for item_618 in var_616 {
            {
                array_617.value().string(item_618);
            }
        }
        array_617.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_619) = &input.catalog_id {
        object.key("CatalogId").string(var_619);
    }
    if let Some(var_620) = &input.next_token {
        object.key("NextToken").string(var_620);
    }
    if let Some(var_621) = &input.filters {
        let mut array_622 = object.key("Filters").start_array();
        for item_623 in var_621 {
            {
                let mut object_624 = array_622.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_predicate(
                    &mut object_624,
                    item_623,
                )?;
                object_624.finish();
            }
        }
        array_622.finish();
    }
    if let Some(var_625) = &input.search_text {
        object.key("SearchText").string(var_625);
    }
    if let Some(var_626) = &input.sort_criteria {
        let mut array_627 = object.key("SortCriteria").start_array();
        for item_628 in var_626 {
            {
                let mut object_629 = array_627.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_criterion(
                    &mut object_629,
                    item_628,
                )?;
                object_629.finish();
            }
        }
        array_627.finish();
    }
    if let Some(var_630) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_630).into()),
        );
    }
    if let Some(var_631) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_631.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_632) = &input.blueprint_name {
        object.key("BlueprintName").string(var_632);
    }
    if let Some(var_633) = &input.parameters {
        object.key("Parameters").string(var_633);
    }
    if let Some(var_634) = &input.role_arn {
        object.key("RoleArn").string(var_634);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_635) = &input.name {
        object.key("Name").string(var_635);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_636) = &input.crawler_name {
        object.key("CrawlerName").string(var_636);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_export_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartExportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_637) = &input.transform_id {
        object.key("TransformId").string(var_637);
    }
    if let Some(var_638) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_638);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_639) = &input.transform_id {
        object.key("TransformId").string(var_639);
    }
    if let Some(var_640) = &input.input_s3_path {
        object.key("InputS3Path").string(var_640);
    }
    if input.replace_all_labels {
        object
            .key("ReplaceAllLabels")
            .boolean(input.replace_all_labels);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_641) = &input.job_name {
        object.key("JobName").string(var_641);
    }
    if let Some(var_642) = &input.job_run_id {
        object.key("JobRunId").string(var_642);
    }
    if let Some(var_643) = &input.arguments {
        let mut object_644 = object.key("Arguments").start_object();
        for (key_645, value_646) in var_643 {
            {
                object_644.key(key_645).string(value_646);
            }
        }
        object_644.finish();
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_647) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_647).into()),
        );
    }
    if let Some(var_648) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_648).into()),
        );
    }
    if let Some(var_649) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_649);
    }
    if let Some(var_650) = &input.notification_property {
        let mut object_651 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_651,
            var_650,
        )?;
        object_651.finish();
    }
    if let Some(var_652) = &input.worker_type {
        object.key("WorkerType").string(var_652.as_str());
    }
    if let Some(var_653) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_653).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_evaluation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlEvaluationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_654) = &input.transform_id {
        object.key("TransformId").string(var_654);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_labeling_set_generation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlLabelingSetGenerationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_655) = &input.transform_id {
        object.key("TransformId").string(var_655);
    }
    if let Some(var_656) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_656);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_657) = &input.name {
        object.key("Name").string(var_657);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_658) = &input.name {
        object.key("Name").string(var_658);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_659) = &input.name {
        object.key("Name").string(var_659);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_660) = &input.crawler_name {
        object.key("CrawlerName").string(var_660);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_661) = &input.name {
        object.key("Name").string(var_661);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_662) = &input.name {
        object.key("Name").string(var_662);
    }
    if let Some(var_663) = &input.run_id {
        object.key("RunId").string(var_663);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_664) = &input.resource_arn {
        object.key("ResourceArn").string(var_664);
    }
    if let Some(var_665) = &input.tags_to_add {
        let mut object_666 = object.key("TagsToAdd").start_object();
        for (key_667, value_668) in var_665 {
            {
                object_666.key(key_667).string(value_668);
            }
        }
        object_666.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_669) = &input.resource_arn {
        object.key("ResourceArn").string(var_669);
    }
    if let Some(var_670) = &input.tags_to_remove {
        let mut array_671 = object.key("TagsToRemove").start_array();
        for item_672 in var_670 {
            {
                array_671.value().string(item_672);
            }
        }
        array_671.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_673) = &input.name {
        object.key("Name").string(var_673);
    }
    if let Some(var_674) = &input.description {
        object.key("Description").string(var_674);
    }
    if let Some(var_675) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_675);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_676) = &input.grok_classifier {
        let mut object_677 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_grok_classifier_request(
            &mut object_677,
            var_676,
        )?;
        object_677.finish();
    }
    if let Some(var_678) = &input.xml_classifier {
        let mut object_679 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_xml_classifier_request(
            &mut object_679,
            var_678,
        )?;
        object_679.finish();
    }
    if let Some(var_680) = &input.json_classifier {
        let mut object_681 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_json_classifier_request(
            &mut object_681,
            var_680,
        )?;
        object_681.finish();
    }
    if let Some(var_682) = &input.csv_classifier {
        let mut object_683 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_csv_classifier_request(
            &mut object_683,
            var_682,
        )?;
        object_683.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_684) = &input.catalog_id {
        object.key("CatalogId").string(var_684);
    }
    if let Some(var_685) = &input.database_name {
        object.key("DatabaseName").string(var_685);
    }
    if let Some(var_686) = &input.table_name {
        object.key("TableName").string(var_686);
    }
    if let Some(var_687) = &input.partition_values {
        let mut array_688 = object.key("PartitionValues").start_array();
        for item_689 in var_687 {
            {
                array_688.value().string(item_689);
            }
        }
        array_688.finish();
    }
    if let Some(var_690) = &input.column_statistics_list {
        let mut array_691 = object.key("ColumnStatisticsList").start_array();
        for item_692 in var_690 {
            {
                let mut object_693 = array_691.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_693,
                    item_692,
                )?;
                object_693.finish();
            }
        }
        array_691.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_694) = &input.catalog_id {
        object.key("CatalogId").string(var_694);
    }
    if let Some(var_695) = &input.database_name {
        object.key("DatabaseName").string(var_695);
    }
    if let Some(var_696) = &input.table_name {
        object.key("TableName").string(var_696);
    }
    if let Some(var_697) = &input.column_statistics_list {
        let mut array_698 = object.key("ColumnStatisticsList").start_array();
        for item_699 in var_697 {
            {
                let mut object_700 = array_698.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_700,
                    item_699,
                )?;
                object_700.finish();
            }
        }
        array_698.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_701) = &input.catalog_id {
        object.key("CatalogId").string(var_701);
    }
    if let Some(var_702) = &input.name {
        object.key("Name").string(var_702);
    }
    if let Some(var_703) = &input.connection_input {
        let mut object_704 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(
            &mut object_704,
            var_703,
        )?;
        object_704.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_705) = &input.name {
        object.key("Name").string(var_705);
    }
    if let Some(var_706) = &input.role {
        object.key("Role").string(var_706);
    }
    if let Some(var_707) = &input.database_name {
        object.key("DatabaseName").string(var_707);
    }
    if let Some(var_708) = &input.description {
        object.key("Description").string(var_708);
    }
    if let Some(var_709) = &input.targets {
        let mut object_710 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_710, var_709)?;
        object_710.finish();
    }
    if let Some(var_711) = &input.schedule {
        object.key("Schedule").string(var_711);
    }
    if let Some(var_712) = &input.classifiers {
        let mut array_713 = object.key("Classifiers").start_array();
        for item_714 in var_712 {
            {
                array_713.value().string(item_714);
            }
        }
        array_713.finish();
    }
    if let Some(var_715) = &input.table_prefix {
        object.key("TablePrefix").string(var_715);
    }
    if let Some(var_716) = &input.schema_change_policy {
        let mut object_717 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_717,
            var_716,
        )?;
        object_717.finish();
    }
    if let Some(var_718) = &input.recrawl_policy {
        let mut object_719 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_719, var_718)?;
        object_719.finish();
    }
    if let Some(var_720) = &input.lineage_configuration {
        let mut object_721 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_721,
            var_720,
        )?;
        object_721.finish();
    }
    if let Some(var_722) = &input.configuration {
        object.key("Configuration").string(var_722);
    }
    if let Some(var_723) = &input.crawler_security_configuration {
        object.key("CrawlerSecurityConfiguration").string(var_723);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_724) = &input.crawler_name {
        object.key("CrawlerName").string(var_724);
    }
    if let Some(var_725) = &input.schedule {
        object.key("Schedule").string(var_725);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_726) = &input.catalog_id {
        object.key("CatalogId").string(var_726);
    }
    if let Some(var_727) = &input.name {
        object.key("Name").string(var_727);
    }
    if let Some(var_728) = &input.database_input {
        let mut object_729 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_729, var_728)?;
        object_729.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_730) = &input.endpoint_name {
        object.key("EndpointName").string(var_730);
    }
    if let Some(var_731) = &input.public_key {
        object.key("PublicKey").string(var_731);
    }
    if let Some(var_732) = &input.add_public_keys {
        let mut array_733 = object.key("AddPublicKeys").start_array();
        for item_734 in var_732 {
            {
                array_733.value().string(item_734);
            }
        }
        array_733.finish();
    }
    if let Some(var_735) = &input.delete_public_keys {
        let mut array_736 = object.key("DeletePublicKeys").start_array();
        for item_737 in var_735 {
            {
                array_736.value().string(item_737);
            }
        }
        array_736.finish();
    }
    if let Some(var_738) = &input.custom_libraries {
        let mut object_739 = object.key("CustomLibraries").start_object();
        crate::json_ser::serialize_structure_crate_model_dev_endpoint_custom_libraries(
            &mut object_739,
            var_738,
        )?;
        object_739.finish();
    }
    if input.update_etl_libraries {
        object
            .key("UpdateEtlLibraries")
            .boolean(input.update_etl_libraries);
    }
    if let Some(var_740) = &input.delete_arguments {
        let mut array_741 = object.key("DeleteArguments").start_array();
        for item_742 in var_740 {
            {
                array_741.value().string(item_742);
            }
        }
        array_741.finish();
    }
    if let Some(var_743) = &input.add_arguments {
        let mut object_744 = object.key("AddArguments").start_object();
        for (key_745, value_746) in var_743 {
            {
                object_744.key(key_745).string(value_746);
            }
        }
        object_744.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_747) = &input.job_name {
        object.key("JobName").string(var_747);
    }
    if let Some(var_748) = &input.job_update {
        let mut object_749 = object.key("JobUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_job_update(&mut object_749, var_748)?;
        object_749.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_750) = &input.transform_id {
        object.key("TransformId").string(var_750);
    }
    if let Some(var_751) = &input.name {
        object.key("Name").string(var_751);
    }
    if let Some(var_752) = &input.description {
        object.key("Description").string(var_752);
    }
    if let Some(var_753) = &input.parameters {
        let mut object_754 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_754,
            var_753,
        )?;
        object_754.finish();
    }
    if let Some(var_755) = &input.role {
        object.key("Role").string(var_755);
    }
    if let Some(var_756) = &input.glue_version {
        object.key("GlueVersion").string(var_756);
    }
    if let Some(var_757) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_757).into()),
        );
    }
    if let Some(var_758) = &input.worker_type {
        object.key("WorkerType").string(var_758.as_str());
    }
    if let Some(var_759) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_759).into()),
        );
    }
    if let Some(var_760) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_760).into()),
        );
    }
    if let Some(var_761) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_761).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_762) = &input.catalog_id {
        object.key("CatalogId").string(var_762);
    }
    if let Some(var_763) = &input.database_name {
        object.key("DatabaseName").string(var_763);
    }
    if let Some(var_764) = &input.table_name {
        object.key("TableName").string(var_764);
    }
    if let Some(var_765) = &input.partition_value_list {
        let mut array_766 = object.key("PartitionValueList").start_array();
        for item_767 in var_765 {
            {
                array_766.value().string(item_767);
            }
        }
        array_766.finish();
    }
    if let Some(var_768) = &input.partition_input {
        let mut object_769 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_769, var_768)?;
        object_769.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_770) = &input.registry_id {
        let mut object_771 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_771, var_770)?;
        object_771.finish();
    }
    if let Some(var_772) = &input.description {
        object.key("Description").string(var_772);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_773) = &input.schema_id {
        let mut object_774 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_774, var_773)?;
        object_774.finish();
    }
    if let Some(var_775) = &input.schema_version_number {
        let mut object_776 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_776,
            var_775,
        )?;
        object_776.finish();
    }
    if let Some(var_777) = &input.compatibility {
        object.key("Compatibility").string(var_777.as_str());
    }
    if let Some(var_778) = &input.description {
        object.key("Description").string(var_778);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_779) = &input.catalog_id {
        object.key("CatalogId").string(var_779);
    }
    if let Some(var_780) = &input.database_name {
        object.key("DatabaseName").string(var_780);
    }
    if let Some(var_781) = &input.table_input {
        let mut object_782 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_782, var_781)?;
        object_782.finish();
    }
    if let Some(var_783) = &input.skip_archive {
        object.key("SkipArchive").boolean(*var_783);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_784) = &input.name {
        object.key("Name").string(var_784);
    }
    if let Some(var_785) = &input.trigger_update {
        let mut object_786 = object.key("TriggerUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_update(&mut object_786, var_785)?;
        object_786.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_787) = &input.catalog_id {
        object.key("CatalogId").string(var_787);
    }
    if let Some(var_788) = &input.database_name {
        object.key("DatabaseName").string(var_788);
    }
    if let Some(var_789) = &input.function_name {
        object.key("FunctionName").string(var_789);
    }
    if let Some(var_790) = &input.function_input {
        let mut object_791 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_791,
            var_790,
        )?;
        object_791.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_792) = &input.name {
        object.key("Name").string(var_792);
    }
    if let Some(var_793) = &input.description {
        object.key("Description").string(var_793);
    }
    if let Some(var_794) = &input.default_run_properties {
        let mut object_795 = object.key("DefaultRunProperties").start_object();
        for (key_796, value_797) in var_794 {
            {
                object_795.key(key_796).string(value_797);
            }
        }
        object_795.finish();
    }
    if let Some(var_798) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_798).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_799) = &input.values {
        let mut array_800 = object.key("Values").start_array();
        for item_801 in var_799 {
            {
                array_800.value().string(item_801);
            }
        }
        array_800.finish();
    }
    if let Some(var_802) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_802, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_803) = &input.storage_descriptor {
        let mut object_804 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_804,
            var_803,
        )?;
        object_804.finish();
    }
    if let Some(var_805) = &input.parameters {
        let mut object_806 = object.key("Parameters").start_object();
        for (key_807, value_808) in var_805 {
            {
                object_806.key(key_807).string(value_808);
            }
        }
        object_806.finish();
    }
    if let Some(var_809) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_809, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_value_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionValueList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_810) = &input.values {
        let mut array_811 = object.key("Values").start_array();
        for item_812 in var_810 {
            {
                array_811.value().string(item_812);
            }
        }
        array_811.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_update_partition_request_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchUpdatePartitionRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_813) = &input.partition_value_list {
        let mut array_814 = object.key("PartitionValueList").start_array();
        for item_815 in var_813 {
            {
                array_814.value().string(item_815);
            }
        }
        array_814.finish();
    }
    if let Some(var_816) = &input.partition_input {
        let mut object_817 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_817, var_816)?;
        object_817.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_818) = &input.classification {
        object.key("Classification").string(var_818);
    }
    if let Some(var_819) = &input.name {
        object.key("Name").string(var_819);
    }
    if let Some(var_820) = &input.grok_pattern {
        object.key("GrokPattern").string(var_820);
    }
    if let Some(var_821) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_821);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_822) = &input.classification {
        object.key("Classification").string(var_822);
    }
    if let Some(var_823) = &input.name {
        object.key("Name").string(var_823);
    }
    if let Some(var_824) = &input.row_tag {
        object.key("RowTag").string(var_824);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_825) = &input.name {
        object.key("Name").string(var_825);
    }
    if let Some(var_826) = &input.json_path {
        object.key("JsonPath").string(var_826);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_827) = &input.name {
        object.key("Name").string(var_827);
    }
    if let Some(var_828) = &input.delimiter {
        object.key("Delimiter").string(var_828);
    }
    if let Some(var_829) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_829);
    }
    if let Some(var_830) = &input.contains_header {
        object.key("ContainsHeader").string(var_830.as_str());
    }
    if let Some(var_831) = &input.header {
        let mut array_832 = object.key("Header").start_array();
        for item_833 in var_831 {
            {
                array_832.value().string(item_833);
            }
        }
        array_832.finish();
    }
    if let Some(var_834) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_834);
    }
    if let Some(var_835) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_835);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_836) = &input.name {
        object.key("Name").string(var_836);
    }
    if let Some(var_837) = &input.description {
        object.key("Description").string(var_837);
    }
    if let Some(var_838) = &input.connection_type {
        object.key("ConnectionType").string(var_838.as_str());
    }
    if let Some(var_839) = &input.match_criteria {
        let mut array_840 = object.key("MatchCriteria").start_array();
        for item_841 in var_839 {
            {
                array_840.value().string(item_841);
            }
        }
        array_840.finish();
    }
    if let Some(var_842) = &input.connection_properties {
        let mut object_843 = object.key("ConnectionProperties").start_object();
        for (key_844, value_845) in var_842 {
            {
                object_843.key(key_844.as_str()).string(value_845);
            }
        }
        object_843.finish();
    }
    if let Some(var_846) = &input.physical_connection_requirements {
        let mut object_847 = object.key("PhysicalConnectionRequirements").start_object();
        crate::json_ser::serialize_structure_crate_model_physical_connection_requirements(
            &mut object_847,
            var_846,
        )?;
        object_847.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_crawler_targets(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CrawlerTargets,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_848) = &input.s3_targets {
        let mut array_849 = object.key("S3Targets").start_array();
        for item_850 in var_848 {
            {
                let mut object_851 = array_849.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_target(
                    &mut object_851,
                    item_850,
                )?;
                object_851.finish();
            }
        }
        array_849.finish();
    }
    if let Some(var_852) = &input.jdbc_targets {
        let mut array_853 = object.key("JdbcTargets").start_array();
        for item_854 in var_852 {
            {
                let mut object_855 = array_853.value().start_object();
                crate::json_ser::serialize_structure_crate_model_jdbc_target(
                    &mut object_855,
                    item_854,
                )?;
                object_855.finish();
            }
        }
        array_853.finish();
    }
    if let Some(var_856) = &input.mongo_db_targets {
        let mut array_857 = object.key("MongoDBTargets").start_array();
        for item_858 in var_856 {
            {
                let mut object_859 = array_857.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mongo_db_target(
                    &mut object_859,
                    item_858,
                )?;
                object_859.finish();
            }
        }
        array_857.finish();
    }
    if let Some(var_860) = &input.dynamo_db_targets {
        let mut array_861 = object.key("DynamoDBTargets").start_array();
        for item_862 in var_860 {
            {
                let mut object_863 = array_861.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dynamo_db_target(
                    &mut object_863,
                    item_862,
                )?;
                object_863.finish();
            }
        }
        array_861.finish();
    }
    if let Some(var_864) = &input.catalog_targets {
        let mut array_865 = object.key("CatalogTargets").start_array();
        for item_866 in var_864 {
            {
                let mut object_867 = array_865.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_target(
                    &mut object_867,
                    item_866,
                )?;
                object_867.finish();
            }
        }
        array_865.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_change_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaChangePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_868) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_868.as_str());
    }
    if let Some(var_869) = &input.delete_behavior {
        object.key("DeleteBehavior").string(var_869.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recrawl_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecrawlPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_870) = &input.recrawl_behavior {
        object.key("RecrawlBehavior").string(var_870.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lineage_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LineageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_871) = &input.crawler_lineage_settings {
        object
            .key("CrawlerLineageSettings")
            .string(var_871.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_872) = &input.name {
        object.key("Name").string(var_872);
    }
    if let Some(var_873) = &input.description {
        object.key("Description").string(var_873);
    }
    if let Some(var_874) = &input.location_uri {
        object.key("LocationUri").string(var_874);
    }
    if let Some(var_875) = &input.parameters {
        let mut object_876 = object.key("Parameters").start_object();
        for (key_877, value_878) in var_875 {
            {
                object_876.key(key_877).string(value_878);
            }
        }
        object_876.finish();
    }
    if let Some(var_879) = &input.create_table_default_permissions {
        let mut array_880 = object.key("CreateTableDefaultPermissions").start_array();
        for item_881 in var_879 {
            {
                let mut object_882 = array_880.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal_permissions(
                    &mut object_882,
                    item_881,
                )?;
                object_882.finish();
            }
        }
        array_880.finish();
    }
    if let Some(var_883) = &input.target_database {
        let mut object_884 = object.key("TargetDatabase").start_object();
        crate::json_ser::serialize_structure_crate_model_database_identifier(
            &mut object_884,
            var_883,
        )?;
        object_884.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execution_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_concurrent_runs != 0 {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_concurrent_runs).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_command(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobCommand,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_885) = &input.name {
        object.key("Name").string(var_885);
    }
    if let Some(var_886) = &input.script_location {
        object.key("ScriptLocation").string(var_886);
    }
    if let Some(var_887) = &input.python_version {
        object.key("PythonVersion").string(var_887);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connections_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionsList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_888) = &input.connections {
        let mut array_889 = object.key("Connections").start_array();
        for item_890 in var_888 {
            {
                array_889.value().string(item_890);
            }
        }
        array_889.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_891) = &input.notify_delay_after {
        object.key("NotifyDelayAfter").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_891).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_892) = &input.database_name {
        object.key("DatabaseName").string(var_892);
    }
    if let Some(var_893) = &input.table_name {
        object.key("TableName").string(var_893);
    }
    if let Some(var_894) = &input.catalog_id {
        object.key("CatalogId").string(var_894);
    }
    if let Some(var_895) = &input.connection_name {
        object.key("ConnectionName").string(var_895);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_896) = &input.transform_type {
        object.key("TransformType").string(var_896.as_str());
    }
    if let Some(var_897) = &input.find_matches_parameters {
        let mut object_898 = object.key("FindMatchesParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_find_matches_parameters(
            &mut object_898,
            var_897,
        )?;
        object_898.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_899) = &input.ml_user_data_encryption {
        let mut object_900 = object.key("MlUserDataEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_ml_user_data_encryption(
            &mut object_900,
            var_899,
        )?;
        object_900.finish();
    }
    if let Some(var_901) = &input.task_run_security_configuration_name {
        object
            .key("TaskRunSecurityConfigurationName")
            .string(var_901);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_902) = &input.keys {
        let mut array_903 = object.key("Keys").start_array();
        for item_904 in var_902 {
            {
                array_903.value().string(item_904);
            }
        }
        array_903.finish();
    }
    if let Some(var_905) = &input.index_name {
        object.key("IndexName").string(var_905);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registry_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistryId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_906) = &input.registry_name {
        object.key("RegistryName").string(var_906);
    }
    if let Some(var_907) = &input.registry_arn {
        object.key("RegistryArn").string(var_907);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_908) = &input.id {
        object.key("Id").string(var_908);
    }
    if let Some(var_909) = &input.node_type {
        object.key("NodeType").string(var_909);
    }
    if let Some(var_910) = &input.args {
        let mut array_911 = object.key("Args").start_array();
        for item_912 in var_910 {
            {
                let mut object_913 = array_911.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_913,
                    item_912,
                )?;
                object_913.finish();
            }
        }
        array_911.finish();
    }
    if input.line_number != 0 {
        object.key("LineNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.line_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_edge(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenEdge,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_914) = &input.source {
        object.key("Source").string(var_914);
    }
    if let Some(var_915) = &input.target {
        object.key("Target").string(var_915);
    }
    if let Some(var_916) = &input.target_parameter {
        object.key("TargetParameter").string(var_916);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_917) = &input.s3_encryption {
        let mut array_918 = object.key("S3Encryption").start_array();
        for item_919 in var_917 {
            {
                let mut object_920 = array_918.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_encryption(
                    &mut object_920,
                    item_919,
                )?;
                object_920.finish();
            }
        }
        array_918.finish();
    }
    if let Some(var_921) = &input.cloud_watch_encryption {
        let mut object_922 = object.key("CloudWatchEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_encryption(
            &mut object_922,
            var_921,
        )?;
        object_922.finish();
    }
    if let Some(var_923) = &input.job_bookmarks_encryption {
        let mut object_924 = object.key("JobBookmarksEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_job_bookmarks_encryption(
            &mut object_924,
            var_923,
        )?;
        object_924.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_925) = &input.name {
        object.key("Name").string(var_925);
    }
    if let Some(var_926) = &input.description {
        object.key("Description").string(var_926);
    }
    if let Some(var_927) = &input.owner {
        object.key("Owner").string(var_927);
    }
    if let Some(var_928) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_928, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_929) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_929, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if input.retention != 0 {
        object.key("Retention").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention).into()),
        );
    }
    if let Some(var_930) = &input.storage_descriptor {
        let mut object_931 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_931,
            var_930,
        )?;
        object_931.finish();
    }
    if let Some(var_932) = &input.partition_keys {
        let mut array_933 = object.key("PartitionKeys").start_array();
        for item_934 in var_932 {
            {
                let mut object_935 = array_933.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(&mut object_935, item_934)?;
                object_935.finish();
            }
        }
        array_933.finish();
    }
    if let Some(var_936) = &input.view_original_text {
        object.key("ViewOriginalText").string(var_936);
    }
    if let Some(var_937) = &input.view_expanded_text {
        object.key("ViewExpandedText").string(var_937);
    }
    if let Some(var_938) = &input.table_type {
        object.key("TableType").string(var_938);
    }
    if let Some(var_939) = &input.parameters {
        let mut object_940 = object.key("Parameters").start_object();
        for (key_941, value_942) in var_939 {
            {
                object_940.key(key_941).string(value_942);
            }
        }
        object_940.finish();
    }
    if let Some(var_943) = &input.target_table {
        let mut object_944 = object.key("TargetTable").start_object();
        crate::json_ser::serialize_structure_crate_model_table_identifier(
            &mut object_944,
            var_943,
        )?;
        object_944.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Predicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_945) = &input.logical {
        object.key("Logical").string(var_945.as_str());
    }
    if let Some(var_946) = &input.conditions {
        let mut array_947 = object.key("Conditions").start_array();
        for item_948 in var_946 {
            {
                let mut object_949 = array_947.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_949,
                    item_948,
                )?;
                object_949.finish();
            }
        }
        array_947.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_950) = &input.job_name {
        object.key("JobName").string(var_950);
    }
    if let Some(var_951) = &input.arguments {
        let mut object_952 = object.key("Arguments").start_object();
        for (key_953, value_954) in var_951 {
            {
                object_952.key(key_953).string(value_954);
            }
        }
        object_952.finish();
    }
    if let Some(var_955) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_955).into()),
        );
    }
    if let Some(var_956) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_956);
    }
    if let Some(var_957) = &input.notification_property {
        let mut object_958 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_958,
            var_957,
        )?;
        object_958.finish();
    }
    if let Some(var_959) = &input.crawler_name {
        object.key("CrawlerName").string(var_959);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event_batching_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventBatchingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.batch_size).into()),
        );
    }
    if let Some(var_960) = &input.batch_window {
        object.key("BatchWindow").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_960).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_961) = &input.function_name {
        object.key("FunctionName").string(var_961);
    }
    if let Some(var_962) = &input.class_name {
        object.key("ClassName").string(var_962);
    }
    if let Some(var_963) = &input.owner_name {
        object.key("OwnerName").string(var_963);
    }
    if let Some(var_964) = &input.owner_type {
        object.key("OwnerType").string(var_964.as_str());
    }
    if let Some(var_965) = &input.resource_uris {
        let mut array_966 = object.key("ResourceUris").start_array();
        for item_967 in var_965 {
            {
                let mut object_968 = array_966.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_uri(
                    &mut object_968,
                    item_967,
                )?;
                object_968.finish();
            }
        }
        array_966.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_969) = &input.schema_arn {
        object.key("SchemaArn").string(var_969);
    }
    if let Some(var_970) = &input.schema_name {
        object.key("SchemaName").string(var_970);
    }
    if let Some(var_971) = &input.registry_name {
        object.key("RegistryName").string(var_971);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_get_connections_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GetConnectionsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_972) = &input.match_criteria {
        let mut array_973 = object.key("MatchCriteria").start_array();
        for item_974 in var_972 {
            {
                array_973.value().string(item_974);
            }
        }
        array_973.finish();
    }
    if let Some(var_975) = &input.connection_type {
        object.key("ConnectionType").string(var_975.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_976) = &input.database_name {
        object.key("DatabaseName").string(var_976);
    }
    if let Some(var_977) = &input.table_name {
        object.key("TableName").string(var_977);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_978) = &input.jdbc {
        let mut array_979 = object.key("Jdbc").start_array();
        for item_980 in var_978 {
            {
                let mut object_981 = array_979.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_981,
                    item_980,
                )?;
                object_981.finish();
            }
        }
        array_979.finish();
    }
    if let Some(var_982) = &input.s3 {
        let mut array_983 = object.key("S3").start_array();
        for item_984 in var_982 {
            {
                let mut object_985 = array_983.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_985,
                    item_984,
                )?;
                object_985.finish();
            }
        }
        array_983.finish();
    }
    if let Some(var_986) = &input.dynamo_db {
        let mut array_987 = object.key("DynamoDB").start_array();
        for item_988 in var_986 {
            {
                let mut object_989 = array_987.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_989,
                    item_988,
                )?;
                object_989.finish();
            }
        }
        array_987.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_990) = &input.task_run_type {
        object.key("TaskRunType").string(var_990.as_str());
    }
    if let Some(var_991) = &input.status {
        object.key("Status").string(var_991.as_str());
    }
    if let Some(var_992) = &input.started_before {
        object
            .key("StartedBefore")
            .date_time(var_992, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_993) = &input.started_after {
        object
            .key("StartedAfter")
            .date_time(var_993, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_994) = &input.column {
        object.key("Column").string(var_994.as_str());
    }
    if let Some(var_995) = &input.sort_direction {
        object.key("SortDirection").string(var_995.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_996) = &input.name {
        object.key("Name").string(var_996);
    }
    if let Some(var_997) = &input.transform_type {
        object.key("TransformType").string(var_997.as_str());
    }
    if let Some(var_998) = &input.status {
        object.key("Status").string(var_998.as_str());
    }
    if let Some(var_999) = &input.glue_version {
        object.key("GlueVersion").string(var_999);
    }
    if let Some(var_1000) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1000, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1001) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1001, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1002) = &input.last_modified_before {
        object
            .key("LastModifiedBefore")
            .date_time(var_1002, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1003) = &input.last_modified_after {
        object
            .key("LastModifiedAfter")
            .date_time(var_1003, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1004) = &input.schema {
        let mut array_1005 = object.key("Schema").start_array();
        for item_1006 in var_1004 {
            {
                let mut object_1007 = array_1005.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_column(
                    &mut object_1007,
                    item_1006,
                )?;
                object_1007.finish();
            }
        }
        array_1005.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1008) = &input.column {
        object.key("Column").string(var_1008.as_str());
    }
    if let Some(var_1009) = &input.sort_direction {
        object.key("SortDirection").string(var_1009.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_segment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Segment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("SegmentNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_number).into()),
        );
    }
    {
        object.key("TotalSegments").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_segments).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MappingEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1010) = &input.source_table {
        object.key("SourceTable").string(var_1010);
    }
    if let Some(var_1011) = &input.source_path {
        object.key("SourcePath").string(var_1011);
    }
    if let Some(var_1012) = &input.source_type {
        object.key("SourceType").string(var_1012);
    }
    if let Some(var_1013) = &input.target_table {
        object.key("TargetTable").string(var_1013);
    }
    if let Some(var_1014) = &input.target_path {
        object.key("TargetPath").string(var_1014);
    }
    if let Some(var_1015) = &input.target_type {
        object.key("TargetType").string(var_1015);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_version_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaVersionNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.latest_version {
        object.key("LatestVersion").boolean(input.latest_version);
    }
    if input.version_number != 0 {
        object.key("VersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.version_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_encryption_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogEncryptionSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1016) = &input.encryption_at_rest {
        let mut object_1017 = object.key("EncryptionAtRest").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_at_rest(
            &mut object_1017,
            var_1016,
        )?;
        object_1017.finish();
    }
    if let Some(var_1018) = &input.connection_password_encryption {
        let mut object_1019 = object.key("ConnectionPasswordEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_password_encryption(
            &mut object_1019,
            var_1018,
        )?;
        object_1019.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_key_value_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataKeyValuePair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1020) = &input.metadata_key {
        object.key("MetadataKey").string(var_1020);
    }
    if let Some(var_1021) = &input.metadata_value {
        object.key("MetadataValue").string(var_1021);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1022) = &input.key {
        object.key("Key").string(var_1022);
    }
    if let Some(var_1023) = &input.value {
        object.key("Value").string(var_1023);
    }
    if let Some(var_1024) = &input.comparator {
        object.key("Comparator").string(var_1024.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criterion(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1025) = &input.field_name {
        object.key("FieldName").string(var_1025);
    }
    if let Some(var_1026) = &input.sort {
        object.key("Sort").string(var_1026.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1027) = &input.name {
        object.key("Name").string(var_1027);
    }
    if let Some(var_1028) = &input.classification {
        object.key("Classification").string(var_1028);
    }
    if let Some(var_1029) = &input.grok_pattern {
        object.key("GrokPattern").string(var_1029);
    }
    if let Some(var_1030) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_1030);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1031) = &input.name {
        object.key("Name").string(var_1031);
    }
    if let Some(var_1032) = &input.classification {
        object.key("Classification").string(var_1032);
    }
    if let Some(var_1033) = &input.row_tag {
        object.key("RowTag").string(var_1033);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1034) = &input.name {
        object.key("Name").string(var_1034);
    }
    if let Some(var_1035) = &input.json_path {
        object.key("JsonPath").string(var_1035);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1036) = &input.name {
        object.key("Name").string(var_1036);
    }
    if let Some(var_1037) = &input.delimiter {
        object.key("Delimiter").string(var_1037);
    }
    if let Some(var_1038) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_1038);
    }
    if let Some(var_1039) = &input.contains_header {
        object.key("ContainsHeader").string(var_1039.as_str());
    }
    if let Some(var_1040) = &input.header {
        let mut array_1041 = object.key("Header").start_array();
        for item_1042 in var_1040 {
            {
                array_1041.value().string(item_1042);
            }
        }
        array_1041.finish();
    }
    if let Some(var_1043) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_1043);
    }
    if let Some(var_1044) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_1044);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatistics,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1045) = &input.column_name {
        object.key("ColumnName").string(var_1045);
    }
    if let Some(var_1046) = &input.column_type {
        object.key("ColumnType").string(var_1046);
    }
    if let Some(var_1047) = &input.analyzed_time {
        object
            .key("AnalyzedTime")
            .date_time(var_1047, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1048) = &input.statistics_data {
        let mut object_1049 = object.key("StatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_column_statistics_data(
            &mut object_1049,
            var_1048,
        )?;
        object_1049.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dev_endpoint_custom_libraries(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DevEndpointCustomLibraries,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1050) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_1050);
    }
    if let Some(var_1051) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_1051);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1052) = &input.description {
        object.key("Description").string(var_1052);
    }
    if let Some(var_1053) = &input.log_uri {
        object.key("LogUri").string(var_1053);
    }
    if let Some(var_1054) = &input.role {
        object.key("Role").string(var_1054);
    }
    if let Some(var_1055) = &input.execution_property {
        let mut object_1056 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_1056,
            var_1055,
        )?;
        object_1056.finish();
    }
    if let Some(var_1057) = &input.command {
        let mut object_1058 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_1058, var_1057)?;
        object_1058.finish();
    }
    if let Some(var_1059) = &input.default_arguments {
        let mut object_1060 = object.key("DefaultArguments").start_object();
        for (key_1061, value_1062) in var_1059 {
            {
                object_1060.key(key_1061).string(value_1062);
            }
        }
        object_1060.finish();
    }
    if let Some(var_1063) = &input.non_overridable_arguments {
        let mut object_1064 = object.key("NonOverridableArguments").start_object();
        for (key_1065, value_1066) in var_1063 {
            {
                object_1064.key(key_1065).string(value_1066);
            }
        }
        object_1064.finish();
    }
    if let Some(var_1067) = &input.connections {
        let mut object_1068 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_1068,
            var_1067,
        )?;
        object_1068.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_1069) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1069).into()),
        );
    }
    if let Some(var_1070) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1070).into()),
        );
    }
    if let Some(var_1071) = &input.worker_type {
        object.key("WorkerType").string(var_1071.as_str());
    }
    if let Some(var_1072) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1072).into()),
        );
    }
    if let Some(var_1073) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_1073);
    }
    if let Some(var_1074) = &input.notification_property {
        let mut object_1075 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_1075,
            var_1074,
        )?;
        object_1075.finish();
    }
    if let Some(var_1076) = &input.glue_version {
        object.key("GlueVersion").string(var_1076);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1077) = &input.name {
        object.key("Name").string(var_1077);
    }
    if let Some(var_1078) = &input.description {
        object.key("Description").string(var_1078);
    }
    if let Some(var_1079) = &input.schedule {
        object.key("Schedule").string(var_1079);
    }
    if let Some(var_1080) = &input.actions {
        let mut array_1081 = object.key("Actions").start_array();
        for item_1082 in var_1080 {
            {
                let mut object_1083 = array_1081.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(
                    &mut object_1083,
                    item_1082,
                )?;
                object_1083.finish();
            }
        }
        array_1081.finish();
    }
    if let Some(var_1084) = &input.predicate {
        let mut object_1085 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_1085, var_1084)?;
        object_1085.finish();
    }
    if let Some(var_1086) = &input.event_batching_condition {
        let mut object_1087 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_1087,
            var_1086,
        )?;
        object_1087.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1088) = &input.columns {
        let mut array_1089 = object.key("Columns").start_array();
        for item_1090 in var_1088 {
            {
                let mut object_1091 = array_1089.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(
                    &mut object_1091,
                    item_1090,
                )?;
                object_1091.finish();
            }
        }
        array_1089.finish();
    }
    if let Some(var_1092) = &input.location {
        object.key("Location").string(var_1092);
    }
    if let Some(var_1093) = &input.input_format {
        object.key("InputFormat").string(var_1093);
    }
    if let Some(var_1094) = &input.output_format {
        object.key("OutputFormat").string(var_1094);
    }
    if input.compressed {
        object.key("Compressed").boolean(input.compressed);
    }
    if input.number_of_buckets != 0 {
        object.key("NumberOfBuckets").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_buckets).into()),
        );
    }
    if let Some(var_1095) = &input.serde_info {
        let mut object_1096 = object.key("SerdeInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_ser_de_info(&mut object_1096, var_1095)?;
        object_1096.finish();
    }
    if let Some(var_1097) = &input.bucket_columns {
        let mut array_1098 = object.key("BucketColumns").start_array();
        for item_1099 in var_1097 {
            {
                array_1098.value().string(item_1099);
            }
        }
        array_1098.finish();
    }
    if let Some(var_1100) = &input.sort_columns {
        let mut array_1101 = object.key("SortColumns").start_array();
        for item_1102 in var_1100 {
            {
                let mut object_1103 = array_1101.value().start_object();
                crate::json_ser::serialize_structure_crate_model_order(
                    &mut object_1103,
                    item_1102,
                )?;
                object_1103.finish();
            }
        }
        array_1101.finish();
    }
    if let Some(var_1104) = &input.parameters {
        let mut object_1105 = object.key("Parameters").start_object();
        for (key_1106, value_1107) in var_1104 {
            {
                object_1105.key(key_1106).string(value_1107);
            }
        }
        object_1105.finish();
    }
    if let Some(var_1108) = &input.skewed_info {
        let mut object_1109 = object.key("SkewedInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_skewed_info(&mut object_1109, var_1108)?;
        object_1109.finish();
    }
    if input.stored_as_sub_directories {
        object
            .key("StoredAsSubDirectories")
            .boolean(input.stored_as_sub_directories);
    }
    if let Some(var_1110) = &input.schema_reference {
        let mut object_1111 = object.key("SchemaReference").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_reference(
            &mut object_1111,
            var_1110,
        )?;
        object_1111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_physical_connection_requirements(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalConnectionRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1112) = &input.subnet_id {
        object.key("SubnetId").string(var_1112);
    }
    if let Some(var_1113) = &input.security_group_id_list {
        let mut array_1114 = object.key("SecurityGroupIdList").start_array();
        for item_1115 in var_1113 {
            {
                array_1114.value().string(item_1115);
            }
        }
        array_1114.finish();
    }
    if let Some(var_1116) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1116);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Target,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1117) = &input.path {
        object.key("Path").string(var_1117);
    }
    if let Some(var_1118) = &input.exclusions {
        let mut array_1119 = object.key("Exclusions").start_array();
        for item_1120 in var_1118 {
            {
                array_1119.value().string(item_1120);
            }
        }
        array_1119.finish();
    }
    if let Some(var_1121) = &input.connection_name {
        object.key("ConnectionName").string(var_1121);
    }
    if let Some(var_1122) = &input.sample_size {
        object.key("SampleSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1122).into()),
        );
    }
    if let Some(var_1123) = &input.event_queue_arn {
        object.key("EventQueueArn").string(var_1123);
    }
    if let Some(var_1124) = &input.dlq_event_queue_arn {
        object.key("DlqEventQueueArn").string(var_1124);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1125) = &input.connection_name {
        object.key("ConnectionName").string(var_1125);
    }
    if let Some(var_1126) = &input.path {
        object.key("Path").string(var_1126);
    }
    if let Some(var_1127) = &input.exclusions {
        let mut array_1128 = object.key("Exclusions").start_array();
        for item_1129 in var_1127 {
            {
                array_1128.value().string(item_1129);
            }
        }
        array_1128.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mongo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MongoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1130) = &input.connection_name {
        object.key("ConnectionName").string(var_1130);
    }
    if let Some(var_1131) = &input.path {
        object.key("Path").string(var_1131);
    }
    if let Some(var_1132) = &input.scan_all {
        object.key("ScanAll").boolean(*var_1132);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1133) = &input.path {
        object.key("Path").string(var_1133);
    }
    if let Some(var_1134) = &input.scan_all {
        object.key("scanAll").boolean(*var_1134);
    }
    if let Some(var_1135) = &input.scan_rate {
        object.key("scanRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1135).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1136) = &input.database_name {
        object.key("DatabaseName").string(var_1136);
    }
    if let Some(var_1137) = &input.tables {
        let mut array_1138 = object.key("Tables").start_array();
        for item_1139 in var_1137 {
            {
                array_1138.value().string(item_1139);
            }
        }
        array_1138.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal_permissions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrincipalPermissions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1140) = &input.principal {
        let mut object_1141 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_crate_model_data_lake_principal(
            &mut object_1141,
            var_1140,
        )?;
        object_1141.finish();
    }
    if let Some(var_1142) = &input.permissions {
        let mut array_1143 = object.key("Permissions").start_array();
        for item_1144 in var_1142 {
            {
                array_1143.value().string(item_1144.as_str());
            }
        }
        array_1143.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1145) = &input.catalog_id {
        object.key("CatalogId").string(var_1145);
    }
    if let Some(var_1146) = &input.database_name {
        object.key("DatabaseName").string(var_1146);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_find_matches_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindMatchesParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1147) = &input.primary_key_column_name {
        object.key("PrimaryKeyColumnName").string(var_1147);
    }
    if let Some(var_1148) = &input.precision_recall_tradeoff {
        object.key("PrecisionRecallTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1148).into()),
        );
    }
    if let Some(var_1149) = &input.accuracy_cost_tradeoff {
        object.key("AccuracyCostTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1149).into()),
        );
    }
    if let Some(var_1150) = &input.enforce_provided_labels {
        object.key("EnforceProvidedLabels").boolean(*var_1150);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ml_user_data_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MlUserDataEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1151) = &input.ml_user_data_encryption_mode {
        object
            .key("MlUserDataEncryptionMode")
            .string(var_1151.as_str());
    }
    if let Some(var_1152) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1152);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node_arg(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNodeArg,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1153) = &input.name {
        object.key("Name").string(var_1153);
    }
    if let Some(var_1154) = &input.value {
        object.key("Value").string(var_1154);
    }
    if input.param {
        object.key("Param").boolean(input.param);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Encryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1155) = &input.s3_encryption_mode {
        object.key("S3EncryptionMode").string(var_1155.as_str());
    }
    if let Some(var_1156) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1156);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1157) = &input.cloud_watch_encryption_mode {
        object
            .key("CloudWatchEncryptionMode")
            .string(var_1157.as_str());
    }
    if let Some(var_1158) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1158);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_bookmarks_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobBookmarksEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1159) = &input.job_bookmarks_encryption_mode {
        object
            .key("JobBookmarksEncryptionMode")
            .string(var_1159.as_str());
    }
    if let Some(var_1160) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1160);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Column,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1161) = &input.name {
        object.key("Name").string(var_1161);
    }
    if let Some(var_1162) = &input.r#type {
        object.key("Type").string(var_1162);
    }
    if let Some(var_1163) = &input.comment {
        object.key("Comment").string(var_1163);
    }
    if let Some(var_1164) = &input.parameters {
        let mut object_1165 = object.key("Parameters").start_object();
        for (key_1166, value_1167) in var_1164 {
            {
                object_1165.key(key_1166).string(value_1167);
            }
        }
        object_1165.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1168) = &input.catalog_id {
        object.key("CatalogId").string(var_1168);
    }
    if let Some(var_1169) = &input.database_name {
        object.key("DatabaseName").string(var_1169);
    }
    if let Some(var_1170) = &input.name {
        object.key("Name").string(var_1170);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1171) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1171.as_str());
    }
    if let Some(var_1172) = &input.job_name {
        object.key("JobName").string(var_1172);
    }
    if let Some(var_1173) = &input.state {
        object.key("State").string(var_1173.as_str());
    }
    if let Some(var_1174) = &input.crawler_name {
        object.key("CrawlerName").string(var_1174);
    }
    if let Some(var_1175) = &input.crawl_state {
        object.key("CrawlState").string(var_1175.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_uri(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceUri,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1176) = &input.resource_type {
        object.key("ResourceType").string(var_1176.as_str());
    }
    if let Some(var_1177) = &input.uri {
        object.key("Uri").string(var_1177);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1178) = &input.name {
        object.key("Name").string(var_1178);
    }
    if let Some(var_1179) = &input.data_type {
        object.key("DataType").string(var_1179);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_at_rest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionAtRest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1180) = &input.catalog_encryption_mode {
        object
            .key("CatalogEncryptionMode")
            .string(var_1180.as_str());
    }
    if let Some(var_1181) = &input.sse_aws_kms_key_id {
        object.key("SseAwsKmsKeyId").string(var_1181);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_password_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionPasswordEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("ReturnConnectionPasswordEncrypted")
            .boolean(input.return_connection_password_encrypted);
    }
    if let Some(var_1182) = &input.aws_kms_key_id {
        object.key("AwsKmsKeyId").string(var_1182);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1183) = &input.r#type {
        object.key("Type").string(var_1183.as_str());
    }
    if let Some(var_1184) = &input.boolean_column_statistics_data {
        let mut object_1185 = object.key("BooleanColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_boolean_column_statistics_data(
            &mut object_1185,
            var_1184,
        )?;
        object_1185.finish();
    }
    if let Some(var_1186) = &input.date_column_statistics_data {
        let mut object_1187 = object.key("DateColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_date_column_statistics_data(
            &mut object_1187,
            var_1186,
        )?;
        object_1187.finish();
    }
    if let Some(var_1188) = &input.decimal_column_statistics_data {
        let mut object_1189 = object.key("DecimalColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_column_statistics_data(
            &mut object_1189,
            var_1188,
        )?;
        object_1189.finish();
    }
    if let Some(var_1190) = &input.double_column_statistics_data {
        let mut object_1191 = object.key("DoubleColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_double_column_statistics_data(
            &mut object_1191,
            var_1190,
        )?;
        object_1191.finish();
    }
    if let Some(var_1192) = &input.long_column_statistics_data {
        let mut object_1193 = object.key("LongColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_long_column_statistics_data(
            &mut object_1193,
            var_1192,
        )?;
        object_1193.finish();
    }
    if let Some(var_1194) = &input.string_column_statistics_data {
        let mut object_1195 = object.key("StringColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_string_column_statistics_data(
            &mut object_1195,
            var_1194,
        )?;
        object_1195.finish();
    }
    if let Some(var_1196) = &input.binary_column_statistics_data {
        let mut object_1197 = object.key("BinaryColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_binary_column_statistics_data(
            &mut object_1197,
            var_1196,
        )?;
        object_1197.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ser_de_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SerDeInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1198) = &input.name {
        object.key("Name").string(var_1198);
    }
    if let Some(var_1199) = &input.serialization_library {
        object.key("SerializationLibrary").string(var_1199);
    }
    if let Some(var_1200) = &input.parameters {
        let mut object_1201 = object.key("Parameters").start_object();
        for (key_1202, value_1203) in var_1200 {
            {
                object_1201.key(key_1202).string(value_1203);
            }
        }
        object_1201.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_order(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Order,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1204) = &input.column {
        object.key("Column").string(var_1204);
    }
    {
        object.key("SortOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sort_order).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_skewed_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SkewedInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1205) = &input.skewed_column_names {
        let mut array_1206 = object.key("SkewedColumnNames").start_array();
        for item_1207 in var_1205 {
            {
                array_1206.value().string(item_1207);
            }
        }
        array_1206.finish();
    }
    if let Some(var_1208) = &input.skewed_column_values {
        let mut array_1209 = object.key("SkewedColumnValues").start_array();
        for item_1210 in var_1208 {
            {
                array_1209.value().string(item_1210);
            }
        }
        array_1209.finish();
    }
    if let Some(var_1211) = &input.skewed_column_value_location_maps {
        let mut object_1212 = object.key("SkewedColumnValueLocationMaps").start_object();
        for (key_1213, value_1214) in var_1211 {
            {
                object_1212.key(key_1213).string(value_1214);
            }
        }
        object_1212.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1215) = &input.schema_id {
        let mut object_1216 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_1216, var_1215)?;
        object_1216.finish();
    }
    if let Some(var_1217) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_1217);
    }
    if let Some(var_1218) = &input.schema_version_number {
        object.key("SchemaVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1218).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_lake_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataLakePrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1219) = &input.data_lake_principal_identifier {
        object.key("DataLakePrincipalIdentifier").string(var_1219);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_boolean_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BooleanColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("NumberOfTrues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_trues).into()),
        );
    }
    {
        object.key("NumberOfFalses").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_falses).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1220) = &input.minimum_value {
        object
            .key("MinimumValue")
            .date_time(var_1220, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1221) = &input.maximum_value {
        object
            .key("MaximumValue")
            .date_time(var_1221, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1222) = &input.minimum_value {
        let mut object_1223 = object.key("MinimumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_1223,
            var_1222,
        )?;
        object_1223.finish();
    }
    if let Some(var_1224) = &input.maximum_value {
        let mut object_1225 = object.key("MaximumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_1225,
            var_1224,
        )?;
        object_1225.finish();
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_double_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DoubleColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0.0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0.0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_long_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LongColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_binary_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BinaryColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1226) = &input.unscaled_value {
        object
            .key("UnscaledValue")
            .string_unchecked(&aws_smithy_types::base64::encode(var_1226));
    }
    {
        object.key("Scale").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.scale).into()),
        );
    }
    Ok(())
}
