// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1);
    }
    if let Some(var_2) = &input.database_name {
        object.key("DatabaseName").string(var_2);
    }
    if let Some(var_3) = &input.table_name {
        object.key("TableName").string(var_3);
    }
    if let Some(var_4) = &input.partition_input_list {
        let mut array_5 = object.key("PartitionInputList").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_input(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.catalog_id {
        object.key("CatalogId").string(var_8);
    }
    if let Some(var_9) = &input.connection_name_list {
        let mut array_10 = object.key("ConnectionNameList").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11);
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.catalog_id {
        object.key("CatalogId").string(var_12);
    }
    if let Some(var_13) = &input.database_name {
        object.key("DatabaseName").string(var_13);
    }
    if let Some(var_14) = &input.table_name {
        object.key("TableName").string(var_14);
    }
    if let Some(var_15) = &input.partitions_to_delete {
        let mut array_16 = object.key("PartitionsToDelete").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.catalog_id {
        object.key("CatalogId").string(var_19);
    }
    if let Some(var_20) = &input.database_name {
        object.key("DatabaseName").string(var_20);
    }
    if let Some(var_21) = &input.tables_to_delete {
        let mut array_22 = object.key("TablesToDelete").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23);
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.transaction_id {
        object.key("TransactionId").string(var_24);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.catalog_id {
        object.key("CatalogId").string(var_25);
    }
    if let Some(var_26) = &input.database_name {
        object.key("DatabaseName").string(var_26);
    }
    if let Some(var_27) = &input.table_name {
        object.key("TableName").string(var_27);
    }
    if let Some(var_28) = &input.version_ids {
        let mut array_29 = object.key("VersionIds").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30);
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.names {
        let mut array_32 = object.key("Names").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33);
            }
        }
        array_32.finish();
    }
    if let Some(var_34) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_34);
    }
    if let Some(var_35) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_35);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.crawler_names {
        let mut array_37 = object.key("CrawlerNames").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38);
            }
        }
        array_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.dev_endpoint_names {
        let mut array_40 = object.key("DevEndpointNames").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41);
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.job_names {
        let mut array_43 = object.key("JobNames").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44);
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.catalog_id {
        object.key("CatalogId").string(var_45);
    }
    if let Some(var_46) = &input.database_name {
        object.key("DatabaseName").string(var_46);
    }
    if let Some(var_47) = &input.table_name {
        object.key("TableName").string(var_47);
    }
    if let Some(var_48) = &input.partitions_to_get {
        let mut array_49 = object.key("PartitionsToGet").start_array();
        for item_50 in var_48 {
            {
                let mut object_51 = array_49.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_51,
                    item_50,
                )?;
                object_51.finish();
            }
        }
        array_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.trigger_names {
        let mut array_53 = object.key("TriggerNames").start_array();
        for item_54 in var_52 {
            {
                array_53.value().string(item_54);
            }
        }
        array_53.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.names {
        let mut array_56 = object.key("Names").start_array();
        for item_57 in var_55 {
            {
                array_56.value().string(item_57);
            }
        }
        array_56.finish();
    }
    if let Some(var_58) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_58);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_stop_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchStopJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.job_name {
        object.key("JobName").string(var_59);
    }
    if let Some(var_60) = &input.job_run_ids {
        let mut array_61 = object.key("JobRunIds").start_array();
        for item_62 in var_60 {
            {
                array_61.value().string(item_62);
            }
        }
        array_61.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.catalog_id {
        object.key("CatalogId").string(var_63);
    }
    if let Some(var_64) = &input.database_name {
        object.key("DatabaseName").string(var_64);
    }
    if let Some(var_65) = &input.table_name {
        object.key("TableName").string(var_65);
    }
    if let Some(var_66) = &input.entries {
        let mut array_67 = object.key("Entries").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_update_partition_request_entry(&mut object_69, item_68)?;
                object_69.finish();
            }
        }
        array_67.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.transform_id {
        object.key("TransformId").string(var_70);
    }
    if let Some(var_71) = &input.task_run_id {
        object.key("TaskRunId").string(var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_check_schema_version_validity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckSchemaVersionValidityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.data_format {
        object.key("DataFormat").string(var_72.as_str());
    }
    if let Some(var_73) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_73);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.name {
        object.key("Name").string(var_74);
    }
    if let Some(var_75) = &input.description {
        object.key("Description").string(var_75);
    }
    if let Some(var_76) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_76);
    }
    if let Some(var_77) = &input.tags {
        let mut object_78 = object.key("Tags").start_object();
        for (key_79, value_80) in var_77 {
            {
                object_78.key(key_79).string(value_80);
            }
        }
        object_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.grok_classifier {
        let mut object_82 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_grok_classifier_request(
            &mut object_82,
            var_81,
        )?;
        object_82.finish();
    }
    if let Some(var_83) = &input.xml_classifier {
        let mut object_84 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_xml_classifier_request(
            &mut object_84,
            var_83,
        )?;
        object_84.finish();
    }
    if let Some(var_85) = &input.json_classifier {
        let mut object_86 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_json_classifier_request(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    if let Some(var_87) = &input.csv_classifier {
        let mut object_88 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_csv_classifier_request(
            &mut object_88,
            var_87,
        )?;
        object_88.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.catalog_id {
        object.key("CatalogId").string(var_89);
    }
    if let Some(var_90) = &input.connection_input {
        let mut object_91 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(&mut object_91, var_90)?;
        object_91.finish();
    }
    if let Some(var_92) = &input.tags {
        let mut object_93 = object.key("Tags").start_object();
        for (key_94, value_95) in var_92 {
            {
                object_93.key(key_94).string(value_95);
            }
        }
        object_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.name {
        object.key("Name").string(var_96);
    }
    if let Some(var_97) = &input.role {
        object.key("Role").string(var_97);
    }
    if let Some(var_98) = &input.database_name {
        object.key("DatabaseName").string(var_98);
    }
    if let Some(var_99) = &input.description {
        object.key("Description").string(var_99);
    }
    if let Some(var_100) = &input.targets {
        let mut object_101 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_101, var_100)?;
        object_101.finish();
    }
    if let Some(var_102) = &input.schedule {
        object.key("Schedule").string(var_102);
    }
    if let Some(var_103) = &input.classifiers {
        let mut array_104 = object.key("Classifiers").start_array();
        for item_105 in var_103 {
            {
                array_104.value().string(item_105);
            }
        }
        array_104.finish();
    }
    if let Some(var_106) = &input.table_prefix {
        object.key("TablePrefix").string(var_106);
    }
    if let Some(var_107) = &input.schema_change_policy {
        let mut object_108 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_108,
            var_107,
        )?;
        object_108.finish();
    }
    if let Some(var_109) = &input.recrawl_policy {
        let mut object_110 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_110, var_109)?;
        object_110.finish();
    }
    if let Some(var_111) = &input.lineage_configuration {
        let mut object_112 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_112,
            var_111,
        )?;
        object_112.finish();
    }
    if let Some(var_113) = &input.configuration {
        object.key("Configuration").string(var_113);
    }
    if let Some(var_114) = &input.crawler_security_configuration {
        object.key("CrawlerSecurityConfiguration").string(var_114);
    }
    if let Some(var_115) = &input.tags {
        let mut object_116 = object.key("Tags").start_object();
        for (key_117, value_118) in var_115 {
            {
                object_116.key(key_117).string(value_118);
            }
        }
        object_116.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.catalog_id {
        object.key("CatalogId").string(var_119);
    }
    if let Some(var_120) = &input.database_input {
        let mut object_121 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_121, var_120)?;
        object_121.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.endpoint_name {
        object.key("EndpointName").string(var_122);
    }
    if let Some(var_123) = &input.role_arn {
        object.key("RoleArn").string(var_123);
    }
    if let Some(var_124) = &input.security_group_ids {
        let mut array_125 = object.key("SecurityGroupIds").start_array();
        for item_126 in var_124 {
            {
                array_125.value().string(item_126);
            }
        }
        array_125.finish();
    }
    if let Some(var_127) = &input.subnet_id {
        object.key("SubnetId").string(var_127);
    }
    if let Some(var_128) = &input.public_key {
        object.key("PublicKey").string(var_128);
    }
    if let Some(var_129) = &input.public_keys {
        let mut array_130 = object.key("PublicKeys").start_array();
        for item_131 in var_129 {
            {
                array_130.value().string(item_131);
            }
        }
        array_130.finish();
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_132) = &input.worker_type {
        object.key("WorkerType").string(var_132.as_str());
    }
    if let Some(var_133) = &input.glue_version {
        object.key("GlueVersion").string(var_133);
    }
    if let Some(var_134) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_134).into()),
        );
    }
    if let Some(var_135) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_135);
    }
    if let Some(var_136) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_136);
    }
    if let Some(var_137) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_137);
    }
    if let Some(var_138) = &input.tags {
        let mut object_139 = object.key("Tags").start_object();
        for (key_140, value_141) in var_138 {
            {
                object_139.key(key_140).string(value_141);
            }
        }
        object_139.finish();
    }
    if let Some(var_142) = &input.arguments {
        let mut object_143 = object.key("Arguments").start_object();
        for (key_144, value_145) in var_142 {
            {
                object_143.key(key_144).string(value_145);
            }
        }
        object_143.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.name {
        object.key("Name").string(var_146);
    }
    if let Some(var_147) = &input.description {
        object.key("Description").string(var_147);
    }
    if let Some(var_148) = &input.log_uri {
        object.key("LogUri").string(var_148);
    }
    if let Some(var_149) = &input.role {
        object.key("Role").string(var_149);
    }
    if let Some(var_150) = &input.execution_property {
        let mut object_151 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_151,
            var_150,
        )?;
        object_151.finish();
    }
    if let Some(var_152) = &input.command {
        let mut object_153 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_153, var_152)?;
        object_153.finish();
    }
    if let Some(var_154) = &input.default_arguments {
        let mut object_155 = object.key("DefaultArguments").start_object();
        for (key_156, value_157) in var_154 {
            {
                object_155.key(key_156).string(value_157);
            }
        }
        object_155.finish();
    }
    if let Some(var_158) = &input.non_overridable_arguments {
        let mut object_159 = object.key("NonOverridableArguments").start_object();
        for (key_160, value_161) in var_158 {
            {
                object_159.key(key_160).string(value_161);
            }
        }
        object_159.finish();
    }
    if let Some(var_162) = &input.connections {
        let mut object_163 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_163,
            var_162,
        )?;
        object_163.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_164) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_165).into()),
        );
    }
    if let Some(var_166) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_166);
    }
    if let Some(var_167) = &input.tags {
        let mut object_168 = object.key("Tags").start_object();
        for (key_169, value_170) in var_167 {
            {
                object_168.key(key_169).string(value_170);
            }
        }
        object_168.finish();
    }
    if let Some(var_171) = &input.notification_property {
        let mut object_172 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_172,
            var_171,
        )?;
        object_172.finish();
    }
    if let Some(var_173) = &input.glue_version {
        object.key("GlueVersion").string(var_173);
    }
    if let Some(var_174) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_174).into()),
        );
    }
    if let Some(var_175) = &input.worker_type {
        object.key("WorkerType").string(var_175.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.name {
        object.key("Name").string(var_176);
    }
    if let Some(var_177) = &input.description {
        object.key("Description").string(var_177);
    }
    if let Some(var_178) = &input.input_record_tables {
        let mut array_179 = object.key("InputRecordTables").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_table(
                    &mut object_181,
                    item_180,
                )?;
                object_181.finish();
            }
        }
        array_179.finish();
    }
    if let Some(var_182) = &input.parameters {
        let mut object_183 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_183,
            var_182,
        )?;
        object_183.finish();
    }
    if let Some(var_184) = &input.role {
        object.key("Role").string(var_184);
    }
    if let Some(var_185) = &input.glue_version {
        object.key("GlueVersion").string(var_185);
    }
    if let Some(var_186) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_186).into()),
        );
    }
    if let Some(var_187) = &input.worker_type {
        object.key("WorkerType").string(var_187.as_str());
    }
    if let Some(var_188) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_188).into()),
        );
    }
    if let Some(var_189) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    if let Some(var_190) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_190).into()),
        );
    }
    if let Some(var_191) = &input.tags {
        let mut object_192 = object.key("Tags").start_object();
        for (key_193, value_194) in var_191 {
            {
                object_192.key(key_193).string(value_194);
            }
        }
        object_192.finish();
    }
    if let Some(var_195) = &input.transform_encryption {
        let mut object_196 = object.key("TransformEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_encryption(
            &mut object_196,
            var_195,
        )?;
        object_196.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_197) = &input.catalog_id {
        object.key("CatalogId").string(var_197);
    }
    if let Some(var_198) = &input.database_name {
        object.key("DatabaseName").string(var_198);
    }
    if let Some(var_199) = &input.table_name {
        object.key("TableName").string(var_199);
    }
    if let Some(var_200) = &input.partition_input {
        let mut object_201 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_201, var_200)?;
        object_201.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.catalog_id {
        object.key("CatalogId").string(var_202);
    }
    if let Some(var_203) = &input.database_name {
        object.key("DatabaseName").string(var_203);
    }
    if let Some(var_204) = &input.table_name {
        object.key("TableName").string(var_204);
    }
    if let Some(var_205) = &input.partition_index {
        let mut object_206 = object.key("PartitionIndex").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_index(&mut object_206, var_205)?;
        object_206.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.registry_name {
        object.key("RegistryName").string(var_207);
    }
    if let Some(var_208) = &input.description {
        object.key("Description").string(var_208);
    }
    if let Some(var_209) = &input.tags {
        let mut object_210 = object.key("Tags").start_object();
        for (key_211, value_212) in var_209 {
            {
                object_210.key(key_211).string(value_212);
            }
        }
        object_210.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.registry_id {
        let mut object_214 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_214, var_213)?;
        object_214.finish();
    }
    if let Some(var_215) = &input.schema_name {
        object.key("SchemaName").string(var_215);
    }
    if let Some(var_216) = &input.data_format {
        object.key("DataFormat").string(var_216.as_str());
    }
    if let Some(var_217) = &input.compatibility {
        object.key("Compatibility").string(var_217.as_str());
    }
    if let Some(var_218) = &input.description {
        object.key("Description").string(var_218);
    }
    if let Some(var_219) = &input.tags {
        let mut object_220 = object.key("Tags").start_object();
        for (key_221, value_222) in var_219 {
            {
                object_220.key(key_221).string(value_222);
            }
        }
        object_220.finish();
    }
    if let Some(var_223) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_223);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_script_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateScriptInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.dag_nodes {
        let mut array_225 = object.key("DagNodes").start_array();
        for item_226 in var_224 {
            {
                let mut object_227 = array_225.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node(
                    &mut object_227,
                    item_226,
                )?;
                object_227.finish();
            }
        }
        array_225.finish();
    }
    if let Some(var_228) = &input.dag_edges {
        let mut array_229 = object.key("DagEdges").start_array();
        for item_230 in var_228 {
            {
                let mut object_231 = array_229.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_edge(
                    &mut object_231,
                    item_230,
                )?;
                object_231.finish();
            }
        }
        array_229.finish();
    }
    if let Some(var_232) = &input.language {
        object.key("Language").string(var_232.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_233) = &input.name {
        object.key("Name").string(var_233);
    }
    if let Some(var_234) = &input.encryption_configuration {
        let mut object_235 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(
            &mut object_235,
            var_234,
        )?;
        object_235.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_236) = &input.catalog_id {
        object.key("CatalogId").string(var_236);
    }
    if let Some(var_237) = &input.database_name {
        object.key("DatabaseName").string(var_237);
    }
    if let Some(var_238) = &input.table_input {
        let mut object_239 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_239, var_238)?;
        object_239.finish();
    }
    if let Some(var_240) = &input.partition_indexes {
        let mut array_241 = object.key("PartitionIndexes").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_index(
                    &mut object_243,
                    item_242,
                )?;
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.transaction_id {
        object.key("TransactionId").string(var_244);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_245) = &input.name {
        object.key("Name").string(var_245);
    }
    if let Some(var_246) = &input.workflow_name {
        object.key("WorkflowName").string(var_246);
    }
    if let Some(var_247) = &input.r#type {
        object.key("Type").string(var_247.as_str());
    }
    if let Some(var_248) = &input.schedule {
        object.key("Schedule").string(var_248);
    }
    if let Some(var_249) = &input.predicate {
        let mut object_250 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_250, var_249)?;
        object_250.finish();
    }
    if let Some(var_251) = &input.actions {
        let mut array_252 = object.key("Actions").start_array();
        for item_253 in var_251 {
            {
                let mut object_254 = array_252.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_254, item_253)?;
                object_254.finish();
            }
        }
        array_252.finish();
    }
    if let Some(var_255) = &input.description {
        object.key("Description").string(var_255);
    }
    if input.start_on_creation {
        object
            .key("StartOnCreation")
            .boolean(input.start_on_creation);
    }
    if let Some(var_256) = &input.tags {
        let mut object_257 = object.key("Tags").start_object();
        for (key_258, value_259) in var_256 {
            {
                object_257.key(key_258).string(value_259);
            }
        }
        object_257.finish();
    }
    if let Some(var_260) = &input.event_batching_condition {
        let mut object_261 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_261,
            var_260,
        )?;
        object_261.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_262) = &input.catalog_id {
        object.key("CatalogId").string(var_262);
    }
    if let Some(var_263) = &input.database_name {
        object.key("DatabaseName").string(var_263);
    }
    if let Some(var_264) = &input.function_input {
        let mut object_265 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_265,
            var_264,
        )?;
        object_265.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.name {
        object.key("Name").string(var_266);
    }
    if let Some(var_267) = &input.description {
        object.key("Description").string(var_267);
    }
    if let Some(var_268) = &input.default_run_properties {
        let mut object_269 = object.key("DefaultRunProperties").start_object();
        for (key_270, value_271) in var_268 {
            {
                object_269.key(key_270).string(value_271);
            }
        }
        object_269.finish();
    }
    if let Some(var_272) = &input.tags {
        let mut object_273 = object.key("Tags").start_object();
        for (key_274, value_275) in var_272 {
            {
                object_273.key(key_274).string(value_275);
            }
        }
        object_273.finish();
    }
    if let Some(var_276) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_276).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.name {
        object.key("Name").string(var_277);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_278) = &input.name {
        object.key("Name").string(var_278);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.catalog_id {
        object.key("CatalogId").string(var_279);
    }
    if let Some(var_280) = &input.database_name {
        object.key("DatabaseName").string(var_280);
    }
    if let Some(var_281) = &input.table_name {
        object.key("TableName").string(var_281);
    }
    if let Some(var_282) = &input.partition_values {
        let mut array_283 = object.key("PartitionValues").start_array();
        for item_284 in var_282 {
            {
                array_283.value().string(item_284);
            }
        }
        array_283.finish();
    }
    if let Some(var_285) = &input.column_name {
        object.key("ColumnName").string(var_285);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_286) = &input.catalog_id {
        object.key("CatalogId").string(var_286);
    }
    if let Some(var_287) = &input.database_name {
        object.key("DatabaseName").string(var_287);
    }
    if let Some(var_288) = &input.table_name {
        object.key("TableName").string(var_288);
    }
    if let Some(var_289) = &input.column_name {
        object.key("ColumnName").string(var_289);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_290) = &input.catalog_id {
        object.key("CatalogId").string(var_290);
    }
    if let Some(var_291) = &input.connection_name {
        object.key("ConnectionName").string(var_291);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.name {
        object.key("Name").string(var_292);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.catalog_id {
        object.key("CatalogId").string(var_293);
    }
    if let Some(var_294) = &input.name {
        object.key("Name").string(var_294);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_295) = &input.endpoint_name {
        object.key("EndpointName").string(var_295);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_296) = &input.job_name {
        object.key("JobName").string(var_296);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_297) = &input.transform_id {
        object.key("TransformId").string(var_297);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.catalog_id {
        object.key("CatalogId").string(var_298);
    }
    if let Some(var_299) = &input.database_name {
        object.key("DatabaseName").string(var_299);
    }
    if let Some(var_300) = &input.table_name {
        object.key("TableName").string(var_300);
    }
    if let Some(var_301) = &input.partition_values {
        let mut array_302 = object.key("PartitionValues").start_array();
        for item_303 in var_301 {
            {
                array_302.value().string(item_303);
            }
        }
        array_302.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_304) = &input.catalog_id {
        object.key("CatalogId").string(var_304);
    }
    if let Some(var_305) = &input.database_name {
        object.key("DatabaseName").string(var_305);
    }
    if let Some(var_306) = &input.table_name {
        object.key("TableName").string(var_306);
    }
    if let Some(var_307) = &input.index_name {
        object.key("IndexName").string(var_307);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_308) = &input.registry_id {
        let mut object_309 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_309, var_308)?;
        object_309.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_310);
    }
    if let Some(var_311) = &input.resource_arn {
        object.key("ResourceArn").string(var_311);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.schema_id {
        let mut object_313 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_313, var_312)?;
        object_313.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_314) = &input.schema_id {
        let mut object_315 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_315, var_314)?;
        object_315.finish();
    }
    if let Some(var_316) = &input.versions {
        object.key("Versions").string(var_316);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_317) = &input.name {
        object.key("Name").string(var_317);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_318) = &input.catalog_id {
        object.key("CatalogId").string(var_318);
    }
    if let Some(var_319) = &input.database_name {
        object.key("DatabaseName").string(var_319);
    }
    if let Some(var_320) = &input.name {
        object.key("Name").string(var_320);
    }
    if let Some(var_321) = &input.transaction_id {
        object.key("TransactionId").string(var_321);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.catalog_id {
        object.key("CatalogId").string(var_322);
    }
    if let Some(var_323) = &input.database_name {
        object.key("DatabaseName").string(var_323);
    }
    if let Some(var_324) = &input.table_name {
        object.key("TableName").string(var_324);
    }
    if let Some(var_325) = &input.version_id {
        object.key("VersionId").string(var_325);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_326) = &input.name {
        object.key("Name").string(var_326);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_327) = &input.catalog_id {
        object.key("CatalogId").string(var_327);
    }
    if let Some(var_328) = &input.database_name {
        object.key("DatabaseName").string(var_328);
    }
    if let Some(var_329) = &input.function_name {
        object.key("FunctionName").string(var_329);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_330) = &input.name {
        object.key("Name").string(var_330);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.name {
        object.key("Name").string(var_331);
    }
    if let Some(var_332) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_332);
    }
    if let Some(var_333) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_333);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.blueprint_name {
        object.key("BlueprintName").string(var_334);
    }
    if let Some(var_335) = &input.run_id {
        object.key("RunId").string(var_335);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.blueprint_name {
        object.key("BlueprintName").string(var_336);
    }
    if let Some(var_337) = &input.next_token {
        object.key("NextToken").string(var_337);
    }
    if let Some(var_338) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_338).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_catalog_import_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCatalogImportStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_339) = &input.catalog_id {
        object.key("CatalogId").string(var_339);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.name {
        object.key("Name").string(var_340);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifiers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifiersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_341) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_341).into()),
        );
    }
    if let Some(var_342) = &input.next_token {
        object.key("NextToken").string(var_342);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.catalog_id {
        object.key("CatalogId").string(var_343);
    }
    if let Some(var_344) = &input.database_name {
        object.key("DatabaseName").string(var_344);
    }
    if let Some(var_345) = &input.table_name {
        object.key("TableName").string(var_345);
    }
    if let Some(var_346) = &input.partition_values {
        let mut array_347 = object.key("PartitionValues").start_array();
        for item_348 in var_346 {
            {
                array_347.value().string(item_348);
            }
        }
        array_347.finish();
    }
    if let Some(var_349) = &input.column_names {
        let mut array_350 = object.key("ColumnNames").start_array();
        for item_351 in var_349 {
            {
                array_350.value().string(item_351);
            }
        }
        array_350.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_352) = &input.catalog_id {
        object.key("CatalogId").string(var_352);
    }
    if let Some(var_353) = &input.database_name {
        object.key("DatabaseName").string(var_353);
    }
    if let Some(var_354) = &input.table_name {
        object.key("TableName").string(var_354);
    }
    if let Some(var_355) = &input.column_names {
        let mut array_356 = object.key("ColumnNames").start_array();
        for item_357 in var_355 {
            {
                array_356.value().string(item_357);
            }
        }
        array_356.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_358) = &input.catalog_id {
        object.key("CatalogId").string(var_358);
    }
    if let Some(var_359) = &input.name {
        object.key("Name").string(var_359);
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.catalog_id {
        object.key("CatalogId").string(var_360);
    }
    if let Some(var_361) = &input.filter {
        let mut object_362 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_get_connections_filter(
            &mut object_362,
            var_361,
        )?;
        object_362.finish();
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    if let Some(var_363) = &input.next_token {
        object.key("NextToken").string(var_363);
    }
    if let Some(var_364) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_364).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_365) = &input.name {
        object.key("Name").string(var_365);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.crawler_name_list {
        let mut array_367 = object.key("CrawlerNameList").start_array();
        for item_368 in var_366 {
            {
                array_367.value().string(item_368);
            }
        }
        array_367.finish();
    }
    if let Some(var_369) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_369).into()),
        );
    }
    if let Some(var_370) = &input.next_token {
        object.key("NextToken").string(var_370);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_371).into()),
        );
    }
    if let Some(var_372) = &input.next_token {
        object.key("NextToken").string(var_372);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_373) = &input.catalog_id {
        object.key("CatalogId").string(var_373);
    }
    if let Some(var_374) = &input.name {
        object.key("Name").string(var_374);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_databases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.catalog_id {
        object.key("CatalogId").string(var_375);
    }
    if let Some(var_376) = &input.next_token {
        object.key("NextToken").string(var_376);
    }
    if let Some(var_377) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_377).into()),
        );
    }
    if let Some(var_378) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.catalog_id {
        object.key("CatalogId").string(var_379);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dataflow_graph_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataflowGraphInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.python_script {
        object.key("PythonScript").string(var_380);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_381) = &input.endpoint_name {
        object.key("EndpointName").string(var_381);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_382).into()),
        );
    }
    if let Some(var_383) = &input.next_token {
        object.key("NextToken").string(var_383);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.job_name {
        object.key("JobName").string(var_384);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_385) = &input.job_name {
        object.key("JobName").string(var_385);
    }
    if let Some(var_386) = &input.run_id {
        object.key("RunId").string(var_386);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.job_name {
        object.key("JobName").string(var_387);
    }
    if let Some(var_388) = &input.run_id {
        object.key("RunId").string(var_388);
    }
    if input.predecessors_included {
        object
            .key("PredecessorsIncluded")
            .boolean(input.predecessors_included);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.job_name {
        object.key("JobName").string(var_389);
    }
    if let Some(var_390) = &input.next_token {
        object.key("NextToken").string(var_390);
    }
    if let Some(var_391) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_391).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_392) = &input.next_token {
        object.key("NextToken").string(var_392);
    }
    if let Some(var_393) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_393).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_394) = &input.source {
        let mut object_395 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_395, var_394)?;
        object_395.finish();
    }
    if let Some(var_396) = &input.sinks {
        let mut array_397 = object.key("Sinks").start_array();
        for item_398 in var_396 {
            {
                let mut object_399 = array_397.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_399,
                    item_398,
                )?;
                object_399.finish();
            }
        }
        array_397.finish();
    }
    if let Some(var_400) = &input.location {
        let mut object_401 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_401, var_400)?;
        object_401.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_402) = &input.transform_id {
        object.key("TransformId").string(var_402);
    }
    if let Some(var_403) = &input.task_run_id {
        object.key("TaskRunId").string(var_403);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_404) = &input.transform_id {
        object.key("TransformId").string(var_404);
    }
    if let Some(var_405) = &input.next_token {
        object.key("NextToken").string(var_405);
    }
    if let Some(var_406) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_406).into()),
        );
    }
    if let Some(var_407) = &input.filter {
        let mut object_408 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_filter_criteria(
            &mut object_408,
            var_407,
        )?;
        object_408.finish();
    }
    if let Some(var_409) = &input.sort {
        let mut object_410 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_sort_criteria(
            &mut object_410,
            var_409,
        )?;
        object_410.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_411) = &input.transform_id {
        object.key("TransformId").string(var_411);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_412) = &input.next_token {
        object.key("NextToken").string(var_412);
    }
    if let Some(var_413) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_413).into()),
        );
    }
    if let Some(var_414) = &input.filter {
        let mut object_415 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_415,
            var_414,
        )?;
        object_415.finish();
    }
    if let Some(var_416) = &input.sort {
        let mut object_417 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_417,
            var_416,
        )?;
        object_417.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.catalog_id {
        object.key("CatalogId").string(var_418);
    }
    if let Some(var_419) = &input.database_name {
        object.key("DatabaseName").string(var_419);
    }
    if let Some(var_420) = &input.table_name {
        object.key("TableName").string(var_420);
    }
    if let Some(var_421) = &input.partition_values {
        let mut array_422 = object.key("PartitionValues").start_array();
        for item_423 in var_421 {
            {
                array_422.value().string(item_423);
            }
        }
        array_422.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_indexes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionIndexesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_424) = &input.catalog_id {
        object.key("CatalogId").string(var_424);
    }
    if let Some(var_425) = &input.database_name {
        object.key("DatabaseName").string(var_425);
    }
    if let Some(var_426) = &input.table_name {
        object.key("TableName").string(var_426);
    }
    if let Some(var_427) = &input.next_token {
        object.key("NextToken").string(var_427);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_428) = &input.catalog_id {
        object.key("CatalogId").string(var_428);
    }
    if let Some(var_429) = &input.database_name {
        object.key("DatabaseName").string(var_429);
    }
    if let Some(var_430) = &input.table_name {
        object.key("TableName").string(var_430);
    }
    if let Some(var_431) = &input.expression {
        object.key("Expression").string(var_431);
    }
    if let Some(var_432) = &input.next_token {
        object.key("NextToken").string(var_432);
    }
    if let Some(var_433) = &input.segment {
        let mut object_434 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_434, var_433)?;
        object_434.finish();
    }
    if let Some(var_435) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_435).into()),
        );
    }
    if let Some(var_436) = &input.exclude_column_schema {
        object.key("ExcludeColumnSchema").boolean(*var_436);
    }
    if let Some(var_437) = &input.transaction_id {
        object.key("TransactionId").string(var_437);
    }
    if let Some(var_438) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_438, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_439) = &input.mapping {
        let mut array_440 = object.key("Mapping").start_array();
        for item_441 in var_439 {
            {
                let mut object_442 = array_440.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping_entry(
                    &mut object_442,
                    item_441,
                )?;
                object_442.finish();
            }
        }
        array_440.finish();
    }
    if let Some(var_443) = &input.source {
        let mut object_444 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_444, var_443)?;
        object_444.finish();
    }
    if let Some(var_445) = &input.sinks {
        let mut array_446 = object.key("Sinks").start_array();
        for item_447 in var_445 {
            {
                let mut object_448 = array_446.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_448,
                    item_447,
                )?;
                object_448.finish();
            }
        }
        array_446.finish();
    }
    if let Some(var_449) = &input.location {
        let mut object_450 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_450, var_449)?;
        object_450.finish();
    }
    if let Some(var_451) = &input.language {
        object.key("Language").string(var_451.as_str());
    }
    if let Some(var_452) = &input.additional_plan_options_map {
        let mut object_453 = object.key("AdditionalPlanOptionsMap").start_object();
        for (key_454, value_455) in var_452 {
            {
                object_453.key(key_454).string(value_455);
            }
        }
        object_453.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.registry_id {
        let mut object_457 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_457, var_456)?;
        object_457.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_458) = &input.next_token {
        object.key("NextToken").string(var_458);
    }
    if let Some(var_459) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_459).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_460) = &input.resource_arn {
        object.key("ResourceArn").string(var_460);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_461) = &input.schema_id {
        let mut object_462 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_462, var_461)?;
        object_462.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_by_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaByDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_463) = &input.schema_id {
        let mut object_464 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_464, var_463)?;
        object_464.finish();
    }
    if let Some(var_465) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_465);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_466) = &input.schema_id {
        let mut object_467 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_467, var_466)?;
        object_467.finish();
    }
    if let Some(var_468) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_468);
    }
    if let Some(var_469) = &input.schema_version_number {
        let mut object_470 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_470,
            var_469,
        )?;
        object_470.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_versions_diff_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionsDiffInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_471) = &input.schema_id {
        let mut object_472 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_472, var_471)?;
        object_472.finish();
    }
    if let Some(var_473) = &input.first_schema_version_number {
        let mut object_474 = object.key("FirstSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_474,
            var_473,
        )?;
        object_474.finish();
    }
    if let Some(var_475) = &input.second_schema_version_number {
        let mut object_476 = object.key("SecondSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_476,
            var_475,
        )?;
        object_476.finish();
    }
    if let Some(var_477) = &input.schema_diff_type {
        object.key("SchemaDiffType").string(var_477.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.name {
        object.key("Name").string(var_478);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_479) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_479).into()),
        );
    }
    if let Some(var_480) = &input.next_token {
        object.key("NextToken").string(var_480);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_481) = &input.catalog_id {
        object.key("CatalogId").string(var_481);
    }
    if let Some(var_482) = &input.database_name {
        object.key("DatabaseName").string(var_482);
    }
    if let Some(var_483) = &input.name {
        object.key("Name").string(var_483);
    }
    if let Some(var_484) = &input.transaction_id {
        object.key("TransactionId").string(var_484);
    }
    if let Some(var_485) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_485, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_486) = &input.catalog_id {
        object.key("CatalogId").string(var_486);
    }
    if let Some(var_487) = &input.database_name {
        object.key("DatabaseName").string(var_487);
    }
    if let Some(var_488) = &input.expression {
        object.key("Expression").string(var_488);
    }
    if let Some(var_489) = &input.next_token {
        object.key("NextToken").string(var_489);
    }
    if let Some(var_490) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_490).into()),
        );
    }
    if let Some(var_491) = &input.transaction_id {
        object.key("TransactionId").string(var_491);
    }
    if let Some(var_492) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_492, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_493) = &input.catalog_id {
        object.key("CatalogId").string(var_493);
    }
    if let Some(var_494) = &input.database_name {
        object.key("DatabaseName").string(var_494);
    }
    if let Some(var_495) = &input.table_name {
        object.key("TableName").string(var_495);
    }
    if let Some(var_496) = &input.version_id {
        object.key("VersionId").string(var_496);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_497) = &input.catalog_id {
        object.key("CatalogId").string(var_497);
    }
    if let Some(var_498) = &input.database_name {
        object.key("DatabaseName").string(var_498);
    }
    if let Some(var_499) = &input.table_name {
        object.key("TableName").string(var_499);
    }
    if let Some(var_500) = &input.next_token {
        object.key("NextToken").string(var_500);
    }
    if let Some(var_501) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_501).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_502) = &input.resource_arn {
        object.key("ResourceArn").string(var_502);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_503) = &input.name {
        object.key("Name").string(var_503);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_504) = &input.next_token {
        object.key("NextToken").string(var_504);
    }
    if let Some(var_505) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_505);
    }
    if let Some(var_506) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_506).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_507) = &input.catalog_id {
        object.key("CatalogId").string(var_507);
    }
    if let Some(var_508) = &input.database_name {
        object.key("DatabaseName").string(var_508);
    }
    if let Some(var_509) = &input.function_name {
        object.key("FunctionName").string(var_509);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_functions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_510) = &input.catalog_id {
        object.key("CatalogId").string(var_510);
    }
    if let Some(var_511) = &input.database_name {
        object.key("DatabaseName").string(var_511);
    }
    if let Some(var_512) = &input.pattern {
        object.key("Pattern").string(var_512);
    }
    if let Some(var_513) = &input.next_token {
        object.key("NextToken").string(var_513);
    }
    if let Some(var_514) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_514).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_515) = &input.name {
        object.key("Name").string(var_515);
    }
    if let Some(var_516) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_516);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_517) = &input.name {
        object.key("Name").string(var_517);
    }
    if let Some(var_518) = &input.run_id {
        object.key("RunId").string(var_518);
    }
    if let Some(var_519) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_519);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_520) = &input.name {
        object.key("Name").string(var_520);
    }
    if let Some(var_521) = &input.run_id {
        object.key("RunId").string(var_521);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_522) = &input.name {
        object.key("Name").string(var_522);
    }
    if let Some(var_523) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_523);
    }
    if let Some(var_524) = &input.next_token {
        object.key("NextToken").string(var_524);
    }
    if let Some(var_525) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_525).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_catalog_to_glue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCatalogToGlueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_526) = &input.catalog_id {
        object.key("CatalogId").string(var_526);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_527) = &input.next_token {
        object.key("NextToken").string(var_527);
    }
    if let Some(var_528) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_528).into()),
        );
    }
    if let Some(var_529) = &input.tags {
        let mut object_530 = object.key("Tags").start_object();
        for (key_531, value_532) in var_529 {
            {
                object_530.key(key_531).string(value_532);
            }
        }
        object_530.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_533) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_533).into()),
        );
    }
    if let Some(var_534) = &input.next_token {
        object.key("NextToken").string(var_534);
    }
    if let Some(var_535) = &input.tags {
        let mut object_536 = object.key("Tags").start_object();
        for (key_537, value_538) in var_535 {
            {
                object_536.key(key_537).string(value_538);
            }
        }
        object_536.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_539) = &input.next_token {
        object.key("NextToken").string(var_539);
    }
    if let Some(var_540) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_540).into()),
        );
    }
    if let Some(var_541) = &input.tags {
        let mut object_542 = object.key("Tags").start_object();
        for (key_543, value_544) in var_541 {
            {
                object_542.key(key_543).string(value_544);
            }
        }
        object_542.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_545) = &input.next_token {
        object.key("NextToken").string(var_545);
    }
    if let Some(var_546) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_546).into()),
        );
    }
    if let Some(var_547) = &input.tags {
        let mut object_548 = object.key("Tags").start_object();
        for (key_549, value_550) in var_547 {
            {
                object_548.key(key_549).string(value_550);
            }
        }
        object_548.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_551) = &input.next_token {
        object.key("NextToken").string(var_551);
    }
    if let Some(var_552) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_552).into()),
        );
    }
    if let Some(var_553) = &input.filter {
        let mut object_554 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_554,
            var_553,
        )?;
        object_554.finish();
    }
    if let Some(var_555) = &input.sort {
        let mut object_556 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_556,
            var_555,
        )?;
        object_556.finish();
    }
    if let Some(var_557) = &input.tags {
        let mut object_558 = object.key("Tags").start_object();
        for (key_559, value_560) in var_557 {
            {
                object_558.key(key_559).string(value_560);
            }
        }
        object_558.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_registries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegistriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_561) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_561).into()),
        );
    }
    if let Some(var_562) = &input.next_token {
        object.key("NextToken").string(var_562);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_563) = &input.registry_id {
        let mut object_564 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_564, var_563)?;
        object_564.finish();
    }
    if let Some(var_565) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_565).into()),
        );
    }
    if let Some(var_566) = &input.next_token {
        object.key("NextToken").string(var_566);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_567) = &input.schema_id {
        let mut object_568 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_568, var_567)?;
        object_568.finish();
    }
    if let Some(var_569) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_569).into()),
        );
    }
    if let Some(var_570) = &input.next_token {
        object.key("NextToken").string(var_570);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_571) = &input.next_token {
        object.key("NextToken").string(var_571);
    }
    if let Some(var_572) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_572);
    }
    if let Some(var_573) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_573).into()),
        );
    }
    if let Some(var_574) = &input.tags {
        let mut object_575 = object.key("Tags").start_object();
        for (key_576, value_577) in var_574 {
            {
                object_575.key(key_576).string(value_577);
            }
        }
        object_575.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_578) = &input.next_token {
        object.key("NextToken").string(var_578);
    }
    if let Some(var_579) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_579).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_580) = &input.catalog_id {
        object.key("CatalogId").string(var_580);
    }
    if let Some(var_581) = &input.data_catalog_encryption_settings {
        let mut object_582 = object.key("DataCatalogEncryptionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_encryption_settings(
            &mut object_582,
            var_581,
        )?;
        object_582.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_583) = &input.policy_in_json {
        object.key("PolicyInJson").string(var_583);
    }
    if let Some(var_584) = &input.resource_arn {
        object.key("ResourceArn").string(var_584);
    }
    if let Some(var_585) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_585);
    }
    if let Some(var_586) = &input.policy_exists_condition {
        object.key("PolicyExistsCondition").string(var_586.as_str());
    }
    if let Some(var_587) = &input.enable_hybrid {
        object.key("EnableHybrid").string(var_587.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_588) = &input.schema_id {
        let mut object_589 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_589, var_588)?;
        object_589.finish();
    }
    if let Some(var_590) = &input.schema_version_number {
        let mut object_591 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_591,
            var_590,
        )?;
        object_591.finish();
    }
    if let Some(var_592) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_592);
    }
    if let Some(var_593) = &input.metadata_key_value {
        let mut object_594 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_594,
            var_593,
        )?;
        object_594.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_595) = &input.name {
        object.key("Name").string(var_595);
    }
    if let Some(var_596) = &input.run_id {
        object.key("RunId").string(var_596);
    }
    if let Some(var_597) = &input.run_properties {
        let mut object_598 = object.key("RunProperties").start_object();
        for (key_599, value_600) in var_597 {
            {
                object_598.key(key_599).string(value_600);
            }
        }
        object_598.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QuerySchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_601) = &input.schema_id {
        let mut object_602 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_602, var_601)?;
        object_602.finish();
    }
    if let Some(var_603) = &input.schema_version_number {
        let mut object_604 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_604,
            var_603,
        )?;
        object_604.finish();
    }
    if let Some(var_605) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_605);
    }
    if let Some(var_606) = &input.metadata_list {
        let mut array_607 = object.key("MetadataList").start_array();
        for item_608 in var_606 {
            {
                let mut object_609 = array_607.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
                    &mut object_609,
                    item_608,
                )?;
                object_609.finish();
            }
        }
        array_607.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_610) = &input.next_token {
        object.key("NextToken").string(var_610);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_611) = &input.schema_id {
        let mut object_612 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_612, var_611)?;
        object_612.finish();
    }
    if let Some(var_613) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_613);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_614) = &input.schema_id {
        let mut object_615 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_615, var_614)?;
        object_615.finish();
    }
    if let Some(var_616) = &input.schema_version_number {
        let mut object_617 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_617,
            var_616,
        )?;
        object_617.finish();
    }
    if let Some(var_618) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_618);
    }
    if let Some(var_619) = &input.metadata_key_value {
        let mut object_620 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_620,
            var_619,
        )?;
        object_620.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_621) = &input.job_name {
        object.key("JobName").string(var_621);
    }
    if let Some(var_622) = &input.run_id {
        object.key("RunId").string(var_622);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_623) = &input.name {
        object.key("Name").string(var_623);
    }
    if let Some(var_624) = &input.run_id {
        object.key("RunId").string(var_624);
    }
    if let Some(var_625) = &input.node_ids {
        let mut array_626 = object.key("NodeIds").start_array();
        for item_627 in var_625 {
            {
                array_626.value().string(item_627);
            }
        }
        array_626.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_628) = &input.catalog_id {
        object.key("CatalogId").string(var_628);
    }
    if let Some(var_629) = &input.next_token {
        object.key("NextToken").string(var_629);
    }
    if let Some(var_630) = &input.filters {
        let mut array_631 = object.key("Filters").start_array();
        for item_632 in var_630 {
            {
                let mut object_633 = array_631.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_predicate(
                    &mut object_633,
                    item_632,
                )?;
                object_633.finish();
            }
        }
        array_631.finish();
    }
    if let Some(var_634) = &input.search_text {
        object.key("SearchText").string(var_634);
    }
    if let Some(var_635) = &input.sort_criteria {
        let mut array_636 = object.key("SortCriteria").start_array();
        for item_637 in var_635 {
            {
                let mut object_638 = array_636.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_criterion(
                    &mut object_638,
                    item_637,
                )?;
                object_638.finish();
            }
        }
        array_636.finish();
    }
    if let Some(var_639) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_639).into()),
        );
    }
    if let Some(var_640) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_640.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_641) = &input.blueprint_name {
        object.key("BlueprintName").string(var_641);
    }
    if let Some(var_642) = &input.parameters {
        object.key("Parameters").string(var_642);
    }
    if let Some(var_643) = &input.role_arn {
        object.key("RoleArn").string(var_643);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_644) = &input.name {
        object.key("Name").string(var_644);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_645) = &input.crawler_name {
        object.key("CrawlerName").string(var_645);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_export_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartExportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_646) = &input.transform_id {
        object.key("TransformId").string(var_646);
    }
    if let Some(var_647) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_647);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_648) = &input.transform_id {
        object.key("TransformId").string(var_648);
    }
    if let Some(var_649) = &input.input_s3_path {
        object.key("InputS3Path").string(var_649);
    }
    if input.replace_all_labels {
        object
            .key("ReplaceAllLabels")
            .boolean(input.replace_all_labels);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_650) = &input.job_name {
        object.key("JobName").string(var_650);
    }
    if let Some(var_651) = &input.job_run_id {
        object.key("JobRunId").string(var_651);
    }
    if let Some(var_652) = &input.arguments {
        let mut object_653 = object.key("Arguments").start_object();
        for (key_654, value_655) in var_652 {
            {
                object_653.key(key_654).string(value_655);
            }
        }
        object_653.finish();
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_656) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_656).into()),
        );
    }
    if let Some(var_657) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_657).into()),
        );
    }
    if let Some(var_658) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_658);
    }
    if let Some(var_659) = &input.notification_property {
        let mut object_660 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_660,
            var_659,
        )?;
        object_660.finish();
    }
    if let Some(var_661) = &input.worker_type {
        object.key("WorkerType").string(var_661.as_str());
    }
    if let Some(var_662) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_662).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_evaluation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlEvaluationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_663) = &input.transform_id {
        object.key("TransformId").string(var_663);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_labeling_set_generation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlLabelingSetGenerationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_664) = &input.transform_id {
        object.key("TransformId").string(var_664);
    }
    if let Some(var_665) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_665);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_666) = &input.name {
        object.key("Name").string(var_666);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_667) = &input.name {
        object.key("Name").string(var_667);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_668) = &input.name {
        object.key("Name").string(var_668);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_669) = &input.crawler_name {
        object.key("CrawlerName").string(var_669);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_670) = &input.name {
        object.key("Name").string(var_670);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_671) = &input.name {
        object.key("Name").string(var_671);
    }
    if let Some(var_672) = &input.run_id {
        object.key("RunId").string(var_672);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_673) = &input.resource_arn {
        object.key("ResourceArn").string(var_673);
    }
    if let Some(var_674) = &input.tags_to_add {
        let mut object_675 = object.key("TagsToAdd").start_object();
        for (key_676, value_677) in var_674 {
            {
                object_675.key(key_676).string(value_677);
            }
        }
        object_675.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_678) = &input.resource_arn {
        object.key("ResourceArn").string(var_678);
    }
    if let Some(var_679) = &input.tags_to_remove {
        let mut array_680 = object.key("TagsToRemove").start_array();
        for item_681 in var_679 {
            {
                array_680.value().string(item_681);
            }
        }
        array_680.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_682) = &input.name {
        object.key("Name").string(var_682);
    }
    if let Some(var_683) = &input.description {
        object.key("Description").string(var_683);
    }
    if let Some(var_684) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_684);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_685) = &input.grok_classifier {
        let mut object_686 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_grok_classifier_request(
            &mut object_686,
            var_685,
        )?;
        object_686.finish();
    }
    if let Some(var_687) = &input.xml_classifier {
        let mut object_688 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_xml_classifier_request(
            &mut object_688,
            var_687,
        )?;
        object_688.finish();
    }
    if let Some(var_689) = &input.json_classifier {
        let mut object_690 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_json_classifier_request(
            &mut object_690,
            var_689,
        )?;
        object_690.finish();
    }
    if let Some(var_691) = &input.csv_classifier {
        let mut object_692 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_csv_classifier_request(
            &mut object_692,
            var_691,
        )?;
        object_692.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_693) = &input.catalog_id {
        object.key("CatalogId").string(var_693);
    }
    if let Some(var_694) = &input.database_name {
        object.key("DatabaseName").string(var_694);
    }
    if let Some(var_695) = &input.table_name {
        object.key("TableName").string(var_695);
    }
    if let Some(var_696) = &input.partition_values {
        let mut array_697 = object.key("PartitionValues").start_array();
        for item_698 in var_696 {
            {
                array_697.value().string(item_698);
            }
        }
        array_697.finish();
    }
    if let Some(var_699) = &input.column_statistics_list {
        let mut array_700 = object.key("ColumnStatisticsList").start_array();
        for item_701 in var_699 {
            {
                let mut object_702 = array_700.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_702,
                    item_701,
                )?;
                object_702.finish();
            }
        }
        array_700.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_703) = &input.catalog_id {
        object.key("CatalogId").string(var_703);
    }
    if let Some(var_704) = &input.database_name {
        object.key("DatabaseName").string(var_704);
    }
    if let Some(var_705) = &input.table_name {
        object.key("TableName").string(var_705);
    }
    if let Some(var_706) = &input.column_statistics_list {
        let mut array_707 = object.key("ColumnStatisticsList").start_array();
        for item_708 in var_706 {
            {
                let mut object_709 = array_707.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_709,
                    item_708,
                )?;
                object_709.finish();
            }
        }
        array_707.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_710) = &input.catalog_id {
        object.key("CatalogId").string(var_710);
    }
    if let Some(var_711) = &input.name {
        object.key("Name").string(var_711);
    }
    if let Some(var_712) = &input.connection_input {
        let mut object_713 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(
            &mut object_713,
            var_712,
        )?;
        object_713.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_714) = &input.name {
        object.key("Name").string(var_714);
    }
    if let Some(var_715) = &input.role {
        object.key("Role").string(var_715);
    }
    if let Some(var_716) = &input.database_name {
        object.key("DatabaseName").string(var_716);
    }
    if let Some(var_717) = &input.description {
        object.key("Description").string(var_717);
    }
    if let Some(var_718) = &input.targets {
        let mut object_719 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_719, var_718)?;
        object_719.finish();
    }
    if let Some(var_720) = &input.schedule {
        object.key("Schedule").string(var_720);
    }
    if let Some(var_721) = &input.classifiers {
        let mut array_722 = object.key("Classifiers").start_array();
        for item_723 in var_721 {
            {
                array_722.value().string(item_723);
            }
        }
        array_722.finish();
    }
    if let Some(var_724) = &input.table_prefix {
        object.key("TablePrefix").string(var_724);
    }
    if let Some(var_725) = &input.schema_change_policy {
        let mut object_726 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_726,
            var_725,
        )?;
        object_726.finish();
    }
    if let Some(var_727) = &input.recrawl_policy {
        let mut object_728 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_728, var_727)?;
        object_728.finish();
    }
    if let Some(var_729) = &input.lineage_configuration {
        let mut object_730 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_730,
            var_729,
        )?;
        object_730.finish();
    }
    if let Some(var_731) = &input.configuration {
        object.key("Configuration").string(var_731);
    }
    if let Some(var_732) = &input.crawler_security_configuration {
        object.key("CrawlerSecurityConfiguration").string(var_732);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_733) = &input.crawler_name {
        object.key("CrawlerName").string(var_733);
    }
    if let Some(var_734) = &input.schedule {
        object.key("Schedule").string(var_734);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_735) = &input.catalog_id {
        object.key("CatalogId").string(var_735);
    }
    if let Some(var_736) = &input.name {
        object.key("Name").string(var_736);
    }
    if let Some(var_737) = &input.database_input {
        let mut object_738 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_738, var_737)?;
        object_738.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_739) = &input.endpoint_name {
        object.key("EndpointName").string(var_739);
    }
    if let Some(var_740) = &input.public_key {
        object.key("PublicKey").string(var_740);
    }
    if let Some(var_741) = &input.add_public_keys {
        let mut array_742 = object.key("AddPublicKeys").start_array();
        for item_743 in var_741 {
            {
                array_742.value().string(item_743);
            }
        }
        array_742.finish();
    }
    if let Some(var_744) = &input.delete_public_keys {
        let mut array_745 = object.key("DeletePublicKeys").start_array();
        for item_746 in var_744 {
            {
                array_745.value().string(item_746);
            }
        }
        array_745.finish();
    }
    if let Some(var_747) = &input.custom_libraries {
        let mut object_748 = object.key("CustomLibraries").start_object();
        crate::json_ser::serialize_structure_crate_model_dev_endpoint_custom_libraries(
            &mut object_748,
            var_747,
        )?;
        object_748.finish();
    }
    if input.update_etl_libraries {
        object
            .key("UpdateEtlLibraries")
            .boolean(input.update_etl_libraries);
    }
    if let Some(var_749) = &input.delete_arguments {
        let mut array_750 = object.key("DeleteArguments").start_array();
        for item_751 in var_749 {
            {
                array_750.value().string(item_751);
            }
        }
        array_750.finish();
    }
    if let Some(var_752) = &input.add_arguments {
        let mut object_753 = object.key("AddArguments").start_object();
        for (key_754, value_755) in var_752 {
            {
                object_753.key(key_754).string(value_755);
            }
        }
        object_753.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_756) = &input.job_name {
        object.key("JobName").string(var_756);
    }
    if let Some(var_757) = &input.job_update {
        let mut object_758 = object.key("JobUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_job_update(&mut object_758, var_757)?;
        object_758.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_759) = &input.transform_id {
        object.key("TransformId").string(var_759);
    }
    if let Some(var_760) = &input.name {
        object.key("Name").string(var_760);
    }
    if let Some(var_761) = &input.description {
        object.key("Description").string(var_761);
    }
    if let Some(var_762) = &input.parameters {
        let mut object_763 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_763,
            var_762,
        )?;
        object_763.finish();
    }
    if let Some(var_764) = &input.role {
        object.key("Role").string(var_764);
    }
    if let Some(var_765) = &input.glue_version {
        object.key("GlueVersion").string(var_765);
    }
    if let Some(var_766) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_766).into()),
        );
    }
    if let Some(var_767) = &input.worker_type {
        object.key("WorkerType").string(var_767.as_str());
    }
    if let Some(var_768) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_768).into()),
        );
    }
    if let Some(var_769) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_769).into()),
        );
    }
    if let Some(var_770) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_770).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_771) = &input.catalog_id {
        object.key("CatalogId").string(var_771);
    }
    if let Some(var_772) = &input.database_name {
        object.key("DatabaseName").string(var_772);
    }
    if let Some(var_773) = &input.table_name {
        object.key("TableName").string(var_773);
    }
    if let Some(var_774) = &input.partition_value_list {
        let mut array_775 = object.key("PartitionValueList").start_array();
        for item_776 in var_774 {
            {
                array_775.value().string(item_776);
            }
        }
        array_775.finish();
    }
    if let Some(var_777) = &input.partition_input {
        let mut object_778 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_778, var_777)?;
        object_778.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_779) = &input.registry_id {
        let mut object_780 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_780, var_779)?;
        object_780.finish();
    }
    if let Some(var_781) = &input.description {
        object.key("Description").string(var_781);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_782) = &input.schema_id {
        let mut object_783 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_783, var_782)?;
        object_783.finish();
    }
    if let Some(var_784) = &input.schema_version_number {
        let mut object_785 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_785,
            var_784,
        )?;
        object_785.finish();
    }
    if let Some(var_786) = &input.compatibility {
        object.key("Compatibility").string(var_786.as_str());
    }
    if let Some(var_787) = &input.description {
        object.key("Description").string(var_787);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_788) = &input.catalog_id {
        object.key("CatalogId").string(var_788);
    }
    if let Some(var_789) = &input.database_name {
        object.key("DatabaseName").string(var_789);
    }
    if let Some(var_790) = &input.table_input {
        let mut object_791 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_791, var_790)?;
        object_791.finish();
    }
    if let Some(var_792) = &input.skip_archive {
        object.key("SkipArchive").boolean(*var_792);
    }
    if let Some(var_793) = &input.transaction_id {
        object.key("TransactionId").string(var_793);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_794) = &input.name {
        object.key("Name").string(var_794);
    }
    if let Some(var_795) = &input.trigger_update {
        let mut object_796 = object.key("TriggerUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_update(&mut object_796, var_795)?;
        object_796.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_797) = &input.catalog_id {
        object.key("CatalogId").string(var_797);
    }
    if let Some(var_798) = &input.database_name {
        object.key("DatabaseName").string(var_798);
    }
    if let Some(var_799) = &input.function_name {
        object.key("FunctionName").string(var_799);
    }
    if let Some(var_800) = &input.function_input {
        let mut object_801 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_801,
            var_800,
        )?;
        object_801.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_802) = &input.name {
        object.key("Name").string(var_802);
    }
    if let Some(var_803) = &input.description {
        object.key("Description").string(var_803);
    }
    if let Some(var_804) = &input.default_run_properties {
        let mut object_805 = object.key("DefaultRunProperties").start_object();
        for (key_806, value_807) in var_804 {
            {
                object_805.key(key_806).string(value_807);
            }
        }
        object_805.finish();
    }
    if let Some(var_808) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_808).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_809) = &input.values {
        let mut array_810 = object.key("Values").start_array();
        for item_811 in var_809 {
            {
                array_810.value().string(item_811);
            }
        }
        array_810.finish();
    }
    if let Some(var_812) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_812, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_813) = &input.storage_descriptor {
        let mut object_814 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_814,
            var_813,
        )?;
        object_814.finish();
    }
    if let Some(var_815) = &input.parameters {
        let mut object_816 = object.key("Parameters").start_object();
        for (key_817, value_818) in var_815 {
            {
                object_816.key(key_817).string(value_818);
            }
        }
        object_816.finish();
    }
    if let Some(var_819) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_819, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_value_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionValueList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_820) = &input.values {
        let mut array_821 = object.key("Values").start_array();
        for item_822 in var_820 {
            {
                array_821.value().string(item_822);
            }
        }
        array_821.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_update_partition_request_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchUpdatePartitionRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_823) = &input.partition_value_list {
        let mut array_824 = object.key("PartitionValueList").start_array();
        for item_825 in var_823 {
            {
                array_824.value().string(item_825);
            }
        }
        array_824.finish();
    }
    if let Some(var_826) = &input.partition_input {
        let mut object_827 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_827, var_826)?;
        object_827.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_828) = &input.classification {
        object.key("Classification").string(var_828);
    }
    if let Some(var_829) = &input.name {
        object.key("Name").string(var_829);
    }
    if let Some(var_830) = &input.grok_pattern {
        object.key("GrokPattern").string(var_830);
    }
    if let Some(var_831) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_831);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_832) = &input.classification {
        object.key("Classification").string(var_832);
    }
    if let Some(var_833) = &input.name {
        object.key("Name").string(var_833);
    }
    if let Some(var_834) = &input.row_tag {
        object.key("RowTag").string(var_834);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_835) = &input.name {
        object.key("Name").string(var_835);
    }
    if let Some(var_836) = &input.json_path {
        object.key("JsonPath").string(var_836);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_837) = &input.name {
        object.key("Name").string(var_837);
    }
    if let Some(var_838) = &input.delimiter {
        object.key("Delimiter").string(var_838);
    }
    if let Some(var_839) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_839);
    }
    if let Some(var_840) = &input.contains_header {
        object.key("ContainsHeader").string(var_840.as_str());
    }
    if let Some(var_841) = &input.header {
        let mut array_842 = object.key("Header").start_array();
        for item_843 in var_841 {
            {
                array_842.value().string(item_843);
            }
        }
        array_842.finish();
    }
    if let Some(var_844) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_844);
    }
    if let Some(var_845) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_845);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_846) = &input.name {
        object.key("Name").string(var_846);
    }
    if let Some(var_847) = &input.description {
        object.key("Description").string(var_847);
    }
    if let Some(var_848) = &input.connection_type {
        object.key("ConnectionType").string(var_848.as_str());
    }
    if let Some(var_849) = &input.match_criteria {
        let mut array_850 = object.key("MatchCriteria").start_array();
        for item_851 in var_849 {
            {
                array_850.value().string(item_851);
            }
        }
        array_850.finish();
    }
    if let Some(var_852) = &input.connection_properties {
        let mut object_853 = object.key("ConnectionProperties").start_object();
        for (key_854, value_855) in var_852 {
            {
                object_853.key(key_854.as_str()).string(value_855);
            }
        }
        object_853.finish();
    }
    if let Some(var_856) = &input.physical_connection_requirements {
        let mut object_857 = object.key("PhysicalConnectionRequirements").start_object();
        crate::json_ser::serialize_structure_crate_model_physical_connection_requirements(
            &mut object_857,
            var_856,
        )?;
        object_857.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_crawler_targets(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CrawlerTargets,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_858) = &input.s3_targets {
        let mut array_859 = object.key("S3Targets").start_array();
        for item_860 in var_858 {
            {
                let mut object_861 = array_859.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_target(
                    &mut object_861,
                    item_860,
                )?;
                object_861.finish();
            }
        }
        array_859.finish();
    }
    if let Some(var_862) = &input.jdbc_targets {
        let mut array_863 = object.key("JdbcTargets").start_array();
        for item_864 in var_862 {
            {
                let mut object_865 = array_863.value().start_object();
                crate::json_ser::serialize_structure_crate_model_jdbc_target(
                    &mut object_865,
                    item_864,
                )?;
                object_865.finish();
            }
        }
        array_863.finish();
    }
    if let Some(var_866) = &input.mongo_db_targets {
        let mut array_867 = object.key("MongoDBTargets").start_array();
        for item_868 in var_866 {
            {
                let mut object_869 = array_867.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mongo_db_target(
                    &mut object_869,
                    item_868,
                )?;
                object_869.finish();
            }
        }
        array_867.finish();
    }
    if let Some(var_870) = &input.dynamo_db_targets {
        let mut array_871 = object.key("DynamoDBTargets").start_array();
        for item_872 in var_870 {
            {
                let mut object_873 = array_871.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dynamo_db_target(
                    &mut object_873,
                    item_872,
                )?;
                object_873.finish();
            }
        }
        array_871.finish();
    }
    if let Some(var_874) = &input.catalog_targets {
        let mut array_875 = object.key("CatalogTargets").start_array();
        for item_876 in var_874 {
            {
                let mut object_877 = array_875.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_target(
                    &mut object_877,
                    item_876,
                )?;
                object_877.finish();
            }
        }
        array_875.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_change_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaChangePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_878) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_878.as_str());
    }
    if let Some(var_879) = &input.delete_behavior {
        object.key("DeleteBehavior").string(var_879.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recrawl_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecrawlPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_880) = &input.recrawl_behavior {
        object.key("RecrawlBehavior").string(var_880.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lineage_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LineageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_881) = &input.crawler_lineage_settings {
        object
            .key("CrawlerLineageSettings")
            .string(var_881.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_882) = &input.name {
        object.key("Name").string(var_882);
    }
    if let Some(var_883) = &input.description {
        object.key("Description").string(var_883);
    }
    if let Some(var_884) = &input.location_uri {
        object.key("LocationUri").string(var_884);
    }
    if let Some(var_885) = &input.parameters {
        let mut object_886 = object.key("Parameters").start_object();
        for (key_887, value_888) in var_885 {
            {
                object_886.key(key_887).string(value_888);
            }
        }
        object_886.finish();
    }
    if let Some(var_889) = &input.create_table_default_permissions {
        let mut array_890 = object.key("CreateTableDefaultPermissions").start_array();
        for item_891 in var_889 {
            {
                let mut object_892 = array_890.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal_permissions(
                    &mut object_892,
                    item_891,
                )?;
                object_892.finish();
            }
        }
        array_890.finish();
    }
    if let Some(var_893) = &input.target_database {
        let mut object_894 = object.key("TargetDatabase").start_object();
        crate::json_ser::serialize_structure_crate_model_database_identifier(
            &mut object_894,
            var_893,
        )?;
        object_894.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execution_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_concurrent_runs != 0 {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_concurrent_runs).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_command(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobCommand,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_895) = &input.name {
        object.key("Name").string(var_895);
    }
    if let Some(var_896) = &input.script_location {
        object.key("ScriptLocation").string(var_896);
    }
    if let Some(var_897) = &input.python_version {
        object.key("PythonVersion").string(var_897);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connections_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionsList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_898) = &input.connections {
        let mut array_899 = object.key("Connections").start_array();
        for item_900 in var_898 {
            {
                array_899.value().string(item_900);
            }
        }
        array_899.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_901) = &input.notify_delay_after {
        object.key("NotifyDelayAfter").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_901).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_902) = &input.database_name {
        object.key("DatabaseName").string(var_902);
    }
    if let Some(var_903) = &input.table_name {
        object.key("TableName").string(var_903);
    }
    if let Some(var_904) = &input.catalog_id {
        object.key("CatalogId").string(var_904);
    }
    if let Some(var_905) = &input.connection_name {
        object.key("ConnectionName").string(var_905);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_906) = &input.transform_type {
        object.key("TransformType").string(var_906.as_str());
    }
    if let Some(var_907) = &input.find_matches_parameters {
        let mut object_908 = object.key("FindMatchesParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_find_matches_parameters(
            &mut object_908,
            var_907,
        )?;
        object_908.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_909) = &input.ml_user_data_encryption {
        let mut object_910 = object.key("MlUserDataEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_ml_user_data_encryption(
            &mut object_910,
            var_909,
        )?;
        object_910.finish();
    }
    if let Some(var_911) = &input.task_run_security_configuration_name {
        object
            .key("TaskRunSecurityConfigurationName")
            .string(var_911);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_912) = &input.keys {
        let mut array_913 = object.key("Keys").start_array();
        for item_914 in var_912 {
            {
                array_913.value().string(item_914);
            }
        }
        array_913.finish();
    }
    if let Some(var_915) = &input.index_name {
        object.key("IndexName").string(var_915);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registry_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistryId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_916) = &input.registry_name {
        object.key("RegistryName").string(var_916);
    }
    if let Some(var_917) = &input.registry_arn {
        object.key("RegistryArn").string(var_917);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_918) = &input.id {
        object.key("Id").string(var_918);
    }
    if let Some(var_919) = &input.node_type {
        object.key("NodeType").string(var_919);
    }
    if let Some(var_920) = &input.args {
        let mut array_921 = object.key("Args").start_array();
        for item_922 in var_920 {
            {
                let mut object_923 = array_921.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_923,
                    item_922,
                )?;
                object_923.finish();
            }
        }
        array_921.finish();
    }
    if input.line_number != 0 {
        object.key("LineNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.line_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_edge(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenEdge,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_924) = &input.source {
        object.key("Source").string(var_924);
    }
    if let Some(var_925) = &input.target {
        object.key("Target").string(var_925);
    }
    if let Some(var_926) = &input.target_parameter {
        object.key("TargetParameter").string(var_926);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_927) = &input.s3_encryption {
        let mut array_928 = object.key("S3Encryption").start_array();
        for item_929 in var_927 {
            {
                let mut object_930 = array_928.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_encryption(
                    &mut object_930,
                    item_929,
                )?;
                object_930.finish();
            }
        }
        array_928.finish();
    }
    if let Some(var_931) = &input.cloud_watch_encryption {
        let mut object_932 = object.key("CloudWatchEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_encryption(
            &mut object_932,
            var_931,
        )?;
        object_932.finish();
    }
    if let Some(var_933) = &input.job_bookmarks_encryption {
        let mut object_934 = object.key("JobBookmarksEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_job_bookmarks_encryption(
            &mut object_934,
            var_933,
        )?;
        object_934.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_935) = &input.name {
        object.key("Name").string(var_935);
    }
    if let Some(var_936) = &input.description {
        object.key("Description").string(var_936);
    }
    if let Some(var_937) = &input.owner {
        object.key("Owner").string(var_937);
    }
    if let Some(var_938) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_938, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_939) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_939, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if input.retention != 0 {
        object.key("Retention").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention).into()),
        );
    }
    if let Some(var_940) = &input.storage_descriptor {
        let mut object_941 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_941,
            var_940,
        )?;
        object_941.finish();
    }
    if let Some(var_942) = &input.partition_keys {
        let mut array_943 = object.key("PartitionKeys").start_array();
        for item_944 in var_942 {
            {
                let mut object_945 = array_943.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(&mut object_945, item_944)?;
                object_945.finish();
            }
        }
        array_943.finish();
    }
    if let Some(var_946) = &input.view_original_text {
        object.key("ViewOriginalText").string(var_946);
    }
    if let Some(var_947) = &input.view_expanded_text {
        object.key("ViewExpandedText").string(var_947);
    }
    if let Some(var_948) = &input.table_type {
        object.key("TableType").string(var_948);
    }
    if let Some(var_949) = &input.parameters {
        let mut object_950 = object.key("Parameters").start_object();
        for (key_951, value_952) in var_949 {
            {
                object_950.key(key_951).string(value_952);
            }
        }
        object_950.finish();
    }
    if let Some(var_953) = &input.target_table {
        let mut object_954 = object.key("TargetTable").start_object();
        crate::json_ser::serialize_structure_crate_model_table_identifier(
            &mut object_954,
            var_953,
        )?;
        object_954.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Predicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_955) = &input.logical {
        object.key("Logical").string(var_955.as_str());
    }
    if let Some(var_956) = &input.conditions {
        let mut array_957 = object.key("Conditions").start_array();
        for item_958 in var_956 {
            {
                let mut object_959 = array_957.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_959,
                    item_958,
                )?;
                object_959.finish();
            }
        }
        array_957.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_960) = &input.job_name {
        object.key("JobName").string(var_960);
    }
    if let Some(var_961) = &input.arguments {
        let mut object_962 = object.key("Arguments").start_object();
        for (key_963, value_964) in var_961 {
            {
                object_962.key(key_963).string(value_964);
            }
        }
        object_962.finish();
    }
    if let Some(var_965) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_965).into()),
        );
    }
    if let Some(var_966) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_966);
    }
    if let Some(var_967) = &input.notification_property {
        let mut object_968 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_968,
            var_967,
        )?;
        object_968.finish();
    }
    if let Some(var_969) = &input.crawler_name {
        object.key("CrawlerName").string(var_969);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event_batching_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventBatchingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.batch_size).into()),
        );
    }
    if let Some(var_970) = &input.batch_window {
        object.key("BatchWindow").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_970).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_971) = &input.function_name {
        object.key("FunctionName").string(var_971);
    }
    if let Some(var_972) = &input.class_name {
        object.key("ClassName").string(var_972);
    }
    if let Some(var_973) = &input.owner_name {
        object.key("OwnerName").string(var_973);
    }
    if let Some(var_974) = &input.owner_type {
        object.key("OwnerType").string(var_974.as_str());
    }
    if let Some(var_975) = &input.resource_uris {
        let mut array_976 = object.key("ResourceUris").start_array();
        for item_977 in var_975 {
            {
                let mut object_978 = array_976.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_uri(
                    &mut object_978,
                    item_977,
                )?;
                object_978.finish();
            }
        }
        array_976.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_979) = &input.schema_arn {
        object.key("SchemaArn").string(var_979);
    }
    if let Some(var_980) = &input.schema_name {
        object.key("SchemaName").string(var_980);
    }
    if let Some(var_981) = &input.registry_name {
        object.key("RegistryName").string(var_981);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_get_connections_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GetConnectionsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_982) = &input.match_criteria {
        let mut array_983 = object.key("MatchCriteria").start_array();
        for item_984 in var_982 {
            {
                array_983.value().string(item_984);
            }
        }
        array_983.finish();
    }
    if let Some(var_985) = &input.connection_type {
        object.key("ConnectionType").string(var_985.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_986) = &input.database_name {
        object.key("DatabaseName").string(var_986);
    }
    if let Some(var_987) = &input.table_name {
        object.key("TableName").string(var_987);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_988) = &input.jdbc {
        let mut array_989 = object.key("Jdbc").start_array();
        for item_990 in var_988 {
            {
                let mut object_991 = array_989.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_991,
                    item_990,
                )?;
                object_991.finish();
            }
        }
        array_989.finish();
    }
    if let Some(var_992) = &input.s3 {
        let mut array_993 = object.key("S3").start_array();
        for item_994 in var_992 {
            {
                let mut object_995 = array_993.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_995,
                    item_994,
                )?;
                object_995.finish();
            }
        }
        array_993.finish();
    }
    if let Some(var_996) = &input.dynamo_db {
        let mut array_997 = object.key("DynamoDB").start_array();
        for item_998 in var_996 {
            {
                let mut object_999 = array_997.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_999,
                    item_998,
                )?;
                object_999.finish();
            }
        }
        array_997.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1000) = &input.task_run_type {
        object.key("TaskRunType").string(var_1000.as_str());
    }
    if let Some(var_1001) = &input.status {
        object.key("Status").string(var_1001.as_str());
    }
    if let Some(var_1002) = &input.started_before {
        object
            .key("StartedBefore")
            .date_time(var_1002, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1003) = &input.started_after {
        object
            .key("StartedAfter")
            .date_time(var_1003, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1004) = &input.column {
        object.key("Column").string(var_1004.as_str());
    }
    if let Some(var_1005) = &input.sort_direction {
        object.key("SortDirection").string(var_1005.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1006) = &input.name {
        object.key("Name").string(var_1006);
    }
    if let Some(var_1007) = &input.transform_type {
        object.key("TransformType").string(var_1007.as_str());
    }
    if let Some(var_1008) = &input.status {
        object.key("Status").string(var_1008.as_str());
    }
    if let Some(var_1009) = &input.glue_version {
        object.key("GlueVersion").string(var_1009);
    }
    if let Some(var_1010) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1010, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1011) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1011, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1012) = &input.last_modified_before {
        object
            .key("LastModifiedBefore")
            .date_time(var_1012, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1013) = &input.last_modified_after {
        object
            .key("LastModifiedAfter")
            .date_time(var_1013, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1014) = &input.schema {
        let mut array_1015 = object.key("Schema").start_array();
        for item_1016 in var_1014 {
            {
                let mut object_1017 = array_1015.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_column(
                    &mut object_1017,
                    item_1016,
                )?;
                object_1017.finish();
            }
        }
        array_1015.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1018) = &input.column {
        object.key("Column").string(var_1018.as_str());
    }
    if let Some(var_1019) = &input.sort_direction {
        object.key("SortDirection").string(var_1019.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_segment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Segment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("SegmentNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_number).into()),
        );
    }
    {
        object.key("TotalSegments").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_segments).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MappingEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1020) = &input.source_table {
        object.key("SourceTable").string(var_1020);
    }
    if let Some(var_1021) = &input.source_path {
        object.key("SourcePath").string(var_1021);
    }
    if let Some(var_1022) = &input.source_type {
        object.key("SourceType").string(var_1022);
    }
    if let Some(var_1023) = &input.target_table {
        object.key("TargetTable").string(var_1023);
    }
    if let Some(var_1024) = &input.target_path {
        object.key("TargetPath").string(var_1024);
    }
    if let Some(var_1025) = &input.target_type {
        object.key("TargetType").string(var_1025);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_version_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaVersionNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.latest_version {
        object.key("LatestVersion").boolean(input.latest_version);
    }
    if input.version_number != 0 {
        object.key("VersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.version_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_encryption_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogEncryptionSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1026) = &input.encryption_at_rest {
        let mut object_1027 = object.key("EncryptionAtRest").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_at_rest(
            &mut object_1027,
            var_1026,
        )?;
        object_1027.finish();
    }
    if let Some(var_1028) = &input.connection_password_encryption {
        let mut object_1029 = object.key("ConnectionPasswordEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_password_encryption(
            &mut object_1029,
            var_1028,
        )?;
        object_1029.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_key_value_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataKeyValuePair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1030) = &input.metadata_key {
        object.key("MetadataKey").string(var_1030);
    }
    if let Some(var_1031) = &input.metadata_value {
        object.key("MetadataValue").string(var_1031);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1032) = &input.key {
        object.key("Key").string(var_1032);
    }
    if let Some(var_1033) = &input.value {
        object.key("Value").string(var_1033);
    }
    if let Some(var_1034) = &input.comparator {
        object.key("Comparator").string(var_1034.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criterion(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1035) = &input.field_name {
        object.key("FieldName").string(var_1035);
    }
    if let Some(var_1036) = &input.sort {
        object.key("Sort").string(var_1036.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1037) = &input.name {
        object.key("Name").string(var_1037);
    }
    if let Some(var_1038) = &input.classification {
        object.key("Classification").string(var_1038);
    }
    if let Some(var_1039) = &input.grok_pattern {
        object.key("GrokPattern").string(var_1039);
    }
    if let Some(var_1040) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_1040);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1041) = &input.name {
        object.key("Name").string(var_1041);
    }
    if let Some(var_1042) = &input.classification {
        object.key("Classification").string(var_1042);
    }
    if let Some(var_1043) = &input.row_tag {
        object.key("RowTag").string(var_1043);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1044) = &input.name {
        object.key("Name").string(var_1044);
    }
    if let Some(var_1045) = &input.json_path {
        object.key("JsonPath").string(var_1045);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1046) = &input.name {
        object.key("Name").string(var_1046);
    }
    if let Some(var_1047) = &input.delimiter {
        object.key("Delimiter").string(var_1047);
    }
    if let Some(var_1048) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_1048);
    }
    if let Some(var_1049) = &input.contains_header {
        object.key("ContainsHeader").string(var_1049.as_str());
    }
    if let Some(var_1050) = &input.header {
        let mut array_1051 = object.key("Header").start_array();
        for item_1052 in var_1050 {
            {
                array_1051.value().string(item_1052);
            }
        }
        array_1051.finish();
    }
    if let Some(var_1053) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_1053);
    }
    if let Some(var_1054) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_1054);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatistics,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1055) = &input.column_name {
        object.key("ColumnName").string(var_1055);
    }
    if let Some(var_1056) = &input.column_type {
        object.key("ColumnType").string(var_1056);
    }
    if let Some(var_1057) = &input.analyzed_time {
        object
            .key("AnalyzedTime")
            .date_time(var_1057, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1058) = &input.statistics_data {
        let mut object_1059 = object.key("StatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_column_statistics_data(
            &mut object_1059,
            var_1058,
        )?;
        object_1059.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dev_endpoint_custom_libraries(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DevEndpointCustomLibraries,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1060) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_1060);
    }
    if let Some(var_1061) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_1061);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1062) = &input.description {
        object.key("Description").string(var_1062);
    }
    if let Some(var_1063) = &input.log_uri {
        object.key("LogUri").string(var_1063);
    }
    if let Some(var_1064) = &input.role {
        object.key("Role").string(var_1064);
    }
    if let Some(var_1065) = &input.execution_property {
        let mut object_1066 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_1066,
            var_1065,
        )?;
        object_1066.finish();
    }
    if let Some(var_1067) = &input.command {
        let mut object_1068 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_1068, var_1067)?;
        object_1068.finish();
    }
    if let Some(var_1069) = &input.default_arguments {
        let mut object_1070 = object.key("DefaultArguments").start_object();
        for (key_1071, value_1072) in var_1069 {
            {
                object_1070.key(key_1071).string(value_1072);
            }
        }
        object_1070.finish();
    }
    if let Some(var_1073) = &input.non_overridable_arguments {
        let mut object_1074 = object.key("NonOverridableArguments").start_object();
        for (key_1075, value_1076) in var_1073 {
            {
                object_1074.key(key_1075).string(value_1076);
            }
        }
        object_1074.finish();
    }
    if let Some(var_1077) = &input.connections {
        let mut object_1078 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_1078,
            var_1077,
        )?;
        object_1078.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_1079) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1079).into()),
        );
    }
    if let Some(var_1080) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1080).into()),
        );
    }
    if let Some(var_1081) = &input.worker_type {
        object.key("WorkerType").string(var_1081.as_str());
    }
    if let Some(var_1082) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1082).into()),
        );
    }
    if let Some(var_1083) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_1083);
    }
    if let Some(var_1084) = &input.notification_property {
        let mut object_1085 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_1085,
            var_1084,
        )?;
        object_1085.finish();
    }
    if let Some(var_1086) = &input.glue_version {
        object.key("GlueVersion").string(var_1086);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1087) = &input.name {
        object.key("Name").string(var_1087);
    }
    if let Some(var_1088) = &input.description {
        object.key("Description").string(var_1088);
    }
    if let Some(var_1089) = &input.schedule {
        object.key("Schedule").string(var_1089);
    }
    if let Some(var_1090) = &input.actions {
        let mut array_1091 = object.key("Actions").start_array();
        for item_1092 in var_1090 {
            {
                let mut object_1093 = array_1091.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(
                    &mut object_1093,
                    item_1092,
                )?;
                object_1093.finish();
            }
        }
        array_1091.finish();
    }
    if let Some(var_1094) = &input.predicate {
        let mut object_1095 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_1095, var_1094)?;
        object_1095.finish();
    }
    if let Some(var_1096) = &input.event_batching_condition {
        let mut object_1097 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_1097,
            var_1096,
        )?;
        object_1097.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1098) = &input.columns {
        let mut array_1099 = object.key("Columns").start_array();
        for item_1100 in var_1098 {
            {
                let mut object_1101 = array_1099.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(
                    &mut object_1101,
                    item_1100,
                )?;
                object_1101.finish();
            }
        }
        array_1099.finish();
    }
    if let Some(var_1102) = &input.location {
        object.key("Location").string(var_1102);
    }
    if let Some(var_1103) = &input.input_format {
        object.key("InputFormat").string(var_1103);
    }
    if let Some(var_1104) = &input.output_format {
        object.key("OutputFormat").string(var_1104);
    }
    if input.compressed {
        object.key("Compressed").boolean(input.compressed);
    }
    if input.number_of_buckets != 0 {
        object.key("NumberOfBuckets").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_buckets).into()),
        );
    }
    if let Some(var_1105) = &input.serde_info {
        let mut object_1106 = object.key("SerdeInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_ser_de_info(&mut object_1106, var_1105)?;
        object_1106.finish();
    }
    if let Some(var_1107) = &input.bucket_columns {
        let mut array_1108 = object.key("BucketColumns").start_array();
        for item_1109 in var_1107 {
            {
                array_1108.value().string(item_1109);
            }
        }
        array_1108.finish();
    }
    if let Some(var_1110) = &input.sort_columns {
        let mut array_1111 = object.key("SortColumns").start_array();
        for item_1112 in var_1110 {
            {
                let mut object_1113 = array_1111.value().start_object();
                crate::json_ser::serialize_structure_crate_model_order(
                    &mut object_1113,
                    item_1112,
                )?;
                object_1113.finish();
            }
        }
        array_1111.finish();
    }
    if let Some(var_1114) = &input.parameters {
        let mut object_1115 = object.key("Parameters").start_object();
        for (key_1116, value_1117) in var_1114 {
            {
                object_1115.key(key_1116).string(value_1117);
            }
        }
        object_1115.finish();
    }
    if let Some(var_1118) = &input.skewed_info {
        let mut object_1119 = object.key("SkewedInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_skewed_info(&mut object_1119, var_1118)?;
        object_1119.finish();
    }
    if input.stored_as_sub_directories {
        object
            .key("StoredAsSubDirectories")
            .boolean(input.stored_as_sub_directories);
    }
    if let Some(var_1120) = &input.schema_reference {
        let mut object_1121 = object.key("SchemaReference").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_reference(
            &mut object_1121,
            var_1120,
        )?;
        object_1121.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_physical_connection_requirements(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalConnectionRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1122) = &input.subnet_id {
        object.key("SubnetId").string(var_1122);
    }
    if let Some(var_1123) = &input.security_group_id_list {
        let mut array_1124 = object.key("SecurityGroupIdList").start_array();
        for item_1125 in var_1123 {
            {
                array_1124.value().string(item_1125);
            }
        }
        array_1124.finish();
    }
    if let Some(var_1126) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1126);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Target,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1127) = &input.path {
        object.key("Path").string(var_1127);
    }
    if let Some(var_1128) = &input.exclusions {
        let mut array_1129 = object.key("Exclusions").start_array();
        for item_1130 in var_1128 {
            {
                array_1129.value().string(item_1130);
            }
        }
        array_1129.finish();
    }
    if let Some(var_1131) = &input.connection_name {
        object.key("ConnectionName").string(var_1131);
    }
    if let Some(var_1132) = &input.sample_size {
        object.key("SampleSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1132).into()),
        );
    }
    if let Some(var_1133) = &input.event_queue_arn {
        object.key("EventQueueArn").string(var_1133);
    }
    if let Some(var_1134) = &input.dlq_event_queue_arn {
        object.key("DlqEventQueueArn").string(var_1134);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1135) = &input.connection_name {
        object.key("ConnectionName").string(var_1135);
    }
    if let Some(var_1136) = &input.path {
        object.key("Path").string(var_1136);
    }
    if let Some(var_1137) = &input.exclusions {
        let mut array_1138 = object.key("Exclusions").start_array();
        for item_1139 in var_1137 {
            {
                array_1138.value().string(item_1139);
            }
        }
        array_1138.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mongo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MongoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1140) = &input.connection_name {
        object.key("ConnectionName").string(var_1140);
    }
    if let Some(var_1141) = &input.path {
        object.key("Path").string(var_1141);
    }
    if let Some(var_1142) = &input.scan_all {
        object.key("ScanAll").boolean(*var_1142);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1143) = &input.path {
        object.key("Path").string(var_1143);
    }
    if let Some(var_1144) = &input.scan_all {
        object.key("scanAll").boolean(*var_1144);
    }
    if let Some(var_1145) = &input.scan_rate {
        object.key("scanRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1145).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1146) = &input.database_name {
        object.key("DatabaseName").string(var_1146);
    }
    if let Some(var_1147) = &input.tables {
        let mut array_1148 = object.key("Tables").start_array();
        for item_1149 in var_1147 {
            {
                array_1148.value().string(item_1149);
            }
        }
        array_1148.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal_permissions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrincipalPermissions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1150) = &input.principal {
        let mut object_1151 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_crate_model_data_lake_principal(
            &mut object_1151,
            var_1150,
        )?;
        object_1151.finish();
    }
    if let Some(var_1152) = &input.permissions {
        let mut array_1153 = object.key("Permissions").start_array();
        for item_1154 in var_1152 {
            {
                array_1153.value().string(item_1154.as_str());
            }
        }
        array_1153.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1155) = &input.catalog_id {
        object.key("CatalogId").string(var_1155);
    }
    if let Some(var_1156) = &input.database_name {
        object.key("DatabaseName").string(var_1156);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_find_matches_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindMatchesParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1157) = &input.primary_key_column_name {
        object.key("PrimaryKeyColumnName").string(var_1157);
    }
    if let Some(var_1158) = &input.precision_recall_tradeoff {
        object.key("PrecisionRecallTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1158).into()),
        );
    }
    if let Some(var_1159) = &input.accuracy_cost_tradeoff {
        object.key("AccuracyCostTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1159).into()),
        );
    }
    if let Some(var_1160) = &input.enforce_provided_labels {
        object.key("EnforceProvidedLabels").boolean(*var_1160);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ml_user_data_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MlUserDataEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1161) = &input.ml_user_data_encryption_mode {
        object
            .key("MlUserDataEncryptionMode")
            .string(var_1161.as_str());
    }
    if let Some(var_1162) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1162);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node_arg(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNodeArg,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1163) = &input.name {
        object.key("Name").string(var_1163);
    }
    if let Some(var_1164) = &input.value {
        object.key("Value").string(var_1164);
    }
    if input.param {
        object.key("Param").boolean(input.param);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Encryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1165) = &input.s3_encryption_mode {
        object.key("S3EncryptionMode").string(var_1165.as_str());
    }
    if let Some(var_1166) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1166);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1167) = &input.cloud_watch_encryption_mode {
        object
            .key("CloudWatchEncryptionMode")
            .string(var_1167.as_str());
    }
    if let Some(var_1168) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1168);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_bookmarks_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobBookmarksEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1169) = &input.job_bookmarks_encryption_mode {
        object
            .key("JobBookmarksEncryptionMode")
            .string(var_1169.as_str());
    }
    if let Some(var_1170) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1170);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Column,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1171) = &input.name {
        object.key("Name").string(var_1171);
    }
    if let Some(var_1172) = &input.r#type {
        object.key("Type").string(var_1172);
    }
    if let Some(var_1173) = &input.comment {
        object.key("Comment").string(var_1173);
    }
    if let Some(var_1174) = &input.parameters {
        let mut object_1175 = object.key("Parameters").start_object();
        for (key_1176, value_1177) in var_1174 {
            {
                object_1175.key(key_1176).string(value_1177);
            }
        }
        object_1175.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1178) = &input.catalog_id {
        object.key("CatalogId").string(var_1178);
    }
    if let Some(var_1179) = &input.database_name {
        object.key("DatabaseName").string(var_1179);
    }
    if let Some(var_1180) = &input.name {
        object.key("Name").string(var_1180);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1181) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1181.as_str());
    }
    if let Some(var_1182) = &input.job_name {
        object.key("JobName").string(var_1182);
    }
    if let Some(var_1183) = &input.state {
        object.key("State").string(var_1183.as_str());
    }
    if let Some(var_1184) = &input.crawler_name {
        object.key("CrawlerName").string(var_1184);
    }
    if let Some(var_1185) = &input.crawl_state {
        object.key("CrawlState").string(var_1185.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_uri(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceUri,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1186) = &input.resource_type {
        object.key("ResourceType").string(var_1186.as_str());
    }
    if let Some(var_1187) = &input.uri {
        object.key("Uri").string(var_1187);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1188) = &input.name {
        object.key("Name").string(var_1188);
    }
    if let Some(var_1189) = &input.data_type {
        object.key("DataType").string(var_1189);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_at_rest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionAtRest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1190) = &input.catalog_encryption_mode {
        object
            .key("CatalogEncryptionMode")
            .string(var_1190.as_str());
    }
    if let Some(var_1191) = &input.sse_aws_kms_key_id {
        object.key("SseAwsKmsKeyId").string(var_1191);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_password_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionPasswordEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("ReturnConnectionPasswordEncrypted")
            .boolean(input.return_connection_password_encrypted);
    }
    if let Some(var_1192) = &input.aws_kms_key_id {
        object.key("AwsKmsKeyId").string(var_1192);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1193) = &input.r#type {
        object.key("Type").string(var_1193.as_str());
    }
    if let Some(var_1194) = &input.boolean_column_statistics_data {
        let mut object_1195 = object.key("BooleanColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_boolean_column_statistics_data(
            &mut object_1195,
            var_1194,
        )?;
        object_1195.finish();
    }
    if let Some(var_1196) = &input.date_column_statistics_data {
        let mut object_1197 = object.key("DateColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_date_column_statistics_data(
            &mut object_1197,
            var_1196,
        )?;
        object_1197.finish();
    }
    if let Some(var_1198) = &input.decimal_column_statistics_data {
        let mut object_1199 = object.key("DecimalColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_column_statistics_data(
            &mut object_1199,
            var_1198,
        )?;
        object_1199.finish();
    }
    if let Some(var_1200) = &input.double_column_statistics_data {
        let mut object_1201 = object.key("DoubleColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_double_column_statistics_data(
            &mut object_1201,
            var_1200,
        )?;
        object_1201.finish();
    }
    if let Some(var_1202) = &input.long_column_statistics_data {
        let mut object_1203 = object.key("LongColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_long_column_statistics_data(
            &mut object_1203,
            var_1202,
        )?;
        object_1203.finish();
    }
    if let Some(var_1204) = &input.string_column_statistics_data {
        let mut object_1205 = object.key("StringColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_string_column_statistics_data(
            &mut object_1205,
            var_1204,
        )?;
        object_1205.finish();
    }
    if let Some(var_1206) = &input.binary_column_statistics_data {
        let mut object_1207 = object.key("BinaryColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_binary_column_statistics_data(
            &mut object_1207,
            var_1206,
        )?;
        object_1207.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ser_de_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SerDeInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1208) = &input.name {
        object.key("Name").string(var_1208);
    }
    if let Some(var_1209) = &input.serialization_library {
        object.key("SerializationLibrary").string(var_1209);
    }
    if let Some(var_1210) = &input.parameters {
        let mut object_1211 = object.key("Parameters").start_object();
        for (key_1212, value_1213) in var_1210 {
            {
                object_1211.key(key_1212).string(value_1213);
            }
        }
        object_1211.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_order(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Order,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1214) = &input.column {
        object.key("Column").string(var_1214);
    }
    {
        object.key("SortOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sort_order).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_skewed_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SkewedInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1215) = &input.skewed_column_names {
        let mut array_1216 = object.key("SkewedColumnNames").start_array();
        for item_1217 in var_1215 {
            {
                array_1216.value().string(item_1217);
            }
        }
        array_1216.finish();
    }
    if let Some(var_1218) = &input.skewed_column_values {
        let mut array_1219 = object.key("SkewedColumnValues").start_array();
        for item_1220 in var_1218 {
            {
                array_1219.value().string(item_1220);
            }
        }
        array_1219.finish();
    }
    if let Some(var_1221) = &input.skewed_column_value_location_maps {
        let mut object_1222 = object.key("SkewedColumnValueLocationMaps").start_object();
        for (key_1223, value_1224) in var_1221 {
            {
                object_1222.key(key_1223).string(value_1224);
            }
        }
        object_1222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1225) = &input.schema_id {
        let mut object_1226 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_1226, var_1225)?;
        object_1226.finish();
    }
    if let Some(var_1227) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_1227);
    }
    if let Some(var_1228) = &input.schema_version_number {
        object.key("SchemaVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1228).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_lake_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataLakePrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1229) = &input.data_lake_principal_identifier {
        object.key("DataLakePrincipalIdentifier").string(var_1229);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_boolean_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BooleanColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("NumberOfTrues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_trues).into()),
        );
    }
    {
        object.key("NumberOfFalses").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_falses).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1230) = &input.minimum_value {
        object
            .key("MinimumValue")
            .date_time(var_1230, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1231) = &input.maximum_value {
        object
            .key("MaximumValue")
            .date_time(var_1231, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1232) = &input.minimum_value {
        let mut object_1233 = object.key("MinimumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_1233,
            var_1232,
        )?;
        object_1233.finish();
    }
    if let Some(var_1234) = &input.maximum_value {
        let mut object_1235 = object.key("MaximumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_1235,
            var_1234,
        )?;
        object_1235.finish();
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_double_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DoubleColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0.0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0.0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_long_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LongColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_binary_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BinaryColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1236) = &input.unscaled_value {
        object
            .key("UnscaledValue")
            .string_unchecked(&aws_smithy_types::base64::encode(var_1236));
    }
    {
        object.key("Scale").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.scale).into()),
        );
    }
    Ok(())
}
