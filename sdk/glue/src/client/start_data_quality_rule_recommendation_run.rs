// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartDataQualityRuleRecommendationRun`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`data_source(DataSource)`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::data_source) / [`set_data_source(Option<DataSource>)`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::set_data_source): <p>The data source (Glue table) associated with this run.</p>
    ///   - [`role(impl Into<String>)`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::role) / [`set_role(Option<String>)`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::set_role): <p>An IAM role supplied to encrypt the results of the run.</p>
    ///   - [`number_of_workers(i32)`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::number_of_workers) / [`set_number_of_workers(Option<i32>)`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::set_number_of_workers): <p>The number of <code>G.1X</code> workers to be used in the run. The default is 5.</p>
    ///   - [`timeout(i32)`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::timeout) / [`set_timeout(Option<i32>)`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::set_timeout): <p>The timeout for a run in minutes. This is the maximum time that a run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>
    ///   - [`created_ruleset_name(impl Into<String>)`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::created_ruleset_name) / [`set_created_ruleset_name(Option<String>)`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::set_created_ruleset_name): <p>A name for the ruleset.</p>
    ///   - [`client_token(impl Into<String>)`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::set_client_token): <p>Used for idempotency and is recommended to be set to a random ID (such as a UUID) to avoid creating or starting multiple instances of the same resource.</p>
    /// - On success, responds with [`StartDataQualityRuleRecommendationRunOutput`](crate::operation::start_data_quality_rule_recommendation_run::StartDataQualityRuleRecommendationRunOutput) with field(s):
    ///   - [`run_id(Option<String>)`](crate::operation::start_data_quality_rule_recommendation_run::StartDataQualityRuleRecommendationRunOutput::run_id): <p>The unique run identifier associated with this run.</p>
    /// - On failure, responds with [`SdkError<StartDataQualityRuleRecommendationRunError>`](crate::operation::start_data_quality_rule_recommendation_run::StartDataQualityRuleRecommendationRunError)
    pub fn start_data_quality_rule_recommendation_run(&self) -> crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder{
        crate::operation::start_data_quality_rule_recommendation_run::builders::StartDataQualityRuleRecommendationRunFluentBuilder::new(self.handle.clone())
    }
}
