// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchStopJobRun`](crate::operation::batch_stop_job_run::builders::BatchStopJobRunFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_name(impl Into<String>)`](crate::operation::batch_stop_job_run::builders::BatchStopJobRunFluentBuilder::job_name) / [`set_job_name(Option<String>)`](crate::operation::batch_stop_job_run::builders::BatchStopJobRunFluentBuilder::set_job_name): <p>The name of the job definition for which to stop job runs.</p>
    ///   - [`job_run_ids(Vec<String>)`](crate::operation::batch_stop_job_run::builders::BatchStopJobRunFluentBuilder::job_run_ids) / [`set_job_run_ids(Option<Vec<String>>)`](crate::operation::batch_stop_job_run::builders::BatchStopJobRunFluentBuilder::set_job_run_ids): <p>A list of the <code>JobRunIds</code> that should be stopped for that job definition.</p>
    /// - On success, responds with [`BatchStopJobRunOutput`](crate::operation::batch_stop_job_run::BatchStopJobRunOutput) with field(s):
    ///   - [`successful_submissions(Option<Vec<BatchStopJobRunSuccessfulSubmission>>)`](crate::operation::batch_stop_job_run::BatchStopJobRunOutput::successful_submissions): <p>A list of the JobRuns that were successfully submitted for stopping.</p>
    ///   - [`errors(Option<Vec<BatchStopJobRunError>>)`](crate::operation::batch_stop_job_run::BatchStopJobRunOutput::errors): <p>A list of the errors that were encountered in trying to stop <code>JobRuns</code>, including the <code>JobRunId</code> for which each error was encountered and details about the error.</p>
    /// - On failure, responds with [`SdkError<BatchStopJobRunError>`](crate::operation::batch_stop_job_run::BatchStopJobRunError)
    pub fn batch_stop_job_run(
        &self,
    ) -> crate::operation::batch_stop_job_run::builders::BatchStopJobRunFluentBuilder {
        crate::operation::batch_stop_job_run::builders::BatchStopJobRunFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
