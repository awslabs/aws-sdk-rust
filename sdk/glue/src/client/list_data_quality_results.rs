// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListDataQualityResults`](crate::client::fluent_builders::ListDataQualityResults) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDataQualityResults::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filter(DataQualityResultFilterCriteria)`](crate::client::fluent_builders::ListDataQualityResults::filter) / [`set_filter(Option<DataQualityResultFilterCriteria>)`](crate::client::fluent_builders::ListDataQualityResults::set_filter): <p>The filter criteria.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDataQualityResults::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDataQualityResults::set_next_token): <p>A paginated token to offset the results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDataQualityResults::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDataQualityResults::set_max_results): <p>The maximum number of results to return.</p>
    /// - On success, responds with [`ListDataQualityResultsOutput`](crate::output::ListDataQualityResultsOutput) with field(s):
    ///   - [`results(Option<Vec<DataQualityResultDescription>>)`](crate::output::ListDataQualityResultsOutput::results): <p>A list of <code>DataQualityResultDescription</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDataQualityResultsOutput::next_token): <p>A pagination token, if more results are available.</p>
    /// - On failure, responds with [`SdkError<ListDataQualityResultsError>`](crate::error::ListDataQualityResultsError)
    pub fn list_data_quality_results(
        &self,
    ) -> crate::client::fluent_builders::ListDataQualityResults {
        crate::client::fluent_builders::ListDataQualityResults::new(self.handle.clone())
    }
}
