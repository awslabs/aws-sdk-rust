// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetUnfilteredPartitionsMetadata`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`catalog_id(impl Into<String>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::catalog_id) / [`set_catalog_id(Option<String>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::set_catalog_id):<br>required: **true**<br><p>The ID of the Data Catalog where the partitions in question reside. If none is provided, the AWS account ID is used by default. </p><br>
    ///   - [`database_name(impl Into<String>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::database_name) / [`set_database_name(Option<String>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::set_database_name):<br>required: **true**<br><p>The name of the catalog database where the partitions reside.</p><br>
    ///   - [`table_name(impl Into<String>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::table_name) / [`set_table_name(Option<String>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::set_table_name):<br>required: **true**<br><p>The name of the table that contains the partition.</p><br>
    ///   - [`expression(impl Into<String>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::expression) / [`set_expression(Option<String>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::set_expression):<br>required: **false**<br><p>An expression that filters the partitions to be returned.</p>  <p>The expression uses SQL syntax similar to the SQL <code>WHERE</code> filter clause. The SQL statement parser <a href="http://jsqlparser.sourceforge.net/home.php">JSQLParser</a> parses the expression. </p>  <p> <i>Operators</i>: The following are the operators that you can use in the <code>Expression</code> API call:</p>  <dl>   <dt>   =  </dt>   <dd>    <p>Checks whether the values of the two operands are equal; if yes, then the condition becomes true.</p>    <p>Example: Assume 'variable a' holds 10 and 'variable b' holds 20. </p>    <p>(a = b) is not true.</p>   </dd>   <dt>   &lt; &gt;  </dt>   <dd>    <p>Checks whether the values of two operands are equal; if the values are not equal, then the condition becomes true.</p>    <p>Example: (a &lt; &gt; b) is true.</p>   </dd>   <dt>   &gt;  </dt>   <dd>    <p>Checks whether the value of the left operand is greater than the value of the right operand; if yes, then the condition becomes true.</p>    <p>Example: (a &gt; b) is not true.</p>   </dd>   <dt>   &lt;  </dt>   <dd>    <p>Checks whether the value of the left operand is less than the value of the right operand; if yes, then the condition becomes true.</p>    <p>Example: (a &lt; b) is true.</p>   </dd>   <dt>   &gt;=  </dt>   <dd>    <p>Checks whether the value of the left operand is greater than or equal to the value of the right operand; if yes, then the condition becomes true.</p>    <p>Example: (a &gt;= b) is not true.</p>   </dd>   <dt>   &lt;=  </dt>   <dd>    <p>Checks whether the value of the left operand is less than or equal to the value of the right operand; if yes, then the condition becomes true.</p>    <p>Example: (a &lt;= b) is true.</p>   </dd>   <dt>   AND, OR, IN, BETWEEN, LIKE, NOT, IS NULL  </dt>   <dd>    <p>Logical operators.</p>   </dd>  </dl>  <p> <i>Supported Partition Key Types</i>: The following are the supported partition keys.</p>  <ul>   <li> <p> <code>string</code> </p> </li>   <li> <p> <code>date</code> </p> </li>   <li> <p> <code>timestamp</code> </p> </li>   <li> <p> <code>int</code> </p> </li>   <li> <p> <code>bigint</code> </p> </li>   <li> <p> <code>long</code> </p> </li>   <li> <p> <code>tinyint</code> </p> </li>   <li> <p> <code>smallint</code> </p> </li>   <li> <p> <code>decimal</code> </p> </li>  </ul>  <p>If an type is encountered that is not valid, an exception is thrown. </p><br>
    ///   - [`audit_context(AuditContext)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::audit_context) / [`set_audit_context(Option<AuditContext>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::set_audit_context):<br>required: **false**<br><p>A structure containing Lake Formation audit context information.</p><br>
    ///   - [`supported_permission_types(PermissionType)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::supported_permission_types) / [`set_supported_permission_types(Option<Vec::<PermissionType>>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::set_supported_permission_types):<br>required: **true**<br><p>A list of supported permission types. </p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::set_next_token):<br>required: **false**<br><p>A continuation token, if this is not the first call to retrieve these partitions.</p><br>
    ///   - [`segment(Segment)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::segment) / [`set_segment(Option<Segment>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::set_segment):<br>required: **false**<br><p>The segment of the table's partitions to scan in this request.</p><br>
    ///   - [`max_results(i32)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of partitions to return in a single response.</p><br>
    /// - On success, responds with [`GetUnfilteredPartitionsMetadataOutput`](crate::operation::get_unfiltered_partitions_metadata::GetUnfilteredPartitionsMetadataOutput) with field(s):
    ///   - [`unfiltered_partitions(Option<Vec::<UnfilteredPartition>>)`](crate::operation::get_unfiltered_partitions_metadata::GetUnfilteredPartitionsMetadataOutput::unfiltered_partitions): <p>A list of requested partitions.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::get_unfiltered_partitions_metadata::GetUnfilteredPartitionsMetadataOutput::next_token): <p>A continuation token, if the returned list of partitions does not include the last one.</p>
    /// - On failure, responds with [`SdkError<GetUnfilteredPartitionsMetadataError>`](crate::operation::get_unfiltered_partitions_metadata::GetUnfilteredPartitionsMetadataError)
    pub fn get_unfiltered_partitions_metadata(
        &self,
    ) -> crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder {
        crate::operation::get_unfiltered_partitions_metadata::builders::GetUnfilteredPartitionsMetadataFluentBuilder::new(self.handle.clone())
    }
}
