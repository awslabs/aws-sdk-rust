// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDevEndpoint`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`endpoint_name(impl Into<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::endpoint_name) / [`set_endpoint_name(Option<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_endpoint_name): <p>The name to be assigned to the new <code>DevEndpoint</code>.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_role_arn): <p>The IAM role for the <code>DevEndpoint</code>.</p>
    ///   - [`security_group_ids(Vec<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::security_group_ids) / [`set_security_group_ids(Option<Vec<String>>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_security_group_ids): <p>Security group IDs for the security groups to be used by the new <code>DevEndpoint</code>.</p>
    ///   - [`subnet_id(impl Into<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::subnet_id) / [`set_subnet_id(Option<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_subnet_id): <p>The subnet ID for the new <code>DevEndpoint</code> to use.</p>
    ///   - [`public_key(impl Into<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::public_key) / [`set_public_key(Option<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_public_key): <p>The public key to be used by this <code>DevEndpoint</code> for authentication. This attribute is provided for backward compatibility because the recommended attribute to use is public keys.</p>
    ///   - [`public_keys(Vec<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::public_keys) / [`set_public_keys(Option<Vec<String>>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_public_keys): <p>A list of public keys to be used by the development endpoints for authentication. The use of this attribute is preferred over a single public key because the public keys allow you to have a different private key per client.</p> <note>   <p>If you previously created an endpoint with a public key, you must remove that key to be able to set a list of public keys. Call the <code>UpdateDevEndpoint</code> API with the public key content in the <code>deletePublicKeys</code> attribute, and the list of new keys in the <code>addPublicKeys</code> attribute.</p>  </note>
    ///   - [`number_of_nodes(i32)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::number_of_nodes) / [`set_number_of_nodes(i32)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_number_of_nodes): <p>The number of Glue Data Processing Units (DPUs) to allocate to this <code>DevEndpoint</code>.</p>
    ///   - [`worker_type(WorkerType)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::worker_type) / [`set_worker_type(Option<WorkerType>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_worker_type): <p>The type of predefined worker that is allocated to the development endpoint. Accepts a value of Standard, G.1X, or G.2X.</p>  <ul>   <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li>   <li> <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li>   <li> <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p> </li>  </ul>  <p>Known issue: when a development endpoint is created with the <code>G.2X</code> <code>WorkerType</code> configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB of memory, and a 64 GB disk. </p>
    ///   - [`glue_version(impl Into<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::glue_version) / [`set_glue_version(Option<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_glue_version): <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p>  <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>  <p>Development endpoints that are created without specifying a Glue version default to Glue 0.9.</p>  <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    ///   - [`number_of_workers(i32)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::number_of_workers) / [`set_number_of_workers(Option<i32>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_number_of_workers): <p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p>  <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>
    ///   - [`extra_python_libs_s3_path(impl Into<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::extra_python_libs_s3_path) / [`set_extra_python_libs_s3_path(Option<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_extra_python_libs_s3_path): <p>The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in your <code>DevEndpoint</code>. Multiple values must be complete paths separated by a comma.</p> <note>   <p>You can only use pure Python libraries with a <code>DevEndpoint</code>. Libraries that rely on C extensions, such as the <a href="http://pandas.pydata.org/">pandas</a> Python data analysis library, are not yet supported.</p>  </note>
    ///   - [`extra_jars_s3_path(impl Into<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::extra_jars_s3_path) / [`set_extra_jars_s3_path(Option<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_extra_jars_s3_path): <p>The path to one or more Java <code>.jar</code> files in an S3 bucket that should be loaded in your <code>DevEndpoint</code>.</p>
    ///   - [`security_configuration(impl Into<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::security_configuration) / [`set_security_configuration(Option<String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_security_configuration): <p>The name of the <code>SecurityConfiguration</code> structure to be used with this <code>DevEndpoint</code>.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_tags): <p>The tags to use with this DevEndpoint. You may use tags to limit access to the DevEndpoint. For more information about tags in Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">Amazon Web Services Tags in Glue</a> in the developer guide.</p>
    ///   - [`arguments(HashMap<String, String>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::arguments) / [`set_arguments(Option<HashMap<String, String>>)`](crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::set_arguments): <p>A map of arguments used to configure the <code>DevEndpoint</code>.</p>
    /// - On success, responds with [`CreateDevEndpointOutput`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput) with field(s):
    ///   - [`endpoint_name(Option<String>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::endpoint_name): <p>The name assigned to the new <code>DevEndpoint</code>.</p>
    ///   - [`status(Option<String>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::status): <p>The current status of the new <code>DevEndpoint</code>.</p>
    ///   - [`security_group_ids(Option<Vec<String>>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::security_group_ids): <p>The security groups assigned to the new <code>DevEndpoint</code>.</p>
    ///   - [`subnet_id(Option<String>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::subnet_id): <p>The subnet ID assigned to the new <code>DevEndpoint</code>.</p>
    ///   - [`role_arn(Option<String>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::role_arn): <p>The Amazon Resource Name (ARN) of the role assigned to the new <code>DevEndpoint</code>.</p>
    ///   - [`yarn_endpoint_address(Option<String>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::yarn_endpoint_address): <p>The address of the YARN endpoint used by this <code>DevEndpoint</code>.</p>
    ///   - [`zeppelin_remote_spark_interpreter_port(i32)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::zeppelin_remote_spark_interpreter_port): <p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>
    ///   - [`number_of_nodes(i32)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::number_of_nodes): <p>The number of Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>
    ///   - [`worker_type(Option<WorkerType>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::worker_type): <p>The type of predefined worker that is allocated to the development endpoint. May be a value of Standard, G.1X, or G.2X.</p>
    ///   - [`glue_version(Option<String>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::glue_version): <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p>  <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
    ///   - [`number_of_workers(Option<i32>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::number_of_workers): <p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p>
    ///   - [`availability_zone(Option<String>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::availability_zone): <p>The Amazon Web Services Availability Zone where this <code>DevEndpoint</code> is located.</p>
    ///   - [`vpc_id(Option<String>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::vpc_id): <p>The ID of the virtual private cloud (VPC) used by this <code>DevEndpoint</code>.</p>
    ///   - [`extra_python_libs_s3_path(Option<String>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::extra_python_libs_s3_path): <p>The paths to one or more Python libraries in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>
    ///   - [`extra_jars_s3_path(Option<String>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::extra_jars_s3_path): <p>Path to one or more Java <code>.jar</code> files in an S3 bucket that will be loaded in your <code>DevEndpoint</code>.</p>
    ///   - [`failure_reason(Option<String>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::failure_reason): <p>The reason for a current failure in this <code>DevEndpoint</code>.</p>
    ///   - [`security_configuration(Option<String>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::security_configuration): <p>The name of the <code>SecurityConfiguration</code> structure being used with this <code>DevEndpoint</code>.</p>
    ///   - [`created_timestamp(Option<DateTime>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::created_timestamp): <p>The point in time at which this <code>DevEndpoint</code> was created.</p>
    ///   - [`arguments(Option<HashMap<String, String>>)`](crate::operation::create_dev_endpoint::CreateDevEndpointOutput::arguments): <p>The map of arguments used to configure this <code>DevEndpoint</code>.</p>  <p>Valid arguments are:</p>  <ul>   <li> <p> <code>"--enable-glue-datacatalog": ""</code> </p> </li>  </ul>  <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
    /// - On failure, responds with [`SdkError<CreateDevEndpointError>`](crate::operation::create_dev_endpoint::CreateDevEndpointError)
    pub fn create_dev_endpoint(
        &self,
    ) -> crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder {
        crate::operation::create_dev_endpoint::builders::CreateDevEndpointFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
