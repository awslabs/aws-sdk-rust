// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetUnfilteredTableMetadata`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`region(impl Into<String>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::region) / [`set_region(Option<String>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::set_region):<br>required: **false**<br><p>Specified only if the base tables belong to a different Amazon Web Services Region.</p><br>
    ///   - [`catalog_id(impl Into<String>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::catalog_id) / [`set_catalog_id(Option<String>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::set_catalog_id):<br>required: **true**<br><p>The catalog ID where the table resides.</p><br>
    ///   - [`database_name(impl Into<String>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::database_name) / [`set_database_name(Option<String>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::set_database_name):<br>required: **true**<br><p>(Required) Specifies the name of a database that contains the table.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::set_name):<br>required: **true**<br><p>(Required) Specifies the name of a table for which you are requesting metadata.</p><br>
    ///   - [`audit_context(AuditContext)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::audit_context) / [`set_audit_context(Option<AuditContext>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::set_audit_context):<br>required: **false**<br><p>A structure containing Lake Formation audit context information.</p><br>
    ///   - [`supported_permission_types(PermissionType)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::supported_permission_types) / [`set_supported_permission_types(Option<Vec::<PermissionType>>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::set_supported_permission_types):<br>required: **true**<br><p>Indicates the level of filtering a third-party analytical engine is capable of enforcing when calling the <code>GetUnfilteredTableMetadata</code> API operation. Accepted values are:</p> <ul>  <li>   <p><code>COLUMN_PERMISSION</code> - Column permissions ensure that users can access only specific columns in the table. If there are particular columns contain sensitive data, data lake administrators can define column filters that exclude access to specific columns.</p></li>  <li>   <p><code>CELL_FILTER_PERMISSION</code> - Cell-level filtering combines column filtering (include or exclude columns) and row filter expressions to restrict access to individual elements in the table.</p></li>  <li>   <p><code>NESTED_PERMISSION</code> - Nested permissions combines cell-level filtering and nested column filtering to restrict access to columns and/or nested columns in specific rows based on row filter expressions.</p></li>  <li>   <p><code>NESTED_CELL_PERMISSION</code> - Nested cell permissions combines nested permission with nested cell-level filtering. This allows different subsets of nested columns to be restricted based on an array of row filter expressions.</p></li> </ul> <p>Note: Each of these permission types follows a hierarchical order where each subsequent permission type includes all permission of the previous type.</p> <p>Important: If you provide a supported permission type that doesn't match the user's level of permissions on the table, then Lake Formation raises an exception. For example, if the third-party engine calling the <code>GetUnfilteredTableMetadata</code> operation can enforce only column-level filtering, and the user has nested cell filtering applied on the table, Lake Formation throws an exception, and will not return unfiltered table metadata and data access credentials.</p><br>
    ///   - [`parent_resource_arn(impl Into<String>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::parent_resource_arn) / [`set_parent_resource_arn(Option<String>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::set_parent_resource_arn):<br>required: **false**<br><p>The resource ARN of the view.</p><br>
    ///   - [`root_resource_arn(impl Into<String>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::root_resource_arn) / [`set_root_resource_arn(Option<String>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::set_root_resource_arn):<br>required: **false**<br><p>The resource ARN of the root view in a chain of nested views.</p><br>
    ///   - [`supported_dialect(SupportedDialect)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::supported_dialect) / [`set_supported_dialect(Option<SupportedDialect>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::set_supported_dialect):<br>required: **false**<br><p>A structure specifying the dialect and dialect version used by the query engine.</p><br>
    ///   - [`permissions(Permission)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::permissions) / [`set_permissions(Option<Vec::<Permission>>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::set_permissions):<br>required: **false**<br><p>The Lake Formation data permissions of the caller on the table. Used to authorize the call when no view context is found.</p><br>
    ///   - [`query_session_context(QuerySessionContext)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::query_session_context) / [`set_query_session_context(Option<QuerySessionContext>)`](crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::set_query_session_context):<br>required: **false**<br><p>A structure used as a protocol between query engines and Lake Formation or Glue. Contains both a Lake Formation generated authorization identifier and information from the request's authorization context.</p><br>
    /// - On success, responds with [`GetUnfilteredTableMetadataOutput`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataOutput) with field(s):
    ///   - [`table(Option<Table>)`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataOutput::table): <p>A Table object containing the table metadata.</p>
    ///   - [`authorized_columns(Option<Vec::<String>>)`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataOutput::authorized_columns): <p>A list of column names that the user has been granted access to.</p>
    ///   - [`is_registered_with_lake_formation(bool)`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataOutput::is_registered_with_lake_formation): <p>A Boolean value that indicates whether the partition location is registered with Lake Formation.</p>
    ///   - [`cell_filters(Option<Vec::<ColumnRowFilter>>)`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataOutput::cell_filters): <p>A list of column row filters.</p>
    ///   - [`query_authorization_id(Option<String>)`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataOutput::query_authorization_id): <p>A cryptographically generated query identifier generated by Glue or Lake Formation.</p>
    ///   - [`is_multi_dialect_view(bool)`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataOutput::is_multi_dialect_view): <p>Specifies whether the view supports the SQL dialects of one or more different query engines and can therefore be read by those engines.</p>
    ///   - [`resource_arn(Option<String>)`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataOutput::resource_arn): <p>The resource ARN of the parent resource extracted from the request.</p>
    ///   - [`is_protected(bool)`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataOutput::is_protected): <p>A flag that instructs the engine not to push user-provided operations into the logical plan of the view during query planning. However, if set this flag does not guarantee that the engine will comply. Refer to the engine's documentation to understand the guarantees provided, if any.</p>
    ///   - [`permissions(Option<Vec::<Permission>>)`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataOutput::permissions): <p>The Lake Formation data permissions of the caller on the table. Used to authorize the call when no view context is found.</p>
    ///   - [`row_filter(Option<String>)`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataOutput::row_filter): <p>The filter that applies to the table. For example when applying the filter in SQL, it would go in the <code>WHERE</code> clause and can be evaluated by using an <code>AND</code> operator with any other predicates applied by the user querying the table.</p>
    /// - On failure, responds with [`SdkError<GetUnfilteredTableMetadataError>`](crate::operation::get_unfiltered_table_metadata::GetUnfilteredTableMetadataError)
    pub fn get_unfiltered_table_metadata(
        &self,
    ) -> crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder {
        crate::operation::get_unfiltered_table_metadata::builders::GetUnfilteredTableMetadataFluentBuilder::new(self.handle.clone())
    }
}
