// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RegisterSchemaVersion`](crate::operation::register_schema_version::builders::RegisterSchemaVersionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`schema_id(SchemaId)`](crate::operation::register_schema_version::builders::RegisterSchemaVersionFluentBuilder::schema_id) / [`set_schema_id(Option<SchemaId>)`](crate::operation::register_schema_version::builders::RegisterSchemaVersionFluentBuilder::set_schema_id): <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>  <ul>   <li> <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li>   <li> <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p> </li>  </ul>
    ///   - [`schema_definition(impl Into<String>)`](crate::operation::register_schema_version::builders::RegisterSchemaVersionFluentBuilder::schema_definition) / [`set_schema_definition(Option<String>)`](crate::operation::register_schema_version::builders::RegisterSchemaVersionFluentBuilder::set_schema_definition): <p>The schema definition using the <code>DataFormat</code> setting for the <code>SchemaName</code>.</p>
    /// - On success, responds with [`RegisterSchemaVersionOutput`](crate::operation::register_schema_version::RegisterSchemaVersionOutput) with field(s):
    ///   - [`schema_version_id(Option<String>)`](crate::operation::register_schema_version::RegisterSchemaVersionOutput::schema_version_id): <p>The unique ID that represents the version of this schema.</p>
    ///   - [`version_number(i64)`](crate::operation::register_schema_version::RegisterSchemaVersionOutput::version_number): <p>The version of this schema (for sync flow only, in case this is the first version).</p>
    ///   - [`status(Option<SchemaVersionStatus>)`](crate::operation::register_schema_version::RegisterSchemaVersionOutput::status): <p>The status of the schema version.</p>
    /// - On failure, responds with [`SdkError<RegisterSchemaVersionError>`](crate::operation::register_schema_version::RegisterSchemaVersionError)
    pub fn register_schema_version(
        &self,
    ) -> crate::operation::register_schema_version::builders::RegisterSchemaVersionFluentBuilder
    {
        crate::operation::register_schema_version::builders::RegisterSchemaVersionFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
