// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateCustomEntityType`](crate::client::fluent_builders::CreateCustomEntityType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateCustomEntityType::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateCustomEntityType::set_name): <p>A name for the custom pattern that allows it to be retrieved or deleted later. This name must be unique per Amazon Web Services account.</p>
    ///   - [`regex_string(impl Into<String>)`](crate::client::fluent_builders::CreateCustomEntityType::regex_string) / [`set_regex_string(Option<String>)`](crate::client::fluent_builders::CreateCustomEntityType::set_regex_string): <p>A regular expression string that is used for detecting sensitive data in a custom pattern.</p>
    ///   - [`context_words(Vec<String>)`](crate::client::fluent_builders::CreateCustomEntityType::context_words) / [`set_context_words(Option<Vec<String>>)`](crate::client::fluent_builders::CreateCustomEntityType::set_context_words): <p>A list of context words. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.</p>  <p>If no context words are passed only a regular expression is checked.</p>
    /// - On success, responds with [`CreateCustomEntityTypeOutput`](crate::output::CreateCustomEntityTypeOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::CreateCustomEntityTypeOutput::name): <p>The name of the custom pattern you created.</p>
    /// - On failure, responds with [`SdkError<CreateCustomEntityTypeError>`](crate::error::CreateCustomEntityTypeError)
    pub fn create_custom_entity_type(
        &self,
    ) -> crate::client::fluent_builders::CreateCustomEntityType {
        crate::client::fluent_builders::CreateCustomEntityType::new(self.handle.clone())
    }
}
