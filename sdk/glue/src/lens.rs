// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_blueprint_runs_output_output_next_token(
    input: &crate::operation::get_blueprint_runs::GetBlueprintRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_classifiers_output_output_next_token(
    input: &crate::operation::get_classifiers::GetClassifiersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_column_statistics_task_runs_output_output_next_token(
    input: &crate::operation::get_column_statistics_task_runs::GetColumnStatisticsTaskRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_connections_output_output_next_token(
    input: &crate::operation::get_connections::GetConnectionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_crawler_metrics_output_output_next_token(
    input: &crate::operation::get_crawler_metrics::GetCrawlerMetricsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_crawlers_output_output_next_token(
    input: &crate::operation::get_crawlers::GetCrawlersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_databases_output_output_next_token(
    input: &crate::operation::get_databases::GetDatabasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_dev_endpoints_output_output_next_token(
    input: &crate::operation::get_dev_endpoints::GetDevEndpointsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_job_runs_output_output_next_token(
    input: &crate::operation::get_job_runs::GetJobRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_jobs_output_output_next_token(
    input: &crate::operation::get_jobs::GetJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_ml_task_runs_output_output_next_token(
    input: &crate::operation::get_ml_task_runs::GetMlTaskRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_ml_transforms_output_output_next_token(
    input: &crate::operation::get_ml_transforms::GetMlTransformsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_partition_indexes_output_output_next_token(
    input: &crate::operation::get_partition_indexes::GetPartitionIndexesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_partitions_output_output_next_token(
    input: &crate::operation::get_partitions::GetPartitionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_resource_policies_output_output_next_token(
    input: &crate::operation::get_resource_policies::GetResourcePoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_security_configurations_output_output_next_token(
    input: &crate::operation::get_security_configurations::GetSecurityConfigurationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_table_versions_output_output_next_token(
    input: &crate::operation::get_table_versions::GetTableVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_tables_output_output_next_token(
    input: &crate::operation::get_tables::GetTablesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_triggers_output_output_next_token(
    input: &crate::operation::get_triggers::GetTriggersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_unfiltered_partitions_metadata_output_output_next_token(
    input: &crate::operation::get_unfiltered_partitions_metadata::GetUnfilteredPartitionsMetadataOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_user_defined_functions_output_output_next_token(
    input: &crate::operation::get_user_defined_functions::GetUserDefinedFunctionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_workflow_runs_output_output_next_token(
    input: &crate::operation::get_workflow_runs::GetWorkflowRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_blueprints_output_output_next_token(
    input: &crate::operation::list_blueprints::ListBlueprintsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_column_statistics_task_runs_output_output_next_token(
    input: &crate::operation::list_column_statistics_task_runs::ListColumnStatisticsTaskRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_crawlers_output_output_next_token(
    input: &crate::operation::list_crawlers::ListCrawlersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_custom_entity_types_output_output_next_token(
    input: &crate::operation::list_custom_entity_types::ListCustomEntityTypesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_quality_results_output_output_next_token(
    input: &crate::operation::list_data_quality_results::ListDataQualityResultsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_quality_rule_recommendation_runs_output_output_next_token(
    input: &crate::operation::list_data_quality_rule_recommendation_runs::ListDataQualityRuleRecommendationRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_quality_ruleset_evaluation_runs_output_output_next_token(
    input: &crate::operation::list_data_quality_ruleset_evaluation_runs::ListDataQualityRulesetEvaluationRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_quality_rulesets_output_output_next_token(
    input: &crate::operation::list_data_quality_rulesets::ListDataQualityRulesetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_dev_endpoints_output_output_next_token(
    input: &crate::operation::list_dev_endpoints::ListDevEndpointsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_jobs_output_output_next_token(
    input: &crate::operation::list_jobs::ListJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ml_transforms_output_output_next_token(
    input: &crate::operation::list_ml_transforms::ListMlTransformsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_registries_output_output_next_token(
    input: &crate::operation::list_registries::ListRegistriesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_schema_versions_output_output_next_token(
    input: &crate::operation::list_schema_versions::ListSchemaVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_schemas_output_output_next_token(
    input: &crate::operation::list_schemas::ListSchemasOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_sessions_output_output_next_token(
    input: &crate::operation::list_sessions::ListSessionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_table_optimizer_runs_output_output_next_token(
    input: &crate::operation::list_table_optimizer_runs::ListTableOptimizerRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_triggers_output_output_next_token(
    input: &crate::operation::list_triggers::ListTriggersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_usage_profiles_output_output_next_token(
    input: &crate::operation::list_usage_profiles::ListUsageProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workflows_output_output_next_token(
    input: &crate::operation::list_workflows::ListWorkflowsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_tables_output_output_next_token(
    input: &crate::operation::search_tables::SearchTablesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_job_runs_output_output_job_runs(
    input: crate::operation::get_job_runs::GetJobRunsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::JobRun>> {
    let input = match input.job_runs {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_jobs_output_output_jobs(
    input: crate::operation::get_jobs::GetJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Job>> {
    let input = match input.jobs {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_partition_indexes_output_output_partition_index_descriptor_list(
    input: crate::operation::get_partition_indexes::GetPartitionIndexesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PartitionIndexDescriptor>> {
    let input = match input.partition_index_descriptor_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_resource_policies_output_output_get_resource_policies_response_list(
    input: crate::operation::get_resource_policies::GetResourcePoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GluePolicy>> {
    let input = match input.get_resource_policies_response_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_security_configurations_output_output_security_configurations(
    input: crate::operation::get_security_configurations::GetSecurityConfigurationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SecurityConfiguration>> {
    let input = match input.security_configurations {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_triggers_output_output_triggers(
    input: crate::operation::get_triggers::GetTriggersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Trigger>> {
    let input = match input.triggers {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_workflow_runs_output_output_runs(
    input: crate::operation::get_workflow_runs::GetWorkflowRunsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkflowRun>> {
    let input = match input.runs {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_blueprints_output_output_blueprints(
    input: crate::operation::list_blueprints::ListBlueprintsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = match input.blueprints {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_jobs_output_output_job_names(
    input: crate::operation::list_jobs::ListJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = match input.job_names {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_registries_output_output_registries(
    input: crate::operation::list_registries::ListRegistriesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RegistryListItem>> {
    let input = match input.registries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_schema_versions_output_output_schemas(
    input: crate::operation::list_schema_versions::ListSchemaVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SchemaVersionListItem>> {
    let input = match input.schemas {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_schemas_output_output_schemas(
    input: crate::operation::list_schemas::ListSchemasOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SchemaListItem>> {
    let input = match input.schemas {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_table_optimizer_runs_output_output_table_optimizer_runs(
    input: crate::operation::list_table_optimizer_runs::ListTableOptimizerRunsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TableOptimizerRun>> {
    let input = match input.table_optimizer_runs {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_triggers_output_output_trigger_names(
    input: crate::operation::list_triggers::ListTriggersOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = match input.trigger_names {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_usage_profiles_output_output_profiles(
    input: crate::operation::list_usage_profiles::ListUsageProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UsageProfileDefinition>> {
    let input = match input.profiles {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workflows_output_output_workflows(
    input: crate::operation::list_workflows::ListWorkflowsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = match input.workflows {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
