// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_get_blueprint_runs_output_next_token(
    input: &crate::output::GetBlueprintRunsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_classifiers_output_next_token(
    input: &crate::output::GetClassifiersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_connections_output_next_token(
    input: &crate::output::GetConnectionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_crawler_metrics_output_next_token(
    input: &crate::output::GetCrawlerMetricsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_crawlers_output_next_token(
    input: &crate::output::GetCrawlersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_databases_output_next_token(
    input: &crate::output::GetDatabasesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_dev_endpoints_output_next_token(
    input: &crate::output::GetDevEndpointsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_job_runs_output_next_token(
    input: &crate::output::GetJobRunsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_jobs_output_next_token(
    input: &crate::output::GetJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_ml_task_runs_output_next_token(
    input: &crate::output::GetMlTaskRunsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_ml_transforms_output_next_token(
    input: &crate::output::GetMlTransformsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_partition_indexes_output_next_token(
    input: &crate::output::GetPartitionIndexesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_partitions_output_next_token(
    input: &crate::output::GetPartitionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_resource_policies_output_next_token(
    input: &crate::output::GetResourcePoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_security_configurations_output_next_token(
    input: &crate::output::GetSecurityConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_tables_output_next_token(
    input: &crate::output::GetTablesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_table_versions_output_next_token(
    input: &crate::output::GetTableVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_triggers_output_next_token(
    input: &crate::output::GetTriggersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_unfiltered_partitions_metadata_output_next_token(
    input: &crate::output::GetUnfilteredPartitionsMetadataOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_user_defined_functions_output_next_token(
    input: &crate::output::GetUserDefinedFunctionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_workflow_runs_output_next_token(
    input: &crate::output::GetWorkflowRunsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_blueprints_output_next_token(
    input: &crate::output::ListBlueprintsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_crawlers_output_next_token(
    input: &crate::output::ListCrawlersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_dev_endpoints_output_next_token(
    input: &crate::output::ListDevEndpointsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_jobs_output_next_token(
    input: &crate::output::ListJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_ml_transforms_output_next_token(
    input: &crate::output::ListMlTransformsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_registries_output_next_token(
    input: &crate::output::ListRegistriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_schemas_output_next_token(
    input: &crate::output::ListSchemasOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_schema_versions_output_next_token(
    input: &crate::output::ListSchemaVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_sessions_output_next_token(
    input: &crate::output::ListSessionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_triggers_output_next_token(
    input: &crate::output::ListTriggersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_workflows_output_next_token(
    input: &crate::output::ListWorkflowsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_tables_output_next_token(
    input: &crate::output::SearchTablesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_partition_indexes_output_partition_index_descriptor_list(
    input: crate::output::GetPartitionIndexesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PartitionIndexDescriptor>> {
    let input = match input.partition_index_descriptor_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_resource_policies_output_get_resource_policies_response_list(
    input: crate::output::GetResourcePoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GluePolicy>> {
    let input = match input.get_resource_policies_response_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_security_configurations_output_security_configurations(
    input: crate::output::GetSecurityConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SecurityConfiguration>> {
    let input = match input.security_configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_registries_output_registries(
    input: crate::output::ListRegistriesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RegistryListItem>> {
    let input = match input.registries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_schemas_output_schemas(
    input: crate::output::ListSchemasOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SchemaListItem>> {
    let input = match input.schemas {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_schema_versions_output_schemas(
    input: crate::output::ListSchemaVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SchemaVersionListItem>> {
    let input = match input.schemas {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
