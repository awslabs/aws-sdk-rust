// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information about a finding and the scan that generated it. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FindingIdentifier {
    /// <p>The name of the scan that generated the finding. </p>
    pub scan_name: ::std::string::String,
    /// <p>The identifier for a finding.</p>
    pub finding_id: ::std::string::String,
}
impl FindingIdentifier {
    /// <p>The name of the scan that generated the finding. </p>
    pub fn scan_name(&self) -> &str {
        use std::ops::Deref;
        self.scan_name.deref()
    }
    /// <p>The identifier for a finding.</p>
    pub fn finding_id(&self) -> &str {
        use std::ops::Deref;
        self.finding_id.deref()
    }
}
impl FindingIdentifier {
    /// Creates a new builder-style object to manufacture [`FindingIdentifier`](crate::types::FindingIdentifier).
    pub fn builder() -> crate::types::builders::FindingIdentifierBuilder {
        crate::types::builders::FindingIdentifierBuilder::default()
    }
}

/// A builder for [`FindingIdentifier`](crate::types::FindingIdentifier).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FindingIdentifierBuilder {
    pub(crate) scan_name: ::std::option::Option<::std::string::String>,
    pub(crate) finding_id: ::std::option::Option<::std::string::String>,
}
impl FindingIdentifierBuilder {
    /// <p>The name of the scan that generated the finding. </p>
    /// This field is required.
    pub fn scan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the scan that generated the finding. </p>
    pub fn set_scan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_name = input;
        self
    }
    /// <p>The name of the scan that generated the finding. </p>
    pub fn get_scan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_name
    }
    /// <p>The identifier for a finding.</p>
    /// This field is required.
    pub fn finding_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.finding_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for a finding.</p>
    pub fn set_finding_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.finding_id = input;
        self
    }
    /// <p>The identifier for a finding.</p>
    pub fn get_finding_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.finding_id
    }
    /// Consumes the builder and constructs a [`FindingIdentifier`](crate::types::FindingIdentifier).
    /// This method will fail if any of the following fields are not set:
    /// - [`scan_name`](crate::types::builders::FindingIdentifierBuilder::scan_name)
    /// - [`finding_id`](crate::types::builders::FindingIdentifierBuilder::finding_id)
    pub fn build(self) -> ::std::result::Result<crate::types::FindingIdentifier, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FindingIdentifier {
            scan_name: self.scan_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scan_name",
                    "scan_name was not specified but it is required when building FindingIdentifier",
                )
            })?,
            finding_id: self.finding_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "finding_id",
                    "finding_id was not specified but it is required when building FindingIdentifier",
                )
            })?,
        })
    }
}
