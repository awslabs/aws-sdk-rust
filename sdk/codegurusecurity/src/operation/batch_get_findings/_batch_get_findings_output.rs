// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetFindingsOutput {
    /// <p> A list of all requested findings.</p>
    pub findings: ::std::vec::Vec<crate::types::Finding>,
    /// <p>A list of errors for individual findings which were not fetched. Each BatchGetFindingsError contains the <code>scanName</code>, <code>findingId</code>, <code>errorCode</code> and error <code>message</code>.</p>
    pub failed_findings: ::std::vec::Vec<crate::types::BatchGetFindingsError>,
    _request_id: Option<String>,
}
impl BatchGetFindingsOutput {
    /// <p> A list of all requested findings.</p>
    pub fn findings(&self) -> &[crate::types::Finding] {
        use std::ops::Deref;
        self.findings.deref()
    }
    /// <p>A list of errors for individual findings which were not fetched. Each BatchGetFindingsError contains the <code>scanName</code>, <code>findingId</code>, <code>errorCode</code> and error <code>message</code>.</p>
    pub fn failed_findings(&self) -> &[crate::types::BatchGetFindingsError] {
        use std::ops::Deref;
        self.failed_findings.deref()
    }
}
impl ::aws_http::request_id::RequestId for BatchGetFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetFindingsOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetFindingsOutput`](crate::operation::batch_get_findings::BatchGetFindingsOutput).
    pub fn builder() -> crate::operation::batch_get_findings::builders::BatchGetFindingsOutputBuilder {
        crate::operation::batch_get_findings::builders::BatchGetFindingsOutputBuilder::default()
    }
}

/// A builder for [`BatchGetFindingsOutput`](crate::operation::batch_get_findings::BatchGetFindingsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetFindingsOutputBuilder {
    pub(crate) findings: ::std::option::Option<::std::vec::Vec<crate::types::Finding>>,
    pub(crate) failed_findings: ::std::option::Option<::std::vec::Vec<crate::types::BatchGetFindingsError>>,
    _request_id: Option<String>,
}
impl BatchGetFindingsOutputBuilder {
    /// Appends an item to `findings`.
    ///
    /// To override the contents of this collection use [`set_findings`](Self::set_findings).
    ///
    /// <p> A list of all requested findings.</p>
    pub fn findings(mut self, input: crate::types::Finding) -> Self {
        let mut v = self.findings.unwrap_or_default();
        v.push(input);
        self.findings = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of all requested findings.</p>
    pub fn set_findings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Finding>>) -> Self {
        self.findings = input;
        self
    }
    /// <p> A list of all requested findings.</p>
    pub fn get_findings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Finding>> {
        &self.findings
    }
    /// Appends an item to `failed_findings`.
    ///
    /// To override the contents of this collection use [`set_failed_findings`](Self::set_failed_findings).
    ///
    /// <p>A list of errors for individual findings which were not fetched. Each BatchGetFindingsError contains the <code>scanName</code>, <code>findingId</code>, <code>errorCode</code> and error <code>message</code>.</p>
    pub fn failed_findings(mut self, input: crate::types::BatchGetFindingsError) -> Self {
        let mut v = self.failed_findings.unwrap_or_default();
        v.push(input);
        self.failed_findings = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of errors for individual findings which were not fetched. Each BatchGetFindingsError contains the <code>scanName</code>, <code>findingId</code>, <code>errorCode</code> and error <code>message</code>.</p>
    pub fn set_failed_findings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BatchGetFindingsError>>) -> Self {
        self.failed_findings = input;
        self
    }
    /// <p>A list of errors for individual findings which were not fetched. Each BatchGetFindingsError contains the <code>scanName</code>, <code>findingId</code>, <code>errorCode</code> and error <code>message</code>.</p>
    pub fn get_failed_findings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchGetFindingsError>> {
        &self.failed_findings
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetFindingsOutput`](crate::operation::batch_get_findings::BatchGetFindingsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`findings`](crate::operation::batch_get_findings::builders::BatchGetFindingsOutputBuilder::findings)
    /// - [`failed_findings`](crate::operation::batch_get_findings::builders::BatchGetFindingsOutputBuilder::failed_findings)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_get_findings::BatchGetFindingsOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::batch_get_findings::BatchGetFindingsOutput {
            findings: self.findings.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "findings",
                    "findings was not specified but it is required when building BatchGetFindingsOutput",
                )
            })?,
            failed_findings: self.failed_findings.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "failed_findings",
                    "failed_findings was not specified but it is required when building BatchGetFindingsOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
