// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_media_insights_pipeline::_create_media_insights_pipeline_output::CreateMediaInsightsPipelineOutputBuilder;

pub use crate::operation::create_media_insights_pipeline::_create_media_insights_pipeline_input::CreateMediaInsightsPipelineInputBuilder;

impl CreateMediaInsightsPipelineInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_media_insights_pipeline::CreateMediaInsightsPipelineOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_media_insights_pipeline::CreateMediaInsightsPipelineError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_media_insights_pipeline();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateMediaInsightsPipeline`.
///
/// <p>Creates a media insights pipeline.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateMediaInsightsPipelineFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_media_insights_pipeline::builders::CreateMediaInsightsPipelineInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_media_insights_pipeline::CreateMediaInsightsPipelineOutput,
        crate::operation::create_media_insights_pipeline::CreateMediaInsightsPipelineError,
    > for CreateMediaInsightsPipelineFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_media_insights_pipeline::CreateMediaInsightsPipelineOutput,
            crate::operation::create_media_insights_pipeline::CreateMediaInsightsPipelineError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateMediaInsightsPipelineFluentBuilder {
    /// Creates a new `CreateMediaInsightsPipeline`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateMediaInsightsPipeline as a reference.
    pub fn as_input(&self) -> &crate::operation::create_media_insights_pipeline::builders::CreateMediaInsightsPipelineInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_media_insights_pipeline::CreateMediaInsightsPipelineOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_media_insights_pipeline::CreateMediaInsightsPipelineError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_media_insights_pipeline::CreateMediaInsightsPipeline::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_media_insights_pipeline::CreateMediaInsightsPipeline::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_media_insights_pipeline::CreateMediaInsightsPipelineOutput,
        crate::operation::create_media_insights_pipeline::CreateMediaInsightsPipelineError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN of the pipeline's configuration.</p>
    pub fn media_insights_pipeline_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.media_insights_pipeline_configuration_arn(input.into());
        self
    }
    /// <p>The ARN of the pipeline's configuration.</p>
    pub fn set_media_insights_pipeline_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_media_insights_pipeline_configuration_arn(input);
        self
    }
    /// <p>The ARN of the pipeline's configuration.</p>
    pub fn get_media_insights_pipeline_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_media_insights_pipeline_configuration_arn()
    }
    /// <p>The runtime configuration for the Kinesis video stream source of the media insights pipeline.</p>
    pub fn kinesis_video_stream_source_runtime_configuration(mut self, input: crate::types::KinesisVideoStreamSourceRuntimeConfiguration) -> Self {
        self.inner = self.inner.kinesis_video_stream_source_runtime_configuration(input);
        self
    }
    /// <p>The runtime configuration for the Kinesis video stream source of the media insights pipeline.</p>
    pub fn set_kinesis_video_stream_source_runtime_configuration(
        mut self,
        input: ::std::option::Option<crate::types::KinesisVideoStreamSourceRuntimeConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_kinesis_video_stream_source_runtime_configuration(input);
        self
    }
    /// <p>The runtime configuration for the Kinesis video stream source of the media insights pipeline.</p>
    pub fn get_kinesis_video_stream_source_runtime_configuration(
        &self,
    ) -> &::std::option::Option<crate::types::KinesisVideoStreamSourceRuntimeConfiguration> {
        self.inner.get_kinesis_video_stream_source_runtime_configuration()
    }
    /// Adds a key-value pair to `MediaInsightsRuntimeMetadata`.
    ///
    /// To override the contents of this collection use [`set_media_insights_runtime_metadata`](Self::set_media_insights_runtime_metadata).
    ///
    /// <p>The runtime metadata for the media insights pipeline. Consists of a key-value map of strings.</p>
    pub fn media_insights_runtime_metadata(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.media_insights_runtime_metadata(k.into(), v.into());
        self
    }
    /// <p>The runtime metadata for the media insights pipeline. Consists of a key-value map of strings.</p>
    pub fn set_media_insights_runtime_metadata(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_media_insights_runtime_metadata(input);
        self
    }
    /// <p>The runtime metadata for the media insights pipeline. Consists of a key-value map of strings.</p>
    pub fn get_media_insights_runtime_metadata(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_media_insights_runtime_metadata()
    }
    /// <p>The runtime configuration for the Kinesis video recording stream source.</p>
    pub fn kinesis_video_stream_recording_source_runtime_configuration(
        mut self,
        input: crate::types::KinesisVideoStreamRecordingSourceRuntimeConfiguration,
    ) -> Self {
        self.inner = self.inner.kinesis_video_stream_recording_source_runtime_configuration(input);
        self
    }
    /// <p>The runtime configuration for the Kinesis video recording stream source.</p>
    pub fn set_kinesis_video_stream_recording_source_runtime_configuration(
        mut self,
        input: ::std::option::Option<crate::types::KinesisVideoStreamRecordingSourceRuntimeConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_kinesis_video_stream_recording_source_runtime_configuration(input);
        self
    }
    /// <p>The runtime configuration for the Kinesis video recording stream source.</p>
    pub fn get_kinesis_video_stream_recording_source_runtime_configuration(
        &self,
    ) -> &::std::option::Option<crate::types::KinesisVideoStreamRecordingSourceRuntimeConfiguration> {
        self.inner.get_kinesis_video_stream_recording_source_runtime_configuration()
    }
    /// <p>The runtime configuration for the S3 recording sink. If specified, the settings in this structure override any settings in <code>S3RecordingSinkConfiguration</code>.</p>
    pub fn s3_recording_sink_runtime_configuration(mut self, input: crate::types::S3RecordingSinkRuntimeConfiguration) -> Self {
        self.inner = self.inner.s3_recording_sink_runtime_configuration(input);
        self
    }
    /// <p>The runtime configuration for the S3 recording sink. If specified, the settings in this structure override any settings in <code>S3RecordingSinkConfiguration</code>.</p>
    pub fn set_s3_recording_sink_runtime_configuration(
        mut self,
        input: ::std::option::Option<crate::types::S3RecordingSinkRuntimeConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_s3_recording_sink_runtime_configuration(input);
        self
    }
    /// <p>The runtime configuration for the S3 recording sink. If specified, the settings in this structure override any settings in <code>S3RecordingSinkConfiguration</code>.</p>
    pub fn get_s3_recording_sink_runtime_configuration(&self) -> &::std::option::Option<crate::types::S3RecordingSinkRuntimeConfiguration> {
        self.inner.get_s3_recording_sink_runtime_configuration()
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the media insights pipeline.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tags assigned to the media insights pipeline.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags assigned to the media insights pipeline.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>The unique identifier for the media insights pipeline request.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>The unique identifier for the media insights pipeline request.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The unique identifier for the media insights pipeline request.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
}
