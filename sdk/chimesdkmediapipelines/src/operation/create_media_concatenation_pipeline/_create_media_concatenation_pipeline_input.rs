// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateMediaConcatenationPipelineInput {
    /// <p>An object that specifies the sources for the media concatenation pipeline.</p>
    #[doc(hidden)]
    pub sources: std::option::Option<std::vec::Vec<crate::types::ConcatenationSource>>,
    /// <p>An object that specifies the data sinks for the media concatenation pipeline.</p>
    #[doc(hidden)]
    pub sinks: std::option::Option<std::vec::Vec<crate::types::ConcatenationSink>>,
    /// <p>The unique identifier for the client request. The token makes the API request idempotent. Use a unique token for each media concatenation pipeline request.</p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
    /// <p>The tags associated with the media concatenation pipeline.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateMediaConcatenationPipelineInput {
    /// <p>An object that specifies the sources for the media concatenation pipeline.</p>
    pub fn sources(&self) -> std::option::Option<&[crate::types::ConcatenationSource]> {
        self.sources.as_deref()
    }
    /// <p>An object that specifies the data sinks for the media concatenation pipeline.</p>
    pub fn sinks(&self) -> std::option::Option<&[crate::types::ConcatenationSink]> {
        self.sinks.as_deref()
    }
    /// <p>The unique identifier for the client request. The token makes the API request idempotent. Use a unique token for each media concatenation pipeline request.</p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The tags associated with the media concatenation pipeline.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for CreateMediaConcatenationPipelineInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMediaConcatenationPipelineInput");
        formatter.field("sources", &self.sources);
        formatter.field("sinks", &self.sinks);
        formatter.field("client_request_token", &"*** Sensitive Data Redacted ***");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateMediaConcatenationPipelineInput {
    /// Creates a new builder-style object to manufacture [`CreateMediaConcatenationPipelineInput`](crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineInput).
    pub fn builder() -> crate::operation::create_media_concatenation_pipeline::builders::CreateMediaConcatenationPipelineInputBuilder{
        crate::operation::create_media_concatenation_pipeline::builders::CreateMediaConcatenationPipelineInputBuilder::default()
    }
}

/// A builder for [`CreateMediaConcatenationPipelineInput`](crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateMediaConcatenationPipelineInputBuilder {
    pub(crate) sources: std::option::Option<std::vec::Vec<crate::types::ConcatenationSource>>,
    pub(crate) sinks: std::option::Option<std::vec::Vec<crate::types::ConcatenationSink>>,
    pub(crate) client_request_token: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateMediaConcatenationPipelineInputBuilder {
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>An object that specifies the sources for the media concatenation pipeline.</p>
    pub fn sources(mut self, input: crate::types::ConcatenationSource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = Some(v);
        self
    }
    /// <p>An object that specifies the sources for the media concatenation pipeline.</p>
    pub fn set_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConcatenationSource>>,
    ) -> Self {
        self.sources = input;
        self
    }
    /// Appends an item to `sinks`.
    ///
    /// To override the contents of this collection use [`set_sinks`](Self::set_sinks).
    ///
    /// <p>An object that specifies the data sinks for the media concatenation pipeline.</p>
    pub fn sinks(mut self, input: crate::types::ConcatenationSink) -> Self {
        let mut v = self.sinks.unwrap_or_default();
        v.push(input);
        self.sinks = Some(v);
        self
    }
    /// <p>An object that specifies the data sinks for the media concatenation pipeline.</p>
    pub fn set_sinks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConcatenationSink>>,
    ) -> Self {
        self.sinks = input;
        self
    }
    /// <p>The unique identifier for the client request. The token makes the API request idempotent. Use a unique token for each media concatenation pipeline request.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>The unique identifier for the client request. The token makes the API request idempotent. Use a unique token for each media concatenation pipeline request.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the media concatenation pipeline.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags associated with the media concatenation pipeline.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateMediaConcatenationPipelineInput`](crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineInput).
    pub fn build(self) -> Result<crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineInput {
                sources: self.sources
                ,
                sinks: self.sinks
                ,
                client_request_token: self.client_request_token
                ,
                tags: self.tags
                ,
            }
        )
    }
}
impl std::fmt::Debug for CreateMediaConcatenationPipelineInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMediaConcatenationPipelineInputBuilder");
        formatter.field("sources", &self.sources);
        formatter.field("sinks", &self.sinks);
        formatter.field("client_request_token", &"*** Sensitive Data Redacted ***");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
