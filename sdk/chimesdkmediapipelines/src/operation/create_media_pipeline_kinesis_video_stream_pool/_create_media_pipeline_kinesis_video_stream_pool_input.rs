// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateMediaPipelineKinesisVideoStreamPoolInput {
    /// <p>The configuration settings for the video stream.</p>
    pub stream_configuration: ::std::option::Option<crate::types::KinesisVideoStreamConfiguration>,
    /// <p>The name of the video stream pool.</p>
    pub pool_name: ::std::option::Option<::std::string::String>,
    /// <p>The token assigned to the client making the request.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The tags assigned to the video stream pool.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateMediaPipelineKinesisVideoStreamPoolInput {
    /// <p>The configuration settings for the video stream.</p>
    pub fn stream_configuration(&self) -> ::std::option::Option<&crate::types::KinesisVideoStreamConfiguration> {
        self.stream_configuration.as_ref()
    }
    /// <p>The name of the video stream pool.</p>
    pub fn pool_name(&self) -> ::std::option::Option<&str> {
        self.pool_name.as_deref()
    }
    /// <p>The token assigned to the client making the request.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The tags assigned to the video stream pool.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CreateMediaPipelineKinesisVideoStreamPoolInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMediaPipelineKinesisVideoStreamPoolInput");
        formatter.field("stream_configuration", &self.stream_configuration);
        formatter.field("pool_name", &self.pool_name);
        formatter.field("client_request_token", &"*** Sensitive Data Redacted ***");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateMediaPipelineKinesisVideoStreamPoolInput {
    /// Creates a new builder-style object to manufacture [`CreateMediaPipelineKinesisVideoStreamPoolInput`](crate::operation::create_media_pipeline_kinesis_video_stream_pool::CreateMediaPipelineKinesisVideoStreamPoolInput).
    pub fn builder(
    ) -> crate::operation::create_media_pipeline_kinesis_video_stream_pool::builders::CreateMediaPipelineKinesisVideoStreamPoolInputBuilder {
        crate::operation::create_media_pipeline_kinesis_video_stream_pool::builders::CreateMediaPipelineKinesisVideoStreamPoolInputBuilder::default()
    }
}

/// A builder for [`CreateMediaPipelineKinesisVideoStreamPoolInput`](crate::operation::create_media_pipeline_kinesis_video_stream_pool::CreateMediaPipelineKinesisVideoStreamPoolInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateMediaPipelineKinesisVideoStreamPoolInputBuilder {
    pub(crate) stream_configuration: ::std::option::Option<crate::types::KinesisVideoStreamConfiguration>,
    pub(crate) pool_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateMediaPipelineKinesisVideoStreamPoolInputBuilder {
    /// <p>The configuration settings for the video stream.</p>
    /// This field is required.
    pub fn stream_configuration(mut self, input: crate::types::KinesisVideoStreamConfiguration) -> Self {
        self.stream_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings for the video stream.</p>
    pub fn set_stream_configuration(mut self, input: ::std::option::Option<crate::types::KinesisVideoStreamConfiguration>) -> Self {
        self.stream_configuration = input;
        self
    }
    /// <p>The configuration settings for the video stream.</p>
    pub fn get_stream_configuration(&self) -> &::std::option::Option<crate::types::KinesisVideoStreamConfiguration> {
        &self.stream_configuration
    }
    /// <p>The name of the video stream pool.</p>
    /// This field is required.
    pub fn pool_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the video stream pool.</p>
    pub fn set_pool_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_name = input;
        self
    }
    /// <p>The name of the video stream pool.</p>
    pub fn get_pool_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_name
    }
    /// <p>The token assigned to the client making the request.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token assigned to the client making the request.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The token assigned to the client making the request.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the video stream pool.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the video stream pool.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the video stream pool.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateMediaPipelineKinesisVideoStreamPoolInput`](crate::operation::create_media_pipeline_kinesis_video_stream_pool::CreateMediaPipelineKinesisVideoStreamPoolInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_media_pipeline_kinesis_video_stream_pool::CreateMediaPipelineKinesisVideoStreamPoolInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_media_pipeline_kinesis_video_stream_pool::CreateMediaPipelineKinesisVideoStreamPoolInput {
                stream_configuration: self.stream_configuration,
                pool_name: self.pool_name,
                client_request_token: self.client_request_token,
                tags: self.tags,
            },
        )
    }
}
impl ::std::fmt::Debug for CreateMediaPipelineKinesisVideoStreamPoolInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMediaPipelineKinesisVideoStreamPoolInputBuilder");
        formatter.field("stream_configuration", &self.stream_configuration);
        formatter.field("pool_name", &self.pool_name);
        formatter.field("client_request_token", &"*** Sensitive Data Redacted ***");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
