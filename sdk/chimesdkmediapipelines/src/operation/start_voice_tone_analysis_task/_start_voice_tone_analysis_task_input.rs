// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StartVoiceToneAnalysisTaskInput {
    /// <p>The unique identifier of the resource to be updated. Valid values include the ID and ARN of the media insights pipeline.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The language code.</p>
    pub language_code: ::std::option::Option<crate::types::VoiceAnalyticsLanguageCode>,
    /// <p>The task configuration for the Kinesis video stream source of the media insights pipeline.</p>
    pub kinesis_video_stream_source_task_configuration: ::std::option::Option<crate::types::KinesisVideoStreamSourceTaskConfiguration>,
    /// <p>The unique identifier for the client request. Use a different token for different voice tone analysis tasks.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
}
impl StartVoiceToneAnalysisTaskInput {
    /// <p>The unique identifier of the resource to be updated. Valid values include the ID and ARN of the media insights pipeline.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The language code.</p>
    pub fn language_code(&self) -> ::std::option::Option<&crate::types::VoiceAnalyticsLanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The task configuration for the Kinesis video stream source of the media insights pipeline.</p>
    pub fn kinesis_video_stream_source_task_configuration(&self) -> ::std::option::Option<&crate::types::KinesisVideoStreamSourceTaskConfiguration> {
        self.kinesis_video_stream_source_task_configuration.as_ref()
    }
    /// <p>The unique identifier for the client request. Use a different token for different voice tone analysis tasks.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
}
impl ::std::fmt::Debug for StartVoiceToneAnalysisTaskInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartVoiceToneAnalysisTaskInput");
        formatter.field("identifier", &self.identifier);
        formatter.field("language_code", &self.language_code);
        formatter.field(
            "kinesis_video_stream_source_task_configuration",
            &self.kinesis_video_stream_source_task_configuration,
        );
        formatter.field("client_request_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl StartVoiceToneAnalysisTaskInput {
    /// Creates a new builder-style object to manufacture [`StartVoiceToneAnalysisTaskInput`](crate::operation::start_voice_tone_analysis_task::StartVoiceToneAnalysisTaskInput).
    pub fn builder() -> crate::operation::start_voice_tone_analysis_task::builders::StartVoiceToneAnalysisTaskInputBuilder {
        crate::operation::start_voice_tone_analysis_task::builders::StartVoiceToneAnalysisTaskInputBuilder::default()
    }
}

/// A builder for [`StartVoiceToneAnalysisTaskInput`](crate::operation::start_voice_tone_analysis_task::StartVoiceToneAnalysisTaskInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct StartVoiceToneAnalysisTaskInputBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) language_code: ::std::option::Option<crate::types::VoiceAnalyticsLanguageCode>,
    pub(crate) kinesis_video_stream_source_task_configuration: ::std::option::Option<crate::types::KinesisVideoStreamSourceTaskConfiguration>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
}
impl StartVoiceToneAnalysisTaskInputBuilder {
    /// <p>The unique identifier of the resource to be updated. Valid values include the ID and ARN of the media insights pipeline.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the resource to be updated. Valid values include the ID and ARN of the media insights pipeline.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The unique identifier of the resource to be updated. Valid values include the ID and ARN of the media insights pipeline.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The language code.</p>
    /// This field is required.
    pub fn language_code(mut self, input: crate::types::VoiceAnalyticsLanguageCode) -> Self {
        self.language_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The language code.</p>
    pub fn set_language_code(mut self, input: ::std::option::Option<crate::types::VoiceAnalyticsLanguageCode>) -> Self {
        self.language_code = input;
        self
    }
    /// <p>The language code.</p>
    pub fn get_language_code(&self) -> &::std::option::Option<crate::types::VoiceAnalyticsLanguageCode> {
        &self.language_code
    }
    /// <p>The task configuration for the Kinesis video stream source of the media insights pipeline.</p>
    pub fn kinesis_video_stream_source_task_configuration(mut self, input: crate::types::KinesisVideoStreamSourceTaskConfiguration) -> Self {
        self.kinesis_video_stream_source_task_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The task configuration for the Kinesis video stream source of the media insights pipeline.</p>
    pub fn set_kinesis_video_stream_source_task_configuration(
        mut self,
        input: ::std::option::Option<crate::types::KinesisVideoStreamSourceTaskConfiguration>,
    ) -> Self {
        self.kinesis_video_stream_source_task_configuration = input;
        self
    }
    /// <p>The task configuration for the Kinesis video stream source of the media insights pipeline.</p>
    pub fn get_kinesis_video_stream_source_task_configuration(
        &self,
    ) -> &::std::option::Option<crate::types::KinesisVideoStreamSourceTaskConfiguration> {
        &self.kinesis_video_stream_source_task_configuration
    }
    /// <p>The unique identifier for the client request. Use a different token for different voice tone analysis tasks.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the client request. Use a different token for different voice tone analysis tasks.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The unique identifier for the client request. Use a different token for different voice tone analysis tasks.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Consumes the builder and constructs a [`StartVoiceToneAnalysisTaskInput`](crate::operation::start_voice_tone_analysis_task::StartVoiceToneAnalysisTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_voice_tone_analysis_task::StartVoiceToneAnalysisTaskInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_voice_tone_analysis_task::StartVoiceToneAnalysisTaskInput {
            identifier: self.identifier,
            language_code: self.language_code,
            kinesis_video_stream_source_task_configuration: self.kinesis_video_stream_source_task_configuration,
            client_request_token: self.client_request_token,
        })
    }
}
impl ::std::fmt::Debug for StartVoiceToneAnalysisTaskInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StartVoiceToneAnalysisTaskInputBuilder");
        formatter.field("identifier", &self.identifier);
        formatter.field("language_code", &self.language_code);
        formatter.field(
            "kinesis_video_stream_source_task_configuration",
            &self.kinesis_video_stream_source_task_configuration,
        );
        formatter.field("client_request_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
