// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_amazon_transcribe_processor_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AmazonTranscribeProcessorConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.language_code {
        object.key("LanguageCode").string(var_1.as_str());
    }
    if let Some(var_2) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.vocabulary_filter_method {
        object.key("VocabularyFilterMethod").string(var_4.as_str());
    }
    if input.show_speaker_label {
        object.key("ShowSpeakerLabel").boolean(input.show_speaker_label);
    }
    if input.enable_partial_results_stabilization {
        object
            .key("EnablePartialResultsStabilization")
            .boolean(input.enable_partial_results_stabilization);
    }
    if let Some(var_5) = &input.partial_results_stability {
        object.key("PartialResultsStability").string(var_5.as_str());
    }
    if let Some(var_6) = &input.content_identification_type {
        object.key("ContentIdentificationType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.content_redaction_type {
        object.key("ContentRedactionType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.pii_entity_types {
        object.key("PiiEntityTypes").string(var_8.as_str());
    }
    if let Some(var_9) = &input.language_model_name {
        object.key("LanguageModelName").string(var_9.as_str());
    }
    if input.filter_partial_results {
        object.key("FilterPartialResults").boolean(input.filter_partial_results);
    }
    if input.identify_language {
        object.key("IdentifyLanguage").boolean(input.identify_language);
    }
    if let Some(var_10) = &input.language_options {
        object.key("LanguageOptions").string(var_10.as_str());
    }
    if let Some(var_11) = &input.preferred_language {
        object.key("PreferredLanguage").string(var_11.as_str());
    }
    if let Some(var_12) = &input.vocabulary_names {
        object.key("VocabularyNames").string(var_12.as_str());
    }
    if let Some(var_13) = &input.vocabulary_filter_names {
        object.key("VocabularyFilterNames").string(var_13.as_str());
    }
    Ok(())
}

pub(crate) fn de_amazon_transcribe_processor_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AmazonTranscribeProcessorConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AmazonTranscribeProcessorConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "LanguageCode" => {
                            builder = builder.set_language_code(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CallAnalyticsLanguageCode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "VocabularyName" => {
                            builder = builder.set_vocabulary_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VocabularyFilterName" => {
                            builder = builder.set_vocabulary_filter_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VocabularyFilterMethod" => {
                            builder = builder.set_vocabulary_filter_method(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::VocabularyFilterMethod::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ShowSpeakerLabel" => {
                            builder = builder.set_show_speaker_label(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "EnablePartialResultsStabilization" => {
                            builder = builder
                                .set_enable_partial_results_stabilization(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "PartialResultsStability" => {
                            builder = builder.set_partial_results_stability(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PartialResultsStability::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ContentIdentificationType" => {
                            builder = builder.set_content_identification_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ContentType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ContentRedactionType" => {
                            builder = builder.set_content_redaction_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ContentType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "PiiEntityTypes" => {
                            builder = builder.set_pii_entity_types(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LanguageModelName" => {
                            builder = builder.set_language_model_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "FilterPartialResults" => {
                            builder = builder.set_filter_partial_results(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IdentifyLanguage" => {
                            builder = builder.set_identify_language(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "LanguageOptions" => {
                            builder = builder.set_language_options(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PreferredLanguage" => {
                            builder = builder.set_preferred_language(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CallAnalyticsLanguageCode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "VocabularyNames" => {
                            builder = builder.set_vocabulary_names(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VocabularyFilterNames" => {
                            builder = builder.set_vocabulary_filter_names(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
