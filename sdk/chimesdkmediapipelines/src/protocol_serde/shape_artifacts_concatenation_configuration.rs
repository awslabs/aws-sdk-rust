// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_artifacts_concatenation_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ArtifactsConcatenationConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.audio {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Audio").start_object();
        crate::protocol_serde::shape_audio_concatenation_configuration::ser_audio_concatenation_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.video {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Video").start_object();
        crate::protocol_serde::shape_video_concatenation_configuration::ser_video_concatenation_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.content {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Content").start_object();
        crate::protocol_serde::shape_content_concatenation_configuration::ser_content_concatenation_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.data_channel {
        #[allow(unused_mut)]
        let mut object_8 = object.key("DataChannel").start_object();
        crate::protocol_serde::shape_data_channel_concatenation_configuration::ser_data_channel_concatenation_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.transcription_messages {
        #[allow(unused_mut)]
        let mut object_10 = object.key("TranscriptionMessages").start_object();
        crate::protocol_serde::shape_transcription_messages_concatenation_configuration::ser_transcription_messages_concatenation_configuration(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.meeting_events {
        #[allow(unused_mut)]
        let mut object_12 = object.key("MeetingEvents").start_object();
        crate::protocol_serde::shape_meeting_events_concatenation_configuration::ser_meeting_events_concatenation_configuration(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.composited_video {
        #[allow(unused_mut)]
        let mut object_14 = object.key("CompositedVideo").start_object();
        crate::protocol_serde::shape_composited_video_concatenation_configuration::ser_composited_video_concatenation_configuration(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    Ok(())
}

pub(crate) fn de_artifacts_concatenation_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ArtifactsConcatenationConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ArtifactsConcatenationConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Audio" => {
                                builder = builder.set_audio(
                                    crate::protocol_serde::shape_audio_concatenation_configuration::de_audio_concatenation_configuration(tokens)?,
                                );
                            }
                            "Video" => {
                                builder = builder.set_video(
                                    crate::protocol_serde::shape_video_concatenation_configuration::de_video_concatenation_configuration(tokens)?,
                                );
                            }
                            "Content" => {
                                builder = builder.set_content(
                                    crate::protocol_serde::shape_content_concatenation_configuration::de_content_concatenation_configuration(tokens)?,
                                );
                            }
                            "DataChannel" => {
                                builder = builder.set_data_channel(
                                    crate::protocol_serde::shape_data_channel_concatenation_configuration::de_data_channel_concatenation_configuration(tokens)?
                                );
                            }
                            "TranscriptionMessages" => {
                                builder = builder.set_transcription_messages(
                                    crate::protocol_serde::shape_transcription_messages_concatenation_configuration::de_transcription_messages_concatenation_configuration(tokens)?
                                );
                            }
                            "MeetingEvents" => {
                                builder = builder.set_meeting_events(
                                    crate::protocol_serde::shape_meeting_events_concatenation_configuration::de_meeting_events_concatenation_configuration(tokens)?
                                );
                            }
                            "CompositedVideo" => {
                                builder = builder.set_composited_video(
                                    crate::protocol_serde::shape_composited_video_concatenation_configuration::de_composited_video_concatenation_configuration(tokens)?
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::artifacts_concatenation_configuration_correct_errors(builder).build(),
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
