// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_media_insights_pipeline_configuration_element(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MediaInsightsPipelineConfigurationElement,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("Type").string(input.r#type.as_str());
    }
    if let Some(var_1) = &input.amazon_transcribe_call_analytics_processor_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AmazonTranscribeCallAnalyticsProcessorConfiguration").start_object();
        crate::protocol_serde::shape_amazon_transcribe_call_analytics_processor_configuration::ser_amazon_transcribe_call_analytics_processor_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.amazon_transcribe_processor_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("AmazonTranscribeProcessorConfiguration").start_object();
        crate::protocol_serde::shape_amazon_transcribe_processor_configuration::ser_amazon_transcribe_processor_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.kinesis_data_stream_sink_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("KinesisDataStreamSinkConfiguration").start_object();
        crate::protocol_serde::shape_kinesis_data_stream_sink_configuration::ser_kinesis_data_stream_sink_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.s3_recording_sink_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("S3RecordingSinkConfiguration").start_object();
        crate::protocol_serde::shape_s3_recording_sink_configuration::ser_s3_recording_sink_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.voice_analytics_processor_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("VoiceAnalyticsProcessorConfiguration").start_object();
        crate::protocol_serde::shape_voice_analytics_processor_configuration::ser_voice_analytics_processor_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.lambda_function_sink_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("LambdaFunctionSinkConfiguration").start_object();
        crate::protocol_serde::shape_lambda_function_sink_configuration::ser_lambda_function_sink_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.sqs_queue_sink_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("SqsQueueSinkConfiguration").start_object();
        crate::protocol_serde::shape_sqs_queue_sink_configuration::ser_sqs_queue_sink_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.sns_topic_sink_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("SnsTopicSinkConfiguration").start_object();
        crate::protocol_serde::shape_sns_topic_sink_configuration::ser_sns_topic_sink_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.voice_enhancement_sink_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("VoiceEnhancementSinkConfiguration").start_object();
        crate::protocol_serde::shape_voice_enhancement_sink_configuration::ser_voice_enhancement_sink_configuration(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}

pub(crate) fn de_media_insights_pipeline_configuration_element<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::MediaInsightsPipelineConfigurationElement>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MediaInsightsPipelineConfigurationElementBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Type" => {
                            builder = builder.set_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::MediaInsightsPipelineConfigurationElementType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        "AmazonTranscribeCallAnalyticsProcessorConfiguration" => {
                            builder = builder.set_amazon_transcribe_call_analytics_processor_configuration(
                                    crate::protocol_serde::shape_amazon_transcribe_call_analytics_processor_configuration::de_amazon_transcribe_call_analytics_processor_configuration(tokens)?
                                );
                        }
                        "AmazonTranscribeProcessorConfiguration" => {
                            builder = builder.set_amazon_transcribe_processor_configuration(
                                crate::protocol_serde::shape_amazon_transcribe_processor_configuration::de_amazon_transcribe_processor_configuration(
                                    tokens,
                                )?,
                            );
                        }
                        "KinesisDataStreamSinkConfiguration" => {
                            builder = builder.set_kinesis_data_stream_sink_configuration(
                                crate::protocol_serde::shape_kinesis_data_stream_sink_configuration::de_kinesis_data_stream_sink_configuration(
                                    tokens,
                                )?,
                            );
                        }
                        "S3RecordingSinkConfiguration" => {
                            builder = builder.set_s3_recording_sink_configuration(
                                crate::protocol_serde::shape_s3_recording_sink_configuration::de_s3_recording_sink_configuration(tokens)?,
                            );
                        }
                        "VoiceAnalyticsProcessorConfiguration" => {
                            builder = builder.set_voice_analytics_processor_configuration(
                                crate::protocol_serde::shape_voice_analytics_processor_configuration::de_voice_analytics_processor_configuration(
                                    tokens,
                                )?,
                            );
                        }
                        "LambdaFunctionSinkConfiguration" => {
                            builder = builder.set_lambda_function_sink_configuration(
                                crate::protocol_serde::shape_lambda_function_sink_configuration::de_lambda_function_sink_configuration(tokens)?,
                            );
                        }
                        "SqsQueueSinkConfiguration" => {
                            builder = builder.set_sqs_queue_sink_configuration(
                                crate::protocol_serde::shape_sqs_queue_sink_configuration::de_sqs_queue_sink_configuration(tokens)?,
                            );
                        }
                        "SnsTopicSinkConfiguration" => {
                            builder = builder.set_sns_topic_sink_configuration(
                                crate::protocol_serde::shape_sns_topic_sink_configuration::de_sns_topic_sink_configuration(tokens)?,
                            );
                        }
                        "VoiceEnhancementSinkConfiguration" => {
                            builder = builder.set_voice_enhancement_sink_configuration(
                                crate::protocol_serde::shape_voice_enhancement_sink_configuration::de_voice_enhancement_sink_configuration(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::media_insights_pipeline_configuration_element_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
