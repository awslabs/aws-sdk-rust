// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_grid_view_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::GridViewConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("ContentShareLayout").string(input.content_share_layout.as_str());
    }
    if let Some(var_1) = &input.presenter_only_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("PresenterOnlyConfiguration").start_object();
        crate::protocol_serde::shape_presenter_only_configuration::ser_presenter_only_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.active_speaker_only_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("ActiveSpeakerOnlyConfiguration").start_object();
        crate::protocol_serde::shape_active_speaker_only_configuration::ser_active_speaker_only_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.horizontal_layout_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("HorizontalLayoutConfiguration").start_object();
        crate::protocol_serde::shape_horizontal_layout_configuration::ser_horizontal_layout_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.vertical_layout_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("VerticalLayoutConfiguration").start_object();
        crate::protocol_serde::shape_vertical_layout_configuration::ser_vertical_layout_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.video_attribute {
        #[allow(unused_mut)]
        let mut object_10 = object.key("VideoAttribute").start_object();
        crate::protocol_serde::shape_video_attribute::ser_video_attribute(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.canvas_orientation {
        object.key("CanvasOrientation").string(var_11.as_str());
    }
    Ok(())
}

pub(crate) fn de_grid_view_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::GridViewConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::GridViewConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ContentShareLayout" => {
                            builder = builder.set_content_share_layout(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ContentShareLayoutOption::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "PresenterOnlyConfiguration" => {
                            builder = builder.set_presenter_only_configuration(
                                crate::protocol_serde::shape_presenter_only_configuration::de_presenter_only_configuration(tokens)?,
                            );
                        }
                        "ActiveSpeakerOnlyConfiguration" => {
                            builder = builder.set_active_speaker_only_configuration(
                                crate::protocol_serde::shape_active_speaker_only_configuration::de_active_speaker_only_configuration(tokens)?,
                            );
                        }
                        "HorizontalLayoutConfiguration" => {
                            builder = builder.set_horizontal_layout_configuration(
                                crate::protocol_serde::shape_horizontal_layout_configuration::de_horizontal_layout_configuration(tokens)?,
                            );
                        }
                        "VerticalLayoutConfiguration" => {
                            builder = builder.set_vertical_layout_configuration(
                                crate::protocol_serde::shape_vertical_layout_configuration::de_vertical_layout_configuration(tokens)?,
                            );
                        }
                        "VideoAttribute" => {
                            builder = builder.set_video_attribute(crate::protocol_serde::shape_video_attribute::de_video_attribute(tokens)?);
                        }
                        "CanvasOrientation" => {
                            builder = builder.set_canvas_orientation(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CanvasOrientation::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::grid_view_configuration_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
