// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_media_insights_pipeline_output_correct_errors(
    mut builder: crate::operation::create_media_insights_pipeline::builders::CreateMediaInsightsPipelineOutputBuilder,
) -> crate::operation::create_media_insights_pipeline::builders::CreateMediaInsightsPipelineOutputBuilder {
    if builder.media_insights_pipeline.is_none() {
        builder.media_insights_pipeline = {
            let builder = crate::types::builders::MediaInsightsPipelineBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn kinesis_video_stream_configuration_correct_errors(
    mut builder: crate::types::builders::KinesisVideoStreamConfigurationBuilder,
) -> crate::types::builders::KinesisVideoStreamConfigurationBuilder {
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    builder
}

pub(crate) fn kinesis_video_stream_recording_source_runtime_configuration_correct_errors(
    mut builder: crate::types::builders::KinesisVideoStreamRecordingSourceRuntimeConfigurationBuilder,
) -> crate::types::builders::KinesisVideoStreamRecordingSourceRuntimeConfigurationBuilder {
    if builder.streams.is_none() {
        builder.streams = Some(Default::default())
    }
    if builder.fragment_selector.is_none() {
        builder.fragment_selector = {
            let builder = crate::types::builders::FragmentSelectorBuilder::default();
            crate::serde_util::fragment_selector_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn kinesis_video_stream_source_runtime_configuration_correct_errors(
    mut builder: crate::types::builders::KinesisVideoStreamSourceRuntimeConfigurationBuilder,
) -> crate::types::builders::KinesisVideoStreamSourceRuntimeConfigurationBuilder {
    if builder.streams.is_none() {
        builder.streams = Some(Default::default())
    }
    if builder.media_encoding.is_none() {
        builder.media_encoding = "no value was set".parse::<crate::types::MediaEncoding>().ok()
    }
    if builder.media_sample_rate.is_none() {
        builder.media_sample_rate = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_recording_sink_runtime_configuration_correct_errors(
    mut builder: crate::types::builders::S3RecordingSinkRuntimeConfigurationBuilder,
) -> crate::types::builders::S3RecordingSinkRuntimeConfigurationBuilder {
    if builder.destination.is_none() {
        builder.destination = Some(Default::default())
    }
    if builder.recording_file_format.is_none() {
        builder.recording_file_format = "no value was set".parse::<crate::types::RecordingFileFormat>().ok()
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn artifacts_configuration_correct_errors(
    mut builder: crate::types::builders::ArtifactsConfigurationBuilder,
) -> crate::types::builders::ArtifactsConfigurationBuilder {
    if builder.audio.is_none() {
        builder.audio = {
            let builder = crate::types::builders::AudioArtifactsConfigurationBuilder::default();
            crate::serde_util::audio_artifacts_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.video.is_none() {
        builder.video = {
            let builder = crate::types::builders::VideoArtifactsConfigurationBuilder::default();
            crate::serde_util::video_artifacts_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.content.is_none() {
        builder.content = {
            let builder = crate::types::builders::ContentArtifactsConfigurationBuilder::default();
            crate::serde_util::content_artifacts_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn concatenation_sink_correct_errors(
    mut builder: crate::types::builders::ConcatenationSinkBuilder,
) -> crate::types::builders::ConcatenationSinkBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ConcatenationSinkType>().ok()
    }
    if builder.s3_bucket_sink_configuration.is_none() {
        builder.s3_bucket_sink_configuration = {
            let builder = crate::types::builders::S3BucketSinkConfigurationBuilder::default();
            crate::serde_util::s3_bucket_sink_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn concatenation_source_correct_errors(
    mut builder: crate::types::builders::ConcatenationSourceBuilder,
) -> crate::types::builders::ConcatenationSourceBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ConcatenationSourceType>().ok()
    }
    if builder.media_capture_pipeline_source_configuration.is_none() {
        builder.media_capture_pipeline_source_configuration = {
            let builder = crate::types::builders::MediaCapturePipelineSourceConfigurationBuilder::default();
            crate::serde_util::media_capture_pipeline_source_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn fragment_selector_correct_errors(
    mut builder: crate::types::builders::FragmentSelectorBuilder,
) -> crate::types::builders::FragmentSelectorBuilder {
    if builder.fragment_selector_type.is_none() {
        builder.fragment_selector_type = "no value was set".parse::<crate::types::FragmentSelectorType>().ok()
    }
    if builder.timestamp_range.is_none() {
        builder.timestamp_range = {
            let builder = crate::types::builders::TimestampRangeBuilder::default();
            crate::serde_util::timestamp_range_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn live_connector_sink_configuration_correct_errors(
    mut builder: crate::types::builders::LiveConnectorSinkConfigurationBuilder,
) -> crate::types::builders::LiveConnectorSinkConfigurationBuilder {
    if builder.sink_type.is_none() {
        builder.sink_type = "no value was set".parse::<crate::types::LiveConnectorSinkType>().ok()
    }
    if builder.rtmp_configuration.is_none() {
        builder.rtmp_configuration = {
            let builder = crate::types::builders::LiveConnectorRtmpConfigurationBuilder::default();
            crate::serde_util::live_connector_rtmp_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn live_connector_source_configuration_correct_errors(
    mut builder: crate::types::builders::LiveConnectorSourceConfigurationBuilder,
) -> crate::types::builders::LiveConnectorSourceConfigurationBuilder {
    if builder.source_type.is_none() {
        builder.source_type = "no value was set".parse::<crate::types::LiveConnectorSourceType>().ok()
    }
    if builder.chime_sdk_meeting_live_connector_configuration.is_none() {
        builder.chime_sdk_meeting_live_connector_configuration = {
            let builder = crate::types::builders::ChimeSdkMeetingLiveConnectorConfigurationBuilder::default();
            crate::serde_util::chime_sdk_meeting_live_connector_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn media_insights_pipeline_configuration_element_correct_errors(
    mut builder: crate::types::builders::MediaInsightsPipelineConfigurationElementBuilder,
) -> crate::types::builders::MediaInsightsPipelineConfigurationElementBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set"
            .parse::<crate::types::MediaInsightsPipelineConfigurationElementType>()
            .ok()
    }
    builder
}

pub(crate) fn media_stream_sink_correct_errors(
    mut builder: crate::types::builders::MediaStreamSinkBuilder,
) -> crate::types::builders::MediaStreamSinkBuilder {
    if builder.sink_arn.is_none() {
        builder.sink_arn = Some(Default::default())
    }
    if builder.sink_type.is_none() {
        builder.sink_type = "no value was set".parse::<crate::types::MediaStreamPipelineSinkType>().ok()
    }
    if builder.reserved_stream_capacity.is_none() {
        builder.reserved_stream_capacity = Some(Default::default())
    }
    if builder.media_stream_type.is_none() {
        builder.media_stream_type = "no value was set".parse::<crate::types::MediaStreamType>().ok()
    }
    builder
}

pub(crate) fn media_stream_source_correct_errors(
    mut builder: crate::types::builders::MediaStreamSourceBuilder,
) -> crate::types::builders::MediaStreamSourceBuilder {
    if builder.source_type.is_none() {
        builder.source_type = "no value was set".parse::<crate::types::MediaPipelineSourceType>().ok()
    }
    if builder.source_arn.is_none() {
        builder.source_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn amazon_transcribe_call_analytics_processor_configuration_correct_errors(
    mut builder: crate::types::builders::AmazonTranscribeCallAnalyticsProcessorConfigurationBuilder,
) -> crate::types::builders::AmazonTranscribeCallAnalyticsProcessorConfigurationBuilder {
    if builder.language_code.is_none() {
        builder.language_code = "no value was set".parse::<crate::types::CallAnalyticsLanguageCode>().ok()
    }
    builder
}

pub(crate) fn audio_artifacts_configuration_correct_errors(
    mut builder: crate::types::builders::AudioArtifactsConfigurationBuilder,
) -> crate::types::builders::AudioArtifactsConfigurationBuilder {
    if builder.mux_type.is_none() {
        builder.mux_type = "no value was set".parse::<crate::types::AudioMuxType>().ok()
    }
    builder
}

pub(crate) fn chime_sdk_meeting_live_connector_configuration_correct_errors(
    mut builder: crate::types::builders::ChimeSdkMeetingLiveConnectorConfigurationBuilder,
) -> crate::types::builders::ChimeSdkMeetingLiveConnectorConfigurationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.mux_type.is_none() {
        builder.mux_type = "no value was set".parse::<crate::types::LiveConnectorMuxType>().ok()
    }
    builder
}

pub(crate) fn composited_video_artifacts_configuration_correct_errors(
    mut builder: crate::types::builders::CompositedVideoArtifactsConfigurationBuilder,
) -> crate::types::builders::CompositedVideoArtifactsConfigurationBuilder {
    if builder.grid_view_configuration.is_none() {
        builder.grid_view_configuration = {
            let builder = crate::types::builders::GridViewConfigurationBuilder::default();
            crate::serde_util::grid_view_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn content_artifacts_configuration_correct_errors(
    mut builder: crate::types::builders::ContentArtifactsConfigurationBuilder,
) -> crate::types::builders::ContentArtifactsConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ArtifactsState>().ok()
    }
    builder
}

pub(crate) fn live_connector_rtmp_configuration_correct_errors(
    mut builder: crate::types::builders::LiveConnectorRtmpConfigurationBuilder,
) -> crate::types::builders::LiveConnectorRtmpConfigurationBuilder {
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn media_capture_pipeline_source_configuration_correct_errors(
    mut builder: crate::types::builders::MediaCapturePipelineSourceConfigurationBuilder,
) -> crate::types::builders::MediaCapturePipelineSourceConfigurationBuilder {
    if builder.media_pipeline_arn.is_none() {
        builder.media_pipeline_arn = Some(Default::default())
    }
    if builder.chime_sdk_meeting_configuration.is_none() {
        builder.chime_sdk_meeting_configuration = {
            let builder = crate::types::builders::ChimeSdkMeetingConcatenationConfigurationBuilder::default();
            Some(crate::serde_util::chime_sdk_meeting_concatenation_configuration_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn real_time_alert_rule_correct_errors(
    mut builder: crate::types::builders::RealTimeAlertRuleBuilder,
) -> crate::types::builders::RealTimeAlertRuleBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RealTimeAlertRuleType>().ok()
    }
    builder
}

pub(crate) fn s3_bucket_sink_configuration_correct_errors(
    mut builder: crate::types::builders::S3BucketSinkConfigurationBuilder,
) -> crate::types::builders::S3BucketSinkConfigurationBuilder {
    if builder.destination.is_none() {
        builder.destination = Some(Default::default())
    }
    builder
}

pub(crate) fn stream_configuration_correct_errors(
    mut builder: crate::types::builders::StreamConfigurationBuilder,
) -> crate::types::builders::StreamConfigurationBuilder {
    if builder.stream_arn.is_none() {
        builder.stream_arn = Some(Default::default())
    }
    if builder.stream_channel_definition.is_none() {
        builder.stream_channel_definition = {
            let builder = crate::types::builders::StreamChannelDefinitionBuilder::default();
            crate::serde_util::stream_channel_definition_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn timestamp_range_correct_errors(
    mut builder: crate::types::builders::TimestampRangeBuilder,
) -> crate::types::builders::TimestampRangeBuilder {
    if builder.start_timestamp.is_none() {
        builder.start_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_timestamp.is_none() {
        builder.end_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn video_artifacts_configuration_correct_errors(
    mut builder: crate::types::builders::VideoArtifactsConfigurationBuilder,
) -> crate::types::builders::VideoArtifactsConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ArtifactsState>().ok()
    }
    builder
}

pub(crate) fn chime_sdk_meeting_concatenation_configuration_correct_errors(
    mut builder: crate::types::builders::ChimeSdkMeetingConcatenationConfigurationBuilder,
) -> crate::types::builders::ChimeSdkMeetingConcatenationConfigurationBuilder {
    if builder.artifacts_configuration.is_none() {
        builder.artifacts_configuration = {
            let builder = crate::types::builders::ArtifactsConcatenationConfigurationBuilder::default();
            Some(crate::serde_util::artifacts_concatenation_configuration_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn grid_view_configuration_correct_errors(
    mut builder: crate::types::builders::GridViewConfigurationBuilder,
) -> crate::types::builders::GridViewConfigurationBuilder {
    if builder.content_share_layout.is_none() {
        builder.content_share_layout = "no value was set".parse::<crate::types::ContentShareLayoutOption>().ok()
    }
    builder
}

pub(crate) fn issue_detection_configuration_correct_errors(
    mut builder: crate::types::builders::IssueDetectionConfigurationBuilder,
) -> crate::types::builders::IssueDetectionConfigurationBuilder {
    if builder.rule_name.is_none() {
        builder.rule_name = Some(Default::default())
    }
    builder
}

pub(crate) fn keyword_match_configuration_correct_errors(
    mut builder: crate::types::builders::KeywordMatchConfigurationBuilder,
) -> crate::types::builders::KeywordMatchConfigurationBuilder {
    if builder.rule_name.is_none() {
        builder.rule_name = Some(Default::default())
    }
    if builder.keywords.is_none() {
        builder.keywords = Some(Default::default())
    }
    builder
}

pub(crate) fn post_call_analytics_settings_correct_errors(
    mut builder: crate::types::builders::PostCallAnalyticsSettingsBuilder,
) -> crate::types::builders::PostCallAnalyticsSettingsBuilder {
    if builder.output_location.is_none() {
        builder.output_location = Some(Default::default())
    }
    if builder.data_access_role_arn.is_none() {
        builder.data_access_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn sentiment_configuration_correct_errors(
    mut builder: crate::types::builders::SentimentConfigurationBuilder,
) -> crate::types::builders::SentimentConfigurationBuilder {
    if builder.rule_name.is_none() {
        builder.rule_name = Some(Default::default())
    }
    if builder.sentiment_type.is_none() {
        builder.sentiment_type = "no value was set".parse::<crate::types::SentimentType>().ok()
    }
    if builder.time_period.is_none() {
        builder.time_period = Some(Default::default())
    }
    builder
}

pub(crate) fn stream_channel_definition_correct_errors(
    mut builder: crate::types::builders::StreamChannelDefinitionBuilder,
) -> crate::types::builders::StreamChannelDefinitionBuilder {
    if builder.number_of_channels.is_none() {
        builder.number_of_channels = Some(Default::default())
    }
    builder
}

pub(crate) fn artifacts_concatenation_configuration_correct_errors(
    mut builder: crate::types::builders::ArtifactsConcatenationConfigurationBuilder,
) -> crate::types::builders::ArtifactsConcatenationConfigurationBuilder {
    if builder.audio.is_none() {
        builder.audio = {
            let builder = crate::types::builders::AudioConcatenationConfigurationBuilder::default();
            crate::serde_util::audio_concatenation_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.video.is_none() {
        builder.video = {
            let builder = crate::types::builders::VideoConcatenationConfigurationBuilder::default();
            crate::serde_util::video_concatenation_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.content.is_none() {
        builder.content = {
            let builder = crate::types::builders::ContentConcatenationConfigurationBuilder::default();
            crate::serde_util::content_concatenation_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.data_channel.is_none() {
        builder.data_channel = {
            let builder = crate::types::builders::DataChannelConcatenationConfigurationBuilder::default();
            crate::serde_util::data_channel_concatenation_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.transcription_messages.is_none() {
        builder.transcription_messages = {
            let builder = crate::types::builders::TranscriptionMessagesConcatenationConfigurationBuilder::default();
            crate::serde_util::transcription_messages_concatenation_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.meeting_events.is_none() {
        builder.meeting_events = {
            let builder = crate::types::builders::MeetingEventsConcatenationConfigurationBuilder::default();
            crate::serde_util::meeting_events_concatenation_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.composited_video.is_none() {
        builder.composited_video = {
            let builder = crate::types::builders::CompositedVideoConcatenationConfigurationBuilder::default();
            crate::serde_util::composited_video_concatenation_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn audio_concatenation_configuration_correct_errors(
    mut builder: crate::types::builders::AudioConcatenationConfigurationBuilder,
) -> crate::types::builders::AudioConcatenationConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::AudioArtifactsConcatenationState>().ok()
    }
    builder
}

pub(crate) fn channel_definition_correct_errors(
    mut builder: crate::types::builders::ChannelDefinitionBuilder,
) -> crate::types::builders::ChannelDefinitionBuilder {
    if builder.channel_id.is_none() {
        builder.channel_id = Some(Default::default())
    }
    builder
}

pub(crate) fn composited_video_concatenation_configuration_correct_errors(
    mut builder: crate::types::builders::CompositedVideoConcatenationConfigurationBuilder,
) -> crate::types::builders::CompositedVideoConcatenationConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ArtifactsConcatenationState>().ok()
    }
    builder
}

pub(crate) fn content_concatenation_configuration_correct_errors(
    mut builder: crate::types::builders::ContentConcatenationConfigurationBuilder,
) -> crate::types::builders::ContentConcatenationConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ArtifactsConcatenationState>().ok()
    }
    builder
}

pub(crate) fn data_channel_concatenation_configuration_correct_errors(
    mut builder: crate::types::builders::DataChannelConcatenationConfigurationBuilder,
) -> crate::types::builders::DataChannelConcatenationConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ArtifactsConcatenationState>().ok()
    }
    builder
}

pub(crate) fn meeting_events_concatenation_configuration_correct_errors(
    mut builder: crate::types::builders::MeetingEventsConcatenationConfigurationBuilder,
) -> crate::types::builders::MeetingEventsConcatenationConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ArtifactsConcatenationState>().ok()
    }
    builder
}

pub(crate) fn transcription_messages_concatenation_configuration_correct_errors(
    mut builder: crate::types::builders::TranscriptionMessagesConcatenationConfigurationBuilder,
) -> crate::types::builders::TranscriptionMessagesConcatenationConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ArtifactsConcatenationState>().ok()
    }
    builder
}

pub(crate) fn video_concatenation_configuration_correct_errors(
    mut builder: crate::types::builders::VideoConcatenationConfigurationBuilder,
) -> crate::types::builders::VideoConcatenationConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ArtifactsConcatenationState>().ok()
    }
    builder
}
