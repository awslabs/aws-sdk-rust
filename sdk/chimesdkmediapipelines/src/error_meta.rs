// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The input parameters don't match the service's restrictions.</p>
    BadRequestException(crate::types::error::BadRequestException),
    /// <p>The client is permanently forbidden from making the request.</p>
    ForbiddenException(crate::types::error::ForbiddenException),
    /// <p>One or more of the resources in the request does not exist in the system.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>The request exceeds the resource limit.</p>
    ResourceLimitExceededException(crate::types::error::ResourceLimitExceededException),
    /// <p>The service encountered an unexpected error.</p>
    ServiceFailureException(crate::types::error::ServiceFailureException),
    /// <p>The service is currently unavailable.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>The client exceeded its request rate limit.</p>
    ThrottledClientException(crate::types::error::ThrottledClientException),
    /// <p>The client is not currently authorized to make the request.</p>
    UnauthorizedClientException(crate::types::error::UnauthorizedClientException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ResourceLimitExceededException(inner) => inner.fmt(f),
            Error::ServiceFailureException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottledClientException(inner) => inner.fmt(f),
            Error::UnauthorizedClientException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError>
    for Error
{
    fn from(
        err: crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError,
    ) -> Self {
        match err {
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::create_media_capture_pipeline::CreateMediaCapturePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineError> for Error {
    fn from(err: crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineError) -> Self {
        match err {
            crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::create_media_concatenation_pipeline::CreateMediaConcatenationPipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_media_live_connector_pipeline::CreateMediaLiveConnectorPipelineError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_media_live_connector_pipeline::CreateMediaLiveConnectorPipelineError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_media_live_connector_pipeline::CreateMediaLiveConnectorPipelineError> for Error {
    fn from(err: crate::operation::create_media_live_connector_pipeline::CreateMediaLiveConnectorPipelineError) -> Self {
        match err {
            crate::operation::create_media_live_connector_pipeline::CreateMediaLiveConnectorPipelineError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_media_live_connector_pipeline::CreateMediaLiveConnectorPipelineError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_media_live_connector_pipeline::CreateMediaLiveConnectorPipelineError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::operation::create_media_live_connector_pipeline::CreateMediaLiveConnectorPipelineError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_media_live_connector_pipeline::CreateMediaLiveConnectorPipelineError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_media_live_connector_pipeline::CreateMediaLiveConnectorPipelineError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::create_media_live_connector_pipeline::CreateMediaLiveConnectorPipelineError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::create_media_live_connector_pipeline::CreateMediaLiveConnectorPipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_media_capture_pipeline::DeleteMediaCapturePipelineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_media_capture_pipeline::DeleteMediaCapturePipelineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_media_capture_pipeline::DeleteMediaCapturePipelineError>
    for Error
{
    fn from(
        err: crate::operation::delete_media_capture_pipeline::DeleteMediaCapturePipelineError,
    ) -> Self {
        match err {
            crate::operation::delete_media_capture_pipeline::DeleteMediaCapturePipelineError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_media_capture_pipeline::DeleteMediaCapturePipelineError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_media_capture_pipeline::DeleteMediaCapturePipelineError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_media_capture_pipeline::DeleteMediaCapturePipelineError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_media_capture_pipeline::DeleteMediaCapturePipelineError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_media_capture_pipeline::DeleteMediaCapturePipelineError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::delete_media_capture_pipeline::DeleteMediaCapturePipelineError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::delete_media_capture_pipeline::DeleteMediaCapturePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_media_pipeline::DeleteMediaPipelineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_media_pipeline::DeleteMediaPipelineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_media_pipeline::DeleteMediaPipelineError> for Error {
    fn from(err: crate::operation::delete_media_pipeline::DeleteMediaPipelineError) -> Self {
        match err {
            crate::operation::delete_media_pipeline::DeleteMediaPipelineError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_media_pipeline::DeleteMediaPipelineError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_media_pipeline::DeleteMediaPipelineError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_media_pipeline::DeleteMediaPipelineError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_media_pipeline::DeleteMediaPipelineError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_media_pipeline::DeleteMediaPipelineError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::delete_media_pipeline::DeleteMediaPipelineError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::delete_media_pipeline::DeleteMediaPipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_media_capture_pipeline::GetMediaCapturePipelineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_media_capture_pipeline::GetMediaCapturePipelineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_media_capture_pipeline::GetMediaCapturePipelineError> for Error {
    fn from(
        err: crate::operation::get_media_capture_pipeline::GetMediaCapturePipelineError,
    ) -> Self {
        match err {
            crate::operation::get_media_capture_pipeline::GetMediaCapturePipelineError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_media_capture_pipeline::GetMediaCapturePipelineError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_media_capture_pipeline::GetMediaCapturePipelineError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_media_capture_pipeline::GetMediaCapturePipelineError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_media_capture_pipeline::GetMediaCapturePipelineError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_media_capture_pipeline::GetMediaCapturePipelineError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::get_media_capture_pipeline::GetMediaCapturePipelineError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::get_media_capture_pipeline::GetMediaCapturePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_media_pipeline::GetMediaPipelineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_media_pipeline::GetMediaPipelineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_media_pipeline::GetMediaPipelineError> for Error {
    fn from(err: crate::operation::get_media_pipeline::GetMediaPipelineError) -> Self {
        match err {
            crate::operation::get_media_pipeline::GetMediaPipelineError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_media_pipeline::GetMediaPipelineError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_media_pipeline::GetMediaPipelineError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_media_pipeline::GetMediaPipelineError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_media_pipeline::GetMediaPipelineError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_media_pipeline::GetMediaPipelineError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::get_media_pipeline::GetMediaPipelineError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::get_media_pipeline::GetMediaPipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_media_capture_pipelines::ListMediaCapturePipelinesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_media_capture_pipelines::ListMediaCapturePipelinesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_media_capture_pipelines::ListMediaCapturePipelinesError>
    for Error
{
    fn from(
        err: crate::operation::list_media_capture_pipelines::ListMediaCapturePipelinesError,
    ) -> Self {
        match err {
            crate::operation::list_media_capture_pipelines::ListMediaCapturePipelinesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_media_capture_pipelines::ListMediaCapturePipelinesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_media_capture_pipelines::ListMediaCapturePipelinesError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::operation::list_media_capture_pipelines::ListMediaCapturePipelinesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_media_capture_pipelines::ListMediaCapturePipelinesError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_media_capture_pipelines::ListMediaCapturePipelinesError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::list_media_capture_pipelines::ListMediaCapturePipelinesError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::list_media_capture_pipelines::ListMediaCapturePipelinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_media_pipelines::ListMediaPipelinesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_media_pipelines::ListMediaPipelinesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_media_pipelines::ListMediaPipelinesError> for Error {
    fn from(err: crate::operation::list_media_pipelines::ListMediaPipelinesError) -> Self {
        match err {
            crate::operation::list_media_pipelines::ListMediaPipelinesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_media_pipelines::ListMediaPipelinesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_media_pipelines::ListMediaPipelinesError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::operation::list_media_pipelines::ListMediaPipelinesError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_media_pipelines::ListMediaPipelinesError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_media_pipelines::ListMediaPipelinesError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::list_media_pipelines::ListMediaPipelinesError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::list_media_pipelines::ListMediaPipelinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::tag_resource::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::tag_resource::TagResourceError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::operation::untag_resource::UntagResourceError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottledClientException(
                inner,
            ) => Error::ThrottledClientException(inner),
            crate::operation::untag_resource::UntagResourceError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ResourceLimitExceededException(e) => e.request_id(),
            Self::ServiceFailureException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottledClientException(e) => e.request_id(),
            Self::UnauthorizedClientException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
