// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the artifacts concatenation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ArtifactsConcatenationConfiguration {
    /// <p>The configuration for the audio artifacts concatenation.</p>
    #[doc(hidden)]
    pub audio: std::option::Option<crate::types::AudioConcatenationConfiguration>,
    /// <p>The configuration for the video artifacts concatenation.</p>
    #[doc(hidden)]
    pub video: std::option::Option<crate::types::VideoConcatenationConfiguration>,
    /// <p>The configuration for the content artifacts concatenation.</p>
    #[doc(hidden)]
    pub content: std::option::Option<crate::types::ContentConcatenationConfiguration>,
    /// <p>The configuration for the data channel artifacts concatenation.</p>
    #[doc(hidden)]
    pub data_channel: std::option::Option<crate::types::DataChannelConcatenationConfiguration>,
    /// <p>The configuration for the transcription messages artifacts concatenation.</p>
    #[doc(hidden)]
    pub transcription_messages:
        std::option::Option<crate::types::TranscriptionMessagesConcatenationConfiguration>,
    /// <p>The configuration for the meeting events artifacts concatenation.</p>
    #[doc(hidden)]
    pub meeting_events: std::option::Option<crate::types::MeetingEventsConcatenationConfiguration>,
    /// <p>The configuration for the composited video artifacts concatenation.</p>
    #[doc(hidden)]
    pub composited_video:
        std::option::Option<crate::types::CompositedVideoConcatenationConfiguration>,
}
impl ArtifactsConcatenationConfiguration {
    /// <p>The configuration for the audio artifacts concatenation.</p>
    pub fn audio(&self) -> std::option::Option<&crate::types::AudioConcatenationConfiguration> {
        self.audio.as_ref()
    }
    /// <p>The configuration for the video artifacts concatenation.</p>
    pub fn video(&self) -> std::option::Option<&crate::types::VideoConcatenationConfiguration> {
        self.video.as_ref()
    }
    /// <p>The configuration for the content artifacts concatenation.</p>
    pub fn content(&self) -> std::option::Option<&crate::types::ContentConcatenationConfiguration> {
        self.content.as_ref()
    }
    /// <p>The configuration for the data channel artifacts concatenation.</p>
    pub fn data_channel(
        &self,
    ) -> std::option::Option<&crate::types::DataChannelConcatenationConfiguration> {
        self.data_channel.as_ref()
    }
    /// <p>The configuration for the transcription messages artifacts concatenation.</p>
    pub fn transcription_messages(
        &self,
    ) -> std::option::Option<&crate::types::TranscriptionMessagesConcatenationConfiguration> {
        self.transcription_messages.as_ref()
    }
    /// <p>The configuration for the meeting events artifacts concatenation.</p>
    pub fn meeting_events(
        &self,
    ) -> std::option::Option<&crate::types::MeetingEventsConcatenationConfiguration> {
        self.meeting_events.as_ref()
    }
    /// <p>The configuration for the composited video artifacts concatenation.</p>
    pub fn composited_video(
        &self,
    ) -> std::option::Option<&crate::types::CompositedVideoConcatenationConfiguration> {
        self.composited_video.as_ref()
    }
}
impl ArtifactsConcatenationConfiguration {
    /// Creates a new builder-style object to manufacture [`ArtifactsConcatenationConfiguration`](crate::types::ArtifactsConcatenationConfiguration).
    pub fn builder() -> crate::types::builders::ArtifactsConcatenationConfigurationBuilder {
        crate::types::builders::ArtifactsConcatenationConfigurationBuilder::default()
    }
}

/// A builder for [`ArtifactsConcatenationConfiguration`](crate::types::ArtifactsConcatenationConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ArtifactsConcatenationConfigurationBuilder {
    pub(crate) audio: std::option::Option<crate::types::AudioConcatenationConfiguration>,
    pub(crate) video: std::option::Option<crate::types::VideoConcatenationConfiguration>,
    pub(crate) content: std::option::Option<crate::types::ContentConcatenationConfiguration>,
    pub(crate) data_channel:
        std::option::Option<crate::types::DataChannelConcatenationConfiguration>,
    pub(crate) transcription_messages:
        std::option::Option<crate::types::TranscriptionMessagesConcatenationConfiguration>,
    pub(crate) meeting_events:
        std::option::Option<crate::types::MeetingEventsConcatenationConfiguration>,
    pub(crate) composited_video:
        std::option::Option<crate::types::CompositedVideoConcatenationConfiguration>,
}
impl ArtifactsConcatenationConfigurationBuilder {
    /// <p>The configuration for the audio artifacts concatenation.</p>
    pub fn audio(mut self, input: crate::types::AudioConcatenationConfiguration) -> Self {
        self.audio = Some(input);
        self
    }
    /// <p>The configuration for the audio artifacts concatenation.</p>
    pub fn set_audio(
        mut self,
        input: std::option::Option<crate::types::AudioConcatenationConfiguration>,
    ) -> Self {
        self.audio = input;
        self
    }
    /// <p>The configuration for the video artifacts concatenation.</p>
    pub fn video(mut self, input: crate::types::VideoConcatenationConfiguration) -> Self {
        self.video = Some(input);
        self
    }
    /// <p>The configuration for the video artifacts concatenation.</p>
    pub fn set_video(
        mut self,
        input: std::option::Option<crate::types::VideoConcatenationConfiguration>,
    ) -> Self {
        self.video = input;
        self
    }
    /// <p>The configuration for the content artifacts concatenation.</p>
    pub fn content(mut self, input: crate::types::ContentConcatenationConfiguration) -> Self {
        self.content = Some(input);
        self
    }
    /// <p>The configuration for the content artifacts concatenation.</p>
    pub fn set_content(
        mut self,
        input: std::option::Option<crate::types::ContentConcatenationConfiguration>,
    ) -> Self {
        self.content = input;
        self
    }
    /// <p>The configuration for the data channel artifacts concatenation.</p>
    pub fn data_channel(
        mut self,
        input: crate::types::DataChannelConcatenationConfiguration,
    ) -> Self {
        self.data_channel = Some(input);
        self
    }
    /// <p>The configuration for the data channel artifacts concatenation.</p>
    pub fn set_data_channel(
        mut self,
        input: std::option::Option<crate::types::DataChannelConcatenationConfiguration>,
    ) -> Self {
        self.data_channel = input;
        self
    }
    /// <p>The configuration for the transcription messages artifacts concatenation.</p>
    pub fn transcription_messages(
        mut self,
        input: crate::types::TranscriptionMessagesConcatenationConfiguration,
    ) -> Self {
        self.transcription_messages = Some(input);
        self
    }
    /// <p>The configuration for the transcription messages artifacts concatenation.</p>
    pub fn set_transcription_messages(
        mut self,
        input: std::option::Option<crate::types::TranscriptionMessagesConcatenationConfiguration>,
    ) -> Self {
        self.transcription_messages = input;
        self
    }
    /// <p>The configuration for the meeting events artifacts concatenation.</p>
    pub fn meeting_events(
        mut self,
        input: crate::types::MeetingEventsConcatenationConfiguration,
    ) -> Self {
        self.meeting_events = Some(input);
        self
    }
    /// <p>The configuration for the meeting events artifacts concatenation.</p>
    pub fn set_meeting_events(
        mut self,
        input: std::option::Option<crate::types::MeetingEventsConcatenationConfiguration>,
    ) -> Self {
        self.meeting_events = input;
        self
    }
    /// <p>The configuration for the composited video artifacts concatenation.</p>
    pub fn composited_video(
        mut self,
        input: crate::types::CompositedVideoConcatenationConfiguration,
    ) -> Self {
        self.composited_video = Some(input);
        self
    }
    /// <p>The configuration for the composited video artifacts concatenation.</p>
    pub fn set_composited_video(
        mut self,
        input: std::option::Option<crate::types::CompositedVideoConcatenationConfiguration>,
    ) -> Self {
        self.composited_video = input;
        self
    }
    /// Consumes the builder and constructs a [`ArtifactsConcatenationConfiguration`](crate::types::ArtifactsConcatenationConfiguration).
    pub fn build(self) -> crate::types::ArtifactsConcatenationConfiguration {
        crate::types::ArtifactsConcatenationConfiguration {
            audio: self.audio,
            video: self.video,
            content: self.content,
            data_channel: self.data_channel,
            transcription_messages: self.transcription_messages,
            meeting_events: self.meeting_events,
            composited_video: self.composited_video,
        }
    }
}
