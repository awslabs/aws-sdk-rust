// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the type of grid layout.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GridViewConfiguration {
    /// <p>Defines the layout of the video tiles when content sharing is enabled.</p>
    pub content_share_layout: crate::types::ContentShareLayoutOption,
    /// <p>Defines the configuration options for a presenter only video tile.</p>
    pub presenter_only_configuration: ::std::option::Option<crate::types::PresenterOnlyConfiguration>,
    /// <p>The configuration settings for an <code>ActiveSpeakerOnly</code> video tile.</p>
    pub active_speaker_only_configuration: ::std::option::Option<crate::types::ActiveSpeakerOnlyConfiguration>,
    /// <p>The configuration settings for a horizontal layout.</p>
    pub horizontal_layout_configuration: ::std::option::Option<crate::types::HorizontalLayoutConfiguration>,
    /// <p>The configuration settings for a vertical layout.</p>
    pub vertical_layout_configuration: ::std::option::Option<crate::types::VerticalLayoutConfiguration>,
    /// <p>The attribute settings for the video tiles.</p>
    pub video_attribute: ::std::option::Option<crate::types::VideoAttribute>,
    /// <p>The orientation setting, horizontal or vertical.</p>
    pub canvas_orientation: ::std::option::Option<crate::types::CanvasOrientation>,
}
impl GridViewConfiguration {
    /// <p>Defines the layout of the video tiles when content sharing is enabled.</p>
    pub fn content_share_layout(&self) -> &crate::types::ContentShareLayoutOption {
        &self.content_share_layout
    }
    /// <p>Defines the configuration options for a presenter only video tile.</p>
    pub fn presenter_only_configuration(&self) -> ::std::option::Option<&crate::types::PresenterOnlyConfiguration> {
        self.presenter_only_configuration.as_ref()
    }
    /// <p>The configuration settings for an <code>ActiveSpeakerOnly</code> video tile.</p>
    pub fn active_speaker_only_configuration(&self) -> ::std::option::Option<&crate::types::ActiveSpeakerOnlyConfiguration> {
        self.active_speaker_only_configuration.as_ref()
    }
    /// <p>The configuration settings for a horizontal layout.</p>
    pub fn horizontal_layout_configuration(&self) -> ::std::option::Option<&crate::types::HorizontalLayoutConfiguration> {
        self.horizontal_layout_configuration.as_ref()
    }
    /// <p>The configuration settings for a vertical layout.</p>
    pub fn vertical_layout_configuration(&self) -> ::std::option::Option<&crate::types::VerticalLayoutConfiguration> {
        self.vertical_layout_configuration.as_ref()
    }
    /// <p>The attribute settings for the video tiles.</p>
    pub fn video_attribute(&self) -> ::std::option::Option<&crate::types::VideoAttribute> {
        self.video_attribute.as_ref()
    }
    /// <p>The orientation setting, horizontal or vertical.</p>
    pub fn canvas_orientation(&self) -> ::std::option::Option<&crate::types::CanvasOrientation> {
        self.canvas_orientation.as_ref()
    }
}
impl GridViewConfiguration {
    /// Creates a new builder-style object to manufacture [`GridViewConfiguration`](crate::types::GridViewConfiguration).
    pub fn builder() -> crate::types::builders::GridViewConfigurationBuilder {
        crate::types::builders::GridViewConfigurationBuilder::default()
    }
}

/// A builder for [`GridViewConfiguration`](crate::types::GridViewConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GridViewConfigurationBuilder {
    pub(crate) content_share_layout: ::std::option::Option<crate::types::ContentShareLayoutOption>,
    pub(crate) presenter_only_configuration: ::std::option::Option<crate::types::PresenterOnlyConfiguration>,
    pub(crate) active_speaker_only_configuration: ::std::option::Option<crate::types::ActiveSpeakerOnlyConfiguration>,
    pub(crate) horizontal_layout_configuration: ::std::option::Option<crate::types::HorizontalLayoutConfiguration>,
    pub(crate) vertical_layout_configuration: ::std::option::Option<crate::types::VerticalLayoutConfiguration>,
    pub(crate) video_attribute: ::std::option::Option<crate::types::VideoAttribute>,
    pub(crate) canvas_orientation: ::std::option::Option<crate::types::CanvasOrientation>,
}
impl GridViewConfigurationBuilder {
    /// <p>Defines the layout of the video tiles when content sharing is enabled.</p>
    /// This field is required.
    pub fn content_share_layout(mut self, input: crate::types::ContentShareLayoutOption) -> Self {
        self.content_share_layout = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the layout of the video tiles when content sharing is enabled.</p>
    pub fn set_content_share_layout(mut self, input: ::std::option::Option<crate::types::ContentShareLayoutOption>) -> Self {
        self.content_share_layout = input;
        self
    }
    /// <p>Defines the layout of the video tiles when content sharing is enabled.</p>
    pub fn get_content_share_layout(&self) -> &::std::option::Option<crate::types::ContentShareLayoutOption> {
        &self.content_share_layout
    }
    /// <p>Defines the configuration options for a presenter only video tile.</p>
    pub fn presenter_only_configuration(mut self, input: crate::types::PresenterOnlyConfiguration) -> Self {
        self.presenter_only_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the configuration options for a presenter only video tile.</p>
    pub fn set_presenter_only_configuration(mut self, input: ::std::option::Option<crate::types::PresenterOnlyConfiguration>) -> Self {
        self.presenter_only_configuration = input;
        self
    }
    /// <p>Defines the configuration options for a presenter only video tile.</p>
    pub fn get_presenter_only_configuration(&self) -> &::std::option::Option<crate::types::PresenterOnlyConfiguration> {
        &self.presenter_only_configuration
    }
    /// <p>The configuration settings for an <code>ActiveSpeakerOnly</code> video tile.</p>
    pub fn active_speaker_only_configuration(mut self, input: crate::types::ActiveSpeakerOnlyConfiguration) -> Self {
        self.active_speaker_only_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings for an <code>ActiveSpeakerOnly</code> video tile.</p>
    pub fn set_active_speaker_only_configuration(mut self, input: ::std::option::Option<crate::types::ActiveSpeakerOnlyConfiguration>) -> Self {
        self.active_speaker_only_configuration = input;
        self
    }
    /// <p>The configuration settings for an <code>ActiveSpeakerOnly</code> video tile.</p>
    pub fn get_active_speaker_only_configuration(&self) -> &::std::option::Option<crate::types::ActiveSpeakerOnlyConfiguration> {
        &self.active_speaker_only_configuration
    }
    /// <p>The configuration settings for a horizontal layout.</p>
    pub fn horizontal_layout_configuration(mut self, input: crate::types::HorizontalLayoutConfiguration) -> Self {
        self.horizontal_layout_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings for a horizontal layout.</p>
    pub fn set_horizontal_layout_configuration(mut self, input: ::std::option::Option<crate::types::HorizontalLayoutConfiguration>) -> Self {
        self.horizontal_layout_configuration = input;
        self
    }
    /// <p>The configuration settings for a horizontal layout.</p>
    pub fn get_horizontal_layout_configuration(&self) -> &::std::option::Option<crate::types::HorizontalLayoutConfiguration> {
        &self.horizontal_layout_configuration
    }
    /// <p>The configuration settings for a vertical layout.</p>
    pub fn vertical_layout_configuration(mut self, input: crate::types::VerticalLayoutConfiguration) -> Self {
        self.vertical_layout_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings for a vertical layout.</p>
    pub fn set_vertical_layout_configuration(mut self, input: ::std::option::Option<crate::types::VerticalLayoutConfiguration>) -> Self {
        self.vertical_layout_configuration = input;
        self
    }
    /// <p>The configuration settings for a vertical layout.</p>
    pub fn get_vertical_layout_configuration(&self) -> &::std::option::Option<crate::types::VerticalLayoutConfiguration> {
        &self.vertical_layout_configuration
    }
    /// <p>The attribute settings for the video tiles.</p>
    pub fn video_attribute(mut self, input: crate::types::VideoAttribute) -> Self {
        self.video_attribute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attribute settings for the video tiles.</p>
    pub fn set_video_attribute(mut self, input: ::std::option::Option<crate::types::VideoAttribute>) -> Self {
        self.video_attribute = input;
        self
    }
    /// <p>The attribute settings for the video tiles.</p>
    pub fn get_video_attribute(&self) -> &::std::option::Option<crate::types::VideoAttribute> {
        &self.video_attribute
    }
    /// <p>The orientation setting, horizontal or vertical.</p>
    pub fn canvas_orientation(mut self, input: crate::types::CanvasOrientation) -> Self {
        self.canvas_orientation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The orientation setting, horizontal or vertical.</p>
    pub fn set_canvas_orientation(mut self, input: ::std::option::Option<crate::types::CanvasOrientation>) -> Self {
        self.canvas_orientation = input;
        self
    }
    /// <p>The orientation setting, horizontal or vertical.</p>
    pub fn get_canvas_orientation(&self) -> &::std::option::Option<crate::types::CanvasOrientation> {
        &self.canvas_orientation
    }
    /// Consumes the builder and constructs a [`GridViewConfiguration`](crate::types::GridViewConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`content_share_layout`](crate::types::builders::GridViewConfigurationBuilder::content_share_layout)
    pub fn build(self) -> ::std::result::Result<crate::types::GridViewConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GridViewConfiguration {
            content_share_layout: self.content_share_layout.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_share_layout",
                    "content_share_layout was not specified but it is required when building GridViewConfiguration",
                )
            })?,
            presenter_only_configuration: self.presenter_only_configuration,
            active_speaker_only_configuration: self.active_speaker_only_configuration,
            horizontal_layout_configuration: self.horizontal_layout_configuration,
            vertical_layout_configuration: self.vertical_layout_configuration,
            video_attribute: self.video_attribute,
            canvas_orientation: self.canvas_orientation,
        })
    }
}
