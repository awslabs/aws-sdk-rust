// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration settings for a stream.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StreamConfiguration {
    /// <p>The ARN of the stream.</p>
    pub stream_arn: ::std::string::String,
    /// <p>The unique identifier of the fragment to begin processing.</p>
    pub fragment_number: ::std::option::Option<::std::string::String>,
    /// <p>The streaming channel definition in the stream configuration.</p>
    pub stream_channel_definition: ::std::option::Option<crate::types::StreamChannelDefinition>,
}
impl StreamConfiguration {
    /// <p>The ARN of the stream.</p>
    pub fn stream_arn(&self) -> &str {
        use std::ops::Deref;
        self.stream_arn.deref()
    }
    /// <p>The unique identifier of the fragment to begin processing.</p>
    pub fn fragment_number(&self) -> ::std::option::Option<&str> {
        self.fragment_number.as_deref()
    }
    /// <p>The streaming channel definition in the stream configuration.</p>
    pub fn stream_channel_definition(&self) -> ::std::option::Option<&crate::types::StreamChannelDefinition> {
        self.stream_channel_definition.as_ref()
    }
}
impl StreamConfiguration {
    /// Creates a new builder-style object to manufacture [`StreamConfiguration`](crate::types::StreamConfiguration).
    pub fn builder() -> crate::types::builders::StreamConfigurationBuilder {
        crate::types::builders::StreamConfigurationBuilder::default()
    }
}

/// A builder for [`StreamConfiguration`](crate::types::StreamConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StreamConfigurationBuilder {
    pub(crate) stream_arn: ::std::option::Option<::std::string::String>,
    pub(crate) fragment_number: ::std::option::Option<::std::string::String>,
    pub(crate) stream_channel_definition: ::std::option::Option<crate::types::StreamChannelDefinition>,
}
impl StreamConfigurationBuilder {
    /// <p>The ARN of the stream.</p>
    /// This field is required.
    pub fn stream_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the stream.</p>
    pub fn set_stream_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_arn = input;
        self
    }
    /// <p>The ARN of the stream.</p>
    pub fn get_stream_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_arn
    }
    /// <p>The unique identifier of the fragment to begin processing.</p>
    pub fn fragment_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fragment_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the fragment to begin processing.</p>
    pub fn set_fragment_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fragment_number = input;
        self
    }
    /// <p>The unique identifier of the fragment to begin processing.</p>
    pub fn get_fragment_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.fragment_number
    }
    /// <p>The streaming channel definition in the stream configuration.</p>
    /// This field is required.
    pub fn stream_channel_definition(mut self, input: crate::types::StreamChannelDefinition) -> Self {
        self.stream_channel_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The streaming channel definition in the stream configuration.</p>
    pub fn set_stream_channel_definition(mut self, input: ::std::option::Option<crate::types::StreamChannelDefinition>) -> Self {
        self.stream_channel_definition = input;
        self
    }
    /// <p>The streaming channel definition in the stream configuration.</p>
    pub fn get_stream_channel_definition(&self) -> &::std::option::Option<crate::types::StreamChannelDefinition> {
        &self.stream_channel_definition
    }
    /// Consumes the builder and constructs a [`StreamConfiguration`](crate::types::StreamConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`stream_arn`](crate::types::builders::StreamConfigurationBuilder::stream_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::StreamConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StreamConfiguration {
            stream_arn: self.stream_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "stream_arn",
                    "stream_arn was not specified but it is required when building StreamConfiguration",
                )
            })?,
            fragment_number: self.fragment_number,
            stream_channel_definition: self.stream_channel_definition,
        })
    }
}
