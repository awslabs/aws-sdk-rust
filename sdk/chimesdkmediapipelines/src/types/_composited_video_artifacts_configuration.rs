// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configuration for compositing video artifacts.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CompositedVideoArtifactsConfiguration {
    /// <p>The layout setting, such as <code>GridView</code> in the configuration object.</p>
    pub layout: ::std::option::Option<crate::types::LayoutOption>,
    /// <p>The video resolution setting in the configuration object. Default: HD at 1280 x 720. FHD resolution: 1920 x 1080.</p>
    pub resolution: ::std::option::Option<crate::types::ResolutionOption>,
    /// <p>The <code>GridView</code> configuration setting.</p>
    pub grid_view_configuration: ::std::option::Option<crate::types::GridViewConfiguration>,
}
impl CompositedVideoArtifactsConfiguration {
    /// <p>The layout setting, such as <code>GridView</code> in the configuration object.</p>
    pub fn layout(&self) -> ::std::option::Option<&crate::types::LayoutOption> {
        self.layout.as_ref()
    }
    /// <p>The video resolution setting in the configuration object. Default: HD at 1280 x 720. FHD resolution: 1920 x 1080.</p>
    pub fn resolution(&self) -> ::std::option::Option<&crate::types::ResolutionOption> {
        self.resolution.as_ref()
    }
    /// <p>The <code>GridView</code> configuration setting.</p>
    pub fn grid_view_configuration(&self) -> ::std::option::Option<&crate::types::GridViewConfiguration> {
        self.grid_view_configuration.as_ref()
    }
}
impl CompositedVideoArtifactsConfiguration {
    /// Creates a new builder-style object to manufacture [`CompositedVideoArtifactsConfiguration`](crate::types::CompositedVideoArtifactsConfiguration).
    pub fn builder() -> crate::types::builders::CompositedVideoArtifactsConfigurationBuilder {
        crate::types::builders::CompositedVideoArtifactsConfigurationBuilder::default()
    }
}

/// A builder for [`CompositedVideoArtifactsConfiguration`](crate::types::CompositedVideoArtifactsConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CompositedVideoArtifactsConfigurationBuilder {
    pub(crate) layout: ::std::option::Option<crate::types::LayoutOption>,
    pub(crate) resolution: ::std::option::Option<crate::types::ResolutionOption>,
    pub(crate) grid_view_configuration: ::std::option::Option<crate::types::GridViewConfiguration>,
}
impl CompositedVideoArtifactsConfigurationBuilder {
    /// <p>The layout setting, such as <code>GridView</code> in the configuration object.</p>
    pub fn layout(mut self, input: crate::types::LayoutOption) -> Self {
        self.layout = ::std::option::Option::Some(input);
        self
    }
    /// <p>The layout setting, such as <code>GridView</code> in the configuration object.</p>
    pub fn set_layout(mut self, input: ::std::option::Option<crate::types::LayoutOption>) -> Self {
        self.layout = input;
        self
    }
    /// <p>The layout setting, such as <code>GridView</code> in the configuration object.</p>
    pub fn get_layout(&self) -> &::std::option::Option<crate::types::LayoutOption> {
        &self.layout
    }
    /// <p>The video resolution setting in the configuration object. Default: HD at 1280 x 720. FHD resolution: 1920 x 1080.</p>
    pub fn resolution(mut self, input: crate::types::ResolutionOption) -> Self {
        self.resolution = ::std::option::Option::Some(input);
        self
    }
    /// <p>The video resolution setting in the configuration object. Default: HD at 1280 x 720. FHD resolution: 1920 x 1080.</p>
    pub fn set_resolution(mut self, input: ::std::option::Option<crate::types::ResolutionOption>) -> Self {
        self.resolution = input;
        self
    }
    /// <p>The video resolution setting in the configuration object. Default: HD at 1280 x 720. FHD resolution: 1920 x 1080.</p>
    pub fn get_resolution(&self) -> &::std::option::Option<crate::types::ResolutionOption> {
        &self.resolution
    }
    /// <p>The <code>GridView</code> configuration setting.</p>
    /// This field is required.
    pub fn grid_view_configuration(mut self, input: crate::types::GridViewConfiguration) -> Self {
        self.grid_view_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>GridView</code> configuration setting.</p>
    pub fn set_grid_view_configuration(mut self, input: ::std::option::Option<crate::types::GridViewConfiguration>) -> Self {
        self.grid_view_configuration = input;
        self
    }
    /// <p>The <code>GridView</code> configuration setting.</p>
    pub fn get_grid_view_configuration(&self) -> &::std::option::Option<crate::types::GridViewConfiguration> {
        &self.grid_view_configuration
    }
    /// Consumes the builder and constructs a [`CompositedVideoArtifactsConfiguration`](crate::types::CompositedVideoArtifactsConfiguration).
    pub fn build(self) -> crate::types::CompositedVideoArtifactsConfiguration {
        crate::types::CompositedVideoArtifactsConfiguration {
            layout: self.layout,
            resolution: self.resolution,
            grid_view_configuration: self.grid_view_configuration,
        }
    }
}
