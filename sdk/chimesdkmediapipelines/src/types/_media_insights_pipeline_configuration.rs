// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the configuration settings for a media insights pipeline.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MediaInsightsPipelineConfiguration {
    /// <p>The name of the configuration.</p>
    pub media_insights_pipeline_configuration_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the configuration.</p>
    pub media_insights_pipeline_configuration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the role used by the service to access Amazon Web Services resources.</p>
    pub resource_access_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Lists the rules that trigger a real-time alert.</p>
    pub real_time_alert_configuration: ::std::option::Option<crate::types::RealTimeAlertConfiguration>,
    /// <p>The elements in the configuration.</p>
    pub elements: ::std::option::Option<::std::vec::Vec<crate::types::MediaInsightsPipelineConfigurationElement>>,
    /// <p>The ID of the configuration.</p>
    pub media_insights_pipeline_configuration_id: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the configuration was created.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the configuration was last updated.</p>
    pub updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl MediaInsightsPipelineConfiguration {
    /// <p>The name of the configuration.</p>
    pub fn media_insights_pipeline_configuration_name(&self) -> ::std::option::Option<&str> {
        self.media_insights_pipeline_configuration_name.as_deref()
    }
    /// <p>The ARN of the configuration.</p>
    pub fn media_insights_pipeline_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.media_insights_pipeline_configuration_arn.as_deref()
    }
    /// <p>The ARN of the role used by the service to access Amazon Web Services resources.</p>
    pub fn resource_access_role_arn(&self) -> ::std::option::Option<&str> {
        self.resource_access_role_arn.as_deref()
    }
    /// <p>Lists the rules that trigger a real-time alert.</p>
    pub fn real_time_alert_configuration(&self) -> ::std::option::Option<&crate::types::RealTimeAlertConfiguration> {
        self.real_time_alert_configuration.as_ref()
    }
    /// <p>The elements in the configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.elements.is_none()`.
    pub fn elements(&self) -> &[crate::types::MediaInsightsPipelineConfigurationElement] {
        self.elements.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the configuration.</p>
    pub fn media_insights_pipeline_configuration_id(&self) -> ::std::option::Option<&str> {
        self.media_insights_pipeline_configuration_id.as_deref()
    }
    /// <p>The time at which the configuration was created.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time at which the configuration was last updated.</p>
    pub fn updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_timestamp.as_ref()
    }
}
impl ::std::fmt::Debug for MediaInsightsPipelineConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MediaInsightsPipelineConfiguration");
        formatter.field(
            "media_insights_pipeline_configuration_name",
            &self.media_insights_pipeline_configuration_name,
        );
        formatter.field("media_insights_pipeline_configuration_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_access_role_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("real_time_alert_configuration", &self.real_time_alert_configuration);
        formatter.field("elements", &self.elements);
        formatter.field("media_insights_pipeline_configuration_id", &self.media_insights_pipeline_configuration_id);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("updated_timestamp", &self.updated_timestamp);
        formatter.finish()
    }
}
impl MediaInsightsPipelineConfiguration {
    /// Creates a new builder-style object to manufacture [`MediaInsightsPipelineConfiguration`](crate::types::MediaInsightsPipelineConfiguration).
    pub fn builder() -> crate::types::builders::MediaInsightsPipelineConfigurationBuilder {
        crate::types::builders::MediaInsightsPipelineConfigurationBuilder::default()
    }
}

/// A builder for [`MediaInsightsPipelineConfiguration`](crate::types::MediaInsightsPipelineConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct MediaInsightsPipelineConfigurationBuilder {
    pub(crate) media_insights_pipeline_configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) media_insights_pipeline_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource_access_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) real_time_alert_configuration: ::std::option::Option<crate::types::RealTimeAlertConfiguration>,
    pub(crate) elements: ::std::option::Option<::std::vec::Vec<crate::types::MediaInsightsPipelineConfigurationElement>>,
    pub(crate) media_insights_pipeline_configuration_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl MediaInsightsPipelineConfigurationBuilder {
    /// <p>The name of the configuration.</p>
    pub fn media_insights_pipeline_configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_insights_pipeline_configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configuration.</p>
    pub fn set_media_insights_pipeline_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_insights_pipeline_configuration_name = input;
        self
    }
    /// <p>The name of the configuration.</p>
    pub fn get_media_insights_pipeline_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_insights_pipeline_configuration_name
    }
    /// <p>The ARN of the configuration.</p>
    pub fn media_insights_pipeline_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_insights_pipeline_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the configuration.</p>
    pub fn set_media_insights_pipeline_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_insights_pipeline_configuration_arn = input;
        self
    }
    /// <p>The ARN of the configuration.</p>
    pub fn get_media_insights_pipeline_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_insights_pipeline_configuration_arn
    }
    /// <p>The ARN of the role used by the service to access Amazon Web Services resources.</p>
    pub fn resource_access_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_access_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the role used by the service to access Amazon Web Services resources.</p>
    pub fn set_resource_access_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_access_role_arn = input;
        self
    }
    /// <p>The ARN of the role used by the service to access Amazon Web Services resources.</p>
    pub fn get_resource_access_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_access_role_arn
    }
    /// <p>Lists the rules that trigger a real-time alert.</p>
    pub fn real_time_alert_configuration(mut self, input: crate::types::RealTimeAlertConfiguration) -> Self {
        self.real_time_alert_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Lists the rules that trigger a real-time alert.</p>
    pub fn set_real_time_alert_configuration(mut self, input: ::std::option::Option<crate::types::RealTimeAlertConfiguration>) -> Self {
        self.real_time_alert_configuration = input;
        self
    }
    /// <p>Lists the rules that trigger a real-time alert.</p>
    pub fn get_real_time_alert_configuration(&self) -> &::std::option::Option<crate::types::RealTimeAlertConfiguration> {
        &self.real_time_alert_configuration
    }
    /// Appends an item to `elements`.
    ///
    /// To override the contents of this collection use [`set_elements`](Self::set_elements).
    ///
    /// <p>The elements in the configuration.</p>
    pub fn elements(mut self, input: crate::types::MediaInsightsPipelineConfigurationElement) -> Self {
        let mut v = self.elements.unwrap_or_default();
        v.push(input);
        self.elements = ::std::option::Option::Some(v);
        self
    }
    /// <p>The elements in the configuration.</p>
    pub fn set_elements(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MediaInsightsPipelineConfigurationElement>>) -> Self {
        self.elements = input;
        self
    }
    /// <p>The elements in the configuration.</p>
    pub fn get_elements(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MediaInsightsPipelineConfigurationElement>> {
        &self.elements
    }
    /// <p>The ID of the configuration.</p>
    pub fn media_insights_pipeline_configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_insights_pipeline_configuration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the configuration.</p>
    pub fn set_media_insights_pipeline_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_insights_pipeline_configuration_id = input;
        self
    }
    /// <p>The ID of the configuration.</p>
    pub fn get_media_insights_pipeline_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_insights_pipeline_configuration_id
    }
    /// <p>The time at which the configuration was created.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the configuration was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time at which the configuration was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The time at which the configuration was last updated.</p>
    pub fn updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the configuration was last updated.</p>
    pub fn set_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_timestamp = input;
        self
    }
    /// <p>The time at which the configuration was last updated.</p>
    pub fn get_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_timestamp
    }
    /// Consumes the builder and constructs a [`MediaInsightsPipelineConfiguration`](crate::types::MediaInsightsPipelineConfiguration).
    pub fn build(self) -> crate::types::MediaInsightsPipelineConfiguration {
        crate::types::MediaInsightsPipelineConfiguration {
            media_insights_pipeline_configuration_name: self.media_insights_pipeline_configuration_name,
            media_insights_pipeline_configuration_arn: self.media_insights_pipeline_configuration_arn,
            resource_access_role_arn: self.resource_access_role_arn,
            real_time_alert_configuration: self.real_time_alert_configuration,
            elements: self.elements,
            media_insights_pipeline_configuration_id: self.media_insights_pipeline_configuration_id,
            created_timestamp: self.created_timestamp,
            updated_timestamp: self.updated_timestamp,
        }
    }
}
impl ::std::fmt::Debug for MediaInsightsPipelineConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MediaInsightsPipelineConfigurationBuilder");
        formatter.field(
            "media_insights_pipeline_configuration_name",
            &self.media_insights_pipeline_configuration_name,
        );
        formatter.field("media_insights_pipeline_configuration_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_access_role_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("real_time_alert_configuration", &self.real_time_alert_configuration);
        formatter.field("elements", &self.elements);
        formatter.field("media_insights_pipeline_configuration_id", &self.media_insights_pipeline_configuration_id);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("updated_timestamp", &self.updated_timestamp);
        formatter.finish()
    }
}
