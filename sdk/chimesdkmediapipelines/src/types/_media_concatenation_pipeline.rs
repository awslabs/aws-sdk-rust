// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Concatenates audio and video data from one or more data streams.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MediaConcatenationPipeline {
    /// <p>The ID of the media pipeline being concatenated.</p>
    #[doc(hidden)]
    pub media_pipeline_id: std::option::Option<std::string::String>,
    /// <p>The ARN of the media pipeline that you specify in the <code>SourceConfiguration</code> object.</p>
    #[doc(hidden)]
    pub media_pipeline_arn: std::option::Option<std::string::String>,
    /// <p>The data sources being concatnated.</p>
    #[doc(hidden)]
    pub sources: std::option::Option<std::vec::Vec<crate::types::ConcatenationSource>>,
    /// <p>The data sinks of the concatenation pipeline.</p>
    #[doc(hidden)]
    pub sinks: std::option::Option<std::vec::Vec<crate::types::ConcatenationSink>>,
    /// <p>The status of the concatenation pipeline.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::MediaPipelineStatus>,
    /// <p>The time at which the concatenation pipeline was created.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the concatenation pipeline was last updated.</p>
    #[doc(hidden)]
    pub updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl MediaConcatenationPipeline {
    /// <p>The ID of the media pipeline being concatenated.</p>
    pub fn media_pipeline_id(&self) -> std::option::Option<&str> {
        self.media_pipeline_id.as_deref()
    }
    /// <p>The ARN of the media pipeline that you specify in the <code>SourceConfiguration</code> object.</p>
    pub fn media_pipeline_arn(&self) -> std::option::Option<&str> {
        self.media_pipeline_arn.as_deref()
    }
    /// <p>The data sources being concatnated.</p>
    pub fn sources(&self) -> std::option::Option<&[crate::types::ConcatenationSource]> {
        self.sources.as_deref()
    }
    /// <p>The data sinks of the concatenation pipeline.</p>
    pub fn sinks(&self) -> std::option::Option<&[crate::types::ConcatenationSink]> {
        self.sinks.as_deref()
    }
    /// <p>The status of the concatenation pipeline.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::MediaPipelineStatus> {
        self.status.as_ref()
    }
    /// <p>The time at which the concatenation pipeline was created.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time at which the concatenation pipeline was last updated.</p>
    pub fn updated_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_timestamp.as_ref()
    }
}
impl MediaConcatenationPipeline {
    /// Creates a new builder-style object to manufacture [`MediaConcatenationPipeline`](crate::types::MediaConcatenationPipeline).
    pub fn builder() -> crate::types::builders::MediaConcatenationPipelineBuilder {
        crate::types::builders::MediaConcatenationPipelineBuilder::default()
    }
}

/// A builder for [`MediaConcatenationPipeline`](crate::types::MediaConcatenationPipeline).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MediaConcatenationPipelineBuilder {
    pub(crate) media_pipeline_id: std::option::Option<std::string::String>,
    pub(crate) media_pipeline_arn: std::option::Option<std::string::String>,
    pub(crate) sources: std::option::Option<std::vec::Vec<crate::types::ConcatenationSource>>,
    pub(crate) sinks: std::option::Option<std::vec::Vec<crate::types::ConcatenationSink>>,
    pub(crate) status: std::option::Option<crate::types::MediaPipelineStatus>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl MediaConcatenationPipelineBuilder {
    /// <p>The ID of the media pipeline being concatenated.</p>
    pub fn media_pipeline_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.media_pipeline_id = Some(input.into());
        self
    }
    /// <p>The ID of the media pipeline being concatenated.</p>
    pub fn set_media_pipeline_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.media_pipeline_id = input;
        self
    }
    /// <p>The ARN of the media pipeline that you specify in the <code>SourceConfiguration</code> object.</p>
    pub fn media_pipeline_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.media_pipeline_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the media pipeline that you specify in the <code>SourceConfiguration</code> object.</p>
    pub fn set_media_pipeline_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.media_pipeline_arn = input;
        self
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The data sources being concatnated.</p>
    pub fn sources(mut self, input: crate::types::ConcatenationSource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = Some(v);
        self
    }
    /// <p>The data sources being concatnated.</p>
    pub fn set_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConcatenationSource>>,
    ) -> Self {
        self.sources = input;
        self
    }
    /// Appends an item to `sinks`.
    ///
    /// To override the contents of this collection use [`set_sinks`](Self::set_sinks).
    ///
    /// <p>The data sinks of the concatenation pipeline.</p>
    pub fn sinks(mut self, input: crate::types::ConcatenationSink) -> Self {
        let mut v = self.sinks.unwrap_or_default();
        v.push(input);
        self.sinks = Some(v);
        self
    }
    /// <p>The data sinks of the concatenation pipeline.</p>
    pub fn set_sinks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ConcatenationSink>>,
    ) -> Self {
        self.sinks = input;
        self
    }
    /// <p>The status of the concatenation pipeline.</p>
    pub fn status(mut self, input: crate::types::MediaPipelineStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the concatenation pipeline.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::MediaPipelineStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The time at which the concatenation pipeline was created.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The time at which the concatenation pipeline was created.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time at which the concatenation pipeline was last updated.</p>
    pub fn updated_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_timestamp = Some(input);
        self
    }
    /// <p>The time at which the concatenation pipeline was last updated.</p>
    pub fn set_updated_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_timestamp = input;
        self
    }
    /// Consumes the builder and constructs a [`MediaConcatenationPipeline`](crate::types::MediaConcatenationPipeline).
    pub fn build(self) -> crate::types::MediaConcatenationPipeline {
        crate::types::MediaConcatenationPipeline {
            media_pipeline_id: self.media_pipeline_id,
            media_pipeline_arn: self.media_pipeline_arn,
            sources: self.sources,
            sinks: self.sinks,
            status: self.status,
            created_timestamp: self.created_timestamp,
            updated_timestamp: self.updated_timestamp,
        }
    }
}
