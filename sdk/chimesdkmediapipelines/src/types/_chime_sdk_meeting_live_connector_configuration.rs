// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The media pipeline's configuration object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ChimeSdkMeetingLiveConnectorConfiguration {
    /// <p>The configuration object's Chime SDK meeting ARN.</p>
    pub arn: ::std::string::String,
    /// <p>The configuration object's multiplex type.</p>
    pub mux_type: crate::types::LiveConnectorMuxType,
    /// <p>The media pipeline's composited video.</p>
    pub composited_video: ::std::option::Option<crate::types::CompositedVideoArtifactsConfiguration>,
    /// <p>The source configuration settings of the media pipeline's configuration object.</p>
    pub source_configuration: ::std::option::Option<crate::types::SourceConfiguration>,
}
impl ChimeSdkMeetingLiveConnectorConfiguration {
    /// <p>The configuration object's Chime SDK meeting ARN.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The configuration object's multiplex type.</p>
    pub fn mux_type(&self) -> &crate::types::LiveConnectorMuxType {
        &self.mux_type
    }
    /// <p>The media pipeline's composited video.</p>
    pub fn composited_video(&self) -> ::std::option::Option<&crate::types::CompositedVideoArtifactsConfiguration> {
        self.composited_video.as_ref()
    }
    /// <p>The source configuration settings of the media pipeline's configuration object.</p>
    pub fn source_configuration(&self) -> ::std::option::Option<&crate::types::SourceConfiguration> {
        self.source_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for ChimeSdkMeetingLiveConnectorConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ChimeSdkMeetingLiveConnectorConfiguration");
        formatter.field("arn", &"*** Sensitive Data Redacted ***");
        formatter.field("mux_type", &self.mux_type);
        formatter.field("composited_video", &self.composited_video);
        formatter.field("source_configuration", &self.source_configuration);
        formatter.finish()
    }
}
impl ChimeSdkMeetingLiveConnectorConfiguration {
    /// Creates a new builder-style object to manufacture [`ChimeSdkMeetingLiveConnectorConfiguration`](crate::types::ChimeSdkMeetingLiveConnectorConfiguration).
    pub fn builder() -> crate::types::builders::ChimeSdkMeetingLiveConnectorConfigurationBuilder {
        crate::types::builders::ChimeSdkMeetingLiveConnectorConfigurationBuilder::default()
    }
}

/// A builder for [`ChimeSdkMeetingLiveConnectorConfiguration`](crate::types::ChimeSdkMeetingLiveConnectorConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ChimeSdkMeetingLiveConnectorConfigurationBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) mux_type: ::std::option::Option<crate::types::LiveConnectorMuxType>,
    pub(crate) composited_video: ::std::option::Option<crate::types::CompositedVideoArtifactsConfiguration>,
    pub(crate) source_configuration: ::std::option::Option<crate::types::SourceConfiguration>,
}
impl ChimeSdkMeetingLiveConnectorConfigurationBuilder {
    /// <p>The configuration object's Chime SDK meeting ARN.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The configuration object's Chime SDK meeting ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The configuration object's Chime SDK meeting ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The configuration object's multiplex type.</p>
    /// This field is required.
    pub fn mux_type(mut self, input: crate::types::LiveConnectorMuxType) -> Self {
        self.mux_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration object's multiplex type.</p>
    pub fn set_mux_type(mut self, input: ::std::option::Option<crate::types::LiveConnectorMuxType>) -> Self {
        self.mux_type = input;
        self
    }
    /// <p>The configuration object's multiplex type.</p>
    pub fn get_mux_type(&self) -> &::std::option::Option<crate::types::LiveConnectorMuxType> {
        &self.mux_type
    }
    /// <p>The media pipeline's composited video.</p>
    pub fn composited_video(mut self, input: crate::types::CompositedVideoArtifactsConfiguration) -> Self {
        self.composited_video = ::std::option::Option::Some(input);
        self
    }
    /// <p>The media pipeline's composited video.</p>
    pub fn set_composited_video(mut self, input: ::std::option::Option<crate::types::CompositedVideoArtifactsConfiguration>) -> Self {
        self.composited_video = input;
        self
    }
    /// <p>The media pipeline's composited video.</p>
    pub fn get_composited_video(&self) -> &::std::option::Option<crate::types::CompositedVideoArtifactsConfiguration> {
        &self.composited_video
    }
    /// <p>The source configuration settings of the media pipeline's configuration object.</p>
    pub fn source_configuration(mut self, input: crate::types::SourceConfiguration) -> Self {
        self.source_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source configuration settings of the media pipeline's configuration object.</p>
    pub fn set_source_configuration(mut self, input: ::std::option::Option<crate::types::SourceConfiguration>) -> Self {
        self.source_configuration = input;
        self
    }
    /// <p>The source configuration settings of the media pipeline's configuration object.</p>
    pub fn get_source_configuration(&self) -> &::std::option::Option<crate::types::SourceConfiguration> {
        &self.source_configuration
    }
    /// Consumes the builder and constructs a [`ChimeSdkMeetingLiveConnectorConfiguration`](crate::types::ChimeSdkMeetingLiveConnectorConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ChimeSdkMeetingLiveConnectorConfigurationBuilder::arn)
    /// - [`mux_type`](crate::types::builders::ChimeSdkMeetingLiveConnectorConfigurationBuilder::mux_type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ChimeSdkMeetingLiveConnectorConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ChimeSdkMeetingLiveConnectorConfiguration {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ChimeSdkMeetingLiveConnectorConfiguration",
                )
            })?,
            mux_type: self.mux_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mux_type",
                    "mux_type was not specified but it is required when building ChimeSdkMeetingLiveConnectorConfiguration",
                )
            })?,
            composited_video: self.composited_video,
            source_configuration: self.source_configuration,
        })
    }
}
impl ::std::fmt::Debug for ChimeSdkMeetingLiveConnectorConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ChimeSdkMeetingLiveConnectorConfigurationBuilder");
        formatter.field("arn", &"*** Sensitive Data Redacted ***");
        formatter.field("mux_type", &self.mux_type);
        formatter.field("composited_video", &self.composited_video);
        formatter.field("source_configuration", &self.source_configuration);
        formatter.finish()
    }
}
