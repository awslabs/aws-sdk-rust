// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines an audio channel in a Kinesis video stream.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChannelDefinition {
    /// <p>The channel ID.</p>
    pub channel_id: i32,
    /// <p>Specifies whether the audio in a channel belongs to the <code>AGENT</code> or <code>CUSTOMER</code>.</p>
    pub participant_role: ::std::option::Option<crate::types::ParticipantRole>,
}
impl ChannelDefinition {
    /// <p>The channel ID.</p>
    pub fn channel_id(&self) -> i32 {
        self.channel_id
    }
    /// <p>Specifies whether the audio in a channel belongs to the <code>AGENT</code> or <code>CUSTOMER</code>.</p>
    pub fn participant_role(&self) -> ::std::option::Option<&crate::types::ParticipantRole> {
        self.participant_role.as_ref()
    }
}
impl ChannelDefinition {
    /// Creates a new builder-style object to manufacture [`ChannelDefinition`](crate::types::ChannelDefinition).
    pub fn builder() -> crate::types::builders::ChannelDefinitionBuilder {
        crate::types::builders::ChannelDefinitionBuilder::default()
    }
}

/// A builder for [`ChannelDefinition`](crate::types::ChannelDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ChannelDefinitionBuilder {
    pub(crate) channel_id: ::std::option::Option<i32>,
    pub(crate) participant_role: ::std::option::Option<crate::types::ParticipantRole>,
}
impl ChannelDefinitionBuilder {
    /// <p>The channel ID.</p>
    /// This field is required.
    pub fn channel_id(mut self, input: i32) -> Self {
        self.channel_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The channel ID.</p>
    pub fn set_channel_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.channel_id = input;
        self
    }
    /// <p>The channel ID.</p>
    pub fn get_channel_id(&self) -> &::std::option::Option<i32> {
        &self.channel_id
    }
    /// <p>Specifies whether the audio in a channel belongs to the <code>AGENT</code> or <code>CUSTOMER</code>.</p>
    pub fn participant_role(mut self, input: crate::types::ParticipantRole) -> Self {
        self.participant_role = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the audio in a channel belongs to the <code>AGENT</code> or <code>CUSTOMER</code>.</p>
    pub fn set_participant_role(mut self, input: ::std::option::Option<crate::types::ParticipantRole>) -> Self {
        self.participant_role = input;
        self
    }
    /// <p>Specifies whether the audio in a channel belongs to the <code>AGENT</code> or <code>CUSTOMER</code>.</p>
    pub fn get_participant_role(&self) -> &::std::option::Option<crate::types::ParticipantRole> {
        &self.participant_role
    }
    /// Consumes the builder and constructs a [`ChannelDefinition`](crate::types::ChannelDefinition).
    pub fn build(self) -> crate::types::ChannelDefinition {
        crate::types::ChannelDefinition {
            channel_id: self.channel_id.unwrap_or_default(),
            participant_role: self.participant_role,
        }
    }
}
