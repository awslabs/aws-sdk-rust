// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A pipeline consisting of a media capture, media concatenation, or live-streaming pipeline.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MediaPipeline {
    /// <p>A pipeline that enables users to capture audio and video.</p>
    #[doc(hidden)]
    pub media_capture_pipeline: std::option::Option<crate::types::MediaCapturePipeline>,
    /// <p>The connector pipeline of the media pipeline.</p>
    #[doc(hidden)]
    pub media_live_connector_pipeline:
        std::option::Option<crate::types::MediaLiveConnectorPipeline>,
    /// <p>The media concatenation pipeline in a media pipeline.</p>
    #[doc(hidden)]
    pub media_concatenation_pipeline: std::option::Option<crate::types::MediaConcatenationPipeline>,
}
impl MediaPipeline {
    /// <p>A pipeline that enables users to capture audio and video.</p>
    pub fn media_capture_pipeline(
        &self,
    ) -> std::option::Option<&crate::types::MediaCapturePipeline> {
        self.media_capture_pipeline.as_ref()
    }
    /// <p>The connector pipeline of the media pipeline.</p>
    pub fn media_live_connector_pipeline(
        &self,
    ) -> std::option::Option<&crate::types::MediaLiveConnectorPipeline> {
        self.media_live_connector_pipeline.as_ref()
    }
    /// <p>The media concatenation pipeline in a media pipeline.</p>
    pub fn media_concatenation_pipeline(
        &self,
    ) -> std::option::Option<&crate::types::MediaConcatenationPipeline> {
        self.media_concatenation_pipeline.as_ref()
    }
}
impl MediaPipeline {
    /// Creates a new builder-style object to manufacture [`MediaPipeline`](crate::types::MediaPipeline).
    pub fn builder() -> crate::types::builders::MediaPipelineBuilder {
        crate::types::builders::MediaPipelineBuilder::default()
    }
}

/// A builder for [`MediaPipeline`](crate::types::MediaPipeline).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MediaPipelineBuilder {
    pub(crate) media_capture_pipeline: std::option::Option<crate::types::MediaCapturePipeline>,
    pub(crate) media_live_connector_pipeline:
        std::option::Option<crate::types::MediaLiveConnectorPipeline>,
    pub(crate) media_concatenation_pipeline:
        std::option::Option<crate::types::MediaConcatenationPipeline>,
}
impl MediaPipelineBuilder {
    /// <p>A pipeline that enables users to capture audio and video.</p>
    pub fn media_capture_pipeline(mut self, input: crate::types::MediaCapturePipeline) -> Self {
        self.media_capture_pipeline = Some(input);
        self
    }
    /// <p>A pipeline that enables users to capture audio and video.</p>
    pub fn set_media_capture_pipeline(
        mut self,
        input: std::option::Option<crate::types::MediaCapturePipeline>,
    ) -> Self {
        self.media_capture_pipeline = input;
        self
    }
    /// <p>The connector pipeline of the media pipeline.</p>
    pub fn media_live_connector_pipeline(
        mut self,
        input: crate::types::MediaLiveConnectorPipeline,
    ) -> Self {
        self.media_live_connector_pipeline = Some(input);
        self
    }
    /// <p>The connector pipeline of the media pipeline.</p>
    pub fn set_media_live_connector_pipeline(
        mut self,
        input: std::option::Option<crate::types::MediaLiveConnectorPipeline>,
    ) -> Self {
        self.media_live_connector_pipeline = input;
        self
    }
    /// <p>The media concatenation pipeline in a media pipeline.</p>
    pub fn media_concatenation_pipeline(
        mut self,
        input: crate::types::MediaConcatenationPipeline,
    ) -> Self {
        self.media_concatenation_pipeline = Some(input);
        self
    }
    /// <p>The media concatenation pipeline in a media pipeline.</p>
    pub fn set_media_concatenation_pipeline(
        mut self,
        input: std::option::Option<crate::types::MediaConcatenationPipeline>,
    ) -> Self {
        self.media_concatenation_pipeline = input;
        self
    }
    /// Consumes the builder and constructs a [`MediaPipeline`](crate::types::MediaPipeline).
    pub fn build(self) -> crate::types::MediaPipeline {
        crate::types::MediaPipeline {
            media_capture_pipeline: self.media_capture_pipeline,
            media_live_connector_pipeline: self.media_live_connector_pipeline,
            media_concatenation_pipeline: self.media_concatenation_pipeline,
        }
    }
}
