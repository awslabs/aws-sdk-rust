// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure that contains the settings for a media stream pipeline.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaStreamPipeline {
    /// <p>The ID of the media stream pipeline</p>
    pub media_pipeline_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the media stream pipeline.</p>
    pub media_pipeline_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the media stream pipeline was created.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the media stream pipeline was updated.</p>
    pub updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of the media stream pipeline.</p>
    pub status: ::std::option::Option<crate::types::MediaPipelineStatus>,
    /// <p>The media stream pipeline's data sources.</p>
    pub sources: ::std::option::Option<::std::vec::Vec<crate::types::MediaStreamSource>>,
    /// <p>The media stream pipeline's data sinks.</p>
    pub sinks: ::std::option::Option<::std::vec::Vec<crate::types::MediaStreamSink>>,
}
impl MediaStreamPipeline {
    /// <p>The ID of the media stream pipeline</p>
    pub fn media_pipeline_id(&self) -> ::std::option::Option<&str> {
        self.media_pipeline_id.as_deref()
    }
    /// <p>The ARN of the media stream pipeline.</p>
    pub fn media_pipeline_arn(&self) -> ::std::option::Option<&str> {
        self.media_pipeline_arn.as_deref()
    }
    /// <p>The time at which the media stream pipeline was created.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time at which the media stream pipeline was updated.</p>
    pub fn updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_timestamp.as_ref()
    }
    /// <p>The status of the media stream pipeline.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MediaPipelineStatus> {
        self.status.as_ref()
    }
    /// <p>The media stream pipeline's data sources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sources.is_none()`.
    pub fn sources(&self) -> &[crate::types::MediaStreamSource] {
        self.sources.as_deref().unwrap_or_default()
    }
    /// <p>The media stream pipeline's data sinks.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sinks.is_none()`.
    pub fn sinks(&self) -> &[crate::types::MediaStreamSink] {
        self.sinks.as_deref().unwrap_or_default()
    }
}
impl MediaStreamPipeline {
    /// Creates a new builder-style object to manufacture [`MediaStreamPipeline`](crate::types::MediaStreamPipeline).
    pub fn builder() -> crate::types::builders::MediaStreamPipelineBuilder {
        crate::types::builders::MediaStreamPipelineBuilder::default()
    }
}

/// A builder for [`MediaStreamPipeline`](crate::types::MediaStreamPipeline).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MediaStreamPipelineBuilder {
    pub(crate) media_pipeline_id: ::std::option::Option<::std::string::String>,
    pub(crate) media_pipeline_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::MediaPipelineStatus>,
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::MediaStreamSource>>,
    pub(crate) sinks: ::std::option::Option<::std::vec::Vec<crate::types::MediaStreamSink>>,
}
impl MediaStreamPipelineBuilder {
    /// <p>The ID of the media stream pipeline</p>
    pub fn media_pipeline_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_pipeline_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the media stream pipeline</p>
    pub fn set_media_pipeline_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_pipeline_id = input;
        self
    }
    /// <p>The ID of the media stream pipeline</p>
    pub fn get_media_pipeline_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_pipeline_id
    }
    /// <p>The ARN of the media stream pipeline.</p>
    pub fn media_pipeline_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_pipeline_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the media stream pipeline.</p>
    pub fn set_media_pipeline_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_pipeline_arn = input;
        self
    }
    /// <p>The ARN of the media stream pipeline.</p>
    pub fn get_media_pipeline_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_pipeline_arn
    }
    /// <p>The time at which the media stream pipeline was created.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the media stream pipeline was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time at which the media stream pipeline was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The time at which the media stream pipeline was updated.</p>
    pub fn updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the media stream pipeline was updated.</p>
    pub fn set_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_timestamp = input;
        self
    }
    /// <p>The time at which the media stream pipeline was updated.</p>
    pub fn get_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_timestamp
    }
    /// <p>The status of the media stream pipeline.</p>
    pub fn status(mut self, input: crate::types::MediaPipelineStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the media stream pipeline.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MediaPipelineStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the media stream pipeline.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MediaPipelineStatus> {
        &self.status
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The media stream pipeline's data sources.</p>
    pub fn sources(mut self, input: crate::types::MediaStreamSource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The media stream pipeline's data sources.</p>
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MediaStreamSource>>) -> Self {
        self.sources = input;
        self
    }
    /// <p>The media stream pipeline's data sources.</p>
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MediaStreamSource>> {
        &self.sources
    }
    /// Appends an item to `sinks`.
    ///
    /// To override the contents of this collection use [`set_sinks`](Self::set_sinks).
    ///
    /// <p>The media stream pipeline's data sinks.</p>
    pub fn sinks(mut self, input: crate::types::MediaStreamSink) -> Self {
        let mut v = self.sinks.unwrap_or_default();
        v.push(input);
        self.sinks = ::std::option::Option::Some(v);
        self
    }
    /// <p>The media stream pipeline's data sinks.</p>
    pub fn set_sinks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MediaStreamSink>>) -> Self {
        self.sinks = input;
        self
    }
    /// <p>The media stream pipeline's data sinks.</p>
    pub fn get_sinks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MediaStreamSink>> {
        &self.sinks
    }
    /// Consumes the builder and constructs a [`MediaStreamPipeline`](crate::types::MediaStreamPipeline).
    pub fn build(self) -> crate::types::MediaStreamPipeline {
        crate::types::MediaStreamPipeline {
            media_pipeline_id: self.media_pipeline_id,
            media_pipeline_arn: self.media_pipeline_arn,
            created_timestamp: self.created_timestamp,
            updated_timestamp: self.updated_timestamp,
            status: self.status,
            sources: self.sources,
            sinks: self.sinks,
        }
    }
}
