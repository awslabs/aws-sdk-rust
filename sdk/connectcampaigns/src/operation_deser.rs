// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateCampaignOutput, crate::error::CreateCampaignError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CreateCampaignError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::CreateCampaignError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConflictException" => crate::error::CreateCampaignError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_exception::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CreateCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => crate::error::CreateCampaignError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ResourceNotFoundException" => {
            crate::error::CreateCampaignError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ServiceQuotaExceededException" => {
            crate::error::CreateCampaignError::ServiceQuotaExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::service_quota_exceeded_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_service_quota_exceeded_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_service_quota_exceeded_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::CreateCampaignError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::CreateCampaignError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::CreateCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_create_campaign_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::CreateCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::CreateCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateCampaignOutput, crate::error::CreateCampaignError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_campaign_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_create_campaign(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateCampaignError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteCampaignOutput, crate::error::DeleteCampaignError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeleteCampaignError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::DeleteCampaignError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => crate::error::DeleteCampaignError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ResourceNotFoundException" => {
            crate::error::DeleteCampaignError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::DeleteCampaignError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_campaign_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DeleteCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteCampaignOutput, crate::error::DeleteCampaignError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_campaign_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_connect_instance_config_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteConnectInstanceConfigOutput,
    crate::error::DeleteConnectInstanceConfigError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DeleteConnectInstanceConfigError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => {
            crate::error::DeleteConnectInstanceConfigError::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_connect_instance_config_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InternalServerException" => {
            crate::error::DeleteConnectInstanceConfigError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_connect_instance_config_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidStateException" => {
            crate::error::DeleteConnectInstanceConfigError::InvalidStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_connect_instance_config_invalid_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::DeleteConnectInstanceConfigError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_connect_instance_config_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::DeleteConnectInstanceConfigError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_connect_instance_config_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::DeleteConnectInstanceConfigError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_connect_instance_config_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DeleteConnectInstanceConfigError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_connect_instance_config_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteConnectInstanceConfigOutput,
    crate::error::DeleteConnectInstanceConfigError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_connect_instance_config_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_instance_onboarding_job_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteInstanceOnboardingJobOutput,
    crate::error::DeleteInstanceOnboardingJobError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeleteInstanceOnboardingJobError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DeleteInstanceOnboardingJobError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => {
            crate::error::DeleteInstanceOnboardingJobError::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_instance_onboarding_job_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InternalServerException" => {
            crate::error::DeleteInstanceOnboardingJobError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_instance_onboarding_job_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidStateException" => {
            crate::error::DeleteInstanceOnboardingJobError::InvalidStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_instance_onboarding_job_invalid_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::DeleteInstanceOnboardingJobError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_instance_onboarding_job_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::DeleteInstanceOnboardingJobError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DeleteInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_delete_instance_onboarding_job_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DeleteInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DeleteInstanceOnboardingJobError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_instance_onboarding_job_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteInstanceOnboardingJobOutput,
    crate::error::DeleteInstanceOnboardingJobError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_instance_onboarding_job_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeCampaignOutput, crate::error::DescribeCampaignError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DescribeCampaignError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::DescribeCampaignError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_describe_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DescribeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => {
            crate::error::DescribeCampaignError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_describe_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DescribeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::DescribeCampaignError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_describe_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DescribeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::DescribeCampaignError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_describe_campaign_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::DescribeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DescribeCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeCampaignOutput, crate::error::DescribeCampaignError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_campaign_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_campaign(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeCampaignError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_campaign_state_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetCampaignStateOutput, crate::error::GetCampaignStateError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetCampaignStateError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetCampaignStateError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::GetCampaignStateError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => {
            crate::error::GetCampaignStateError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::GetCampaignStateError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::GetCampaignStateError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::GetCampaignStateError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::GetCampaignStateError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_campaign_state_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetCampaignStateOutput, crate::error::GetCampaignStateError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_campaign_state_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_campaign_state(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetCampaignStateError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_campaign_state_batch_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetCampaignStateBatchOutput,
    crate::error::GetCampaignStateBatchError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetCampaignStateBatchError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetCampaignStateBatchError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => {
            crate::error::GetCampaignStateBatchError::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_batch_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InternalServerException" => {
            crate::error::GetCampaignStateBatchError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_batch_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::GetCampaignStateBatchError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_batch_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::GetCampaignStateBatchError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetCampaignStateBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_campaign_state_batch_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetCampaignStateBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::GetCampaignStateBatchError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_campaign_state_batch_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetCampaignStateBatchOutput,
    crate::error::GetCampaignStateBatchError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_campaign_state_batch_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_campaign_state_batch(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetCampaignStateBatchError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_connect_instance_config_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetConnectInstanceConfigOutput,
    crate::error::GetConnectInstanceConfigError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetConnectInstanceConfigError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::GetConnectInstanceConfigError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => {
            crate::error::GetConnectInstanceConfigError::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_connect_instance_config_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InternalServerException" => {
            crate::error::GetConnectInstanceConfigError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_connect_instance_config_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::GetConnectInstanceConfigError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_connect_instance_config_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::GetConnectInstanceConfigError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetConnectInstanceConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_connect_instance_config_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetConnectInstanceConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::GetConnectInstanceConfigError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_connect_instance_config_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetConnectInstanceConfigOutput,
    crate::error::GetConnectInstanceConfigError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_connect_instance_config_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_connect_instance_config(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetConnectInstanceConfigError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_instance_onboarding_job_status_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetInstanceOnboardingJobStatusOutput,
    crate::error::GetInstanceOnboardingJobStatusError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetInstanceOnboardingJobStatusError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetInstanceOnboardingJobStatusError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => {
            crate::error::GetInstanceOnboardingJobStatusError::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetInstanceOnboardingJobStatusError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_instance_onboarding_job_status_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetInstanceOnboardingJobStatusError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InternalServerException" => {
            crate::error::GetInstanceOnboardingJobStatusError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetInstanceOnboardingJobStatusError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_instance_onboarding_job_status_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetInstanceOnboardingJobStatusError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::GetInstanceOnboardingJobStatusError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetInstanceOnboardingJobStatusError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_instance_onboarding_job_status_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetInstanceOnboardingJobStatusError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::GetInstanceOnboardingJobStatusError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::GetInstanceOnboardingJobStatusError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_get_instance_onboarding_job_status_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::GetInstanceOnboardingJobStatusError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::GetInstanceOnboardingJobStatusError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_instance_onboarding_job_status_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetInstanceOnboardingJobStatusOutput,
    crate::error::GetInstanceOnboardingJobStatusError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::get_instance_onboarding_job_status_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_crate_operation_get_instance_onboarding_job_status(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::GetInstanceOnboardingJobStatusError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_campaigns_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListCampaignsOutput, crate::error::ListCampaignsError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListCampaignsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListCampaignsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::ListCampaignsError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListCampaignsError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_campaigns_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListCampaignsError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => crate::error::ListCampaignsError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListCampaignsError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_campaigns_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListCampaignsError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ValidationException" => {
            crate::error::ListCampaignsError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListCampaignsError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_campaigns_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListCampaignsError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::ListCampaignsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_campaigns_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListCampaignsOutput, crate::error::ListCampaignsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_campaigns_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_campaigns(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListCampaignsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTagsForResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::ListTagsForResourceError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_tags_for_resource_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListTagsForResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => {
            crate::error::ListTagsForResourceError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_tags_for_resource_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListTagsForResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::ListTagsForResourceError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_tags_for_resource_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListTagsForResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::ListTagsForResourceError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_tags_for_resource_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListTagsForResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::ListTagsForResourceError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_list_tags_for_resource_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ListTagsForResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::ListTagsForResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_resource_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_tags_for_resource(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_pause_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::PauseCampaignOutput, crate::error::PauseCampaignError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::PauseCampaignError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PauseCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::PauseCampaignError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PauseCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConflictException" => crate::error::PauseCampaignError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_exception::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::PauseCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => crate::error::PauseCampaignError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PauseCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidCampaignStateException" => {
            crate::error::PauseCampaignError::InvalidCampaignStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_campaign_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_campaign_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PauseCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_invalid_campaign_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::PauseCampaignError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PauseCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::PauseCampaignError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PauseCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::PauseCampaignError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PauseCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_pause_campaign_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PauseCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::PauseCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_pause_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::PauseCampaignOutput, crate::error::PauseCampaignError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::pause_campaign_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_put_dial_request_batch_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PutDialRequestBatchOutput,
    crate::error::PutDialRequestBatchError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::PutDialRequestBatchError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PutDialRequestBatchError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::PutDialRequestBatchError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConflictException" => crate::error::PutDialRequestBatchError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_exception::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => {
            crate::error::PutDialRequestBatchError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidCampaignStateException" => {
            crate::error::PutDialRequestBatchError::InvalidCampaignStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_campaign_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_campaign_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_invalid_campaign_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::PutDialRequestBatchError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::PutDialRequestBatchError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::PutDialRequestBatchError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::PutDialRequestBatchError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_put_dial_request_batch_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::PutDialRequestBatchError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::PutDialRequestBatchError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_put_dial_request_batch_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PutDialRequestBatchOutput,
    crate::error::PutDialRequestBatchError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::put_dial_request_batch_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_put_dial_request_batch(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::PutDialRequestBatchError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resume_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ResumeCampaignOutput, crate::error::ResumeCampaignError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ResumeCampaignError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ResumeCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::ResumeCampaignError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ResumeCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConflictException" => crate::error::ResumeCampaignError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_exception::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ResumeCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => crate::error::ResumeCampaignError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ResumeCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidCampaignStateException" => {
            crate::error::ResumeCampaignError::InvalidCampaignStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_campaign_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_campaign_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ResumeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_invalid_campaign_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::ResumeCampaignError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ResumeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::ResumeCampaignError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ResumeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::ResumeCampaignError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::ResumeCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_resume_campaign_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::ResumeCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::ResumeCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resume_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ResumeCampaignOutput, crate::error::ResumeCampaignError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::resume_campaign_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StartCampaignOutput, crate::error::StartCampaignError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::StartCampaignError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::StartCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::StartCampaignError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConflictException" => crate::error::StartCampaignError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_exception::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::StartCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => crate::error::StartCampaignError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidCampaignStateException" => {
            crate::error::StartCampaignError::InvalidCampaignStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_campaign_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_campaign_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_invalid_campaign_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::StartCampaignError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::StartCampaignError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::StartCampaignError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_campaign_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::StartCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StartCampaignOutput, crate::error::StartCampaignError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::start_campaign_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_instance_onboarding_job_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::StartInstanceOnboardingJobOutput,
    crate::error::StartInstanceOnboardingJobError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::StartInstanceOnboardingJobError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => {
            crate::error::StartInstanceOnboardingJobError::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_instance_onboarding_job_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ConflictException" => crate::error::StartInstanceOnboardingJobError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_exception::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_instance_onboarding_job_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => {
            crate::error::StartInstanceOnboardingJobError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_instance_onboarding_job_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::StartInstanceOnboardingJobError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_instance_onboarding_job_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::StartInstanceOnboardingJobError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_instance_onboarding_job_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::StartInstanceOnboardingJobError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_start_instance_onboarding_job_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StartInstanceOnboardingJobError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::StartInstanceOnboardingJobError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_instance_onboarding_job_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::StartInstanceOnboardingJobOutput,
    crate::error::StartInstanceOnboardingJobError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::start_instance_onboarding_job_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_start_instance_onboarding_job(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::StartInstanceOnboardingJobError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_stop_campaign_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StopCampaignOutput, crate::error::StopCampaignError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::StopCampaignError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::StopCampaignError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::StopCampaignError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StopCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConflictException" => crate::error::StopCampaignError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_exception::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::StopCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => crate::error::StopCampaignError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StopCampaignError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidCampaignStateException" => {
            crate::error::StopCampaignError::InvalidCampaignStateException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_campaign_state_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_campaign_state_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StopCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_invalid_campaign_state_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::StopCampaignError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StopCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::StopCampaignError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StopCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::StopCampaignError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::StopCampaignError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_stop_campaign_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::StopCampaignError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::StopCampaignError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_stop_campaign_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::StopCampaignOutput, crate::error::StopCampaignError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::stop_campaign_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::TagResourceError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::TagResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::TagResourceError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_tag_resource_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::TagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => crate::error::TagResourceError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_tag_resource_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::TagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ResourceNotFoundException" => crate::error::TagResourceError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_tag_resource_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::TagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ThrottlingException" => {
            crate::error::TagResourceError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_tag_resource_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::TagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::TagResourceError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_tag_resource_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::TagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::TagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::tag_resource_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UntagResourceError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UntagResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::UntagResourceError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_untag_resource_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UntagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => crate::error::UntagResourceError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_untag_resource_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UntagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ResourceNotFoundException" => {
            crate::error::UntagResourceError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_untag_resource_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UntagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::UntagResourceError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_untag_resource_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UntagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::UntagResourceError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_untag_resource_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UntagResourceError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::UntagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::untag_resource_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_campaign_dialer_config_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateCampaignDialerConfigOutput,
    crate::error::UpdateCampaignDialerConfigError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateCampaignDialerConfigError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateCampaignDialerConfigError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => {
            crate::error::UpdateCampaignDialerConfigError::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignDialerConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_dialer_config_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignDialerConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ConflictException" => crate::error::UpdateCampaignDialerConfigError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_exception::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateCampaignDialerConfigError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_dialer_config_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignDialerConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => {
            crate::error::UpdateCampaignDialerConfigError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignDialerConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_dialer_config_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignDialerConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::UpdateCampaignDialerConfigError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignDialerConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_dialer_config_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignDialerConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::UpdateCampaignDialerConfigError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignDialerConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_dialer_config_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignDialerConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::UpdateCampaignDialerConfigError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_campaign_dialer_config_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateCampaignDialerConfigOutput,
    crate::error::UpdateCampaignDialerConfigError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_campaign_dialer_config_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_campaign_name_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateCampaignNameOutput,
    crate::error::UpdateCampaignNameError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateCampaignNameError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateCampaignNameError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::UpdateCampaignNameError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::access_denied_exception::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignNameError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_name_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignNameError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConflictException" => crate::error::UpdateCampaignNameError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::conflict_exception::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UpdateCampaignNameError::unhandled)?;
                output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_name_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignNameError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => {
            crate::error::UpdateCampaignNameError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignNameError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_name_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignNameError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::UpdateCampaignNameError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignNameError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_name_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignNameError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::UpdateCampaignNameError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignNameError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_name_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignNameError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::UpdateCampaignNameError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_campaign_name_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateCampaignNameOutput,
    crate::error::UpdateCampaignNameError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_campaign_name_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_campaign_outbound_call_config_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateCampaignOutboundCallConfigOutput,
    crate::error::UpdateCampaignOutboundCallConfigError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => {
            crate::error::UpdateCampaignOutboundCallConfigError::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_access_denied_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_outbound_call_config_access_denied_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignOutboundCallConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ConflictException" => {
            crate::error::UpdateCampaignOutboundCallConfigError::ConflictException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::conflict_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_crate_error_conflict_exception_json_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_outbound_call_config_conflict_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignOutboundCallConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InternalServerException" => {
            crate::error::UpdateCampaignOutboundCallConfigError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_outbound_call_config_internal_server_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignOutboundCallConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::error::UpdateCampaignOutboundCallConfigError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_outbound_call_config_resource_not_found_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignOutboundCallConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ThrottlingException" => {
            crate::error::UpdateCampaignOutboundCallConfigError::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_outbound_call_config_throttling_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignOutboundCallConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => {
            crate::error::UpdateCampaignOutboundCallConfigError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::validation_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_validation_exception_json_err(response.body().as_ref(), output).map_err(crate::error::UpdateCampaignOutboundCallConfigError::unhandled)?;
                    output = output.set_x_amz_error_type(
                        crate::http_serde::deser_header_update_campaign_outbound_call_config_validation_exception_x_amz_error_type(response.headers())
                                                .map_err(|_|crate::error::UpdateCampaignOutboundCallConfigError::unhandled("Failed to parse xAmzErrorType from header `x-amzn-ErrorType"))?
                    );
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::UpdateCampaignOutboundCallConfigError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_campaign_outbound_call_config_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateCampaignOutboundCallConfigOutput,
    crate::error::UpdateCampaignOutboundCallConfigError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::update_campaign_outbound_call_config_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
