// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_campaign::_create_campaign_output::CreateCampaignOutputBuilder;

pub use crate::operation::create_campaign::_create_campaign_input::CreateCampaignInputBuilder;

/// Fluent builder constructing a request to `CreateCampaign`.
///
/// Creates a campaign for the specified Amazon Connect account. This API is idempotent.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateCampaignFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_campaign::builders::CreateCampaignInputBuilder,
}
impl CreateCampaignFluentBuilder {
    /// Creates a new `CreateCampaign`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_campaign::CreateCampaign,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_campaign::CreateCampaignError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_campaign::CreateCampaignOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_campaign::CreateCampaignError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The name of an Amazon Connect Campaign name.
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// The name of an Amazon Connect Campaign name.
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Amazon Connect Instance Id
    pub fn connect_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connect_instance_id(input.into());
        self
    }
    /// Amazon Connect Instance Id
    pub fn set_connect_instance_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_connect_instance_id(input);
        self
    }
    /// The possible types of dialer config parameters
    pub fn dialer_config(mut self, input: crate::types::DialerConfig) -> Self {
        self.inner = self.inner.dialer_config(input);
        self
    }
    /// The possible types of dialer config parameters
    pub fn set_dialer_config(
        mut self,
        input: std::option::Option<crate::types::DialerConfig>,
    ) -> Self {
        self.inner = self.inner.set_dialer_config(input);
        self
    }
    /// The configuration used for outbound calls.
    pub fn outbound_call_config(mut self, input: crate::types::OutboundCallConfig) -> Self {
        self.inner = self.inner.outbound_call_config(input);
        self
    }
    /// The configuration used for outbound calls.
    pub fn set_outbound_call_config(
        mut self,
        input: std::option::Option<crate::types::OutboundCallConfig>,
    ) -> Self {
        self.inner = self.inner.set_outbound_call_config(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// Tag map with key and value.
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// Tag map with key and value.
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
