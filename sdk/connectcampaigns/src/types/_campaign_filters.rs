// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Filter model by type
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CampaignFilters {
    /// Connect instance identifier filter
    #[doc(hidden)]
    pub instance_id_filter: std::option::Option<crate::types::InstanceIdFilter>,
}
impl CampaignFilters {
    /// Connect instance identifier filter
    pub fn instance_id_filter(&self) -> std::option::Option<&crate::types::InstanceIdFilter> {
        self.instance_id_filter.as_ref()
    }
}
impl CampaignFilters {
    /// Creates a new builder-style object to manufacture [`CampaignFilters`](crate::types::CampaignFilters).
    pub fn builder() -> crate::types::builders::CampaignFiltersBuilder {
        crate::types::builders::CampaignFiltersBuilder::default()
    }
}

/// A builder for [`CampaignFilters`](crate::types::CampaignFilters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CampaignFiltersBuilder {
    pub(crate) instance_id_filter: std::option::Option<crate::types::InstanceIdFilter>,
}
impl CampaignFiltersBuilder {
    /// Connect instance identifier filter
    pub fn instance_id_filter(mut self, input: crate::types::InstanceIdFilter) -> Self {
        self.instance_id_filter = Some(input);
        self
    }
    /// Connect instance identifier filter
    pub fn set_instance_id_filter(
        mut self,
        input: std::option::Option<crate::types::InstanceIdFilter>,
    ) -> Self {
        self.instance_id_filter = input;
        self
    }
    /// Consumes the builder and constructs a [`CampaignFilters`](crate::types::CampaignFilters).
    pub fn build(self) -> crate::types::CampaignFilters {
        crate::types::CampaignFilters {
            instance_id_filter: self.instance_id_filter,
        }
    }
}
