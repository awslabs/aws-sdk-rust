// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A successful request identified by the unique client token.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SuccessfulRequest {
    /// Client provided parameter used for idempotency. Its value must be unique for each request.
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// Identifier representing a Dial request
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
}
impl SuccessfulRequest {
    /// Client provided parameter used for idempotency. Its value must be unique for each request.
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// Identifier representing a Dial request
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl SuccessfulRequest {
    /// Creates a new builder-style object to manufacture [`SuccessfulRequest`](crate::types::SuccessfulRequest).
    pub fn builder() -> crate::types::builders::SuccessfulRequestBuilder {
        crate::types::builders::SuccessfulRequestBuilder::default()
    }
}

/// A builder for [`SuccessfulRequest`](crate::types::SuccessfulRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SuccessfulRequestBuilder {
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
}
impl SuccessfulRequestBuilder {
    /// Client provided parameter used for idempotency. Its value must be unique for each request.
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// Client provided parameter used for idempotency. Its value must be unique for each request.
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Identifier representing a Dial request
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// Identifier representing a Dial request
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Consumes the builder and constructs a [`SuccessfulRequest`](crate::types::SuccessfulRequest).
    pub fn build(self) -> crate::types::SuccessfulRequest {
        crate::types::SuccessfulRequest {
            client_token: self.client_token,
            id: self.id,
        }
    }
}
