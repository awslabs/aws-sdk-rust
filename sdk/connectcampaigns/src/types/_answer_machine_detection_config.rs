// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Answering Machine Detection config
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnswerMachineDetectionConfig {
    /// Enable or disable answering machine detection
    pub enable_answer_machine_detection: bool,
}
impl AnswerMachineDetectionConfig {
    /// Enable or disable answering machine detection
    pub fn enable_answer_machine_detection(&self) -> bool {
        self.enable_answer_machine_detection
    }
}
impl AnswerMachineDetectionConfig {
    /// Creates a new builder-style object to manufacture [`AnswerMachineDetectionConfig`](crate::types::AnswerMachineDetectionConfig).
    pub fn builder() -> crate::types::builders::AnswerMachineDetectionConfigBuilder {
        crate::types::builders::AnswerMachineDetectionConfigBuilder::default()
    }
}

/// A builder for [`AnswerMachineDetectionConfig`](crate::types::AnswerMachineDetectionConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnswerMachineDetectionConfigBuilder {
    pub(crate) enable_answer_machine_detection: ::std::option::Option<bool>,
}
impl AnswerMachineDetectionConfigBuilder {
    /// Enable or disable answering machine detection
    /// This field is required.
    pub fn enable_answer_machine_detection(mut self, input: bool) -> Self {
        self.enable_answer_machine_detection = ::std::option::Option::Some(input);
        self
    }
    /// Enable or disable answering machine detection
    pub fn set_enable_answer_machine_detection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_answer_machine_detection = input;
        self
    }
    /// Enable or disable answering machine detection
    pub fn get_enable_answer_machine_detection(&self) -> &::std::option::Option<bool> {
        &self.enable_answer_machine_detection
    }
    /// Consumes the builder and constructs a [`AnswerMachineDetectionConfig`](crate::types::AnswerMachineDetectionConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`enable_answer_machine_detection`](crate::types::builders::AnswerMachineDetectionConfigBuilder::enable_answer_machine_detection)
    pub fn build(self) -> ::std::result::Result<crate::types::AnswerMachineDetectionConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AnswerMachineDetectionConfig {
            enable_answer_machine_detection: self.enable_answer_machine_detection.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enable_answer_machine_detection",
                    "enable_answer_machine_detection was not specified but it is required when building AnswerMachineDetectionConfig",
                )
            })?,
        })
    }
}
