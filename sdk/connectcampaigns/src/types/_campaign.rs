// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An Amazon Connect campaign.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Campaign {
    /// Identifier representing a Campaign
    pub id: ::std::string::String,
    /// The resource name of an Amazon Connect campaign.
    pub arn: ::std::string::String,
    /// The name of an Amazon Connect Campaign name.
    pub name: ::std::string::String,
    /// Amazon Connect Instance Id
    pub connect_instance_id: ::std::string::String,
    /// The possible types of dialer config parameters
    pub dialer_config: ::std::option::Option<crate::types::DialerConfig>,
    /// The configuration used for outbound calls.
    pub outbound_call_config: ::std::option::Option<crate::types::OutboundCallConfig>,
    /// Tag map with key and value.
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl Campaign {
    /// Identifier representing a Campaign
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// The resource name of an Amazon Connect campaign.
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// The name of an Amazon Connect Campaign name.
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// Amazon Connect Instance Id
    pub fn connect_instance_id(&self) -> &str {
        use std::ops::Deref;
        self.connect_instance_id.deref()
    }
    /// The possible types of dialer config parameters
    pub fn dialer_config(&self) -> ::std::option::Option<&crate::types::DialerConfig> {
        self.dialer_config.as_ref()
    }
    /// The configuration used for outbound calls.
    pub fn outbound_call_config(&self) -> ::std::option::Option<&crate::types::OutboundCallConfig> {
        self.outbound_call_config.as_ref()
    }
    /// Tag map with key and value.
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl Campaign {
    /// Creates a new builder-style object to manufacture [`Campaign`](crate::types::Campaign).
    pub fn builder() -> crate::types::builders::CampaignBuilder {
        crate::types::builders::CampaignBuilder::default()
    }
}

/// A builder for [`Campaign`](crate::types::Campaign).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CampaignBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) connect_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) dialer_config: ::std::option::Option<crate::types::DialerConfig>,
    pub(crate) outbound_call_config: ::std::option::Option<crate::types::OutboundCallConfig>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CampaignBuilder {
    /// Identifier representing a Campaign
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// Identifier representing a Campaign
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Identifier representing a Campaign
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// The resource name of an Amazon Connect campaign.
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The resource name of an Amazon Connect campaign.
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// The resource name of an Amazon Connect campaign.
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// The name of an Amazon Connect Campaign name.
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of an Amazon Connect Campaign name.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The name of an Amazon Connect Campaign name.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Amazon Connect Instance Id
    /// This field is required.
    pub fn connect_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connect_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Amazon Connect Instance Id
    pub fn set_connect_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connect_instance_id = input;
        self
    }
    /// Amazon Connect Instance Id
    pub fn get_connect_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connect_instance_id
    }
    /// The possible types of dialer config parameters
    /// This field is required.
    pub fn dialer_config(mut self, input: crate::types::DialerConfig) -> Self {
        self.dialer_config = ::std::option::Option::Some(input);
        self
    }
    /// The possible types of dialer config parameters
    pub fn set_dialer_config(mut self, input: ::std::option::Option<crate::types::DialerConfig>) -> Self {
        self.dialer_config = input;
        self
    }
    /// The possible types of dialer config parameters
    pub fn get_dialer_config(&self) -> &::std::option::Option<crate::types::DialerConfig> {
        &self.dialer_config
    }
    /// The configuration used for outbound calls.
    /// This field is required.
    pub fn outbound_call_config(mut self, input: crate::types::OutboundCallConfig) -> Self {
        self.outbound_call_config = ::std::option::Option::Some(input);
        self
    }
    /// The configuration used for outbound calls.
    pub fn set_outbound_call_config(mut self, input: ::std::option::Option<crate::types::OutboundCallConfig>) -> Self {
        self.outbound_call_config = input;
        self
    }
    /// The configuration used for outbound calls.
    pub fn get_outbound_call_config(&self) -> &::std::option::Option<crate::types::OutboundCallConfig> {
        &self.outbound_call_config
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// Tag map with key and value.
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// Tag map with key and value.
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// Tag map with key and value.
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`Campaign`](crate::types::Campaign).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::CampaignBuilder::id)
    /// - [`arn`](crate::types::builders::CampaignBuilder::arn)
    /// - [`name`](crate::types::builders::CampaignBuilder::name)
    /// - [`connect_instance_id`](crate::types::builders::CampaignBuilder::connect_instance_id)
    pub fn build(self) -> ::std::result::Result<crate::types::Campaign, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Campaign {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building Campaign",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building Campaign",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Campaign",
                )
            })?,
            connect_instance_id: self.connect_instance_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connect_instance_id",
                    "connect_instance_id was not specified but it is required when building Campaign",
                )
            })?,
            dialer_config: self.dialer_config,
            outbound_call_config: self.outbound_call_config,
            tags: self.tags,
        })
    }
}
