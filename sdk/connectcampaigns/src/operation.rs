// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CreateCampaign`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_campaign`](crate::client::fluent_builders::CreateCampaign).
///
/// `ParseStrictResponse` impl for `CreateCampaign`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateCampaign {
    _private: (),
}
impl CreateCampaign {
    /// Creates a new builder-style object to manufacture [`CreateCampaignInput`](crate::input::CreateCampaignInput).
    pub fn builder() -> crate::input::create_campaign_input::Builder {
        crate::input::create_campaign_input::Builder::default()
    }
    /// Creates a new `CreateCampaign` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateCampaign {
    type Output =
        std::result::Result<crate::output::CreateCampaignOutput, crate::error::CreateCampaignError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_campaign_error(response)
        } else {
            crate::operation_deser::parse_create_campaign_response(response)
        }
    }
}

/// Operation shape for `DeleteCampaign`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_campaign`](crate::client::fluent_builders::DeleteCampaign).
///
/// `ParseStrictResponse` impl for `DeleteCampaign`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteCampaign {
    _private: (),
}
impl DeleteCampaign {
    /// Creates a new builder-style object to manufacture [`DeleteCampaignInput`](crate::input::DeleteCampaignInput).
    pub fn builder() -> crate::input::delete_campaign_input::Builder {
        crate::input::delete_campaign_input::Builder::default()
    }
    /// Creates a new `DeleteCampaign` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteCampaign {
    type Output =
        std::result::Result<crate::output::DeleteCampaignOutput, crate::error::DeleteCampaignError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_campaign_error(response)
        } else {
            crate::operation_deser::parse_delete_campaign_response(response)
        }
    }
}

/// Operation shape for `DeleteConnectInstanceConfig`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_connect_instance_config`](crate::client::fluent_builders::DeleteConnectInstanceConfig).
///
/// `ParseStrictResponse` impl for `DeleteConnectInstanceConfig`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteConnectInstanceConfig {
    _private: (),
}
impl DeleteConnectInstanceConfig {
    /// Creates a new builder-style object to manufacture [`DeleteConnectInstanceConfigInput`](crate::input::DeleteConnectInstanceConfigInput).
    pub fn builder() -> crate::input::delete_connect_instance_config_input::Builder {
        crate::input::delete_connect_instance_config_input::Builder::default()
    }
    /// Creates a new `DeleteConnectInstanceConfig` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteConnectInstanceConfig {
    type Output = std::result::Result<
        crate::output::DeleteConnectInstanceConfigOutput,
        crate::error::DeleteConnectInstanceConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_connect_instance_config_error(response)
        } else {
            crate::operation_deser::parse_delete_connect_instance_config_response(response)
        }
    }
}

/// Operation shape for `DeleteInstanceOnboardingJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_instance_onboarding_job`](crate::client::fluent_builders::DeleteInstanceOnboardingJob).
///
/// `ParseStrictResponse` impl for `DeleteInstanceOnboardingJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteInstanceOnboardingJob {
    _private: (),
}
impl DeleteInstanceOnboardingJob {
    /// Creates a new builder-style object to manufacture [`DeleteInstanceOnboardingJobInput`](crate::input::DeleteInstanceOnboardingJobInput).
    pub fn builder() -> crate::input::delete_instance_onboarding_job_input::Builder {
        crate::input::delete_instance_onboarding_job_input::Builder::default()
    }
    /// Creates a new `DeleteInstanceOnboardingJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteInstanceOnboardingJob {
    type Output = std::result::Result<
        crate::output::DeleteInstanceOnboardingJobOutput,
        crate::error::DeleteInstanceOnboardingJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_instance_onboarding_job_error(response)
        } else {
            crate::operation_deser::parse_delete_instance_onboarding_job_response(response)
        }
    }
}

/// Operation shape for `DescribeCampaign`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_campaign`](crate::client::fluent_builders::DescribeCampaign).
///
/// `ParseStrictResponse` impl for `DescribeCampaign`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeCampaign {
    _private: (),
}
impl DescribeCampaign {
    /// Creates a new builder-style object to manufacture [`DescribeCampaignInput`](crate::input::DescribeCampaignInput).
    pub fn builder() -> crate::input::describe_campaign_input::Builder {
        crate::input::describe_campaign_input::Builder::default()
    }
    /// Creates a new `DescribeCampaign` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeCampaign {
    type Output = std::result::Result<
        crate::output::DescribeCampaignOutput,
        crate::error::DescribeCampaignError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_campaign_error(response)
        } else {
            crate::operation_deser::parse_describe_campaign_response(response)
        }
    }
}

/// Operation shape for `GetCampaignState`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_campaign_state`](crate::client::fluent_builders::GetCampaignState).
///
/// `ParseStrictResponse` impl for `GetCampaignState`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetCampaignState {
    _private: (),
}
impl GetCampaignState {
    /// Creates a new builder-style object to manufacture [`GetCampaignStateInput`](crate::input::GetCampaignStateInput).
    pub fn builder() -> crate::input::get_campaign_state_input::Builder {
        crate::input::get_campaign_state_input::Builder::default()
    }
    /// Creates a new `GetCampaignState` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetCampaignState {
    type Output = std::result::Result<
        crate::output::GetCampaignStateOutput,
        crate::error::GetCampaignStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_campaign_state_error(response)
        } else {
            crate::operation_deser::parse_get_campaign_state_response(response)
        }
    }
}

/// Operation shape for `GetCampaignStateBatch`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_campaign_state_batch`](crate::client::fluent_builders::GetCampaignStateBatch).
///
/// `ParseStrictResponse` impl for `GetCampaignStateBatch`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetCampaignStateBatch {
    _private: (),
}
impl GetCampaignStateBatch {
    /// Creates a new builder-style object to manufacture [`GetCampaignStateBatchInput`](crate::input::GetCampaignStateBatchInput).
    pub fn builder() -> crate::input::get_campaign_state_batch_input::Builder {
        crate::input::get_campaign_state_batch_input::Builder::default()
    }
    /// Creates a new `GetCampaignStateBatch` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetCampaignStateBatch {
    type Output = std::result::Result<
        crate::output::GetCampaignStateBatchOutput,
        crate::error::GetCampaignStateBatchError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_campaign_state_batch_error(response)
        } else {
            crate::operation_deser::parse_get_campaign_state_batch_response(response)
        }
    }
}

/// Operation shape for `GetConnectInstanceConfig`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_connect_instance_config`](crate::client::fluent_builders::GetConnectInstanceConfig).
///
/// `ParseStrictResponse` impl for `GetConnectInstanceConfig`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetConnectInstanceConfig {
    _private: (),
}
impl GetConnectInstanceConfig {
    /// Creates a new builder-style object to manufacture [`GetConnectInstanceConfigInput`](crate::input::GetConnectInstanceConfigInput).
    pub fn builder() -> crate::input::get_connect_instance_config_input::Builder {
        crate::input::get_connect_instance_config_input::Builder::default()
    }
    /// Creates a new `GetConnectInstanceConfig` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetConnectInstanceConfig {
    type Output = std::result::Result<
        crate::output::GetConnectInstanceConfigOutput,
        crate::error::GetConnectInstanceConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_connect_instance_config_error(response)
        } else {
            crate::operation_deser::parse_get_connect_instance_config_response(response)
        }
    }
}

/// Operation shape for `GetInstanceOnboardingJobStatus`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_instance_onboarding_job_status`](crate::client::fluent_builders::GetInstanceOnboardingJobStatus).
///
/// `ParseStrictResponse` impl for `GetInstanceOnboardingJobStatus`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetInstanceOnboardingJobStatus {
    _private: (),
}
impl GetInstanceOnboardingJobStatus {
    /// Creates a new builder-style object to manufacture [`GetInstanceOnboardingJobStatusInput`](crate::input::GetInstanceOnboardingJobStatusInput).
    pub fn builder() -> crate::input::get_instance_onboarding_job_status_input::Builder {
        crate::input::get_instance_onboarding_job_status_input::Builder::default()
    }
    /// Creates a new `GetInstanceOnboardingJobStatus` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetInstanceOnboardingJobStatus {
    type Output = std::result::Result<
        crate::output::GetInstanceOnboardingJobStatusOutput,
        crate::error::GetInstanceOnboardingJobStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_instance_onboarding_job_status_error(response)
        } else {
            crate::operation_deser::parse_get_instance_onboarding_job_status_response(response)
        }
    }
}

/// Operation shape for `ListCampaigns`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_campaigns`](crate::client::fluent_builders::ListCampaigns).
///
/// `ParseStrictResponse` impl for `ListCampaigns`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListCampaigns {
    _private: (),
}
impl ListCampaigns {
    /// Creates a new builder-style object to manufacture [`ListCampaignsInput`](crate::input::ListCampaignsInput).
    pub fn builder() -> crate::input::list_campaigns_input::Builder {
        crate::input::list_campaigns_input::Builder::default()
    }
    /// Creates a new `ListCampaigns` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListCampaigns {
    type Output =
        std::result::Result<crate::output::ListCampaignsOutput, crate::error::ListCampaignsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_campaigns_error(response)
        } else {
            crate::operation_deser::parse_list_campaigns_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// Operation shape for `PauseCampaign`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`pause_campaign`](crate::client::fluent_builders::PauseCampaign).
///
/// `ParseStrictResponse` impl for `PauseCampaign`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PauseCampaign {
    _private: (),
}
impl PauseCampaign {
    /// Creates a new builder-style object to manufacture [`PauseCampaignInput`](crate::input::PauseCampaignInput).
    pub fn builder() -> crate::input::pause_campaign_input::Builder {
        crate::input::pause_campaign_input::Builder::default()
    }
    /// Creates a new `PauseCampaign` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PauseCampaign {
    type Output =
        std::result::Result<crate::output::PauseCampaignOutput, crate::error::PauseCampaignError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_pause_campaign_error(response)
        } else {
            crate::operation_deser::parse_pause_campaign_response(response)
        }
    }
}

/// Operation shape for `PutDialRequestBatch`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_dial_request_batch`](crate::client::fluent_builders::PutDialRequestBatch).
///
/// `ParseStrictResponse` impl for `PutDialRequestBatch`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutDialRequestBatch {
    _private: (),
}
impl PutDialRequestBatch {
    /// Creates a new builder-style object to manufacture [`PutDialRequestBatchInput`](crate::input::PutDialRequestBatchInput).
    pub fn builder() -> crate::input::put_dial_request_batch_input::Builder {
        crate::input::put_dial_request_batch_input::Builder::default()
    }
    /// Creates a new `PutDialRequestBatch` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutDialRequestBatch {
    type Output = std::result::Result<
        crate::output::PutDialRequestBatchOutput,
        crate::error::PutDialRequestBatchError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_dial_request_batch_error(response)
        } else {
            crate::operation_deser::parse_put_dial_request_batch_response(response)
        }
    }
}

/// Operation shape for `ResumeCampaign`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`resume_campaign`](crate::client::fluent_builders::ResumeCampaign).
///
/// `ParseStrictResponse` impl for `ResumeCampaign`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ResumeCampaign {
    _private: (),
}
impl ResumeCampaign {
    /// Creates a new builder-style object to manufacture [`ResumeCampaignInput`](crate::input::ResumeCampaignInput).
    pub fn builder() -> crate::input::resume_campaign_input::Builder {
        crate::input::resume_campaign_input::Builder::default()
    }
    /// Creates a new `ResumeCampaign` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ResumeCampaign {
    type Output =
        std::result::Result<crate::output::ResumeCampaignOutput, crate::error::ResumeCampaignError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_resume_campaign_error(response)
        } else {
            crate::operation_deser::parse_resume_campaign_response(response)
        }
    }
}

/// Operation shape for `StartCampaign`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_campaign`](crate::client::fluent_builders::StartCampaign).
///
/// `ParseStrictResponse` impl for `StartCampaign`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartCampaign {
    _private: (),
}
impl StartCampaign {
    /// Creates a new builder-style object to manufacture [`StartCampaignInput`](crate::input::StartCampaignInput).
    pub fn builder() -> crate::input::start_campaign_input::Builder {
        crate::input::start_campaign_input::Builder::default()
    }
    /// Creates a new `StartCampaign` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartCampaign {
    type Output =
        std::result::Result<crate::output::StartCampaignOutput, crate::error::StartCampaignError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_campaign_error(response)
        } else {
            crate::operation_deser::parse_start_campaign_response(response)
        }
    }
}

/// Operation shape for `StartInstanceOnboardingJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_instance_onboarding_job`](crate::client::fluent_builders::StartInstanceOnboardingJob).
///
/// `ParseStrictResponse` impl for `StartInstanceOnboardingJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartInstanceOnboardingJob {
    _private: (),
}
impl StartInstanceOnboardingJob {
    /// Creates a new builder-style object to manufacture [`StartInstanceOnboardingJobInput`](crate::input::StartInstanceOnboardingJobInput).
    pub fn builder() -> crate::input::start_instance_onboarding_job_input::Builder {
        crate::input::start_instance_onboarding_job_input::Builder::default()
    }
    /// Creates a new `StartInstanceOnboardingJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartInstanceOnboardingJob {
    type Output = std::result::Result<
        crate::output::StartInstanceOnboardingJobOutput,
        crate::error::StartInstanceOnboardingJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_instance_onboarding_job_error(response)
        } else {
            crate::operation_deser::parse_start_instance_onboarding_job_response(response)
        }
    }
}

/// Operation shape for `StopCampaign`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_campaign`](crate::client::fluent_builders::StopCampaign).
///
/// `ParseStrictResponse` impl for `StopCampaign`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopCampaign {
    _private: (),
}
impl StopCampaign {
    /// Creates a new builder-style object to manufacture [`StopCampaignInput`](crate::input::StopCampaignInput).
    pub fn builder() -> crate::input::stop_campaign_input::Builder {
        crate::input::stop_campaign_input::Builder::default()
    }
    /// Creates a new `StopCampaign` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopCampaign {
    type Output =
        std::result::Result<crate::output::StopCampaignOutput, crate::error::StopCampaignError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_campaign_error(response)
        } else {
            crate::operation_deser::parse_stop_campaign_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// Operation shape for `UpdateCampaignDialerConfig`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_campaign_dialer_config`](crate::client::fluent_builders::UpdateCampaignDialerConfig).
///
/// `ParseStrictResponse` impl for `UpdateCampaignDialerConfig`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateCampaignDialerConfig {
    _private: (),
}
impl UpdateCampaignDialerConfig {
    /// Creates a new builder-style object to manufacture [`UpdateCampaignDialerConfigInput`](crate::input::UpdateCampaignDialerConfigInput).
    pub fn builder() -> crate::input::update_campaign_dialer_config_input::Builder {
        crate::input::update_campaign_dialer_config_input::Builder::default()
    }
    /// Creates a new `UpdateCampaignDialerConfig` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateCampaignDialerConfig {
    type Output = std::result::Result<
        crate::output::UpdateCampaignDialerConfigOutput,
        crate::error::UpdateCampaignDialerConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_campaign_dialer_config_error(response)
        } else {
            crate::operation_deser::parse_update_campaign_dialer_config_response(response)
        }
    }
}

/// Operation shape for `UpdateCampaignName`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_campaign_name`](crate::client::fluent_builders::UpdateCampaignName).
///
/// `ParseStrictResponse` impl for `UpdateCampaignName`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateCampaignName {
    _private: (),
}
impl UpdateCampaignName {
    /// Creates a new builder-style object to manufacture [`UpdateCampaignNameInput`](crate::input::UpdateCampaignNameInput).
    pub fn builder() -> crate::input::update_campaign_name_input::Builder {
        crate::input::update_campaign_name_input::Builder::default()
    }
    /// Creates a new `UpdateCampaignName` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateCampaignName {
    type Output = std::result::Result<
        crate::output::UpdateCampaignNameOutput,
        crate::error::UpdateCampaignNameError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_campaign_name_error(response)
        } else {
            crate::operation_deser::parse_update_campaign_name_response(response)
        }
    }
}

/// Operation shape for `UpdateCampaignOutboundCallConfig`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_campaign_outbound_call_config`](crate::client::fluent_builders::UpdateCampaignOutboundCallConfig).
///
/// `ParseStrictResponse` impl for `UpdateCampaignOutboundCallConfig`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateCampaignOutboundCallConfig {
    _private: (),
}
impl UpdateCampaignOutboundCallConfig {
    /// Creates a new builder-style object to manufacture [`UpdateCampaignOutboundCallConfigInput`](crate::input::UpdateCampaignOutboundCallConfigInput).
    pub fn builder() -> crate::input::update_campaign_outbound_call_config_input::Builder {
        crate::input::update_campaign_outbound_call_config_input::Builder::default()
    }
    /// Creates a new `UpdateCampaignOutboundCallConfig` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateCampaignOutboundCallConfig {
    type Output = std::result::Result<
        crate::output::UpdateCampaignOutboundCallConfigOutput,
        crate::error::UpdateCampaignOutboundCallConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_campaign_outbound_call_config_error(response)
        } else {
            crate::operation_deser::parse_update_campaign_outbound_call_config_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
