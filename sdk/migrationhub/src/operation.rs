// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Associates a created artifact of an AWS cloud resource, the target receiving the
/// migration, with the migration task performed by a migration tool. This API has the
/// following traits:</p>
/// <ul>
/// <li>
/// <p>Migration tools can call the <code>AssociateCreatedArtifact</code> operation to
/// indicate which AWS artifact is associated with a migration task.</p>
/// </li>
/// <li>
/// <p>The created artifact name must be provided in ARN (Amazon Resource Name) format
/// which will contain information about type and region; for example:
/// <code>arn:aws:ec2:us-east-1:488216288981:image/ami-6d0ba87b</code>.</p>
/// </li>
/// <li>
/// <p>Examples of the AWS resource behind the created artifact are, AMI's, EC2 instance,
/// or DMS endpoint, etc.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateCreatedArtifact {
    _private: (),
}
impl AssociateCreatedArtifact {
    /// Creates a new builder-style object to manufacture [`AssociateCreatedArtifactInput`](crate::input::AssociateCreatedArtifactInput)
    pub fn builder() -> crate::input::associate_created_artifact_input::Builder {
        crate::input::associate_created_artifact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateCreatedArtifact {
    type Output = std::result::Result<
        crate::output::AssociateCreatedArtifactOutput,
        crate::error::AssociateCreatedArtifactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_created_artifact_error(response)
        } else {
            crate::operation_deser::parse_associate_created_artifact_response(response)
        }
    }
}

/// <p>Associates a discovered resource ID from Application Discovery Service with a migration
/// task.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateDiscoveredResource {
    _private: (),
}
impl AssociateDiscoveredResource {
    /// Creates a new builder-style object to manufacture [`AssociateDiscoveredResourceInput`](crate::input::AssociateDiscoveredResourceInput)
    pub fn builder() -> crate::input::associate_discovered_resource_input::Builder {
        crate::input::associate_discovered_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateDiscoveredResource {
    type Output = std::result::Result<
        crate::output::AssociateDiscoveredResourceOutput,
        crate::error::AssociateDiscoveredResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_discovered_resource_error(response)
        } else {
            crate::operation_deser::parse_associate_discovered_resource_response(response)
        }
    }
}

/// <p>Creates a progress update stream which is an AWS resource used for access control as
/// well as a namespace for migration task names that is implicitly linked to your AWS account.
/// It must uniquely identify the migration tool as it is used for all updates made by the
/// tool; however, it does not need to be unique for each AWS account because it is scoped to
/// the AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateProgressUpdateStream {
    _private: (),
}
impl CreateProgressUpdateStream {
    /// Creates a new builder-style object to manufacture [`CreateProgressUpdateStreamInput`](crate::input::CreateProgressUpdateStreamInput)
    pub fn builder() -> crate::input::create_progress_update_stream_input::Builder {
        crate::input::create_progress_update_stream_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateProgressUpdateStream {
    type Output = std::result::Result<
        crate::output::CreateProgressUpdateStreamOutput,
        crate::error::CreateProgressUpdateStreamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_progress_update_stream_error(response)
        } else {
            crate::operation_deser::parse_create_progress_update_stream_response(response)
        }
    }
}

/// <p>Deletes a progress update stream, including all of its tasks, which was previously
/// created as an AWS resource used for access control. This API has the following
/// traits:</p>
/// <ul>
/// <li>
/// <p>The only parameter needed for <code>DeleteProgressUpdateStream</code> is the
/// stream name (same as a <code>CreateProgressUpdateStream</code> call).</p>
/// </li>
/// <li>
/// <p>The call will return, and a background process will asynchronously delete the
/// stream and all of its resources (tasks, associated resources, resource attributes,
/// created artifacts).</p>
/// </li>
/// <li>
/// <p>If the stream takes time to be deleted, it might still show up on a
/// <code>ListProgressUpdateStreams</code> call.</p>
/// </li>
/// <li>
/// <p>
/// <code>CreateProgressUpdateStream</code>, <code>ImportMigrationTask</code>,
/// <code>NotifyMigrationTaskState</code>, and all Associate[*] APIs related to the
/// tasks belonging to the stream will throw "InvalidInputException" if the stream of the
/// same name is in the process of being deleted.</p>
/// </li>
/// <li>
/// <p>Once the stream and all of its resources are deleted,
/// <code>CreateProgressUpdateStream</code> for a stream of the same name will
/// succeed, and that stream will be an entirely new logical resource (without any
/// resources associated with the old stream).</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProgressUpdateStream {
    _private: (),
}
impl DeleteProgressUpdateStream {
    /// Creates a new builder-style object to manufacture [`DeleteProgressUpdateStreamInput`](crate::input::DeleteProgressUpdateStreamInput)
    pub fn builder() -> crate::input::delete_progress_update_stream_input::Builder {
        crate::input::delete_progress_update_stream_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteProgressUpdateStream {
    type Output = std::result::Result<
        crate::output::DeleteProgressUpdateStreamOutput,
        crate::error::DeleteProgressUpdateStreamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_progress_update_stream_error(response)
        } else {
            crate::operation_deser::parse_delete_progress_update_stream_response(response)
        }
    }
}

/// <p>Gets the migration status of an application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeApplicationState {
    _private: (),
}
impl DescribeApplicationState {
    /// Creates a new builder-style object to manufacture [`DescribeApplicationStateInput`](crate::input::DescribeApplicationStateInput)
    pub fn builder() -> crate::input::describe_application_state_input::Builder {
        crate::input::describe_application_state_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeApplicationState {
    type Output = std::result::Result<
        crate::output::DescribeApplicationStateOutput,
        crate::error::DescribeApplicationStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_application_state_error(response)
        } else {
            crate::operation_deser::parse_describe_application_state_response(response)
        }
    }
}

/// <p>Retrieves a list of all attributes associated with a specific migration task.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMigrationTask {
    _private: (),
}
impl DescribeMigrationTask {
    /// Creates a new builder-style object to manufacture [`DescribeMigrationTaskInput`](crate::input::DescribeMigrationTaskInput)
    pub fn builder() -> crate::input::describe_migration_task_input::Builder {
        crate::input::describe_migration_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMigrationTask {
    type Output = std::result::Result<
        crate::output::DescribeMigrationTaskOutput,
        crate::error::DescribeMigrationTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_migration_task_error(response)
        } else {
            crate::operation_deser::parse_describe_migration_task_response(response)
        }
    }
}

/// <p>Disassociates a created artifact of an AWS resource with a migration task performed by a
/// migration tool that was previously associated. This API has the following traits:</p>
/// <ul>
/// <li>
/// <p>A migration user can call the <code>DisassociateCreatedArtifacts</code> operation
/// to disassociate a created AWS Artifact from a migration task.</p>
/// </li>
/// <li>
/// <p>The created artifact name must be provided in ARN (Amazon Resource Name) format
/// which will contain information about type and region; for example:
/// <code>arn:aws:ec2:us-east-1:488216288981:image/ami-6d0ba87b</code>.</p>
/// </li>
/// <li>
/// <p>Examples of the AWS resource behind the created artifact are, AMI's, EC2 instance,
/// or RDS instance, etc.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateCreatedArtifact {
    _private: (),
}
impl DisassociateCreatedArtifact {
    /// Creates a new builder-style object to manufacture [`DisassociateCreatedArtifactInput`](crate::input::DisassociateCreatedArtifactInput)
    pub fn builder() -> crate::input::disassociate_created_artifact_input::Builder {
        crate::input::disassociate_created_artifact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateCreatedArtifact {
    type Output = std::result::Result<
        crate::output::DisassociateCreatedArtifactOutput,
        crate::error::DisassociateCreatedArtifactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_created_artifact_error(response)
        } else {
            crate::operation_deser::parse_disassociate_created_artifact_response(response)
        }
    }
}

/// <p>Disassociate an Application Discovery Service discovered resource from a migration
/// task.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateDiscoveredResource {
    _private: (),
}
impl DisassociateDiscoveredResource {
    /// Creates a new builder-style object to manufacture [`DisassociateDiscoveredResourceInput`](crate::input::DisassociateDiscoveredResourceInput)
    pub fn builder() -> crate::input::disassociate_discovered_resource_input::Builder {
        crate::input::disassociate_discovered_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateDiscoveredResource {
    type Output = std::result::Result<
        crate::output::DisassociateDiscoveredResourceOutput,
        crate::error::DisassociateDiscoveredResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_discovered_resource_error(response)
        } else {
            crate::operation_deser::parse_disassociate_discovered_resource_response(response)
        }
    }
}

/// <p>Registers a new migration task which represents a server, database, etc., being migrated
/// to AWS by a migration tool.</p>
/// <p>This API is a prerequisite to calling the <code>NotifyMigrationTaskState</code> API as
/// the migration tool must first register the migration task with Migration Hub.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportMigrationTask {
    _private: (),
}
impl ImportMigrationTask {
    /// Creates a new builder-style object to manufacture [`ImportMigrationTaskInput`](crate::input::ImportMigrationTaskInput)
    pub fn builder() -> crate::input::import_migration_task_input::Builder {
        crate::input::import_migration_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportMigrationTask {
    type Output = std::result::Result<
        crate::output::ImportMigrationTaskOutput,
        crate::error::ImportMigrationTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_migration_task_error(response)
        } else {
            crate::operation_deser::parse_import_migration_task_response(response)
        }
    }
}

/// <p>Lists all the migration statuses for your applications. If you use the optional
/// <code>ApplicationIds</code> parameter, only the migration statuses for those
/// applications will be returned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListApplicationStates {
    _private: (),
}
impl ListApplicationStates {
    /// Creates a new builder-style object to manufacture [`ListApplicationStatesInput`](crate::input::ListApplicationStatesInput)
    pub fn builder() -> crate::input::list_application_states_input::Builder {
        crate::input::list_application_states_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListApplicationStates {
    type Output = std::result::Result<
        crate::output::ListApplicationStatesOutput,
        crate::error::ListApplicationStatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_application_states_error(response)
        } else {
            crate::operation_deser::parse_list_application_states_response(response)
        }
    }
}

/// <p>Lists the created artifacts attached to a given migration task in an update stream. This
/// API has the following traits:</p>
/// <ul>
/// <li>
/// <p>Gets the list of the created artifacts while
/// migration is taking place.</p>
/// </li>
/// <li>
/// <p>Shows the artifacts created by the migration tool that was associated by the
/// <code>AssociateCreatedArtifact</code> API. </p>
/// </li>
/// <li>
/// <p>Lists created artifacts in a paginated interface. </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListCreatedArtifacts {
    _private: (),
}
impl ListCreatedArtifacts {
    /// Creates a new builder-style object to manufacture [`ListCreatedArtifactsInput`](crate::input::ListCreatedArtifactsInput)
    pub fn builder() -> crate::input::list_created_artifacts_input::Builder {
        crate::input::list_created_artifacts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListCreatedArtifacts {
    type Output = std::result::Result<
        crate::output::ListCreatedArtifactsOutput,
        crate::error::ListCreatedArtifactsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_created_artifacts_error(response)
        } else {
            crate::operation_deser::parse_list_created_artifacts_response(response)
        }
    }
}

/// <p>Lists discovered resources associated with the given <code>MigrationTask</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDiscoveredResources {
    _private: (),
}
impl ListDiscoveredResources {
    /// Creates a new builder-style object to manufacture [`ListDiscoveredResourcesInput`](crate::input::ListDiscoveredResourcesInput)
    pub fn builder() -> crate::input::list_discovered_resources_input::Builder {
        crate::input::list_discovered_resources_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDiscoveredResources {
    type Output = std::result::Result<
        crate::output::ListDiscoveredResourcesOutput,
        crate::error::ListDiscoveredResourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_discovered_resources_error(response)
        } else {
            crate::operation_deser::parse_list_discovered_resources_response(response)
        }
    }
}

/// <p>Lists all, or filtered by resource name, migration tasks associated with the user
/// account making this call. This API has the following traits:</p>
/// <ul>
/// <li>
/// <p>Can show a summary list of the most recent migration tasks.</p>
/// </li>
/// <li>
/// <p>Can show a summary list of migration tasks associated with a given discovered
/// resource.</p>
/// </li>
/// <li>
/// <p>Lists migration tasks in a paginated interface.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListMigrationTasks {
    _private: (),
}
impl ListMigrationTasks {
    /// Creates a new builder-style object to manufacture [`ListMigrationTasksInput`](crate::input::ListMigrationTasksInput)
    pub fn builder() -> crate::input::list_migration_tasks_input::Builder {
        crate::input::list_migration_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListMigrationTasks {
    type Output = std::result::Result<
        crate::output::ListMigrationTasksOutput,
        crate::error::ListMigrationTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_migration_tasks_error(response)
        } else {
            crate::operation_deser::parse_list_migration_tasks_response(response)
        }
    }
}

/// <p>Lists progress update streams associated with the user account making this call.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProgressUpdateStreams {
    _private: (),
}
impl ListProgressUpdateStreams {
    /// Creates a new builder-style object to manufacture [`ListProgressUpdateStreamsInput`](crate::input::ListProgressUpdateStreamsInput)
    pub fn builder() -> crate::input::list_progress_update_streams_input::Builder {
        crate::input::list_progress_update_streams_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProgressUpdateStreams {
    type Output = std::result::Result<
        crate::output::ListProgressUpdateStreamsOutput,
        crate::error::ListProgressUpdateStreamsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_progress_update_streams_error(response)
        } else {
            crate::operation_deser::parse_list_progress_update_streams_response(response)
        }
    }
}

/// <p>Sets the migration state of an application. For a given application identified by the
/// value passed to <code>ApplicationId</code>, its status is set or updated by passing one of
/// three values to <code>Status</code>: <code>NOT_STARTED | IN_PROGRESS |
/// COMPLETED</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct NotifyApplicationState {
    _private: (),
}
impl NotifyApplicationState {
    /// Creates a new builder-style object to manufacture [`NotifyApplicationStateInput`](crate::input::NotifyApplicationStateInput)
    pub fn builder() -> crate::input::notify_application_state_input::Builder {
        crate::input::notify_application_state_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for NotifyApplicationState {
    type Output = std::result::Result<
        crate::output::NotifyApplicationStateOutput,
        crate::error::NotifyApplicationStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_notify_application_state_error(response)
        } else {
            crate::operation_deser::parse_notify_application_state_response(response)
        }
    }
}

/// <p>Notifies Migration Hub of the current status, progress, or other detail regarding a
/// migration task. This API has the following traits:</p>
/// <ul>
/// <li>
/// <p>Migration tools will call the <code>NotifyMigrationTaskState</code> API to share
/// the latest progress and status.</p>
/// </li>
/// <li>
/// <p>
/// <code>MigrationTaskName</code> is used for addressing updates to the correct
/// target.</p>
/// </li>
/// <li>
/// <p>
/// <code>ProgressUpdateStream</code> is used for access control and to provide a
/// namespace for each migration tool.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct NotifyMigrationTaskState {
    _private: (),
}
impl NotifyMigrationTaskState {
    /// Creates a new builder-style object to manufacture [`NotifyMigrationTaskStateInput`](crate::input::NotifyMigrationTaskStateInput)
    pub fn builder() -> crate::input::notify_migration_task_state_input::Builder {
        crate::input::notify_migration_task_state_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for NotifyMigrationTaskState {
    type Output = std::result::Result<
        crate::output::NotifyMigrationTaskStateOutput,
        crate::error::NotifyMigrationTaskStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_notify_migration_task_state_error(response)
        } else {
            crate::operation_deser::parse_notify_migration_task_state_response(response)
        }
    }
}

/// <p>Provides identifying details of the resource being migrated so that it can be associated
/// in the Application Discovery Service repository. This association occurs asynchronously
/// after <code>PutResourceAttributes</code> returns.</p>
/// <important>
/// <ul>
/// <li>
/// <p>Keep in mind that subsequent calls to PutResourceAttributes will override
/// previously stored attributes. For example, if it is first called with a MAC
/// address, but later, it is desired to <i>add</i> an IP address, it
/// will then be required to call it with <i>both</i> the IP and MAC
/// addresses to prevent overriding the MAC address.</p>
/// </li>
/// <li>
/// <p>Note the instructions regarding the special use case of the <a href="https://docs.aws.amazon.com/migrationhub/latest/ug/API_PutResourceAttributes.html#migrationhub-PutResourceAttributes-request-ResourceAttributeList">
/// <code>ResourceAttributeList</code>
/// </a> parameter when specifying any
/// "VM" related value.</p>
/// </li>
/// </ul>
/// </important>
/// <note>
/// <p>Because this is an asynchronous call, it will always return 200, whether an
/// association occurs or not. To confirm if an association was found based on the provided
/// details, call <code>ListDiscoveredResources</code>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutResourceAttributes {
    _private: (),
}
impl PutResourceAttributes {
    /// Creates a new builder-style object to manufacture [`PutResourceAttributesInput`](crate::input::PutResourceAttributesInput)
    pub fn builder() -> crate::input::put_resource_attributes_input::Builder {
        crate::input::put_resource_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutResourceAttributes {
    type Output = std::result::Result<
        crate::output::PutResourceAttributesOutput,
        crate::error::PutResourceAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_resource_attributes_error(response)
        } else {
            crate::operation_deser::parse_put_resource_attributes_response(response)
        }
    }
}
