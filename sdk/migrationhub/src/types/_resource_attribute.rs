// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Attribute associated with a resource.</p>
/// <p>Note the corresponding format required per type listed below:</p>
/// <dl>
/// <dt>
/// IPV4
/// </dt>
/// <dd>
/// <p> <code>x.x.x.x</code> </p>
/// <p> <i>where x is an integer in the range [0,255]</i> </p>
/// </dd>
/// <dt>
/// IPV6
/// </dt>
/// <dd>
/// <p> <code>y : y : y : y : y : y : y : y</code> </p>
/// <p> <i>where y is a hexadecimal between 0 and FFFF. [0, FFFF]</i> </p>
/// </dd>
/// <dt>
/// MAC_ADDRESS
/// </dt>
/// <dd>
/// <p> <code>^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$</code> </p>
/// </dd>
/// <dt>
/// FQDN
/// </dt>
/// <dd>
/// <p> <code>^[^&lt;&gt;{}\\\\/?,=\\p{Cntrl}]{1,256}$</code> </p>
/// </dd>
/// </dl>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceAttribute {
    /// <p>Type of resource.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ResourceAttributeType>,
    /// <p>Value of the resource type.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl ResourceAttribute {
    /// <p>Type of resource.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ResourceAttributeType> {
        self.r#type.as_ref()
    }
    /// <p>Value of the resource type.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ResourceAttribute {
    /// Creates a new builder-style object to manufacture [`ResourceAttribute`](crate::types::ResourceAttribute).
    pub fn builder() -> crate::types::builders::ResourceAttributeBuilder {
        crate::types::builders::ResourceAttributeBuilder::default()
    }
}

/// A builder for [`ResourceAttribute`](crate::types::ResourceAttribute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceAttributeBuilder {
    pub(crate) r#type: std::option::Option<crate::types::ResourceAttributeType>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl ResourceAttributeBuilder {
    /// <p>Type of resource.</p>
    pub fn r#type(mut self, input: crate::types::ResourceAttributeType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Type of resource.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::ResourceAttributeType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Value of the resource type.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>Value of the resource type.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceAttribute`](crate::types::ResourceAttribute).
    pub fn build(self) -> crate::types::ResourceAttribute {
        crate::types::ResourceAttribute {
            r#type: self.r#type,
            value: self.value,
        }
    }
}
