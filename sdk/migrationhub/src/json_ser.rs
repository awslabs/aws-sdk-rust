// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_associate_created_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateCreatedArtifactInput,
) {
    if let Some(var_1) = &input.progress_update_stream {
        object.key("ProgressUpdateStream").string(var_1);
    }
    if let Some(var_2) = &input.migration_task_name {
        object.key("MigrationTaskName").string(var_2);
    }
    if let Some(var_3) = &input.created_artifact {
        let mut object_4 = object.key("CreatedArtifact").start_object();
        crate::json_ser::serialize_structure_created_artifact(&mut object_4, var_3);
        object_4.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_associate_discovered_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateDiscoveredResourceInput,
) {
    if let Some(var_5) = &input.progress_update_stream {
        object.key("ProgressUpdateStream").string(var_5);
    }
    if let Some(var_6) = &input.migration_task_name {
        object.key("MigrationTaskName").string(var_6);
    }
    if let Some(var_7) = &input.discovered_resource {
        let mut object_8 = object.key("DiscoveredResource").start_object();
        crate::json_ser::serialize_structure_discovered_resource(&mut object_8, var_7);
        object_8.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_create_progress_update_stream_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProgressUpdateStreamInput,
) {
    if let Some(var_9) = &input.progress_update_stream_name {
        object.key("ProgressUpdateStreamName").string(var_9);
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_delete_progress_update_stream_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProgressUpdateStreamInput,
) {
    if let Some(var_10) = &input.progress_update_stream_name {
        object.key("ProgressUpdateStreamName").string(var_10);
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_describe_application_state_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicationStateInput,
) {
    if let Some(var_11) = &input.application_id {
        object.key("ApplicationId").string(var_11);
    }
}

pub fn serialize_structure_describe_migration_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMigrationTaskInput,
) {
    if let Some(var_12) = &input.progress_update_stream {
        object.key("ProgressUpdateStream").string(var_12);
    }
    if let Some(var_13) = &input.migration_task_name {
        object.key("MigrationTaskName").string(var_13);
    }
}

pub fn serialize_structure_disassociate_created_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateCreatedArtifactInput,
) {
    if let Some(var_14) = &input.progress_update_stream {
        object.key("ProgressUpdateStream").string(var_14);
    }
    if let Some(var_15) = &input.migration_task_name {
        object.key("MigrationTaskName").string(var_15);
    }
    if let Some(var_16) = &input.created_artifact_name {
        object.key("CreatedArtifactName").string(var_16);
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_disassociate_discovered_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateDiscoveredResourceInput,
) {
    if let Some(var_17) = &input.progress_update_stream {
        object.key("ProgressUpdateStream").string(var_17);
    }
    if let Some(var_18) = &input.migration_task_name {
        object.key("MigrationTaskName").string(var_18);
    }
    if let Some(var_19) = &input.configuration_id {
        object.key("ConfigurationId").string(var_19);
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_import_migration_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportMigrationTaskInput,
) {
    if let Some(var_20) = &input.progress_update_stream {
        object.key("ProgressUpdateStream").string(var_20);
    }
    if let Some(var_21) = &input.migration_task_name {
        object.key("MigrationTaskName").string(var_21);
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_list_application_states_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListApplicationStatesInput,
) {
    if let Some(var_22) = &input.application_ids {
        let mut array_23 = object.key("ApplicationIds").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24);
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.next_token {
        object.key("NextToken").string(var_25);
    }
    if let Some(var_26) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_26).into()),
        );
    }
}

pub fn serialize_structure_list_created_artifacts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCreatedArtifactsInput,
) {
    if let Some(var_27) = &input.progress_update_stream {
        object.key("ProgressUpdateStream").string(var_27);
    }
    if let Some(var_28) = &input.migration_task_name {
        object.key("MigrationTaskName").string(var_28);
    }
    if let Some(var_29) = &input.next_token {
        object.key("NextToken").string(var_29);
    }
    if let Some(var_30) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_30).into()),
        );
    }
}

pub fn serialize_structure_list_discovered_resources_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDiscoveredResourcesInput,
) {
    if let Some(var_31) = &input.progress_update_stream {
        object.key("ProgressUpdateStream").string(var_31);
    }
    if let Some(var_32) = &input.migration_task_name {
        object.key("MigrationTaskName").string(var_32);
    }
    if let Some(var_33) = &input.next_token {
        object.key("NextToken").string(var_33);
    }
    if let Some(var_34) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_34).into()),
        );
    }
}

pub fn serialize_structure_list_migration_tasks_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMigrationTasksInput,
) {
    if let Some(var_35) = &input.next_token {
        object.key("NextToken").string(var_35);
    }
    if let Some(var_36) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_36).into()),
        );
    }
    if let Some(var_37) = &input.resource_name {
        object.key("ResourceName").string(var_37);
    }
}

pub fn serialize_structure_list_progress_update_streams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProgressUpdateStreamsInput,
) {
    if let Some(var_38) = &input.next_token {
        object.key("NextToken").string(var_38);
    }
    if let Some(var_39) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_39).into()),
        );
    }
}

pub fn serialize_structure_notify_application_state_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::NotifyApplicationStateInput,
) {
    if let Some(var_40) = &input.application_id {
        object.key("ApplicationId").string(var_40);
    }
    if let Some(var_41) = &input.status {
        object.key("Status").string(var_41.as_str());
    }
    if let Some(var_42) = &input.update_date_time {
        object
            .key("UpdateDateTime")
            .instant(var_42, smithy_types::instant::Format::EpochSeconds);
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_notify_migration_task_state_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::NotifyMigrationTaskStateInput,
) {
    if let Some(var_43) = &input.progress_update_stream {
        object.key("ProgressUpdateStream").string(var_43);
    }
    if let Some(var_44) = &input.migration_task_name {
        object.key("MigrationTaskName").string(var_44);
    }
    if let Some(var_45) = &input.task {
        let mut object_46 = object.key("Task").start_object();
        crate::json_ser::serialize_structure_task(&mut object_46, var_45);
        object_46.finish();
    }
    if let Some(var_47) = &input.update_date_time {
        object
            .key("UpdateDateTime")
            .instant(var_47, smithy_types::instant::Format::EpochSeconds);
    }
    {
        object.key("NextUpdateSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.next_update_seconds).into()),
        );
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_put_resource_attributes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourceAttributesInput,
) {
    if let Some(var_48) = &input.progress_update_stream {
        object.key("ProgressUpdateStream").string(var_48);
    }
    if let Some(var_49) = &input.migration_task_name {
        object.key("MigrationTaskName").string(var_49);
    }
    if let Some(var_50) = &input.resource_attribute_list {
        let mut array_51 = object.key("ResourceAttributeList").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_resource_attribute(&mut object_53, item_52);
                object_53.finish();
            }
        }
        array_51.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_created_artifact(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreatedArtifact,
) {
    if let Some(var_54) = &input.name {
        object.key("Name").string(var_54);
    }
    if let Some(var_55) = &input.description {
        object.key("Description").string(var_55);
    }
}

pub fn serialize_structure_discovered_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DiscoveredResource,
) {
    if let Some(var_56) = &input.configuration_id {
        object.key("ConfigurationId").string(var_56);
    }
    if let Some(var_57) = &input.description {
        object.key("Description").string(var_57);
    }
}

pub fn serialize_structure_task(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Task,
) {
    if let Some(var_58) = &input.status {
        object.key("Status").string(var_58.as_str());
    }
    if let Some(var_59) = &input.status_detail {
        object.key("StatusDetail").string(var_59);
    }
    if let Some(var_60) = &input.progress_percent {
        object.key("ProgressPercent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_60).into()),
        );
    }
}

pub fn serialize_structure_resource_attribute(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceAttribute,
) {
    if let Some(var_61) = &input.r#type {
        object.key("Type").string(var_61.as_str());
    }
    if let Some(var_62) = &input.value {
        object.key("Value").string(var_62);
    }
}
