// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn associate_created_artifact(&self) -> fluent_builders::AssociateCreatedArtifact<C> {
        fluent_builders::AssociateCreatedArtifact::new(self.handle.clone())
    }
    pub fn associate_discovered_resource(&self) -> fluent_builders::AssociateDiscoveredResource<C> {
        fluent_builders::AssociateDiscoveredResource::new(self.handle.clone())
    }
    pub fn create_progress_update_stream(&self) -> fluent_builders::CreateProgressUpdateStream<C> {
        fluent_builders::CreateProgressUpdateStream::new(self.handle.clone())
    }
    pub fn delete_progress_update_stream(&self) -> fluent_builders::DeleteProgressUpdateStream<C> {
        fluent_builders::DeleteProgressUpdateStream::new(self.handle.clone())
    }
    pub fn describe_application_state(&self) -> fluent_builders::DescribeApplicationState<C> {
        fluent_builders::DescribeApplicationState::new(self.handle.clone())
    }
    pub fn describe_migration_task(&self) -> fluent_builders::DescribeMigrationTask<C> {
        fluent_builders::DescribeMigrationTask::new(self.handle.clone())
    }
    pub fn disassociate_created_artifact(&self) -> fluent_builders::DisassociateCreatedArtifact<C> {
        fluent_builders::DisassociateCreatedArtifact::new(self.handle.clone())
    }
    pub fn disassociate_discovered_resource(
        &self,
    ) -> fluent_builders::DisassociateDiscoveredResource<C> {
        fluent_builders::DisassociateDiscoveredResource::new(self.handle.clone())
    }
    pub fn import_migration_task(&self) -> fluent_builders::ImportMigrationTask<C> {
        fluent_builders::ImportMigrationTask::new(self.handle.clone())
    }
    pub fn list_application_states(&self) -> fluent_builders::ListApplicationStates<C> {
        fluent_builders::ListApplicationStates::new(self.handle.clone())
    }
    pub fn list_created_artifacts(&self) -> fluent_builders::ListCreatedArtifacts<C> {
        fluent_builders::ListCreatedArtifacts::new(self.handle.clone())
    }
    pub fn list_discovered_resources(&self) -> fluent_builders::ListDiscoveredResources<C> {
        fluent_builders::ListDiscoveredResources::new(self.handle.clone())
    }
    pub fn list_migration_tasks(&self) -> fluent_builders::ListMigrationTasks<C> {
        fluent_builders::ListMigrationTasks::new(self.handle.clone())
    }
    pub fn list_progress_update_streams(&self) -> fluent_builders::ListProgressUpdateStreams<C> {
        fluent_builders::ListProgressUpdateStreams::new(self.handle.clone())
    }
    pub fn notify_application_state(&self) -> fluent_builders::NotifyApplicationState<C> {
        fluent_builders::NotifyApplicationState::new(self.handle.clone())
    }
    pub fn notify_migration_task_state(&self) -> fluent_builders::NotifyMigrationTaskState<C> {
        fluent_builders::NotifyMigrationTaskState::new(self.handle.clone())
    }
    pub fn put_resource_attributes(&self) -> fluent_builders::PutResourceAttributes<C> {
        fluent_builders::PutResourceAttributes::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AssociateCreatedArtifact<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::associate_created_artifact_input::Builder,
    }
    impl<C> AssociateCreatedArtifact<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateCreatedArtifactOutput,
            smithy_http::result::SdkError<crate::error::AssociateCreatedArtifactError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the ProgressUpdateStream. </p>
        pub fn progress_update_stream(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.progress_update_stream(input);
            self
        }
        pub fn set_progress_update_stream(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_progress_update_stream(input);
            self
        }
        /// <p>Unique identifier that references the migration task. <i>Do not store personal
        /// data in this field.</i>
        /// </p>
        pub fn migration_task_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.migration_task_name(input);
            self
        }
        pub fn set_migration_task_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_migration_task_name(input);
            self
        }
        /// <p>An ARN of the AWS resource related to the migration (e.g., AMI, EC2 instance, RDS
        /// instance, etc.) </p>
        pub fn created_artifact(mut self, input: crate::model::CreatedArtifact) -> Self {
            self.inner = self.inner.created_artifact(input);
            self
        }
        pub fn set_created_artifact(
            mut self,
            input: std::option::Option<crate::model::CreatedArtifact>,
        ) -> Self {
            self.inner = self.inner.set_created_artifact(input);
            self
        }
        /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if
        /// the caller has permission to make the call.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociateDiscoveredResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::associate_discovered_resource_input::Builder,
    }
    impl<C> AssociateDiscoveredResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateDiscoveredResourceOutput,
            smithy_http::result::SdkError<crate::error::AssociateDiscoveredResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the ProgressUpdateStream.</p>
        pub fn progress_update_stream(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.progress_update_stream(input);
            self
        }
        pub fn set_progress_update_stream(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_progress_update_stream(input);
            self
        }
        /// <p>The identifier given to the MigrationTask. <i>Do not store personal data in this
        /// field.</i>
        /// </p>
        pub fn migration_task_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.migration_task_name(input);
            self
        }
        pub fn set_migration_task_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_migration_task_name(input);
            self
        }
        /// <p>Object representing a Resource.</p>
        pub fn discovered_resource(mut self, input: crate::model::DiscoveredResource) -> Self {
            self.inner = self.inner.discovered_resource(input);
            self
        }
        pub fn set_discovered_resource(
            mut self,
            input: std::option::Option<crate::model::DiscoveredResource>,
        ) -> Self {
            self.inner = self.inner.set_discovered_resource(input);
            self
        }
        /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if
        /// the caller has permission to make the call.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateProgressUpdateStream<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_progress_update_stream_input::Builder,
    }
    impl<C> CreateProgressUpdateStream<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateProgressUpdateStreamOutput,
            smithy_http::result::SdkError<crate::error::CreateProgressUpdateStreamError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the ProgressUpdateStream. <i>Do not store personal data in this
        /// field.</i>
        /// </p>
        pub fn progress_update_stream_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.progress_update_stream_name(input);
            self
        }
        pub fn set_progress_update_stream_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_progress_update_stream_name(input);
            self
        }
        /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if
        /// the caller has permission to make the call.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteProgressUpdateStream<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_progress_update_stream_input::Builder,
    }
    impl<C> DeleteProgressUpdateStream<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteProgressUpdateStreamOutput,
            smithy_http::result::SdkError<crate::error::DeleteProgressUpdateStreamError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the ProgressUpdateStream. <i>Do not store personal data in this
        /// field.</i>
        /// </p>
        pub fn progress_update_stream_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.progress_update_stream_name(input);
            self
        }
        pub fn set_progress_update_stream_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_progress_update_stream_name(input);
            self
        }
        /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if
        /// the caller has permission to make the call.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeApplicationState<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_application_state_input::Builder,
    }
    impl<C> DescribeApplicationState<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeApplicationStateOutput,
            smithy_http::result::SdkError<crate::error::DescribeApplicationStateError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The configurationId in Application Discovery Service that uniquely identifies the
        /// grouped application.</p>
        pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_id(input);
            self
        }
        pub fn set_application_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeMigrationTask<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_migration_task_input::Builder,
    }
    impl<C> DescribeMigrationTask<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeMigrationTaskOutput,
            smithy_http::result::SdkError<crate::error::DescribeMigrationTaskError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the ProgressUpdateStream. </p>
        pub fn progress_update_stream(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.progress_update_stream(input);
            self
        }
        pub fn set_progress_update_stream(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_progress_update_stream(input);
            self
        }
        /// <p>The identifier given to the MigrationTask. <i>Do not store personal data in this
        /// field.</i>
        /// </p>
        pub fn migration_task_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.migration_task_name(input);
            self
        }
        pub fn set_migration_task_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_migration_task_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateCreatedArtifact<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::disassociate_created_artifact_input::Builder,
    }
    impl<C> DisassociateCreatedArtifact<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateCreatedArtifactOutput,
            smithy_http::result::SdkError<crate::error::DisassociateCreatedArtifactError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the ProgressUpdateStream. </p>
        pub fn progress_update_stream(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.progress_update_stream(input);
            self
        }
        pub fn set_progress_update_stream(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_progress_update_stream(input);
            self
        }
        /// <p>Unique identifier that references the migration task to be disassociated with the
        /// artifact. <i>Do not store personal data in this field.</i>
        /// </p>
        pub fn migration_task_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.migration_task_name(input);
            self
        }
        pub fn set_migration_task_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_migration_task_name(input);
            self
        }
        /// <p>An ARN of the AWS resource related to the migration (e.g., AMI, EC2 instance, RDS
        /// instance, etc.)</p>
        pub fn created_artifact_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.created_artifact_name(input);
            self
        }
        pub fn set_created_artifact_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_created_artifact_name(input);
            self
        }
        /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if
        /// the caller has permission to make the call.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateDiscoveredResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::disassociate_discovered_resource_input::Builder,
    }
    impl<C> DisassociateDiscoveredResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateDiscoveredResourceOutput,
            smithy_http::result::SdkError<crate::error::DisassociateDiscoveredResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the ProgressUpdateStream.</p>
        pub fn progress_update_stream(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.progress_update_stream(input);
            self
        }
        pub fn set_progress_update_stream(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_progress_update_stream(input);
            self
        }
        /// <p>The identifier given to the MigrationTask. <i>Do not store personal data in this
        /// field.</i>
        /// </p>
        pub fn migration_task_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.migration_task_name(input);
            self
        }
        pub fn set_migration_task_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_migration_task_name(input);
            self
        }
        /// <p>ConfigurationId of the Application Discovery Service resource to be
        /// disassociated.</p>
        pub fn configuration_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.configuration_id(input);
            self
        }
        pub fn set_configuration_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_configuration_id(input);
            self
        }
        /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if
        /// the caller has permission to make the call.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ImportMigrationTask<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::import_migration_task_input::Builder,
    }
    impl<C> ImportMigrationTask<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ImportMigrationTaskOutput,
            smithy_http::result::SdkError<crate::error::ImportMigrationTaskError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the ProgressUpdateStream. ></p>
        pub fn progress_update_stream(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.progress_update_stream(input);
            self
        }
        pub fn set_progress_update_stream(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_progress_update_stream(input);
            self
        }
        /// <p>Unique identifier that references the migration task. <i>Do not store personal
        /// data in this field.</i>
        /// </p>
        pub fn migration_task_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.migration_task_name(input);
            self
        }
        pub fn set_migration_task_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_migration_task_name(input);
            self
        }
        /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if
        /// the caller has permission to make the call.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListApplicationStates<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_application_states_input::Builder,
    }
    impl<C> ListApplicationStates<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListApplicationStatesOutput,
            smithy_http::result::SdkError<crate::error::ListApplicationStatesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The configurationIds from the Application Discovery Service that uniquely identifies
        /// your applications.</p>
        pub fn application_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_ids(inp);
            self
        }
        pub fn set_application_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_application_ids(input);
            self
        }
        /// <p>If a <code>NextToken</code> was returned by a previous call, there are more results
        /// available. To retrieve the next page of results, make the call again using the returned
        /// token in <code>NextToken</code>.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>Maximum number of results to be returned per page.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListCreatedArtifacts<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_created_artifacts_input::Builder,
    }
    impl<C> ListCreatedArtifacts<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListCreatedArtifactsOutput,
            smithy_http::result::SdkError<crate::error::ListCreatedArtifactsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the ProgressUpdateStream. </p>
        pub fn progress_update_stream(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.progress_update_stream(input);
            self
        }
        pub fn set_progress_update_stream(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_progress_update_stream(input);
            self
        }
        /// <p>Unique identifier that references the migration task. <i>Do not store personal
        /// data in this field.</i>
        /// </p>
        pub fn migration_task_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.migration_task_name(input);
            self
        }
        pub fn set_migration_task_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_migration_task_name(input);
            self
        }
        /// <p>If a <code>NextToken</code> was returned by a previous call, there are more results
        /// available. To retrieve the next page of results, make the call again using the returned
        /// token in <code>NextToken</code>.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>Maximum number of results to be returned per page.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListDiscoveredResources<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_discovered_resources_input::Builder,
    }
    impl<C> ListDiscoveredResources<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListDiscoveredResourcesOutput,
            smithy_http::result::SdkError<crate::error::ListDiscoveredResourcesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the ProgressUpdateStream.</p>
        pub fn progress_update_stream(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.progress_update_stream(input);
            self
        }
        pub fn set_progress_update_stream(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_progress_update_stream(input);
            self
        }
        /// <p>The name of the MigrationTask. <i>Do not store personal data in this
        /// field.</i>
        /// </p>
        pub fn migration_task_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.migration_task_name(input);
            self
        }
        pub fn set_migration_task_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_migration_task_name(input);
            self
        }
        /// <p>If a <code>NextToken</code> was returned by a previous call, there are more results
        /// available. To retrieve the next page of results, make the call again using the returned
        /// token in <code>NextToken</code>.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results returned per page.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListMigrationTasks<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_migration_tasks_input::Builder,
    }
    impl<C> ListMigrationTasks<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListMigrationTasksOutput,
            smithy_http::result::SdkError<crate::error::ListMigrationTasksError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If a <code>NextToken</code> was returned by a previous call, there are more results
        /// available. To retrieve the next page of results, make the call again using the returned
        /// token in <code>NextToken</code>.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>Value to specify how many results are returned per page.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>Filter migration tasks by discovered resource name.</p>
        pub fn resource_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_name(input);
            self
        }
        pub fn set_resource_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_resource_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListProgressUpdateStreams<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_progress_update_streams_input::Builder,
    }
    impl<C> ListProgressUpdateStreams<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListProgressUpdateStreamsOutput,
            smithy_http::result::SdkError<crate::error::ListProgressUpdateStreamsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>If a <code>NextToken</code> was returned by a previous call, there are more results
        /// available. To retrieve the next page of results, make the call again using the returned
        /// token in <code>NextToken</code>.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>Filter to limit the maximum number of results to list per page.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct NotifyApplicationState<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::notify_application_state_input::Builder,
    }
    impl<C> NotifyApplicationState<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::NotifyApplicationStateOutput,
            smithy_http::result::SdkError<crate::error::NotifyApplicationStateError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The configurationId in Application Discovery Service that uniquely identifies the
        /// grouped application.</p>
        pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_id(input);
            self
        }
        pub fn set_application_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_id(input);
            self
        }
        /// <p>Status of the application - Not Started, In-Progress, Complete.</p>
        pub fn status(mut self, input: crate::model::ApplicationStatus) -> Self {
            self.inner = self.inner.status(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ApplicationStatus>,
        ) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
        /// <p>The timestamp when the application state changed.</p>
        pub fn update_date_time(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.update_date_time(input);
            self
        }
        pub fn set_update_date_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.inner = self.inner.set_update_date_time(input);
            self
        }
        /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if
        /// the caller has permission to make the call.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct NotifyMigrationTaskState<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::notify_migration_task_state_input::Builder,
    }
    impl<C> NotifyMigrationTaskState<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::NotifyMigrationTaskStateOutput,
            smithy_http::result::SdkError<crate::error::NotifyMigrationTaskStateError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the ProgressUpdateStream. </p>
        pub fn progress_update_stream(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.progress_update_stream(input);
            self
        }
        pub fn set_progress_update_stream(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_progress_update_stream(input);
            self
        }
        /// <p>Unique identifier that references the migration task. <i>Do not store personal
        /// data in this field.</i>
        /// </p>
        pub fn migration_task_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.migration_task_name(input);
            self
        }
        pub fn set_migration_task_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_migration_task_name(input);
            self
        }
        /// <p>Information about the task's progress and status.</p>
        pub fn task(mut self, input: crate::model::Task) -> Self {
            self.inner = self.inner.task(input);
            self
        }
        pub fn set_task(mut self, input: std::option::Option<crate::model::Task>) -> Self {
            self.inner = self.inner.set_task(input);
            self
        }
        /// <p>The timestamp when the task was gathered.</p>
        pub fn update_date_time(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.update_date_time(input);
            self
        }
        pub fn set_update_date_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.inner = self.inner.set_update_date_time(input);
            self
        }
        /// <p>Number of seconds after the UpdateDateTime within which the Migration Hub can expect an
        /// update. If Migration Hub does not receive an update within the specified interval, then the
        /// migration task will be considered stale.</p>
        pub fn next_update_seconds(mut self, input: i32) -> Self {
            self.inner = self.inner.next_update_seconds(input);
            self
        }
        pub fn set_next_update_seconds(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_next_update_seconds(input);
            self
        }
        /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if
        /// the caller has permission to make the call.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutResourceAttributes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::put_resource_attributes_input::Builder,
    }
    impl<C> PutResourceAttributes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutResourceAttributesOutput,
            smithy_http::result::SdkError<crate::error::PutResourceAttributesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the ProgressUpdateStream. </p>
        pub fn progress_update_stream(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.progress_update_stream(input);
            self
        }
        pub fn set_progress_update_stream(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_progress_update_stream(input);
            self
        }
        /// <p>Unique identifier that references the migration task. <i>Do not store personal
        /// data in this field.</i>
        /// </p>
        pub fn migration_task_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.migration_task_name(input);
            self
        }
        pub fn set_migration_task_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_migration_task_name(input);
            self
        }
        /// <p>Information about the resource that is being migrated. This data will be used to map the
        /// task to a resource in the Application Discovery Service repository.</p>
        /// <note>
        /// <p>Takes the object array of <code>ResourceAttribute</code> where the <code>Type</code>
        /// field is reserved for the following values: <code>IPV4_ADDRESS | IPV6_ADDRESS |
        /// MAC_ADDRESS | FQDN | VM_MANAGER_ID | VM_MANAGED_OBJECT_REFERENCE | VM_NAME | VM_PATH
        /// | BIOS_ID | MOTHERBOARD_SERIAL_NUMBER</code> where the identifying value can be a
        /// string up to 256 characters.</p>
        /// </note>
        /// <important>
        /// <ul>
        /// <li>
        /// <p>If any "VM" related value is set for a <code>ResourceAttribute</code> object,
        /// it is required that <code>VM_MANAGER_ID</code>, as a minimum, is always set. If
        /// <code>VM_MANAGER_ID</code> is not set, then all "VM" fields will be discarded
        /// and "VM" fields will not be used for matching the migration task to a server in
        /// Application Discovery Service repository. See the <a href="https://docs.aws.amazon.com/migrationhub/latest/ug/API_PutResourceAttributes.html#API_PutResourceAttributes_Examples">Example</a> section below for a use case of specifying "VM" related
        /// values.</p>
        /// </li>
        /// <li>
        /// <p> If a server you are trying to match has multiple IP or MAC addresses, you
        /// should provide as many as you know in separate type/value pairs passed to the
        /// <code>ResourceAttributeList</code> parameter to maximize the chances of
        /// matching.</p>
        /// </li>
        /// </ul>
        /// </important>
        pub fn resource_attribute_list(
            mut self,
            inp: impl Into<crate::model::ResourceAttribute>,
        ) -> Self {
            self.inner = self.inner.resource_attribute_list(inp);
            self
        }
        pub fn set_resource_attribute_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ResourceAttribute>>,
        ) -> Self {
            self.inner = self.inner.set_resource_attribute_list(input);
            self
        }
        /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if
        /// the caller has permission to make the call.</p>
        pub fn dry_run(mut self, input: bool) -> Self {
            self.inner = self.inner.dry_run(input);
            self
        }
        pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_dry_run(input);
            self
        }
    }
}
