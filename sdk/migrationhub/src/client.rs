// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Migration Hub
///
/// Client for invoking operations on AWS Migration Hub. Each operation on AWS Migration Hub is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_migrationhub::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_migrationhub::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_migrationhub::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AssociateCreatedArtifact`](crate::client::fluent_builders::AssociateCreatedArtifact) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`progress_update_stream(impl Into<String>)`](crate::client::fluent_builders::AssociateCreatedArtifact::progress_update_stream) / [`set_progress_update_stream(Option<String>)`](crate::client::fluent_builders::AssociateCreatedArtifact::set_progress_update_stream): <p>The name of the ProgressUpdateStream. </p>
    ///   - [`migration_task_name(impl Into<String>)`](crate::client::fluent_builders::AssociateCreatedArtifact::migration_task_name) / [`set_migration_task_name(Option<String>)`](crate::client::fluent_builders::AssociateCreatedArtifact::set_migration_task_name): <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    ///   - [`created_artifact(CreatedArtifact)`](crate::client::fluent_builders::AssociateCreatedArtifact::created_artifact) / [`set_created_artifact(Option<CreatedArtifact>)`](crate::client::fluent_builders::AssociateCreatedArtifact::set_created_artifact): <p>An ARN of the AWS resource related to the migration (e.g., AMI, EC2 instance, RDS instance, etc.) </p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::AssociateCreatedArtifact::dry_run) / [`set_dry_run(bool)`](crate::client::fluent_builders::AssociateCreatedArtifact::set_dry_run): <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    /// - On success, responds with [`AssociateCreatedArtifactOutput`](crate::output::AssociateCreatedArtifactOutput)

    /// - On failure, responds with [`SdkError<AssociateCreatedArtifactError>`](crate::error::AssociateCreatedArtifactError)
    pub fn associate_created_artifact(
        &self,
    ) -> crate::client::fluent_builders::AssociateCreatedArtifact {
        crate::client::fluent_builders::AssociateCreatedArtifact::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AssociateDiscoveredResource`](crate::client::fluent_builders::AssociateDiscoveredResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`progress_update_stream(impl Into<String>)`](crate::client::fluent_builders::AssociateDiscoveredResource::progress_update_stream) / [`set_progress_update_stream(Option<String>)`](crate::client::fluent_builders::AssociateDiscoveredResource::set_progress_update_stream): <p>The name of the ProgressUpdateStream.</p>
    ///   - [`migration_task_name(impl Into<String>)`](crate::client::fluent_builders::AssociateDiscoveredResource::migration_task_name) / [`set_migration_task_name(Option<String>)`](crate::client::fluent_builders::AssociateDiscoveredResource::set_migration_task_name): <p>The identifier given to the MigrationTask. <i>Do not store personal data in this field.</i> </p>
    ///   - [`discovered_resource(DiscoveredResource)`](crate::client::fluent_builders::AssociateDiscoveredResource::discovered_resource) / [`set_discovered_resource(Option<DiscoveredResource>)`](crate::client::fluent_builders::AssociateDiscoveredResource::set_discovered_resource): <p>Object representing a Resource.</p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::AssociateDiscoveredResource::dry_run) / [`set_dry_run(bool)`](crate::client::fluent_builders::AssociateDiscoveredResource::set_dry_run): <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    /// - On success, responds with [`AssociateDiscoveredResourceOutput`](crate::output::AssociateDiscoveredResourceOutput)

    /// - On failure, responds with [`SdkError<AssociateDiscoveredResourceError>`](crate::error::AssociateDiscoveredResourceError)
    pub fn associate_discovered_resource(
        &self,
    ) -> crate::client::fluent_builders::AssociateDiscoveredResource {
        crate::client::fluent_builders::AssociateDiscoveredResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateProgressUpdateStream`](crate::client::fluent_builders::CreateProgressUpdateStream) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`progress_update_stream_name(impl Into<String>)`](crate::client::fluent_builders::CreateProgressUpdateStream::progress_update_stream_name) / [`set_progress_update_stream_name(Option<String>)`](crate::client::fluent_builders::CreateProgressUpdateStream::set_progress_update_stream_name): <p>The name of the ProgressUpdateStream. <i>Do not store personal data in this field.</i> </p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::CreateProgressUpdateStream::dry_run) / [`set_dry_run(bool)`](crate::client::fluent_builders::CreateProgressUpdateStream::set_dry_run): <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    /// - On success, responds with [`CreateProgressUpdateStreamOutput`](crate::output::CreateProgressUpdateStreamOutput)

    /// - On failure, responds with [`SdkError<CreateProgressUpdateStreamError>`](crate::error::CreateProgressUpdateStreamError)
    pub fn create_progress_update_stream(
        &self,
    ) -> crate::client::fluent_builders::CreateProgressUpdateStream {
        crate::client::fluent_builders::CreateProgressUpdateStream::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteProgressUpdateStream`](crate::client::fluent_builders::DeleteProgressUpdateStream) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`progress_update_stream_name(impl Into<String>)`](crate::client::fluent_builders::DeleteProgressUpdateStream::progress_update_stream_name) / [`set_progress_update_stream_name(Option<String>)`](crate::client::fluent_builders::DeleteProgressUpdateStream::set_progress_update_stream_name): <p>The name of the ProgressUpdateStream. <i>Do not store personal data in this field.</i> </p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::DeleteProgressUpdateStream::dry_run) / [`set_dry_run(bool)`](crate::client::fluent_builders::DeleteProgressUpdateStream::set_dry_run): <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    /// - On success, responds with [`DeleteProgressUpdateStreamOutput`](crate::output::DeleteProgressUpdateStreamOutput)

    /// - On failure, responds with [`SdkError<DeleteProgressUpdateStreamError>`](crate::error::DeleteProgressUpdateStreamError)
    pub fn delete_progress_update_stream(
        &self,
    ) -> crate::client::fluent_builders::DeleteProgressUpdateStream {
        crate::client::fluent_builders::DeleteProgressUpdateStream::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeApplicationState`](crate::client::fluent_builders::DescribeApplicationState) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::DescribeApplicationState::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::DescribeApplicationState::set_application_id): <p>The configurationId in Application Discovery Service that uniquely identifies the grouped application.</p>
    /// - On success, responds with [`DescribeApplicationStateOutput`](crate::output::DescribeApplicationStateOutput) with field(s):
    ///   - [`application_status(Option<ApplicationStatus>)`](crate::output::DescribeApplicationStateOutput::application_status): <p>Status of the application - Not Started, In-Progress, Complete.</p>
    ///   - [`last_updated_time(Option<DateTime>)`](crate::output::DescribeApplicationStateOutput::last_updated_time): <p>The timestamp when the application status was last updated.</p>
    /// - On failure, responds with [`SdkError<DescribeApplicationStateError>`](crate::error::DescribeApplicationStateError)
    pub fn describe_application_state(
        &self,
    ) -> crate::client::fluent_builders::DescribeApplicationState {
        crate::client::fluent_builders::DescribeApplicationState::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeMigrationTask`](crate::client::fluent_builders::DescribeMigrationTask) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`progress_update_stream(impl Into<String>)`](crate::client::fluent_builders::DescribeMigrationTask::progress_update_stream) / [`set_progress_update_stream(Option<String>)`](crate::client::fluent_builders::DescribeMigrationTask::set_progress_update_stream): <p>The name of the ProgressUpdateStream. </p>
    ///   - [`migration_task_name(impl Into<String>)`](crate::client::fluent_builders::DescribeMigrationTask::migration_task_name) / [`set_migration_task_name(Option<String>)`](crate::client::fluent_builders::DescribeMigrationTask::set_migration_task_name): <p>The identifier given to the MigrationTask. <i>Do not store personal data in this field.</i> </p>
    /// - On success, responds with [`DescribeMigrationTaskOutput`](crate::output::DescribeMigrationTaskOutput) with field(s):
    ///   - [`migration_task(Option<MigrationTask>)`](crate::output::DescribeMigrationTaskOutput::migration_task): <p>Object encapsulating information about the migration task.</p>
    /// - On failure, responds with [`SdkError<DescribeMigrationTaskError>`](crate::error::DescribeMigrationTaskError)
    pub fn describe_migration_task(&self) -> crate::client::fluent_builders::DescribeMigrationTask {
        crate::client::fluent_builders::DescribeMigrationTask::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateCreatedArtifact`](crate::client::fluent_builders::DisassociateCreatedArtifact) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`progress_update_stream(impl Into<String>)`](crate::client::fluent_builders::DisassociateCreatedArtifact::progress_update_stream) / [`set_progress_update_stream(Option<String>)`](crate::client::fluent_builders::DisassociateCreatedArtifact::set_progress_update_stream): <p>The name of the ProgressUpdateStream. </p>
    ///   - [`migration_task_name(impl Into<String>)`](crate::client::fluent_builders::DisassociateCreatedArtifact::migration_task_name) / [`set_migration_task_name(Option<String>)`](crate::client::fluent_builders::DisassociateCreatedArtifact::set_migration_task_name): <p>Unique identifier that references the migration task to be disassociated with the artifact. <i>Do not store personal data in this field.</i> </p>
    ///   - [`created_artifact_name(impl Into<String>)`](crate::client::fluent_builders::DisassociateCreatedArtifact::created_artifact_name) / [`set_created_artifact_name(Option<String>)`](crate::client::fluent_builders::DisassociateCreatedArtifact::set_created_artifact_name): <p>An ARN of the AWS resource related to the migration (e.g., AMI, EC2 instance, RDS instance, etc.)</p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::DisassociateCreatedArtifact::dry_run) / [`set_dry_run(bool)`](crate::client::fluent_builders::DisassociateCreatedArtifact::set_dry_run): <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    /// - On success, responds with [`DisassociateCreatedArtifactOutput`](crate::output::DisassociateCreatedArtifactOutput)

    /// - On failure, responds with [`SdkError<DisassociateCreatedArtifactError>`](crate::error::DisassociateCreatedArtifactError)
    pub fn disassociate_created_artifact(
        &self,
    ) -> crate::client::fluent_builders::DisassociateCreatedArtifact {
        crate::client::fluent_builders::DisassociateCreatedArtifact::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateDiscoveredResource`](crate::client::fluent_builders::DisassociateDiscoveredResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`progress_update_stream(impl Into<String>)`](crate::client::fluent_builders::DisassociateDiscoveredResource::progress_update_stream) / [`set_progress_update_stream(Option<String>)`](crate::client::fluent_builders::DisassociateDiscoveredResource::set_progress_update_stream): <p>The name of the ProgressUpdateStream.</p>
    ///   - [`migration_task_name(impl Into<String>)`](crate::client::fluent_builders::DisassociateDiscoveredResource::migration_task_name) / [`set_migration_task_name(Option<String>)`](crate::client::fluent_builders::DisassociateDiscoveredResource::set_migration_task_name): <p>The identifier given to the MigrationTask. <i>Do not store personal data in this field.</i> </p>
    ///   - [`configuration_id(impl Into<String>)`](crate::client::fluent_builders::DisassociateDiscoveredResource::configuration_id) / [`set_configuration_id(Option<String>)`](crate::client::fluent_builders::DisassociateDiscoveredResource::set_configuration_id): <p>ConfigurationId of the Application Discovery Service resource to be disassociated.</p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::DisassociateDiscoveredResource::dry_run) / [`set_dry_run(bool)`](crate::client::fluent_builders::DisassociateDiscoveredResource::set_dry_run): <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    /// - On success, responds with [`DisassociateDiscoveredResourceOutput`](crate::output::DisassociateDiscoveredResourceOutput)

    /// - On failure, responds with [`SdkError<DisassociateDiscoveredResourceError>`](crate::error::DisassociateDiscoveredResourceError)
    pub fn disassociate_discovered_resource(
        &self,
    ) -> crate::client::fluent_builders::DisassociateDiscoveredResource {
        crate::client::fluent_builders::DisassociateDiscoveredResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportMigrationTask`](crate::client::fluent_builders::ImportMigrationTask) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`progress_update_stream(impl Into<String>)`](crate::client::fluent_builders::ImportMigrationTask::progress_update_stream) / [`set_progress_update_stream(Option<String>)`](crate::client::fluent_builders::ImportMigrationTask::set_progress_update_stream): <p>The name of the ProgressUpdateStream. &gt;</p>
    ///   - [`migration_task_name(impl Into<String>)`](crate::client::fluent_builders::ImportMigrationTask::migration_task_name) / [`set_migration_task_name(Option<String>)`](crate::client::fluent_builders::ImportMigrationTask::set_migration_task_name): <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::ImportMigrationTask::dry_run) / [`set_dry_run(bool)`](crate::client::fluent_builders::ImportMigrationTask::set_dry_run): <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    /// - On success, responds with [`ImportMigrationTaskOutput`](crate::output::ImportMigrationTaskOutput)

    /// - On failure, responds with [`SdkError<ImportMigrationTaskError>`](crate::error::ImportMigrationTaskError)
    pub fn import_migration_task(&self) -> crate::client::fluent_builders::ImportMigrationTask {
        crate::client::fluent_builders::ImportMigrationTask::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListApplicationStates`](crate::client::fluent_builders::ListApplicationStates) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListApplicationStates::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_ids(Vec<String>)`](crate::client::fluent_builders::ListApplicationStates::application_ids) / [`set_application_ids(Option<Vec<String>>)`](crate::client::fluent_builders::ListApplicationStates::set_application_ids): <p>The configurationIds from the Application Discovery Service that uniquely identifies your applications.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListApplicationStates::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListApplicationStates::set_next_token): <p>If a <code>NextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>NextToken</code>.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListApplicationStates::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListApplicationStates::set_max_results): <p>Maximum number of results to be returned per page.</p>
    /// - On success, responds with [`ListApplicationStatesOutput`](crate::output::ListApplicationStatesOutput) with field(s):
    ///   - [`application_state_list(Option<Vec<ApplicationState>>)`](crate::output::ListApplicationStatesOutput::application_state_list): <p>A list of Applications that exist in Application Discovery Service.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListApplicationStatesOutput::next_token): <p>If a <code>NextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>NextToken</code>.</p>
    /// - On failure, responds with [`SdkError<ListApplicationStatesError>`](crate::error::ListApplicationStatesError)
    pub fn list_application_states(&self) -> crate::client::fluent_builders::ListApplicationStates {
        crate::client::fluent_builders::ListApplicationStates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCreatedArtifacts`](crate::client::fluent_builders::ListCreatedArtifacts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCreatedArtifacts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`progress_update_stream(impl Into<String>)`](crate::client::fluent_builders::ListCreatedArtifacts::progress_update_stream) / [`set_progress_update_stream(Option<String>)`](crate::client::fluent_builders::ListCreatedArtifacts::set_progress_update_stream): <p>The name of the ProgressUpdateStream. </p>
    ///   - [`migration_task_name(impl Into<String>)`](crate::client::fluent_builders::ListCreatedArtifacts::migration_task_name) / [`set_migration_task_name(Option<String>)`](crate::client::fluent_builders::ListCreatedArtifacts::set_migration_task_name): <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCreatedArtifacts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCreatedArtifacts::set_next_token): <p>If a <code>NextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>NextToken</code>.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCreatedArtifacts::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCreatedArtifacts::set_max_results): <p>Maximum number of results to be returned per page.</p>
    /// - On success, responds with [`ListCreatedArtifactsOutput`](crate::output::ListCreatedArtifactsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListCreatedArtifactsOutput::next_token): <p>If there are more created artifacts than the max result, return the next token to be passed to the next call as a bookmark of where to start from.</p>
    ///   - [`created_artifact_list(Option<Vec<CreatedArtifact>>)`](crate::output::ListCreatedArtifactsOutput::created_artifact_list): <p>List of created artifacts up to the maximum number of results specified in the request.</p>
    /// - On failure, responds with [`SdkError<ListCreatedArtifactsError>`](crate::error::ListCreatedArtifactsError)
    pub fn list_created_artifacts(&self) -> crate::client::fluent_builders::ListCreatedArtifacts {
        crate::client::fluent_builders::ListCreatedArtifacts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDiscoveredResources`](crate::client::fluent_builders::ListDiscoveredResources) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDiscoveredResources::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`progress_update_stream(impl Into<String>)`](crate::client::fluent_builders::ListDiscoveredResources::progress_update_stream) / [`set_progress_update_stream(Option<String>)`](crate::client::fluent_builders::ListDiscoveredResources::set_progress_update_stream): <p>The name of the ProgressUpdateStream.</p>
    ///   - [`migration_task_name(impl Into<String>)`](crate::client::fluent_builders::ListDiscoveredResources::migration_task_name) / [`set_migration_task_name(Option<String>)`](crate::client::fluent_builders::ListDiscoveredResources::set_migration_task_name): <p>The name of the MigrationTask. <i>Do not store personal data in this field.</i> </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDiscoveredResources::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDiscoveredResources::set_next_token): <p>If a <code>NextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>NextToken</code>.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDiscoveredResources::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDiscoveredResources::set_max_results): <p>The maximum number of results returned per page.</p>
    /// - On success, responds with [`ListDiscoveredResourcesOutput`](crate::output::ListDiscoveredResourcesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListDiscoveredResourcesOutput::next_token): <p>If there are more discovered resources than the max result, return the next token to be passed to the next call as a bookmark of where to start from.</p>
    ///   - [`discovered_resource_list(Option<Vec<DiscoveredResource>>)`](crate::output::ListDiscoveredResourcesOutput::discovered_resource_list): <p>Returned list of discovered resources associated with the given MigrationTask.</p>
    /// - On failure, responds with [`SdkError<ListDiscoveredResourcesError>`](crate::error::ListDiscoveredResourcesError)
    pub fn list_discovered_resources(
        &self,
    ) -> crate::client::fluent_builders::ListDiscoveredResources {
        crate::client::fluent_builders::ListDiscoveredResources::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListMigrationTasks`](crate::client::fluent_builders::ListMigrationTasks) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListMigrationTasks::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListMigrationTasks::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListMigrationTasks::set_next_token): <p>If a <code>NextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>NextToken</code>.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListMigrationTasks::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListMigrationTasks::set_max_results): <p>Value to specify how many results are returned per page.</p>
    ///   - [`resource_name(impl Into<String>)`](crate::client::fluent_builders::ListMigrationTasks::resource_name) / [`set_resource_name(Option<String>)`](crate::client::fluent_builders::ListMigrationTasks::set_resource_name): <p>Filter migration tasks by discovered resource name.</p>
    /// - On success, responds with [`ListMigrationTasksOutput`](crate::output::ListMigrationTasksOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListMigrationTasksOutput::next_token): <p>If there are more migration tasks than the max result, return the next token to be passed to the next call as a bookmark of where to start from.</p>
    ///   - [`migration_task_summary_list(Option<Vec<MigrationTaskSummary>>)`](crate::output::ListMigrationTasksOutput::migration_task_summary_list): <p>Lists the migration task's summary which includes: <code>MigrationTaskName</code>, <code>ProgressPercent</code>, <code>ProgressUpdateStream</code>, <code>Status</code>, and the <code>UpdateDateTime</code> for each task.</p>
    /// - On failure, responds with [`SdkError<ListMigrationTasksError>`](crate::error::ListMigrationTasksError)
    pub fn list_migration_tasks(&self) -> crate::client::fluent_builders::ListMigrationTasks {
        crate::client::fluent_builders::ListMigrationTasks::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListProgressUpdateStreams`](crate::client::fluent_builders::ListProgressUpdateStreams) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListProgressUpdateStreams::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListProgressUpdateStreams::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListProgressUpdateStreams::set_next_token): <p>If a <code>NextToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>NextToken</code>.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListProgressUpdateStreams::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListProgressUpdateStreams::set_max_results): <p>Filter to limit the maximum number of results to list per page.</p>
    /// - On success, responds with [`ListProgressUpdateStreamsOutput`](crate::output::ListProgressUpdateStreamsOutput) with field(s):
    ///   - [`progress_update_stream_summary_list(Option<Vec<ProgressUpdateStreamSummary>>)`](crate::output::ListProgressUpdateStreamsOutput::progress_update_stream_summary_list): <p>List of progress update streams up to the max number of results passed in the input.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListProgressUpdateStreamsOutput::next_token): <p>If there are more streams created than the max result, return the next token to be passed to the next call as a bookmark of where to start from.</p>
    /// - On failure, responds with [`SdkError<ListProgressUpdateStreamsError>`](crate::error::ListProgressUpdateStreamsError)
    pub fn list_progress_update_streams(
        &self,
    ) -> crate::client::fluent_builders::ListProgressUpdateStreams {
        crate::client::fluent_builders::ListProgressUpdateStreams::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`NotifyApplicationState`](crate::client::fluent_builders::NotifyApplicationState) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::NotifyApplicationState::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::NotifyApplicationState::set_application_id): <p>The configurationId in Application Discovery Service that uniquely identifies the grouped application.</p>
    ///   - [`status(ApplicationStatus)`](crate::client::fluent_builders::NotifyApplicationState::status) / [`set_status(Option<ApplicationStatus>)`](crate::client::fluent_builders::NotifyApplicationState::set_status): <p>Status of the application - Not Started, In-Progress, Complete.</p>
    ///   - [`update_date_time(DateTime)`](crate::client::fluent_builders::NotifyApplicationState::update_date_time) / [`set_update_date_time(Option<DateTime>)`](crate::client::fluent_builders::NotifyApplicationState::set_update_date_time): <p>The timestamp when the application state changed.</p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::NotifyApplicationState::dry_run) / [`set_dry_run(bool)`](crate::client::fluent_builders::NotifyApplicationState::set_dry_run): <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    /// - On success, responds with [`NotifyApplicationStateOutput`](crate::output::NotifyApplicationStateOutput)

    /// - On failure, responds with [`SdkError<NotifyApplicationStateError>`](crate::error::NotifyApplicationStateError)
    pub fn notify_application_state(
        &self,
    ) -> crate::client::fluent_builders::NotifyApplicationState {
        crate::client::fluent_builders::NotifyApplicationState::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`NotifyMigrationTaskState`](crate::client::fluent_builders::NotifyMigrationTaskState) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`progress_update_stream(impl Into<String>)`](crate::client::fluent_builders::NotifyMigrationTaskState::progress_update_stream) / [`set_progress_update_stream(Option<String>)`](crate::client::fluent_builders::NotifyMigrationTaskState::set_progress_update_stream): <p>The name of the ProgressUpdateStream. </p>
    ///   - [`migration_task_name(impl Into<String>)`](crate::client::fluent_builders::NotifyMigrationTaskState::migration_task_name) / [`set_migration_task_name(Option<String>)`](crate::client::fluent_builders::NotifyMigrationTaskState::set_migration_task_name): <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    ///   - [`task(Task)`](crate::client::fluent_builders::NotifyMigrationTaskState::task) / [`set_task(Option<Task>)`](crate::client::fluent_builders::NotifyMigrationTaskState::set_task): <p>Information about the task's progress and status.</p>
    ///   - [`update_date_time(DateTime)`](crate::client::fluent_builders::NotifyMigrationTaskState::update_date_time) / [`set_update_date_time(Option<DateTime>)`](crate::client::fluent_builders::NotifyMigrationTaskState::set_update_date_time): <p>The timestamp when the task was gathered.</p>
    ///   - [`next_update_seconds(i32)`](crate::client::fluent_builders::NotifyMigrationTaskState::next_update_seconds) / [`set_next_update_seconds(i32)`](crate::client::fluent_builders::NotifyMigrationTaskState::set_next_update_seconds): <p>Number of seconds after the UpdateDateTime within which the Migration Hub can expect an update. If Migration Hub does not receive an update within the specified interval, then the migration task will be considered stale.</p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::NotifyMigrationTaskState::dry_run) / [`set_dry_run(bool)`](crate::client::fluent_builders::NotifyMigrationTaskState::set_dry_run): <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    /// - On success, responds with [`NotifyMigrationTaskStateOutput`](crate::output::NotifyMigrationTaskStateOutput)

    /// - On failure, responds with [`SdkError<NotifyMigrationTaskStateError>`](crate::error::NotifyMigrationTaskStateError)
    pub fn notify_migration_task_state(
        &self,
    ) -> crate::client::fluent_builders::NotifyMigrationTaskState {
        crate::client::fluent_builders::NotifyMigrationTaskState::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutResourceAttributes`](crate::client::fluent_builders::PutResourceAttributes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`progress_update_stream(impl Into<String>)`](crate::client::fluent_builders::PutResourceAttributes::progress_update_stream) / [`set_progress_update_stream(Option<String>)`](crate::client::fluent_builders::PutResourceAttributes::set_progress_update_stream): <p>The name of the ProgressUpdateStream. </p>
    ///   - [`migration_task_name(impl Into<String>)`](crate::client::fluent_builders::PutResourceAttributes::migration_task_name) / [`set_migration_task_name(Option<String>)`](crate::client::fluent_builders::PutResourceAttributes::set_migration_task_name): <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    ///   - [`resource_attribute_list(Vec<ResourceAttribute>)`](crate::client::fluent_builders::PutResourceAttributes::resource_attribute_list) / [`set_resource_attribute_list(Option<Vec<ResourceAttribute>>)`](crate::client::fluent_builders::PutResourceAttributes::set_resource_attribute_list): <p>Information about the resource that is being migrated. This data will be used to map the task to a resource in the Application Discovery Service repository.</p> <note>   <p>Takes the object array of <code>ResourceAttribute</code> where the <code>Type</code> field is reserved for the following values: <code>IPV4_ADDRESS | IPV6_ADDRESS | MAC_ADDRESS | FQDN | VM_MANAGER_ID | VM_MANAGED_OBJECT_REFERENCE | VM_NAME | VM_PATH | BIOS_ID | MOTHERBOARD_SERIAL_NUMBER</code> where the identifying value can be a string up to 256 characters.</p>  </note> <important>   <ul>    <li> <p>If any "VM" related value is set for a <code>ResourceAttribute</code> object, it is required that <code>VM_MANAGER_ID</code>, as a minimum, is always set. If <code>VM_MANAGER_ID</code> is not set, then all "VM" fields will be discarded and "VM" fields will not be used for matching the migration task to a server in Application Discovery Service repository. See the <a href="https://docs.aws.amazon.com/migrationhub/latest/ug/API_PutResourceAttributes.html#API_PutResourceAttributes_Examples">Example</a> section below for a use case of specifying "VM" related values.</p> </li>    <li> <p> If a server you are trying to match has multiple IP or MAC addresses, you should provide as many as you know in separate type/value pairs passed to the <code>ResourceAttributeList</code> parameter to maximize the chances of matching.</p> </li>   </ul>  </important>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::PutResourceAttributes::dry_run) / [`set_dry_run(bool)`](crate::client::fluent_builders::PutResourceAttributes::set_dry_run): <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    /// - On success, responds with [`PutResourceAttributesOutput`](crate::output::PutResourceAttributesOutput)

    /// - On failure, responds with [`SdkError<PutResourceAttributesError>`](crate::error::PutResourceAttributesError)
    pub fn put_resource_attributes(&self) -> crate::client::fluent_builders::PutResourceAttributes {
        crate::client::fluent_builders::PutResourceAttributes::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
