// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::notify_migration_task_state::_notify_migration_task_state_output::NotifyMigrationTaskStateOutputBuilder;

pub use crate::operation::notify_migration_task_state::_notify_migration_task_state_input::NotifyMigrationTaskStateInputBuilder;

impl NotifyMigrationTaskStateInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::notify_migration_task_state::NotifyMigrationTaskStateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::notify_migration_task_state::NotifyMigrationTaskStateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.notify_migration_task_state();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `NotifyMigrationTaskState`.
///
/// <p>Notifies Migration Hub of the current status, progress, or other detail regarding a migration task. This API has the following traits:</p>
/// <ul>
/// <li> <p>Migration tools will call the <code>NotifyMigrationTaskState</code> API to share the latest progress and status.</p> </li>
/// <li> <p> <code>MigrationTaskName</code> is used for addressing updates to the correct target.</p> </li>
/// <li> <p> <code>ProgressUpdateStream</code> is used for access control and to provide a namespace for each migration tool.</p> </li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct NotifyMigrationTaskStateFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::notify_migration_task_state::builders::NotifyMigrationTaskStateInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::notify_migration_task_state::NotifyMigrationTaskStateOutput,
        crate::operation::notify_migration_task_state::NotifyMigrationTaskStateError,
    > for NotifyMigrationTaskStateFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::notify_migration_task_state::NotifyMigrationTaskStateOutput,
            crate::operation::notify_migration_task_state::NotifyMigrationTaskStateError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl NotifyMigrationTaskStateFluentBuilder {
    /// Creates a new `NotifyMigrationTaskState`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the NotifyMigrationTaskState as a reference.
    pub fn as_input(&self) -> &crate::operation::notify_migration_task_state::builders::NotifyMigrationTaskStateInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::notify_migration_task_state::NotifyMigrationTaskStateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::notify_migration_task_state::NotifyMigrationTaskStateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::notify_migration_task_state::NotifyMigrationTaskState::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::notify_migration_task_state::NotifyMigrationTaskState::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::notify_migration_task_state::NotifyMigrationTaskStateOutput,
        crate::operation::notify_migration_task_state::NotifyMigrationTaskStateError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the ProgressUpdateStream. </p>
    pub fn progress_update_stream(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.progress_update_stream(input.into());
        self
    }
    /// <p>The name of the ProgressUpdateStream. </p>
    pub fn set_progress_update_stream(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_progress_update_stream(input);
        self
    }
    /// <p>The name of the ProgressUpdateStream. </p>
    pub fn get_progress_update_stream(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_progress_update_stream()
    }
    /// <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    pub fn migration_task_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.migration_task_name(input.into());
        self
    }
    /// <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    pub fn set_migration_task_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_migration_task_name(input);
        self
    }
    /// <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    pub fn get_migration_task_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_migration_task_name()
    }
    /// <p>Information about the task's progress and status.</p>
    pub fn task(mut self, input: crate::types::Task) -> Self {
        self.inner = self.inner.task(input);
        self
    }
    /// <p>Information about the task's progress and status.</p>
    pub fn set_task(mut self, input: ::std::option::Option<crate::types::Task>) -> Self {
        self.inner = self.inner.set_task(input);
        self
    }
    /// <p>Information about the task's progress and status.</p>
    pub fn get_task(&self) -> &::std::option::Option<crate::types::Task> {
        self.inner.get_task()
    }
    /// <p>The timestamp when the task was gathered.</p>
    pub fn update_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.update_date_time(input);
        self
    }
    /// <p>The timestamp when the task was gathered.</p>
    pub fn set_update_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_update_date_time(input);
        self
    }
    /// <p>The timestamp when the task was gathered.</p>
    pub fn get_update_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_update_date_time()
    }
    /// <p>Number of seconds after the UpdateDateTime within which the Migration Hub can expect an update. If Migration Hub does not receive an update within the specified interval, then the migration task will be considered stale.</p>
    pub fn next_update_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.next_update_seconds(input);
        self
    }
    /// <p>Number of seconds after the UpdateDateTime within which the Migration Hub can expect an update. If Migration Hub does not receive an update within the specified interval, then the migration task will be considered stale.</p>
    pub fn set_next_update_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_next_update_seconds(input);
        self
    }
    /// <p>Number of seconds after the UpdateDateTime within which the Migration Hub can expect an update. If Migration Hub does not receive an update within the specified interval, then the migration task will be considered stale.</p>
    pub fn get_next_update_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_next_update_seconds()
    }
    /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
}
