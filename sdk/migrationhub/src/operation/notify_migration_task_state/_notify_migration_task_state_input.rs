// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NotifyMigrationTaskStateInput {
    /// <p>The name of the ProgressUpdateStream. </p>
    pub progress_update_stream: ::std::option::Option<::std::string::String>,
    /// <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    pub migration_task_name: ::std::option::Option<::std::string::String>,
    /// <p>Information about the task's progress and status.</p>
    pub task: ::std::option::Option<crate::types::Task>,
    /// <p>The timestamp when the task was gathered.</p>
    pub update_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Number of seconds after the UpdateDateTime within which the Migration Hub can expect an update. If Migration Hub does not receive an update within the specified interval, then the migration task will be considered stale.</p>
    pub next_update_seconds: ::std::option::Option<i32>,
    /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl NotifyMigrationTaskStateInput {
    /// <p>The name of the ProgressUpdateStream. </p>
    pub fn progress_update_stream(&self) -> ::std::option::Option<&str> {
        self.progress_update_stream.as_deref()
    }
    /// <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    pub fn migration_task_name(&self) -> ::std::option::Option<&str> {
        self.migration_task_name.as_deref()
    }
    /// <p>Information about the task's progress and status.</p>
    pub fn task(&self) -> ::std::option::Option<&crate::types::Task> {
        self.task.as_ref()
    }
    /// <p>The timestamp when the task was gathered.</p>
    pub fn update_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_date_time.as_ref()
    }
    /// <p>Number of seconds after the UpdateDateTime within which the Migration Hub can expect an update. If Migration Hub does not receive an update within the specified interval, then the migration task will be considered stale.</p>
    pub fn next_update_seconds(&self) -> ::std::option::Option<i32> {
        self.next_update_seconds
    }
    /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl NotifyMigrationTaskStateInput {
    /// Creates a new builder-style object to manufacture [`NotifyMigrationTaskStateInput`](crate::operation::notify_migration_task_state::NotifyMigrationTaskStateInput).
    pub fn builder() -> crate::operation::notify_migration_task_state::builders::NotifyMigrationTaskStateInputBuilder {
        crate::operation::notify_migration_task_state::builders::NotifyMigrationTaskStateInputBuilder::default()
    }
}

/// A builder for [`NotifyMigrationTaskStateInput`](crate::operation::notify_migration_task_state::NotifyMigrationTaskStateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NotifyMigrationTaskStateInputBuilder {
    pub(crate) progress_update_stream: ::std::option::Option<::std::string::String>,
    pub(crate) migration_task_name: ::std::option::Option<::std::string::String>,
    pub(crate) task: ::std::option::Option<crate::types::Task>,
    pub(crate) update_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) next_update_seconds: ::std::option::Option<i32>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl NotifyMigrationTaskStateInputBuilder {
    /// <p>The name of the ProgressUpdateStream. </p>
    /// This field is required.
    pub fn progress_update_stream(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.progress_update_stream = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the ProgressUpdateStream. </p>
    pub fn set_progress_update_stream(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.progress_update_stream = input;
        self
    }
    /// <p>The name of the ProgressUpdateStream. </p>
    pub fn get_progress_update_stream(&self) -> &::std::option::Option<::std::string::String> {
        &self.progress_update_stream
    }
    /// <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    /// This field is required.
    pub fn migration_task_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.migration_task_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    pub fn set_migration_task_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.migration_task_name = input;
        self
    }
    /// <p>Unique identifier that references the migration task. <i>Do not store personal data in this field.</i> </p>
    pub fn get_migration_task_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.migration_task_name
    }
    /// <p>Information about the task's progress and status.</p>
    /// This field is required.
    pub fn task(mut self, input: crate::types::Task) -> Self {
        self.task = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the task's progress and status.</p>
    pub fn set_task(mut self, input: ::std::option::Option<crate::types::Task>) -> Self {
        self.task = input;
        self
    }
    /// <p>Information about the task's progress and status.</p>
    pub fn get_task(&self) -> &::std::option::Option<crate::types::Task> {
        &self.task
    }
    /// <p>The timestamp when the task was gathered.</p>
    /// This field is required.
    pub fn update_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the task was gathered.</p>
    pub fn set_update_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_date_time = input;
        self
    }
    /// <p>The timestamp when the task was gathered.</p>
    pub fn get_update_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_date_time
    }
    /// <p>Number of seconds after the UpdateDateTime within which the Migration Hub can expect an update. If Migration Hub does not receive an update within the specified interval, then the migration task will be considered stale.</p>
    /// This field is required.
    pub fn next_update_seconds(mut self, input: i32) -> Self {
        self.next_update_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of seconds after the UpdateDateTime within which the Migration Hub can expect an update. If Migration Hub does not receive an update within the specified interval, then the migration task will be considered stale.</p>
    pub fn set_next_update_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.next_update_seconds = input;
        self
    }
    /// <p>Number of seconds after the UpdateDateTime within which the Migration Hub can expect an update. If Migration Hub does not receive an update within the specified interval, then the migration task will be considered stale.</p>
    pub fn get_next_update_seconds(&self) -> &::std::option::Option<i32> {
        &self.next_update_seconds
    }
    /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Optional boolean flag to indicate whether any effect should take place. Used to test if the caller has permission to make the call.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`NotifyMigrationTaskStateInput`](crate::operation::notify_migration_task_state::NotifyMigrationTaskStateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::notify_migration_task_state::NotifyMigrationTaskStateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::notify_migration_task_state::NotifyMigrationTaskStateInput {
            progress_update_stream: self.progress_update_stream,
            migration_task_name: self.migration_task_name,
            task: self.task,
            update_date_time: self.update_date_time,
            next_update_seconds: self.next_update_seconds,
            dry_run: self.dry_run,
        })
    }
}
