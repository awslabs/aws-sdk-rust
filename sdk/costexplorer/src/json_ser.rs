// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_anomaly_monitor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnomalyMonitorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.anomaly_monitor {
        let mut object_2 = object.key("AnomalyMonitor").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_monitor(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.resource_tags {
        let mut array_4 = object.key("ResourceTags").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_tag(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_anomaly_subscription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnomalySubscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.anomaly_subscription {
        let mut object_8 = object.key("AnomalySubscription").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_subscription(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.resource_tags {
        let mut array_10 = object.key("ResourceTags").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_tag(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_cost_category_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCostCategoryDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.name {
        object.key("Name").string(var_13.as_str());
    }
    if let Some(var_14) = &input.rule_version {
        object.key("RuleVersion").string(var_14.as_str());
    }
    if let Some(var_15) = &input.rules {
        let mut array_16 = object.key("Rules").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cost_category_rule(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.default_value {
        object.key("DefaultValue").string(var_19.as_str());
    }
    if let Some(var_20) = &input.split_charge_rules {
        let mut array_21 = object.key("SplitChargeRules").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cost_category_split_charge_rule(
                    &mut object_23,
                    item_22,
                )?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.resource_tags {
        let mut array_25 = object.key("ResourceTags").start_array();
        for item_26 in var_24 {
            {
                let mut object_27 = array_25.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_tag(
                    &mut object_27,
                    item_26,
                )?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_anomaly_monitor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAnomalyMonitorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_28) = &input.monitor_arn {
        object.key("MonitorArn").string(var_28.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_anomaly_subscription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAnomalySubscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_29) = &input.subscription_arn {
        object.key("SubscriptionArn").string(var_29.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_cost_category_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCostCategoryDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.cost_category_arn {
        object.key("CostCategoryArn").string(var_30.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_cost_category_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCostCategoryDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.cost_category_arn {
        object.key("CostCategoryArn").string(var_31.as_str());
    }
    if let Some(var_32) = &input.effective_on {
        object.key("EffectiveOn").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_anomalies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAnomaliesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.monitor_arn {
        object.key("MonitorArn").string(var_33.as_str());
    }
    if let Some(var_34) = &input.date_interval {
        let mut object_35 = object.key("DateInterval").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_date_interval(
            &mut object_35,
            var_34,
        )?;
        object_35.finish();
    }
    if let Some(var_36) = &input.feedback {
        object.key("Feedback").string(var_36.as_str());
    }
    if let Some(var_37) = &input.total_impact {
        let mut object_38 = object.key("TotalImpact").start_object();
        crate::json_ser::serialize_structure_crate_model_total_impact_filter(
            &mut object_38,
            var_37,
        )?;
        object_38.finish();
    }
    if let Some(var_39) = &input.next_page_token {
        object.key("NextPageToken").string(var_39.as_str());
    }
    if let Some(var_40) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_40).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_anomaly_monitors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAnomalyMonitorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.monitor_arn_list {
        let mut array_42 = object.key("MonitorArnList").start_array();
        for item_43 in var_41 {
            {
                array_42.value().string(item_43.as_str());
            }
        }
        array_42.finish();
    }
    if let Some(var_44) = &input.next_page_token {
        object.key("NextPageToken").string(var_44.as_str());
    }
    if let Some(var_45) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_45).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_anomaly_subscriptions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAnomalySubscriptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.subscription_arn_list {
        let mut array_47 = object.key("SubscriptionArnList").start_array();
        for item_48 in var_46 {
            {
                array_47.value().string(item_48.as_str());
            }
        }
        array_47.finish();
    }
    if let Some(var_49) = &input.monitor_arn {
        object.key("MonitorArn").string(var_49.as_str());
    }
    if let Some(var_50) = &input.next_page_token {
        object.key("NextPageToken").string(var_50.as_str());
    }
    if let Some(var_51) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_cost_and_usage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCostAndUsageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.time_period {
        let mut object_53 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_date_interval(&mut object_53, var_52)?;
        object_53.finish();
    }
    if let Some(var_54) = &input.granularity {
        object.key("Granularity").string(var_54.as_str());
    }
    if let Some(var_55) = &input.filter {
        let mut object_56 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_56, var_55)?;
        object_56.finish();
    }
    if let Some(var_57) = &input.metrics {
        let mut array_58 = object.key("Metrics").start_array();
        for item_59 in var_57 {
            {
                array_58.value().string(item_59.as_str());
            }
        }
        array_58.finish();
    }
    if let Some(var_60) = &input.group_by {
        let mut array_61 = object.key("GroupBy").start_array();
        for item_62 in var_60 {
            {
                let mut object_63 = array_61.value().start_object();
                crate::json_ser::serialize_structure_crate_model_group_definition(
                    &mut object_63,
                    item_62,
                )?;
                object_63.finish();
            }
        }
        array_61.finish();
    }
    if let Some(var_64) = &input.next_page_token {
        object.key("NextPageToken").string(var_64.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_cost_and_usage_with_resources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCostAndUsageWithResourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.time_period {
        let mut object_66 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_date_interval(&mut object_66, var_65)?;
        object_66.finish();
    }
    if let Some(var_67) = &input.granularity {
        object.key("Granularity").string(var_67.as_str());
    }
    if let Some(var_68) = &input.filter {
        let mut object_69 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_69, var_68)?;
        object_69.finish();
    }
    if let Some(var_70) = &input.metrics {
        let mut array_71 = object.key("Metrics").start_array();
        for item_72 in var_70 {
            {
                array_71.value().string(item_72.as_str());
            }
        }
        array_71.finish();
    }
    if let Some(var_73) = &input.group_by {
        let mut array_74 = object.key("GroupBy").start_array();
        for item_75 in var_73 {
            {
                let mut object_76 = array_74.value().start_object();
                crate::json_ser::serialize_structure_crate_model_group_definition(
                    &mut object_76,
                    item_75,
                )?;
                object_76.finish();
            }
        }
        array_74.finish();
    }
    if let Some(var_77) = &input.next_page_token {
        object.key("NextPageToken").string(var_77.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_cost_categories_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCostCategoriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.search_string {
        object.key("SearchString").string(var_78.as_str());
    }
    if let Some(var_79) = &input.time_period {
        let mut object_80 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_date_interval(&mut object_80, var_79)?;
        object_80.finish();
    }
    if let Some(var_81) = &input.cost_category_name {
        object.key("CostCategoryName").string(var_81.as_str());
    }
    if let Some(var_82) = &input.filter {
        let mut object_83 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_83, var_82)?;
        object_83.finish();
    }
    if let Some(var_84) = &input.sort_by {
        let mut array_85 = object.key("SortBy").start_array();
        for item_86 in var_84 {
            {
                let mut object_87 = array_85.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_definition(
                    &mut object_87,
                    item_86,
                )?;
                object_87.finish();
            }
        }
        array_85.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_88) = &input.next_page_token {
        object.key("NextPageToken").string(var_88.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_cost_forecast_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCostForecastInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.time_period {
        let mut object_90 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_date_interval(&mut object_90, var_89)?;
        object_90.finish();
    }
    if let Some(var_91) = &input.metric {
        object.key("Metric").string(var_91.as_str());
    }
    if let Some(var_92) = &input.granularity {
        object.key("Granularity").string(var_92.as_str());
    }
    if let Some(var_93) = &input.filter {
        let mut object_94 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_94, var_93)?;
        object_94.finish();
    }
    if let Some(var_95) = &input.prediction_interval_level {
        object.key("PredictionIntervalLevel").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_95).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dimension_values_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDimensionValuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.search_string {
        object.key("SearchString").string(var_96.as_str());
    }
    if let Some(var_97) = &input.time_period {
        let mut object_98 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_date_interval(&mut object_98, var_97)?;
        object_98.finish();
    }
    if let Some(var_99) = &input.dimension {
        object.key("Dimension").string(var_99.as_str());
    }
    if let Some(var_100) = &input.context {
        object.key("Context").string(var_100.as_str());
    }
    if let Some(var_101) = &input.filter {
        let mut object_102 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_102, var_101)?;
        object_102.finish();
    }
    if let Some(var_103) = &input.sort_by {
        let mut array_104 = object.key("SortBy").start_array();
        for item_105 in var_103 {
            {
                let mut object_106 = array_104.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_definition(
                    &mut object_106,
                    item_105,
                )?;
                object_106.finish();
            }
        }
        array_104.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_107) = &input.next_page_token {
        object.key("NextPageToken").string(var_107.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_reservation_coverage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetReservationCoverageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.time_period {
        let mut object_109 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_date_interval(&mut object_109, var_108)?;
        object_109.finish();
    }
    if let Some(var_110) = &input.group_by {
        let mut array_111 = object.key("GroupBy").start_array();
        for item_112 in var_110 {
            {
                let mut object_113 = array_111.value().start_object();
                crate::json_ser::serialize_structure_crate_model_group_definition(
                    &mut object_113,
                    item_112,
                )?;
                object_113.finish();
            }
        }
        array_111.finish();
    }
    if let Some(var_114) = &input.granularity {
        object.key("Granularity").string(var_114.as_str());
    }
    if let Some(var_115) = &input.filter {
        let mut object_116 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_116, var_115)?;
        object_116.finish();
    }
    if let Some(var_117) = &input.metrics {
        let mut array_118 = object.key("Metrics").start_array();
        for item_119 in var_117 {
            {
                array_118.value().string(item_119.as_str());
            }
        }
        array_118.finish();
    }
    if let Some(var_120) = &input.next_page_token {
        object.key("NextPageToken").string(var_120.as_str());
    }
    if let Some(var_121) = &input.sort_by {
        let mut object_122 = object.key("SortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_definition(&mut object_122, var_121)?;
        object_122.finish();
    }
    if let Some(var_123) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_123).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_reservation_purchase_recommendation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetReservationPurchaseRecommendationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.account_id {
        object.key("AccountId").string(var_124.as_str());
    }
    if let Some(var_125) = &input.service {
        object.key("Service").string(var_125.as_str());
    }
    if let Some(var_126) = &input.filter {
        let mut object_127 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_127, var_126)?;
        object_127.finish();
    }
    if let Some(var_128) = &input.account_scope {
        object.key("AccountScope").string(var_128.as_str());
    }
    if let Some(var_129) = &input.lookback_period_in_days {
        object.key("LookbackPeriodInDays").string(var_129.as_str());
    }
    if let Some(var_130) = &input.term_in_years {
        object.key("TermInYears").string(var_130.as_str());
    }
    if let Some(var_131) = &input.payment_option {
        object.key("PaymentOption").string(var_131.as_str());
    }
    if let Some(var_132) = &input.service_specification {
        let mut object_133 = object.key("ServiceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_service_specification(
            &mut object_133,
            var_132,
        )?;
        object_133.finish();
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_134) = &input.next_page_token {
        object.key("NextPageToken").string(var_134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_reservation_utilization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetReservationUtilizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.time_period {
        let mut object_136 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_date_interval(&mut object_136, var_135)?;
        object_136.finish();
    }
    if let Some(var_137) = &input.group_by {
        let mut array_138 = object.key("GroupBy").start_array();
        for item_139 in var_137 {
            {
                let mut object_140 = array_138.value().start_object();
                crate::json_ser::serialize_structure_crate_model_group_definition(
                    &mut object_140,
                    item_139,
                )?;
                object_140.finish();
            }
        }
        array_138.finish();
    }
    if let Some(var_141) = &input.granularity {
        object.key("Granularity").string(var_141.as_str());
    }
    if let Some(var_142) = &input.filter {
        let mut object_143 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_143, var_142)?;
        object_143.finish();
    }
    if let Some(var_144) = &input.sort_by {
        let mut object_145 = object.key("SortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_definition(&mut object_145, var_144)?;
        object_145.finish();
    }
    if let Some(var_146) = &input.next_page_token {
        object.key("NextPageToken").string(var_146.as_str());
    }
    if let Some(var_147) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_147).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_rightsizing_recommendation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRightsizingRecommendationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.filter {
        let mut object_149 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_149, var_148)?;
        object_149.finish();
    }
    if let Some(var_150) = &input.configuration {
        let mut object_151 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_rightsizing_recommendation_configuration(
            &mut object_151,
            var_150,
        )?;
        object_151.finish();
    }
    if let Some(var_152) = &input.service {
        object.key("Service").string(var_152.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_153) = &input.next_page_token {
        object.key("NextPageToken").string(var_153.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_savings_plans_coverage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSavingsPlansCoverageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_154) = &input.time_period {
        let mut object_155 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_date_interval(&mut object_155, var_154)?;
        object_155.finish();
    }
    if let Some(var_156) = &input.group_by {
        let mut array_157 = object.key("GroupBy").start_array();
        for item_158 in var_156 {
            {
                let mut object_159 = array_157.value().start_object();
                crate::json_ser::serialize_structure_crate_model_group_definition(
                    &mut object_159,
                    item_158,
                )?;
                object_159.finish();
            }
        }
        array_157.finish();
    }
    if let Some(var_160) = &input.granularity {
        object.key("Granularity").string(var_160.as_str());
    }
    if let Some(var_161) = &input.filter {
        let mut object_162 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_162, var_161)?;
        object_162.finish();
    }
    if let Some(var_163) = &input.metrics {
        let mut array_164 = object.key("Metrics").start_array();
        for item_165 in var_163 {
            {
                array_164.value().string(item_165.as_str());
            }
        }
        array_164.finish();
    }
    if let Some(var_166) = &input.next_token {
        object.key("NextToken").string(var_166.as_str());
    }
    if let Some(var_167) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_167).into()),
        );
    }
    if let Some(var_168) = &input.sort_by {
        let mut object_169 = object.key("SortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_definition(&mut object_169, var_168)?;
        object_169.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_savings_plans_purchase_recommendation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSavingsPlansPurchaseRecommendationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_170) = &input.savings_plans_type {
        object.key("SavingsPlansType").string(var_170.as_str());
    }
    if let Some(var_171) = &input.term_in_years {
        object.key("TermInYears").string(var_171.as_str());
    }
    if let Some(var_172) = &input.payment_option {
        object.key("PaymentOption").string(var_172.as_str());
    }
    if let Some(var_173) = &input.account_scope {
        object.key("AccountScope").string(var_173.as_str());
    }
    if let Some(var_174) = &input.next_page_token {
        object.key("NextPageToken").string(var_174.as_str());
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_175) = &input.lookback_period_in_days {
        object.key("LookbackPeriodInDays").string(var_175.as_str());
    }
    if let Some(var_176) = &input.filter {
        let mut object_177 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_177, var_176)?;
        object_177.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_savings_plans_utilization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSavingsPlansUtilizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.time_period {
        let mut object_179 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_date_interval(&mut object_179, var_178)?;
        object_179.finish();
    }
    if let Some(var_180) = &input.granularity {
        object.key("Granularity").string(var_180.as_str());
    }
    if let Some(var_181) = &input.filter {
        let mut object_182 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_182, var_181)?;
        object_182.finish();
    }
    if let Some(var_183) = &input.sort_by {
        let mut object_184 = object.key("SortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_definition(&mut object_184, var_183)?;
        object_184.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_savings_plans_utilization_details_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSavingsPlansUtilizationDetailsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.time_period {
        let mut object_186 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_date_interval(&mut object_186, var_185)?;
        object_186.finish();
    }
    if let Some(var_187) = &input.filter {
        let mut object_188 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_188, var_187)?;
        object_188.finish();
    }
    if let Some(var_189) = &input.data_type {
        let mut array_190 = object.key("DataType").start_array();
        for item_191 in var_189 {
            {
                array_190.value().string(item_191.as_str());
            }
        }
        array_190.finish();
    }
    if let Some(var_192) = &input.next_token {
        object.key("NextToken").string(var_192.as_str());
    }
    if let Some(var_193) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_193).into()),
        );
    }
    if let Some(var_194) = &input.sort_by {
        let mut object_195 = object.key("SortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_definition(&mut object_195, var_194)?;
        object_195.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.search_string {
        object.key("SearchString").string(var_196.as_str());
    }
    if let Some(var_197) = &input.time_period {
        let mut object_198 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_date_interval(&mut object_198, var_197)?;
        object_198.finish();
    }
    if let Some(var_199) = &input.tag_key {
        object.key("TagKey").string(var_199.as_str());
    }
    if let Some(var_200) = &input.filter {
        let mut object_201 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_201, var_200)?;
        object_201.finish();
    }
    if let Some(var_202) = &input.sort_by {
        let mut array_203 = object.key("SortBy").start_array();
        for item_204 in var_202 {
            {
                let mut object_205 = array_203.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_definition(
                    &mut object_205,
                    item_204,
                )?;
                object_205.finish();
            }
        }
        array_203.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_206) = &input.next_page_token {
        object.key("NextPageToken").string(var_206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_usage_forecast_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUsageForecastInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.time_period {
        let mut object_208 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_crate_model_date_interval(&mut object_208, var_207)?;
        object_208.finish();
    }
    if let Some(var_209) = &input.metric {
        object.key("Metric").string(var_209.as_str());
    }
    if let Some(var_210) = &input.granularity {
        object.key("Granularity").string(var_210.as_str());
    }
    if let Some(var_211) = &input.filter {
        let mut object_212 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_212, var_211)?;
        object_212.finish();
    }
    if let Some(var_213) = &input.prediction_interval_level {
        object.key("PredictionIntervalLevel").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_cost_category_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCostCategoryDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_214) = &input.effective_on {
        object.key("EffectiveOn").string(var_214.as_str());
    }
    if let Some(var_215) = &input.next_token {
        object.key("NextToken").string(var_215.as_str());
    }
    if let Some(var_216) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_216).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_217) = &input.resource_arn {
        object.key("ResourceArn").string(var_217.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_provide_anomaly_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ProvideAnomalyFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_218) = &input.anomaly_id {
        object.key("AnomalyId").string(var_218.as_str());
    }
    if let Some(var_219) = &input.feedback {
        object.key("Feedback").string(var_219.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.resource_arn {
        object.key("ResourceArn").string(var_220.as_str());
    }
    if let Some(var_221) = &input.resource_tags {
        let mut array_222 = object.key("ResourceTags").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_tag(
                    &mut object_224,
                    item_223,
                )?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.resource_arn {
        object.key("ResourceArn").string(var_225.as_str());
    }
    if let Some(var_226) = &input.resource_tag_keys {
        let mut array_227 = object.key("ResourceTagKeys").start_array();
        for item_228 in var_226 {
            {
                array_227.value().string(item_228.as_str());
            }
        }
        array_227.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_anomaly_monitor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnomalyMonitorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.monitor_arn {
        object.key("MonitorArn").string(var_229.as_str());
    }
    if let Some(var_230) = &input.monitor_name {
        object.key("MonitorName").string(var_230.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_anomaly_subscription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnomalySubscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_231) = &input.subscription_arn {
        object.key("SubscriptionArn").string(var_231.as_str());
    }
    if let Some(var_232) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_232).into()),
        );
    }
    if let Some(var_233) = &input.frequency {
        object.key("Frequency").string(var_233.as_str());
    }
    if let Some(var_234) = &input.monitor_arn_list {
        let mut array_235 = object.key("MonitorArnList").start_array();
        for item_236 in var_234 {
            {
                array_235.value().string(item_236.as_str());
            }
        }
        array_235.finish();
    }
    if let Some(var_237) = &input.subscribers {
        let mut array_238 = object.key("Subscribers").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_subscriber(
                    &mut object_240,
                    item_239,
                )?;
                object_240.finish();
            }
        }
        array_238.finish();
    }
    if let Some(var_241) = &input.subscription_name {
        object.key("SubscriptionName").string(var_241.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_cost_category_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCostCategoryDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.cost_category_arn {
        object.key("CostCategoryArn").string(var_242.as_str());
    }
    if let Some(var_243) = &input.rule_version {
        object.key("RuleVersion").string(var_243.as_str());
    }
    if let Some(var_244) = &input.rules {
        let mut array_245 = object.key("Rules").start_array();
        for item_246 in var_244 {
            {
                let mut object_247 = array_245.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cost_category_rule(
                    &mut object_247,
                    item_246,
                )?;
                object_247.finish();
            }
        }
        array_245.finish();
    }
    if let Some(var_248) = &input.default_value {
        object.key("DefaultValue").string(var_248.as_str());
    }
    if let Some(var_249) = &input.split_charge_rules {
        let mut array_250 = object.key("SplitChargeRules").start_array();
        for item_251 in var_249 {
            {
                let mut object_252 = array_250.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cost_category_split_charge_rule(
                    &mut object_252,
                    item_251,
                )?;
                object_252.finish();
            }
        }
        array_250.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anomaly_monitor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyMonitor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_253) = &input.monitor_arn {
        object.key("MonitorArn").string(var_253.as_str());
    }
    if let Some(var_254) = &input.monitor_name {
        object.key("MonitorName").string(var_254.as_str());
    }
    if let Some(var_255) = &input.creation_date {
        object.key("CreationDate").string(var_255.as_str());
    }
    if let Some(var_256) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_256.as_str());
    }
    if let Some(var_257) = &input.last_evaluated_date {
        object.key("LastEvaluatedDate").string(var_257.as_str());
    }
    if let Some(var_258) = &input.monitor_type {
        object.key("MonitorType").string(var_258.as_str());
    }
    if let Some(var_259) = &input.monitor_dimension {
        object.key("MonitorDimension").string(var_259.as_str());
    }
    if let Some(var_260) = &input.monitor_specification {
        let mut object_261 = object.key("MonitorSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_261, var_260)?;
        object_261.finish();
    }
    if input.dimensional_value_count != 0 {
        object.key("DimensionalValueCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dimensional_value_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_262) = &input.key {
        object.key("Key").string(var_262.as_str());
    }
    if let Some(var_263) = &input.value {
        object.key("Value").string(var_263.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anomaly_subscription(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalySubscription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.subscription_arn {
        object.key("SubscriptionArn").string(var_264.as_str());
    }
    if let Some(var_265) = &input.account_id {
        object.key("AccountId").string(var_265.as_str());
    }
    if let Some(var_266) = &input.monitor_arn_list {
        let mut array_267 = object.key("MonitorArnList").start_array();
        for item_268 in var_266 {
            {
                array_267.value().string(item_268.as_str());
            }
        }
        array_267.finish();
    }
    if let Some(var_269) = &input.subscribers {
        let mut array_270 = object.key("Subscribers").start_array();
        for item_271 in var_269 {
            {
                let mut object_272 = array_270.value().start_object();
                crate::json_ser::serialize_structure_crate_model_subscriber(
                    &mut object_272,
                    item_271,
                )?;
                object_272.finish();
            }
        }
        array_270.finish();
    }
    if let Some(var_273) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_273).into()),
        );
    }
    if let Some(var_274) = &input.frequency {
        object.key("Frequency").string(var_274.as_str());
    }
    if let Some(var_275) = &input.subscription_name {
        object.key("SubscriptionName").string(var_275.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cost_category_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CostCategoryRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_276) = &input.value {
        object.key("Value").string(var_276.as_str());
    }
    if let Some(var_277) = &input.rule {
        let mut object_278 = object.key("Rule").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_278, var_277)?;
        object_278.finish();
    }
    if let Some(var_279) = &input.inherited_value {
        let mut object_280 = object.key("InheritedValue").start_object();
        crate::json_ser::serialize_structure_crate_model_cost_category_inherited_value_dimension(
            &mut object_280,
            var_279,
        )?;
        object_280.finish();
    }
    if let Some(var_281) = &input.r#type {
        object.key("Type").string(var_281.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cost_category_split_charge_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CostCategorySplitChargeRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.source {
        object.key("Source").string(var_282.as_str());
    }
    if let Some(var_283) = &input.targets {
        let mut array_284 = object.key("Targets").start_array();
        for item_285 in var_283 {
            {
                array_284.value().string(item_285.as_str());
            }
        }
        array_284.finish();
    }
    if let Some(var_286) = &input.method {
        object.key("Method").string(var_286.as_str());
    }
    if let Some(var_287) = &input.parameters {
        let mut array_288 = object.key("Parameters").start_array();
        for item_289 in var_287 {
            {
                let mut object_290 = array_288.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cost_category_split_charge_rule_parameter(&mut object_290, item_289)?;
                object_290.finish();
            }
        }
        array_288.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anomaly_date_interval(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyDateInterval,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_291) = &input.start_date {
        object.key("StartDate").string(var_291.as_str());
    }
    if let Some(var_292) = &input.end_date {
        object.key("EndDate").string(var_292.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_total_impact_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TotalImpactFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.numeric_operator {
        object.key("NumericOperator").string(var_293.as_str());
    }
    {
        object.key("StartValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.start_value).into()),
        );
    }
    if input.end_value != 0.0 {
        object.key("EndValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.end_value).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_interval(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateInterval,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_294) = &input.start {
        object.key("Start").string(var_294.as_str());
    }
    if let Some(var_295) = &input.end {
        object.key("End").string(var_295.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Expression,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_296) = &input.or {
        let mut array_297 = object.key("Or").start_array();
        for item_298 in var_296 {
            {
                let mut object_299 = array_297.value().start_object();
                crate::json_ser::serialize_structure_crate_model_expression(
                    &mut object_299,
                    item_298,
                )?;
                object_299.finish();
            }
        }
        array_297.finish();
    }
    if let Some(var_300) = &input.and {
        let mut array_301 = object.key("And").start_array();
        for item_302 in var_300 {
            {
                let mut object_303 = array_301.value().start_object();
                crate::json_ser::serialize_structure_crate_model_expression(
                    &mut object_303,
                    item_302,
                )?;
                object_303.finish();
            }
        }
        array_301.finish();
    }
    if let Some(var_304) = &input.not {
        let mut object_305 = object.key("Not").start_object();
        crate::json_ser::serialize_structure_crate_model_expression(&mut object_305, var_304)?;
        object_305.finish();
    }
    if let Some(var_306) = &input.dimensions {
        let mut object_307 = object.key("Dimensions").start_object();
        crate::json_ser::serialize_structure_crate_model_dimension_values(
            &mut object_307,
            var_306,
        )?;
        object_307.finish();
    }
    if let Some(var_308) = &input.tags {
        let mut object_309 = object.key("Tags").start_object();
        crate::json_ser::serialize_structure_crate_model_tag_values(&mut object_309, var_308)?;
        object_309.finish();
    }
    if let Some(var_310) = &input.cost_categories {
        let mut object_311 = object.key("CostCategories").start_object();
        crate::json_ser::serialize_structure_crate_model_cost_category_values(
            &mut object_311,
            var_310,
        )?;
        object_311.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_group_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.r#type {
        object.key("Type").string(var_312.as_str());
    }
    if let Some(var_313) = &input.key {
        object.key("Key").string(var_313.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_314) = &input.key {
        object.key("Key").string(var_314.as_str());
    }
    if let Some(var_315) = &input.sort_order {
        object.key("SortOrder").string(var_315.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_316) = &input.ec2_specification {
        let mut object_317 = object.key("EC2Specification").start_object();
        crate::json_ser::serialize_structure_crate_model_ec2_specification(
            &mut object_317,
            var_316,
        )?;
        object_317.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rightsizing_recommendation_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RightsizingRecommendationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_318) = &input.recommendation_target {
        object.key("RecommendationTarget").string(var_318.as_str());
    }
    {
        object
            .key("BenefitsConsidered")
            .boolean(input.benefits_considered);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_subscriber(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Subscriber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.address {
        object.key("Address").string(var_319.as_str());
    }
    if let Some(var_320) = &input.r#type {
        object.key("Type").string(var_320.as_str());
    }
    if let Some(var_321) = &input.status {
        object.key("Status").string(var_321.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cost_category_inherited_value_dimension(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CostCategoryInheritedValueDimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.dimension_name {
        object.key("DimensionName").string(var_322.as_str());
    }
    if let Some(var_323) = &input.dimension_key {
        object.key("DimensionKey").string(var_323.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cost_category_split_charge_rule_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CostCategorySplitChargeRuleParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.r#type {
        object.key("Type").string(var_324.as_str());
    }
    if let Some(var_325) = &input.values {
        let mut array_326 = object.key("Values").start_array();
        for item_327 in var_325 {
            {
                array_326.value().string(item_327.as_str());
            }
        }
        array_326.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dimension_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DimensionValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_328) = &input.key {
        object.key("Key").string(var_328.as_str());
    }
    if let Some(var_329) = &input.values {
        let mut array_330 = object.key("Values").start_array();
        for item_331 in var_329 {
            {
                array_330.value().string(item_331.as_str());
            }
        }
        array_330.finish();
    }
    if let Some(var_332) = &input.match_options {
        let mut array_333 = object.key("MatchOptions").start_array();
        for item_334 in var_332 {
            {
                array_333.value().string(item_334.as_str());
            }
        }
        array_333.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_335) = &input.key {
        object.key("Key").string(var_335.as_str());
    }
    if let Some(var_336) = &input.values {
        let mut array_337 = object.key("Values").start_array();
        for item_338 in var_336 {
            {
                array_337.value().string(item_338.as_str());
            }
        }
        array_337.finish();
    }
    if let Some(var_339) = &input.match_options {
        let mut array_340 = object.key("MatchOptions").start_array();
        for item_341 in var_339 {
            {
                array_340.value().string(item_341.as_str());
            }
        }
        array_340.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cost_category_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CostCategoryValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_342) = &input.key {
        object.key("Key").string(var_342.as_str());
    }
    if let Some(var_343) = &input.values {
        let mut array_344 = object.key("Values").start_array();
        for item_345 in var_343 {
            {
                array_344.value().string(item_345.as_str());
            }
        }
        array_344.finish();
    }
    if let Some(var_346) = &input.match_options {
        let mut array_347 = object.key("MatchOptions").start_array();
        for item_348 in var_346 {
            {
                array_347.value().string(item_348.as_str());
            }
        }
        array_347.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ec2_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ec2Specification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.offering_class {
        object.key("OfferingClass").string(var_349.as_str());
    }
    Ok(())
}
