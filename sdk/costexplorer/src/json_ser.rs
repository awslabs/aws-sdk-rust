// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_anomaly_monitor_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnomalyMonitorInput,
) {
    if let Some(var_1) = &input.anomaly_monitor {
        let mut object_2 = object.key("AnomalyMonitor").start_object();
        crate::json_ser::serialize_structure_anomaly_monitor(&mut object_2, var_1);
        object_2.finish();
    }
}

pub fn serialize_structure_create_anomaly_subscription_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnomalySubscriptionInput,
) {
    if let Some(var_3) = &input.anomaly_subscription {
        let mut object_4 = object.key("AnomalySubscription").start_object();
        crate::json_ser::serialize_structure_anomaly_subscription(&mut object_4, var_3);
        object_4.finish();
    }
}

pub fn serialize_structure_create_cost_category_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCostCategoryDefinitionInput,
) {
    if let Some(var_5) = &input.name {
        object.key("Name").string(var_5);
    }
    if let Some(var_6) = &input.rule_version {
        object.key("RuleVersion").string(var_6.as_str());
    }
    if let Some(var_7) = &input.rules {
        let mut array_8 = object.key("Rules").start_array();
        for item_9 in var_7 {
            {
                let mut object_10 = array_8.value().start_object();
                crate::json_ser::serialize_structure_cost_category_rule(&mut object_10, item_9);
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.default_value {
        object.key("DefaultValue").string(var_11);
    }
}

pub fn serialize_structure_delete_anomaly_monitor_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAnomalyMonitorInput,
) {
    if let Some(var_12) = &input.monitor_arn {
        object.key("MonitorArn").string(var_12);
    }
}

pub fn serialize_structure_delete_anomaly_subscription_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAnomalySubscriptionInput,
) {
    if let Some(var_13) = &input.subscription_arn {
        object.key("SubscriptionArn").string(var_13);
    }
}

pub fn serialize_structure_delete_cost_category_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCostCategoryDefinitionInput,
) {
    if let Some(var_14) = &input.cost_category_arn {
        object.key("CostCategoryArn").string(var_14);
    }
}

pub fn serialize_structure_describe_cost_category_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCostCategoryDefinitionInput,
) {
    if let Some(var_15) = &input.cost_category_arn {
        object.key("CostCategoryArn").string(var_15);
    }
    if let Some(var_16) = &input.effective_on {
        object.key("EffectiveOn").string(var_16);
    }
}

pub fn serialize_structure_get_anomalies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAnomaliesInput,
) {
    if let Some(var_17) = &input.monitor_arn {
        object.key("MonitorArn").string(var_17);
    }
    if let Some(var_18) = &input.date_interval {
        let mut object_19 = object.key("DateInterval").start_object();
        crate::json_ser::serialize_structure_anomaly_date_interval(&mut object_19, var_18);
        object_19.finish();
    }
    if let Some(var_20) = &input.feedback {
        object.key("Feedback").string(var_20.as_str());
    }
    if let Some(var_21) = &input.total_impact {
        let mut object_22 = object.key("TotalImpact").start_object();
        crate::json_ser::serialize_structure_total_impact_filter(&mut object_22, var_21);
        object_22.finish();
    }
    if let Some(var_23) = &input.next_page_token {
        object.key("NextPageToken").string(var_23);
    }
    if let Some(var_24) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_24).into()),
        );
    }
}

pub fn serialize_structure_get_anomaly_monitors_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAnomalyMonitorsInput,
) {
    if let Some(var_25) = &input.monitor_arn_list {
        let mut array_26 = object.key("MonitorArnList").start_array();
        for item_27 in var_25 {
            {
                array_26.value().string(item_27);
            }
        }
        array_26.finish();
    }
    if let Some(var_28) = &input.next_page_token {
        object.key("NextPageToken").string(var_28);
    }
    if let Some(var_29) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_29).into()),
        );
    }
}

pub fn serialize_structure_get_anomaly_subscriptions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAnomalySubscriptionsInput,
) {
    if let Some(var_30) = &input.subscription_arn_list {
        let mut array_31 = object.key("SubscriptionArnList").start_array();
        for item_32 in var_30 {
            {
                array_31.value().string(item_32);
            }
        }
        array_31.finish();
    }
    if let Some(var_33) = &input.monitor_arn {
        object.key("MonitorArn").string(var_33);
    }
    if let Some(var_34) = &input.next_page_token {
        object.key("NextPageToken").string(var_34);
    }
    if let Some(var_35) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_35).into()),
        );
    }
}

pub fn serialize_structure_get_cost_and_usage_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCostAndUsageInput,
) {
    if let Some(var_36) = &input.time_period {
        let mut object_37 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_date_interval(&mut object_37, var_36);
        object_37.finish();
    }
    if let Some(var_38) = &input.granularity {
        object.key("Granularity").string(var_38.as_str());
    }
    if let Some(var_39) = &input.filter {
        let mut object_40 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_40, var_39);
        object_40.finish();
    }
    if let Some(var_41) = &input.metrics {
        let mut array_42 = object.key("Metrics").start_array();
        for item_43 in var_41 {
            {
                array_42.value().string(item_43);
            }
        }
        array_42.finish();
    }
    if let Some(var_44) = &input.group_by {
        let mut array_45 = object.key("GroupBy").start_array();
        for item_46 in var_44 {
            {
                let mut object_47 = array_45.value().start_object();
                crate::json_ser::serialize_structure_group_definition(&mut object_47, item_46);
                object_47.finish();
            }
        }
        array_45.finish();
    }
    if let Some(var_48) = &input.next_page_token {
        object.key("NextPageToken").string(var_48);
    }
}

pub fn serialize_structure_get_cost_and_usage_with_resources_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCostAndUsageWithResourcesInput,
) {
    if let Some(var_49) = &input.time_period {
        let mut object_50 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_date_interval(&mut object_50, var_49);
        object_50.finish();
    }
    if let Some(var_51) = &input.granularity {
        object.key("Granularity").string(var_51.as_str());
    }
    if let Some(var_52) = &input.filter {
        let mut object_53 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_53, var_52);
        object_53.finish();
    }
    if let Some(var_54) = &input.metrics {
        let mut array_55 = object.key("Metrics").start_array();
        for item_56 in var_54 {
            {
                array_55.value().string(item_56);
            }
        }
        array_55.finish();
    }
    if let Some(var_57) = &input.group_by {
        let mut array_58 = object.key("GroupBy").start_array();
        for item_59 in var_57 {
            {
                let mut object_60 = array_58.value().start_object();
                crate::json_ser::serialize_structure_group_definition(&mut object_60, item_59);
                object_60.finish();
            }
        }
        array_58.finish();
    }
    if let Some(var_61) = &input.next_page_token {
        object.key("NextPageToken").string(var_61);
    }
}

pub fn serialize_structure_get_cost_categories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCostCategoriesInput,
) {
    if let Some(var_62) = &input.search_string {
        object.key("SearchString").string(var_62);
    }
    if let Some(var_63) = &input.time_period {
        let mut object_64 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_date_interval(&mut object_64, var_63);
        object_64.finish();
    }
    if let Some(var_65) = &input.cost_category_name {
        object.key("CostCategoryName").string(var_65);
    }
    if let Some(var_66) = &input.filter {
        let mut object_67 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_67, var_66);
        object_67.finish();
    }
    if let Some(var_68) = &input.sort_by {
        let mut array_69 = object.key("SortBy").start_array();
        for item_70 in var_68 {
            {
                let mut object_71 = array_69.value().start_object();
                crate::json_ser::serialize_structure_sort_definition(&mut object_71, item_70);
                object_71.finish();
            }
        }
        array_69.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_72) = &input.next_page_token {
        object.key("NextPageToken").string(var_72);
    }
}

pub fn serialize_structure_get_cost_forecast_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCostForecastInput,
) {
    if let Some(var_73) = &input.time_period {
        let mut object_74 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_date_interval(&mut object_74, var_73);
        object_74.finish();
    }
    if let Some(var_75) = &input.metric {
        object.key("Metric").string(var_75.as_str());
    }
    if let Some(var_76) = &input.granularity {
        object.key("Granularity").string(var_76.as_str());
    }
    if let Some(var_77) = &input.filter {
        let mut object_78 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_78, var_77);
        object_78.finish();
    }
    if let Some(var_79) = &input.prediction_interval_level {
        object.key("PredictionIntervalLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_79).into()),
        );
    }
}

pub fn serialize_structure_get_dimension_values_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDimensionValuesInput,
) {
    if let Some(var_80) = &input.search_string {
        object.key("SearchString").string(var_80);
    }
    if let Some(var_81) = &input.time_period {
        let mut object_82 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_date_interval(&mut object_82, var_81);
        object_82.finish();
    }
    if let Some(var_83) = &input.dimension {
        object.key("Dimension").string(var_83.as_str());
    }
    if let Some(var_84) = &input.context {
        object.key("Context").string(var_84.as_str());
    }
    if let Some(var_85) = &input.filter {
        let mut object_86 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_86, var_85);
        object_86.finish();
    }
    if let Some(var_87) = &input.sort_by {
        let mut array_88 = object.key("SortBy").start_array();
        for item_89 in var_87 {
            {
                let mut object_90 = array_88.value().start_object();
                crate::json_ser::serialize_structure_sort_definition(&mut object_90, item_89);
                object_90.finish();
            }
        }
        array_88.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_91) = &input.next_page_token {
        object.key("NextPageToken").string(var_91);
    }
}

pub fn serialize_structure_get_reservation_coverage_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetReservationCoverageInput,
) {
    if let Some(var_92) = &input.time_period {
        let mut object_93 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_date_interval(&mut object_93, var_92);
        object_93.finish();
    }
    if let Some(var_94) = &input.group_by {
        let mut array_95 = object.key("GroupBy").start_array();
        for item_96 in var_94 {
            {
                let mut object_97 = array_95.value().start_object();
                crate::json_ser::serialize_structure_group_definition(&mut object_97, item_96);
                object_97.finish();
            }
        }
        array_95.finish();
    }
    if let Some(var_98) = &input.granularity {
        object.key("Granularity").string(var_98.as_str());
    }
    if let Some(var_99) = &input.filter {
        let mut object_100 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_100, var_99);
        object_100.finish();
    }
    if let Some(var_101) = &input.metrics {
        let mut array_102 = object.key("Metrics").start_array();
        for item_103 in var_101 {
            {
                array_102.value().string(item_103);
            }
        }
        array_102.finish();
    }
    if let Some(var_104) = &input.next_page_token {
        object.key("NextPageToken").string(var_104);
    }
    if let Some(var_105) = &input.sort_by {
        let mut object_106 = object.key("SortBy").start_object();
        crate::json_ser::serialize_structure_sort_definition(&mut object_106, var_105);
        object_106.finish();
    }
    if let Some(var_107) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_107).into()),
        );
    }
}

pub fn serialize_structure_get_reservation_purchase_recommendation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetReservationPurchaseRecommendationInput,
) {
    if let Some(var_108) = &input.account_id {
        object.key("AccountId").string(var_108);
    }
    if let Some(var_109) = &input.service {
        object.key("Service").string(var_109);
    }
    if let Some(var_110) = &input.filter {
        let mut object_111 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_111, var_110);
        object_111.finish();
    }
    if let Some(var_112) = &input.account_scope {
        object.key("AccountScope").string(var_112.as_str());
    }
    if let Some(var_113) = &input.lookback_period_in_days {
        object.key("LookbackPeriodInDays").string(var_113.as_str());
    }
    if let Some(var_114) = &input.term_in_years {
        object.key("TermInYears").string(var_114.as_str());
    }
    if let Some(var_115) = &input.payment_option {
        object.key("PaymentOption").string(var_115.as_str());
    }
    if let Some(var_116) = &input.service_specification {
        let mut object_117 = object.key("ServiceSpecification").start_object();
        crate::json_ser::serialize_structure_service_specification(&mut object_117, var_116);
        object_117.finish();
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_118) = &input.next_page_token {
        object.key("NextPageToken").string(var_118);
    }
}

pub fn serialize_structure_get_reservation_utilization_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetReservationUtilizationInput,
) {
    if let Some(var_119) = &input.time_period {
        let mut object_120 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_date_interval(&mut object_120, var_119);
        object_120.finish();
    }
    if let Some(var_121) = &input.group_by {
        let mut array_122 = object.key("GroupBy").start_array();
        for item_123 in var_121 {
            {
                let mut object_124 = array_122.value().start_object();
                crate::json_ser::serialize_structure_group_definition(&mut object_124, item_123);
                object_124.finish();
            }
        }
        array_122.finish();
    }
    if let Some(var_125) = &input.granularity {
        object.key("Granularity").string(var_125.as_str());
    }
    if let Some(var_126) = &input.filter {
        let mut object_127 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_127, var_126);
        object_127.finish();
    }
    if let Some(var_128) = &input.sort_by {
        let mut object_129 = object.key("SortBy").start_object();
        crate::json_ser::serialize_structure_sort_definition(&mut object_129, var_128);
        object_129.finish();
    }
    if let Some(var_130) = &input.next_page_token {
        object.key("NextPageToken").string(var_130);
    }
    if let Some(var_131) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_131).into()),
        );
    }
}

pub fn serialize_structure_get_rightsizing_recommendation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRightsizingRecommendationInput,
) {
    if let Some(var_132) = &input.filter {
        let mut object_133 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_133, var_132);
        object_133.finish();
    }
    if let Some(var_134) = &input.configuration {
        let mut object_135 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_rightsizing_recommendation_configuration(
            &mut object_135,
            var_134,
        );
        object_135.finish();
    }
    if let Some(var_136) = &input.service {
        object.key("Service").string(var_136);
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_137) = &input.next_page_token {
        object.key("NextPageToken").string(var_137);
    }
}

pub fn serialize_structure_get_savings_plans_coverage_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSavingsPlansCoverageInput,
) {
    if let Some(var_138) = &input.time_period {
        let mut object_139 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_date_interval(&mut object_139, var_138);
        object_139.finish();
    }
    if let Some(var_140) = &input.group_by {
        let mut array_141 = object.key("GroupBy").start_array();
        for item_142 in var_140 {
            {
                let mut object_143 = array_141.value().start_object();
                crate::json_ser::serialize_structure_group_definition(&mut object_143, item_142);
                object_143.finish();
            }
        }
        array_141.finish();
    }
    if let Some(var_144) = &input.granularity {
        object.key("Granularity").string(var_144.as_str());
    }
    if let Some(var_145) = &input.filter {
        let mut object_146 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_146, var_145);
        object_146.finish();
    }
    if let Some(var_147) = &input.metrics {
        let mut array_148 = object.key("Metrics").start_array();
        for item_149 in var_147 {
            {
                array_148.value().string(item_149);
            }
        }
        array_148.finish();
    }
    if let Some(var_150) = &input.next_token {
        object.key("NextToken").string(var_150);
    }
    if let Some(var_151) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_151).into()),
        );
    }
    if let Some(var_152) = &input.sort_by {
        let mut object_153 = object.key("SortBy").start_object();
        crate::json_ser::serialize_structure_sort_definition(&mut object_153, var_152);
        object_153.finish();
    }
}

pub fn serialize_structure_get_savings_plans_purchase_recommendation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSavingsPlansPurchaseRecommendationInput,
) {
    if let Some(var_154) = &input.savings_plans_type {
        object.key("SavingsPlansType").string(var_154.as_str());
    }
    if let Some(var_155) = &input.term_in_years {
        object.key("TermInYears").string(var_155.as_str());
    }
    if let Some(var_156) = &input.payment_option {
        object.key("PaymentOption").string(var_156.as_str());
    }
    if let Some(var_157) = &input.account_scope {
        object.key("AccountScope").string(var_157.as_str());
    }
    if let Some(var_158) = &input.next_page_token {
        object.key("NextPageToken").string(var_158);
    }
    if input.page_size != 0 {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.page_size).into()),
        );
    }
    if let Some(var_159) = &input.lookback_period_in_days {
        object.key("LookbackPeriodInDays").string(var_159.as_str());
    }
    if let Some(var_160) = &input.filter {
        let mut object_161 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_161, var_160);
        object_161.finish();
    }
}

pub fn serialize_structure_get_savings_plans_utilization_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSavingsPlansUtilizationInput,
) {
    if let Some(var_162) = &input.time_period {
        let mut object_163 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_date_interval(&mut object_163, var_162);
        object_163.finish();
    }
    if let Some(var_164) = &input.granularity {
        object.key("Granularity").string(var_164.as_str());
    }
    if let Some(var_165) = &input.filter {
        let mut object_166 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_166, var_165);
        object_166.finish();
    }
    if let Some(var_167) = &input.sort_by {
        let mut object_168 = object.key("SortBy").start_object();
        crate::json_ser::serialize_structure_sort_definition(&mut object_168, var_167);
        object_168.finish();
    }
}

pub fn serialize_structure_get_savings_plans_utilization_details_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSavingsPlansUtilizationDetailsInput,
) {
    if let Some(var_169) = &input.time_period {
        let mut object_170 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_date_interval(&mut object_170, var_169);
        object_170.finish();
    }
    if let Some(var_171) = &input.filter {
        let mut object_172 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_172, var_171);
        object_172.finish();
    }
    if let Some(var_173) = &input.data_type {
        let mut array_174 = object.key("DataType").start_array();
        for item_175 in var_173 {
            {
                array_174.value().string(item_175.as_str());
            }
        }
        array_174.finish();
    }
    if let Some(var_176) = &input.next_token {
        object.key("NextToken").string(var_176);
    }
    if let Some(var_177) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_177).into()),
        );
    }
    if let Some(var_178) = &input.sort_by {
        let mut object_179 = object.key("SortBy").start_object();
        crate::json_ser::serialize_structure_sort_definition(&mut object_179, var_178);
        object_179.finish();
    }
}

pub fn serialize_structure_get_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTagsInput,
) {
    if let Some(var_180) = &input.search_string {
        object.key("SearchString").string(var_180);
    }
    if let Some(var_181) = &input.time_period {
        let mut object_182 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_date_interval(&mut object_182, var_181);
        object_182.finish();
    }
    if let Some(var_183) = &input.tag_key {
        object.key("TagKey").string(var_183);
    }
    if let Some(var_184) = &input.filter {
        let mut object_185 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_185, var_184);
        object_185.finish();
    }
    if let Some(var_186) = &input.sort_by {
        let mut array_187 = object.key("SortBy").start_array();
        for item_188 in var_186 {
            {
                let mut object_189 = array_187.value().start_object();
                crate::json_ser::serialize_structure_sort_definition(&mut object_189, item_188);
                object_189.finish();
            }
        }
        array_187.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_190) = &input.next_page_token {
        object.key("NextPageToken").string(var_190);
    }
}

pub fn serialize_structure_get_usage_forecast_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUsageForecastInput,
) {
    if let Some(var_191) = &input.time_period {
        let mut object_192 = object.key("TimePeriod").start_object();
        crate::json_ser::serialize_structure_date_interval(&mut object_192, var_191);
        object_192.finish();
    }
    if let Some(var_193) = &input.metric {
        object.key("Metric").string(var_193.as_str());
    }
    if let Some(var_194) = &input.granularity {
        object.key("Granularity").string(var_194.as_str());
    }
    if let Some(var_195) = &input.filter {
        let mut object_196 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_196, var_195);
        object_196.finish();
    }
    if let Some(var_197) = &input.prediction_interval_level {
        object.key("PredictionIntervalLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_197).into()),
        );
    }
}

pub fn serialize_structure_list_cost_category_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCostCategoryDefinitionsInput,
) {
    if let Some(var_198) = &input.effective_on {
        object.key("EffectiveOn").string(var_198);
    }
    if let Some(var_199) = &input.next_token {
        object.key("NextToken").string(var_199);
    }
    if let Some(var_200) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_200).into()),
        );
    }
}

pub fn serialize_structure_provide_anomaly_feedback_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ProvideAnomalyFeedbackInput,
) {
    if let Some(var_201) = &input.anomaly_id {
        object.key("AnomalyId").string(var_201);
    }
    if let Some(var_202) = &input.feedback {
        object.key("Feedback").string(var_202.as_str());
    }
}

pub fn serialize_structure_update_anomaly_monitor_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnomalyMonitorInput,
) {
    if let Some(var_203) = &input.monitor_arn {
        object.key("MonitorArn").string(var_203);
    }
    if let Some(var_204) = &input.monitor_name {
        object.key("MonitorName").string(var_204);
    }
}

pub fn serialize_structure_update_anomaly_subscription_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnomalySubscriptionInput,
) {
    if let Some(var_205) = &input.subscription_arn {
        object.key("SubscriptionArn").string(var_205);
    }
    if let Some(var_206) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_206).into()),
        );
    }
    if let Some(var_207) = &input.frequency {
        object.key("Frequency").string(var_207.as_str());
    }
    if let Some(var_208) = &input.monitor_arn_list {
        let mut array_209 = object.key("MonitorArnList").start_array();
        for item_210 in var_208 {
            {
                array_209.value().string(item_210);
            }
        }
        array_209.finish();
    }
    if let Some(var_211) = &input.subscribers {
        let mut array_212 = object.key("Subscribers").start_array();
        for item_213 in var_211 {
            {
                let mut object_214 = array_212.value().start_object();
                crate::json_ser::serialize_structure_subscriber(&mut object_214, item_213);
                object_214.finish();
            }
        }
        array_212.finish();
    }
    if let Some(var_215) = &input.subscription_name {
        object.key("SubscriptionName").string(var_215);
    }
}

pub fn serialize_structure_update_cost_category_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCostCategoryDefinitionInput,
) {
    if let Some(var_216) = &input.cost_category_arn {
        object.key("CostCategoryArn").string(var_216);
    }
    if let Some(var_217) = &input.rule_version {
        object.key("RuleVersion").string(var_217.as_str());
    }
    if let Some(var_218) = &input.rules {
        let mut array_219 = object.key("Rules").start_array();
        for item_220 in var_218 {
            {
                let mut object_221 = array_219.value().start_object();
                crate::json_ser::serialize_structure_cost_category_rule(&mut object_221, item_220);
                object_221.finish();
            }
        }
        array_219.finish();
    }
    if let Some(var_222) = &input.default_value {
        object.key("DefaultValue").string(var_222);
    }
}

pub fn serialize_structure_anomaly_monitor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyMonitor,
) {
    if let Some(var_223) = &input.monitor_arn {
        object.key("MonitorArn").string(var_223);
    }
    if let Some(var_224) = &input.monitor_name {
        object.key("MonitorName").string(var_224);
    }
    if let Some(var_225) = &input.creation_date {
        object.key("CreationDate").string(var_225);
    }
    if let Some(var_226) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_226);
    }
    if let Some(var_227) = &input.last_evaluated_date {
        object.key("LastEvaluatedDate").string(var_227);
    }
    if let Some(var_228) = &input.monitor_type {
        object.key("MonitorType").string(var_228.as_str());
    }
    if let Some(var_229) = &input.monitor_dimension {
        object.key("MonitorDimension").string(var_229.as_str());
    }
    if let Some(var_230) = &input.monitor_specification {
        let mut object_231 = object.key("MonitorSpecification").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_231, var_230);
        object_231.finish();
    }
    if input.dimensional_value_count != 0 {
        object.key("DimensionalValueCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.dimensional_value_count).into()),
        );
    }
}

pub fn serialize_structure_anomaly_subscription(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalySubscription,
) {
    if let Some(var_232) = &input.subscription_arn {
        object.key("SubscriptionArn").string(var_232);
    }
    if let Some(var_233) = &input.account_id {
        object.key("AccountId").string(var_233);
    }
    if let Some(var_234) = &input.monitor_arn_list {
        let mut array_235 = object.key("MonitorArnList").start_array();
        for item_236 in var_234 {
            {
                array_235.value().string(item_236);
            }
        }
        array_235.finish();
    }
    if let Some(var_237) = &input.subscribers {
        let mut array_238 = object.key("Subscribers").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_subscriber(&mut object_240, item_239);
                object_240.finish();
            }
        }
        array_238.finish();
    }
    if let Some(var_241) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_241).into()),
        );
    }
    if let Some(var_242) = &input.frequency {
        object.key("Frequency").string(var_242.as_str());
    }
    if let Some(var_243) = &input.subscription_name {
        object.key("SubscriptionName").string(var_243);
    }
}

pub fn serialize_structure_cost_category_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CostCategoryRule,
) {
    if let Some(var_244) = &input.value {
        object.key("Value").string(var_244);
    }
    if let Some(var_245) = &input.rule {
        let mut object_246 = object.key("Rule").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_246, var_245);
        object_246.finish();
    }
    if let Some(var_247) = &input.inherited_value {
        let mut object_248 = object.key("InheritedValue").start_object();
        crate::json_ser::serialize_structure_cost_category_inherited_value_dimension(
            &mut object_248,
            var_247,
        );
        object_248.finish();
    }
    if let Some(var_249) = &input.r#type {
        object.key("Type").string(var_249.as_str());
    }
}

pub fn serialize_structure_anomaly_date_interval(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyDateInterval,
) {
    if let Some(var_250) = &input.start_date {
        object.key("StartDate").string(var_250);
    }
    if let Some(var_251) = &input.end_date {
        object.key("EndDate").string(var_251);
    }
}

pub fn serialize_structure_total_impact_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TotalImpactFilter,
) {
    if let Some(var_252) = &input.numeric_operator {
        object.key("NumericOperator").string(var_252.as_str());
    }
    {
        object.key("StartValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.start_value).into()),
        );
    }
    if input.end_value != 0.0 {
        object.key("EndValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.end_value).into()),
        );
    }
}

pub fn serialize_structure_date_interval(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateInterval,
) {
    if let Some(var_253) = &input.start {
        object.key("Start").string(var_253);
    }
    if let Some(var_254) = &input.end {
        object.key("End").string(var_254);
    }
}

pub fn serialize_structure_expression(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Expression,
) {
    if let Some(var_255) = &input.or {
        let mut array_256 = object.key("Or").start_array();
        for item_257 in var_255 {
            {
                let mut object_258 = array_256.value().start_object();
                crate::json_ser::serialize_structure_expression(&mut object_258, item_257);
                object_258.finish();
            }
        }
        array_256.finish();
    }
    if let Some(var_259) = &input.and {
        let mut array_260 = object.key("And").start_array();
        for item_261 in var_259 {
            {
                let mut object_262 = array_260.value().start_object();
                crate::json_ser::serialize_structure_expression(&mut object_262, item_261);
                object_262.finish();
            }
        }
        array_260.finish();
    }
    if let Some(var_263) = &input.not {
        let mut object_264 = object.key("Not").start_object();
        crate::json_ser::serialize_structure_expression(&mut object_264, var_263);
        object_264.finish();
    }
    if let Some(var_265) = &input.dimensions {
        let mut object_266 = object.key("Dimensions").start_object();
        crate::json_ser::serialize_structure_dimension_values(&mut object_266, var_265);
        object_266.finish();
    }
    if let Some(var_267) = &input.tags {
        let mut object_268 = object.key("Tags").start_object();
        crate::json_ser::serialize_structure_tag_values(&mut object_268, var_267);
        object_268.finish();
    }
    if let Some(var_269) = &input.cost_categories {
        let mut object_270 = object.key("CostCategories").start_object();
        crate::json_ser::serialize_structure_cost_category_values(&mut object_270, var_269);
        object_270.finish();
    }
}

pub fn serialize_structure_group_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupDefinition,
) {
    if let Some(var_271) = &input.r#type {
        object.key("Type").string(var_271.as_str());
    }
    if let Some(var_272) = &input.key {
        object.key("Key").string(var_272);
    }
}

pub fn serialize_structure_sort_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortDefinition,
) {
    if let Some(var_273) = &input.key {
        object.key("Key").string(var_273);
    }
    if let Some(var_274) = &input.sort_order {
        object.key("SortOrder").string(var_274.as_str());
    }
}

pub fn serialize_structure_service_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceSpecification,
) {
    if let Some(var_275) = &input.ec2_specification {
        let mut object_276 = object.key("EC2Specification").start_object();
        crate::json_ser::serialize_structure_ec2_specification(&mut object_276, var_275);
        object_276.finish();
    }
}

pub fn serialize_structure_rightsizing_recommendation_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RightsizingRecommendationConfiguration,
) {
    if let Some(var_277) = &input.recommendation_target {
        object.key("RecommendationTarget").string(var_277.as_str());
    }
    {
        object
            .key("BenefitsConsidered")
            .boolean(input.benefits_considered);
    }
}

pub fn serialize_structure_subscriber(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Subscriber,
) {
    if let Some(var_278) = &input.address {
        object.key("Address").string(var_278);
    }
    if let Some(var_279) = &input.r#type {
        object.key("Type").string(var_279.as_str());
    }
    if let Some(var_280) = &input.status {
        object.key("Status").string(var_280.as_str());
    }
}

pub fn serialize_structure_cost_category_inherited_value_dimension(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CostCategoryInheritedValueDimension,
) {
    if let Some(var_281) = &input.dimension_name {
        object.key("DimensionName").string(var_281.as_str());
    }
    if let Some(var_282) = &input.dimension_key {
        object.key("DimensionKey").string(var_282);
    }
}

pub fn serialize_structure_dimension_values(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DimensionValues,
) {
    if let Some(var_283) = &input.key {
        object.key("Key").string(var_283.as_str());
    }
    if let Some(var_284) = &input.values {
        let mut array_285 = object.key("Values").start_array();
        for item_286 in var_284 {
            {
                array_285.value().string(item_286);
            }
        }
        array_285.finish();
    }
    if let Some(var_287) = &input.match_options {
        let mut array_288 = object.key("MatchOptions").start_array();
        for item_289 in var_287 {
            {
                array_288.value().string(item_289.as_str());
            }
        }
        array_288.finish();
    }
}

pub fn serialize_structure_tag_values(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagValues,
) {
    if let Some(var_290) = &input.key {
        object.key("Key").string(var_290);
    }
    if let Some(var_291) = &input.values {
        let mut array_292 = object.key("Values").start_array();
        for item_293 in var_291 {
            {
                array_292.value().string(item_293);
            }
        }
        array_292.finish();
    }
    if let Some(var_294) = &input.match_options {
        let mut array_295 = object.key("MatchOptions").start_array();
        for item_296 in var_294 {
            {
                array_295.value().string(item_296.as_str());
            }
        }
        array_295.finish();
    }
}

pub fn serialize_structure_cost_category_values(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CostCategoryValues,
) {
    if let Some(var_297) = &input.key {
        object.key("Key").string(var_297);
    }
    if let Some(var_298) = &input.values {
        let mut array_299 = object.key("Values").start_array();
        for item_300 in var_298 {
            {
                array_299.value().string(item_300);
            }
        }
        array_299.finish();
    }
    if let Some(var_301) = &input.match_options {
        let mut array_302 = object.key("MatchOptions").start_array();
        for item_303 in var_301 {
            {
                array_302.value().string(item_303.as_str());
            }
        }
        array_302.finish();
    }
}

pub fn serialize_structure_ec2_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ec2Specification,
) {
    if let Some(var_304) = &input.offering_class {
        object.key("OfferingClass").string(var_304.as_str());
    }
}
