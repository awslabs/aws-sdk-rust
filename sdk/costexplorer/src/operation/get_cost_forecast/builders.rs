// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_cost_forecast::_get_cost_forecast_output::GetCostForecastOutputBuilder;

pub use crate::operation::get_cost_forecast::_get_cost_forecast_input::GetCostForecastInputBuilder;

impl crate::operation::get_cost_forecast::builders::GetCostForecastInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_cost_forecast::GetCostForecastOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_cost_forecast::GetCostForecastError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_cost_forecast();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetCostForecast`.
///
/// <p>Retrieves a forecast for how much Amazon Web Services predicts that you will spend over the forecast time period that you select, based on your past costs.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetCostForecastFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_cost_forecast::builders::GetCostForecastInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_cost_forecast::GetCostForecastOutput,
        crate::operation::get_cost_forecast::GetCostForecastError,
    > for GetCostForecastFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_cost_forecast::GetCostForecastOutput,
            crate::operation::get_cost_forecast::GetCostForecastError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetCostForecastFluentBuilder {
    /// Creates a new `GetCostForecast`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetCostForecast as a reference.
    pub fn as_input(&self) -> &crate::operation::get_cost_forecast::builders::GetCostForecastInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_cost_forecast::GetCostForecastOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_cost_forecast::GetCostForecastError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_cost_forecast::GetCostForecast::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_cost_forecast::GetCostForecast::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_cost_forecast::GetCostForecastOutput,
        crate::operation::get_cost_forecast::GetCostForecastError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The period of time that you want the forecast to cover. The start date must be equal to or no later than the current date to avoid a validation error.</p>
    pub fn time_period(mut self, input: crate::types::DateInterval) -> Self {
        self.inner = self.inner.time_period(input);
        self
    }
    /// <p>The period of time that you want the forecast to cover. The start date must be equal to or no later than the current date to avoid a validation error.</p>
    pub fn set_time_period(mut self, input: ::std::option::Option<crate::types::DateInterval>) -> Self {
        self.inner = self.inner.set_time_period(input);
        self
    }
    /// <p>The period of time that you want the forecast to cover. The start date must be equal to or no later than the current date to avoid a validation error.</p>
    pub fn get_time_period(&self) -> &::std::option::Option<crate::types::DateInterval> {
        self.inner.get_time_period()
    }
    /// <p>Which metric Cost Explorer uses to create your forecast. For more information about blended and unblended rates, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/">Why does the "blended" annotation appear on some line items in my bill?</a>.</p>
    /// <p>Valid values for a <code>GetCostForecast</code> call are the following:</p>
    /// <ul>
    /// <li>
    /// <p>AMORTIZED_COST</p></li>
    /// <li>
    /// <p>BLENDED_COST</p></li>
    /// <li>
    /// <p>NET_AMORTIZED_COST</p></li>
    /// <li>
    /// <p>NET_UNBLENDED_COST</p></li>
    /// <li>
    /// <p>UNBLENDED_COST</p></li>
    /// </ul>
    pub fn metric(mut self, input: crate::types::Metric) -> Self {
        self.inner = self.inner.metric(input);
        self
    }
    /// <p>Which metric Cost Explorer uses to create your forecast. For more information about blended and unblended rates, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/">Why does the "blended" annotation appear on some line items in my bill?</a>.</p>
    /// <p>Valid values for a <code>GetCostForecast</code> call are the following:</p>
    /// <ul>
    /// <li>
    /// <p>AMORTIZED_COST</p></li>
    /// <li>
    /// <p>BLENDED_COST</p></li>
    /// <li>
    /// <p>NET_AMORTIZED_COST</p></li>
    /// <li>
    /// <p>NET_UNBLENDED_COST</p></li>
    /// <li>
    /// <p>UNBLENDED_COST</p></li>
    /// </ul>
    pub fn set_metric(mut self, input: ::std::option::Option<crate::types::Metric>) -> Self {
        self.inner = self.inner.set_metric(input);
        self
    }
    /// <p>Which metric Cost Explorer uses to create your forecast. For more information about blended and unblended rates, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/">Why does the "blended" annotation appear on some line items in my bill?</a>.</p>
    /// <p>Valid values for a <code>GetCostForecast</code> call are the following:</p>
    /// <ul>
    /// <li>
    /// <p>AMORTIZED_COST</p></li>
    /// <li>
    /// <p>BLENDED_COST</p></li>
    /// <li>
    /// <p>NET_AMORTIZED_COST</p></li>
    /// <li>
    /// <p>NET_UNBLENDED_COST</p></li>
    /// <li>
    /// <p>UNBLENDED_COST</p></li>
    /// </ul>
    pub fn get_metric(&self) -> &::std::option::Option<crate::types::Metric> {
        self.inner.get_metric()
    }
    /// <p>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code> forecasts or 12 months of <code>MONTHLY</code> forecasts.</p>
    /// <p>The <code>GetCostForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn granularity(mut self, input: crate::types::Granularity) -> Self {
        self.inner = self.inner.granularity(input);
        self
    }
    /// <p>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code> forecasts or 12 months of <code>MONTHLY</code> forecasts.</p>
    /// <p>The <code>GetCostForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn set_granularity(mut self, input: ::std::option::Option<crate::types::Granularity>) -> Self {
        self.inner = self.inner.set_granularity(input);
        self
    }
    /// <p>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code> forecasts or 12 months of <code>MONTHLY</code> forecasts.</p>
    /// <p>The <code>GetCostForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn get_granularity(&self) -> &::std::option::Option<crate::types::Granularity> {
        self.inner.get_granularity()
    }
    /// <p>The filters that you want to use to filter your forecast. The <code>GetCostForecast</code> API supports filtering by the following dimensions:</p>
    /// <ul>
    /// <li>
    /// <p><code>AZ</code></p></li>
    /// <li>
    /// <p><code>INSTANCE_TYPE</code></p></li>
    /// <li>
    /// <p><code>LINKED_ACCOUNT</code></p></li>
    /// <li>
    /// <p><code>LINKED_ACCOUNT_NAME</code></p></li>
    /// <li>
    /// <p><code>OPERATION</code></p></li>
    /// <li>
    /// <p><code>PURCHASE_TYPE</code></p></li>
    /// <li>
    /// <p><code>REGION</code></p></li>
    /// <li>
    /// <p><code>SERVICE</code></p></li>
    /// <li>
    /// <p><code>USAGE_TYPE</code></p></li>
    /// <li>
    /// <p><code>USAGE_TYPE_GROUP</code></p></li>
    /// <li>
    /// <p><code>RECORD_TYPE</code></p></li>
    /// <li>
    /// <p><code>OPERATING_SYSTEM</code></p></li>
    /// <li>
    /// <p><code>TENANCY</code></p></li>
    /// <li>
    /// <p><code>SCOPE</code></p></li>
    /// <li>
    /// <p><code>PLATFORM</code></p></li>
    /// <li>
    /// <p><code>SUBSCRIPTION_ID</code></p></li>
    /// <li>
    /// <p><code>LEGAL_ENTITY_NAME</code></p></li>
    /// <li>
    /// <p><code>DEPLOYMENT_OPTION</code></p></li>
    /// <li>
    /// <p><code>DATABASE_ENGINE</code></p></li>
    /// <li>
    /// <p><code>INSTANCE_TYPE_FAMILY</code></p></li>
    /// <li>
    /// <p><code>BILLING_ENTITY</code></p></li>
    /// <li>
    /// <p><code>RESERVATION_ID</code></p></li>
    /// <li>
    /// <p><code>SAVINGS_PLAN_ARN</code></p></li>
    /// </ul>
    pub fn filter(mut self, input: crate::types::Expression) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>The filters that you want to use to filter your forecast. The <code>GetCostForecast</code> API supports filtering by the following dimensions:</p>
    /// <ul>
    /// <li>
    /// <p><code>AZ</code></p></li>
    /// <li>
    /// <p><code>INSTANCE_TYPE</code></p></li>
    /// <li>
    /// <p><code>LINKED_ACCOUNT</code></p></li>
    /// <li>
    /// <p><code>LINKED_ACCOUNT_NAME</code></p></li>
    /// <li>
    /// <p><code>OPERATION</code></p></li>
    /// <li>
    /// <p><code>PURCHASE_TYPE</code></p></li>
    /// <li>
    /// <p><code>REGION</code></p></li>
    /// <li>
    /// <p><code>SERVICE</code></p></li>
    /// <li>
    /// <p><code>USAGE_TYPE</code></p></li>
    /// <li>
    /// <p><code>USAGE_TYPE_GROUP</code></p></li>
    /// <li>
    /// <p><code>RECORD_TYPE</code></p></li>
    /// <li>
    /// <p><code>OPERATING_SYSTEM</code></p></li>
    /// <li>
    /// <p><code>TENANCY</code></p></li>
    /// <li>
    /// <p><code>SCOPE</code></p></li>
    /// <li>
    /// <p><code>PLATFORM</code></p></li>
    /// <li>
    /// <p><code>SUBSCRIPTION_ID</code></p></li>
    /// <li>
    /// <p><code>LEGAL_ENTITY_NAME</code></p></li>
    /// <li>
    /// <p><code>DEPLOYMENT_OPTION</code></p></li>
    /// <li>
    /// <p><code>DATABASE_ENGINE</code></p></li>
    /// <li>
    /// <p><code>INSTANCE_TYPE_FAMILY</code></p></li>
    /// <li>
    /// <p><code>BILLING_ENTITY</code></p></li>
    /// <li>
    /// <p><code>RESERVATION_ID</code></p></li>
    /// <li>
    /// <p><code>SAVINGS_PLAN_ARN</code></p></li>
    /// </ul>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::Expression>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
    /// <p>The filters that you want to use to filter your forecast. The <code>GetCostForecast</code> API supports filtering by the following dimensions:</p>
    /// <ul>
    /// <li>
    /// <p><code>AZ</code></p></li>
    /// <li>
    /// <p><code>INSTANCE_TYPE</code></p></li>
    /// <li>
    /// <p><code>LINKED_ACCOUNT</code></p></li>
    /// <li>
    /// <p><code>LINKED_ACCOUNT_NAME</code></p></li>
    /// <li>
    /// <p><code>OPERATION</code></p></li>
    /// <li>
    /// <p><code>PURCHASE_TYPE</code></p></li>
    /// <li>
    /// <p><code>REGION</code></p></li>
    /// <li>
    /// <p><code>SERVICE</code></p></li>
    /// <li>
    /// <p><code>USAGE_TYPE</code></p></li>
    /// <li>
    /// <p><code>USAGE_TYPE_GROUP</code></p></li>
    /// <li>
    /// <p><code>RECORD_TYPE</code></p></li>
    /// <li>
    /// <p><code>OPERATING_SYSTEM</code></p></li>
    /// <li>
    /// <p><code>TENANCY</code></p></li>
    /// <li>
    /// <p><code>SCOPE</code></p></li>
    /// <li>
    /// <p><code>PLATFORM</code></p></li>
    /// <li>
    /// <p><code>SUBSCRIPTION_ID</code></p></li>
    /// <li>
    /// <p><code>LEGAL_ENTITY_NAME</code></p></li>
    /// <li>
    /// <p><code>DEPLOYMENT_OPTION</code></p></li>
    /// <li>
    /// <p><code>DATABASE_ENGINE</code></p></li>
    /// <li>
    /// <p><code>INSTANCE_TYPE_FAMILY</code></p></li>
    /// <li>
    /// <p><code>BILLING_ENTITY</code></p></li>
    /// <li>
    /// <p><code>RESERVATION_ID</code></p></li>
    /// <li>
    /// <p><code>SAVINGS_PLAN_ARN</code></p></li>
    /// </ul>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::Expression> {
        self.inner.get_filter()
    }
    /// <p>Cost Explorer always returns the mean forecast as a single point. You can request a prediction interval around the mean by specifying a confidence level. The higher the confidence level, the more confident Cost Explorer is about the actual value falling in the prediction interval. Higher confidence levels result in wider prediction intervals.</p>
    pub fn prediction_interval_level(mut self, input: i32) -> Self {
        self.inner = self.inner.prediction_interval_level(input);
        self
    }
    /// <p>Cost Explorer always returns the mean forecast as a single point. You can request a prediction interval around the mean by specifying a confidence level. The higher the confidence level, the more confident Cost Explorer is about the actual value falling in the prediction interval. Higher confidence levels result in wider prediction intervals.</p>
    pub fn set_prediction_interval_level(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_prediction_interval_level(input);
        self
    }
    /// <p>Cost Explorer always returns the mean forecast as a single point. You can request a prediction interval around the mean by specifying a confidence level. The higher the confidence level, the more confident Cost Explorer is about the actual value falling in the prediction interval. Higher confidence levels result in wider prediction intervals.</p>
    pub fn get_prediction_interval_level(&self) -> &::std::option::Option<i32> {
        self.inner.get_prediction_interval_level()
    }
}
