// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTagsOutput {
    /// <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    #[doc(hidden)]
    pub next_page_token: std::option::Option<std::string::String>,
    /// <p>The tags that match your request.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The number of query results that Amazon Web Services returns at a time.</p>
    #[doc(hidden)]
    pub return_size: std::option::Option<i32>,
    /// <p>The total number of query results.</p>
    #[doc(hidden)]
    pub total_size: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetTagsOutput {
    /// <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn next_page_token(&self) -> std::option::Option<&str> {
        self.next_page_token.as_deref()
    }
    /// <p>The tags that match your request.</p>
    pub fn tags(&self) -> std::option::Option<&[std::string::String]> {
        self.tags.as_deref()
    }
    /// <p>The number of query results that Amazon Web Services returns at a time.</p>
    pub fn return_size(&self) -> std::option::Option<i32> {
        self.return_size
    }
    /// <p>The total number of query results.</p>
    pub fn total_size(&self) -> std::option::Option<i32> {
        self.total_size
    }
}
impl aws_http::request_id::RequestId for GetTagsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTagsOutput {
    /// Creates a new builder-style object to manufacture [`GetTagsOutput`](crate::operation::get_tags::GetTagsOutput).
    pub fn builder() -> crate::operation::get_tags::builders::GetTagsOutputBuilder {
        crate::operation::get_tags::builders::GetTagsOutputBuilder::default()
    }
}

/// A builder for [`GetTagsOutput`](crate::operation::get_tags::GetTagsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetTagsOutputBuilder {
    pub(crate) next_page_token: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) return_size: std::option::Option<i32>,
    pub(crate) total_size: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetTagsOutputBuilder {
    /// <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn next_page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_page_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn set_next_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_page_token = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that match your request.</p>
    pub fn tags(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input.into());
        self.tags = Some(v);
        self
    }
    /// <p>The tags that match your request.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The number of query results that Amazon Web Services returns at a time.</p>
    pub fn return_size(mut self, input: i32) -> Self {
        self.return_size = Some(input);
        self
    }
    /// <p>The number of query results that Amazon Web Services returns at a time.</p>
    pub fn set_return_size(mut self, input: std::option::Option<i32>) -> Self {
        self.return_size = input;
        self
    }
    /// <p>The total number of query results.</p>
    pub fn total_size(mut self, input: i32) -> Self {
        self.total_size = Some(input);
        self
    }
    /// <p>The total number of query results.</p>
    pub fn set_total_size(mut self, input: std::option::Option<i32>) -> Self {
        self.total_size = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTagsOutput`](crate::operation::get_tags::GetTagsOutput).
    pub fn build(self) -> crate::operation::get_tags::GetTagsOutput {
        crate::operation::get_tags::GetTagsOutput {
            next_page_token: self.next_page_token,
            tags: self.tags,
            return_size: self.return_size,
            total_size: self.total_size,
            _request_id: self._request_id,
        }
    }
}
