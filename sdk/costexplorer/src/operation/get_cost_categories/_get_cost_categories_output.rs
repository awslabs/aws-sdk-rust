// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCostCategoriesOutput {
    /// <p>If the number of objects that are still available for retrieval exceeds the quota, Amazon Web Services returns a NextPageToken value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    pub next_page_token: ::std::option::Option<::std::string::String>,
    /// <p>The names of the Cost Categories.</p>
    pub cost_category_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Cost Category values.</p>
    /// <p>If the <code>CostCategoryName</code> key isn't specified in the request, the <code>CostCategoryValues</code> fields aren't returned. </p>
    pub cost_category_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The number of objects that are returned.</p>
    pub return_size: i32,
    /// <p>The total number of objects.</p>
    pub total_size: i32,
    _request_id: Option<String>,
}
impl GetCostCategoriesOutput {
    /// <p>If the number of objects that are still available for retrieval exceeds the quota, Amazon Web Services returns a NextPageToken value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    pub fn next_page_token(&self) -> ::std::option::Option<&str> {
        self.next_page_token.as_deref()
    }
    /// <p>The names of the Cost Categories.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cost_category_names.is_none()`.
    pub fn cost_category_names(&self) -> &[::std::string::String] {
        self.cost_category_names.as_deref().unwrap_or_default()
    }
    /// <p>The Cost Category values.</p>
    /// <p>If the <code>CostCategoryName</code> key isn't specified in the request, the <code>CostCategoryValues</code> fields aren't returned. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cost_category_values.is_none()`.
    pub fn cost_category_values(&self) -> &[::std::string::String] {
        self.cost_category_values.as_deref().unwrap_or_default()
    }
    /// <p>The number of objects that are returned.</p>
    pub fn return_size(&self) -> i32 {
        self.return_size
    }
    /// <p>The total number of objects.</p>
    pub fn total_size(&self) -> i32 {
        self.total_size
    }
}
impl ::aws_http::request_id::RequestId for GetCostCategoriesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCostCategoriesOutput {
    /// Creates a new builder-style object to manufacture [`GetCostCategoriesOutput`](crate::operation::get_cost_categories::GetCostCategoriesOutput).
    pub fn builder() -> crate::operation::get_cost_categories::builders::GetCostCategoriesOutputBuilder {
        crate::operation::get_cost_categories::builders::GetCostCategoriesOutputBuilder::default()
    }
}

/// A builder for [`GetCostCategoriesOutput`](crate::operation::get_cost_categories::GetCostCategoriesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetCostCategoriesOutputBuilder {
    pub(crate) next_page_token: ::std::option::Option<::std::string::String>,
    pub(crate) cost_category_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) cost_category_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) return_size: ::std::option::Option<i32>,
    pub(crate) total_size: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetCostCategoriesOutputBuilder {
    /// <p>If the number of objects that are still available for retrieval exceeds the quota, Amazon Web Services returns a NextPageToken value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    pub fn next_page_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_page_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the number of objects that are still available for retrieval exceeds the quota, Amazon Web Services returns a NextPageToken value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    pub fn set_next_page_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_page_token = input;
        self
    }
    /// <p>If the number of objects that are still available for retrieval exceeds the quota, Amazon Web Services returns a NextPageToken value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    pub fn get_next_page_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_page_token
    }
    /// Appends an item to `cost_category_names`.
    ///
    /// To override the contents of this collection use [`set_cost_category_names`](Self::set_cost_category_names).
    ///
    /// <p>The names of the Cost Categories.</p>
    pub fn cost_category_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cost_category_names.unwrap_or_default();
        v.push(input.into());
        self.cost_category_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of the Cost Categories.</p>
    pub fn set_cost_category_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cost_category_names = input;
        self
    }
    /// <p>The names of the Cost Categories.</p>
    pub fn get_cost_category_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cost_category_names
    }
    /// Appends an item to `cost_category_values`.
    ///
    /// To override the contents of this collection use [`set_cost_category_values`](Self::set_cost_category_values).
    ///
    /// <p>The Cost Category values.</p>
    /// <p>If the <code>CostCategoryName</code> key isn't specified in the request, the <code>CostCategoryValues</code> fields aren't returned. </p>
    pub fn cost_category_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cost_category_values.unwrap_or_default();
        v.push(input.into());
        self.cost_category_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Cost Category values.</p>
    /// <p>If the <code>CostCategoryName</code> key isn't specified in the request, the <code>CostCategoryValues</code> fields aren't returned. </p>
    pub fn set_cost_category_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cost_category_values = input;
        self
    }
    /// <p>The Cost Category values.</p>
    /// <p>If the <code>CostCategoryName</code> key isn't specified in the request, the <code>CostCategoryValues</code> fields aren't returned. </p>
    pub fn get_cost_category_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cost_category_values
    }
    /// <p>The number of objects that are returned.</p>
    /// This field is required.
    pub fn return_size(mut self, input: i32) -> Self {
        self.return_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of objects that are returned.</p>
    pub fn set_return_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.return_size = input;
        self
    }
    /// <p>The number of objects that are returned.</p>
    pub fn get_return_size(&self) -> &::std::option::Option<i32> {
        &self.return_size
    }
    /// <p>The total number of objects.</p>
    /// This field is required.
    pub fn total_size(mut self, input: i32) -> Self {
        self.total_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of objects.</p>
    pub fn set_total_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_size = input;
        self
    }
    /// <p>The total number of objects.</p>
    pub fn get_total_size(&self) -> &::std::option::Option<i32> {
        &self.total_size
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCostCategoriesOutput`](crate::operation::get_cost_categories::GetCostCategoriesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`return_size`](crate::operation::get_cost_categories::builders::GetCostCategoriesOutputBuilder::return_size)
    /// - [`total_size`](crate::operation::get_cost_categories::builders::GetCostCategoriesOutputBuilder::total_size)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_cost_categories::GetCostCategoriesOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_cost_categories::GetCostCategoriesOutput {
            next_page_token: self.next_page_token,
            cost_category_names: self.cost_category_names,
            cost_category_values: self.cost_category_values,
            return_size: self.return_size.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "return_size",
                    "return_size was not specified but it is required when building GetCostCategoriesOutput",
                )
            })?,
            total_size: self.total_size.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "total_size",
                    "total_size was not specified but it is required when building GetCostCategoriesOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
