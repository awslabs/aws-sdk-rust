// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSavingsPlansCoverageInput {
    /// <p>The time period that you want the usage and costs for. The <code>Start</code> date must be within 13 months. The <code>End</code> date must be after the <code>Start</code> date, and before the current date. Future dates can't be used as an <code>End</code> date.</p>
    #[doc(hidden)]
    pub time_period: std::option::Option<crate::types::DateInterval>,
    /// <p>You can group the data using the attributes <code>INSTANCE_FAMILY</code>, <code>REGION</code>, or <code>SERVICE</code>.</p>
    #[doc(hidden)]
    pub group_by: std::option::Option<std::vec::Vec<crate::types::GroupDefinition>>,
    /// <p>The granularity of the Amazon Web Services cost data for your Savings Plans. <code>Granularity</code> can't be set if <code>GroupBy</code> is set.</p>
    /// <p>The <code>GetSavingsPlansCoverage</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    #[doc(hidden)]
    pub granularity: std::option::Option<crate::types::Granularity>,
    /// <p>Filters Savings Plans coverage data by dimensions. You can filter data for Savings Plans usage with the following dimensions:</p>
    /// <ul>
    /// <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>
    /// <li> <p> <code>REGION</code> </p> </li>
    /// <li> <p> <code>SERVICE</code> </p> </li>
    /// <li> <p> <code>INSTANCE_FAMILY</code> </p> </li>
    /// </ul>
    /// <p> <code>GetSavingsPlansCoverage</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension. If there are multiple values for a dimension, they are OR'd together.</p>
    /// <p>Cost category is also supported.</p>
    #[doc(hidden)]
    pub filter: std::option::Option<crate::types::Expression>,
    /// <p>The measurement that you want your Savings Plans coverage reported in. The only valid value is <code>SpendCoveredBySavingsPlans</code>.</p>
    #[doc(hidden)]
    pub metrics: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The number of items to be returned in a response. The default is <code>20</code>, with a minimum value of <code>1</code>.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The value that you want to sort the data by.</p>
    /// <p>The following values are supported for <code>Key</code>:</p>
    /// <ul>
    /// <li> <p> <code>SpendCoveredBySavingsPlan</code> </p> </li>
    /// <li> <p> <code>OnDemandCost</code> </p> </li>
    /// <li> <p> <code>CoveragePercentage</code> </p> </li>
    /// <li> <p> <code>TotalCost</code> </p> </li>
    /// <li> <p> <code>InstanceFamily</code> </p> </li>
    /// <li> <p> <code>Region</code> </p> </li>
    /// <li> <p> <code>Service</code> </p> </li>
    /// </ul>
    /// <p>The supported values for <code>SortOrder</code> are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::SortDefinition>,
}
impl GetSavingsPlansCoverageInput {
    /// <p>The time period that you want the usage and costs for. The <code>Start</code> date must be within 13 months. The <code>End</code> date must be after the <code>Start</code> date, and before the current date. Future dates can't be used as an <code>End</code> date.</p>
    pub fn time_period(&self) -> std::option::Option<&crate::types::DateInterval> {
        self.time_period.as_ref()
    }
    /// <p>You can group the data using the attributes <code>INSTANCE_FAMILY</code>, <code>REGION</code>, or <code>SERVICE</code>.</p>
    pub fn group_by(&self) -> std::option::Option<&[crate::types::GroupDefinition]> {
        self.group_by.as_deref()
    }
    /// <p>The granularity of the Amazon Web Services cost data for your Savings Plans. <code>Granularity</code> can't be set if <code>GroupBy</code> is set.</p>
    /// <p>The <code>GetSavingsPlansCoverage</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn granularity(&self) -> std::option::Option<&crate::types::Granularity> {
        self.granularity.as_ref()
    }
    /// <p>Filters Savings Plans coverage data by dimensions. You can filter data for Savings Plans usage with the following dimensions:</p>
    /// <ul>
    /// <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>
    /// <li> <p> <code>REGION</code> </p> </li>
    /// <li> <p> <code>SERVICE</code> </p> </li>
    /// <li> <p> <code>INSTANCE_FAMILY</code> </p> </li>
    /// </ul>
    /// <p> <code>GetSavingsPlansCoverage</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension. If there are multiple values for a dimension, they are OR'd together.</p>
    /// <p>Cost category is also supported.</p>
    pub fn filter(&self) -> std::option::Option<&crate::types::Expression> {
        self.filter.as_ref()
    }
    /// <p>The measurement that you want your Savings Plans coverage reported in. The only valid value is <code>SpendCoveredBySavingsPlans</code>.</p>
    pub fn metrics(&self) -> std::option::Option<&[std::string::String]> {
        self.metrics.as_deref()
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The number of items to be returned in a response. The default is <code>20</code>, with a minimum value of <code>1</code>.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The value that you want to sort the data by.</p>
    /// <p>The following values are supported for <code>Key</code>:</p>
    /// <ul>
    /// <li> <p> <code>SpendCoveredBySavingsPlan</code> </p> </li>
    /// <li> <p> <code>OnDemandCost</code> </p> </li>
    /// <li> <p> <code>CoveragePercentage</code> </p> </li>
    /// <li> <p> <code>TotalCost</code> </p> </li>
    /// <li> <p> <code>InstanceFamily</code> </p> </li>
    /// <li> <p> <code>Region</code> </p> </li>
    /// <li> <p> <code>Service</code> </p> </li>
    /// </ul>
    /// <p>The supported values for <code>SortOrder</code> are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::SortDefinition> {
        self.sort_by.as_ref()
    }
}
impl GetSavingsPlansCoverageInput {
    /// Creates a new builder-style object to manufacture [`GetSavingsPlansCoverageInput`](crate::operation::get_savings_plans_coverage::GetSavingsPlansCoverageInput).
    pub fn builder(
    ) -> crate::operation::get_savings_plans_coverage::builders::GetSavingsPlansCoverageInputBuilder
    {
        crate::operation::get_savings_plans_coverage::builders::GetSavingsPlansCoverageInputBuilder::default()
    }
}

/// A builder for [`GetSavingsPlansCoverageInput`](crate::operation::get_savings_plans_coverage::GetSavingsPlansCoverageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSavingsPlansCoverageInputBuilder {
    pub(crate) time_period: std::option::Option<crate::types::DateInterval>,
    pub(crate) group_by: std::option::Option<std::vec::Vec<crate::types::GroupDefinition>>,
    pub(crate) granularity: std::option::Option<crate::types::Granularity>,
    pub(crate) filter: std::option::Option<crate::types::Expression>,
    pub(crate) metrics: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) sort_by: std::option::Option<crate::types::SortDefinition>,
}
impl GetSavingsPlansCoverageInputBuilder {
    /// <p>The time period that you want the usage and costs for. The <code>Start</code> date must be within 13 months. The <code>End</code> date must be after the <code>Start</code> date, and before the current date. Future dates can't be used as an <code>End</code> date.</p>
    pub fn time_period(mut self, input: crate::types::DateInterval) -> Self {
        self.time_period = Some(input);
        self
    }
    /// <p>The time period that you want the usage and costs for. The <code>Start</code> date must be within 13 months. The <code>End</code> date must be after the <code>Start</code> date, and before the current date. Future dates can't be used as an <code>End</code> date.</p>
    pub fn set_time_period(
        mut self,
        input: std::option::Option<crate::types::DateInterval>,
    ) -> Self {
        self.time_period = input;
        self
    }
    /// Appends an item to `group_by`.
    ///
    /// To override the contents of this collection use [`set_group_by`](Self::set_group_by).
    ///
    /// <p>You can group the data using the attributes <code>INSTANCE_FAMILY</code>, <code>REGION</code>, or <code>SERVICE</code>.</p>
    pub fn group_by(mut self, input: crate::types::GroupDefinition) -> Self {
        let mut v = self.group_by.unwrap_or_default();
        v.push(input);
        self.group_by = Some(v);
        self
    }
    /// <p>You can group the data using the attributes <code>INSTANCE_FAMILY</code>, <code>REGION</code>, or <code>SERVICE</code>.</p>
    pub fn set_group_by(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GroupDefinition>>,
    ) -> Self {
        self.group_by = input;
        self
    }
    /// <p>The granularity of the Amazon Web Services cost data for your Savings Plans. <code>Granularity</code> can't be set if <code>GroupBy</code> is set.</p>
    /// <p>The <code>GetSavingsPlansCoverage</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn granularity(mut self, input: crate::types::Granularity) -> Self {
        self.granularity = Some(input);
        self
    }
    /// <p>The granularity of the Amazon Web Services cost data for your Savings Plans. <code>Granularity</code> can't be set if <code>GroupBy</code> is set.</p>
    /// <p>The <code>GetSavingsPlansCoverage</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn set_granularity(
        mut self,
        input: std::option::Option<crate::types::Granularity>,
    ) -> Self {
        self.granularity = input;
        self
    }
    /// <p>Filters Savings Plans coverage data by dimensions. You can filter data for Savings Plans usage with the following dimensions:</p>
    /// <ul>
    /// <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>
    /// <li> <p> <code>REGION</code> </p> </li>
    /// <li> <p> <code>SERVICE</code> </p> </li>
    /// <li> <p> <code>INSTANCE_FAMILY</code> </p> </li>
    /// </ul>
    /// <p> <code>GetSavingsPlansCoverage</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension. If there are multiple values for a dimension, they are OR'd together.</p>
    /// <p>Cost category is also supported.</p>
    pub fn filter(mut self, input: crate::types::Expression) -> Self {
        self.filter = Some(input);
        self
    }
    /// <p>Filters Savings Plans coverage data by dimensions. You can filter data for Savings Plans usage with the following dimensions:</p>
    /// <ul>
    /// <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>
    /// <li> <p> <code>REGION</code> </p> </li>
    /// <li> <p> <code>SERVICE</code> </p> </li>
    /// <li> <p> <code>INSTANCE_FAMILY</code> </p> </li>
    /// </ul>
    /// <p> <code>GetSavingsPlansCoverage</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension. If there are multiple values for a dimension, they are OR'd together.</p>
    /// <p>Cost category is also supported.</p>
    pub fn set_filter(mut self, input: std::option::Option<crate::types::Expression>) -> Self {
        self.filter = input;
        self
    }
    /// Appends an item to `metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>The measurement that you want your Savings Plans coverage reported in. The only valid value is <code>SpendCoveredBySavingsPlans</code>.</p>
    pub fn metrics(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.metrics.unwrap_or_default();
        v.push(input.into());
        self.metrics = Some(v);
        self
    }
    /// <p>The measurement that you want your Savings Plans coverage reported in. The only valid value is <code>SpendCoveredBySavingsPlans</code>.</p>
    pub fn set_metrics(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.metrics = input;
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The number of items to be returned in a response. The default is <code>20</code>, with a minimum value of <code>1</code>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The number of items to be returned in a response. The default is <code>20</code>, with a minimum value of <code>1</code>.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The value that you want to sort the data by.</p>
    /// <p>The following values are supported for <code>Key</code>:</p>
    /// <ul>
    /// <li> <p> <code>SpendCoveredBySavingsPlan</code> </p> </li>
    /// <li> <p> <code>OnDemandCost</code> </p> </li>
    /// <li> <p> <code>CoveragePercentage</code> </p> </li>
    /// <li> <p> <code>TotalCost</code> </p> </li>
    /// <li> <p> <code>InstanceFamily</code> </p> </li>
    /// <li> <p> <code>Region</code> </p> </li>
    /// <li> <p> <code>Service</code> </p> </li>
    /// </ul>
    /// <p>The supported values for <code>SortOrder</code> are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>
    pub fn sort_by(mut self, input: crate::types::SortDefinition) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p>The value that you want to sort the data by.</p>
    /// <p>The following values are supported for <code>Key</code>:</p>
    /// <ul>
    /// <li> <p> <code>SpendCoveredBySavingsPlan</code> </p> </li>
    /// <li> <p> <code>OnDemandCost</code> </p> </li>
    /// <li> <p> <code>CoveragePercentage</code> </p> </li>
    /// <li> <p> <code>TotalCost</code> </p> </li>
    /// <li> <p> <code>InstanceFamily</code> </p> </li>
    /// <li> <p> <code>Region</code> </p> </li>
    /// <li> <p> <code>Service</code> </p> </li>
    /// </ul>
    /// <p>The supported values for <code>SortOrder</code> are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>
    pub fn set_sort_by(mut self, input: std::option::Option<crate::types::SortDefinition>) -> Self {
        self.sort_by = input;
        self
    }
    /// Consumes the builder and constructs a [`GetSavingsPlansCoverageInput`](crate::operation::get_savings_plans_coverage::GetSavingsPlansCoverageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_savings_plans_coverage::GetSavingsPlansCoverageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_savings_plans_coverage::GetSavingsPlansCoverageInput {
                time_period: self.time_period,
                group_by: self.group_by,
                granularity: self.granularity,
                filter: self.filter,
                metrics: self.metrics,
                next_token: self.next_token,
                max_results: self.max_results,
                sort_by: self.sort_by,
            },
        )
    }
}
