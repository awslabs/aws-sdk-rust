// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_reservation_coverage::_get_reservation_coverage_output::GetReservationCoverageOutputBuilder;

pub use crate::operation::get_reservation_coverage::_get_reservation_coverage_input::GetReservationCoverageInputBuilder;

impl crate::operation::get_reservation_coverage::builders::GetReservationCoverageInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_reservation_coverage::GetReservationCoverageOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_reservation_coverage::GetReservationCoverageError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_reservation_coverage();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetReservationCoverage`.
///
/// <p>Retrieves the reservation coverage for your account, which you can use to see how much of your Amazon Elastic Compute Cloud, Amazon ElastiCache, Amazon Relational Database Service, or Amazon Redshift usage is covered by a reservation. An organization's management account can see the coverage of the associated member accounts. This supports dimensions, Cost Categories, and nested expressions. For any time period, you can filter data about reservation usage by the following dimensions:</p>
/// <ul>
/// <li>
/// <p>AZ</p></li>
/// <li>
/// <p>CACHE_ENGINE</p></li>
/// <li>
/// <p>DATABASE_ENGINE</p></li>
/// <li>
/// <p>DEPLOYMENT_OPTION</p></li>
/// <li>
/// <p>INSTANCE_TYPE</p></li>
/// <li>
/// <p>LINKED_ACCOUNT</p></li>
/// <li>
/// <p>OPERATING_SYSTEM</p></li>
/// <li>
/// <p>PLATFORM</p></li>
/// <li>
/// <p>REGION</p></li>
/// <li>
/// <p>SERVICE</p></li>
/// <li>
/// <p>TAG</p></li>
/// <li>
/// <p>TENANCY</p></li>
/// </ul>
/// <p>To determine valid values for a dimension, use the <code>GetDimensionValues</code> operation.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetReservationCoverageFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_reservation_coverage::builders::GetReservationCoverageInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_reservation_coverage::GetReservationCoverageOutput,
        crate::operation::get_reservation_coverage::GetReservationCoverageError,
    > for GetReservationCoverageFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_reservation_coverage::GetReservationCoverageOutput,
            crate::operation::get_reservation_coverage::GetReservationCoverageError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetReservationCoverageFluentBuilder {
    /// Creates a new `GetReservationCoverage`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetReservationCoverage as a reference.
    pub fn as_input(&self) -> &crate::operation::get_reservation_coverage::builders::GetReservationCoverageInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_reservation_coverage::GetReservationCoverageOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_reservation_coverage::GetReservationCoverageError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_reservation_coverage::GetReservationCoverage::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_reservation_coverage::GetReservationCoverage::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_reservation_coverage::GetReservationCoverageOutput,
        crate::operation::get_reservation_coverage::GetReservationCoverageError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The start and end dates of the period that you want to retrieve data about reservation coverage for. You can retrieve data for a maximum of 13 months: the last 12 months and the current month. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.</p>
    pub fn time_period(mut self, input: crate::types::DateInterval) -> Self {
        self.inner = self.inner.time_period(input);
        self
    }
    /// <p>The start and end dates of the period that you want to retrieve data about reservation coverage for. You can retrieve data for a maximum of 13 months: the last 12 months and the current month. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.</p>
    pub fn set_time_period(mut self, input: ::std::option::Option<crate::types::DateInterval>) -> Self {
        self.inner = self.inner.set_time_period(input);
        self
    }
    /// <p>The start and end dates of the period that you want to retrieve data about reservation coverage for. You can retrieve data for a maximum of 13 months: the last 12 months and the current month. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.</p>
    pub fn get_time_period(&self) -> &::std::option::Option<crate::types::DateInterval> {
        self.inner.get_time_period()
    }
    ///
    /// Appends an item to `GroupBy`.
    ///
    /// To override the contents of this collection use [`set_group_by`](Self::set_group_by).
    ///
    /// <p>You can group the data by the following attributes:</p>
    /// <ul>
    /// <li>
    /// <p>AZ</p></li>
    /// <li>
    /// <p>CACHE_ENGINE</p></li>
    /// <li>
    /// <p>DATABASE_ENGINE</p></li>
    /// <li>
    /// <p>DEPLOYMENT_OPTION</p></li>
    /// <li>
    /// <p>INSTANCE_TYPE</p></li>
    /// <li>
    /// <p>INVOICING_ENTITY</p></li>
    /// <li>
    /// <p>LINKED_ACCOUNT</p></li>
    /// <li>
    /// <p>OPERATING_SYSTEM</p></li>
    /// <li>
    /// <p>PLATFORM</p></li>
    /// <li>
    /// <p>REGION</p></li>
    /// <li>
    /// <p>TENANCY</p></li>
    /// </ul>
    pub fn group_by(mut self, input: crate::types::GroupDefinition) -> Self {
        self.inner = self.inner.group_by(input);
        self
    }
    /// <p>You can group the data by the following attributes:</p>
    /// <ul>
    /// <li>
    /// <p>AZ</p></li>
    /// <li>
    /// <p>CACHE_ENGINE</p></li>
    /// <li>
    /// <p>DATABASE_ENGINE</p></li>
    /// <li>
    /// <p>DEPLOYMENT_OPTION</p></li>
    /// <li>
    /// <p>INSTANCE_TYPE</p></li>
    /// <li>
    /// <p>INVOICING_ENTITY</p></li>
    /// <li>
    /// <p>LINKED_ACCOUNT</p></li>
    /// <li>
    /// <p>OPERATING_SYSTEM</p></li>
    /// <li>
    /// <p>PLATFORM</p></li>
    /// <li>
    /// <p>REGION</p></li>
    /// <li>
    /// <p>TENANCY</p></li>
    /// </ul>
    pub fn set_group_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GroupDefinition>>) -> Self {
        self.inner = self.inner.set_group_by(input);
        self
    }
    /// <p>You can group the data by the following attributes:</p>
    /// <ul>
    /// <li>
    /// <p>AZ</p></li>
    /// <li>
    /// <p>CACHE_ENGINE</p></li>
    /// <li>
    /// <p>DATABASE_ENGINE</p></li>
    /// <li>
    /// <p>DEPLOYMENT_OPTION</p></li>
    /// <li>
    /// <p>INSTANCE_TYPE</p></li>
    /// <li>
    /// <p>INVOICING_ENTITY</p></li>
    /// <li>
    /// <p>LINKED_ACCOUNT</p></li>
    /// <li>
    /// <p>OPERATING_SYSTEM</p></li>
    /// <li>
    /// <p>PLATFORM</p></li>
    /// <li>
    /// <p>REGION</p></li>
    /// <li>
    /// <p>TENANCY</p></li>
    /// </ul>
    pub fn get_group_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GroupDefinition>> {
        self.inner.get_group_by()
    }
    /// <p>The granularity of the Amazon Web Services cost data for the reservation. Valid values are <code>MONTHLY</code> and <code>DAILY</code>.</p>
    /// <p>If <code>GroupBy</code> is set, <code>Granularity</code> can't be set. If <code>Granularity</code> isn't set, the response object doesn't include <code>Granularity</code>, either <code>MONTHLY</code> or <code>DAILY</code>.</p>
    /// <p>The <code>GetReservationCoverage</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn granularity(mut self, input: crate::types::Granularity) -> Self {
        self.inner = self.inner.granularity(input);
        self
    }
    /// <p>The granularity of the Amazon Web Services cost data for the reservation. Valid values are <code>MONTHLY</code> and <code>DAILY</code>.</p>
    /// <p>If <code>GroupBy</code> is set, <code>Granularity</code> can't be set. If <code>Granularity</code> isn't set, the response object doesn't include <code>Granularity</code>, either <code>MONTHLY</code> or <code>DAILY</code>.</p>
    /// <p>The <code>GetReservationCoverage</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn set_granularity(mut self, input: ::std::option::Option<crate::types::Granularity>) -> Self {
        self.inner = self.inner.set_granularity(input);
        self
    }
    /// <p>The granularity of the Amazon Web Services cost data for the reservation. Valid values are <code>MONTHLY</code> and <code>DAILY</code>.</p>
    /// <p>If <code>GroupBy</code> is set, <code>Granularity</code> can't be set. If <code>Granularity</code> isn't set, the response object doesn't include <code>Granularity</code>, either <code>MONTHLY</code> or <code>DAILY</code>.</p>
    /// <p>The <code>GetReservationCoverage</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn get_granularity(&self) -> &::std::option::Option<crate::types::Granularity> {
        self.inner.get_granularity()
    }
    /// <p>Filters utilization data by dimensions. You can filter by the following dimensions:</p>
    /// <ul>
    /// <li>
    /// <p>AZ</p></li>
    /// <li>
    /// <p>CACHE_ENGINE</p></li>
    /// <li>
    /// <p>DATABASE_ENGINE</p></li>
    /// <li>
    /// <p>DEPLOYMENT_OPTION</p></li>
    /// <li>
    /// <p>INSTANCE_TYPE</p></li>
    /// <li>
    /// <p>LINKED_ACCOUNT</p></li>
    /// <li>
    /// <p>OPERATING_SYSTEM</p></li>
    /// <li>
    /// <p>PLATFORM</p></li>
    /// <li>
    /// <p>REGION</p></li>
    /// <li>
    /// <p>SERVICE</p></li>
    /// <li>
    /// <p>TAG</p></li>
    /// <li>
    /// <p>TENANCY</p></li>
    /// </ul>
    /// <p><code>GetReservationCoverage</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension. You can nest only one level deep. If there are multiple values for a dimension, they are OR'd together.</p>
    /// <p>If you don't provide a <code>SERVICE</code> filter, Cost Explorer defaults to EC2.</p>
    /// <p>Cost category is also supported.</p>
    pub fn filter(mut self, input: crate::types::Expression) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>Filters utilization data by dimensions. You can filter by the following dimensions:</p>
    /// <ul>
    /// <li>
    /// <p>AZ</p></li>
    /// <li>
    /// <p>CACHE_ENGINE</p></li>
    /// <li>
    /// <p>DATABASE_ENGINE</p></li>
    /// <li>
    /// <p>DEPLOYMENT_OPTION</p></li>
    /// <li>
    /// <p>INSTANCE_TYPE</p></li>
    /// <li>
    /// <p>LINKED_ACCOUNT</p></li>
    /// <li>
    /// <p>OPERATING_SYSTEM</p></li>
    /// <li>
    /// <p>PLATFORM</p></li>
    /// <li>
    /// <p>REGION</p></li>
    /// <li>
    /// <p>SERVICE</p></li>
    /// <li>
    /// <p>TAG</p></li>
    /// <li>
    /// <p>TENANCY</p></li>
    /// </ul>
    /// <p><code>GetReservationCoverage</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension. You can nest only one level deep. If there are multiple values for a dimension, they are OR'd together.</p>
    /// <p>If you don't provide a <code>SERVICE</code> filter, Cost Explorer defaults to EC2.</p>
    /// <p>Cost category is also supported.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::Expression>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
    /// <p>Filters utilization data by dimensions. You can filter by the following dimensions:</p>
    /// <ul>
    /// <li>
    /// <p>AZ</p></li>
    /// <li>
    /// <p>CACHE_ENGINE</p></li>
    /// <li>
    /// <p>DATABASE_ENGINE</p></li>
    /// <li>
    /// <p>DEPLOYMENT_OPTION</p></li>
    /// <li>
    /// <p>INSTANCE_TYPE</p></li>
    /// <li>
    /// <p>LINKED_ACCOUNT</p></li>
    /// <li>
    /// <p>OPERATING_SYSTEM</p></li>
    /// <li>
    /// <p>PLATFORM</p></li>
    /// <li>
    /// <p>REGION</p></li>
    /// <li>
    /// <p>SERVICE</p></li>
    /// <li>
    /// <p>TAG</p></li>
    /// <li>
    /// <p>TENANCY</p></li>
    /// </ul>
    /// <p><code>GetReservationCoverage</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension. You can nest only one level deep. If there are multiple values for a dimension, they are OR'd together.</p>
    /// <p>If you don't provide a <code>SERVICE</code> filter, Cost Explorer defaults to EC2.</p>
    /// <p>Cost category is also supported.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::Expression> {
        self.inner.get_filter()
    }
    ///
    /// Appends an item to `Metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>The measurement that you want your reservation coverage reported in.</p>
    /// <p>Valid values are <code>Hour</code>, <code>Unit</code>, and <code>Cost</code>. You can use multiple values in a request.</p>
    pub fn metrics(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.metrics(input.into());
        self
    }
    /// <p>The measurement that you want your reservation coverage reported in.</p>
    /// <p>Valid values are <code>Hour</code>, <code>Unit</code>, and <code>Cost</code>. You can use multiple values in a request.</p>
    pub fn set_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_metrics(input);
        self
    }
    /// <p>The measurement that you want your reservation coverage reported in.</p>
    /// <p>Valid values are <code>Hour</code>, <code>Unit</code>, and <code>Cost</code>. You can use multiple values in a request.</p>
    pub fn get_metrics(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_metrics()
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn next_page_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_page_token(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn set_next_page_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_page_token(input);
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn get_next_page_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_page_token()
    }
    /// <p>The value by which you want to sort the data.</p>
    /// <p>The following values are supported for <code>Key</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>OnDemandCost</code></p></li>
    /// <li>
    /// <p><code>CoverageHoursPercentage</code></p></li>
    /// <li>
    /// <p><code>OnDemandHours</code></p></li>
    /// <li>
    /// <p><code>ReservedHours</code></p></li>
    /// <li>
    /// <p><code>TotalRunningHours</code></p></li>
    /// <li>
    /// <p><code>CoverageNormalizedUnitsPercentage</code></p></li>
    /// <li>
    /// <p><code>OnDemandNormalizedUnits</code></p></li>
    /// <li>
    /// <p><code>ReservedNormalizedUnits</code></p></li>
    /// <li>
    /// <p><code>TotalRunningNormalizedUnits</code></p></li>
    /// <li>
    /// <p><code>Time</code></p></li>
    /// </ul>
    /// <p>Supported values for <code>SortOrder</code> are <code>ASCENDING</code> or <code>DESCENDING</code>.</p>
    pub fn sort_by(mut self, input: crate::types::SortDefinition) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The value by which you want to sort the data.</p>
    /// <p>The following values are supported for <code>Key</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>OnDemandCost</code></p></li>
    /// <li>
    /// <p><code>CoverageHoursPercentage</code></p></li>
    /// <li>
    /// <p><code>OnDemandHours</code></p></li>
    /// <li>
    /// <p><code>ReservedHours</code></p></li>
    /// <li>
    /// <p><code>TotalRunningHours</code></p></li>
    /// <li>
    /// <p><code>CoverageNormalizedUnitsPercentage</code></p></li>
    /// <li>
    /// <p><code>OnDemandNormalizedUnits</code></p></li>
    /// <li>
    /// <p><code>ReservedNormalizedUnits</code></p></li>
    /// <li>
    /// <p><code>TotalRunningNormalizedUnits</code></p></li>
    /// <li>
    /// <p><code>Time</code></p></li>
    /// </ul>
    /// <p>Supported values for <code>SortOrder</code> are <code>ASCENDING</code> or <code>DESCENDING</code>.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::SortDefinition>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The value by which you want to sort the data.</p>
    /// <p>The following values are supported for <code>Key</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>OnDemandCost</code></p></li>
    /// <li>
    /// <p><code>CoverageHoursPercentage</code></p></li>
    /// <li>
    /// <p><code>OnDemandHours</code></p></li>
    /// <li>
    /// <p><code>ReservedHours</code></p></li>
    /// <li>
    /// <p><code>TotalRunningHours</code></p></li>
    /// <li>
    /// <p><code>CoverageNormalizedUnitsPercentage</code></p></li>
    /// <li>
    /// <p><code>OnDemandNormalizedUnits</code></p></li>
    /// <li>
    /// <p><code>ReservedNormalizedUnits</code></p></li>
    /// <li>
    /// <p><code>TotalRunningNormalizedUnits</code></p></li>
    /// <li>
    /// <p><code>Time</code></p></li>
    /// </ul>
    /// <p>Supported values for <code>SortOrder</code> are <code>ASCENDING</code> or <code>DESCENDING</code>.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::SortDefinition> {
        self.inner.get_sort_by()
    }
    /// <p>The maximum number of objects that you returned for this request. If more objects are available, in the response, Amazon Web Services provides a NextPageToken value that you can use in a subsequent call to get the next batch of objects.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of objects that you returned for this request. If more objects are available, in the response, Amazon Web Services provides a NextPageToken value that you can use in a subsequent call to get the next batch of objects.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of objects that you returned for this request. If more objects are available, in the response, Amazon Web Services provides a NextPageToken value that you can use in a subsequent call to get the next batch of objects.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
