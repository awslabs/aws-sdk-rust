// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAnomalySubscriptionsOutput {
    /// <p>A list of cost anomaly subscriptions that includes the detailed metadata for each one. </p>
    pub anomaly_subscriptions: ::std::vec::Vec<crate::types::AnomalySubscription>,
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub next_page_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetAnomalySubscriptionsOutput {
    /// <p>A list of cost anomaly subscriptions that includes the detailed metadata for each one. </p>
    pub fn anomaly_subscriptions(&self) -> &[crate::types::AnomalySubscription] {
        use std::ops::Deref;
        self.anomaly_subscriptions.deref()
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn next_page_token(&self) -> ::std::option::Option<&str> {
        self.next_page_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetAnomalySubscriptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAnomalySubscriptionsOutput {
    /// Creates a new builder-style object to manufacture [`GetAnomalySubscriptionsOutput`](crate::operation::get_anomaly_subscriptions::GetAnomalySubscriptionsOutput).
    pub fn builder() -> crate::operation::get_anomaly_subscriptions::builders::GetAnomalySubscriptionsOutputBuilder {
        crate::operation::get_anomaly_subscriptions::builders::GetAnomalySubscriptionsOutputBuilder::default()
    }
}

/// A builder for [`GetAnomalySubscriptionsOutput`](crate::operation::get_anomaly_subscriptions::GetAnomalySubscriptionsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetAnomalySubscriptionsOutputBuilder {
    pub(crate) anomaly_subscriptions: ::std::option::Option<::std::vec::Vec<crate::types::AnomalySubscription>>,
    pub(crate) next_page_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetAnomalySubscriptionsOutputBuilder {
    /// Appends an item to `anomaly_subscriptions`.
    ///
    /// To override the contents of this collection use [`set_anomaly_subscriptions`](Self::set_anomaly_subscriptions).
    ///
    /// <p>A list of cost anomaly subscriptions that includes the detailed metadata for each one. </p>
    pub fn anomaly_subscriptions(mut self, input: crate::types::AnomalySubscription) -> Self {
        let mut v = self.anomaly_subscriptions.unwrap_or_default();
        v.push(input);
        self.anomaly_subscriptions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of cost anomaly subscriptions that includes the detailed metadata for each one. </p>
    pub fn set_anomaly_subscriptions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnomalySubscription>>) -> Self {
        self.anomaly_subscriptions = input;
        self
    }
    /// <p>A list of cost anomaly subscriptions that includes the detailed metadata for each one. </p>
    pub fn get_anomaly_subscriptions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnomalySubscription>> {
        &self.anomaly_subscriptions
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn next_page_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_page_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn set_next_page_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_page_token = input;
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn get_next_page_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_page_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAnomalySubscriptionsOutput`](crate::operation::get_anomaly_subscriptions::GetAnomalySubscriptionsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`anomaly_subscriptions`](crate::operation::get_anomaly_subscriptions::builders::GetAnomalySubscriptionsOutputBuilder::anomaly_subscriptions)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_anomaly_subscriptions::GetAnomalySubscriptionsOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_anomaly_subscriptions::GetAnomalySubscriptionsOutput {
            anomaly_subscriptions: self.anomaly_subscriptions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "anomaly_subscriptions",
                    "anomaly_subscriptions was not specified but it is required when building GetAnomalySubscriptionsOutput",
                )
            })?,
            next_page_token: self.next_page_token,
            _request_id: self._request_id,
        })
    }
}
