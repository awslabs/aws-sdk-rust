// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_savings_plans_utilization::_get_savings_plans_utilization_output::GetSavingsPlansUtilizationOutputBuilder;

pub use crate::operation::get_savings_plans_utilization::_get_savings_plans_utilization_input::GetSavingsPlansUtilizationInputBuilder;

impl GetSavingsPlansUtilizationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_savings_plans_utilization();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetSavingsPlansUtilization`.
///
/// <p>Retrieves the Savings Plans utilization for your account across date ranges with daily or monthly granularity. Management account in an organization have access to member accounts. You can use <code>GetDimensionValues</code> in <code>SAVINGS_PLANS</code> to determine the possible dimension values.</p> <note>
/// <p>You can't group by any dimension values for <code>GetSavingsPlansUtilization</code>.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetSavingsPlansUtilizationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_savings_plans_utilization::builders::GetSavingsPlansUtilizationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationOutput,
        crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationError,
    > for GetSavingsPlansUtilizationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationOutput,
            crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetSavingsPlansUtilizationFluentBuilder {
    /// Creates a new `GetSavingsPlansUtilization`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetSavingsPlansUtilization as a reference.
    pub fn as_input(&self) -> &crate::operation::get_savings_plans_utilization::builders::GetSavingsPlansUtilizationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilization::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilization::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationOutput,
        crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The time period that you want the usage and costs for. The <code>Start</code> date must be within 13 months. The <code>End</code> date must be after the <code>Start</code> date, and before the current date. Future dates can't be used as an <code>End</code> date.</p>
    pub fn time_period(mut self, input: crate::types::DateInterval) -> Self {
        self.inner = self.inner.time_period(input);
        self
    }
    /// <p>The time period that you want the usage and costs for. The <code>Start</code> date must be within 13 months. The <code>End</code> date must be after the <code>Start</code> date, and before the current date. Future dates can't be used as an <code>End</code> date.</p>
    pub fn set_time_period(mut self, input: ::std::option::Option<crate::types::DateInterval>) -> Self {
        self.inner = self.inner.set_time_period(input);
        self
    }
    /// <p>The time period that you want the usage and costs for. The <code>Start</code> date must be within 13 months. The <code>End</code> date must be after the <code>Start</code> date, and before the current date. Future dates can't be used as an <code>End</code> date.</p>
    pub fn get_time_period(&self) -> &::std::option::Option<crate::types::DateInterval> {
        self.inner.get_time_period()
    }
    /// <p>The granularity of the Amazon Web Services utillization data for your Savings Plans.</p>
    /// <p>The <code>GetSavingsPlansUtilization</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn granularity(mut self, input: crate::types::Granularity) -> Self {
        self.inner = self.inner.granularity(input);
        self
    }
    /// <p>The granularity of the Amazon Web Services utillization data for your Savings Plans.</p>
    /// <p>The <code>GetSavingsPlansUtilization</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn set_granularity(mut self, input: ::std::option::Option<crate::types::Granularity>) -> Self {
        self.inner = self.inner.set_granularity(input);
        self
    }
    /// <p>The granularity of the Amazon Web Services utillization data for your Savings Plans.</p>
    /// <p>The <code>GetSavingsPlansUtilization</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn get_granularity(&self) -> &::std::option::Option<crate::types::Granularity> {
        self.inner.get_granularity()
    }
    /// <p>Filters Savings Plans utilization coverage data for active Savings Plans dimensions. You can filter data with the following dimensions:</p>
    /// <ul>
    /// <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>
    /// <li> <p> <code>SAVINGS_PLAN_ARN</code> </p> </li>
    /// <li> <p> <code>SAVINGS_PLANS_TYPE</code> </p> </li>
    /// <li> <p> <code>REGION</code> </p> </li>
    /// <li> <p> <code>PAYMENT_OPTION</code> </p> </li>
    /// <li> <p> <code>INSTANCE_TYPE_FAMILY</code> </p> </li>
    /// </ul>
    /// <p> <code>GetSavingsPlansUtilization</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension.</p>
    pub fn filter(mut self, input: crate::types::Expression) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>Filters Savings Plans utilization coverage data for active Savings Plans dimensions. You can filter data with the following dimensions:</p>
    /// <ul>
    /// <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>
    /// <li> <p> <code>SAVINGS_PLAN_ARN</code> </p> </li>
    /// <li> <p> <code>SAVINGS_PLANS_TYPE</code> </p> </li>
    /// <li> <p> <code>REGION</code> </p> </li>
    /// <li> <p> <code>PAYMENT_OPTION</code> </p> </li>
    /// <li> <p> <code>INSTANCE_TYPE_FAMILY</code> </p> </li>
    /// </ul>
    /// <p> <code>GetSavingsPlansUtilization</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::Expression>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
    /// <p>Filters Savings Plans utilization coverage data for active Savings Plans dimensions. You can filter data with the following dimensions:</p>
    /// <ul>
    /// <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>
    /// <li> <p> <code>SAVINGS_PLAN_ARN</code> </p> </li>
    /// <li> <p> <code>SAVINGS_PLANS_TYPE</code> </p> </li>
    /// <li> <p> <code>REGION</code> </p> </li>
    /// <li> <p> <code>PAYMENT_OPTION</code> </p> </li>
    /// <li> <p> <code>INSTANCE_TYPE_FAMILY</code> </p> </li>
    /// </ul>
    /// <p> <code>GetSavingsPlansUtilization</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::Expression> {
        self.inner.get_filter()
    }
    /// <p>The value that you want to sort the data by.</p>
    /// <p>The following values are supported for <code>Key</code>:</p>
    /// <ul>
    /// <li> <p> <code>UtilizationPercentage</code> </p> </li>
    /// <li> <p> <code>TotalCommitment</code> </p> </li>
    /// <li> <p> <code>UsedCommitment</code> </p> </li>
    /// <li> <p> <code>UnusedCommitment</code> </p> </li>
    /// <li> <p> <code>NetSavings</code> </p> </li>
    /// </ul>
    /// <p>The supported values for <code>SortOrder</code> are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>
    pub fn sort_by(mut self, input: crate::types::SortDefinition) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The value that you want to sort the data by.</p>
    /// <p>The following values are supported for <code>Key</code>:</p>
    /// <ul>
    /// <li> <p> <code>UtilizationPercentage</code> </p> </li>
    /// <li> <p> <code>TotalCommitment</code> </p> </li>
    /// <li> <p> <code>UsedCommitment</code> </p> </li>
    /// <li> <p> <code>UnusedCommitment</code> </p> </li>
    /// <li> <p> <code>NetSavings</code> </p> </li>
    /// </ul>
    /// <p>The supported values for <code>SortOrder</code> are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::SortDefinition>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The value that you want to sort the data by.</p>
    /// <p>The following values are supported for <code>Key</code>:</p>
    /// <ul>
    /// <li> <p> <code>UtilizationPercentage</code> </p> </li>
    /// <li> <p> <code>TotalCommitment</code> </p> </li>
    /// <li> <p> <code>UsedCommitment</code> </p> </li>
    /// <li> <p> <code>UnusedCommitment</code> </p> </li>
    /// <li> <p> <code>NetSavings</code> </p> </li>
    /// </ul>
    /// <p>The supported values for <code>SortOrder</code> are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::SortDefinition> {
        self.inner.get_sort_by()
    }
}
