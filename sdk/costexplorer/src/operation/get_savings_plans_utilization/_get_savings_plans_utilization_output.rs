// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSavingsPlansUtilizationOutput {
    /// <p>The amount of cost/commitment that you used your Savings Plans. You can use it to specify date ranges.</p>
    pub savings_plans_utilizations_by_time: ::std::option::Option<::std::vec::Vec<crate::types::SavingsPlansUtilizationByTime>>,
    /// <p>The total amount of cost/commitment that you used your Savings Plans, regardless of date ranges.</p>
    pub total: ::std::option::Option<crate::types::SavingsPlansUtilizationAggregates>,
    _request_id: Option<String>,
}
impl GetSavingsPlansUtilizationOutput {
    /// <p>The amount of cost/commitment that you used your Savings Plans. You can use it to specify date ranges.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.savings_plans_utilizations_by_time.is_none()`.
    pub fn savings_plans_utilizations_by_time(&self) -> &[crate::types::SavingsPlansUtilizationByTime] {
        self.savings_plans_utilizations_by_time.as_deref().unwrap_or_default()
    }
    /// <p>The total amount of cost/commitment that you used your Savings Plans, regardless of date ranges.</p>
    pub fn total(&self) -> ::std::option::Option<&crate::types::SavingsPlansUtilizationAggregates> {
        self.total.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetSavingsPlansUtilizationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSavingsPlansUtilizationOutput {
    /// Creates a new builder-style object to manufacture [`GetSavingsPlansUtilizationOutput`](crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationOutput).
    pub fn builder() -> crate::operation::get_savings_plans_utilization::builders::GetSavingsPlansUtilizationOutputBuilder {
        crate::operation::get_savings_plans_utilization::builders::GetSavingsPlansUtilizationOutputBuilder::default()
    }
}

/// A builder for [`GetSavingsPlansUtilizationOutput`](crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetSavingsPlansUtilizationOutputBuilder {
    pub(crate) savings_plans_utilizations_by_time: ::std::option::Option<::std::vec::Vec<crate::types::SavingsPlansUtilizationByTime>>,
    pub(crate) total: ::std::option::Option<crate::types::SavingsPlansUtilizationAggregates>,
    _request_id: Option<String>,
}
impl GetSavingsPlansUtilizationOutputBuilder {
    /// Appends an item to `savings_plans_utilizations_by_time`.
    ///
    /// To override the contents of this collection use [`set_savings_plans_utilizations_by_time`](Self::set_savings_plans_utilizations_by_time).
    ///
    /// <p>The amount of cost/commitment that you used your Savings Plans. You can use it to specify date ranges.</p>
    pub fn savings_plans_utilizations_by_time(mut self, input: crate::types::SavingsPlansUtilizationByTime) -> Self {
        let mut v = self.savings_plans_utilizations_by_time.unwrap_or_default();
        v.push(input);
        self.savings_plans_utilizations_by_time = ::std::option::Option::Some(v);
        self
    }
    /// <p>The amount of cost/commitment that you used your Savings Plans. You can use it to specify date ranges.</p>
    pub fn set_savings_plans_utilizations_by_time(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SavingsPlansUtilizationByTime>>,
    ) -> Self {
        self.savings_plans_utilizations_by_time = input;
        self
    }
    /// <p>The amount of cost/commitment that you used your Savings Plans. You can use it to specify date ranges.</p>
    pub fn get_savings_plans_utilizations_by_time(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SavingsPlansUtilizationByTime>> {
        &self.savings_plans_utilizations_by_time
    }
    /// <p>The total amount of cost/commitment that you used your Savings Plans, regardless of date ranges.</p>
    /// This field is required.
    pub fn total(mut self, input: crate::types::SavingsPlansUtilizationAggregates) -> Self {
        self.total = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total amount of cost/commitment that you used your Savings Plans, regardless of date ranges.</p>
    pub fn set_total(mut self, input: ::std::option::Option<crate::types::SavingsPlansUtilizationAggregates>) -> Self {
        self.total = input;
        self
    }
    /// <p>The total amount of cost/commitment that you used your Savings Plans, regardless of date ranges.</p>
    pub fn get_total(&self) -> &::std::option::Option<crate::types::SavingsPlansUtilizationAggregates> {
        &self.total
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSavingsPlansUtilizationOutput`](crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationOutput).
    pub fn build(self) -> crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationOutput {
        crate::operation::get_savings_plans_utilization::GetSavingsPlansUtilizationOutput {
            savings_plans_utilizations_by_time: self.savings_plans_utilizations_by_time,
            total: self.total,
            _request_id: self._request_id,
        }
    }
}
