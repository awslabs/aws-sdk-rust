// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_anomaly_monitor::_create_anomaly_monitor_output::CreateAnomalyMonitorOutputBuilder;

pub use crate::operation::create_anomaly_monitor::_create_anomaly_monitor_input::CreateAnomalyMonitorInputBuilder;

/// Fluent builder constructing a request to `CreateAnomalyMonitor`.
///
/// <p>Creates a new cost anomaly detection monitor with the requested type and monitor specification. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateAnomalyMonitorFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_anomaly_monitor::builders::CreateAnomalyMonitorInputBuilder,
}
impl CreateAnomalyMonitorFluentBuilder {
    /// Creates a new `CreateAnomalyMonitor`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_anomaly_monitor::CreateAnomalyMonitor,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_anomaly_monitor::CreateAnomalyMonitorError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_anomaly_monitor::CreateAnomalyMonitorOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_anomaly_monitor::CreateAnomalyMonitorError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The cost anomaly detection monitor object that you want to create.</p>
    pub fn anomaly_monitor(mut self, input: crate::types::AnomalyMonitor) -> Self {
        self.inner = self.inner.anomaly_monitor(input);
        self
    }
    /// <p>The cost anomaly detection monitor object that you want to create.</p>
    pub fn set_anomaly_monitor(
        mut self,
        input: std::option::Option<crate::types::AnomalyMonitor>,
    ) -> Self {
        self.inner = self.inner.set_anomaly_monitor(input);
        self
    }
    /// Appends an item to `ResourceTags`.
    ///
    /// To override the contents of this collection use [`set_resource_tags`](Self::set_resource_tags).
    ///
    /// <p>An optional list of tags to associate with the specified <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_AnomalyMonitor.html"> <code>AnomalyMonitor</code> </a>. You can use resource tags to control access to your <code>monitor</code> using IAM policies.</p>
    /// <p>Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>
    /// <ul>
    /// <li> <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services use</p> </li>
    /// <li> <p>The maximum length of a key is 128 characters</p> </li>
    /// <li> <p>The maximum length of a value is 256 characters</p> </li>
    /// <li> <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code> </p> </li>
    /// <li> <p>Keys and values are case sensitive</p> </li>
    /// <li> <p>Keys and values are trimmed for any leading or trailing whitespaces</p> </li>
    /// <li> <p>Don’t use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services use</p> </li>
    /// </ul>
    pub fn resource_tags(mut self, input: crate::types::ResourceTag) -> Self {
        self.inner = self.inner.resource_tags(input);
        self
    }
    /// <p>An optional list of tags to associate with the specified <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_AnomalyMonitor.html"> <code>AnomalyMonitor</code> </a>. You can use resource tags to control access to your <code>monitor</code> using IAM policies.</p>
    /// <p>Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>
    /// <ul>
    /// <li> <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services use</p> </li>
    /// <li> <p>The maximum length of a key is 128 characters</p> </li>
    /// <li> <p>The maximum length of a value is 256 characters</p> </li>
    /// <li> <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code> </p> </li>
    /// <li> <p>Keys and values are case sensitive</p> </li>
    /// <li> <p>Keys and values are trimmed for any leading or trailing whitespaces</p> </li>
    /// <li> <p>Don’t use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services use</p> </li>
    /// </ul>
    pub fn set_resource_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceTag>>,
    ) -> Self {
        self.inner = self.inner.set_resource_tags(input);
        self
    }
}
