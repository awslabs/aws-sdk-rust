// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAnomalyMonitorInput {
    /// <p>The cost anomaly detection monitor object that you want to create.</p>
    #[doc(hidden)]
    pub anomaly_monitor: std::option::Option<crate::types::AnomalyMonitor>,
    /// <p>An optional list of tags to associate with the specified <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_AnomalyMonitor.html"> <code>AnomalyMonitor</code> </a>. You can use resource tags to control access to your <code>monitor</code> using IAM policies.</p>
    /// <p>Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>
    /// <ul>
    /// <li> <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services use</p> </li>
    /// <li> <p>The maximum length of a key is 128 characters</p> </li>
    /// <li> <p>The maximum length of a value is 256 characters</p> </li>
    /// <li> <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code> </p> </li>
    /// <li> <p>Keys and values are case sensitive</p> </li>
    /// <li> <p>Keys and values are trimmed for any leading or trailing whitespaces</p> </li>
    /// <li> <p>Don’t use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services use</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub resource_tags: std::option::Option<std::vec::Vec<crate::types::ResourceTag>>,
}
impl CreateAnomalyMonitorInput {
    /// <p>The cost anomaly detection monitor object that you want to create.</p>
    pub fn anomaly_monitor(&self) -> std::option::Option<&crate::types::AnomalyMonitor> {
        self.anomaly_monitor.as_ref()
    }
    /// <p>An optional list of tags to associate with the specified <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_AnomalyMonitor.html"> <code>AnomalyMonitor</code> </a>. You can use resource tags to control access to your <code>monitor</code> using IAM policies.</p>
    /// <p>Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>
    /// <ul>
    /// <li> <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services use</p> </li>
    /// <li> <p>The maximum length of a key is 128 characters</p> </li>
    /// <li> <p>The maximum length of a value is 256 characters</p> </li>
    /// <li> <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code> </p> </li>
    /// <li> <p>Keys and values are case sensitive</p> </li>
    /// <li> <p>Keys and values are trimmed for any leading or trailing whitespaces</p> </li>
    /// <li> <p>Don’t use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services use</p> </li>
    /// </ul>
    pub fn resource_tags(&self) -> std::option::Option<&[crate::types::ResourceTag]> {
        self.resource_tags.as_deref()
    }
}
impl CreateAnomalyMonitorInput {
    /// Creates a new builder-style object to manufacture [`CreateAnomalyMonitorInput`](crate::operation::create_anomaly_monitor::CreateAnomalyMonitorInput).
    pub fn builder(
    ) -> crate::operation::create_anomaly_monitor::builders::CreateAnomalyMonitorInputBuilder {
        crate::operation::create_anomaly_monitor::builders::CreateAnomalyMonitorInputBuilder::default()
    }
}

/// A builder for [`CreateAnomalyMonitorInput`](crate::operation::create_anomaly_monitor::CreateAnomalyMonitorInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAnomalyMonitorInputBuilder {
    pub(crate) anomaly_monitor: std::option::Option<crate::types::AnomalyMonitor>,
    pub(crate) resource_tags: std::option::Option<std::vec::Vec<crate::types::ResourceTag>>,
}
impl CreateAnomalyMonitorInputBuilder {
    /// <p>The cost anomaly detection monitor object that you want to create.</p>
    pub fn anomaly_monitor(mut self, input: crate::types::AnomalyMonitor) -> Self {
        self.anomaly_monitor = Some(input);
        self
    }
    /// <p>The cost anomaly detection monitor object that you want to create.</p>
    pub fn set_anomaly_monitor(
        mut self,
        input: std::option::Option<crate::types::AnomalyMonitor>,
    ) -> Self {
        self.anomaly_monitor = input;
        self
    }
    /// Appends an item to `resource_tags`.
    ///
    /// To override the contents of this collection use [`set_resource_tags`](Self::set_resource_tags).
    ///
    /// <p>An optional list of tags to associate with the specified <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_AnomalyMonitor.html"> <code>AnomalyMonitor</code> </a>. You can use resource tags to control access to your <code>monitor</code> using IAM policies.</p>
    /// <p>Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>
    /// <ul>
    /// <li> <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services use</p> </li>
    /// <li> <p>The maximum length of a key is 128 characters</p> </li>
    /// <li> <p>The maximum length of a value is 256 characters</p> </li>
    /// <li> <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code> </p> </li>
    /// <li> <p>Keys and values are case sensitive</p> </li>
    /// <li> <p>Keys and values are trimmed for any leading or trailing whitespaces</p> </li>
    /// <li> <p>Don’t use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services use</p> </li>
    /// </ul>
    pub fn resource_tags(mut self, input: crate::types::ResourceTag) -> Self {
        let mut v = self.resource_tags.unwrap_or_default();
        v.push(input);
        self.resource_tags = Some(v);
        self
    }
    /// <p>An optional list of tags to associate with the specified <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_AnomalyMonitor.html"> <code>AnomalyMonitor</code> </a>. You can use resource tags to control access to your <code>monitor</code> using IAM policies.</p>
    /// <p>Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>
    /// <ul>
    /// <li> <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services use</p> </li>
    /// <li> <p>The maximum length of a key is 128 characters</p> </li>
    /// <li> <p>The maximum length of a value is 256 characters</p> </li>
    /// <li> <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code> </p> </li>
    /// <li> <p>Keys and values are case sensitive</p> </li>
    /// <li> <p>Keys and values are trimmed for any leading or trailing whitespaces</p> </li>
    /// <li> <p>Don’t use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services use</p> </li>
    /// </ul>
    pub fn set_resource_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceTag>>,
    ) -> Self {
        self.resource_tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateAnomalyMonitorInput`](crate::operation::create_anomaly_monitor::CreateAnomalyMonitorInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_anomaly_monitor::CreateAnomalyMonitorInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_anomaly_monitor::CreateAnomalyMonitorInput {
                anomaly_monitor: self.anomaly_monitor,
                resource_tags: self.resource_tags,
            },
        )
    }
}
