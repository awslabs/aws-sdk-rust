// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_cost_allocation_tags_status::_update_cost_allocation_tags_status_output::UpdateCostAllocationTagsStatusOutputBuilder;

pub use crate::operation::update_cost_allocation_tags_status::_update_cost_allocation_tags_status_input::UpdateCostAllocationTagsStatusInputBuilder;

/// Fluent builder constructing a request to `UpdateCostAllocationTagsStatus`.
///
/// <p>Updates status for cost allocation tags in bulk, with maximum batch size of 20. If the tag status that's updated is the same as the existing tag status, the request doesn't fail. Instead, it doesn't have any effect on the tag status (for example, activating the active tag). </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateCostAllocationTagsStatusFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_cost_allocation_tags_status::builders::UpdateCostAllocationTagsStatusInputBuilder
            }
impl UpdateCostAllocationTagsStatusFluentBuilder {
    /// Creates a new `UpdateCostAllocationTagsStatus`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_cost_allocation_tags_status::UpdateCostAllocationTagsStatus, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_cost_allocation_tags_status::UpdateCostAllocationTagsStatusError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_cost_allocation_tags_status::UpdateCostAllocationTagsStatusOutput, aws_smithy_http::result::SdkError<crate::operation::update_cost_allocation_tags_status::UpdateCostAllocationTagsStatusError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `CostAllocationTagsStatus`.
    ///
    /// To override the contents of this collection use [`set_cost_allocation_tags_status`](Self::set_cost_allocation_tags_status).
    ///
    /// <p>The list of <code>CostAllocationTagStatusEntry</code> objects that are used to update cost allocation tags status for this request. </p>
    pub fn cost_allocation_tags_status(
        mut self,
        input: crate::types::CostAllocationTagStatusEntry,
    ) -> Self {
        self.inner = self.inner.cost_allocation_tags_status(input);
        self
    }
    /// <p>The list of <code>CostAllocationTagStatusEntry</code> objects that are used to update cost allocation tags status for this request. </p>
    pub fn set_cost_allocation_tags_status(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CostAllocationTagStatusEntry>>,
    ) -> Self {
        self.inner = self.inner.set_cost_allocation_tags_status(input);
        self
    }
}
