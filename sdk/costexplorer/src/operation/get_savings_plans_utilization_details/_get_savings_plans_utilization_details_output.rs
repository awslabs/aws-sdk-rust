// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSavingsPlansUtilizationDetailsOutput {
    /// <p>Retrieves a single daily or monthly Savings Plans utilization rate and details for your account.</p>
    pub savings_plans_utilization_details: ::std::vec::Vec<crate::types::SavingsPlansUtilizationDetail>,
    /// <p>The total Savings Plans utilization, regardless of time period.</p>
    pub total: ::std::option::Option<crate::types::SavingsPlansUtilizationAggregates>,
    /// <p>The time period of the request. </p>
    pub time_period: ::std::option::Option<crate::types::DateInterval>,
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetSavingsPlansUtilizationDetailsOutput {
    /// <p>Retrieves a single daily or monthly Savings Plans utilization rate and details for your account.</p>
    pub fn savings_plans_utilization_details(&self) -> &[crate::types::SavingsPlansUtilizationDetail] {
        use std::ops::Deref;
        self.savings_plans_utilization_details.deref()
    }
    /// <p>The total Savings Plans utilization, regardless of time period.</p>
    pub fn total(&self) -> ::std::option::Option<&crate::types::SavingsPlansUtilizationAggregates> {
        self.total.as_ref()
    }
    /// <p>The time period of the request. </p>
    pub fn time_period(&self) -> ::std::option::Option<&crate::types::DateInterval> {
        self.time_period.as_ref()
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetSavingsPlansUtilizationDetailsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSavingsPlansUtilizationDetailsOutput {
    /// Creates a new builder-style object to manufacture [`GetSavingsPlansUtilizationDetailsOutput`](crate::operation::get_savings_plans_utilization_details::GetSavingsPlansUtilizationDetailsOutput).
    pub fn builder() -> crate::operation::get_savings_plans_utilization_details::builders::GetSavingsPlansUtilizationDetailsOutputBuilder {
        crate::operation::get_savings_plans_utilization_details::builders::GetSavingsPlansUtilizationDetailsOutputBuilder::default()
    }
}

/// A builder for [`GetSavingsPlansUtilizationDetailsOutput`](crate::operation::get_savings_plans_utilization_details::GetSavingsPlansUtilizationDetailsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetSavingsPlansUtilizationDetailsOutputBuilder {
    pub(crate) savings_plans_utilization_details: ::std::option::Option<::std::vec::Vec<crate::types::SavingsPlansUtilizationDetail>>,
    pub(crate) total: ::std::option::Option<crate::types::SavingsPlansUtilizationAggregates>,
    pub(crate) time_period: ::std::option::Option<crate::types::DateInterval>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetSavingsPlansUtilizationDetailsOutputBuilder {
    /// Appends an item to `savings_plans_utilization_details`.
    ///
    /// To override the contents of this collection use [`set_savings_plans_utilization_details`](Self::set_savings_plans_utilization_details).
    ///
    /// <p>Retrieves a single daily or monthly Savings Plans utilization rate and details for your account.</p>
    pub fn savings_plans_utilization_details(mut self, input: crate::types::SavingsPlansUtilizationDetail) -> Self {
        let mut v = self.savings_plans_utilization_details.unwrap_or_default();
        v.push(input);
        self.savings_plans_utilization_details = ::std::option::Option::Some(v);
        self
    }
    /// <p>Retrieves a single daily or monthly Savings Plans utilization rate and details for your account.</p>
    pub fn set_savings_plans_utilization_details(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SavingsPlansUtilizationDetail>>,
    ) -> Self {
        self.savings_plans_utilization_details = input;
        self
    }
    /// <p>Retrieves a single daily or monthly Savings Plans utilization rate and details for your account.</p>
    pub fn get_savings_plans_utilization_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SavingsPlansUtilizationDetail>> {
        &self.savings_plans_utilization_details
    }
    /// <p>The total Savings Plans utilization, regardless of time period.</p>
    pub fn total(mut self, input: crate::types::SavingsPlansUtilizationAggregates) -> Self {
        self.total = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total Savings Plans utilization, regardless of time period.</p>
    pub fn set_total(mut self, input: ::std::option::Option<crate::types::SavingsPlansUtilizationAggregates>) -> Self {
        self.total = input;
        self
    }
    /// <p>The total Savings Plans utilization, regardless of time period.</p>
    pub fn get_total(&self) -> &::std::option::Option<crate::types::SavingsPlansUtilizationAggregates> {
        &self.total
    }
    /// <p>The time period of the request. </p>
    /// This field is required.
    pub fn time_period(mut self, input: crate::types::DateInterval) -> Self {
        self.time_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time period of the request. </p>
    pub fn set_time_period(mut self, input: ::std::option::Option<crate::types::DateInterval>) -> Self {
        self.time_period = input;
        self
    }
    /// <p>The time period of the request. </p>
    pub fn get_time_period(&self) -> &::std::option::Option<crate::types::DateInterval> {
        &self.time_period
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSavingsPlansUtilizationDetailsOutput`](crate::operation::get_savings_plans_utilization_details::GetSavingsPlansUtilizationDetailsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`savings_plans_utilization_details`](crate::operation::get_savings_plans_utilization_details::builders::GetSavingsPlansUtilizationDetailsOutputBuilder::savings_plans_utilization_details)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_savings_plans_utilization_details::GetSavingsPlansUtilizationDetailsOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_savings_plans_utilization_details::GetSavingsPlansUtilizationDetailsOutput {
                savings_plans_utilization_details: self.savings_plans_utilization_details
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("savings_plans_utilization_details", "savings_plans_utilization_details was not specified but it is required when building GetSavingsPlansUtilizationDetailsOutput")
                    )?
                ,
                total: self.total
                ,
                time_period: self.time_period
                ,
                next_token: self.next_token
                ,
                _request_id: self._request_id,
            }
        )
    }
}
