// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAnomaliesOutput {
    /// <p>A list of cost anomalies. </p>
    #[doc(hidden)]
    pub anomalies: std::option::Option<std::vec::Vec<crate::types::Anomaly>>,
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    #[doc(hidden)]
    pub next_page_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetAnomaliesOutput {
    /// <p>A list of cost anomalies. </p>
    pub fn anomalies(&self) -> std::option::Option<&[crate::types::Anomaly]> {
        self.anomalies.as_deref()
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn next_page_token(&self) -> std::option::Option<&str> {
        self.next_page_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetAnomaliesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAnomaliesOutput {
    /// Creates a new builder-style object to manufacture [`GetAnomaliesOutput`](crate::operation::get_anomalies::GetAnomaliesOutput).
    pub fn builder() -> crate::operation::get_anomalies::builders::GetAnomaliesOutputBuilder {
        crate::operation::get_anomalies::builders::GetAnomaliesOutputBuilder::default()
    }
}

/// A builder for [`GetAnomaliesOutput`](crate::operation::get_anomalies::GetAnomaliesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetAnomaliesOutputBuilder {
    pub(crate) anomalies: std::option::Option<std::vec::Vec<crate::types::Anomaly>>,
    pub(crate) next_page_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetAnomaliesOutputBuilder {
    /// Appends an item to `anomalies`.
    ///
    /// To override the contents of this collection use [`set_anomalies`](Self::set_anomalies).
    ///
    /// <p>A list of cost anomalies. </p>
    pub fn anomalies(mut self, input: crate::types::Anomaly) -> Self {
        let mut v = self.anomalies.unwrap_or_default();
        v.push(input);
        self.anomalies = Some(v);
        self
    }
    /// <p>A list of cost anomalies. </p>
    pub fn set_anomalies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Anomaly>>,
    ) -> Self {
        self.anomalies = input;
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn next_page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_page_token = Some(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn set_next_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_page_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAnomaliesOutput`](crate::operation::get_anomalies::GetAnomaliesOutput).
    pub fn build(self) -> crate::operation::get_anomalies::GetAnomaliesOutput {
        crate::operation::get_anomalies::GetAnomaliesOutput {
            anomalies: self.anomalies,
            next_page_token: self.next_page_token,
            _request_id: self._request_id,
        }
    }
}
