// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_anomalies::_get_anomalies_output::GetAnomaliesOutputBuilder;

pub use crate::operation::get_anomalies::_get_anomalies_input::GetAnomaliesInputBuilder;

/// Fluent builder constructing a request to `GetAnomalies`.
///
/// <p>Retrieves all of the cost anomalies detected on your account during the time period that's specified by the <code>DateInterval</code> object. Anomalies are available for up to 90 days.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetAnomaliesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_anomalies::builders::GetAnomaliesInputBuilder,
}
impl GetAnomaliesFluentBuilder {
    /// Creates a new `GetAnomalies`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_anomalies::GetAnomalies,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::get_anomalies::GetAnomaliesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_anomalies::GetAnomaliesOutput,
        aws_smithy_http::result::SdkError<crate::operation::get_anomalies::GetAnomaliesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Retrieves all of the cost anomalies detected for a specific cost anomaly monitor Amazon Resource Name (ARN). </p>
    pub fn monitor_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitor_arn(input.into());
        self
    }
    /// <p>Retrieves all of the cost anomalies detected for a specific cost anomaly monitor Amazon Resource Name (ARN). </p>
    pub fn set_monitor_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_monitor_arn(input);
        self
    }
    /// <p>Assigns the start and end dates for retrieving cost anomalies. The returned anomaly object will have an <code>AnomalyEndDate</code> in the specified time range. </p>
    pub fn date_interval(mut self, input: crate::types::AnomalyDateInterval) -> Self {
        self.inner = self.inner.date_interval(input);
        self
    }
    /// <p>Assigns the start and end dates for retrieving cost anomalies. The returned anomaly object will have an <code>AnomalyEndDate</code> in the specified time range. </p>
    pub fn set_date_interval(
        mut self,
        input: std::option::Option<crate::types::AnomalyDateInterval>,
    ) -> Self {
        self.inner = self.inner.set_date_interval(input);
        self
    }
    /// <p>Filters anomaly results by the feedback field on the anomaly object. </p>
    pub fn feedback(mut self, input: crate::types::AnomalyFeedbackType) -> Self {
        self.inner = self.inner.feedback(input);
        self
    }
    /// <p>Filters anomaly results by the feedback field on the anomaly object. </p>
    pub fn set_feedback(
        mut self,
        input: std::option::Option<crate::types::AnomalyFeedbackType>,
    ) -> Self {
        self.inner = self.inner.set_feedback(input);
        self
    }
    /// <p>Filters anomaly results by the total impact field on the anomaly object. For example, you can filter anomalies <code>GREATER_THAN 200.00</code> to retrieve anomalies, with an estimated dollar impact greater than 200. </p>
    pub fn total_impact(mut self, input: crate::types::TotalImpactFilter) -> Self {
        self.inner = self.inner.total_impact(input);
        self
    }
    /// <p>Filters anomaly results by the total impact field on the anomaly object. For example, you can filter anomalies <code>GREATER_THAN 200.00</code> to retrieve anomalies, with an estimated dollar impact greater than 200. </p>
    pub fn set_total_impact(
        mut self,
        input: std::option::Option<crate::types::TotalImpactFilter>,
    ) -> Self {
        self.inner = self.inner.set_total_impact(input);
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn next_page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_page_token(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn set_next_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_page_token(input);
        self
    }
    /// <p>The number of entries a paginated response contains. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The number of entries a paginated response contains. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}
