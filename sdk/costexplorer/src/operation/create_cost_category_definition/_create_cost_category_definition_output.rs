// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCostCategoryDefinitionOutput {
    /// <p>The unique identifier for your newly created Cost Category. </p>
    #[doc(hidden)]
    pub cost_category_arn: std::option::Option<std::string::String>,
    /// <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month).</p>
    #[doc(hidden)]
    pub effective_start: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateCostCategoryDefinitionOutput {
    /// <p>The unique identifier for your newly created Cost Category. </p>
    pub fn cost_category_arn(&self) -> std::option::Option<&str> {
        self.cost_category_arn.as_deref()
    }
    /// <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month).</p>
    pub fn effective_start(&self) -> std::option::Option<&str> {
        self.effective_start.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateCostCategoryDefinitionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateCostCategoryDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`CreateCostCategoryDefinitionOutput`](crate::operation::create_cost_category_definition::CreateCostCategoryDefinitionOutput).
    pub fn builder() -> crate::operation::create_cost_category_definition::builders::CreateCostCategoryDefinitionOutputBuilder{
        crate::operation::create_cost_category_definition::builders::CreateCostCategoryDefinitionOutputBuilder::default()
    }
}

/// A builder for [`CreateCostCategoryDefinitionOutput`](crate::operation::create_cost_category_definition::CreateCostCategoryDefinitionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateCostCategoryDefinitionOutputBuilder {
    pub(crate) cost_category_arn: std::option::Option<std::string::String>,
    pub(crate) effective_start: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateCostCategoryDefinitionOutputBuilder {
    /// <p>The unique identifier for your newly created Cost Category. </p>
    pub fn cost_category_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.cost_category_arn = Some(input.into());
        self
    }
    /// <p>The unique identifier for your newly created Cost Category. </p>
    pub fn set_cost_category_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cost_category_arn = input;
        self
    }
    /// <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month).</p>
    pub fn effective_start(mut self, input: impl Into<std::string::String>) -> Self {
        self.effective_start = Some(input.into());
        self
    }
    /// <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month).</p>
    pub fn set_effective_start(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.effective_start = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateCostCategoryDefinitionOutput`](crate::operation::create_cost_category_definition::CreateCostCategoryDefinitionOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_cost_category_definition::CreateCostCategoryDefinitionOutput {
        crate::operation::create_cost_category_definition::CreateCostCategoryDefinitionOutput {
            cost_category_arn: self.cost_category_arn,
            effective_start: self.effective_start,
            _request_id: self._request_id,
        }
    }
}
