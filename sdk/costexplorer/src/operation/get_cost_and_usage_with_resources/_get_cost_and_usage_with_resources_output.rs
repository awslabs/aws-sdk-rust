// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCostAndUsageWithResourcesOutput {
    /// <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    #[doc(hidden)]
    pub next_page_token: std::option::Option<std::string::String>,
    /// <p>The groups that are specified by the <code>Filter</code> or <code>GroupBy</code> parameters in the request.</p>
    #[doc(hidden)]
    pub group_definitions: std::option::Option<std::vec::Vec<crate::types::GroupDefinition>>,
    /// <p>The time period that's covered by the results in the response.</p>
    #[doc(hidden)]
    pub results_by_time: std::option::Option<std::vec::Vec<crate::types::ResultByTime>>,
    /// <p>The attributes that apply to a specific dimension value. For example, if the value is a linked account, the attribute is that account name.</p>
    #[doc(hidden)]
    pub dimension_value_attributes:
        std::option::Option<std::vec::Vec<crate::types::DimensionValuesWithAttributes>>,
    _request_id: Option<String>,
}
impl GetCostAndUsageWithResourcesOutput {
    /// <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn next_page_token(&self) -> std::option::Option<&str> {
        self.next_page_token.as_deref()
    }
    /// <p>The groups that are specified by the <code>Filter</code> or <code>GroupBy</code> parameters in the request.</p>
    pub fn group_definitions(&self) -> std::option::Option<&[crate::types::GroupDefinition]> {
        self.group_definitions.as_deref()
    }
    /// <p>The time period that's covered by the results in the response.</p>
    pub fn results_by_time(&self) -> std::option::Option<&[crate::types::ResultByTime]> {
        self.results_by_time.as_deref()
    }
    /// <p>The attributes that apply to a specific dimension value. For example, if the value is a linked account, the attribute is that account name.</p>
    pub fn dimension_value_attributes(
        &self,
    ) -> std::option::Option<&[crate::types::DimensionValuesWithAttributes]> {
        self.dimension_value_attributes.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetCostAndUsageWithResourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCostAndUsageWithResourcesOutput {
    /// Creates a new builder-style object to manufacture [`GetCostAndUsageWithResourcesOutput`](crate::operation::get_cost_and_usage_with_resources::GetCostAndUsageWithResourcesOutput).
    pub fn builder() -> crate::operation::get_cost_and_usage_with_resources::builders::GetCostAndUsageWithResourcesOutputBuilder{
        crate::operation::get_cost_and_usage_with_resources::builders::GetCostAndUsageWithResourcesOutputBuilder::default()
    }
}

/// A builder for [`GetCostAndUsageWithResourcesOutput`](crate::operation::get_cost_and_usage_with_resources::GetCostAndUsageWithResourcesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetCostAndUsageWithResourcesOutputBuilder {
    pub(crate) next_page_token: std::option::Option<std::string::String>,
    pub(crate) group_definitions: std::option::Option<std::vec::Vec<crate::types::GroupDefinition>>,
    pub(crate) results_by_time: std::option::Option<std::vec::Vec<crate::types::ResultByTime>>,
    pub(crate) dimension_value_attributes:
        std::option::Option<std::vec::Vec<crate::types::DimensionValuesWithAttributes>>,
    _request_id: Option<String>,
}
impl GetCostAndUsageWithResourcesOutputBuilder {
    /// <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn next_page_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_page_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    pub fn set_next_page_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_page_token = input;
        self
    }
    /// Appends an item to `group_definitions`.
    ///
    /// To override the contents of this collection use [`set_group_definitions`](Self::set_group_definitions).
    ///
    /// <p>The groups that are specified by the <code>Filter</code> or <code>GroupBy</code> parameters in the request.</p>
    pub fn group_definitions(mut self, input: crate::types::GroupDefinition) -> Self {
        let mut v = self.group_definitions.unwrap_or_default();
        v.push(input);
        self.group_definitions = Some(v);
        self
    }
    /// <p>The groups that are specified by the <code>Filter</code> or <code>GroupBy</code> parameters in the request.</p>
    pub fn set_group_definitions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GroupDefinition>>,
    ) -> Self {
        self.group_definitions = input;
        self
    }
    /// Appends an item to `results_by_time`.
    ///
    /// To override the contents of this collection use [`set_results_by_time`](Self::set_results_by_time).
    ///
    /// <p>The time period that's covered by the results in the response.</p>
    pub fn results_by_time(mut self, input: crate::types::ResultByTime) -> Self {
        let mut v = self.results_by_time.unwrap_or_default();
        v.push(input);
        self.results_by_time = Some(v);
        self
    }
    /// <p>The time period that's covered by the results in the response.</p>
    pub fn set_results_by_time(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResultByTime>>,
    ) -> Self {
        self.results_by_time = input;
        self
    }
    /// Appends an item to `dimension_value_attributes`.
    ///
    /// To override the contents of this collection use [`set_dimension_value_attributes`](Self::set_dimension_value_attributes).
    ///
    /// <p>The attributes that apply to a specific dimension value. For example, if the value is a linked account, the attribute is that account name.</p>
    pub fn dimension_value_attributes(
        mut self,
        input: crate::types::DimensionValuesWithAttributes,
    ) -> Self {
        let mut v = self.dimension_value_attributes.unwrap_or_default();
        v.push(input);
        self.dimension_value_attributes = Some(v);
        self
    }
    /// <p>The attributes that apply to a specific dimension value. For example, if the value is a linked account, the attribute is that account name.</p>
    pub fn set_dimension_value_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DimensionValuesWithAttributes>>,
    ) -> Self {
        self.dimension_value_attributes = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCostAndUsageWithResourcesOutput`](crate::operation::get_cost_and_usage_with_resources::GetCostAndUsageWithResourcesOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_cost_and_usage_with_resources::GetCostAndUsageWithResourcesOutput
    {
        crate::operation::get_cost_and_usage_with_resources::GetCostAndUsageWithResourcesOutput {
            next_page_token: self.next_page_token,
            group_definitions: self.group_definitions,
            results_by_time: self.results_by_time,
            dimension_value_attributes: self.dimension_value_attributes,
            _request_id: self._request_id,
        }
    }
}
