// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProvideAnomalyFeedbackInput {
    /// <p>A cost anomaly ID. </p>
    #[doc(hidden)]
    pub anomaly_id: std::option::Option<std::string::String>,
    /// <p>Describes whether the cost anomaly was a planned activity or you considered it an anomaly. </p>
    #[doc(hidden)]
    pub feedback: std::option::Option<crate::types::AnomalyFeedbackType>,
}
impl ProvideAnomalyFeedbackInput {
    /// <p>A cost anomaly ID. </p>
    pub fn anomaly_id(&self) -> std::option::Option<&str> {
        self.anomaly_id.as_deref()
    }
    /// <p>Describes whether the cost anomaly was a planned activity or you considered it an anomaly. </p>
    pub fn feedback(&self) -> std::option::Option<&crate::types::AnomalyFeedbackType> {
        self.feedback.as_ref()
    }
}
impl ProvideAnomalyFeedbackInput {
    /// Creates a new builder-style object to manufacture [`ProvideAnomalyFeedbackInput`](crate::operation::provide_anomaly_feedback::ProvideAnomalyFeedbackInput).
    pub fn builder(
    ) -> crate::operation::provide_anomaly_feedback::builders::ProvideAnomalyFeedbackInputBuilder
    {
        crate::operation::provide_anomaly_feedback::builders::ProvideAnomalyFeedbackInputBuilder::default()
    }
}

/// A builder for [`ProvideAnomalyFeedbackInput`](crate::operation::provide_anomaly_feedback::ProvideAnomalyFeedbackInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProvideAnomalyFeedbackInputBuilder {
    pub(crate) anomaly_id: std::option::Option<std::string::String>,
    pub(crate) feedback: std::option::Option<crate::types::AnomalyFeedbackType>,
}
impl ProvideAnomalyFeedbackInputBuilder {
    /// <p>A cost anomaly ID. </p>
    pub fn anomaly_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.anomaly_id = Some(input.into());
        self
    }
    /// <p>A cost anomaly ID. </p>
    pub fn set_anomaly_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.anomaly_id = input;
        self
    }
    /// <p>Describes whether the cost anomaly was a planned activity or you considered it an anomaly. </p>
    pub fn feedback(mut self, input: crate::types::AnomalyFeedbackType) -> Self {
        self.feedback = Some(input);
        self
    }
    /// <p>Describes whether the cost anomaly was a planned activity or you considered it an anomaly. </p>
    pub fn set_feedback(
        mut self,
        input: std::option::Option<crate::types::AnomalyFeedbackType>,
    ) -> Self {
        self.feedback = input;
        self
    }
    /// Consumes the builder and constructs a [`ProvideAnomalyFeedbackInput`](crate::operation::provide_anomaly_feedback::ProvideAnomalyFeedbackInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::provide_anomaly_feedback::ProvideAnomalyFeedbackInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::provide_anomaly_feedback::ProvideAnomalyFeedbackInput {
                anomaly_id: self.anomaly_id,
                feedback: self.feedback,
            },
        )
    }
}
