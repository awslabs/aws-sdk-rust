// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAnomalyMonitorsInput {
    /// <p>A list of cost anomaly monitor ARNs. </p>
    pub monitor_arn_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub next_page_token: ::std::option::Option<::std::string::String>,
    /// <p>The number of entries that a paginated response contains. </p>
    pub max_results: ::std::option::Option<i32>,
}
impl GetAnomalyMonitorsInput {
    /// <p>A list of cost anomaly monitor ARNs. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.monitor_arn_list.is_none()`.
    pub fn monitor_arn_list(&self) -> &[::std::string::String] {
        self.monitor_arn_list.as_deref().unwrap_or_default()
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn next_page_token(&self) -> ::std::option::Option<&str> {
        self.next_page_token.as_deref()
    }
    /// <p>The number of entries that a paginated response contains. </p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl GetAnomalyMonitorsInput {
    /// Creates a new builder-style object to manufacture [`GetAnomalyMonitorsInput`](crate::operation::get_anomaly_monitors::GetAnomalyMonitorsInput).
    pub fn builder() -> crate::operation::get_anomaly_monitors::builders::GetAnomalyMonitorsInputBuilder {
        crate::operation::get_anomaly_monitors::builders::GetAnomalyMonitorsInputBuilder::default()
    }
}

/// A builder for [`GetAnomalyMonitorsInput`](crate::operation::get_anomaly_monitors::GetAnomalyMonitorsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetAnomalyMonitorsInputBuilder {
    pub(crate) monitor_arn_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next_page_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl GetAnomalyMonitorsInputBuilder {
    /// Appends an item to `monitor_arn_list`.
    ///
    /// To override the contents of this collection use [`set_monitor_arn_list`](Self::set_monitor_arn_list).
    ///
    /// <p>A list of cost anomaly monitor ARNs. </p>
    pub fn monitor_arn_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.monitor_arn_list.unwrap_or_default();
        v.push(input.into());
        self.monitor_arn_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of cost anomaly monitor ARNs. </p>
    pub fn set_monitor_arn_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.monitor_arn_list = input;
        self
    }
    /// <p>A list of cost anomaly monitor ARNs. </p>
    pub fn get_monitor_arn_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.monitor_arn_list
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn next_page_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_page_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn set_next_page_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_page_token = input;
        self
    }
    /// <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    pub fn get_next_page_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_page_token
    }
    /// <p>The number of entries that a paginated response contains. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of entries that a paginated response contains. </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The number of entries that a paginated response contains. </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`GetAnomalyMonitorsInput`](crate::operation::get_anomaly_monitors::GetAnomalyMonitorsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_anomaly_monitors::GetAnomalyMonitorsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_anomaly_monitors::GetAnomalyMonitorsInput {
            monitor_arn_list: self.monitor_arn_list,
            next_page_token: self.next_page_token,
            max_results: self.max_results,
        })
    }
}
