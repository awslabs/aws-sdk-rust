// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartSavingsPlansPurchaseRecommendationGenerationOutput {
    /// <p>The ID for this specific recommendation.</p>
    #[doc(hidden)]
    pub recommendation_id: std::option::Option<std::string::String>,
    /// <p>The start time of the recommendation generation.</p>
    #[doc(hidden)]
    pub generation_started_time: std::option::Option<std::string::String>,
    /// <p>The estimated time for when the recommendation generation will complete.</p>
    #[doc(hidden)]
    pub estimated_completion_time: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartSavingsPlansPurchaseRecommendationGenerationOutput {
    /// <p>The ID for this specific recommendation.</p>
    pub fn recommendation_id(&self) -> std::option::Option<&str> {
        self.recommendation_id.as_deref()
    }
    /// <p>The start time of the recommendation generation.</p>
    pub fn generation_started_time(&self) -> std::option::Option<&str> {
        self.generation_started_time.as_deref()
    }
    /// <p>The estimated time for when the recommendation generation will complete.</p>
    pub fn estimated_completion_time(&self) -> std::option::Option<&str> {
        self.estimated_completion_time.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartSavingsPlansPurchaseRecommendationGenerationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartSavingsPlansPurchaseRecommendationGenerationOutput {
    /// Creates a new builder-style object to manufacture [`StartSavingsPlansPurchaseRecommendationGenerationOutput`](crate::operation::start_savings_plans_purchase_recommendation_generation::StartSavingsPlansPurchaseRecommendationGenerationOutput).
    pub fn builder() -> crate::operation::start_savings_plans_purchase_recommendation_generation::builders::StartSavingsPlansPurchaseRecommendationGenerationOutputBuilder{
        crate::operation::start_savings_plans_purchase_recommendation_generation::builders::StartSavingsPlansPurchaseRecommendationGenerationOutputBuilder::default()
    }
}

/// A builder for [`StartSavingsPlansPurchaseRecommendationGenerationOutput`](crate::operation::start_savings_plans_purchase_recommendation_generation::StartSavingsPlansPurchaseRecommendationGenerationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartSavingsPlansPurchaseRecommendationGenerationOutputBuilder {
    pub(crate) recommendation_id: std::option::Option<std::string::String>,
    pub(crate) generation_started_time: std::option::Option<std::string::String>,
    pub(crate) estimated_completion_time: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartSavingsPlansPurchaseRecommendationGenerationOutputBuilder {
    /// <p>The ID for this specific recommendation.</p>
    pub fn recommendation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.recommendation_id = Some(input.into());
        self
    }
    /// <p>The ID for this specific recommendation.</p>
    pub fn set_recommendation_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recommendation_id = input;
        self
    }
    /// <p>The start time of the recommendation generation.</p>
    pub fn generation_started_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.generation_started_time = Some(input.into());
        self
    }
    /// <p>The start time of the recommendation generation.</p>
    pub fn set_generation_started_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.generation_started_time = input;
        self
    }
    /// <p>The estimated time for when the recommendation generation will complete.</p>
    pub fn estimated_completion_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.estimated_completion_time = Some(input.into());
        self
    }
    /// <p>The estimated time for when the recommendation generation will complete.</p>
    pub fn set_estimated_completion_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.estimated_completion_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartSavingsPlansPurchaseRecommendationGenerationOutput`](crate::operation::start_savings_plans_purchase_recommendation_generation::StartSavingsPlansPurchaseRecommendationGenerationOutput).
    pub fn build(self) -> crate::operation::start_savings_plans_purchase_recommendation_generation::StartSavingsPlansPurchaseRecommendationGenerationOutput{
        crate::operation::start_savings_plans_purchase_recommendation_generation::StartSavingsPlansPurchaseRecommendationGenerationOutput {
            recommendation_id: self.recommendation_id
            ,
            generation_started_time: self.generation_started_time
            ,
            estimated_completion_time: self.estimated_completion_time
            ,
            _request_id: self._request_id,
        }
    }
}
