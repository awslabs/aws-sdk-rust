// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetUsageForecastInput {
    /// <p>The start and end dates of the period that you want to retrieve usage forecast for. The start date is included in the period, but the end date isn't included in the period. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>. The start date must be equal to or later than the current date to avoid a validation error.</p>
    #[doc(hidden)]
    pub time_period: std::option::Option<crate::types::DateInterval>,
    /// <p>Which metric Cost Explorer uses to create your forecast.</p>
    /// <p>Valid values for a <code>GetUsageForecast</code> call are the following:</p>
    /// <ul>
    /// <li> <p>USAGE_QUANTITY</p> </li>
    /// <li> <p>NORMALIZED_USAGE_AMOUNT</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub metric: std::option::Option<crate::types::Metric>,
    /// <p>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code> forecasts or 12 months of <code>MONTHLY</code> forecasts.</p>
    /// <p>The <code>GetUsageForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    #[doc(hidden)]
    pub granularity: std::option::Option<crate::types::Granularity>,
    /// <p>The filters that you want to use to filter your forecast. The <code>GetUsageForecast</code> API supports filtering by the following dimensions:</p>
    /// <ul>
    /// <li> <p> <code>AZ</code> </p> </li>
    /// <li> <p> <code>INSTANCE_TYPE</code> </p> </li>
    /// <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>
    /// <li> <p> <code>LINKED_ACCOUNT_NAME</code> </p> </li>
    /// <li> <p> <code>OPERATION</code> </p> </li>
    /// <li> <p> <code>PURCHASE_TYPE</code> </p> </li>
    /// <li> <p> <code>REGION</code> </p> </li>
    /// <li> <p> <code>SERVICE</code> </p> </li>
    /// <li> <p> <code>USAGE_TYPE</code> </p> </li>
    /// <li> <p> <code>USAGE_TYPE_GROUP</code> </p> </li>
    /// <li> <p> <code>RECORD_TYPE</code> </p> </li>
    /// <li> <p> <code>OPERATING_SYSTEM</code> </p> </li>
    /// <li> <p> <code>TENANCY</code> </p> </li>
    /// <li> <p> <code>SCOPE</code> </p> </li>
    /// <li> <p> <code>PLATFORM</code> </p> </li>
    /// <li> <p> <code>SUBSCRIPTION_ID</code> </p> </li>
    /// <li> <p> <code>LEGAL_ENTITY_NAME</code> </p> </li>
    /// <li> <p> <code>DEPLOYMENT_OPTION</code> </p> </li>
    /// <li> <p> <code>DATABASE_ENGINE</code> </p> </li>
    /// <li> <p> <code>INSTANCE_TYPE_FAMILY</code> </p> </li>
    /// <li> <p> <code>BILLING_ENTITY</code> </p> </li>
    /// <li> <p> <code>RESERVATION_ID</code> </p> </li>
    /// <li> <p> <code>SAVINGS_PLAN_ARN</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub filter: std::option::Option<crate::types::Expression>,
    /// <p>Amazon Web Services Cost Explorer always returns the mean forecast as a single point. You can request a prediction interval around the mean by specifying a confidence level. The higher the confidence level, the more confident Cost Explorer is about the actual value falling in the prediction interval. Higher confidence levels result in wider prediction intervals.</p>
    #[doc(hidden)]
    pub prediction_interval_level: std::option::Option<i32>,
}
impl GetUsageForecastInput {
    /// <p>The start and end dates of the period that you want to retrieve usage forecast for. The start date is included in the period, but the end date isn't included in the period. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>. The start date must be equal to or later than the current date to avoid a validation error.</p>
    pub fn time_period(&self) -> std::option::Option<&crate::types::DateInterval> {
        self.time_period.as_ref()
    }
    /// <p>Which metric Cost Explorer uses to create your forecast.</p>
    /// <p>Valid values for a <code>GetUsageForecast</code> call are the following:</p>
    /// <ul>
    /// <li> <p>USAGE_QUANTITY</p> </li>
    /// <li> <p>NORMALIZED_USAGE_AMOUNT</p> </li>
    /// </ul>
    pub fn metric(&self) -> std::option::Option<&crate::types::Metric> {
        self.metric.as_ref()
    }
    /// <p>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code> forecasts or 12 months of <code>MONTHLY</code> forecasts.</p>
    /// <p>The <code>GetUsageForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn granularity(&self) -> std::option::Option<&crate::types::Granularity> {
        self.granularity.as_ref()
    }
    /// <p>The filters that you want to use to filter your forecast. The <code>GetUsageForecast</code> API supports filtering by the following dimensions:</p>
    /// <ul>
    /// <li> <p> <code>AZ</code> </p> </li>
    /// <li> <p> <code>INSTANCE_TYPE</code> </p> </li>
    /// <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>
    /// <li> <p> <code>LINKED_ACCOUNT_NAME</code> </p> </li>
    /// <li> <p> <code>OPERATION</code> </p> </li>
    /// <li> <p> <code>PURCHASE_TYPE</code> </p> </li>
    /// <li> <p> <code>REGION</code> </p> </li>
    /// <li> <p> <code>SERVICE</code> </p> </li>
    /// <li> <p> <code>USAGE_TYPE</code> </p> </li>
    /// <li> <p> <code>USAGE_TYPE_GROUP</code> </p> </li>
    /// <li> <p> <code>RECORD_TYPE</code> </p> </li>
    /// <li> <p> <code>OPERATING_SYSTEM</code> </p> </li>
    /// <li> <p> <code>TENANCY</code> </p> </li>
    /// <li> <p> <code>SCOPE</code> </p> </li>
    /// <li> <p> <code>PLATFORM</code> </p> </li>
    /// <li> <p> <code>SUBSCRIPTION_ID</code> </p> </li>
    /// <li> <p> <code>LEGAL_ENTITY_NAME</code> </p> </li>
    /// <li> <p> <code>DEPLOYMENT_OPTION</code> </p> </li>
    /// <li> <p> <code>DATABASE_ENGINE</code> </p> </li>
    /// <li> <p> <code>INSTANCE_TYPE_FAMILY</code> </p> </li>
    /// <li> <p> <code>BILLING_ENTITY</code> </p> </li>
    /// <li> <p> <code>RESERVATION_ID</code> </p> </li>
    /// <li> <p> <code>SAVINGS_PLAN_ARN</code> </p> </li>
    /// </ul>
    pub fn filter(&self) -> std::option::Option<&crate::types::Expression> {
        self.filter.as_ref()
    }
    /// <p>Amazon Web Services Cost Explorer always returns the mean forecast as a single point. You can request a prediction interval around the mean by specifying a confidence level. The higher the confidence level, the more confident Cost Explorer is about the actual value falling in the prediction interval. Higher confidence levels result in wider prediction intervals.</p>
    pub fn prediction_interval_level(&self) -> std::option::Option<i32> {
        self.prediction_interval_level
    }
}
impl GetUsageForecastInput {
    /// Creates a new builder-style object to manufacture [`GetUsageForecastInput`](crate::operation::get_usage_forecast::GetUsageForecastInput).
    pub fn builder() -> crate::operation::get_usage_forecast::builders::GetUsageForecastInputBuilder
    {
        crate::operation::get_usage_forecast::builders::GetUsageForecastInputBuilder::default()
    }
}

/// A builder for [`GetUsageForecastInput`](crate::operation::get_usage_forecast::GetUsageForecastInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetUsageForecastInputBuilder {
    pub(crate) time_period: std::option::Option<crate::types::DateInterval>,
    pub(crate) metric: std::option::Option<crate::types::Metric>,
    pub(crate) granularity: std::option::Option<crate::types::Granularity>,
    pub(crate) filter: std::option::Option<crate::types::Expression>,
    pub(crate) prediction_interval_level: std::option::Option<i32>,
}
impl GetUsageForecastInputBuilder {
    /// <p>The start and end dates of the period that you want to retrieve usage forecast for. The start date is included in the period, but the end date isn't included in the period. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>. The start date must be equal to or later than the current date to avoid a validation error.</p>
    pub fn time_period(mut self, input: crate::types::DateInterval) -> Self {
        self.time_period = Some(input);
        self
    }
    /// <p>The start and end dates of the period that you want to retrieve usage forecast for. The start date is included in the period, but the end date isn't included in the period. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>. The start date must be equal to or later than the current date to avoid a validation error.</p>
    pub fn set_time_period(
        mut self,
        input: std::option::Option<crate::types::DateInterval>,
    ) -> Self {
        self.time_period = input;
        self
    }
    /// <p>Which metric Cost Explorer uses to create your forecast.</p>
    /// <p>Valid values for a <code>GetUsageForecast</code> call are the following:</p>
    /// <ul>
    /// <li> <p>USAGE_QUANTITY</p> </li>
    /// <li> <p>NORMALIZED_USAGE_AMOUNT</p> </li>
    /// </ul>
    pub fn metric(mut self, input: crate::types::Metric) -> Self {
        self.metric = Some(input);
        self
    }
    /// <p>Which metric Cost Explorer uses to create your forecast.</p>
    /// <p>Valid values for a <code>GetUsageForecast</code> call are the following:</p>
    /// <ul>
    /// <li> <p>USAGE_QUANTITY</p> </li>
    /// <li> <p>NORMALIZED_USAGE_AMOUNT</p> </li>
    /// </ul>
    pub fn set_metric(mut self, input: std::option::Option<crate::types::Metric>) -> Self {
        self.metric = input;
        self
    }
    /// <p>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code> forecasts or 12 months of <code>MONTHLY</code> forecasts.</p>
    /// <p>The <code>GetUsageForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn granularity(mut self, input: crate::types::Granularity) -> Self {
        self.granularity = Some(input);
        self
    }
    /// <p>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code> forecasts or 12 months of <code>MONTHLY</code> forecasts.</p>
    /// <p>The <code>GetUsageForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    pub fn set_granularity(
        mut self,
        input: std::option::Option<crate::types::Granularity>,
    ) -> Self {
        self.granularity = input;
        self
    }
    /// <p>The filters that you want to use to filter your forecast. The <code>GetUsageForecast</code> API supports filtering by the following dimensions:</p>
    /// <ul>
    /// <li> <p> <code>AZ</code> </p> </li>
    /// <li> <p> <code>INSTANCE_TYPE</code> </p> </li>
    /// <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>
    /// <li> <p> <code>LINKED_ACCOUNT_NAME</code> </p> </li>
    /// <li> <p> <code>OPERATION</code> </p> </li>
    /// <li> <p> <code>PURCHASE_TYPE</code> </p> </li>
    /// <li> <p> <code>REGION</code> </p> </li>
    /// <li> <p> <code>SERVICE</code> </p> </li>
    /// <li> <p> <code>USAGE_TYPE</code> </p> </li>
    /// <li> <p> <code>USAGE_TYPE_GROUP</code> </p> </li>
    /// <li> <p> <code>RECORD_TYPE</code> </p> </li>
    /// <li> <p> <code>OPERATING_SYSTEM</code> </p> </li>
    /// <li> <p> <code>TENANCY</code> </p> </li>
    /// <li> <p> <code>SCOPE</code> </p> </li>
    /// <li> <p> <code>PLATFORM</code> </p> </li>
    /// <li> <p> <code>SUBSCRIPTION_ID</code> </p> </li>
    /// <li> <p> <code>LEGAL_ENTITY_NAME</code> </p> </li>
    /// <li> <p> <code>DEPLOYMENT_OPTION</code> </p> </li>
    /// <li> <p> <code>DATABASE_ENGINE</code> </p> </li>
    /// <li> <p> <code>INSTANCE_TYPE_FAMILY</code> </p> </li>
    /// <li> <p> <code>BILLING_ENTITY</code> </p> </li>
    /// <li> <p> <code>RESERVATION_ID</code> </p> </li>
    /// <li> <p> <code>SAVINGS_PLAN_ARN</code> </p> </li>
    /// </ul>
    pub fn filter(mut self, input: crate::types::Expression) -> Self {
        self.filter = Some(input);
        self
    }
    /// <p>The filters that you want to use to filter your forecast. The <code>GetUsageForecast</code> API supports filtering by the following dimensions:</p>
    /// <ul>
    /// <li> <p> <code>AZ</code> </p> </li>
    /// <li> <p> <code>INSTANCE_TYPE</code> </p> </li>
    /// <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>
    /// <li> <p> <code>LINKED_ACCOUNT_NAME</code> </p> </li>
    /// <li> <p> <code>OPERATION</code> </p> </li>
    /// <li> <p> <code>PURCHASE_TYPE</code> </p> </li>
    /// <li> <p> <code>REGION</code> </p> </li>
    /// <li> <p> <code>SERVICE</code> </p> </li>
    /// <li> <p> <code>USAGE_TYPE</code> </p> </li>
    /// <li> <p> <code>USAGE_TYPE_GROUP</code> </p> </li>
    /// <li> <p> <code>RECORD_TYPE</code> </p> </li>
    /// <li> <p> <code>OPERATING_SYSTEM</code> </p> </li>
    /// <li> <p> <code>TENANCY</code> </p> </li>
    /// <li> <p> <code>SCOPE</code> </p> </li>
    /// <li> <p> <code>PLATFORM</code> </p> </li>
    /// <li> <p> <code>SUBSCRIPTION_ID</code> </p> </li>
    /// <li> <p> <code>LEGAL_ENTITY_NAME</code> </p> </li>
    /// <li> <p> <code>DEPLOYMENT_OPTION</code> </p> </li>
    /// <li> <p> <code>DATABASE_ENGINE</code> </p> </li>
    /// <li> <p> <code>INSTANCE_TYPE_FAMILY</code> </p> </li>
    /// <li> <p> <code>BILLING_ENTITY</code> </p> </li>
    /// <li> <p> <code>RESERVATION_ID</code> </p> </li>
    /// <li> <p> <code>SAVINGS_PLAN_ARN</code> </p> </li>
    /// </ul>
    pub fn set_filter(mut self, input: std::option::Option<crate::types::Expression>) -> Self {
        self.filter = input;
        self
    }
    /// <p>Amazon Web Services Cost Explorer always returns the mean forecast as a single point. You can request a prediction interval around the mean by specifying a confidence level. The higher the confidence level, the more confident Cost Explorer is about the actual value falling in the prediction interval. Higher confidence levels result in wider prediction intervals.</p>
    pub fn prediction_interval_level(mut self, input: i32) -> Self {
        self.prediction_interval_level = Some(input);
        self
    }
    /// <p>Amazon Web Services Cost Explorer always returns the mean forecast as a single point. You can request a prediction interval around the mean by specifying a confidence level. The higher the confidence level, the more confident Cost Explorer is about the actual value falling in the prediction interval. Higher confidence levels result in wider prediction intervals.</p>
    pub fn set_prediction_interval_level(mut self, input: std::option::Option<i32>) -> Self {
        self.prediction_interval_level = input;
        self
    }
    /// Consumes the builder and constructs a [`GetUsageForecastInput`](crate::operation::get_usage_forecast::GetUsageForecastInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_usage_forecast::GetUsageForecastInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_usage_forecast::GetUsageForecastInput {
                time_period: self.time_period,
                metric: self.metric,
                granularity: self.granularity,
                filter: self.filter,
                prediction_interval_level: self.prediction_interval_level,
            },
        )
    }
}
