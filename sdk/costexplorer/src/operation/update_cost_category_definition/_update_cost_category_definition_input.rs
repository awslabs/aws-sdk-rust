// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateCostCategoryDefinitionInput {
    /// <p>The unique identifier for your Cost Category.</p>
    pub cost_category_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month). If the date isn't provided, it's the first day of the current month. Dates can't be before the previous twelve months, or in the future.</p>
    pub effective_start: ::std::option::Option<::std::string::String>,
    /// <p>The rule schema version in this particular Cost Category.</p>
    pub rule_version: ::std::option::Option<crate::types::CostCategoryRuleVersion>,
    /// <p>The <code>Expression</code> object used to categorize costs. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategoryRule.html">CostCategoryRule </a>. </p>
    pub rules: ::std::option::Option<::std::vec::Vec<crate::types::CostCategoryRule>>,
    /// <p>The default value for the cost category.</p>
    pub default_value: ::std::option::Option<::std::string::String>,
    /// <p> The split charge rules used to allocate your charges between your Cost Category values. </p>
    pub split_charge_rules: ::std::option::Option<::std::vec::Vec<crate::types::CostCategorySplitChargeRule>>,
}
impl UpdateCostCategoryDefinitionInput {
    /// <p>The unique identifier for your Cost Category.</p>
    pub fn cost_category_arn(&self) -> ::std::option::Option<&str> {
        self.cost_category_arn.as_deref()
    }
    /// <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month). If the date isn't provided, it's the first day of the current month. Dates can't be before the previous twelve months, or in the future.</p>
    pub fn effective_start(&self) -> ::std::option::Option<&str> {
        self.effective_start.as_deref()
    }
    /// <p>The rule schema version in this particular Cost Category.</p>
    pub fn rule_version(&self) -> ::std::option::Option<&crate::types::CostCategoryRuleVersion> {
        self.rule_version.as_ref()
    }
    /// <p>The <code>Expression</code> object used to categorize costs. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategoryRule.html">CostCategoryRule </a>. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rules.is_none()`.
    pub fn rules(&self) -> &[crate::types::CostCategoryRule] {
        self.rules.as_deref().unwrap_or_default()
    }
    /// <p>The default value for the cost category.</p>
    pub fn default_value(&self) -> ::std::option::Option<&str> {
        self.default_value.as_deref()
    }
    /// <p> The split charge rules used to allocate your charges between your Cost Category values. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.split_charge_rules.is_none()`.
    pub fn split_charge_rules(&self) -> &[crate::types::CostCategorySplitChargeRule] {
        self.split_charge_rules.as_deref().unwrap_or_default()
    }
}
impl UpdateCostCategoryDefinitionInput {
    /// Creates a new builder-style object to manufacture [`UpdateCostCategoryDefinitionInput`](crate::operation::update_cost_category_definition::UpdateCostCategoryDefinitionInput).
    pub fn builder() -> crate::operation::update_cost_category_definition::builders::UpdateCostCategoryDefinitionInputBuilder {
        crate::operation::update_cost_category_definition::builders::UpdateCostCategoryDefinitionInputBuilder::default()
    }
}

/// A builder for [`UpdateCostCategoryDefinitionInput`](crate::operation::update_cost_category_definition::UpdateCostCategoryDefinitionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateCostCategoryDefinitionInputBuilder {
    pub(crate) cost_category_arn: ::std::option::Option<::std::string::String>,
    pub(crate) effective_start: ::std::option::Option<::std::string::String>,
    pub(crate) rule_version: ::std::option::Option<crate::types::CostCategoryRuleVersion>,
    pub(crate) rules: ::std::option::Option<::std::vec::Vec<crate::types::CostCategoryRule>>,
    pub(crate) default_value: ::std::option::Option<::std::string::String>,
    pub(crate) split_charge_rules: ::std::option::Option<::std::vec::Vec<crate::types::CostCategorySplitChargeRule>>,
}
impl UpdateCostCategoryDefinitionInputBuilder {
    /// <p>The unique identifier for your Cost Category.</p>
    /// This field is required.
    pub fn cost_category_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cost_category_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for your Cost Category.</p>
    pub fn set_cost_category_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cost_category_arn = input;
        self
    }
    /// <p>The unique identifier for your Cost Category.</p>
    pub fn get_cost_category_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cost_category_arn
    }
    /// <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month). If the date isn't provided, it's the first day of the current month. Dates can't be before the previous twelve months, or in the future.</p>
    pub fn effective_start(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.effective_start = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month). If the date isn't provided, it's the first day of the current month. Dates can't be before the previous twelve months, or in the future.</p>
    pub fn set_effective_start(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.effective_start = input;
        self
    }
    /// <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month). If the date isn't provided, it's the first day of the current month. Dates can't be before the previous twelve months, or in the future.</p>
    pub fn get_effective_start(&self) -> &::std::option::Option<::std::string::String> {
        &self.effective_start
    }
    /// <p>The rule schema version in this particular Cost Category.</p>
    /// This field is required.
    pub fn rule_version(mut self, input: crate::types::CostCategoryRuleVersion) -> Self {
        self.rule_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rule schema version in this particular Cost Category.</p>
    pub fn set_rule_version(mut self, input: ::std::option::Option<crate::types::CostCategoryRuleVersion>) -> Self {
        self.rule_version = input;
        self
    }
    /// <p>The rule schema version in this particular Cost Category.</p>
    pub fn get_rule_version(&self) -> &::std::option::Option<crate::types::CostCategoryRuleVersion> {
        &self.rule_version
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The <code>Expression</code> object used to categorize costs. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategoryRule.html">CostCategoryRule </a>. </p>
    pub fn rules(mut self, input: crate::types::CostCategoryRule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>The <code>Expression</code> object used to categorize costs. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategoryRule.html">CostCategoryRule </a>. </p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CostCategoryRule>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>The <code>Expression</code> object used to categorize costs. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategoryRule.html">CostCategoryRule </a>. </p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CostCategoryRule>> {
        &self.rules
    }
    /// <p>The default value for the cost category.</p>
    pub fn default_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default value for the cost category.</p>
    pub fn set_default_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The default value for the cost category.</p>
    pub fn get_default_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_value
    }
    /// Appends an item to `split_charge_rules`.
    ///
    /// To override the contents of this collection use [`set_split_charge_rules`](Self::set_split_charge_rules).
    ///
    /// <p> The split charge rules used to allocate your charges between your Cost Category values. </p>
    pub fn split_charge_rules(mut self, input: crate::types::CostCategorySplitChargeRule) -> Self {
        let mut v = self.split_charge_rules.unwrap_or_default();
        v.push(input);
        self.split_charge_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p> The split charge rules used to allocate your charges between your Cost Category values. </p>
    pub fn set_split_charge_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CostCategorySplitChargeRule>>) -> Self {
        self.split_charge_rules = input;
        self
    }
    /// <p> The split charge rules used to allocate your charges between your Cost Category values. </p>
    pub fn get_split_charge_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CostCategorySplitChargeRule>> {
        &self.split_charge_rules
    }
    /// Consumes the builder and constructs a [`UpdateCostCategoryDefinitionInput`](crate::operation::update_cost_category_definition::UpdateCostCategoryDefinitionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_cost_category_definition::UpdateCostCategoryDefinitionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_cost_category_definition::UpdateCostCategoryDefinitionInput {
            cost_category_arn: self.cost_category_arn,
            effective_start: self.effective_start,
            rule_version: self.rule_version,
            rules: self.rules,
            default_value: self.default_value,
            split_charge_rules: self.split_charge_rules,
        })
    }
}
