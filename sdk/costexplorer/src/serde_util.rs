// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_anomaly_monitor_output_correct_errors(
    mut builder: crate::operation::create_anomaly_monitor::builders::CreateAnomalyMonitorOutputBuilder,
) -> crate::operation::create_anomaly_monitor::builders::CreateAnomalyMonitorOutputBuilder {
    if builder.monitor_arn.is_none() {
        builder.monitor_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_anomaly_subscription_output_correct_errors(
    mut builder: crate::operation::create_anomaly_subscription::builders::CreateAnomalySubscriptionOutputBuilder,
) -> crate::operation::create_anomaly_subscription::builders::CreateAnomalySubscriptionOutputBuilder {
    if builder.subscription_arn.is_none() {
        builder.subscription_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_anomalies_output_correct_errors(
    mut builder: crate::operation::get_anomalies::builders::GetAnomaliesOutputBuilder,
) -> crate::operation::get_anomalies::builders::GetAnomaliesOutputBuilder {
    if builder.anomalies.is_none() {
        builder.anomalies = Some(Default::default())
    }
    builder
}

pub(crate) fn get_anomaly_monitors_output_correct_errors(
    mut builder: crate::operation::get_anomaly_monitors::builders::GetAnomalyMonitorsOutputBuilder,
) -> crate::operation::get_anomaly_monitors::builders::GetAnomalyMonitorsOutputBuilder {
    if builder.anomaly_monitors.is_none() {
        builder.anomaly_monitors = Some(Default::default())
    }
    builder
}

pub(crate) fn get_anomaly_subscriptions_output_correct_errors(
    mut builder: crate::operation::get_anomaly_subscriptions::builders::GetAnomalySubscriptionsOutputBuilder,
) -> crate::operation::get_anomaly_subscriptions::builders::GetAnomalySubscriptionsOutputBuilder {
    if builder.anomaly_subscriptions.is_none() {
        builder.anomaly_subscriptions = Some(Default::default())
    }
    builder
}

pub(crate) fn get_cost_categories_output_correct_errors(
    mut builder: crate::operation::get_cost_categories::builders::GetCostCategoriesOutputBuilder,
) -> crate::operation::get_cost_categories::builders::GetCostCategoriesOutputBuilder {
    if builder.return_size.is_none() {
        builder.return_size = Some(Default::default())
    }
    if builder.total_size.is_none() {
        builder.total_size = Some(Default::default())
    }
    builder
}

pub(crate) fn get_dimension_values_output_correct_errors(
    mut builder: crate::operation::get_dimension_values::builders::GetDimensionValuesOutputBuilder,
) -> crate::operation::get_dimension_values::builders::GetDimensionValuesOutputBuilder {
    if builder.dimension_values.is_none() {
        builder.dimension_values = Some(Default::default())
    }
    if builder.return_size.is_none() {
        builder.return_size = Some(Default::default())
    }
    if builder.total_size.is_none() {
        builder.total_size = Some(Default::default())
    }
    builder
}

pub(crate) fn get_reservation_coverage_output_correct_errors(
    mut builder: crate::operation::get_reservation_coverage::builders::GetReservationCoverageOutputBuilder,
) -> crate::operation::get_reservation_coverage::builders::GetReservationCoverageOutputBuilder {
    if builder.coverages_by_time.is_none() {
        builder.coverages_by_time = Some(Default::default())
    }
    builder
}

pub(crate) fn get_reservation_utilization_output_correct_errors(
    mut builder: crate::operation::get_reservation_utilization::builders::GetReservationUtilizationOutputBuilder,
) -> crate::operation::get_reservation_utilization::builders::GetReservationUtilizationOutputBuilder {
    if builder.utilizations_by_time.is_none() {
        builder.utilizations_by_time = Some(Default::default())
    }
    builder
}

pub(crate) fn get_savings_plans_coverage_output_correct_errors(
    mut builder: crate::operation::get_savings_plans_coverage::builders::GetSavingsPlansCoverageOutputBuilder,
) -> crate::operation::get_savings_plans_coverage::builders::GetSavingsPlansCoverageOutputBuilder {
    if builder.savings_plans_coverages.is_none() {
        builder.savings_plans_coverages = Some(Default::default())
    }
    builder
}

pub(crate) fn get_savings_plans_utilization_output_correct_errors(
    mut builder: crate::operation::get_savings_plans_utilization::builders::GetSavingsPlansUtilizationOutputBuilder,
) -> crate::operation::get_savings_plans_utilization::builders::GetSavingsPlansUtilizationOutputBuilder {
    if builder.total.is_none() {
        builder.total = {
            let builder = crate::types::builders::SavingsPlansUtilizationAggregatesBuilder::default();
            Some(crate::serde_util::savings_plans_utilization_aggregates_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_savings_plans_utilization_details_output_correct_errors(
    mut builder: crate::operation::get_savings_plans_utilization_details::builders::GetSavingsPlansUtilizationDetailsOutputBuilder,
) -> crate::operation::get_savings_plans_utilization_details::builders::GetSavingsPlansUtilizationDetailsOutputBuilder {
    if builder.savings_plans_utilization_details.is_none() {
        builder.savings_plans_utilization_details = Some(Default::default())
    }
    if builder.time_period.is_none() {
        builder.time_period = {
            let builder = crate::types::builders::DateIntervalBuilder::default();
            crate::serde_util::date_interval_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_tags_output_correct_errors(
    mut builder: crate::operation::get_tags::builders::GetTagsOutputBuilder,
) -> crate::operation::get_tags::builders::GetTagsOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    if builder.return_size.is_none() {
        builder.return_size = Some(Default::default())
    }
    if builder.total_size.is_none() {
        builder.total_size = Some(Default::default())
    }
    builder
}

pub(crate) fn provide_anomaly_feedback_output_correct_errors(
    mut builder: crate::operation::provide_anomaly_feedback::builders::ProvideAnomalyFeedbackOutputBuilder,
) -> crate::operation::provide_anomaly_feedback::builders::ProvideAnomalyFeedbackOutputBuilder {
    if builder.anomaly_id.is_none() {
        builder.anomaly_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_anomaly_monitor_output_correct_errors(
    mut builder: crate::operation::update_anomaly_monitor::builders::UpdateAnomalyMonitorOutputBuilder,
) -> crate::operation::update_anomaly_monitor::builders::UpdateAnomalyMonitorOutputBuilder {
    if builder.monitor_arn.is_none() {
        builder.monitor_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_anomaly_subscription_output_correct_errors(
    mut builder: crate::operation::update_anomaly_subscription::builders::UpdateAnomalySubscriptionOutputBuilder,
) -> crate::operation::update_anomaly_subscription::builders::UpdateAnomalySubscriptionOutputBuilder {
    if builder.subscription_arn.is_none() {
        builder.subscription_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn savings_plans_utilization_aggregates_correct_errors(
    mut builder: crate::types::builders::SavingsPlansUtilizationAggregatesBuilder,
) -> crate::types::builders::SavingsPlansUtilizationAggregatesBuilder {
    if builder.utilization.is_none() {
        builder.utilization = {
            let builder = crate::types::builders::SavingsPlansUtilizationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn date_interval_correct_errors(mut builder: crate::types::builders::DateIntervalBuilder) -> crate::types::builders::DateIntervalBuilder {
    if builder.start.is_none() {
        builder.start = Some(Default::default())
    }
    if builder.end.is_none() {
        builder.end = Some(Default::default())
    }
    builder
}

pub(crate) fn cost_category_correct_errors(mut builder: crate::types::builders::CostCategoryBuilder) -> crate::types::builders::CostCategoryBuilder {
    if builder.cost_category_arn.is_none() {
        builder.cost_category_arn = Some(Default::default())
    }
    if builder.effective_start.is_none() {
        builder.effective_start = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.rule_version.is_none() {
        builder.rule_version = "no value was set".parse::<crate::types::CostCategoryRuleVersion>().ok()
    }
    if builder.rules.is_none() {
        builder.rules = Some(Default::default())
    }
    builder
}

pub(crate) fn rightsizing_recommendation_configuration_correct_errors(
    mut builder: crate::types::builders::RightsizingRecommendationConfigurationBuilder,
) -> crate::types::builders::RightsizingRecommendationConfigurationBuilder {
    if builder.recommendation_target.is_none() {
        builder.recommendation_target = "no value was set".parse::<crate::types::RecommendationTarget>().ok()
    }
    if builder.benefits_considered.is_none() {
        builder.benefits_considered = Some(Default::default())
    }
    builder
}

pub(crate) fn anomaly_correct_errors(mut builder: crate::types::builders::AnomalyBuilder) -> crate::types::builders::AnomalyBuilder {
    if builder.anomaly_id.is_none() {
        builder.anomaly_id = Some(Default::default())
    }
    if builder.anomaly_score.is_none() {
        builder.anomaly_score = {
            let builder = crate::types::builders::AnomalyScoreBuilder::default();
            Some(crate::serde_util::anomaly_score_correct_errors(builder).build())
        }
    }
    if builder.impact.is_none() {
        builder.impact = {
            let builder = crate::types::builders::ImpactBuilder::default();
            Some(crate::serde_util::impact_correct_errors(builder).build())
        }
    }
    if builder.monitor_arn.is_none() {
        builder.monitor_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn anomaly_monitor_correct_errors(
    mut builder: crate::types::builders::AnomalyMonitorBuilder,
) -> crate::types::builders::AnomalyMonitorBuilder {
    if builder.monitor_name.is_none() {
        builder.monitor_name = Some(Default::default())
    }
    if builder.monitor_type.is_none() {
        builder.monitor_type = "no value was set".parse::<crate::types::MonitorType>().ok()
    }
    builder
}

pub(crate) fn anomaly_subscription_correct_errors(
    mut builder: crate::types::builders::AnomalySubscriptionBuilder,
) -> crate::types::builders::AnomalySubscriptionBuilder {
    if builder.monitor_arn_list.is_none() {
        builder.monitor_arn_list = Some(Default::default())
    }
    if builder.subscribers.is_none() {
        builder.subscribers = Some(Default::default())
    }
    if builder.frequency.is_none() {
        builder.frequency = "no value was set".parse::<crate::types::AnomalySubscriptionFrequency>().ok()
    }
    if builder.subscription_name.is_none() {
        builder.subscription_name = Some(Default::default())
    }
    builder
}

pub(crate) fn cost_allocation_tag_correct_errors(
    mut builder: crate::types::builders::CostAllocationTagBuilder,
) -> crate::types::builders::CostAllocationTagBuilder {
    if builder.tag_key.is_none() {
        builder.tag_key = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CostAllocationTagType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::CostAllocationTagStatus>().ok()
    }
    builder
}

pub(crate) fn resource_tag_correct_errors(mut builder: crate::types::builders::ResourceTagBuilder) -> crate::types::builders::ResourceTagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn savings_plans_utilization_by_time_correct_errors(
    mut builder: crate::types::builders::SavingsPlansUtilizationByTimeBuilder,
) -> crate::types::builders::SavingsPlansUtilizationByTimeBuilder {
    if builder.time_period.is_none() {
        builder.time_period = {
            let builder = crate::types::builders::DateIntervalBuilder::default();
            crate::serde_util::date_interval_correct_errors(builder).build().ok()
        }
    }
    if builder.utilization.is_none() {
        builder.utilization = {
            let builder = crate::types::builders::SavingsPlansUtilizationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn anomaly_score_correct_errors(mut builder: crate::types::builders::AnomalyScoreBuilder) -> crate::types::builders::AnomalyScoreBuilder {
    if builder.max_score.is_none() {
        builder.max_score = Some(Default::default())
    }
    if builder.current_score.is_none() {
        builder.current_score = Some(Default::default())
    }
    builder
}

pub(crate) fn cost_category_split_charge_rule_correct_errors(
    mut builder: crate::types::builders::CostCategorySplitChargeRuleBuilder,
) -> crate::types::builders::CostCategorySplitChargeRuleBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.targets.is_none() {
        builder.targets = Some(Default::default())
    }
    if builder.method.is_none() {
        builder.method = "no value was set".parse::<crate::types::CostCategorySplitChargeMethod>().ok()
    }
    builder
}

pub(crate) fn impact_correct_errors(mut builder: crate::types::builders::ImpactBuilder) -> crate::types::builders::ImpactBuilder {
    if builder.max_impact.is_none() {
        builder.max_impact = Some(Default::default())
    }
    builder
}

pub(crate) fn cost_category_split_charge_rule_parameter_correct_errors(
    mut builder: crate::types::builders::CostCategorySplitChargeRuleParameterBuilder,
) -> crate::types::builders::CostCategorySplitChargeRuleParameterBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CostCategorySplitChargeRuleParameterType>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}
