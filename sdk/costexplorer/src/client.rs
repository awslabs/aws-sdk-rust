// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Cost Explorer Service
///
/// Client for invoking operations on AWS Cost Explorer Service. Each operation on AWS Cost Explorer Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_costexplorer::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_costexplorer::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_costexplorer::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateAnomalyMonitor`](crate::client::fluent_builders::CreateAnomalyMonitor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`anomaly_monitor(AnomalyMonitor)`](crate::client::fluent_builders::CreateAnomalyMonitor::anomaly_monitor) / [`set_anomaly_monitor(Option<AnomalyMonitor>)`](crate::client::fluent_builders::CreateAnomalyMonitor::set_anomaly_monitor): <p>The cost anomaly detection monitor object that you want to create.</p>
    ///   - [`resource_tags(Vec<ResourceTag>)`](crate::client::fluent_builders::CreateAnomalyMonitor::resource_tags) / [`set_resource_tags(Option<Vec<ResourceTag>>)`](crate::client::fluent_builders::CreateAnomalyMonitor::set_resource_tags): <p>An optional list of tags to associate with the specified <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_AnomalyMonitor.html"> <code>AnomalyMonitor</code> </a>. You can use resource tags to control access to your <code>monitor</code> using IAM policies.</p>  <p>Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>  <ul>   <li> <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services use</p> </li>   <li> <p>The maximum length of a key is 128 characters</p> </li>   <li> <p>The maximum length of a value is 256 characters</p> </li>   <li> <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code> </p> </li>   <li> <p>Keys and values are case sensitive</p> </li>   <li> <p>Keys and values are trimmed for any leading or trailing whitespaces</p> </li>   <li> <p>Don’t use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services use</p> </li>  </ul>
    /// - On success, responds with [`CreateAnomalyMonitorOutput`](crate::output::CreateAnomalyMonitorOutput) with field(s):
    ///   - [`monitor_arn(Option<String>)`](crate::output::CreateAnomalyMonitorOutput::monitor_arn): <p>The unique identifier of your newly created cost anomaly detection monitor.</p>
    /// - On failure, responds with [`SdkError<CreateAnomalyMonitorError>`](crate::error::CreateAnomalyMonitorError)
    pub fn create_anomaly_monitor(&self) -> crate::client::fluent_builders::CreateAnomalyMonitor {
        crate::client::fluent_builders::CreateAnomalyMonitor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateAnomalySubscription`](crate::client::fluent_builders::CreateAnomalySubscription) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`anomaly_subscription(AnomalySubscription)`](crate::client::fluent_builders::CreateAnomalySubscription::anomaly_subscription) / [`set_anomaly_subscription(Option<AnomalySubscription>)`](crate::client::fluent_builders::CreateAnomalySubscription::set_anomaly_subscription): <p>The cost anomaly subscription object that you want to create. </p>
    ///   - [`resource_tags(Vec<ResourceTag>)`](crate::client::fluent_builders::CreateAnomalySubscription::resource_tags) / [`set_resource_tags(Option<Vec<ResourceTag>>)`](crate::client::fluent_builders::CreateAnomalySubscription::set_resource_tags): <p>An optional list of tags to associate with the specified <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_AnomalySubscription.html"> <code>AnomalySubscription</code> </a>. You can use resource tags to control access to your <code>subscription</code> using IAM policies.</p>  <p>Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>  <ul>   <li> <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services use</p> </li>   <li> <p>The maximum length of a key is 128 characters</p> </li>   <li> <p>The maximum length of a value is 256 characters</p> </li>   <li> <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code> </p> </li>   <li> <p>Keys and values are case sensitive</p> </li>   <li> <p>Keys and values are trimmed for any leading or trailing whitespaces</p> </li>   <li> <p>Don’t use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services use</p> </li>  </ul>
    /// - On success, responds with [`CreateAnomalySubscriptionOutput`](crate::output::CreateAnomalySubscriptionOutput) with field(s):
    ///   - [`subscription_arn(Option<String>)`](crate::output::CreateAnomalySubscriptionOutput::subscription_arn): <p>The unique identifier of your newly created cost anomaly subscription. </p>
    /// - On failure, responds with [`SdkError<CreateAnomalySubscriptionError>`](crate::error::CreateAnomalySubscriptionError)
    pub fn create_anomaly_subscription(
        &self,
    ) -> crate::client::fluent_builders::CreateAnomalySubscription {
        crate::client::fluent_builders::CreateAnomalySubscription::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateCostCategoryDefinition`](crate::client::fluent_builders::CreateCostCategoryDefinition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::set_name): <p>The unique name of the Cost Category.</p>
    ///   - [`effective_start(impl Into<String>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::effective_start) / [`set_effective_start(Option<String>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::set_effective_start): <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month). If the date isn't provided, it's the first day of the current month. Dates can't be before the previous twelve months, or in the future.</p>
    ///   - [`rule_version(CostCategoryRuleVersion)`](crate::client::fluent_builders::CreateCostCategoryDefinition::rule_version) / [`set_rule_version(Option<CostCategoryRuleVersion>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::set_rule_version): <p>The rule schema version in this particular Cost Category.</p>
    ///   - [`rules(Vec<CostCategoryRule>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::rules) / [`set_rules(Option<Vec<CostCategoryRule>>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::set_rules): <p>The Cost Category rules used to categorize costs. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategoryRule.html">CostCategoryRule</a>.</p>
    ///   - [`default_value(impl Into<String>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::default_value) / [`set_default_value(Option<String>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::set_default_value): <p>The default value for the cost category.</p>
    ///   - [`split_charge_rules(Vec<CostCategorySplitChargeRule>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::split_charge_rules) / [`set_split_charge_rules(Option<Vec<CostCategorySplitChargeRule>>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::set_split_charge_rules): <p> The split charge rules used to allocate your charges between your Cost Category values. </p>
    ///   - [`resource_tags(Vec<ResourceTag>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::resource_tags) / [`set_resource_tags(Option<Vec<ResourceTag>>)`](crate::client::fluent_builders::CreateCostCategoryDefinition::set_resource_tags): <p>An optional list of tags to associate with the specified <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategory.html"> <code>CostCategory</code> </a>. You can use resource tags to control access to your <code>cost category</code> using IAM policies.</p>  <p>Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>  <ul>   <li> <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services use</p> </li>   <li> <p>The maximum length of a key is 128 characters</p> </li>   <li> <p>The maximum length of a value is 256 characters</p> </li>   <li> <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code> </p> </li>   <li> <p>Keys and values are case sensitive</p> </li>   <li> <p>Keys and values are trimmed for any leading or trailing whitespaces</p> </li>   <li> <p>Don’t use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services use</p> </li>  </ul>
    /// - On success, responds with [`CreateCostCategoryDefinitionOutput`](crate::output::CreateCostCategoryDefinitionOutput) with field(s):
    ///   - [`cost_category_arn(Option<String>)`](crate::output::CreateCostCategoryDefinitionOutput::cost_category_arn): <p>The unique identifier for your newly created Cost Category. </p>
    ///   - [`effective_start(Option<String>)`](crate::output::CreateCostCategoryDefinitionOutput::effective_start): <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month).</p>
    /// - On failure, responds with [`SdkError<CreateCostCategoryDefinitionError>`](crate::error::CreateCostCategoryDefinitionError)
    pub fn create_cost_category_definition(
        &self,
    ) -> crate::client::fluent_builders::CreateCostCategoryDefinition {
        crate::client::fluent_builders::CreateCostCategoryDefinition::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAnomalyMonitor`](crate::client::fluent_builders::DeleteAnomalyMonitor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteAnomalyMonitor::monitor_arn) / [`set_monitor_arn(Option<String>)`](crate::client::fluent_builders::DeleteAnomalyMonitor::set_monitor_arn): <p>The unique identifier of the cost anomaly monitor that you want to delete. </p>
    /// - On success, responds with [`DeleteAnomalyMonitorOutput`](crate::output::DeleteAnomalyMonitorOutput)

    /// - On failure, responds with [`SdkError<DeleteAnomalyMonitorError>`](crate::error::DeleteAnomalyMonitorError)
    pub fn delete_anomaly_monitor(&self) -> crate::client::fluent_builders::DeleteAnomalyMonitor {
        crate::client::fluent_builders::DeleteAnomalyMonitor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAnomalySubscription`](crate::client::fluent_builders::DeleteAnomalySubscription) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`subscription_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteAnomalySubscription::subscription_arn) / [`set_subscription_arn(Option<String>)`](crate::client::fluent_builders::DeleteAnomalySubscription::set_subscription_arn): <p>The unique identifier of the cost anomaly subscription that you want to delete. </p>
    /// - On success, responds with [`DeleteAnomalySubscriptionOutput`](crate::output::DeleteAnomalySubscriptionOutput)

    /// - On failure, responds with [`SdkError<DeleteAnomalySubscriptionError>`](crate::error::DeleteAnomalySubscriptionError)
    pub fn delete_anomaly_subscription(
        &self,
    ) -> crate::client::fluent_builders::DeleteAnomalySubscription {
        crate::client::fluent_builders::DeleteAnomalySubscription::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCostCategoryDefinition`](crate::client::fluent_builders::DeleteCostCategoryDefinition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cost_category_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteCostCategoryDefinition::cost_category_arn) / [`set_cost_category_arn(Option<String>)`](crate::client::fluent_builders::DeleteCostCategoryDefinition::set_cost_category_arn): <p>The unique identifier for your Cost Category. </p>
    /// - On success, responds with [`DeleteCostCategoryDefinitionOutput`](crate::output::DeleteCostCategoryDefinitionOutput) with field(s):
    ///   - [`cost_category_arn(Option<String>)`](crate::output::DeleteCostCategoryDefinitionOutput::cost_category_arn): <p>The unique identifier for your Cost Category. </p>
    ///   - [`effective_end(Option<String>)`](crate::output::DeleteCostCategoryDefinitionOutput::effective_end): <p>The effective end date of the Cost Category as a result of deleting it. No costs after this date is categorized by the deleted Cost Category. </p>
    /// - On failure, responds with [`SdkError<DeleteCostCategoryDefinitionError>`](crate::error::DeleteCostCategoryDefinitionError)
    pub fn delete_cost_category_definition(
        &self,
    ) -> crate::client::fluent_builders::DeleteCostCategoryDefinition {
        crate::client::fluent_builders::DeleteCostCategoryDefinition::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeCostCategoryDefinition`](crate::client::fluent_builders::DescribeCostCategoryDefinition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cost_category_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeCostCategoryDefinition::cost_category_arn) / [`set_cost_category_arn(Option<String>)`](crate::client::fluent_builders::DescribeCostCategoryDefinition::set_cost_category_arn): <p>The unique identifier for your Cost Category. </p>
    ///   - [`effective_on(impl Into<String>)`](crate::client::fluent_builders::DescribeCostCategoryDefinition::effective_on) / [`set_effective_on(Option<String>)`](crate::client::fluent_builders::DescribeCostCategoryDefinition::set_effective_on): <p>The date when the Cost Category was effective. </p>
    /// - On success, responds with [`DescribeCostCategoryDefinitionOutput`](crate::output::DescribeCostCategoryDefinitionOutput) with field(s):
    ///   - [`cost_category(Option<CostCategory>)`](crate::output::DescribeCostCategoryDefinitionOutput::cost_category): <p>The structure of Cost Categories. This includes detailed metadata and the set of rules for the <code>CostCategory</code> object.</p>
    /// - On failure, responds with [`SdkError<DescribeCostCategoryDefinitionError>`](crate::error::DescribeCostCategoryDefinitionError)
    pub fn describe_cost_category_definition(
        &self,
    ) -> crate::client::fluent_builders::DescribeCostCategoryDefinition {
        crate::client::fluent_builders::DescribeCostCategoryDefinition::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAnomalies`](crate::client::fluent_builders::GetAnomalies) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_arn(impl Into<String>)`](crate::client::fluent_builders::GetAnomalies::monitor_arn) / [`set_monitor_arn(Option<String>)`](crate::client::fluent_builders::GetAnomalies::set_monitor_arn): <p>Retrieves all of the cost anomalies detected for a specific cost anomaly monitor Amazon Resource Name (ARN). </p>
    ///   - [`date_interval(AnomalyDateInterval)`](crate::client::fluent_builders::GetAnomalies::date_interval) / [`set_date_interval(Option<AnomalyDateInterval>)`](crate::client::fluent_builders::GetAnomalies::set_date_interval): <p>Assigns the start and end dates for retrieving cost anomalies. The returned anomaly object will have an <code>AnomalyEndDate</code> in the specified time range. </p>
    ///   - [`feedback(AnomalyFeedbackType)`](crate::client::fluent_builders::GetAnomalies::feedback) / [`set_feedback(Option<AnomalyFeedbackType>)`](crate::client::fluent_builders::GetAnomalies::set_feedback): <p>Filters anomaly results by the feedback field on the anomaly object. </p>
    ///   - [`total_impact(TotalImpactFilter)`](crate::client::fluent_builders::GetAnomalies::total_impact) / [`set_total_impact(Option<TotalImpactFilter>)`](crate::client::fluent_builders::GetAnomalies::set_total_impact): <p>Filters anomaly results by the total impact field on the anomaly object. For example, you can filter anomalies <code>GREATER_THAN 200.00</code> to retrieve anomalies, with an estimated dollar impact greater than 200. </p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetAnomalies::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetAnomalies::set_next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetAnomalies::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetAnomalies::set_max_results): <p>The number of entries a paginated response contains. </p>
    /// - On success, responds with [`GetAnomaliesOutput`](crate::output::GetAnomaliesOutput) with field(s):
    ///   - [`anomalies(Option<Vec<Anomaly>>)`](crate::output::GetAnomaliesOutput::anomalies): <p>A list of cost anomalies. </p>
    ///   - [`next_page_token(Option<String>)`](crate::output::GetAnomaliesOutput::next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    /// - On failure, responds with [`SdkError<GetAnomaliesError>`](crate::error::GetAnomaliesError)
    pub fn get_anomalies(&self) -> crate::client::fluent_builders::GetAnomalies {
        crate::client::fluent_builders::GetAnomalies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAnomalyMonitors`](crate::client::fluent_builders::GetAnomalyMonitors) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_arn_list(Vec<String>)`](crate::client::fluent_builders::GetAnomalyMonitors::monitor_arn_list) / [`set_monitor_arn_list(Option<Vec<String>>)`](crate::client::fluent_builders::GetAnomalyMonitors::set_monitor_arn_list): <p>A list of cost anomaly monitor ARNs. </p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetAnomalyMonitors::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetAnomalyMonitors::set_next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetAnomalyMonitors::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetAnomalyMonitors::set_max_results): <p>The number of entries that a paginated response contains. </p>
    /// - On success, responds with [`GetAnomalyMonitorsOutput`](crate::output::GetAnomalyMonitorsOutput) with field(s):
    ///   - [`anomaly_monitors(Option<Vec<AnomalyMonitor>>)`](crate::output::GetAnomalyMonitorsOutput::anomaly_monitors): <p>A list of cost anomaly monitors that includes the detailed metadata for each monitor. </p>
    ///   - [`next_page_token(Option<String>)`](crate::output::GetAnomalyMonitorsOutput::next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    /// - On failure, responds with [`SdkError<GetAnomalyMonitorsError>`](crate::error::GetAnomalyMonitorsError)
    pub fn get_anomaly_monitors(&self) -> crate::client::fluent_builders::GetAnomalyMonitors {
        crate::client::fluent_builders::GetAnomalyMonitors::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAnomalySubscriptions`](crate::client::fluent_builders::GetAnomalySubscriptions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`subscription_arn_list(Vec<String>)`](crate::client::fluent_builders::GetAnomalySubscriptions::subscription_arn_list) / [`set_subscription_arn_list(Option<Vec<String>>)`](crate::client::fluent_builders::GetAnomalySubscriptions::set_subscription_arn_list): <p>A list of cost anomaly subscription ARNs. </p>
    ///   - [`monitor_arn(impl Into<String>)`](crate::client::fluent_builders::GetAnomalySubscriptions::monitor_arn) / [`set_monitor_arn(Option<String>)`](crate::client::fluent_builders::GetAnomalySubscriptions::set_monitor_arn): <p>Cost anomaly monitor ARNs. </p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetAnomalySubscriptions::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetAnomalySubscriptions::set_next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetAnomalySubscriptions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetAnomalySubscriptions::set_max_results): <p>The number of entries a paginated response contains. </p>
    /// - On success, responds with [`GetAnomalySubscriptionsOutput`](crate::output::GetAnomalySubscriptionsOutput) with field(s):
    ///   - [`anomaly_subscriptions(Option<Vec<AnomalySubscription>>)`](crate::output::GetAnomalySubscriptionsOutput::anomaly_subscriptions): <p>A list of cost anomaly subscriptions that includes the detailed metadata for each one. </p>
    ///   - [`next_page_token(Option<String>)`](crate::output::GetAnomalySubscriptionsOutput::next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    /// - On failure, responds with [`SdkError<GetAnomalySubscriptionsError>`](crate::error::GetAnomalySubscriptionsError)
    pub fn get_anomaly_subscriptions(
        &self,
    ) -> crate::client::fluent_builders::GetAnomalySubscriptions {
        crate::client::fluent_builders::GetAnomalySubscriptions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCostAndUsage`](crate::client::fluent_builders::GetCostAndUsage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`time_period(DateInterval)`](crate::client::fluent_builders::GetCostAndUsage::time_period) / [`set_time_period(Option<DateInterval>)`](crate::client::fluent_builders::GetCostAndUsage::set_time_period): <p>Sets the start date and end date for retrieving Amazon Web Services costs. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.</p>
    ///   - [`granularity(Granularity)`](crate::client::fluent_builders::GetCostAndUsage::granularity) / [`set_granularity(Option<Granularity>)`](crate::client::fluent_builders::GetCostAndUsage::set_granularity): <p>Sets the Amazon Web Services cost granularity to <code>MONTHLY</code> or <code>DAILY</code>, or <code>HOURLY</code>. If <code>Granularity</code> isn't set, the response object doesn't include the <code>Granularity</code>, either <code>MONTHLY</code> or <code>DAILY</code>, or <code>HOURLY</code>. </p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetCostAndUsage::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetCostAndUsage::set_filter): <p>Filters Amazon Web Services costs by different dimensions. For example, you can specify <code>SERVICE</code> and <code>LINKED_ACCOUNT</code> and get the costs that are associated with that account's usage of that service. You can nest <code>Expression</code> objects to define any combination of dimension filters. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>. </p>  <p>Valid values for <code>MatchOptions</code> for <code>Dimensions</code> are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>.</p>  <p>Valid values for <code>MatchOptions</code> for <code>CostCategories</code> and <code>Tags</code> are <code>EQUALS</code>, <code>ABSENT</code>, and <code>CASE_SENSITIVE</code>. Default values are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>.</p>
    ///   - [`metrics(Vec<String>)`](crate::client::fluent_builders::GetCostAndUsage::metrics) / [`set_metrics(Option<Vec<String>>)`](crate::client::fluent_builders::GetCostAndUsage::set_metrics): <p>Which metrics are returned in the query. For more information about blended and unblended rates, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/">Why does the "blended" annotation appear on some line items in my bill?</a>. </p>  <p>Valid values are <code>AmortizedCost</code>, <code>BlendedCost</code>, <code>NetAmortizedCost</code>, <code>NetUnblendedCost</code>, <code>NormalizedUsageAmount</code>, <code>UnblendedCost</code>, and <code>UsageQuantity</code>. </p> <note>   <p>If you return the <code>UsageQuantity</code> metric, the service aggregates all usage numbers without taking into account the units. For example, if you aggregate <code>usageQuantity</code> across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute hours and data transfer are measured in different units (for example, hours and GB). To get more meaningful <code>UsageQuantity</code> metrics, filter by <code>UsageType</code> or <code>UsageTypeGroups</code>. </p>  </note>  <p> <code>Metrics</code> is required for <code>GetCostAndUsage</code> requests.</p>
    ///   - [`group_by(Vec<GroupDefinition>)`](crate::client::fluent_builders::GetCostAndUsage::group_by) / [`set_group_by(Option<Vec<GroupDefinition>>)`](crate::client::fluent_builders::GetCostAndUsage::set_group_by): <p>You can group Amazon Web Services costs using up to two different groups, either dimensions, tag keys, cost categories, or any two group by types.</p>  <p>Valid values for the <code>DIMENSION</code> type are <code>AZ</code>, <code>INSTANCE_TYPE</code>, <code>LEGAL_ENTITY_NAME</code>, <code>INVOICING_ENTITY</code>, <code>LINKED_ACCOUNT</code>, <code>OPERATION</code>, <code>PLATFORM</code>, <code>PURCHASE_TYPE</code>, <code>SERVICE</code>, <code>TENANCY</code>, <code>RECORD_TYPE</code>, and <code>USAGE_TYPE</code>.</p>  <p>When you group by the <code>TAG</code> type and include a valid tag key, you get all tag values, including empty strings.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetCostAndUsage::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetCostAndUsage::set_next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    /// - On success, responds with [`GetCostAndUsageOutput`](crate::output::GetCostAndUsageOutput) with field(s):
    ///   - [`next_page_token(Option<String>)`](crate::output::GetCostAndUsageOutput::next_page_token): <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    ///   - [`group_definitions(Option<Vec<GroupDefinition>>)`](crate::output::GetCostAndUsageOutput::group_definitions): <p>The groups that are specified by the <code>Filter</code> or <code>GroupBy</code> parameters in the request.</p>
    ///   - [`results_by_time(Option<Vec<ResultByTime>>)`](crate::output::GetCostAndUsageOutput::results_by_time): <p>The time period that's covered by the results in the response.</p>
    ///   - [`dimension_value_attributes(Option<Vec<DimensionValuesWithAttributes>>)`](crate::output::GetCostAndUsageOutput::dimension_value_attributes): <p>The attributes that apply to a specific dimension value. For example, if the value is a linked account, the attribute is that account name.</p>
    /// - On failure, responds with [`SdkError<GetCostAndUsageError>`](crate::error::GetCostAndUsageError)
    pub fn get_cost_and_usage(&self) -> crate::client::fluent_builders::GetCostAndUsage {
        crate::client::fluent_builders::GetCostAndUsage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCostAndUsageWithResources`](crate::client::fluent_builders::GetCostAndUsageWithResources) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`time_period(DateInterval)`](crate::client::fluent_builders::GetCostAndUsageWithResources::time_period) / [`set_time_period(Option<DateInterval>)`](crate::client::fluent_builders::GetCostAndUsageWithResources::set_time_period): <p>Sets the start and end dates for retrieving Amazon Web Services costs. The range must be within the last 14 days (the start date cannot be earlier than 14 days ago). The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.</p>
    ///   - [`granularity(Granularity)`](crate::client::fluent_builders::GetCostAndUsageWithResources::granularity) / [`set_granularity(Option<Granularity>)`](crate::client::fluent_builders::GetCostAndUsageWithResources::set_granularity): <p>Sets the Amazon Web Services cost granularity to <code>MONTHLY</code>, <code>DAILY</code>, or <code>HOURLY</code>. If <code>Granularity</code> isn't set, the response object doesn't include the <code>Granularity</code>, <code>MONTHLY</code>, <code>DAILY</code>, or <code>HOURLY</code>. </p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetCostAndUsageWithResources::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetCostAndUsageWithResources::set_filter): <p>Filters Amazon Web Services costs by different dimensions. For example, you can specify <code>SERVICE</code> and <code>LINKED_ACCOUNT</code> and get the costs that are associated with that account's usage of that service. You can nest <code>Expression</code> objects to define any combination of dimension filters. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>. </p>  <p>The <code>GetCostAndUsageWithResources</code> operation requires that you either group by or filter by a <code>ResourceId</code>. It requires the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> <code>"SERVICE = Amazon Elastic Compute Cloud - Compute"</code> in the filter.</p>  <p>Valid values for <code>MatchOptions</code> for <code>Dimensions</code> are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>.</p>  <p>Valid values for <code>MatchOptions</code> for <code>CostCategories</code> and <code>Tags</code> are <code>EQUALS</code>, <code>ABSENT</code>, and <code>CASE_SENSITIVE</code>. Default values are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>.</p>
    ///   - [`metrics(Vec<String>)`](crate::client::fluent_builders::GetCostAndUsageWithResources::metrics) / [`set_metrics(Option<Vec<String>>)`](crate::client::fluent_builders::GetCostAndUsageWithResources::set_metrics): <p>Which metrics are returned in the query. For more information about blended and unblended rates, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/">Why does the "blended" annotation appear on some line items in my bill?</a>. </p>  <p>Valid values are <code>AmortizedCost</code>, <code>BlendedCost</code>, <code>NetAmortizedCost</code>, <code>NetUnblendedCost</code>, <code>NormalizedUsageAmount</code>, <code>UnblendedCost</code>, and <code>UsageQuantity</code>. </p> <note>   <p>If you return the <code>UsageQuantity</code> metric, the service aggregates all usage numbers without taking the units into account. For example, if you aggregate <code>usageQuantity</code> across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute hours and data transfer are measured in different units (for example, hour or GB). To get more meaningful <code>UsageQuantity</code> metrics, filter by <code>UsageType</code> or <code>UsageTypeGroups</code>. </p>  </note>  <p> <code>Metrics</code> is required for <code>GetCostAndUsageWithResources</code> requests.</p>
    ///   - [`group_by(Vec<GroupDefinition>)`](crate::client::fluent_builders::GetCostAndUsageWithResources::group_by) / [`set_group_by(Option<Vec<GroupDefinition>>)`](crate::client::fluent_builders::GetCostAndUsageWithResources::set_group_by): <p>You can group Amazon Web Services costs using up to two different groups: <code>DIMENSION</code>, <code>TAG</code>, <code>COST_CATEGORY</code>.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetCostAndUsageWithResources::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetCostAndUsageWithResources::set_next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    /// - On success, responds with [`GetCostAndUsageWithResourcesOutput`](crate::output::GetCostAndUsageWithResourcesOutput) with field(s):
    ///   - [`next_page_token(Option<String>)`](crate::output::GetCostAndUsageWithResourcesOutput::next_page_token): <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    ///   - [`group_definitions(Option<Vec<GroupDefinition>>)`](crate::output::GetCostAndUsageWithResourcesOutput::group_definitions): <p>The groups that are specified by the <code>Filter</code> or <code>GroupBy</code> parameters in the request.</p>
    ///   - [`results_by_time(Option<Vec<ResultByTime>>)`](crate::output::GetCostAndUsageWithResourcesOutput::results_by_time): <p>The time period that's covered by the results in the response.</p>
    ///   - [`dimension_value_attributes(Option<Vec<DimensionValuesWithAttributes>>)`](crate::output::GetCostAndUsageWithResourcesOutput::dimension_value_attributes): <p>The attributes that apply to a specific dimension value. For example, if the value is a linked account, the attribute is that account name.</p>
    /// - On failure, responds with [`SdkError<GetCostAndUsageWithResourcesError>`](crate::error::GetCostAndUsageWithResourcesError)
    pub fn get_cost_and_usage_with_resources(
        &self,
    ) -> crate::client::fluent_builders::GetCostAndUsageWithResources {
        crate::client::fluent_builders::GetCostAndUsageWithResources::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCostCategories`](crate::client::fluent_builders::GetCostCategories) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`search_string(impl Into<String>)`](crate::client::fluent_builders::GetCostCategories::search_string) / [`set_search_string(Option<String>)`](crate::client::fluent_builders::GetCostCategories::set_search_string): <p>The value that you want to search the filter values for.</p>  <p>If you don't specify a <code>CostCategoryName</code>, <code>SearchString</code> is used to filter Cost Category names that match the <code>SearchString</code> pattern. If you specify a <code>CostCategoryName</code>, <code>SearchString</code> is used to filter Cost Category values that match the <code>SearchString</code> pattern.</p>
    ///   - [`time_period(DateInterval)`](crate::client::fluent_builders::GetCostCategories::time_period) / [`set_time_period(Option<DateInterval>)`](crate::client::fluent_builders::GetCostCategories::set_time_period): <p>The time period of the request. </p>
    ///   - [`cost_category_name(impl Into<String>)`](crate::client::fluent_builders::GetCostCategories::cost_category_name) / [`set_cost_category_name(Option<String>)`](crate::client::fluent_builders::GetCostCategories::set_cost_category_name): <p>The unique name of the Cost Category.</p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetCostCategories::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetCostCategories::set_filter): <p>Use <code>Expression</code> to filter in various Cost Explorer APIs.</p>  <p>Not all <code>Expression</code> types are supported in each API. Refer to the documentation for each specific API to see what is supported.</p>  <p>There are two patterns:</p>  <ul>   <li> <p>Simple dimension values.</p>    <ul>     <li> <p>There are three types of simple dimension values: <code>CostCategories</code>, <code>Tags</code>, and <code>Dimensions</code>.</p>      <ul>       <li> <p>Specify the <code>CostCategories</code> field to define a filter that acts on Cost Categories.</p> </li>       <li> <p>Specify the <code>Tags</code> field to define a filter that acts on Cost Allocation Tags.</p> </li>       <li> <p>Specify the <code>Dimensions</code> field to define a filter that acts on the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_DimensionValues.html"> <code>DimensionValues</code> </a>.</p> </li>      </ul> </li>     <li> <p>For each filter type, you can set the dimension name and values for the filters that you plan to use.</p>      <ul>       <li> <p>For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. For <code>GetRightsizingRecommendation</code>, the Region is a full name (for example, <code>REGION==US East (N. Virginia)</code>.</p> </li>       <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> </li>       <li> <p>As shown in the previous example, lists of dimension values are combined with <code>OR</code> when applying the filter.</p> </li>      </ul> </li>     <li> <p>You can also set different match options to further control how the filter behaves. Not all APIs support match options. Refer to the documentation for each specific API to see what is supported.</p>      <ul>       <li> <p>For example, you can filter for linked account names that start with “a”.</p> </li>       <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "LINKED_ACCOUNT_NAME", "MatchOptions": [ "STARTS_WITH" ], "Values": [ "a" ] } }</code> </p> </li>      </ul> </li>    </ul> </li>   <li> <p>Compound <code>Expression</code> types with logical operations.</p>    <ul>     <li> <p>You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. By doing this, you can filter by more advanced options.</p> </li>     <li> <p>For example, you can filter by <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>.</p> </li>     <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> </li>    </ul> <note>     <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error: <code> { "And": [ ... ], "Dimensions": { "Key": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p>     <p>The following is an example of the corresponding error message: <code>"Expression has more than one roots. Only one root operator is allowed for each expression: And, Or, Not, Dimensions, Tags, CostCategories"</code> </p>    </note> </li>  </ul> <note>   <p>For the <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT isn't supported. OR isn't supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p>   <p>For the <code>GetReservationPurchaseRecommendation</code> action, only NOT is supported. AND and OR aren't supported. Dimensions are limited to <code>LINKED_ACCOUNT</code>.</p>  </note>
    ///   - [`sort_by(Vec<SortDefinition>)`](crate::client::fluent_builders::GetCostCategories::sort_by) / [`set_sort_by(Option<Vec<SortDefinition>>)`](crate::client::fluent_builders::GetCostCategories::set_sort_by): <p>The value that you sort the data by.</p>  <p>The key represents the cost and usage metrics. The following values are supported:</p>  <ul>   <li> <p> <code>BlendedCost</code> </p> </li>   <li> <p> <code>UnblendedCost</code> </p> </li>   <li> <p> <code>AmortizedCost</code> </p> </li>   <li> <p> <code>NetAmortizedCost</code> </p> </li>   <li> <p> <code>NetUnblendedCost</code> </p> </li>   <li> <p> <code>UsageQuantity</code> </p> </li>   <li> <p> <code>NormalizedUsageAmount</code> </p> </li>  </ul>  <p>The supported key values for the <code>SortOrder</code> value are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>  <p>When you use the <code>SortBy</code> value, the <code>NextPageToken</code> and <code>SearchString</code> key values aren't supported.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetCostCategories::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::GetCostCategories::set_max_results): <p>This field is only used when the <code>SortBy</code> value is provided in the request.</p>  <p>The maximum number of objects that are returned for this request. If <code>MaxResults</code> isn't specified with the <code>SortBy</code> value, the request returns 1000 results as the default value for this parameter.</p>  <p>For <code>GetCostCategories</code>, MaxResults has an upper quota of 1000.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetCostCategories::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetCostCategories::set_next_page_token): <p>If the number of objects that are still available for retrieval exceeds the quota, Amazon Web Services returns a NextPageToken value in the response. To retrieve the next batch of objects, provide the NextPageToken from the previous call in your next request.</p>
    /// - On success, responds with [`GetCostCategoriesOutput`](crate::output::GetCostCategoriesOutput) with field(s):
    ///   - [`next_page_token(Option<String>)`](crate::output::GetCostCategoriesOutput::next_page_token): <p>If the number of objects that are still available for retrieval exceeds the quota, Amazon Web Services returns a NextPageToken value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    ///   - [`cost_category_names(Option<Vec<String>>)`](crate::output::GetCostCategoriesOutput::cost_category_names): <p>The names of the Cost Categories.</p>
    ///   - [`cost_category_values(Option<Vec<String>>)`](crate::output::GetCostCategoriesOutput::cost_category_values): <p>The Cost Category values.</p>  <p>If the <code>CostCategoryName</code> key isn't specified in the request, the <code>CostCategoryValues</code> fields aren't returned. </p>
    ///   - [`return_size(Option<i32>)`](crate::output::GetCostCategoriesOutput::return_size): <p>The number of objects that are returned.</p>
    ///   - [`total_size(Option<i32>)`](crate::output::GetCostCategoriesOutput::total_size): <p>The total number of objects.</p>
    /// - On failure, responds with [`SdkError<GetCostCategoriesError>`](crate::error::GetCostCategoriesError)
    pub fn get_cost_categories(&self) -> crate::client::fluent_builders::GetCostCategories {
        crate::client::fluent_builders::GetCostCategories::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCostForecast`](crate::client::fluent_builders::GetCostForecast) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`time_period(DateInterval)`](crate::client::fluent_builders::GetCostForecast::time_period) / [`set_time_period(Option<DateInterval>)`](crate::client::fluent_builders::GetCostForecast::set_time_period): <p>The period of time that you want the forecast to cover. The start date must be equal to or no later than the current date to avoid a validation error.</p>
    ///   - [`metric(Metric)`](crate::client::fluent_builders::GetCostForecast::metric) / [`set_metric(Option<Metric>)`](crate::client::fluent_builders::GetCostForecast::set_metric): <p>Which metric Cost Explorer uses to create your forecast. For more information about blended and unblended rates, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/">Why does the "blended" annotation appear on some line items in my bill?</a>. </p>  <p>Valid values for a <code>GetCostForecast</code> call are the following:</p>  <ul>   <li> <p>AMORTIZED_COST</p> </li>   <li> <p>BLENDED_COST</p> </li>   <li> <p>NET_AMORTIZED_COST</p> </li>   <li> <p>NET_UNBLENDED_COST</p> </li>   <li> <p>UNBLENDED_COST</p> </li>  </ul>
    ///   - [`granularity(Granularity)`](crate::client::fluent_builders::GetCostForecast::granularity) / [`set_granularity(Option<Granularity>)`](crate::client::fluent_builders::GetCostForecast::set_granularity): <p>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code> forecasts or 12 months of <code>MONTHLY</code> forecasts.</p>  <p>The <code>GetCostForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetCostForecast::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetCostForecast::set_filter): <p>The filters that you want to use to filter your forecast. The <code>GetCostForecast</code> API supports filtering by the following dimensions:</p>  <ul>   <li> <p> <code>AZ</code> </p> </li>   <li> <p> <code>INSTANCE_TYPE</code> </p> </li>   <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>   <li> <p> <code>LINKED_ACCOUNT_NAME</code> </p> </li>   <li> <p> <code>OPERATION</code> </p> </li>   <li> <p> <code>PURCHASE_TYPE</code> </p> </li>   <li> <p> <code>REGION</code> </p> </li>   <li> <p> <code>SERVICE</code> </p> </li>   <li> <p> <code>USAGE_TYPE</code> </p> </li>   <li> <p> <code>USAGE_TYPE_GROUP</code> </p> </li>   <li> <p> <code>RECORD_TYPE</code> </p> </li>   <li> <p> <code>OPERATING_SYSTEM</code> </p> </li>   <li> <p> <code>TENANCY</code> </p> </li>   <li> <p> <code>SCOPE</code> </p> </li>   <li> <p> <code>PLATFORM</code> </p> </li>   <li> <p> <code>SUBSCRIPTION_ID</code> </p> </li>   <li> <p> <code>LEGAL_ENTITY_NAME</code> </p> </li>   <li> <p> <code>DEPLOYMENT_OPTION</code> </p> </li>   <li> <p> <code>DATABASE_ENGINE</code> </p> </li>   <li> <p> <code>INSTANCE_TYPE_FAMILY</code> </p> </li>   <li> <p> <code>BILLING_ENTITY</code> </p> </li>   <li> <p> <code>RESERVATION_ID</code> </p> </li>   <li> <p> <code>SAVINGS_PLAN_ARN</code> </p> </li>  </ul>
    ///   - [`prediction_interval_level(i32)`](crate::client::fluent_builders::GetCostForecast::prediction_interval_level) / [`set_prediction_interval_level(Option<i32>)`](crate::client::fluent_builders::GetCostForecast::set_prediction_interval_level): <p>Cost Explorer always returns the mean forecast as a single point. You can request a prediction interval around the mean by specifying a confidence level. The higher the confidence level, the more confident Cost Explorer is about the actual value falling in the prediction interval. Higher confidence levels result in wider prediction intervals.</p>
    /// - On success, responds with [`GetCostForecastOutput`](crate::output::GetCostForecastOutput) with field(s):
    ///   - [`total(Option<MetricValue>)`](crate::output::GetCostForecastOutput::total): <p>How much you are forecasted to spend over the forecast period, in <code>USD</code>.</p>
    ///   - [`forecast_results_by_time(Option<Vec<ForecastResult>>)`](crate::output::GetCostForecastOutput::forecast_results_by_time): <p>The forecasts for your query, in order. For <code>DAILY</code> forecasts, this is a list of days. For <code>MONTHLY</code> forecasts, this is a list of months.</p>
    /// - On failure, responds with [`SdkError<GetCostForecastError>`](crate::error::GetCostForecastError)
    pub fn get_cost_forecast(&self) -> crate::client::fluent_builders::GetCostForecast {
        crate::client::fluent_builders::GetCostForecast::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDimensionValues`](crate::client::fluent_builders::GetDimensionValues) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`search_string(impl Into<String>)`](crate::client::fluent_builders::GetDimensionValues::search_string) / [`set_search_string(Option<String>)`](crate::client::fluent_builders::GetDimensionValues::set_search_string): <p>The value that you want to search the filter values for.</p>
    ///   - [`time_period(DateInterval)`](crate::client::fluent_builders::GetDimensionValues::time_period) / [`set_time_period(Option<DateInterval>)`](crate::client::fluent_builders::GetDimensionValues::set_time_period): <p>The start date and end date for retrieving the dimension values. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.</p>
    ///   - [`dimension(Dimension)`](crate::client::fluent_builders::GetDimensionValues::dimension) / [`set_dimension(Option<Dimension>)`](crate::client::fluent_builders::GetDimensionValues::set_dimension): <p>The name of the dimension. Each <code>Dimension</code> is available for a different <code>Context</code>. For more information, see <code>Context</code>. <code>LINK_ACCOUNT_NAME</code> and <code>SERVICE_CODE</code> can only be used in <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/AAPI_CostCategoryRule.html">CostCategoryRule</a>. </p>
    ///   - [`context(Context)`](crate::client::fluent_builders::GetDimensionValues::context) / [`set_context(Option<Context>)`](crate::client::fluent_builders::GetDimensionValues::set_context): <p>The context for the call to <code>GetDimensionValues</code>. This can be <code>RESERVATIONS</code> or <code>COST_AND_USAGE</code>. The default value is <code>COST_AND_USAGE</code>. If the context is set to <code>RESERVATIONS</code>, the resulting dimension values can be used in the <code>GetReservationUtilization</code> operation. If the context is set to <code>COST_AND_USAGE</code>, the resulting dimension values can be used in the <code>GetCostAndUsage</code> operation.</p>  <p>If you set the context to <code>COST_AND_USAGE</code>, you can use the following dimensions for searching:</p>  <ul>   <li> <p>AZ - The Availability Zone. An example is <code>us-east-1a</code>.</p> </li>   <li> <p>BILLING_ENTITY - The Amazon Web Services seller that your account is with. Possible values are the following:</p> <p>- Amazon Web Services(Amazon Web Services): The entity that sells Amazon Web Services.</p> <p>- AISPL (Amazon Internet Services Pvt. Ltd.): The local Indian entity that's an acting reseller for Amazon Web Services in India.</p> <p>- Amazon Web Services Marketplace: The entity that supports the sale of solutions that are built on Amazon Web Services by third-party software providers.</p> </li>   <li> <p>CACHE_ENGINE - The Amazon ElastiCache operating system. Examples are Windows or Linux.</p> </li>   <li> <p>DEPLOYMENT_OPTION - The scope of Amazon Relational Database Service deployments. Valid values are <code>SingleAZ</code> and <code>MultiAZ</code>.</p> </li>   <li> <p>DATABASE_ENGINE - The Amazon Relational Database Service database. Examples are Aurora or MySQL.</p> </li>   <li> <p>INSTANCE_TYPE - The type of Amazon EC2 instance. An example is <code>m4.xlarge</code>.</p> </li>   <li> <p>INSTANCE_TYPE_FAMILY - A family of instance types optimized to fit different use cases. Examples are <code>Compute Optimized</code> (for example, <code>C4</code>, <code>C5</code>, <code>C6g</code>, and <code>C7g</code>), <code>Memory Optimization</code> (for example, <code>R4</code>, <code>R5n</code>, <code>R5b</code>, and <code>R6g</code>).</p> </li>   <li> <p>INVOICING_ENTITY - The name of the entity that issues the Amazon Web Services invoice.</p> </li>   <li> <p>LEGAL_ENTITY_NAME - The name of the organization that sells you Amazon Web Services services, such as Amazon Web Services.</p> </li>   <li> <p>LINKED_ACCOUNT - The description in the attribute map that includes the full name of the member account. The value field contains the Amazon Web Services ID of the member account.</p> </li>   <li> <p>OPERATING_SYSTEM - The operating system. Examples are Windows or Linux.</p> </li>   <li> <p>OPERATION - The action performed. Examples include <code>RunInstance</code> and <code>CreateBucket</code>.</p> </li>   <li> <p>PLATFORM - The Amazon EC2 operating system. Examples are Windows or Linux.</p> </li>   <li> <p>PURCHASE_TYPE - The reservation type of the purchase that this usage is related to. Examples include On-Demand Instances and Standard Reserved Instances.</p> </li>   <li> <p>RESERVATION_ID - The unique identifier for an Amazon Web Services Reservation Instance.</p> </li>   <li> <p>SAVINGS_PLAN_ARN - The unique identifier for your Savings Plans.</p> </li>   <li> <p>SAVINGS_PLANS_TYPE - Type of Savings Plans (EC2 Instance or Compute).</p> </li>   <li> <p>SERVICE - The Amazon Web Services service such as Amazon DynamoDB.</p> </li>   <li> <p>TENANCY - The tenancy of a resource. Examples are shared or dedicated.</p> </li>   <li> <p>USAGE_TYPE - The type of usage. An example is DataTransfer-In-Bytes. The response for the <code>GetDimensionValues</code> operation includes a unit attribute. Examples include GB and Hrs.</p> </li>   <li> <p>USAGE_TYPE_GROUP - The grouping of common usage types. An example is Amazon EC2: CloudWatch – Alarms. The response for this operation includes a unit attribute.</p> </li>   <li> <p>REGION - The Amazon Web Services Region.</p> </li>   <li> <p>RECORD_TYPE - The different types of charges such as Reserved Instance (RI) fees, usage costs, tax refunds, and credits.</p> </li>   <li> <p>RESOURCE_ID - The unique identifier of the resource. ResourceId is an opt-in feature only available for last 14 days for EC2-Compute Service.</p> </li>  </ul>  <p>If you set the context to <code>RESERVATIONS</code>, you can use the following dimensions for searching:</p>  <ul>   <li> <p>AZ - The Availability Zone. An example is <code>us-east-1a</code>.</p> </li>   <li> <p>CACHE_ENGINE - The Amazon ElastiCache operating system. Examples are Windows or Linux.</p> </li>   <li> <p>DEPLOYMENT_OPTION - The scope of Amazon Relational Database Service deployments. Valid values are <code>SingleAZ</code> and <code>MultiAZ</code>.</p> </li>   <li> <p>INSTANCE_TYPE - The type of Amazon EC2 instance. An example is <code>m4.xlarge</code>.</p> </li>   <li> <p>LINKED_ACCOUNT - The description in the attribute map that includes the full name of the member account. The value field contains the Amazon Web Services ID of the member account.</p> </li>   <li> <p>PLATFORM - The Amazon EC2 operating system. Examples are Windows or Linux.</p> </li>   <li> <p>REGION - The Amazon Web Services Region.</p> </li>   <li> <p>SCOPE (Utilization only) - The scope of a Reserved Instance (RI). Values are regional or a single Availability Zone.</p> </li>   <li> <p>TAG (Coverage only) - The tags that are associated with a Reserved Instance (RI).</p> </li>   <li> <p>TENANCY - The tenancy of a resource. Examples are shared or dedicated.</p> </li>  </ul>  <p>If you set the context to <code>SAVINGS_PLANS</code>, you can use the following dimensions for searching:</p>  <ul>   <li> <p>SAVINGS_PLANS_TYPE - Type of Savings Plans (EC2 Instance or Compute)</p> </li>   <li> <p>PAYMENT_OPTION - The payment option for the given Savings Plans (for example, All Upfront)</p> </li>   <li> <p>REGION - The Amazon Web Services Region.</p> </li>   <li> <p>INSTANCE_TYPE_FAMILY - The family of instances (For example, <code>m5</code>)</p> </li>   <li> <p>LINKED_ACCOUNT - The description in the attribute map that includes the full name of the member account. The value field contains the Amazon Web Services ID of the member account.</p> </li>   <li> <p>SAVINGS_PLAN_ARN - The unique identifier for your Savings Plans.</p> </li>  </ul>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetDimensionValues::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetDimensionValues::set_filter): <p>Use <code>Expression</code> to filter in various Cost Explorer APIs.</p>  <p>Not all <code>Expression</code> types are supported in each API. Refer to the documentation for each specific API to see what is supported.</p>  <p>There are two patterns:</p>  <ul>   <li> <p>Simple dimension values.</p>    <ul>     <li> <p>There are three types of simple dimension values: <code>CostCategories</code>, <code>Tags</code>, and <code>Dimensions</code>.</p>      <ul>       <li> <p>Specify the <code>CostCategories</code> field to define a filter that acts on Cost Categories.</p> </li>       <li> <p>Specify the <code>Tags</code> field to define a filter that acts on Cost Allocation Tags.</p> </li>       <li> <p>Specify the <code>Dimensions</code> field to define a filter that acts on the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_DimensionValues.html"> <code>DimensionValues</code> </a>.</p> </li>      </ul> </li>     <li> <p>For each filter type, you can set the dimension name and values for the filters that you plan to use.</p>      <ul>       <li> <p>For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. For <code>GetRightsizingRecommendation</code>, the Region is a full name (for example, <code>REGION==US East (N. Virginia)</code>.</p> </li>       <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> </li>       <li> <p>As shown in the previous example, lists of dimension values are combined with <code>OR</code> when applying the filter.</p> </li>      </ul> </li>     <li> <p>You can also set different match options to further control how the filter behaves. Not all APIs support match options. Refer to the documentation for each specific API to see what is supported.</p>      <ul>       <li> <p>For example, you can filter for linked account names that start with “a”.</p> </li>       <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "LINKED_ACCOUNT_NAME", "MatchOptions": [ "STARTS_WITH" ], "Values": [ "a" ] } }</code> </p> </li>      </ul> </li>    </ul> </li>   <li> <p>Compound <code>Expression</code> types with logical operations.</p>    <ul>     <li> <p>You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. By doing this, you can filter by more advanced options.</p> </li>     <li> <p>For example, you can filter by <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>.</p> </li>     <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> </li>    </ul> <note>     <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error: <code> { "And": [ ... ], "Dimensions": { "Key": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p>     <p>The following is an example of the corresponding error message: <code>"Expression has more than one roots. Only one root operator is allowed for each expression: And, Or, Not, Dimensions, Tags, CostCategories"</code> </p>    </note> </li>  </ul> <note>   <p>For the <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT isn't supported. OR isn't supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p>   <p>For the <code>GetReservationPurchaseRecommendation</code> action, only NOT is supported. AND and OR aren't supported. Dimensions are limited to <code>LINKED_ACCOUNT</code>.</p>  </note>
    ///   - [`sort_by(Vec<SortDefinition>)`](crate::client::fluent_builders::GetDimensionValues::sort_by) / [`set_sort_by(Option<Vec<SortDefinition>>)`](crate::client::fluent_builders::GetDimensionValues::set_sort_by): <p>The value that you want to sort the data by.</p>  <p>The key represents cost and usage metrics. The following values are supported:</p>  <ul>   <li> <p> <code>BlendedCost</code> </p> </li>   <li> <p> <code>UnblendedCost</code> </p> </li>   <li> <p> <code>AmortizedCost</code> </p> </li>   <li> <p> <code>NetAmortizedCost</code> </p> </li>   <li> <p> <code>NetUnblendedCost</code> </p> </li>   <li> <p> <code>UsageQuantity</code> </p> </li>   <li> <p> <code>NormalizedUsageAmount</code> </p> </li>  </ul>  <p>The supported values for the <code>SortOrder</code> key are <code>ASCENDING</code> or <code>DESCENDING</code>.</p>  <p>When you specify a <code>SortBy</code> paramater, the context must be <code>COST_AND_USAGE</code>. Further, when using <code>SortBy</code>, <code>NextPageToken</code> and <code>SearchString</code> aren't supported.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetDimensionValues::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::GetDimensionValues::set_max_results): <p>This field is only used when SortBy is provided in the request. The maximum number of objects that are returned for this request. If MaxResults isn't specified with SortBy, the request returns 1000 results as the default value for this parameter.</p>  <p>For <code>GetDimensionValues</code>, MaxResults has an upper limit of 1000.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetDimensionValues::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetDimensionValues::set_next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    /// - On success, responds with [`GetDimensionValuesOutput`](crate::output::GetDimensionValuesOutput) with field(s):
    ///   - [`dimension_values(Option<Vec<DimensionValuesWithAttributes>>)`](crate::output::GetDimensionValuesOutput::dimension_values): <p>The filters that you used to filter your request. Some dimensions are available only for a specific context.</p>  <p>If you set the context to <code>COST_AND_USAGE</code>, you can use the following dimensions for searching:</p>  <ul>   <li> <p>AZ - The Availability Zone. An example is <code>us-east-1a</code>.</p> </li>   <li> <p>DATABASE_ENGINE - The Amazon Relational Database Service database. Examples are Aurora or MySQL.</p> </li>   <li> <p>INSTANCE_TYPE - The type of Amazon EC2 instance. An example is <code>m4.xlarge</code>.</p> </li>   <li> <p>LEGAL_ENTITY_NAME - The name of the organization that sells you Amazon Web Services services, such as Amazon Web Services.</p> </li>   <li> <p>LINKED_ACCOUNT - The description in the attribute map that includes the full name of the member account. The value field contains the Amazon Web Services ID of the member account.</p> </li>   <li> <p>OPERATING_SYSTEM - The operating system. Examples are Windows or Linux.</p> </li>   <li> <p>OPERATION - The action performed. Examples include <code>RunInstance</code> and <code>CreateBucket</code>.</p> </li>   <li> <p>PLATFORM - The Amazon EC2 operating system. Examples are Windows or Linux.</p> </li>   <li> <p>PURCHASE_TYPE - The reservation type of the purchase to which this usage is related. Examples include On-Demand Instances and Standard Reserved Instances.</p> </li>   <li> <p>SERVICE - The Amazon Web Services service such as Amazon DynamoDB.</p> </li>   <li> <p>USAGE_TYPE - The type of usage. An example is DataTransfer-In-Bytes. The response for the <code>GetDimensionValues</code> operation includes a unit attribute. Examples include GB and Hrs.</p> </li>   <li> <p>USAGE_TYPE_GROUP - The grouping of common usage types. An example is Amazon EC2: CloudWatch – Alarms. The response for this operation includes a unit attribute.</p> </li>   <li> <p>RECORD_TYPE - The different types of charges such as RI fees, usage costs, tax refunds, and credits.</p> </li>   <li> <p>RESOURCE_ID - The unique identifier of the resource. ResourceId is an opt-in feature only available for last 14 days for EC2-Compute Service. You can opt-in by enabling <code>Hourly</code> and <code>Resource Level Data</code> in Cost Management Console preferences.</p> </li>  </ul>  <p>If you set the context to <code>RESERVATIONS</code>, you can use the following dimensions for searching:</p>  <ul>   <li> <p>AZ - The Availability Zone. An example is <code>us-east-1a</code>.</p> </li>   <li> <p>CACHE_ENGINE - The Amazon ElastiCache operating system. Examples are Windows or Linux.</p> </li>   <li> <p>DEPLOYMENT_OPTION - The scope of Amazon Relational Database Service deployments. Valid values are <code>SingleAZ</code> and <code>MultiAZ</code>.</p> </li>   <li> <p>INSTANCE_TYPE - The type of Amazon EC2 instance. An example is <code>m4.xlarge</code>.</p> </li>   <li> <p>LINKED_ACCOUNT - The description in the attribute map that includes the full name of the member account. The value field contains the Amazon Web Services ID of the member account.</p> </li>   <li> <p>PLATFORM - The Amazon EC2 operating system. Examples are Windows or Linux.</p> </li>   <li> <p>REGION - The Amazon Web Services Region.</p> </li>   <li> <p>SCOPE (Utilization only) - The scope of a Reserved Instance (RI). Values are regional or a single Availability Zone.</p> </li>   <li> <p>TAG (Coverage only) - The tags that are associated with a Reserved Instance (RI).</p> </li>   <li> <p>TENANCY - The tenancy of a resource. Examples are shared or dedicated.</p> </li>  </ul>  <p>If you set the context to <code>SAVINGS_PLANS</code>, you can use the following dimensions for searching:</p>  <ul>   <li> <p>SAVINGS_PLANS_TYPE - Type of Savings Plans (EC2 Instance or Compute)</p> </li>   <li> <p>PAYMENT_OPTION - Payment option for the given Savings Plans (for example, All Upfront)</p> </li>   <li> <p>REGION - The Amazon Web Services Region.</p> </li>   <li> <p>INSTANCE_TYPE_FAMILY - The family of instances (For example, <code>m5</code>)</p> </li>   <li> <p>LINKED_ACCOUNT - The description in the attribute map that includes the full name of the member account. The value field contains the Amazon Web Services ID of the member account.</p> </li>   <li> <p>SAVINGS_PLAN_ARN - The unique identifier for your Savings Plan</p> </li>  </ul>
    ///   - [`return_size(Option<i32>)`](crate::output::GetDimensionValuesOutput::return_size): <p>The number of results that Amazon Web Services returned at one time.</p>
    ///   - [`total_size(Option<i32>)`](crate::output::GetDimensionValuesOutput::total_size): <p>The total number of search results.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::GetDimensionValuesOutput::next_page_token): <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    /// - On failure, responds with [`SdkError<GetDimensionValuesError>`](crate::error::GetDimensionValuesError)
    pub fn get_dimension_values(&self) -> crate::client::fluent_builders::GetDimensionValues {
        crate::client::fluent_builders::GetDimensionValues::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReservationCoverage`](crate::client::fluent_builders::GetReservationCoverage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`time_period(DateInterval)`](crate::client::fluent_builders::GetReservationCoverage::time_period) / [`set_time_period(Option<DateInterval>)`](crate::client::fluent_builders::GetReservationCoverage::set_time_period): <p>The start and end dates of the period that you want to retrieve data about reservation coverage for. You can retrieve data for a maximum of 13 months: the last 12 months and the current month. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>. </p>
    ///   - [`group_by(Vec<GroupDefinition>)`](crate::client::fluent_builders::GetReservationCoverage::group_by) / [`set_group_by(Option<Vec<GroupDefinition>>)`](crate::client::fluent_builders::GetReservationCoverage::set_group_by): <p>You can group the data by the following attributes:</p>  <ul>   <li> <p>AZ</p> </li>   <li> <p>CACHE_ENGINE</p> </li>   <li> <p>DATABASE_ENGINE</p> </li>   <li> <p>DEPLOYMENT_OPTION</p> </li>   <li> <p>INSTANCE_TYPE</p> </li>   <li> <p>INVOICING_ENTITY</p> </li>   <li> <p>LINKED_ACCOUNT</p> </li>   <li> <p>OPERATING_SYSTEM</p> </li>   <li> <p>PLATFORM</p> </li>   <li> <p>REGION</p> </li>   <li> <p>TENANCY</p> </li>  </ul>
    ///   - [`granularity(Granularity)`](crate::client::fluent_builders::GetReservationCoverage::granularity) / [`set_granularity(Option<Granularity>)`](crate::client::fluent_builders::GetReservationCoverage::set_granularity): <p>The granularity of the Amazon Web Services cost data for the reservation. Valid values are <code>MONTHLY</code> and <code>DAILY</code>.</p>  <p>If <code>GroupBy</code> is set, <code>Granularity</code> can't be set. If <code>Granularity</code> isn't set, the response object doesn't include <code>Granularity</code>, either <code>MONTHLY</code> or <code>DAILY</code>.</p>  <p>The <code>GetReservationCoverage</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetReservationCoverage::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetReservationCoverage::set_filter): <p>Filters utilization data by dimensions. You can filter by the following dimensions:</p>  <ul>   <li> <p>AZ</p> </li>   <li> <p>CACHE_ENGINE</p> </li>   <li> <p>DATABASE_ENGINE</p> </li>   <li> <p>DEPLOYMENT_OPTION</p> </li>   <li> <p>INSTANCE_TYPE</p> </li>   <li> <p>LINKED_ACCOUNT</p> </li>   <li> <p>OPERATING_SYSTEM</p> </li>   <li> <p>PLATFORM</p> </li>   <li> <p>REGION</p> </li>   <li> <p>SERVICE</p> </li>   <li> <p>TAG</p> </li>   <li> <p>TENANCY</p> </li>  </ul>  <p> <code>GetReservationCoverage</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension. You can nest only one level deep. If there are multiple values for a dimension, they are OR'd together.</p>  <p>If you don't provide a <code>SERVICE</code> filter, Cost Explorer defaults to EC2.</p>  <p>Cost category is also supported.</p>
    ///   - [`metrics(Vec<String>)`](crate::client::fluent_builders::GetReservationCoverage::metrics) / [`set_metrics(Option<Vec<String>>)`](crate::client::fluent_builders::GetReservationCoverage::set_metrics): <p>The measurement that you want your reservation coverage reported in.</p>  <p>Valid values are <code>Hour</code>, <code>Unit</code>, and <code>Cost</code>. You can use multiple values in a request.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetReservationCoverage::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetReservationCoverage::set_next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    ///   - [`sort_by(SortDefinition)`](crate::client::fluent_builders::GetReservationCoverage::sort_by) / [`set_sort_by(Option<SortDefinition>)`](crate::client::fluent_builders::GetReservationCoverage::set_sort_by): <p>The value by which you want to sort the data.</p>  <p>The following values are supported for <code>Key</code>:</p>  <ul>   <li> <p> <code>OnDemandCost</code> </p> </li>   <li> <p> <code>CoverageHoursPercentage</code> </p> </li>   <li> <p> <code>OnDemandHours</code> </p> </li>   <li> <p> <code>ReservedHours</code> </p> </li>   <li> <p> <code>TotalRunningHours</code> </p> </li>   <li> <p> <code>CoverageNormalizedUnitsPercentage</code> </p> </li>   <li> <p> <code>OnDemandNormalizedUnits</code> </p> </li>   <li> <p> <code>ReservedNormalizedUnits</code> </p> </li>   <li> <p> <code>TotalRunningNormalizedUnits</code> </p> </li>   <li> <p> <code>Time</code> </p> </li>  </ul>  <p>Supported values for <code>SortOrder</code> are <code>ASCENDING</code> or <code>DESCENDING</code>.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetReservationCoverage::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetReservationCoverage::set_max_results): <p>The maximum number of objects that you returned for this request. If more objects are available, in the response, Amazon Web Services provides a NextPageToken value that you can use in a subsequent call to get the next batch of objects.</p>
    /// - On success, responds with [`GetReservationCoverageOutput`](crate::output::GetReservationCoverageOutput) with field(s):
    ///   - [`coverages_by_time(Option<Vec<CoverageByTime>>)`](crate::output::GetReservationCoverageOutput::coverages_by_time): <p>The amount of time that your reservations covered.</p>
    ///   - [`total(Option<Coverage>)`](crate::output::GetReservationCoverageOutput::total): <p>The total amount of instance usage that a reservation covered.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::GetReservationCoverageOutput::next_page_token): <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    /// - On failure, responds with [`SdkError<GetReservationCoverageError>`](crate::error::GetReservationCoverageError)
    pub fn get_reservation_coverage(
        &self,
    ) -> crate::client::fluent_builders::GetReservationCoverage {
        crate::client::fluent_builders::GetReservationCoverage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReservationPurchaseRecommendation`](crate::client::fluent_builders::GetReservationPurchaseRecommendation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::set_account_id): <p>The account ID that's associated with the recommendation. </p>
    ///   - [`service(impl Into<String>)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::service) / [`set_service(Option<String>)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::set_service): <p>The specific service that you want recommendations for.</p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::set_filter): <p>Use <code>Expression</code> to filter in various Cost Explorer APIs.</p>  <p>Not all <code>Expression</code> types are supported in each API. Refer to the documentation for each specific API to see what is supported.</p>  <p>There are two patterns:</p>  <ul>   <li> <p>Simple dimension values.</p>    <ul>     <li> <p>There are three types of simple dimension values: <code>CostCategories</code>, <code>Tags</code>, and <code>Dimensions</code>.</p>      <ul>       <li> <p>Specify the <code>CostCategories</code> field to define a filter that acts on Cost Categories.</p> </li>       <li> <p>Specify the <code>Tags</code> field to define a filter that acts on Cost Allocation Tags.</p> </li>       <li> <p>Specify the <code>Dimensions</code> field to define a filter that acts on the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_DimensionValues.html"> <code>DimensionValues</code> </a>.</p> </li>      </ul> </li>     <li> <p>For each filter type, you can set the dimension name and values for the filters that you plan to use.</p>      <ul>       <li> <p>For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. For <code>GetRightsizingRecommendation</code>, the Region is a full name (for example, <code>REGION==US East (N. Virginia)</code>.</p> </li>       <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> </li>       <li> <p>As shown in the previous example, lists of dimension values are combined with <code>OR</code> when applying the filter.</p> </li>      </ul> </li>     <li> <p>You can also set different match options to further control how the filter behaves. Not all APIs support match options. Refer to the documentation for each specific API to see what is supported.</p>      <ul>       <li> <p>For example, you can filter for linked account names that start with “a”.</p> </li>       <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "LINKED_ACCOUNT_NAME", "MatchOptions": [ "STARTS_WITH" ], "Values": [ "a" ] } }</code> </p> </li>      </ul> </li>    </ul> </li>   <li> <p>Compound <code>Expression</code> types with logical operations.</p>    <ul>     <li> <p>You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. By doing this, you can filter by more advanced options.</p> </li>     <li> <p>For example, you can filter by <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>.</p> </li>     <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> </li>    </ul> <note>     <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error: <code> { "And": [ ... ], "Dimensions": { "Key": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p>     <p>The following is an example of the corresponding error message: <code>"Expression has more than one roots. Only one root operator is allowed for each expression: And, Or, Not, Dimensions, Tags, CostCategories"</code> </p>    </note> </li>  </ul> <note>   <p>For the <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT isn't supported. OR isn't supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p>   <p>For the <code>GetReservationPurchaseRecommendation</code> action, only NOT is supported. AND and OR aren't supported. Dimensions are limited to <code>LINKED_ACCOUNT</code>.</p>  </note>
    ///   - [`account_scope(AccountScope)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::account_scope) / [`set_account_scope(Option<AccountScope>)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::set_account_scope): <p>The account scope that you want your recommendations for. Amazon Web Services calculates recommendations including the management account and member accounts if the value is set to <code>PAYER</code>. If the value is <code>LINKED</code>, recommendations are calculated for individual member accounts only.</p>
    ///   - [`lookback_period_in_days(LookbackPeriodInDays)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::lookback_period_in_days) / [`set_lookback_period_in_days(Option<LookbackPeriodInDays>)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::set_lookback_period_in_days): <p>The number of previous days that you want Amazon Web Services to consider when it calculates your recommendations.</p>
    ///   - [`term_in_years(TermInYears)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::term_in_years) / [`set_term_in_years(Option<TermInYears>)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::set_term_in_years): <p>The reservation term that you want recommendations for.</p>
    ///   - [`payment_option(PaymentOption)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::payment_option) / [`set_payment_option(Option<PaymentOption>)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::set_payment_option): <p>The reservation purchase option that you want recommendations for.</p>
    ///   - [`service_specification(ServiceSpecification)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::service_specification) / [`set_service_specification(Option<ServiceSpecification>)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::set_service_specification): <p>The hardware specifications for the service instances that you want recommendations for, such as standard or convertible Amazon EC2 instances.</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::page_size) / [`set_page_size(i32)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::set_page_size): <p>The number of recommendations that you want returned in a single response object.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetReservationPurchaseRecommendation::set_next_page_token): <p>The pagination token that indicates the next set of results that you want to retrieve.</p>
    /// - On success, responds with [`GetReservationPurchaseRecommendationOutput`](crate::output::GetReservationPurchaseRecommendationOutput) with field(s):
    ///   - [`metadata(Option<ReservationPurchaseRecommendationMetadata>)`](crate::output::GetReservationPurchaseRecommendationOutput::metadata): <p>Information about this specific recommendation call, such as the time stamp for when Cost Explorer generated this recommendation.</p>
    ///   - [`recommendations(Option<Vec<ReservationPurchaseRecommendation>>)`](crate::output::GetReservationPurchaseRecommendationOutput::recommendations): <p>Recommendations for reservations to purchase.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::GetReservationPurchaseRecommendationOutput::next_page_token): <p>The pagination token for the next set of retrievable results.</p>
    /// - On failure, responds with [`SdkError<GetReservationPurchaseRecommendationError>`](crate::error::GetReservationPurchaseRecommendationError)
    pub fn get_reservation_purchase_recommendation(
        &self,
    ) -> crate::client::fluent_builders::GetReservationPurchaseRecommendation {
        crate::client::fluent_builders::GetReservationPurchaseRecommendation::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`GetReservationUtilization`](crate::client::fluent_builders::GetReservationUtilization) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`time_period(DateInterval)`](crate::client::fluent_builders::GetReservationUtilization::time_period) / [`set_time_period(Option<DateInterval>)`](crate::client::fluent_builders::GetReservationUtilization::set_time_period): <p>Sets the start and end dates for retrieving Reserved Instance (RI) utilization. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>. </p>
    ///   - [`group_by(Vec<GroupDefinition>)`](crate::client::fluent_builders::GetReservationUtilization::group_by) / [`set_group_by(Option<Vec<GroupDefinition>>)`](crate::client::fluent_builders::GetReservationUtilization::set_group_by): <p>Groups only by <code>SUBSCRIPTION_ID</code>. Metadata is included.</p>
    ///   - [`granularity(Granularity)`](crate::client::fluent_builders::GetReservationUtilization::granularity) / [`set_granularity(Option<Granularity>)`](crate::client::fluent_builders::GetReservationUtilization::set_granularity): <p>If <code>GroupBy</code> is set, <code>Granularity</code> can't be set. If <code>Granularity</code> isn't set, the response object doesn't include <code>Granularity</code>, either <code>MONTHLY</code> or <code>DAILY</code>. If both <code>GroupBy</code> and <code>Granularity</code> aren't set, <code>GetReservationUtilization</code> defaults to <code>DAILY</code>.</p>  <p>The <code>GetReservationUtilization</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetReservationUtilization::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetReservationUtilization::set_filter): <p>Filters utilization data by dimensions. You can filter by the following dimensions:</p>  <ul>   <li> <p>AZ</p> </li>   <li> <p>CACHE_ENGINE</p> </li>   <li> <p>DEPLOYMENT_OPTION</p> </li>   <li> <p>INSTANCE_TYPE</p> </li>   <li> <p>LINKED_ACCOUNT</p> </li>   <li> <p>OPERATING_SYSTEM</p> </li>   <li> <p>PLATFORM</p> </li>   <li> <p>REGION</p> </li>   <li> <p>SERVICE</p> </li>   <li> <p>SCOPE</p> </li>   <li> <p>TENANCY</p> </li>  </ul>  <p> <code>GetReservationUtilization</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension, and nesting is supported up to only one level deep. If there are multiple values for a dimension, they are OR'd together.</p>
    ///   - [`sort_by(SortDefinition)`](crate::client::fluent_builders::GetReservationUtilization::sort_by) / [`set_sort_by(Option<SortDefinition>)`](crate::client::fluent_builders::GetReservationUtilization::set_sort_by): <p>The value that you want to sort the data by.</p>  <p>The following values are supported for <code>Key</code>:</p>  <ul>   <li> <p> <code>UtilizationPercentage</code> </p> </li>   <li> <p> <code>UtilizationPercentageInUnits</code> </p> </li>   <li> <p> <code>PurchasedHours</code> </p> </li>   <li> <p> <code>PurchasedUnits</code> </p> </li>   <li> <p> <code>TotalActualHours</code> </p> </li>   <li> <p> <code>TotalActualUnits</code> </p> </li>   <li> <p> <code>UnusedHours</code> </p> </li>   <li> <p> <code>UnusedUnits</code> </p> </li>   <li> <p> <code>OnDemandCostOfRIHoursUsed</code> </p> </li>   <li> <p> <code>NetRISavings</code> </p> </li>   <li> <p> <code>TotalPotentialRISavings</code> </p> </li>   <li> <p> <code>AmortizedUpfrontFee</code> </p> </li>   <li> <p> <code>AmortizedRecurringFee</code> </p> </li>   <li> <p> <code>TotalAmortizedFee</code> </p> </li>   <li> <p> <code>RICostForUnusedHours</code> </p> </li>   <li> <p> <code>RealizedSavings</code> </p> </li>   <li> <p> <code>UnrealizedSavings</code> </p> </li>  </ul>  <p>The supported values for <code>SortOrder</code> are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetReservationUtilization::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetReservationUtilization::set_next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetReservationUtilization::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetReservationUtilization::set_max_results): <p>The maximum number of objects that you returned for this request. If more objects are available, in the response, Amazon Web Services provides a NextPageToken value that you can use in a subsequent call to get the next batch of objects.</p>
    /// - On success, responds with [`GetReservationUtilizationOutput`](crate::output::GetReservationUtilizationOutput) with field(s):
    ///   - [`utilizations_by_time(Option<Vec<UtilizationByTime>>)`](crate::output::GetReservationUtilizationOutput::utilizations_by_time): <p>The amount of time that you used your Reserved Instances (RIs).</p>
    ///   - [`total(Option<ReservationAggregates>)`](crate::output::GetReservationUtilizationOutput::total): <p>The total amount of time that you used your Reserved Instances (RIs).</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::GetReservationUtilizationOutput::next_page_token): <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    /// - On failure, responds with [`SdkError<GetReservationUtilizationError>`](crate::error::GetReservationUtilizationError)
    pub fn get_reservation_utilization(
        &self,
    ) -> crate::client::fluent_builders::GetReservationUtilization {
        crate::client::fluent_builders::GetReservationUtilization::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRightsizingRecommendation`](crate::client::fluent_builders::GetRightsizingRecommendation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetRightsizingRecommendation::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetRightsizingRecommendation::set_filter): <p>Use <code>Expression</code> to filter in various Cost Explorer APIs.</p>  <p>Not all <code>Expression</code> types are supported in each API. Refer to the documentation for each specific API to see what is supported.</p>  <p>There are two patterns:</p>  <ul>   <li> <p>Simple dimension values.</p>    <ul>     <li> <p>There are three types of simple dimension values: <code>CostCategories</code>, <code>Tags</code>, and <code>Dimensions</code>.</p>      <ul>       <li> <p>Specify the <code>CostCategories</code> field to define a filter that acts on Cost Categories.</p> </li>       <li> <p>Specify the <code>Tags</code> field to define a filter that acts on Cost Allocation Tags.</p> </li>       <li> <p>Specify the <code>Dimensions</code> field to define a filter that acts on the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_DimensionValues.html"> <code>DimensionValues</code> </a>.</p> </li>      </ul> </li>     <li> <p>For each filter type, you can set the dimension name and values for the filters that you plan to use.</p>      <ul>       <li> <p>For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. For <code>GetRightsizingRecommendation</code>, the Region is a full name (for example, <code>REGION==US East (N. Virginia)</code>.</p> </li>       <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> </li>       <li> <p>As shown in the previous example, lists of dimension values are combined with <code>OR</code> when applying the filter.</p> </li>      </ul> </li>     <li> <p>You can also set different match options to further control how the filter behaves. Not all APIs support match options. Refer to the documentation for each specific API to see what is supported.</p>      <ul>       <li> <p>For example, you can filter for linked account names that start with “a”.</p> </li>       <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "LINKED_ACCOUNT_NAME", "MatchOptions": [ "STARTS_WITH" ], "Values": [ "a" ] } }</code> </p> </li>      </ul> </li>    </ul> </li>   <li> <p>Compound <code>Expression</code> types with logical operations.</p>    <ul>     <li> <p>You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. By doing this, you can filter by more advanced options.</p> </li>     <li> <p>For example, you can filter by <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>.</p> </li>     <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> </li>    </ul> <note>     <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error: <code> { "And": [ ... ], "Dimensions": { "Key": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p>     <p>The following is an example of the corresponding error message: <code>"Expression has more than one roots. Only one root operator is allowed for each expression: And, Or, Not, Dimensions, Tags, CostCategories"</code> </p>    </note> </li>  </ul> <note>   <p>For the <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT isn't supported. OR isn't supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p>   <p>For the <code>GetReservationPurchaseRecommendation</code> action, only NOT is supported. AND and OR aren't supported. Dimensions are limited to <code>LINKED_ACCOUNT</code>.</p>  </note>
    ///   - [`configuration(RightsizingRecommendationConfiguration)`](crate::client::fluent_builders::GetRightsizingRecommendation::configuration) / [`set_configuration(Option<RightsizingRecommendationConfiguration>)`](crate::client::fluent_builders::GetRightsizingRecommendation::set_configuration): <p>You can use Configuration to customize recommendations across two attributes. You can choose to view recommendations for instances within the same instance families or across different instance families. You can also choose to view your estimated savings that are associated with recommendations with consideration of existing Savings Plans or RI benefits, or neither. </p>
    ///   - [`service(impl Into<String>)`](crate::client::fluent_builders::GetRightsizingRecommendation::service) / [`set_service(Option<String>)`](crate::client::fluent_builders::GetRightsizingRecommendation::set_service): <p>The specific service that you want recommendations for. The only valid value for <code>GetRightsizingRecommendation</code> is "<code>AmazonEC2</code>".</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::GetRightsizingRecommendation::page_size) / [`set_page_size(i32)`](crate::client::fluent_builders::GetRightsizingRecommendation::set_page_size): <p>The number of recommendations that you want returned in a single response object.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetRightsizingRecommendation::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetRightsizingRecommendation::set_next_page_token): <p>The pagination token that indicates the next set of results that you want to retrieve.</p>
    /// - On success, responds with [`GetRightsizingRecommendationOutput`](crate::output::GetRightsizingRecommendationOutput) with field(s):
    ///   - [`metadata(Option<RightsizingRecommendationMetadata>)`](crate::output::GetRightsizingRecommendationOutput::metadata): <p>Information regarding this specific recommendation set.</p>
    ///   - [`summary(Option<RightsizingRecommendationSummary>)`](crate::output::GetRightsizingRecommendationOutput::summary): <p>Summary of this recommendation set.</p>
    ///   - [`rightsizing_recommendations(Option<Vec<RightsizingRecommendation>>)`](crate::output::GetRightsizingRecommendationOutput::rightsizing_recommendations): <p>Recommendations to rightsize resources.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::GetRightsizingRecommendationOutput::next_page_token): <p>The token to retrieve the next set of results.</p>
    ///   - [`configuration(Option<RightsizingRecommendationConfiguration>)`](crate::output::GetRightsizingRecommendationOutput::configuration): <p>You can use Configuration to customize recommendations across two attributes. You can choose to view recommendations for instances within the same instance families or across different instance families. You can also choose to view your estimated savings that are associated with recommendations with consideration of existing Savings Plans or RI benefits, or neither. </p>
    /// - On failure, responds with [`SdkError<GetRightsizingRecommendationError>`](crate::error::GetRightsizingRecommendationError)
    pub fn get_rightsizing_recommendation(
        &self,
    ) -> crate::client::fluent_builders::GetRightsizingRecommendation {
        crate::client::fluent_builders::GetRightsizingRecommendation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSavingsPlansCoverage`](crate::client::fluent_builders::GetSavingsPlansCoverage) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetSavingsPlansCoverage::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`time_period(DateInterval)`](crate::client::fluent_builders::GetSavingsPlansCoverage::time_period) / [`set_time_period(Option<DateInterval>)`](crate::client::fluent_builders::GetSavingsPlansCoverage::set_time_period): <p>The time period that you want the usage and costs for. The <code>Start</code> date must be within 13 months. The <code>End</code> date must be after the <code>Start</code> date, and before the current date. Future dates can't be used as an <code>End</code> date.</p>
    ///   - [`group_by(Vec<GroupDefinition>)`](crate::client::fluent_builders::GetSavingsPlansCoverage::group_by) / [`set_group_by(Option<Vec<GroupDefinition>>)`](crate::client::fluent_builders::GetSavingsPlansCoverage::set_group_by): <p>You can group the data using the attributes <code>INSTANCE_FAMILY</code>, <code>REGION</code>, or <code>SERVICE</code>.</p>
    ///   - [`granularity(Granularity)`](crate::client::fluent_builders::GetSavingsPlansCoverage::granularity) / [`set_granularity(Option<Granularity>)`](crate::client::fluent_builders::GetSavingsPlansCoverage::set_granularity): <p>The granularity of the Amazon Web Services cost data for your Savings Plans. <code>Granularity</code> can't be set if <code>GroupBy</code> is set.</p>  <p>The <code>GetSavingsPlansCoverage</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetSavingsPlansCoverage::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetSavingsPlansCoverage::set_filter): <p>Filters Savings Plans coverage data by dimensions. You can filter data for Savings Plans usage with the following dimensions:</p>  <ul>   <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>   <li> <p> <code>REGION</code> </p> </li>   <li> <p> <code>SERVICE</code> </p> </li>   <li> <p> <code>INSTANCE_FAMILY</code> </p> </li>  </ul>  <p> <code>GetSavingsPlansCoverage</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension. If there are multiple values for a dimension, they are OR'd together.</p>  <p>Cost category is also supported.</p>
    ///   - [`metrics(Vec<String>)`](crate::client::fluent_builders::GetSavingsPlansCoverage::metrics) / [`set_metrics(Option<Vec<String>>)`](crate::client::fluent_builders::GetSavingsPlansCoverage::set_metrics): <p>The measurement that you want your Savings Plans coverage reported in. The only valid value is <code>SpendCoveredBySavingsPlans</code>.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetSavingsPlansCoverage::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetSavingsPlansCoverage::set_next_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetSavingsPlansCoverage::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetSavingsPlansCoverage::set_max_results): <p>The number of items to be returned in a response. The default is <code>20</code>, with a minimum value of <code>1</code>.</p>
    ///   - [`sort_by(SortDefinition)`](crate::client::fluent_builders::GetSavingsPlansCoverage::sort_by) / [`set_sort_by(Option<SortDefinition>)`](crate::client::fluent_builders::GetSavingsPlansCoverage::set_sort_by): <p>The value that you want to sort the data by.</p>  <p>The following values are supported for <code>Key</code>:</p>  <ul>   <li> <p> <code>SpendCoveredBySavingsPlan</code> </p> </li>   <li> <p> <code>OnDemandCost</code> </p> </li>   <li> <p> <code>CoveragePercentage</code> </p> </li>   <li> <p> <code>TotalCost</code> </p> </li>   <li> <p> <code>InstanceFamily</code> </p> </li>   <li> <p> <code>Region</code> </p> </li>   <li> <p> <code>Service</code> </p> </li>  </ul>  <p>The supported values for <code>SortOrder</code> are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>
    /// - On success, responds with [`GetSavingsPlansCoverageOutput`](crate::output::GetSavingsPlansCoverageOutput) with field(s):
    ///   - [`savings_plans_coverages(Option<Vec<SavingsPlansCoverage>>)`](crate::output::GetSavingsPlansCoverageOutput::savings_plans_coverages): <p>The amount of spend that your Savings Plans covered.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetSavingsPlansCoverageOutput::next_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    /// - On failure, responds with [`SdkError<GetSavingsPlansCoverageError>`](crate::error::GetSavingsPlansCoverageError)
    pub fn get_savings_plans_coverage(
        &self,
    ) -> crate::client::fluent_builders::GetSavingsPlansCoverage {
        crate::client::fluent_builders::GetSavingsPlansCoverage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSavingsPlansPurchaseRecommendation`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`savings_plans_type(SupportedSavingsPlansType)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::savings_plans_type) / [`set_savings_plans_type(Option<SupportedSavingsPlansType>)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::set_savings_plans_type): <p>The Savings Plans recommendation type that's requested.</p>
    ///   - [`term_in_years(TermInYears)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::term_in_years) / [`set_term_in_years(Option<TermInYears>)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::set_term_in_years): <p>The savings plan recommendation term that's used to generate these recommendations.</p>
    ///   - [`payment_option(PaymentOption)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::payment_option) / [`set_payment_option(Option<PaymentOption>)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::set_payment_option): <p>The payment option that's used to generate these recommendations.</p>
    ///   - [`account_scope(AccountScope)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::account_scope) / [`set_account_scope(Option<AccountScope>)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::set_account_scope): <p>The account scope that you want your recommendations for. Amazon Web Services calculates recommendations including the management account and member accounts if the value is set to <code>PAYER</code>. If the value is <code>LINKED</code>, recommendations are calculated for individual member accounts only.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::set_next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::page_size) / [`set_page_size(i32)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::set_page_size): <p>The number of recommendations that you want returned in a single response object.</p>
    ///   - [`lookback_period_in_days(LookbackPeriodInDays)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::lookback_period_in_days) / [`set_lookback_period_in_days(Option<LookbackPeriodInDays>)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::set_lookback_period_in_days): <p>The lookback period that's used to generate the recommendation.</p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::set_filter): <p>You can filter your recommendations by Account ID with the <code>LINKED_ACCOUNT</code> dimension. To filter your recommendations by Account ID, specify <code>Key</code> as <code>LINKED_ACCOUNT</code> and <code>Value</code> as the comma-separated Acount ID(s) that you want to see Savings Plans purchase recommendations for.</p>  <p>For GetSavingsPlansPurchaseRecommendation, the <code>Filter</code> doesn't include <code>CostCategories</code> or <code>Tags</code>. It only includes <code>Dimensions</code>. With <code>Dimensions</code>, <code>Key</code> must be <code>LINKED_ACCOUNT</code> and <code>Value</code> can be a single Account ID or multiple comma-separated Account IDs that you want to see Savings Plans Purchase Recommendations for. <code>AND</code> and <code>OR</code> operators are not supported.</p>
    /// - On success, responds with [`GetSavingsPlansPurchaseRecommendationOutput`](crate::output::GetSavingsPlansPurchaseRecommendationOutput) with field(s):
    ///   - [`metadata(Option<SavingsPlansPurchaseRecommendationMetadata>)`](crate::output::GetSavingsPlansPurchaseRecommendationOutput::metadata): <p>Information that regards this specific recommendation set.</p>
    ///   - [`savings_plans_purchase_recommendation(Option<SavingsPlansPurchaseRecommendation>)`](crate::output::GetSavingsPlansPurchaseRecommendationOutput::savings_plans_purchase_recommendation): <p>Contains your request parameters, Savings Plan Recommendations Summary, and Details.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::GetSavingsPlansPurchaseRecommendationOutput::next_page_token): <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    /// - On failure, responds with [`SdkError<GetSavingsPlansPurchaseRecommendationError>`](crate::error::GetSavingsPlansPurchaseRecommendationError)
    pub fn get_savings_plans_purchase_recommendation(
        &self,
    ) -> crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation {
        crate::client::fluent_builders::GetSavingsPlansPurchaseRecommendation::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`GetSavingsPlansUtilization`](crate::client::fluent_builders::GetSavingsPlansUtilization) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`time_period(DateInterval)`](crate::client::fluent_builders::GetSavingsPlansUtilization::time_period) / [`set_time_period(Option<DateInterval>)`](crate::client::fluent_builders::GetSavingsPlansUtilization::set_time_period): <p>The time period that you want the usage and costs for. The <code>Start</code> date must be within 13 months. The <code>End</code> date must be after the <code>Start</code> date, and before the current date. Future dates can't be used as an <code>End</code> date.</p>
    ///   - [`granularity(Granularity)`](crate::client::fluent_builders::GetSavingsPlansUtilization::granularity) / [`set_granularity(Option<Granularity>)`](crate::client::fluent_builders::GetSavingsPlansUtilization::set_granularity): <p>The granularity of the Amazon Web Services utillization data for your Savings Plans.</p>  <p>The <code>GetSavingsPlansUtilization</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetSavingsPlansUtilization::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetSavingsPlansUtilization::set_filter): <p>Filters Savings Plans utilization coverage data for active Savings Plans dimensions. You can filter data with the following dimensions:</p>  <ul>   <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>   <li> <p> <code>SAVINGS_PLAN_ARN</code> </p> </li>   <li> <p> <code>SAVINGS_PLANS_TYPE</code> </p> </li>   <li> <p> <code>REGION</code> </p> </li>   <li> <p> <code>PAYMENT_OPTION</code> </p> </li>   <li> <p> <code>INSTANCE_TYPE_FAMILY</code> </p> </li>  </ul>  <p> <code>GetSavingsPlansUtilization</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension.</p>
    ///   - [`sort_by(SortDefinition)`](crate::client::fluent_builders::GetSavingsPlansUtilization::sort_by) / [`set_sort_by(Option<SortDefinition>)`](crate::client::fluent_builders::GetSavingsPlansUtilization::set_sort_by): <p>The value that you want to sort the data by.</p>  <p>The following values are supported for <code>Key</code>:</p>  <ul>   <li> <p> <code>UtilizationPercentage</code> </p> </li>   <li> <p> <code>TotalCommitment</code> </p> </li>   <li> <p> <code>UsedCommitment</code> </p> </li>   <li> <p> <code>UnusedCommitment</code> </p> </li>   <li> <p> <code>NetSavings</code> </p> </li>  </ul>  <p>The supported values for <code>SortOrder</code> are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>
    /// - On success, responds with [`GetSavingsPlansUtilizationOutput`](crate::output::GetSavingsPlansUtilizationOutput) with field(s):
    ///   - [`savings_plans_utilizations_by_time(Option<Vec<SavingsPlansUtilizationByTime>>)`](crate::output::GetSavingsPlansUtilizationOutput::savings_plans_utilizations_by_time): <p>The amount of cost/commitment that you used your Savings Plans. You can use it to specify date ranges.</p>
    ///   - [`total(Option<SavingsPlansUtilizationAggregates>)`](crate::output::GetSavingsPlansUtilizationOutput::total): <p>The total amount of cost/commitment that you used your Savings Plans, regardless of date ranges.</p>
    /// - On failure, responds with [`SdkError<GetSavingsPlansUtilizationError>`](crate::error::GetSavingsPlansUtilizationError)
    pub fn get_savings_plans_utilization(
        &self,
    ) -> crate::client::fluent_builders::GetSavingsPlansUtilization {
        crate::client::fluent_builders::GetSavingsPlansUtilization::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSavingsPlansUtilizationDetails`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`time_period(DateInterval)`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::time_period) / [`set_time_period(Option<DateInterval>)`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::set_time_period): <p>The time period that you want the usage and costs for. The <code>Start</code> date must be within 13 months. The <code>End</code> date must be after the <code>Start</code> date, and before the current date. Future dates can't be used as an <code>End</code> date.</p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::set_filter): <p>Filters Savings Plans utilization coverage data for active Savings Plans dimensions. You can filter data with the following dimensions:</p>  <ul>   <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>   <li> <p> <code>SAVINGS_PLAN_ARN</code> </p> </li>   <li> <p> <code>REGION</code> </p> </li>   <li> <p> <code>PAYMENT_OPTION</code> </p> </li>   <li> <p> <code>INSTANCE_TYPE_FAMILY</code> </p> </li>  </ul>  <p> <code>GetSavingsPlansUtilizationDetails</code> uses the same <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object as the other operations, but only <code>AND</code> is supported among each dimension.</p>
    ///   - [`data_type(Vec<SavingsPlansDataType>)`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::data_type) / [`set_data_type(Option<Vec<SavingsPlansDataType>>)`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::set_data_type): <p>The data type.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::set_next_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::set_max_results): <p>The number of items to be returned in a response. The default is <code>20</code>, with a minimum value of <code>1</code>.</p>
    ///   - [`sort_by(SortDefinition)`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::sort_by) / [`set_sort_by(Option<SortDefinition>)`](crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::set_sort_by): <p>The value that you want to sort the data by.</p>  <p>The following values are supported for <code>Key</code>:</p>  <ul>   <li> <p> <code>UtilizationPercentage</code> </p> </li>   <li> <p> <code>TotalCommitment</code> </p> </li>   <li> <p> <code>UsedCommitment</code> </p> </li>   <li> <p> <code>UnusedCommitment</code> </p> </li>   <li> <p> <code>NetSavings</code> </p> </li>   <li> <p> <code>AmortizedRecurringCommitment</code> </p> </li>   <li> <p> <code>AmortizedUpfrontCommitment</code> </p> </li>  </ul>  <p>The supported values for <code>SortOrder</code> are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>
    /// - On success, responds with [`GetSavingsPlansUtilizationDetailsOutput`](crate::output::GetSavingsPlansUtilizationDetailsOutput) with field(s):
    ///   - [`savings_plans_utilization_details(Option<Vec<SavingsPlansUtilizationDetail>>)`](crate::output::GetSavingsPlansUtilizationDetailsOutput::savings_plans_utilization_details): <p>Retrieves a single daily or monthly Savings Plans utilization rate and details for your account.</p>
    ///   - [`total(Option<SavingsPlansUtilizationAggregates>)`](crate::output::GetSavingsPlansUtilizationDetailsOutput::total): <p>The total Savings Plans utilization, regardless of time period.</p>
    ///   - [`time_period(Option<DateInterval>)`](crate::output::GetSavingsPlansUtilizationDetailsOutput::time_period): <p>The time period of the request. </p>
    ///   - [`next_token(Option<String>)`](crate::output::GetSavingsPlansUtilizationDetailsOutput::next_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    /// - On failure, responds with [`SdkError<GetSavingsPlansUtilizationDetailsError>`](crate::error::GetSavingsPlansUtilizationDetailsError)
    pub fn get_savings_plans_utilization_details(
        &self,
    ) -> crate::client::fluent_builders::GetSavingsPlansUtilizationDetails {
        crate::client::fluent_builders::GetSavingsPlansUtilizationDetails::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTags`](crate::client::fluent_builders::GetTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`search_string(impl Into<String>)`](crate::client::fluent_builders::GetTags::search_string) / [`set_search_string(Option<String>)`](crate::client::fluent_builders::GetTags::set_search_string): <p>The value that you want to search for.</p>
    ///   - [`time_period(DateInterval)`](crate::client::fluent_builders::GetTags::time_period) / [`set_time_period(Option<DateInterval>)`](crate::client::fluent_builders::GetTags::set_time_period): <p>The start and end dates for retrieving the dimension values. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.</p>
    ///   - [`tag_key(impl Into<String>)`](crate::client::fluent_builders::GetTags::tag_key) / [`set_tag_key(Option<String>)`](crate::client::fluent_builders::GetTags::set_tag_key): <p>The key of the tag that you want to return values for.</p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetTags::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetTags::set_filter): <p>Use <code>Expression</code> to filter in various Cost Explorer APIs.</p>  <p>Not all <code>Expression</code> types are supported in each API. Refer to the documentation for each specific API to see what is supported.</p>  <p>There are two patterns:</p>  <ul>   <li> <p>Simple dimension values.</p>    <ul>     <li> <p>There are three types of simple dimension values: <code>CostCategories</code>, <code>Tags</code>, and <code>Dimensions</code>.</p>      <ul>       <li> <p>Specify the <code>CostCategories</code> field to define a filter that acts on Cost Categories.</p> </li>       <li> <p>Specify the <code>Tags</code> field to define a filter that acts on Cost Allocation Tags.</p> </li>       <li> <p>Specify the <code>Dimensions</code> field to define a filter that acts on the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_DimensionValues.html"> <code>DimensionValues</code> </a>.</p> </li>      </ul> </li>     <li> <p>For each filter type, you can set the dimension name and values for the filters that you plan to use.</p>      <ul>       <li> <p>For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. For <code>GetRightsizingRecommendation</code>, the Region is a full name (for example, <code>REGION==US East (N. Virginia)</code>.</p> </li>       <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> </li>       <li> <p>As shown in the previous example, lists of dimension values are combined with <code>OR</code> when applying the filter.</p> </li>      </ul> </li>     <li> <p>You can also set different match options to further control how the filter behaves. Not all APIs support match options. Refer to the documentation for each specific API to see what is supported.</p>      <ul>       <li> <p>For example, you can filter for linked account names that start with “a”.</p> </li>       <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "LINKED_ACCOUNT_NAME", "MatchOptions": [ "STARTS_WITH" ], "Values": [ "a" ] } }</code> </p> </li>      </ul> </li>    </ul> </li>   <li> <p>Compound <code>Expression</code> types with logical operations.</p>    <ul>     <li> <p>You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. By doing this, you can filter by more advanced options.</p> </li>     <li> <p>For example, you can filter by <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>.</p> </li>     <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> </li>    </ul> <note>     <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error: <code> { "And": [ ... ], "Dimensions": { "Key": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p>     <p>The following is an example of the corresponding error message: <code>"Expression has more than one roots. Only one root operator is allowed for each expression: And, Or, Not, Dimensions, Tags, CostCategories"</code> </p>    </note> </li>  </ul> <note>   <p>For the <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT isn't supported. OR isn't supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p>   <p>For the <code>GetReservationPurchaseRecommendation</code> action, only NOT is supported. AND and OR aren't supported. Dimensions are limited to <code>LINKED_ACCOUNT</code>.</p>  </note>
    ///   - [`sort_by(Vec<SortDefinition>)`](crate::client::fluent_builders::GetTags::sort_by) / [`set_sort_by(Option<Vec<SortDefinition>>)`](crate::client::fluent_builders::GetTags::set_sort_by): <p>The value that you want to sort the data by.</p>  <p>The key represents cost and usage metrics. The following values are supported:</p>  <ul>   <li> <p> <code>BlendedCost</code> </p> </li>   <li> <p> <code>UnblendedCost</code> </p> </li>   <li> <p> <code>AmortizedCost</code> </p> </li>   <li> <p> <code>NetAmortizedCost</code> </p> </li>   <li> <p> <code>NetUnblendedCost</code> </p> </li>   <li> <p> <code>UsageQuantity</code> </p> </li>   <li> <p> <code>NormalizedUsageAmount</code> </p> </li>  </ul>  <p>The supported values for <code>SortOrder</code> are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>  <p>When you use <code>SortBy</code>, <code>NextPageToken</code> and <code>SearchString</code> aren't supported.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetTags::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::GetTags::set_max_results): <p>This field is only used when SortBy is provided in the request. The maximum number of objects that are returned for this request. If MaxResults isn't specified with SortBy, the request returns 1000 results as the default value for this parameter.</p>  <p>For <code>GetTags</code>, MaxResults has an upper quota of 1000.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetTags::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetTags::set_next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    /// - On success, responds with [`GetTagsOutput`](crate::output::GetTagsOutput) with field(s):
    ///   - [`next_page_token(Option<String>)`](crate::output::GetTagsOutput::next_page_token): <p>The token for the next set of retrievable results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.</p>
    ///   - [`tags(Option<Vec<String>>)`](crate::output::GetTagsOutput::tags): <p>The tags that match your request.</p>
    ///   - [`return_size(Option<i32>)`](crate::output::GetTagsOutput::return_size): <p>The number of query results that Amazon Web Services returns at a time.</p>
    ///   - [`total_size(Option<i32>)`](crate::output::GetTagsOutput::total_size): <p>The total number of query results.</p>
    /// - On failure, responds with [`SdkError<GetTagsError>`](crate::error::GetTagsError)
    pub fn get_tags(&self) -> crate::client::fluent_builders::GetTags {
        crate::client::fluent_builders::GetTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetUsageForecast`](crate::client::fluent_builders::GetUsageForecast) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`time_period(DateInterval)`](crate::client::fluent_builders::GetUsageForecast::time_period) / [`set_time_period(Option<DateInterval>)`](crate::client::fluent_builders::GetUsageForecast::set_time_period): <p>The start and end dates of the period that you want to retrieve usage forecast for. The start date is included in the period, but the end date isn't included in the period. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>. The start date must be equal to or later than the current date to avoid a validation error.</p>
    ///   - [`metric(Metric)`](crate::client::fluent_builders::GetUsageForecast::metric) / [`set_metric(Option<Metric>)`](crate::client::fluent_builders::GetUsageForecast::set_metric): <p>Which metric Cost Explorer uses to create your forecast.</p>  <p>Valid values for a <code>GetUsageForecast</code> call are the following:</p>  <ul>   <li> <p>USAGE_QUANTITY</p> </li>   <li> <p>NORMALIZED_USAGE_AMOUNT</p> </li>  </ul>
    ///   - [`granularity(Granularity)`](crate::client::fluent_builders::GetUsageForecast::granularity) / [`set_granularity(Option<Granularity>)`](crate::client::fluent_builders::GetUsageForecast::set_granularity): <p>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code> forecasts or 12 months of <code>MONTHLY</code> forecasts.</p>  <p>The <code>GetUsageForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p>
    ///   - [`filter(Expression)`](crate::client::fluent_builders::GetUsageForecast::filter) / [`set_filter(Option<Expression>)`](crate::client::fluent_builders::GetUsageForecast::set_filter): <p>The filters that you want to use to filter your forecast. The <code>GetUsageForecast</code> API supports filtering by the following dimensions:</p>  <ul>   <li> <p> <code>AZ</code> </p> </li>   <li> <p> <code>INSTANCE_TYPE</code> </p> </li>   <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>   <li> <p> <code>LINKED_ACCOUNT_NAME</code> </p> </li>   <li> <p> <code>OPERATION</code> </p> </li>   <li> <p> <code>PURCHASE_TYPE</code> </p> </li>   <li> <p> <code>REGION</code> </p> </li>   <li> <p> <code>SERVICE</code> </p> </li>   <li> <p> <code>USAGE_TYPE</code> </p> </li>   <li> <p> <code>USAGE_TYPE_GROUP</code> </p> </li>   <li> <p> <code>RECORD_TYPE</code> </p> </li>   <li> <p> <code>OPERATING_SYSTEM</code> </p> </li>   <li> <p> <code>TENANCY</code> </p> </li>   <li> <p> <code>SCOPE</code> </p> </li>   <li> <p> <code>PLATFORM</code> </p> </li>   <li> <p> <code>SUBSCRIPTION_ID</code> </p> </li>   <li> <p> <code>LEGAL_ENTITY_NAME</code> </p> </li>   <li> <p> <code>DEPLOYMENT_OPTION</code> </p> </li>   <li> <p> <code>DATABASE_ENGINE</code> </p> </li>   <li> <p> <code>INSTANCE_TYPE_FAMILY</code> </p> </li>   <li> <p> <code>BILLING_ENTITY</code> </p> </li>   <li> <p> <code>RESERVATION_ID</code> </p> </li>   <li> <p> <code>SAVINGS_PLAN_ARN</code> </p> </li>  </ul>
    ///   - [`prediction_interval_level(i32)`](crate::client::fluent_builders::GetUsageForecast::prediction_interval_level) / [`set_prediction_interval_level(Option<i32>)`](crate::client::fluent_builders::GetUsageForecast::set_prediction_interval_level): <p>Amazon Web Services Cost Explorer always returns the mean forecast as a single point. You can request a prediction interval around the mean by specifying a confidence level. The higher the confidence level, the more confident Cost Explorer is about the actual value falling in the prediction interval. Higher confidence levels result in wider prediction intervals.</p>
    /// - On success, responds with [`GetUsageForecastOutput`](crate::output::GetUsageForecastOutput) with field(s):
    ///   - [`total(Option<MetricValue>)`](crate::output::GetUsageForecastOutput::total): <p>How much you're forecasted to use over the forecast period.</p>
    ///   - [`forecast_results_by_time(Option<Vec<ForecastResult>>)`](crate::output::GetUsageForecastOutput::forecast_results_by_time): <p>The forecasts for your query, in order. For <code>DAILY</code> forecasts, this is a list of days. For <code>MONTHLY</code> forecasts, this is a list of months.</p>
    /// - On failure, responds with [`SdkError<GetUsageForecastError>`](crate::error::GetUsageForecastError)
    pub fn get_usage_forecast(&self) -> crate::client::fluent_builders::GetUsageForecast {
        crate::client::fluent_builders::GetUsageForecast::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCostAllocationTags`](crate::client::fluent_builders::ListCostAllocationTags) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCostAllocationTags::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`status(CostAllocationTagStatus)`](crate::client::fluent_builders::ListCostAllocationTags::status) / [`set_status(Option<CostAllocationTagStatus>)`](crate::client::fluent_builders::ListCostAllocationTags::set_status): <p>The status of cost allocation tag keys that are returned for this request. </p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::ListCostAllocationTags::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::ListCostAllocationTags::set_tag_keys): <p>The list of cost allocation tag keys that are returned for this request. </p>
    ///   - [`r#type(CostAllocationTagType)`](crate::client::fluent_builders::ListCostAllocationTags::type) / [`set_type(Option<CostAllocationTagType>)`](crate::client::fluent_builders::ListCostAllocationTags::set_type): <p>The type of <code>CostAllocationTag</code> object that are returned for this request. The <code>AWSGenerated</code> type tags are tags that Amazon Web Services defines and applies to support Amazon Web Services resources for cost allocation purposes. The <code>UserDefined</code> type tags are tags that you define, create, and apply to resources. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCostAllocationTags::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCostAllocationTags::set_next_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCostAllocationTags::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCostAllocationTags::set_max_results): <p>The maximum number of objects that are returned for this request. By default, the request returns 100 results. </p>
    /// - On success, responds with [`ListCostAllocationTagsOutput`](crate::output::ListCostAllocationTagsOutput) with field(s):
    ///   - [`cost_allocation_tags(Option<Vec<CostAllocationTag>>)`](crate::output::ListCostAllocationTagsOutput::cost_allocation_tags): <p>A list of cost allocation tags that includes the detailed metadata for each one. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListCostAllocationTagsOutput::next_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    /// - On failure, responds with [`SdkError<ListCostAllocationTagsError>`](crate::error::ListCostAllocationTagsError)
    pub fn list_cost_allocation_tags(
        &self,
    ) -> crate::client::fluent_builders::ListCostAllocationTags {
        crate::client::fluent_builders::ListCostAllocationTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCostCategoryDefinitions`](crate::client::fluent_builders::ListCostCategoryDefinitions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCostCategoryDefinitions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`effective_on(impl Into<String>)`](crate::client::fluent_builders::ListCostCategoryDefinitions::effective_on) / [`set_effective_on(Option<String>)`](crate::client::fluent_builders::ListCostCategoryDefinitions::set_effective_on): <p>The date when the Cost Category was effective. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCostCategoryDefinitions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCostCategoryDefinitions::set_next_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCostCategoryDefinitions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCostCategoryDefinitions::set_max_results): <p>The number of entries a paginated response contains. </p>
    /// - On success, responds with [`ListCostCategoryDefinitionsOutput`](crate::output::ListCostCategoryDefinitionsOutput) with field(s):
    ///   - [`cost_category_references(Option<Vec<CostCategoryReference>>)`](crate::output::ListCostCategoryDefinitionsOutput::cost_category_references): <p>A reference to a Cost Category that contains enough information to identify the Cost Category. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListCostCategoryDefinitionsOutput::next_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    /// - On failure, responds with [`SdkError<ListCostCategoryDefinitionsError>`](crate::error::ListCostCategoryDefinitionsError)
    pub fn list_cost_category_definitions(
        &self,
    ) -> crate::client::fluent_builders::ListCostCategoryDefinitions {
        crate::client::fluent_builders::ListCostCategoryDefinitions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSavingsPlansPurchaseRecommendationGeneration`](crate::client::fluent_builders::ListSavingsPlansPurchaseRecommendationGeneration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`generation_status(GenerationStatus)`](crate::client::fluent_builders::ListSavingsPlansPurchaseRecommendationGeneration::generation_status) / [`set_generation_status(Option<GenerationStatus>)`](crate::client::fluent_builders::ListSavingsPlansPurchaseRecommendationGeneration::set_generation_status): <p>The status of the recommendation generation.</p>
    ///   - [`recommendation_ids(Vec<String>)`](crate::client::fluent_builders::ListSavingsPlansPurchaseRecommendationGeneration::recommendation_ids) / [`set_recommendation_ids(Option<Vec<String>>)`](crate::client::fluent_builders::ListSavingsPlansPurchaseRecommendationGeneration::set_recommendation_ids): <p>The IDs for each specific recommendation.</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::ListSavingsPlansPurchaseRecommendationGeneration::page_size) / [`set_page_size(i32)`](crate::client::fluent_builders::ListSavingsPlansPurchaseRecommendationGeneration::set_page_size): <p>The number of recommendations that you want returned in a single response object.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::ListSavingsPlansPurchaseRecommendationGeneration::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::ListSavingsPlansPurchaseRecommendationGeneration::set_next_page_token): <p>The token to retrieve the next set of results.</p>
    /// - On success, responds with [`ListSavingsPlansPurchaseRecommendationGenerationOutput`](crate::output::ListSavingsPlansPurchaseRecommendationGenerationOutput) with field(s):
    ///   - [`generation_summary_list(Option<Vec<GenerationSummary>>)`](crate::output::ListSavingsPlansPurchaseRecommendationGenerationOutput::generation_summary_list): <p>The list of historical recommendation generations.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::ListSavingsPlansPurchaseRecommendationGenerationOutput::next_page_token): <p>The token to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListSavingsPlansPurchaseRecommendationGenerationError>`](crate::error::ListSavingsPlansPurchaseRecommendationGenerationError)
    pub fn list_savings_plans_purchase_recommendation_generation(
        &self,
    ) -> crate::client::fluent_builders::ListSavingsPlansPurchaseRecommendationGeneration {
        crate::client::fluent_builders::ListSavingsPlansPurchaseRecommendationGeneration::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource. For a list of supported resources, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_ResourceTag.html">ResourceTag</a>.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`resource_tags(Option<Vec<ResourceTag>>)`](crate::output::ListTagsForResourceOutput::resource_tags): <p>A list of tag key value pairs that are associated with the resource. </p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ProvideAnomalyFeedback`](crate::client::fluent_builders::ProvideAnomalyFeedback) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`anomaly_id(impl Into<String>)`](crate::client::fluent_builders::ProvideAnomalyFeedback::anomaly_id) / [`set_anomaly_id(Option<String>)`](crate::client::fluent_builders::ProvideAnomalyFeedback::set_anomaly_id): <p>A cost anomaly ID. </p>
    ///   - [`feedback(AnomalyFeedbackType)`](crate::client::fluent_builders::ProvideAnomalyFeedback::feedback) / [`set_feedback(Option<AnomalyFeedbackType>)`](crate::client::fluent_builders::ProvideAnomalyFeedback::set_feedback): <p>Describes whether the cost anomaly was a planned activity or you considered it an anomaly. </p>
    /// - On success, responds with [`ProvideAnomalyFeedbackOutput`](crate::output::ProvideAnomalyFeedbackOutput) with field(s):
    ///   - [`anomaly_id(Option<String>)`](crate::output::ProvideAnomalyFeedbackOutput::anomaly_id): <p>The ID of the modified cost anomaly. </p>
    /// - On failure, responds with [`SdkError<ProvideAnomalyFeedbackError>`](crate::error::ProvideAnomalyFeedbackError)
    pub fn provide_anomaly_feedback(
        &self,
    ) -> crate::client::fluent_builders::ProvideAnomalyFeedback {
        crate::client::fluent_builders::ProvideAnomalyFeedback::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartSavingsPlansPurchaseRecommendationGeneration`](crate::client::fluent_builders::StartSavingsPlansPurchaseRecommendationGeneration) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::StartSavingsPlansPurchaseRecommendationGeneration::send) it.

    /// - On success, responds with [`StartSavingsPlansPurchaseRecommendationGenerationOutput`](crate::output::StartSavingsPlansPurchaseRecommendationGenerationOutput) with field(s):
    ///   - [`recommendation_id(Option<String>)`](crate::output::StartSavingsPlansPurchaseRecommendationGenerationOutput::recommendation_id): <p>The ID for this specific recommendation.</p>
    ///   - [`generation_started_time(Option<String>)`](crate::output::StartSavingsPlansPurchaseRecommendationGenerationOutput::generation_started_time): <p>The start time of the recommendation generation.</p>
    ///   - [`estimated_completion_time(Option<String>)`](crate::output::StartSavingsPlansPurchaseRecommendationGenerationOutput::estimated_completion_time): <p>The estimated time for when the recommendation generation will complete.</p>
    /// - On failure, responds with [`SdkError<StartSavingsPlansPurchaseRecommendationGenerationError>`](crate::error::StartSavingsPlansPurchaseRecommendationGenerationError)
    pub fn start_savings_plans_purchase_recommendation_generation(
        &self,
    ) -> crate::client::fluent_builders::StartSavingsPlansPurchaseRecommendationGeneration {
        crate::client::fluent_builders::StartSavingsPlansPurchaseRecommendationGeneration::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource. For a list of supported resources, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_ResourceTag.html">ResourceTag</a>. </p>
    ///   - [`resource_tags(Vec<ResourceTag>)`](crate::client::fluent_builders::TagResource::resource_tags) / [`set_resource_tags(Option<Vec<ResourceTag>>)`](crate::client::fluent_builders::TagResource::set_resource_tags): <p> A list of tag key-value pairs to be added to the resource.</p>  <p>Each tag consists of a key and a value, and each key must be unique for the resource. The following restrictions apply to resource tags:</p>  <ul>   <li> <p>Although the maximum number of array members is 200, you can assign a maximum of 50 user-tags to one resource. The remaining are reserved for Amazon Web Services use</p> </li>   <li> <p>The maximum length of a key is 128 characters</p> </li>   <li> <p>The maximum length of a value is 256 characters</p> </li>   <li> <p>Keys and values can only contain alphanumeric characters, spaces, and any of the following: <code>_.:/=+@-</code> </p> </li>   <li> <p>Keys and values are case sensitive</p> </li>   <li> <p>Keys and values are trimmed for any leading or trailing whitespaces</p> </li>   <li> <p>Don’t use <code>aws:</code> as a prefix for your keys. This prefix is reserved for Amazon Web Services use</p> </li>  </ul>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource. For a list of supported resources, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_ResourceTag.html">ResourceTag</a>. </p>
    ///   - [`resource_tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::resource_tag_keys) / [`set_resource_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_resource_tag_keys): <p>A list of tag keys associated with tags that need to be removed from the resource. If you specify a tag key that doesn't exist, it's ignored. Although the maximum number of array members is 200, user-tag maximum is 50. The remaining are reserved for Amazon Web Services use. </p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateAnomalyMonitor`](crate::client::fluent_builders::UpdateAnomalyMonitor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateAnomalyMonitor::monitor_arn) / [`set_monitor_arn(Option<String>)`](crate::client::fluent_builders::UpdateAnomalyMonitor::set_monitor_arn): <p>Cost anomaly monitor Amazon Resource Names (ARNs). </p>
    ///   - [`monitor_name(impl Into<String>)`](crate::client::fluent_builders::UpdateAnomalyMonitor::monitor_name) / [`set_monitor_name(Option<String>)`](crate::client::fluent_builders::UpdateAnomalyMonitor::set_monitor_name): <p>The new name for the cost anomaly monitor. </p>
    /// - On success, responds with [`UpdateAnomalyMonitorOutput`](crate::output::UpdateAnomalyMonitorOutput) with field(s):
    ///   - [`monitor_arn(Option<String>)`](crate::output::UpdateAnomalyMonitorOutput::monitor_arn): <p>A cost anomaly monitor ARN. </p>
    /// - On failure, responds with [`SdkError<UpdateAnomalyMonitorError>`](crate::error::UpdateAnomalyMonitorError)
    pub fn update_anomaly_monitor(&self) -> crate::client::fluent_builders::UpdateAnomalyMonitor {
        crate::client::fluent_builders::UpdateAnomalyMonitor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateAnomalySubscription`](crate::client::fluent_builders::UpdateAnomalySubscription) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`subscription_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateAnomalySubscription::subscription_arn) / [`set_subscription_arn(Option<String>)`](crate::client::fluent_builders::UpdateAnomalySubscription::set_subscription_arn): <p>A cost anomaly subscription Amazon Resource Name (ARN). </p>
    ///   - [`threshold(f64)`](crate::client::fluent_builders::UpdateAnomalySubscription::threshold) / [`set_threshold(Option<f64>)`](crate::client::fluent_builders::UpdateAnomalySubscription::set_threshold): <p>(deprecated)</p>  <p>The update to the threshold value for receiving notifications. </p>  <p>This field has been deprecated. To update a threshold, use ThresholdExpression. Continued use of Threshold will be treated as shorthand syntax for a ThresholdExpression.</p>
    ///   - [`frequency(AnomalySubscriptionFrequency)`](crate::client::fluent_builders::UpdateAnomalySubscription::frequency) / [`set_frequency(Option<AnomalySubscriptionFrequency>)`](crate::client::fluent_builders::UpdateAnomalySubscription::set_frequency): <p>The update to the frequency value that subscribers receive notifications. </p>
    ///   - [`monitor_arn_list(Vec<String>)`](crate::client::fluent_builders::UpdateAnomalySubscription::monitor_arn_list) / [`set_monitor_arn_list(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateAnomalySubscription::set_monitor_arn_list): <p>A list of cost anomaly monitor ARNs. </p>
    ///   - [`subscribers(Vec<Subscriber>)`](crate::client::fluent_builders::UpdateAnomalySubscription::subscribers) / [`set_subscribers(Option<Vec<Subscriber>>)`](crate::client::fluent_builders::UpdateAnomalySubscription::set_subscribers): <p>The update to the subscriber list. </p>
    ///   - [`subscription_name(impl Into<String>)`](crate::client::fluent_builders::UpdateAnomalySubscription::subscription_name) / [`set_subscription_name(Option<String>)`](crate::client::fluent_builders::UpdateAnomalySubscription::set_subscription_name): <p>The new name of the subscription. </p>
    ///   - [`threshold_expression(Expression)`](crate::client::fluent_builders::UpdateAnomalySubscription::threshold_expression) / [`set_threshold_expression(Option<Expression>)`](crate::client::fluent_builders::UpdateAnomalySubscription::set_threshold_expression): <p>The update to the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a> object used to specify the anomalies that you want to generate alerts for. This supports dimensions and nested expressions. The supported dimensions are <code>ANOMALY_TOTAL_IMPACT_ABSOLUTE</code> and <code>ANOMALY_TOTAL_IMPACT_PERCENTAGE</code>. The supported nested expression types are <code>AND</code> and <code>OR</code>. The match option <code>GREATER_THAN_OR_EQUAL</code> is required. Values must be numbers between 0 and 10,000,000,000.</p>  <p>The following are examples of valid ThresholdExpressions:</p>  <ul>   <li> <p>Absolute threshold: <code>{ "Dimensions": { "Key": "ANOMALY_TOTAL_IMPACT_ABSOLUTE", "MatchOptions": [ "GREATER_THAN_OR_EQUAL" ], "Values": [ "100" ] } }</code> </p> </li>   <li> <p>Percentage threshold: <code>{ "Dimensions": { "Key": "ANOMALY_TOTAL_IMPACT_PERCENTAGE", "MatchOptions": [ "GREATER_THAN_OR_EQUAL" ], "Values": [ "100" ] } }</code> </p> </li>   <li> <p> <code>AND</code> two thresholds together: <code>{ "And": [ { "Dimensions": { "Key": "ANOMALY_TOTAL_IMPACT_ABSOLUTE", "MatchOptions": [ "GREATER_THAN_OR_EQUAL" ], "Values": [ "100" ] } }, { "Dimensions": { "Key": "ANOMALY_TOTAL_IMPACT_PERCENTAGE", "MatchOptions": [ "GREATER_THAN_OR_EQUAL" ], "Values": [ "100" ] } } ] }</code> </p> </li>   <li> <p> <code>OR</code> two thresholds together: <code>{ "Or": [ { "Dimensions": { "Key": "ANOMALY_TOTAL_IMPACT_ABSOLUTE", "MatchOptions": [ "GREATER_THAN_OR_EQUAL" ], "Values": [ "100" ] } }, { "Dimensions": { "Key": "ANOMALY_TOTAL_IMPACT_PERCENTAGE", "MatchOptions": [ "GREATER_THAN_OR_EQUAL" ], "Values": [ "100" ] } } ] }</code> </p> </li>  </ul>
    /// - On success, responds with [`UpdateAnomalySubscriptionOutput`](crate::output::UpdateAnomalySubscriptionOutput) with field(s):
    ///   - [`subscription_arn(Option<String>)`](crate::output::UpdateAnomalySubscriptionOutput::subscription_arn): <p>A cost anomaly subscription ARN. </p>
    /// - On failure, responds with [`SdkError<UpdateAnomalySubscriptionError>`](crate::error::UpdateAnomalySubscriptionError)
    pub fn update_anomaly_subscription(
        &self,
    ) -> crate::client::fluent_builders::UpdateAnomalySubscription {
        crate::client::fluent_builders::UpdateAnomalySubscription::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateCostAllocationTagsStatus`](crate::client::fluent_builders::UpdateCostAllocationTagsStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cost_allocation_tags_status(Vec<CostAllocationTagStatusEntry>)`](crate::client::fluent_builders::UpdateCostAllocationTagsStatus::cost_allocation_tags_status) / [`set_cost_allocation_tags_status(Option<Vec<CostAllocationTagStatusEntry>>)`](crate::client::fluent_builders::UpdateCostAllocationTagsStatus::set_cost_allocation_tags_status): <p>The list of <code>CostAllocationTagStatusEntry</code> objects that are used to update cost allocation tags status for this request. </p>
    /// - On success, responds with [`UpdateCostAllocationTagsStatusOutput`](crate::output::UpdateCostAllocationTagsStatusOutput) with field(s):
    ///   - [`errors(Option<Vec<UpdateCostAllocationTagsStatusError>>)`](crate::output::UpdateCostAllocationTagsStatusOutput::errors): <p>A list of <code>UpdateCostAllocationTagsStatusError</code> objects with error details about each cost allocation tag that can't be updated. If there's no failure, an empty array returns. </p>
    /// - On failure, responds with [`SdkError<UpdateCostAllocationTagsStatusError>`](crate::error::UpdateCostAllocationTagsStatusError)
    pub fn update_cost_allocation_tags_status(
        &self,
    ) -> crate::client::fluent_builders::UpdateCostAllocationTagsStatus {
        crate::client::fluent_builders::UpdateCostAllocationTagsStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateCostCategoryDefinition`](crate::client::fluent_builders::UpdateCostCategoryDefinition) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cost_category_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateCostCategoryDefinition::cost_category_arn) / [`set_cost_category_arn(Option<String>)`](crate::client::fluent_builders::UpdateCostCategoryDefinition::set_cost_category_arn): <p>The unique identifier for your Cost Category.</p>
    ///   - [`effective_start(impl Into<String>)`](crate::client::fluent_builders::UpdateCostCategoryDefinition::effective_start) / [`set_effective_start(Option<String>)`](crate::client::fluent_builders::UpdateCostCategoryDefinition::set_effective_start): <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month). If the date isn't provided, it's the first day of the current month. Dates can't be before the previous twelve months, or in the future.</p>
    ///   - [`rule_version(CostCategoryRuleVersion)`](crate::client::fluent_builders::UpdateCostCategoryDefinition::rule_version) / [`set_rule_version(Option<CostCategoryRuleVersion>)`](crate::client::fluent_builders::UpdateCostCategoryDefinition::set_rule_version): <p>The rule schema version in this particular Cost Category.</p>
    ///   - [`rules(Vec<CostCategoryRule>)`](crate::client::fluent_builders::UpdateCostCategoryDefinition::rules) / [`set_rules(Option<Vec<CostCategoryRule>>)`](crate::client::fluent_builders::UpdateCostCategoryDefinition::set_rules): <p>The <code>Expression</code> object used to categorize costs. For more information, see <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategoryRule.html">CostCategoryRule </a>. </p>
    ///   - [`default_value(impl Into<String>)`](crate::client::fluent_builders::UpdateCostCategoryDefinition::default_value) / [`set_default_value(Option<String>)`](crate::client::fluent_builders::UpdateCostCategoryDefinition::set_default_value): <p>The default value for the cost category.</p>
    ///   - [`split_charge_rules(Vec<CostCategorySplitChargeRule>)`](crate::client::fluent_builders::UpdateCostCategoryDefinition::split_charge_rules) / [`set_split_charge_rules(Option<Vec<CostCategorySplitChargeRule>>)`](crate::client::fluent_builders::UpdateCostCategoryDefinition::set_split_charge_rules): <p> The split charge rules used to allocate your charges between your Cost Category values. </p>
    /// - On success, responds with [`UpdateCostCategoryDefinitionOutput`](crate::output::UpdateCostCategoryDefinitionOutput) with field(s):
    ///   - [`cost_category_arn(Option<String>)`](crate::output::UpdateCostCategoryDefinitionOutput::cost_category_arn): <p>The unique identifier for your Cost Category. </p>
    ///   - [`effective_start(Option<String>)`](crate::output::UpdateCostCategoryDefinitionOutput::effective_start): <p>The Cost Category's effective start date. It can only be a billing start date (first day of the month).</p>
    /// - On failure, responds with [`SdkError<UpdateCostCategoryDefinitionError>`](crate::error::UpdateCostCategoryDefinitionError)
    pub fn update_cost_category_definition(
        &self,
    ) -> crate::client::fluent_builders::UpdateCostCategoryDefinition {
        crate::client::fluent_builders::UpdateCostCategoryDefinition::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
