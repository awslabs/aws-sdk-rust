// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_cost_categories_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_cost_categories::GetCostCategoriesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.search_string {
        object.key("SearchString").string(var_1.as_str());
    }
    if let Some(var_2) = &input.time_period {
        #[allow(unused_mut)]
        let mut object_3 = object.key("TimePeriod").start_object();
        crate::protocol_serde::shape_date_interval::ser_date_interval(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.cost_category_name {
        object.key("CostCategoryName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.filter {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Filter").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.sort_by {
        let mut array_8 = object.key("SortBy").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_sort_definition::ser_sort_definition(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_11) = &input.next_page_token {
        object.key("NextPageToken").string(var_11.as_str());
    }
    Ok(())
}
