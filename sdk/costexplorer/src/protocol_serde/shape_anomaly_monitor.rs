// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_anomaly_monitor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AnomalyMonitor,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.monitor_arn {
        object.key("MonitorArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.monitor_name {
        object.key("MonitorName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.creation_date {
        object.key("CreationDate").string(var_3.as_str());
    }
    if let Some(var_4) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_4.as_str());
    }
    if let Some(var_5) = &input.last_evaluated_date {
        object.key("LastEvaluatedDate").string(var_5.as_str());
    }
    if let Some(var_6) = &input.monitor_type {
        object.key("MonitorType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.monitor_dimension {
        object.key("MonitorDimension").string(var_7.as_str());
    }
    if let Some(var_8) = &input.monitor_specification {
        #[allow(unused_mut)]
        let mut object_9 = object.key("MonitorSpecification").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_9, var_8)?;
        object_9.finish();
    }
    if input.dimensional_value_count != 0 {
        object.key("DimensionalValueCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dimensional_value_count).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_anomaly_monitor<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AnomalyMonitor>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AnomalyMonitorBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "MonitorArn" => {
                                builder = builder.set_monitor_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "MonitorName" => {
                                builder = builder.set_monitor_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CreationDate" => {
                                builder = builder.set_creation_date(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "LastUpdatedDate" => {
                                builder = builder.set_last_updated_date(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "LastEvaluatedDate" => {
                                builder = builder.set_last_evaluated_date(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "MonitorType" => {
                                builder = builder.set_monitor_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::MonitorType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "MonitorDimension" => {
                                builder = builder.set_monitor_dimension(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::MonitorDimension::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "MonitorSpecification" => {
                                builder = builder.set_monitor_specification(
                                    crate::protocol_serde::shape_expression::de_expression(tokens)?,
                                );
                            }
                            "DimensionalValueCount" => {
                                builder = builder.set_dimensional_value_count(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
