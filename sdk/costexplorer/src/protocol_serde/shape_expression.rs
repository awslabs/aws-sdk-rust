// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Expression,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.or {
        let mut array_2 = object.key("Or").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_expression::ser_expression(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.and {
        let mut array_6 = object.key("And").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_expression::ser_expression(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.not {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Not").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.dimensions {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Dimensions").start_object();
        crate::protocol_serde::shape_dimension_values::ser_dimension_values(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.tags {
        #[allow(unused_mut)]
        let mut object_14 = object.key("Tags").start_object();
        crate::protocol_serde::shape_tag_values::ser_tag_values(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.cost_categories {
        #[allow(unused_mut)]
        let mut object_16 = object.key("CostCategories").start_object();
        crate::protocol_serde::shape_cost_category_values::ser_cost_category_values(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    Ok(())
}

pub(crate) fn de_expression<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Expression>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ExpressionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Or" => {
                                builder = builder.set_or(
                                    crate::protocol_serde::shape_expressions::de_expressions(
                                        tokens,
                                    )?,
                                );
                            }
                            "And" => {
                                builder = builder.set_and(
                                    crate::protocol_serde::shape_expressions::de_expressions(
                                        tokens,
                                    )?,
                                );
                            }
                            "Not" => {
                                builder = builder.set_not(
                                    crate::protocol_serde::shape_expression::de_expression(tokens)?
                                        .map(Box::new),
                                );
                            }
                            "Dimensions" => {
                                builder = builder.set_dimensions(
                                    crate::protocol_serde::shape_dimension_values::de_dimension_values(tokens)?
                                );
                            }
                            "Tags" => {
                                builder = builder.set_tags(
                                    crate::protocol_serde::shape_tag_values::de_tag_values(tokens)?,
                                );
                            }
                            "CostCategories" => {
                                builder = builder.set_cost_categories(
                                    crate::protocol_serde::shape_cost_category_values::de_cost_category_values(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
