// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_savings_plans_purchase_analysis_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::SavingsPlansPurchaseAnalysisConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SavingsPlansPurchaseAnalysisConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AccountScope" => {
                            builder = builder.set_account_scope(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AccountScope::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "AccountId" => {
                            builder = builder.set_account_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AnalysisType" => {
                            builder = builder.set_analysis_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AnalysisType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "SavingsPlansToAdd" => {
                            builder =
                                builder.set_savings_plans_to_add(crate::protocol_serde::shape_savings_plans_to_add::de_savings_plans_to_add(tokens)?);
                        }
                        "SavingsPlansToExclude" => {
                            builder = builder.set_savings_plans_to_exclude(
                                crate::protocol_serde::shape_savings_plans_to_exclude::de_savings_plans_to_exclude(tokens)?,
                            );
                        }
                        "LookBackTimePeriod" => {
                            builder = builder.set_look_back_time_period(crate::protocol_serde::shape_date_interval::de_date_interval(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::savings_plans_purchase_analysis_configuration_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_savings_plans_purchase_analysis_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SavingsPlansPurchaseAnalysisConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.account_scope {
        object.key("AccountScope").string(var_1.as_str());
    }
    if let Some(var_2) = &input.account_id {
        object.key("AccountId").string(var_2.as_str());
    }
    {
        object.key("AnalysisType").string(input.analysis_type.as_str());
    }
    {
        let mut array_3 = object.key("SavingsPlansToAdd").start_array();
        for item_4 in &input.savings_plans_to_add {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_savings_plans::ser_savings_plans(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.savings_plans_to_exclude {
        let mut array_7 = object.key("SavingsPlansToExclude").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.look_back_time_period {
        #[allow(unused_mut)]
        let mut object_10 = object.key("LookBackTimePeriod").start_object();
        crate::protocol_serde::shape_date_interval::ser_date_interval(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
