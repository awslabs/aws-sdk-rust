// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_reservation_utilization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_reservation_utilization::GetReservationUtilizationInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.time_period {
        #[allow(unused_mut)]
        let mut object_2 = object.key("TimePeriod").start_object();
        crate::protocol_serde::shape_date_interval::ser_date_interval(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.group_by {
        let mut array_4 = object.key("GroupBy").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_group_definition::ser_group_definition(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.granularity {
        object.key("Granularity").string(var_7.as_str());
    }
    if let Some(var_8) = &input.filter {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Filter").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_11 = object.key("SortBy").start_object();
        crate::protocol_serde::shape_sort_definition::ser_sort_definition(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.next_page_token {
        object.key("NextPageToken").string(var_12.as_str());
    }
    if let Some(var_13) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    Ok(())
}
