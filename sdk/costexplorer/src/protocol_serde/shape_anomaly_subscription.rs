// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_anomaly_subscription(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AnomalySubscription,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.subscription_arn {
        object.key("SubscriptionArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.account_id {
        object.key("AccountId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.monitor_arn_list {
        let mut array_4 = object.key("MonitorArnList").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.subscribers {
        let mut array_7 = object.key("Subscribers").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_subscriber::ser_subscriber(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.frequency {
        object.key("Frequency").string(var_11.as_str());
    }
    if let Some(var_12) = &input.subscription_name {
        object.key("SubscriptionName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.threshold_expression {
        #[allow(unused_mut)]
        let mut object_14 = object.key("ThresholdExpression").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}

pub(crate) fn de_anomaly_subscription<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AnomalySubscription>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AnomalySubscriptionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "SubscriptionArn" => {
                                builder = builder.set_subscription_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AccountId" => {
                                builder = builder.set_account_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "MonitorArnList" => {
                                builder = builder.set_monitor_arn_list(
                                    crate::protocol_serde::shape_monitor_arn_list::de_monitor_arn_list(tokens)?
                                );
                            }
                            "Subscribers" => {
                                builder = builder.set_subscribers(
                                    crate::protocol_serde::shape_subscribers::de_subscribers(
                                        tokens,
                                    )?,
                                );
                            }
                            "Threshold" => {
                                builder = builder.set_threshold(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "Frequency" => {
                                builder = builder.set_frequency(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::AnomalySubscriptionFrequency::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "SubscriptionName" => {
                                builder = builder.set_subscription_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ThresholdExpression" => {
                                builder = builder.set_threshold_expression(
                                    crate::protocol_serde::shape_expression::de_expression(tokens)?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
