// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_anomaly_subscription(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AnomalySubscription,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.subscription_arn {
        object.key("SubscriptionArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.account_id {
        object.key("AccountId").string(var_2.as_str());
    }
    {
        let mut array_3 = object.key("MonitorArnList").start_array();
        for item_4 in &input.monitor_arn_list {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    {
        let mut array_5 = object.key("Subscribers").start_array();
        for item_6 in &input.subscribers {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_subscriber::ser_subscriber(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_8).into()),
        );
    }
    {
        object.key("Frequency").string(input.frequency.as_str());
    }
    {
        object.key("SubscriptionName").string(input.subscription_name.as_str());
    }
    if let Some(var_9) = &input.threshold_expression {
        #[allow(unused_mut)]
        let mut object_10 = object.key("ThresholdExpression").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}

pub(crate) fn de_anomaly_subscription<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AnomalySubscription>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AnomalySubscriptionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "SubscriptionArn" => {
                            builder = builder.set_subscription_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "AccountId" => {
                            builder = builder.set_account_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MonitorArnList" => {
                            builder = builder.set_monitor_arn_list(crate::protocol_serde::shape_monitor_arn_list::de_monitor_arn_list(tokens)?);
                        }
                        "Subscribers" => {
                            builder = builder.set_subscribers(crate::protocol_serde::shape_subscribers::de_subscribers(tokens)?);
                        }
                        "Threshold" => {
                            builder = builder.set_threshold(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "Frequency" => {
                            builder = builder.set_frequency(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AnomalySubscriptionFrequency::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "SubscriptionName" => {
                            builder = builder.set_subscription_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ThresholdExpression" => {
                            builder = builder.set_threshold_expression(crate::protocol_serde::shape_expression::de_expression(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::anomaly_subscription_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
