// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_anomaly_subscription_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_anomaly_subscription::UpdateAnomalySubscriptionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.subscription_arn {
        object.key("SubscriptionArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.frequency {
        object.key("Frequency").string(var_3.as_str());
    }
    if let Some(var_4) = &input.monitor_arn_list {
        let mut array_5 = object.key("MonitorArnList").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.subscribers {
        let mut array_8 = object.key("Subscribers").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_subscriber::ser_subscriber(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.subscription_name {
        object.key("SubscriptionName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.threshold_expression {
        #[allow(unused_mut)]
        let mut object_13 = object.key("ThresholdExpression").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}
