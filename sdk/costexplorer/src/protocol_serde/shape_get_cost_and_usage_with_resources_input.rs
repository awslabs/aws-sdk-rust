// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_cost_and_usage_with_resources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_cost_and_usage_with_resources::GetCostAndUsageWithResourcesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.time_period {
        #[allow(unused_mut)]
        let mut object_2 = object.key("TimePeriod").start_object();
        crate::protocol_serde::shape_date_interval::ser_date_interval(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.granularity {
        object.key("Granularity").string(var_3.as_str());
    }
    if let Some(var_4) = &input.filter {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Filter").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.metrics {
        let mut array_7 = object.key("Metrics").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.group_by {
        let mut array_10 = object.key("GroupBy").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_group_definition::ser_group_definition(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.next_page_token {
        object.key("NextPageToken").string(var_13.as_str());
    }
    Ok(())
}
