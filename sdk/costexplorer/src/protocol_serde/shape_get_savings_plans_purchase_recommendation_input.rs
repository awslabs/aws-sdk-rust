// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_savings_plans_purchase_recommendation_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_savings_plans_purchase_recommendation::GetSavingsPlansPurchaseRecommendationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.savings_plans_type {
        object.key("SavingsPlansType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.term_in_years {
        object.key("TermInYears").string(var_2.as_str());
    }
    if let Some(var_3) = &input.payment_option {
        object.key("PaymentOption").string(var_3.as_str());
    }
    if let Some(var_4) = &input.account_scope {
        object.key("AccountScope").string(var_4.as_str());
    }
    if let Some(var_5) = &input.next_page_token {
        object.key("NextPageToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.page_size {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.lookback_period_in_days {
        object.key("LookbackPeriodInDays").string(var_7.as_str());
    }
    if let Some(var_8) = &input.filter {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Filter").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}
