// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_savings_plans_utilization_details_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_savings_plans_utilization_details::GetSavingsPlansUtilizationDetailsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.time_period {
        #[allow(unused_mut)]
        let mut object_2 = object.key("TimePeriod").start_object();
        crate::protocol_serde::shape_date_interval::ser_date_interval(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.filter {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Filter").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.data_type {
        let mut array_6 = object.key("DataType").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.next_token {
        object.key("NextToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_11 = object.key("SortBy").start_object();
        crate::protocol_serde::shape_sort_definition::ser_sort_definition(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
