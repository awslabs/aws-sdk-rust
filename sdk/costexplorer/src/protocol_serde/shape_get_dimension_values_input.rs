// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_dimension_values_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_dimension_values::GetDimensionValuesInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.search_string {
        object.key("SearchString").string(var_1.as_str());
    }
    if let Some(var_2) = &input.time_period {
        #[allow(unused_mut)]
        let mut object_3 = object.key("TimePeriod").start_object();
        crate::protocol_serde::shape_date_interval::ser_date_interval(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.dimension {
        object.key("Dimension").string(var_4.as_str());
    }
    if let Some(var_5) = &input.context {
        object.key("Context").string(var_5.as_str());
    }
    if let Some(var_6) = &input.filter {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Filter").start_object();
        crate::protocol_serde::shape_expression::ser_expression(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.sort_by {
        let mut array_9 = object.key("SortBy").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_sort_definition::ser_sort_definition(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.next_page_token {
        object.key("NextPageToken").string(var_13.as_str());
    }
    Ok(())
}
