// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The amount of instance usage that a reservation covered.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Coverage {
    /// <p>The amount of instance usage that the reservation covered, in hours.</p>
    #[doc(hidden)]
    pub coverage_hours: std::option::Option<crate::types::CoverageHours>,
    /// <p>The amount of instance usage that the reservation covered, in normalized units.</p>
    #[doc(hidden)]
    pub coverage_normalized_units: std::option::Option<crate::types::CoverageNormalizedUnits>,
    /// <p>The amount of cost that the reservation covered.</p>
    #[doc(hidden)]
    pub coverage_cost: std::option::Option<crate::types::CoverageCost>,
}
impl Coverage {
    /// <p>The amount of instance usage that the reservation covered, in hours.</p>
    pub fn coverage_hours(&self) -> std::option::Option<&crate::types::CoverageHours> {
        self.coverage_hours.as_ref()
    }
    /// <p>The amount of instance usage that the reservation covered, in normalized units.</p>
    pub fn coverage_normalized_units(
        &self,
    ) -> std::option::Option<&crate::types::CoverageNormalizedUnits> {
        self.coverage_normalized_units.as_ref()
    }
    /// <p>The amount of cost that the reservation covered.</p>
    pub fn coverage_cost(&self) -> std::option::Option<&crate::types::CoverageCost> {
        self.coverage_cost.as_ref()
    }
}
impl Coverage {
    /// Creates a new builder-style object to manufacture [`Coverage`](crate::types::Coverage).
    pub fn builder() -> crate::types::builders::CoverageBuilder {
        crate::types::builders::CoverageBuilder::default()
    }
}

/// A builder for [`Coverage`](crate::types::Coverage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CoverageBuilder {
    pub(crate) coverage_hours: std::option::Option<crate::types::CoverageHours>,
    pub(crate) coverage_normalized_units:
        std::option::Option<crate::types::CoverageNormalizedUnits>,
    pub(crate) coverage_cost: std::option::Option<crate::types::CoverageCost>,
}
impl CoverageBuilder {
    /// <p>The amount of instance usage that the reservation covered, in hours.</p>
    pub fn coverage_hours(mut self, input: crate::types::CoverageHours) -> Self {
        self.coverage_hours = Some(input);
        self
    }
    /// <p>The amount of instance usage that the reservation covered, in hours.</p>
    pub fn set_coverage_hours(
        mut self,
        input: std::option::Option<crate::types::CoverageHours>,
    ) -> Self {
        self.coverage_hours = input;
        self
    }
    /// <p>The amount of instance usage that the reservation covered, in normalized units.</p>
    pub fn coverage_normalized_units(
        mut self,
        input: crate::types::CoverageNormalizedUnits,
    ) -> Self {
        self.coverage_normalized_units = Some(input);
        self
    }
    /// <p>The amount of instance usage that the reservation covered, in normalized units.</p>
    pub fn set_coverage_normalized_units(
        mut self,
        input: std::option::Option<crate::types::CoverageNormalizedUnits>,
    ) -> Self {
        self.coverage_normalized_units = input;
        self
    }
    /// <p>The amount of cost that the reservation covered.</p>
    pub fn coverage_cost(mut self, input: crate::types::CoverageCost) -> Self {
        self.coverage_cost = Some(input);
        self
    }
    /// <p>The amount of cost that the reservation covered.</p>
    pub fn set_coverage_cost(
        mut self,
        input: std::option::Option<crate::types::CoverageCost>,
    ) -> Self {
        self.coverage_cost = input;
        self
    }
    /// Consumes the builder and constructs a [`Coverage`](crate::types::Coverage).
    pub fn build(self) -> crate::types::Coverage {
        crate::types::Coverage {
            coverage_hours: self.coverage_hours,
            coverage_normalized_units: self.coverage_normalized_units,
            coverage_cost: self.coverage_cost,
        }
    }
}
