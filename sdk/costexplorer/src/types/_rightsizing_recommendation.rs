// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Recommendations to rightsize resources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RightsizingRecommendation {
    /// <p>The account that this recommendation is for.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>Context regarding the current instance.</p>
    pub current_instance: ::std::option::Option<crate::types::CurrentInstance>,
    /// <p>A recommendation to either terminate or modify the resource.</p>
    pub rightsizing_type: ::std::option::Option<crate::types::RightsizingType>,
    /// <p>The details for the modification recommendations. </p>
    pub modify_recommendation_detail: ::std::option::Option<crate::types::ModifyRecommendationDetail>,
    /// <p>The details for termination recommendations.</p>
    pub terminate_recommendation_detail: ::std::option::Option<crate::types::TerminateRecommendationDetail>,
    /// <p>The list of possible reasons why the recommendation is generated, such as under- or over-utilization of specific metrics (for example, CPU, Memory, Network). </p>
    pub finding_reason_codes: ::std::option::Option<::std::vec::Vec<crate::types::FindingReasonCode>>,
}
impl RightsizingRecommendation {
    /// <p>The account that this recommendation is for.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Context regarding the current instance.</p>
    pub fn current_instance(&self) -> ::std::option::Option<&crate::types::CurrentInstance> {
        self.current_instance.as_ref()
    }
    /// <p>A recommendation to either terminate or modify the resource.</p>
    pub fn rightsizing_type(&self) -> ::std::option::Option<&crate::types::RightsizingType> {
        self.rightsizing_type.as_ref()
    }
    /// <p>The details for the modification recommendations. </p>
    pub fn modify_recommendation_detail(&self) -> ::std::option::Option<&crate::types::ModifyRecommendationDetail> {
        self.modify_recommendation_detail.as_ref()
    }
    /// <p>The details for termination recommendations.</p>
    pub fn terminate_recommendation_detail(&self) -> ::std::option::Option<&crate::types::TerminateRecommendationDetail> {
        self.terminate_recommendation_detail.as_ref()
    }
    /// <p>The list of possible reasons why the recommendation is generated, such as under- or over-utilization of specific metrics (for example, CPU, Memory, Network). </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_reason_codes.is_none()`.
    pub fn finding_reason_codes(&self) -> &[crate::types::FindingReasonCode] {
        self.finding_reason_codes.as_deref().unwrap_or_default()
    }
}
impl RightsizingRecommendation {
    /// Creates a new builder-style object to manufacture [`RightsizingRecommendation`](crate::types::RightsizingRecommendation).
    pub fn builder() -> crate::types::builders::RightsizingRecommendationBuilder {
        crate::types::builders::RightsizingRecommendationBuilder::default()
    }
}

/// A builder for [`RightsizingRecommendation`](crate::types::RightsizingRecommendation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RightsizingRecommendationBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) current_instance: ::std::option::Option<crate::types::CurrentInstance>,
    pub(crate) rightsizing_type: ::std::option::Option<crate::types::RightsizingType>,
    pub(crate) modify_recommendation_detail: ::std::option::Option<crate::types::ModifyRecommendationDetail>,
    pub(crate) terminate_recommendation_detail: ::std::option::Option<crate::types::TerminateRecommendationDetail>,
    pub(crate) finding_reason_codes: ::std::option::Option<::std::vec::Vec<crate::types::FindingReasonCode>>,
}
impl RightsizingRecommendationBuilder {
    /// <p>The account that this recommendation is for.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account that this recommendation is for.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account that this recommendation is for.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>Context regarding the current instance.</p>
    pub fn current_instance(mut self, input: crate::types::CurrentInstance) -> Self {
        self.current_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Context regarding the current instance.</p>
    pub fn set_current_instance(mut self, input: ::std::option::Option<crate::types::CurrentInstance>) -> Self {
        self.current_instance = input;
        self
    }
    /// <p>Context regarding the current instance.</p>
    pub fn get_current_instance(&self) -> &::std::option::Option<crate::types::CurrentInstance> {
        &self.current_instance
    }
    /// <p>A recommendation to either terminate or modify the resource.</p>
    pub fn rightsizing_type(mut self, input: crate::types::RightsizingType) -> Self {
        self.rightsizing_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>A recommendation to either terminate or modify the resource.</p>
    pub fn set_rightsizing_type(mut self, input: ::std::option::Option<crate::types::RightsizingType>) -> Self {
        self.rightsizing_type = input;
        self
    }
    /// <p>A recommendation to either terminate or modify the resource.</p>
    pub fn get_rightsizing_type(&self) -> &::std::option::Option<crate::types::RightsizingType> {
        &self.rightsizing_type
    }
    /// <p>The details for the modification recommendations. </p>
    pub fn modify_recommendation_detail(mut self, input: crate::types::ModifyRecommendationDetail) -> Self {
        self.modify_recommendation_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details for the modification recommendations. </p>
    pub fn set_modify_recommendation_detail(mut self, input: ::std::option::Option<crate::types::ModifyRecommendationDetail>) -> Self {
        self.modify_recommendation_detail = input;
        self
    }
    /// <p>The details for the modification recommendations. </p>
    pub fn get_modify_recommendation_detail(&self) -> &::std::option::Option<crate::types::ModifyRecommendationDetail> {
        &self.modify_recommendation_detail
    }
    /// <p>The details for termination recommendations.</p>
    pub fn terminate_recommendation_detail(mut self, input: crate::types::TerminateRecommendationDetail) -> Self {
        self.terminate_recommendation_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details for termination recommendations.</p>
    pub fn set_terminate_recommendation_detail(mut self, input: ::std::option::Option<crate::types::TerminateRecommendationDetail>) -> Self {
        self.terminate_recommendation_detail = input;
        self
    }
    /// <p>The details for termination recommendations.</p>
    pub fn get_terminate_recommendation_detail(&self) -> &::std::option::Option<crate::types::TerminateRecommendationDetail> {
        &self.terminate_recommendation_detail
    }
    /// Appends an item to `finding_reason_codes`.
    ///
    /// To override the contents of this collection use [`set_finding_reason_codes`](Self::set_finding_reason_codes).
    ///
    /// <p>The list of possible reasons why the recommendation is generated, such as under- or over-utilization of specific metrics (for example, CPU, Memory, Network). </p>
    pub fn finding_reason_codes(mut self, input: crate::types::FindingReasonCode) -> Self {
        let mut v = self.finding_reason_codes.unwrap_or_default();
        v.push(input);
        self.finding_reason_codes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of possible reasons why the recommendation is generated, such as under- or over-utilization of specific metrics (for example, CPU, Memory, Network). </p>
    pub fn set_finding_reason_codes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FindingReasonCode>>) -> Self {
        self.finding_reason_codes = input;
        self
    }
    /// <p>The list of possible reasons why the recommendation is generated, such as under- or over-utilization of specific metrics (for example, CPU, Memory, Network). </p>
    pub fn get_finding_reason_codes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FindingReasonCode>> {
        &self.finding_reason_codes
    }
    /// Consumes the builder and constructs a [`RightsizingRecommendation`](crate::types::RightsizingRecommendation).
    pub fn build(self) -> crate::types::RightsizingRecommendation {
        crate::types::RightsizingRecommendation {
            account_id: self.account_id,
            current_instance: self.current_instance,
            rightsizing_type: self.rightsizing_type,
            modify_recommendation_detail: self.modify_recommendation_detail,
            terminate_recommendation_detail: self.terminate_recommendation_detail,
            finding_reason_codes: self.finding_reason_codes,
        }
    }
}
