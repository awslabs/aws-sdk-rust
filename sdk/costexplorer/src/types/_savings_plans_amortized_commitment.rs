// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The amortized amount of Savings Plans purchased in a specific account during a specific time interval.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SavingsPlansAmortizedCommitment {
    /// <p>The amortized amount of your Savings Plans commitment that was purchased with either a <code>Partial</code> or a <code>NoUpfront</code>.</p>
    #[doc(hidden)]
    pub amortized_recurring_commitment: std::option::Option<std::string::String>,
    /// <p>The amortized amount of your Savings Plans commitment that was purchased with an <code>Upfront</code> or <code>PartialUpfront</code> Savings Plans.</p>
    #[doc(hidden)]
    pub amortized_upfront_commitment: std::option::Option<std::string::String>,
    /// <p>The total amortized amount of your Savings Plans commitment, regardless of your Savings Plans purchase method. </p>
    #[doc(hidden)]
    pub total_amortized_commitment: std::option::Option<std::string::String>,
}
impl SavingsPlansAmortizedCommitment {
    /// <p>The amortized amount of your Savings Plans commitment that was purchased with either a <code>Partial</code> or a <code>NoUpfront</code>.</p>
    pub fn amortized_recurring_commitment(&self) -> std::option::Option<&str> {
        self.amortized_recurring_commitment.as_deref()
    }
    /// <p>The amortized amount of your Savings Plans commitment that was purchased with an <code>Upfront</code> or <code>PartialUpfront</code> Savings Plans.</p>
    pub fn amortized_upfront_commitment(&self) -> std::option::Option<&str> {
        self.amortized_upfront_commitment.as_deref()
    }
    /// <p>The total amortized amount of your Savings Plans commitment, regardless of your Savings Plans purchase method. </p>
    pub fn total_amortized_commitment(&self) -> std::option::Option<&str> {
        self.total_amortized_commitment.as_deref()
    }
}
impl SavingsPlansAmortizedCommitment {
    /// Creates a new builder-style object to manufacture [`SavingsPlansAmortizedCommitment`](crate::types::SavingsPlansAmortizedCommitment).
    pub fn builder() -> crate::types::builders::SavingsPlansAmortizedCommitmentBuilder {
        crate::types::builders::SavingsPlansAmortizedCommitmentBuilder::default()
    }
}

/// A builder for [`SavingsPlansAmortizedCommitment`](crate::types::SavingsPlansAmortizedCommitment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SavingsPlansAmortizedCommitmentBuilder {
    pub(crate) amortized_recurring_commitment: std::option::Option<std::string::String>,
    pub(crate) amortized_upfront_commitment: std::option::Option<std::string::String>,
    pub(crate) total_amortized_commitment: std::option::Option<std::string::String>,
}
impl SavingsPlansAmortizedCommitmentBuilder {
    /// <p>The amortized amount of your Savings Plans commitment that was purchased with either a <code>Partial</code> or a <code>NoUpfront</code>.</p>
    pub fn amortized_recurring_commitment(mut self, input: impl Into<std::string::String>) -> Self {
        self.amortized_recurring_commitment = Some(input.into());
        self
    }
    /// <p>The amortized amount of your Savings Plans commitment that was purchased with either a <code>Partial</code> or a <code>NoUpfront</code>.</p>
    pub fn set_amortized_recurring_commitment(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.amortized_recurring_commitment = input;
        self
    }
    /// <p>The amortized amount of your Savings Plans commitment that was purchased with an <code>Upfront</code> or <code>PartialUpfront</code> Savings Plans.</p>
    pub fn amortized_upfront_commitment(mut self, input: impl Into<std::string::String>) -> Self {
        self.amortized_upfront_commitment = Some(input.into());
        self
    }
    /// <p>The amortized amount of your Savings Plans commitment that was purchased with an <code>Upfront</code> or <code>PartialUpfront</code> Savings Plans.</p>
    pub fn set_amortized_upfront_commitment(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.amortized_upfront_commitment = input;
        self
    }
    /// <p>The total amortized amount of your Savings Plans commitment, regardless of your Savings Plans purchase method. </p>
    pub fn total_amortized_commitment(mut self, input: impl Into<std::string::String>) -> Self {
        self.total_amortized_commitment = Some(input.into());
        self
    }
    /// <p>The total amortized amount of your Savings Plans commitment, regardless of your Savings Plans purchase method. </p>
    pub fn set_total_amortized_commitment(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.total_amortized_commitment = input;
        self
    }
    /// Consumes the builder and constructs a [`SavingsPlansAmortizedCommitment`](crate::types::SavingsPlansAmortizedCommitment).
    pub fn build(self) -> crate::types::SavingsPlansAmortizedCommitment {
        crate::types::SavingsPlansAmortizedCommitment {
            amortized_recurring_commitment: self.amortized_recurring_commitment,
            amortized_upfront_commitment: self.amortized_upfront_commitment,
            total_amortized_commitment: self.total_amortized_commitment,
        }
    }
}
