// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata for this recommendation set.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RightsizingRecommendationMetadata {
    /// <p>The ID for this specific recommendation.</p>
    #[doc(hidden)]
    pub recommendation_id: std::option::Option<std::string::String>,
    /// <p>The timestamp for when Amazon Web Services made this recommendation.</p>
    #[doc(hidden)]
    pub generation_timestamp: std::option::Option<std::string::String>,
    /// <p>The number of days of previous usage that Amazon Web Services considers when making this recommendation.</p>
    #[doc(hidden)]
    pub lookback_period_in_days: std::option::Option<crate::types::LookbackPeriodInDays>,
    /// <p>Additional metadata that might be applicable to the recommendation.</p>
    #[doc(hidden)]
    pub additional_metadata: std::option::Option<std::string::String>,
}
impl RightsizingRecommendationMetadata {
    /// <p>The ID for this specific recommendation.</p>
    pub fn recommendation_id(&self) -> std::option::Option<&str> {
        self.recommendation_id.as_deref()
    }
    /// <p>The timestamp for when Amazon Web Services made this recommendation.</p>
    pub fn generation_timestamp(&self) -> std::option::Option<&str> {
        self.generation_timestamp.as_deref()
    }
    /// <p>The number of days of previous usage that Amazon Web Services considers when making this recommendation.</p>
    pub fn lookback_period_in_days(
        &self,
    ) -> std::option::Option<&crate::types::LookbackPeriodInDays> {
        self.lookback_period_in_days.as_ref()
    }
    /// <p>Additional metadata that might be applicable to the recommendation.</p>
    pub fn additional_metadata(&self) -> std::option::Option<&str> {
        self.additional_metadata.as_deref()
    }
}
impl RightsizingRecommendationMetadata {
    /// Creates a new builder-style object to manufacture [`RightsizingRecommendationMetadata`](crate::types::RightsizingRecommendationMetadata).
    pub fn builder() -> crate::types::builders::RightsizingRecommendationMetadataBuilder {
        crate::types::builders::RightsizingRecommendationMetadataBuilder::default()
    }
}

/// A builder for [`RightsizingRecommendationMetadata`](crate::types::RightsizingRecommendationMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RightsizingRecommendationMetadataBuilder {
    pub(crate) recommendation_id: std::option::Option<std::string::String>,
    pub(crate) generation_timestamp: std::option::Option<std::string::String>,
    pub(crate) lookback_period_in_days: std::option::Option<crate::types::LookbackPeriodInDays>,
    pub(crate) additional_metadata: std::option::Option<std::string::String>,
}
impl RightsizingRecommendationMetadataBuilder {
    /// <p>The ID for this specific recommendation.</p>
    pub fn recommendation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.recommendation_id = Some(input.into());
        self
    }
    /// <p>The ID for this specific recommendation.</p>
    pub fn set_recommendation_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recommendation_id = input;
        self
    }
    /// <p>The timestamp for when Amazon Web Services made this recommendation.</p>
    pub fn generation_timestamp(mut self, input: impl Into<std::string::String>) -> Self {
        self.generation_timestamp = Some(input.into());
        self
    }
    /// <p>The timestamp for when Amazon Web Services made this recommendation.</p>
    pub fn set_generation_timestamp(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.generation_timestamp = input;
        self
    }
    /// <p>The number of days of previous usage that Amazon Web Services considers when making this recommendation.</p>
    pub fn lookback_period_in_days(mut self, input: crate::types::LookbackPeriodInDays) -> Self {
        self.lookback_period_in_days = Some(input);
        self
    }
    /// <p>The number of days of previous usage that Amazon Web Services considers when making this recommendation.</p>
    pub fn set_lookback_period_in_days(
        mut self,
        input: std::option::Option<crate::types::LookbackPeriodInDays>,
    ) -> Self {
        self.lookback_period_in_days = input;
        self
    }
    /// <p>Additional metadata that might be applicable to the recommendation.</p>
    pub fn additional_metadata(mut self, input: impl Into<std::string::String>) -> Self {
        self.additional_metadata = Some(input.into());
        self
    }
    /// <p>Additional metadata that might be applicable to the recommendation.</p>
    pub fn set_additional_metadata(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.additional_metadata = input;
        self
    }
    /// Consumes the builder and constructs a [`RightsizingRecommendationMetadata`](crate::types::RightsizingRecommendationMetadata).
    pub fn build(self) -> crate::types::RightsizingRecommendationMetadata {
        crate::types::RightsizingRecommendationMetadata {
            recommendation_id: self.recommendation_id,
            generation_timestamp: self.generation_timestamp,
            lookback_period_in_days: self.lookback_period_in_days,
            additional_metadata: self.additional_metadata,
        }
    }
}
