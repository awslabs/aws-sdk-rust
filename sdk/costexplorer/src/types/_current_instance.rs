// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Context about the current instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CurrentInstance {
    /// <p>Resource ID of the current instance.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The name that you given an instance. This field shows as blank if you haven't given the instance a name.</p>
    #[doc(hidden)]
    pub instance_name: std::option::Option<std::string::String>,
    /// <p>Cost allocation resource tags that are applied to the instance.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::TagValues>>,
    /// <p>Details about the resource and utilization.</p>
    #[doc(hidden)]
    pub resource_details: std::option::Option<crate::types::ResourceDetails>,
    /// <p>Utilization information of the current instance during the lookback period.</p>
    #[doc(hidden)]
    pub resource_utilization: std::option::Option<crate::types::ResourceUtilization>,
    /// <p>The number of hours during the lookback period that's covered by reservations.</p>
    #[doc(hidden)]
    pub reservation_covered_hours_in_lookback_period: std::option::Option<std::string::String>,
    /// <p>The number of hours during the lookback period that's covered by Savings Plans.</p>
    #[doc(hidden)]
    pub savings_plans_covered_hours_in_lookback_period: std::option::Option<std::string::String>,
    /// <p>The number of hours during the lookback period that's billed at On-Demand rates.</p>
    #[doc(hidden)]
    pub on_demand_hours_in_lookback_period: std::option::Option<std::string::String>,
    /// <p>The total number of hours that the instance ran during the lookback period.</p>
    #[doc(hidden)]
    pub total_running_hours_in_lookback_period: std::option::Option<std::string::String>,
    /// <p>The current On-Demand cost of operating this instance on a monthly basis.</p>
    #[doc(hidden)]
    pub monthly_cost: std::option::Option<std::string::String>,
    /// <p>The currency code that Amazon Web Services used to calculate the costs for this instance.</p>
    #[doc(hidden)]
    pub currency_code: std::option::Option<std::string::String>,
}
impl CurrentInstance {
    /// <p>Resource ID of the current instance.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The name that you given an instance. This field shows as blank if you haven't given the instance a name.</p>
    pub fn instance_name(&self) -> std::option::Option<&str> {
        self.instance_name.as_deref()
    }
    /// <p>Cost allocation resource tags that are applied to the instance.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::TagValues]> {
        self.tags.as_deref()
    }
    /// <p>Details about the resource and utilization.</p>
    pub fn resource_details(&self) -> std::option::Option<&crate::types::ResourceDetails> {
        self.resource_details.as_ref()
    }
    /// <p>Utilization information of the current instance during the lookback period.</p>
    pub fn resource_utilization(&self) -> std::option::Option<&crate::types::ResourceUtilization> {
        self.resource_utilization.as_ref()
    }
    /// <p>The number of hours during the lookback period that's covered by reservations.</p>
    pub fn reservation_covered_hours_in_lookback_period(&self) -> std::option::Option<&str> {
        self.reservation_covered_hours_in_lookback_period.as_deref()
    }
    /// <p>The number of hours during the lookback period that's covered by Savings Plans.</p>
    pub fn savings_plans_covered_hours_in_lookback_period(&self) -> std::option::Option<&str> {
        self.savings_plans_covered_hours_in_lookback_period
            .as_deref()
    }
    /// <p>The number of hours during the lookback period that's billed at On-Demand rates.</p>
    pub fn on_demand_hours_in_lookback_period(&self) -> std::option::Option<&str> {
        self.on_demand_hours_in_lookback_period.as_deref()
    }
    /// <p>The total number of hours that the instance ran during the lookback period.</p>
    pub fn total_running_hours_in_lookback_period(&self) -> std::option::Option<&str> {
        self.total_running_hours_in_lookback_period.as_deref()
    }
    /// <p>The current On-Demand cost of operating this instance on a monthly basis.</p>
    pub fn monthly_cost(&self) -> std::option::Option<&str> {
        self.monthly_cost.as_deref()
    }
    /// <p>The currency code that Amazon Web Services used to calculate the costs for this instance.</p>
    pub fn currency_code(&self) -> std::option::Option<&str> {
        self.currency_code.as_deref()
    }
}
impl CurrentInstance {
    /// Creates a new builder-style object to manufacture [`CurrentInstance`](crate::types::CurrentInstance).
    pub fn builder() -> crate::types::builders::CurrentInstanceBuilder {
        crate::types::builders::CurrentInstanceBuilder::default()
    }
}

/// A builder for [`CurrentInstance`](crate::types::CurrentInstance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CurrentInstanceBuilder {
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) instance_name: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::TagValues>>,
    pub(crate) resource_details: std::option::Option<crate::types::ResourceDetails>,
    pub(crate) resource_utilization: std::option::Option<crate::types::ResourceUtilization>,
    pub(crate) reservation_covered_hours_in_lookback_period:
        std::option::Option<std::string::String>,
    pub(crate) savings_plans_covered_hours_in_lookback_period:
        std::option::Option<std::string::String>,
    pub(crate) on_demand_hours_in_lookback_period: std::option::Option<std::string::String>,
    pub(crate) total_running_hours_in_lookback_period: std::option::Option<std::string::String>,
    pub(crate) monthly_cost: std::option::Option<std::string::String>,
    pub(crate) currency_code: std::option::Option<std::string::String>,
}
impl CurrentInstanceBuilder {
    /// <p>Resource ID of the current instance.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>Resource ID of the current instance.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The name that you given an instance. This field shows as blank if you haven't given the instance a name.</p>
    pub fn instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_name = Some(input.into());
        self
    }
    /// <p>The name that you given an instance. This field shows as blank if you haven't given the instance a name.</p>
    pub fn set_instance_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_name = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Cost allocation resource tags that are applied to the instance.</p>
    pub fn tags(mut self, input: crate::types::TagValues) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Cost allocation resource tags that are applied to the instance.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TagValues>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Details about the resource and utilization.</p>
    pub fn resource_details(mut self, input: crate::types::ResourceDetails) -> Self {
        self.resource_details = Some(input);
        self
    }
    /// <p>Details about the resource and utilization.</p>
    pub fn set_resource_details(
        mut self,
        input: std::option::Option<crate::types::ResourceDetails>,
    ) -> Self {
        self.resource_details = input;
        self
    }
    /// <p>Utilization information of the current instance during the lookback period.</p>
    pub fn resource_utilization(mut self, input: crate::types::ResourceUtilization) -> Self {
        self.resource_utilization = Some(input);
        self
    }
    /// <p>Utilization information of the current instance during the lookback period.</p>
    pub fn set_resource_utilization(
        mut self,
        input: std::option::Option<crate::types::ResourceUtilization>,
    ) -> Self {
        self.resource_utilization = input;
        self
    }
    /// <p>The number of hours during the lookback period that's covered by reservations.</p>
    pub fn reservation_covered_hours_in_lookback_period(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.reservation_covered_hours_in_lookback_period = Some(input.into());
        self
    }
    /// <p>The number of hours during the lookback period that's covered by reservations.</p>
    pub fn set_reservation_covered_hours_in_lookback_period(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reservation_covered_hours_in_lookback_period = input;
        self
    }
    /// <p>The number of hours during the lookback period that's covered by Savings Plans.</p>
    pub fn savings_plans_covered_hours_in_lookback_period(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.savings_plans_covered_hours_in_lookback_period = Some(input.into());
        self
    }
    /// <p>The number of hours during the lookback period that's covered by Savings Plans.</p>
    pub fn set_savings_plans_covered_hours_in_lookback_period(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.savings_plans_covered_hours_in_lookback_period = input;
        self
    }
    /// <p>The number of hours during the lookback period that's billed at On-Demand rates.</p>
    pub fn on_demand_hours_in_lookback_period(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.on_demand_hours_in_lookback_period = Some(input.into());
        self
    }
    /// <p>The number of hours during the lookback period that's billed at On-Demand rates.</p>
    pub fn set_on_demand_hours_in_lookback_period(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.on_demand_hours_in_lookback_period = input;
        self
    }
    /// <p>The total number of hours that the instance ran during the lookback period.</p>
    pub fn total_running_hours_in_lookback_period(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.total_running_hours_in_lookback_period = Some(input.into());
        self
    }
    /// <p>The total number of hours that the instance ran during the lookback period.</p>
    pub fn set_total_running_hours_in_lookback_period(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.total_running_hours_in_lookback_period = input;
        self
    }
    /// <p>The current On-Demand cost of operating this instance on a monthly basis.</p>
    pub fn monthly_cost(mut self, input: impl Into<std::string::String>) -> Self {
        self.monthly_cost = Some(input.into());
        self
    }
    /// <p>The current On-Demand cost of operating this instance on a monthly basis.</p>
    pub fn set_monthly_cost(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.monthly_cost = input;
        self
    }
    /// <p>The currency code that Amazon Web Services used to calculate the costs for this instance.</p>
    pub fn currency_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.currency_code = Some(input.into());
        self
    }
    /// <p>The currency code that Amazon Web Services used to calculate the costs for this instance.</p>
    pub fn set_currency_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// Consumes the builder and constructs a [`CurrentInstance`](crate::types::CurrentInstance).
    pub fn build(self) -> crate::types::CurrentInstance {
        crate::types::CurrentInstance {
            resource_id: self.resource_id,
            instance_name: self.instance_name,
            tags: self.tags,
            resource_details: self.resource_details,
            resource_utilization: self.resource_utilization,
            reservation_covered_hours_in_lookback_period: self
                .reservation_covered_hours_in_lookback_period,
            savings_plans_covered_hours_in_lookback_period: self
                .savings_plans_covered_hours_in_lookback_period,
            on_demand_hours_in_lookback_period: self.on_demand_hours_in_lookback_period,
            total_running_hours_in_lookback_period: self.total_running_hours_in_lookback_period,
            monthly_cost: self.monthly_cost,
            currency_code: self.currency_code,
        }
    }
}
