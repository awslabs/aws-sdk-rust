// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specific coverage percentage, On-Demand costs, and spend covered by Savings Plans, and total Savings Plans costs for an account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SavingsPlansCoverageData {
    /// <p>The amount of your Amazon Web Services usage that's covered by a Savings Plans.</p>
    #[doc(hidden)]
    pub spend_covered_by_savings_plans: std::option::Option<std::string::String>,
    /// <p>The cost of your Amazon Web Services usage at the public On-Demand rate.</p>
    #[doc(hidden)]
    pub on_demand_cost: std::option::Option<std::string::String>,
    /// <p>The total cost of your Amazon Web Services usage, regardless of your purchase option.</p>
    #[doc(hidden)]
    pub total_cost: std::option::Option<std::string::String>,
    /// <p>The percentage of your existing Savings Plans covered usage, divided by all of your eligible Savings Plans usage in an account (or set of accounts).</p>
    #[doc(hidden)]
    pub coverage_percentage: std::option::Option<std::string::String>,
}
impl SavingsPlansCoverageData {
    /// <p>The amount of your Amazon Web Services usage that's covered by a Savings Plans.</p>
    pub fn spend_covered_by_savings_plans(&self) -> std::option::Option<&str> {
        self.spend_covered_by_savings_plans.as_deref()
    }
    /// <p>The cost of your Amazon Web Services usage at the public On-Demand rate.</p>
    pub fn on_demand_cost(&self) -> std::option::Option<&str> {
        self.on_demand_cost.as_deref()
    }
    /// <p>The total cost of your Amazon Web Services usage, regardless of your purchase option.</p>
    pub fn total_cost(&self) -> std::option::Option<&str> {
        self.total_cost.as_deref()
    }
    /// <p>The percentage of your existing Savings Plans covered usage, divided by all of your eligible Savings Plans usage in an account (or set of accounts).</p>
    pub fn coverage_percentage(&self) -> std::option::Option<&str> {
        self.coverage_percentage.as_deref()
    }
}
impl SavingsPlansCoverageData {
    /// Creates a new builder-style object to manufacture [`SavingsPlansCoverageData`](crate::types::SavingsPlansCoverageData).
    pub fn builder() -> crate::types::builders::SavingsPlansCoverageDataBuilder {
        crate::types::builders::SavingsPlansCoverageDataBuilder::default()
    }
}

/// A builder for [`SavingsPlansCoverageData`](crate::types::SavingsPlansCoverageData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SavingsPlansCoverageDataBuilder {
    pub(crate) spend_covered_by_savings_plans: std::option::Option<std::string::String>,
    pub(crate) on_demand_cost: std::option::Option<std::string::String>,
    pub(crate) total_cost: std::option::Option<std::string::String>,
    pub(crate) coverage_percentage: std::option::Option<std::string::String>,
}
impl SavingsPlansCoverageDataBuilder {
    /// <p>The amount of your Amazon Web Services usage that's covered by a Savings Plans.</p>
    pub fn spend_covered_by_savings_plans(mut self, input: impl Into<std::string::String>) -> Self {
        self.spend_covered_by_savings_plans = Some(input.into());
        self
    }
    /// <p>The amount of your Amazon Web Services usage that's covered by a Savings Plans.</p>
    pub fn set_spend_covered_by_savings_plans(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.spend_covered_by_savings_plans = input;
        self
    }
    /// <p>The cost of your Amazon Web Services usage at the public On-Demand rate.</p>
    pub fn on_demand_cost(mut self, input: impl Into<std::string::String>) -> Self {
        self.on_demand_cost = Some(input.into());
        self
    }
    /// <p>The cost of your Amazon Web Services usage at the public On-Demand rate.</p>
    pub fn set_on_demand_cost(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.on_demand_cost = input;
        self
    }
    /// <p>The total cost of your Amazon Web Services usage, regardless of your purchase option.</p>
    pub fn total_cost(mut self, input: impl Into<std::string::String>) -> Self {
        self.total_cost = Some(input.into());
        self
    }
    /// <p>The total cost of your Amazon Web Services usage, regardless of your purchase option.</p>
    pub fn set_total_cost(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.total_cost = input;
        self
    }
    /// <p>The percentage of your existing Savings Plans covered usage, divided by all of your eligible Savings Plans usage in an account (or set of accounts).</p>
    pub fn coverage_percentage(mut self, input: impl Into<std::string::String>) -> Self {
        self.coverage_percentage = Some(input.into());
        self
    }
    /// <p>The percentage of your existing Savings Plans covered usage, divided by all of your eligible Savings Plans usage in an account (or set of accounts).</p>
    pub fn set_coverage_percentage(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.coverage_percentage = input;
        self
    }
    /// Consumes the builder and constructs a [`SavingsPlansCoverageData`](crate::types::SavingsPlansCoverageData).
    pub fn build(self) -> crate::types::SavingsPlansCoverageData {
        crate::types::SavingsPlansCoverageData {
            spend_covered_by_savings_plans: self.spend_covered_by_savings_plans,
            on_demand_cost: self.on_demand_cost,
            total_cost: self.total_cost,
            coverage_percentage: self.coverage_percentage,
        }
    }
}
