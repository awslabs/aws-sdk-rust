// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The aggregated value for a metric.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricValue {
    /// <p>The actual number that represents the metric.</p>
    #[doc(hidden)]
    pub amount: std::option::Option<std::string::String>,
    /// <p>The unit that the metric is given in.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<std::string::String>,
}
impl MetricValue {
    /// <p>The actual number that represents the metric.</p>
    pub fn amount(&self) -> std::option::Option<&str> {
        self.amount.as_deref()
    }
    /// <p>The unit that the metric is given in.</p>
    pub fn unit(&self) -> std::option::Option<&str> {
        self.unit.as_deref()
    }
}
impl MetricValue {
    /// Creates a new builder-style object to manufacture [`MetricValue`](crate::types::MetricValue).
    pub fn builder() -> crate::types::builders::MetricValueBuilder {
        crate::types::builders::MetricValueBuilder::default()
    }
}

/// A builder for [`MetricValue`](crate::types::MetricValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricValueBuilder {
    pub(crate) amount: std::option::Option<std::string::String>,
    pub(crate) unit: std::option::Option<std::string::String>,
}
impl MetricValueBuilder {
    /// <p>The actual number that represents the metric.</p>
    pub fn amount(mut self, input: impl Into<std::string::String>) -> Self {
        self.amount = Some(input.into());
        self
    }
    /// <p>The actual number that represents the metric.</p>
    pub fn set_amount(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.amount = input;
        self
    }
    /// <p>The unit that the metric is given in.</p>
    pub fn unit(mut self, input: impl Into<std::string::String>) -> Self {
        self.unit = Some(input.into());
        self
    }
    /// <p>The unit that the metric is given in.</p>
    pub fn set_unit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricValue`](crate::types::MetricValue).
    pub fn build(self) -> crate::types::MetricValue {
        crate::types::MetricValue {
            amount: self.amount,
            unit: self.unit,
        }
    }
}
