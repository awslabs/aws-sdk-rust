// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The measurement of how well you're using your existing Savings Plans.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SavingsPlansUtilization {
    /// <p>The total amount of Savings Plans commitment that's been purchased in an account (or set of accounts).</p>
    #[doc(hidden)]
    pub total_commitment: std::option::Option<std::string::String>,
    /// <p>The amount of your Savings Plans commitment that was consumed from Savings Plans eligible usage in a specific period.</p>
    #[doc(hidden)]
    pub used_commitment: std::option::Option<std::string::String>,
    /// <p>The amount of your Savings Plans commitment that wasn't consumed from Savings Plans eligible usage in a specific period.</p>
    #[doc(hidden)]
    pub unused_commitment: std::option::Option<std::string::String>,
    /// <p>The amount of <code>UsedCommitment</code> divided by the <code>TotalCommitment</code> for your Savings Plans.</p>
    #[doc(hidden)]
    pub utilization_percentage: std::option::Option<std::string::String>,
}
impl SavingsPlansUtilization {
    /// <p>The total amount of Savings Plans commitment that's been purchased in an account (or set of accounts).</p>
    pub fn total_commitment(&self) -> std::option::Option<&str> {
        self.total_commitment.as_deref()
    }
    /// <p>The amount of your Savings Plans commitment that was consumed from Savings Plans eligible usage in a specific period.</p>
    pub fn used_commitment(&self) -> std::option::Option<&str> {
        self.used_commitment.as_deref()
    }
    /// <p>The amount of your Savings Plans commitment that wasn't consumed from Savings Plans eligible usage in a specific period.</p>
    pub fn unused_commitment(&self) -> std::option::Option<&str> {
        self.unused_commitment.as_deref()
    }
    /// <p>The amount of <code>UsedCommitment</code> divided by the <code>TotalCommitment</code> for your Savings Plans.</p>
    pub fn utilization_percentage(&self) -> std::option::Option<&str> {
        self.utilization_percentage.as_deref()
    }
}
impl SavingsPlansUtilization {
    /// Creates a new builder-style object to manufacture [`SavingsPlansUtilization`](crate::types::SavingsPlansUtilization).
    pub fn builder() -> crate::types::builders::SavingsPlansUtilizationBuilder {
        crate::types::builders::SavingsPlansUtilizationBuilder::default()
    }
}

/// A builder for [`SavingsPlansUtilization`](crate::types::SavingsPlansUtilization).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SavingsPlansUtilizationBuilder {
    pub(crate) total_commitment: std::option::Option<std::string::String>,
    pub(crate) used_commitment: std::option::Option<std::string::String>,
    pub(crate) unused_commitment: std::option::Option<std::string::String>,
    pub(crate) utilization_percentage: std::option::Option<std::string::String>,
}
impl SavingsPlansUtilizationBuilder {
    /// <p>The total amount of Savings Plans commitment that's been purchased in an account (or set of accounts).</p>
    pub fn total_commitment(mut self, input: impl Into<std::string::String>) -> Self {
        self.total_commitment = Some(input.into());
        self
    }
    /// <p>The total amount of Savings Plans commitment that's been purchased in an account (or set of accounts).</p>
    pub fn set_total_commitment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.total_commitment = input;
        self
    }
    /// <p>The amount of your Savings Plans commitment that was consumed from Savings Plans eligible usage in a specific period.</p>
    pub fn used_commitment(mut self, input: impl Into<std::string::String>) -> Self {
        self.used_commitment = Some(input.into());
        self
    }
    /// <p>The amount of your Savings Plans commitment that was consumed from Savings Plans eligible usage in a specific period.</p>
    pub fn set_used_commitment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.used_commitment = input;
        self
    }
    /// <p>The amount of your Savings Plans commitment that wasn't consumed from Savings Plans eligible usage in a specific period.</p>
    pub fn unused_commitment(mut self, input: impl Into<std::string::String>) -> Self {
        self.unused_commitment = Some(input.into());
        self
    }
    /// <p>The amount of your Savings Plans commitment that wasn't consumed from Savings Plans eligible usage in a specific period.</p>
    pub fn set_unused_commitment(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.unused_commitment = input;
        self
    }
    /// <p>The amount of <code>UsedCommitment</code> divided by the <code>TotalCommitment</code> for your Savings Plans.</p>
    pub fn utilization_percentage(mut self, input: impl Into<std::string::String>) -> Self {
        self.utilization_percentage = Some(input.into());
        self
    }
    /// <p>The amount of <code>UsedCommitment</code> divided by the <code>TotalCommitment</code> for your Savings Plans.</p>
    pub fn set_utilization_percentage(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.utilization_percentage = input;
        self
    }
    /// Consumes the builder and constructs a [`SavingsPlansUtilization`](crate::types::SavingsPlansUtilization).
    pub fn build(self) -> crate::types::SavingsPlansUtilization {
        crate::types::SavingsPlansUtilization {
            total_commitment: self.total_commitment,
            used_commitment: self.used_commitment,
            unused_commitment: self.unused_commitment,
            utilization_percentage: self.utilization_percentage,
        }
    }
}
