// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details on the Amazon EC2 Resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Ec2ResourceDetails {
    /// <p>The hourly public On-Demand rate for the instance type.</p>
    #[doc(hidden)]
    pub hourly_on_demand_rate: std::option::Option<std::string::String>,
    /// <p>The type of Amazon Web Services instance.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The platform of the Amazon Web Services instance. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services Region of the instance.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>The SKU of the product.</p>
    #[doc(hidden)]
    pub sku: std::option::Option<std::string::String>,
    /// <p>The memory capacity of the Amazon Web Services instance.</p>
    #[doc(hidden)]
    pub memory: std::option::Option<std::string::String>,
    /// <p>The network performance capacity of the Amazon Web Services instance.</p>
    #[doc(hidden)]
    pub network_performance: std::option::Option<std::string::String>,
    /// <p>The disk storage of the Amazon Web Services instance. This doesn't include EBS storage.</p>
    #[doc(hidden)]
    pub storage: std::option::Option<std::string::String>,
    /// <p>The number of VCPU cores in the Amazon Web Services instance type.</p>
    #[doc(hidden)]
    pub vcpu: std::option::Option<std::string::String>,
}
impl Ec2ResourceDetails {
    /// <p>The hourly public On-Demand rate for the instance type.</p>
    pub fn hourly_on_demand_rate(&self) -> std::option::Option<&str> {
        self.hourly_on_demand_rate.as_deref()
    }
    /// <p>The type of Amazon Web Services instance.</p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The platform of the Amazon Web Services instance. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn platform(&self) -> std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>The Amazon Web Services Region of the instance.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The SKU of the product.</p>
    pub fn sku(&self) -> std::option::Option<&str> {
        self.sku.as_deref()
    }
    /// <p>The memory capacity of the Amazon Web Services instance.</p>
    pub fn memory(&self) -> std::option::Option<&str> {
        self.memory.as_deref()
    }
    /// <p>The network performance capacity of the Amazon Web Services instance.</p>
    pub fn network_performance(&self) -> std::option::Option<&str> {
        self.network_performance.as_deref()
    }
    /// <p>The disk storage of the Amazon Web Services instance. This doesn't include EBS storage.</p>
    pub fn storage(&self) -> std::option::Option<&str> {
        self.storage.as_deref()
    }
    /// <p>The number of VCPU cores in the Amazon Web Services instance type.</p>
    pub fn vcpu(&self) -> std::option::Option<&str> {
        self.vcpu.as_deref()
    }
}
impl Ec2ResourceDetails {
    /// Creates a new builder-style object to manufacture [`Ec2ResourceDetails`](crate::types::Ec2ResourceDetails).
    pub fn builder() -> crate::types::builders::Ec2ResourceDetailsBuilder {
        crate::types::builders::Ec2ResourceDetailsBuilder::default()
    }
}

/// A builder for [`Ec2ResourceDetails`](crate::types::Ec2ResourceDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct Ec2ResourceDetailsBuilder {
    pub(crate) hourly_on_demand_rate: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) platform: std::option::Option<std::string::String>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) sku: std::option::Option<std::string::String>,
    pub(crate) memory: std::option::Option<std::string::String>,
    pub(crate) network_performance: std::option::Option<std::string::String>,
    pub(crate) storage: std::option::Option<std::string::String>,
    pub(crate) vcpu: std::option::Option<std::string::String>,
}
impl Ec2ResourceDetailsBuilder {
    /// <p>The hourly public On-Demand rate for the instance type.</p>
    pub fn hourly_on_demand_rate(mut self, input: impl Into<std::string::String>) -> Self {
        self.hourly_on_demand_rate = Some(input.into());
        self
    }
    /// <p>The hourly public On-Demand rate for the instance type.</p>
    pub fn set_hourly_on_demand_rate(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.hourly_on_demand_rate = input;
        self
    }
    /// <p>The type of Amazon Web Services instance.</p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The type of Amazon Web Services instance.</p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The platform of the Amazon Web Services instance. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn platform(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform = Some(input.into());
        self
    }
    /// <p>The platform of the Amazon Web Services instance. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn set_platform(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The Amazon Web Services Region of the instance.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region of the instance.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The SKU of the product.</p>
    pub fn sku(mut self, input: impl Into<std::string::String>) -> Self {
        self.sku = Some(input.into());
        self
    }
    /// <p>The SKU of the product.</p>
    pub fn set_sku(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sku = input;
        self
    }
    /// <p>The memory capacity of the Amazon Web Services instance.</p>
    pub fn memory(mut self, input: impl Into<std::string::String>) -> Self {
        self.memory = Some(input.into());
        self
    }
    /// <p>The memory capacity of the Amazon Web Services instance.</p>
    pub fn set_memory(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.memory = input;
        self
    }
    /// <p>The network performance capacity of the Amazon Web Services instance.</p>
    pub fn network_performance(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_performance = Some(input.into());
        self
    }
    /// <p>The network performance capacity of the Amazon Web Services instance.</p>
    pub fn set_network_performance(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_performance = input;
        self
    }
    /// <p>The disk storage of the Amazon Web Services instance. This doesn't include EBS storage.</p>
    pub fn storage(mut self, input: impl Into<std::string::String>) -> Self {
        self.storage = Some(input.into());
        self
    }
    /// <p>The disk storage of the Amazon Web Services instance. This doesn't include EBS storage.</p>
    pub fn set_storage(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.storage = input;
        self
    }
    /// <p>The number of VCPU cores in the Amazon Web Services instance type.</p>
    pub fn vcpu(mut self, input: impl Into<std::string::String>) -> Self {
        self.vcpu = Some(input.into());
        self
    }
    /// <p>The number of VCPU cores in the Amazon Web Services instance type.</p>
    pub fn set_vcpu(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vcpu = input;
        self
    }
    /// Consumes the builder and constructs a [`Ec2ResourceDetails`](crate::types::Ec2ResourceDetails).
    pub fn build(self) -> crate::types::Ec2ResourceDetails {
        crate::types::Ec2ResourceDetails {
            hourly_on_demand_rate: self.hourly_on_demand_rate,
            instance_type: self.instance_type,
            platform: self.platform,
            region: self.region,
            sku: self.sku,
            memory: self.memory,
            network_performance: self.network_performance,
            storage: self.storage,
            vcpu: self.vcpu,
        }
    }
}
