// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>You can use <code>RightsizingRecommendationConfiguration</code> to customize recommendations across two attributes. You can choose to view recommendations for instances within the same instance families or across different instance families. You can also choose to view your estimated savings that are associated with recommendations with consideration of existing Savings Plans or Reserved Instance (RI) benefits, or neither. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RightsizingRecommendationConfiguration {
    /// <p>The option to see recommendations within the same instance family or recommendations for instances across other families. The default value is <code>SAME_INSTANCE_FAMILY</code>. </p>
    #[doc(hidden)]
    pub recommendation_target: std::option::Option<crate::types::RecommendationTarget>,
    /// <p>The option to consider RI or Savings Plans discount benefits in your savings calculation. The default value is <code>TRUE</code>. </p>
    #[doc(hidden)]
    pub benefits_considered: bool,
}
impl RightsizingRecommendationConfiguration {
    /// <p>The option to see recommendations within the same instance family or recommendations for instances across other families. The default value is <code>SAME_INSTANCE_FAMILY</code>. </p>
    pub fn recommendation_target(
        &self,
    ) -> std::option::Option<&crate::types::RecommendationTarget> {
        self.recommendation_target.as_ref()
    }
    /// <p>The option to consider RI or Savings Plans discount benefits in your savings calculation. The default value is <code>TRUE</code>. </p>
    pub fn benefits_considered(&self) -> bool {
        self.benefits_considered
    }
}
impl RightsizingRecommendationConfiguration {
    /// Creates a new builder-style object to manufacture [`RightsizingRecommendationConfiguration`](crate::types::RightsizingRecommendationConfiguration).
    pub fn builder() -> crate::types::builders::RightsizingRecommendationConfigurationBuilder {
        crate::types::builders::RightsizingRecommendationConfigurationBuilder::default()
    }
}

/// A builder for [`RightsizingRecommendationConfiguration`](crate::types::RightsizingRecommendationConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RightsizingRecommendationConfigurationBuilder {
    pub(crate) recommendation_target: std::option::Option<crate::types::RecommendationTarget>,
    pub(crate) benefits_considered: std::option::Option<bool>,
}
impl RightsizingRecommendationConfigurationBuilder {
    /// <p>The option to see recommendations within the same instance family or recommendations for instances across other families. The default value is <code>SAME_INSTANCE_FAMILY</code>. </p>
    pub fn recommendation_target(mut self, input: crate::types::RecommendationTarget) -> Self {
        self.recommendation_target = Some(input);
        self
    }
    /// <p>The option to see recommendations within the same instance family or recommendations for instances across other families. The default value is <code>SAME_INSTANCE_FAMILY</code>. </p>
    pub fn set_recommendation_target(
        mut self,
        input: std::option::Option<crate::types::RecommendationTarget>,
    ) -> Self {
        self.recommendation_target = input;
        self
    }
    /// <p>The option to consider RI or Savings Plans discount benefits in your savings calculation. The default value is <code>TRUE</code>. </p>
    pub fn benefits_considered(mut self, input: bool) -> Self {
        self.benefits_considered = Some(input);
        self
    }
    /// <p>The option to consider RI or Savings Plans discount benefits in your savings calculation. The default value is <code>TRUE</code>. </p>
    pub fn set_benefits_considered(mut self, input: std::option::Option<bool>) -> Self {
        self.benefits_considered = input;
        self
    }
    /// Consumes the builder and constructs a [`RightsizingRecommendationConfiguration`](crate::types::RightsizingRecommendationConfiguration).
    pub fn build(self) -> crate::types::RightsizingRecommendationConfiguration {
        crate::types::RightsizingRecommendationConfiguration {
            recommendation_target: self.recommendation_target,
            benefits_considered: self.benefits_considered.unwrap_or_default(),
        }
    }
}
