// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filters cost anomalies based on the total impact. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TotalImpactFilter {
    /// <p>The comparing value that's used in the filter. </p>
    #[doc(hidden)]
    pub numeric_operator: std::option::Option<crate::types::NumericOperator>,
    /// <p>The lower bound dollar value that's used in the filter. </p>
    #[doc(hidden)]
    pub start_value: f64,
    /// <p>The upper bound dollar value that's used in the filter. </p>
    #[doc(hidden)]
    pub end_value: f64,
}
impl TotalImpactFilter {
    /// <p>The comparing value that's used in the filter. </p>
    pub fn numeric_operator(&self) -> std::option::Option<&crate::types::NumericOperator> {
        self.numeric_operator.as_ref()
    }
    /// <p>The lower bound dollar value that's used in the filter. </p>
    pub fn start_value(&self) -> f64 {
        self.start_value
    }
    /// <p>The upper bound dollar value that's used in the filter. </p>
    pub fn end_value(&self) -> f64 {
        self.end_value
    }
}
impl TotalImpactFilter {
    /// Creates a new builder-style object to manufacture [`TotalImpactFilter`](crate::types::TotalImpactFilter).
    pub fn builder() -> crate::types::builders::TotalImpactFilterBuilder {
        crate::types::builders::TotalImpactFilterBuilder::default()
    }
}

/// A builder for [`TotalImpactFilter`](crate::types::TotalImpactFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TotalImpactFilterBuilder {
    pub(crate) numeric_operator: std::option::Option<crate::types::NumericOperator>,
    pub(crate) start_value: std::option::Option<f64>,
    pub(crate) end_value: std::option::Option<f64>,
}
impl TotalImpactFilterBuilder {
    /// <p>The comparing value that's used in the filter. </p>
    pub fn numeric_operator(mut self, input: crate::types::NumericOperator) -> Self {
        self.numeric_operator = Some(input);
        self
    }
    /// <p>The comparing value that's used in the filter. </p>
    pub fn set_numeric_operator(
        mut self,
        input: std::option::Option<crate::types::NumericOperator>,
    ) -> Self {
        self.numeric_operator = input;
        self
    }
    /// <p>The lower bound dollar value that's used in the filter. </p>
    pub fn start_value(mut self, input: f64) -> Self {
        self.start_value = Some(input);
        self
    }
    /// <p>The lower bound dollar value that's used in the filter. </p>
    pub fn set_start_value(mut self, input: std::option::Option<f64>) -> Self {
        self.start_value = input;
        self
    }
    /// <p>The upper bound dollar value that's used in the filter. </p>
    pub fn end_value(mut self, input: f64) -> Self {
        self.end_value = Some(input);
        self
    }
    /// <p>The upper bound dollar value that's used in the filter. </p>
    pub fn set_end_value(mut self, input: std::option::Option<f64>) -> Self {
        self.end_value = input;
        self
    }
    /// Consumes the builder and constructs a [`TotalImpactFilter`](crate::types::TotalImpactFilter).
    pub fn build(self) -> crate::types::TotalImpactFilter {
        crate::types::TotalImpactFilter {
            numeric_operator: self.numeric_operator,
            start_value: self.start_value.unwrap_or_default(),
            end_value: self.end_value.unwrap_or_default(),
        }
    }
}
