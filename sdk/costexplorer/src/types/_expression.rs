// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use <code>Expression</code> to filter in various Cost Explorer APIs.</p>
/// <p>Not all <code>Expression</code> types are supported in each API. Refer to the documentation for each specific API to see what is supported.</p>
/// <p>There are two patterns:</p>
/// <ul>
/// <li> <p>Simple dimension values.</p>
/// <ul>
/// <li> <p>There are three types of simple dimension values: <code>CostCategories</code>, <code>Tags</code>, and <code>Dimensions</code>.</p>
/// <ul>
/// <li> <p>Specify the <code>CostCategories</code> field to define a filter that acts on Cost Categories.</p> </li>
/// <li> <p>Specify the <code>Tags</code> field to define a filter that acts on Cost Allocation Tags.</p> </li>
/// <li> <p>Specify the <code>Dimensions</code> field to define a filter that acts on the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_DimensionValues.html"> <code>DimensionValues</code> </a>.</p> </li>
/// </ul> </li>
/// <li> <p>For each filter type, you can set the dimension name and values for the filters that you plan to use.</p>
/// <ul>
/// <li> <p>For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. For <code>GetRightsizingRecommendation</code>, the Region is a full name (for example, <code>REGION==US East (N. Virginia)</code>.</p> </li>
/// <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] } }</code> </p> </li>
/// <li> <p>As shown in the previous example, lists of dimension values are combined with <code>OR</code> when applying the filter.</p> </li>
/// </ul> </li>
/// <li> <p>You can also set different match options to further control how the filter behaves. Not all APIs support match options. Refer to the documentation for each specific API to see what is supported.</p>
/// <ul>
/// <li> <p>For example, you can filter for linked account names that start with "a".</p> </li>
/// <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "LINKED_ACCOUNT_NAME", "MatchOptions": [ "STARTS_WITH" ], "Values": [ "a" ] } }</code> </p> </li>
/// </ul> </li>
/// </ul> </li>
/// <li> <p>Compound <code>Expression</code> types with logical operations.</p>
/// <ul>
/// <li> <p>You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. By doing this, you can filter by more advanced options.</p> </li>
/// <li> <p>For example, you can filter by <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>.</p> </li>
/// <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> </li>
/// </ul> <note>
/// <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error: <code> { "And": [ ... ], "Dimensions": { "Key": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p>
/// <p>The following is an example of the corresponding error message: <code>"Expression has more than one roots. Only one root operator is allowed for each expression: And, Or, Not, Dimensions, Tags, CostCategories"</code> </p>
/// </note> </li>
/// </ul> <note>
/// <p>For the <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT isn't supported. OR isn't supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p>
/// <p>For the <code>GetReservationPurchaseRecommendation</code> action, only NOT is supported. AND and OR aren't supported. Dimensions are limited to <code>LINKED_ACCOUNT</code>.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Expression {
    /// <p>Return results that match either <code>Dimension</code> object.</p>
    pub or: ::std::option::Option<::std::vec::Vec<crate::types::Expression>>,
    /// <p>Return results that match both <code>Dimension</code> objects.</p>
    pub and: ::std::option::Option<::std::vec::Vec<crate::types::Expression>>,
    /// <p>Return results that don't match a <code>Dimension</code> object.</p>
    pub not: ::std::option::Option<::std::boxed::Box<crate::types::Expression>>,
    /// <p>The specific <code>Dimension</code> to use for <code>Expression</code>.</p>
    pub dimensions: ::std::option::Option<crate::types::DimensionValues>,
    /// <p>The specific <code>Tag</code> to use for <code>Expression</code>.</p>
    pub tags: ::std::option::Option<crate::types::TagValues>,
    /// <p>The filter that's based on <code>CostCategory</code> values.</p>
    pub cost_categories: ::std::option::Option<crate::types::CostCategoryValues>,
}
impl Expression {
    /// <p>Return results that match either <code>Dimension</code> object.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.or.is_none()`.
    pub fn or(&self) -> &[crate::types::Expression] {
        self.or.as_deref().unwrap_or_default()
    }
    /// <p>Return results that match both <code>Dimension</code> objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.and.is_none()`.
    pub fn and(&self) -> &[crate::types::Expression] {
        self.and.as_deref().unwrap_or_default()
    }
    /// <p>Return results that don't match a <code>Dimension</code> object.</p>
    pub fn not(&self) -> ::std::option::Option<&crate::types::Expression> {
        self.not.as_deref()
    }
    /// <p>The specific <code>Dimension</code> to use for <code>Expression</code>.</p>
    pub fn dimensions(&self) -> ::std::option::Option<&crate::types::DimensionValues> {
        self.dimensions.as_ref()
    }
    /// <p>The specific <code>Tag</code> to use for <code>Expression</code>.</p>
    pub fn tags(&self) -> ::std::option::Option<&crate::types::TagValues> {
        self.tags.as_ref()
    }
    /// <p>The filter that's based on <code>CostCategory</code> values.</p>
    pub fn cost_categories(&self) -> ::std::option::Option<&crate::types::CostCategoryValues> {
        self.cost_categories.as_ref()
    }
}
impl Expression {
    /// Creates a new builder-style object to manufacture [`Expression`](crate::types::Expression).
    pub fn builder() -> crate::types::builders::ExpressionBuilder {
        crate::types::builders::ExpressionBuilder::default()
    }
}

/// A builder for [`Expression`](crate::types::Expression).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExpressionBuilder {
    pub(crate) or: ::std::option::Option<::std::vec::Vec<crate::types::Expression>>,
    pub(crate) and: ::std::option::Option<::std::vec::Vec<crate::types::Expression>>,
    pub(crate) not: ::std::option::Option<::std::boxed::Box<crate::types::Expression>>,
    pub(crate) dimensions: ::std::option::Option<crate::types::DimensionValues>,
    pub(crate) tags: ::std::option::Option<crate::types::TagValues>,
    pub(crate) cost_categories: ::std::option::Option<crate::types::CostCategoryValues>,
}
impl ExpressionBuilder {
    /// Appends an item to `or`.
    ///
    /// To override the contents of this collection use [`set_or`](Self::set_or).
    ///
    /// <p>Return results that match either <code>Dimension</code> object.</p>
    pub fn or(mut self, input: crate::types::Expression) -> Self {
        let mut v = self.or.unwrap_or_default();
        v.push(input);
        self.or = ::std::option::Option::Some(v);
        self
    }
    /// <p>Return results that match either <code>Dimension</code> object.</p>
    pub fn set_or(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Expression>>) -> Self {
        self.or = input;
        self
    }
    /// <p>Return results that match either <code>Dimension</code> object.</p>
    pub fn get_or(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Expression>> {
        &self.or
    }
    /// Appends an item to `and`.
    ///
    /// To override the contents of this collection use [`set_and`](Self::set_and).
    ///
    /// <p>Return results that match both <code>Dimension</code> objects.</p>
    pub fn and(mut self, input: crate::types::Expression) -> Self {
        let mut v = self.and.unwrap_or_default();
        v.push(input);
        self.and = ::std::option::Option::Some(v);
        self
    }
    /// <p>Return results that match both <code>Dimension</code> objects.</p>
    pub fn set_and(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Expression>>) -> Self {
        self.and = input;
        self
    }
    /// <p>Return results that match both <code>Dimension</code> objects.</p>
    pub fn get_and(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Expression>> {
        &self.and
    }
    /// <p>Return results that don't match a <code>Dimension</code> object.</p>
    pub fn not(mut self, input: impl ::std::convert::Into<::std::boxed::Box<crate::types::Expression>>) -> Self {
        self.not = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Return results that don't match a <code>Dimension</code> object.</p>
    pub fn set_not(mut self, input: ::std::option::Option<::std::boxed::Box<crate::types::Expression>>) -> Self {
        self.not = input;
        self
    }
    /// <p>Return results that don't match a <code>Dimension</code> object.</p>
    pub fn get_not(&self) -> &::std::option::Option<::std::boxed::Box<crate::types::Expression>> {
        &self.not
    }
    /// <p>The specific <code>Dimension</code> to use for <code>Expression</code>.</p>
    pub fn dimensions(mut self, input: crate::types::DimensionValues) -> Self {
        self.dimensions = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specific <code>Dimension</code> to use for <code>Expression</code>.</p>
    pub fn set_dimensions(mut self, input: ::std::option::Option<crate::types::DimensionValues>) -> Self {
        self.dimensions = input;
        self
    }
    /// <p>The specific <code>Dimension</code> to use for <code>Expression</code>.</p>
    pub fn get_dimensions(&self) -> &::std::option::Option<crate::types::DimensionValues> {
        &self.dimensions
    }
    /// <p>The specific <code>Tag</code> to use for <code>Expression</code>.</p>
    pub fn tags(mut self, input: crate::types::TagValues) -> Self {
        self.tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specific <code>Tag</code> to use for <code>Expression</code>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<crate::types::TagValues>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The specific <code>Tag</code> to use for <code>Expression</code>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<crate::types::TagValues> {
        &self.tags
    }
    /// <p>The filter that's based on <code>CostCategory</code> values.</p>
    pub fn cost_categories(mut self, input: crate::types::CostCategoryValues) -> Self {
        self.cost_categories = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter that's based on <code>CostCategory</code> values.</p>
    pub fn set_cost_categories(mut self, input: ::std::option::Option<crate::types::CostCategoryValues>) -> Self {
        self.cost_categories = input;
        self
    }
    /// <p>The filter that's based on <code>CostCategory</code> values.</p>
    pub fn get_cost_categories(&self) -> &::std::option::Option<crate::types::CostCategoryValues> {
        &self.cost_categories
    }
    /// Consumes the builder and constructs a [`Expression`](crate::types::Expression).
    pub fn build(self) -> crate::types::Expression {
        crate::types::Expression {
            or: self.or,
            and: self.and,
            not: self.not,
            dimensions: self.dimensions,
            tags: self.tags,
            cost_categories: self.cost_categories,
        }
    }
}
