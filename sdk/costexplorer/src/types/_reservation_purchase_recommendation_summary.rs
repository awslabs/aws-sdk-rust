// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary about this recommendation, such as the currency code, the amount that Amazon Web Services estimates that you could save, and the total amount of reservation to purchase.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReservationPurchaseRecommendationSummary {
    /// <p>The total amount that Amazon Web Services estimates that this recommendation could save you in a month.</p>
    #[doc(hidden)]
    pub total_estimated_monthly_savings_amount: std::option::Option<std::string::String>,
    /// <p>The total amount that Amazon Web Services estimates that this recommendation could save you in a month, as a percentage of your costs.</p>
    #[doc(hidden)]
    pub total_estimated_monthly_savings_percentage: std::option::Option<std::string::String>,
    /// <p>The currency code used for this recommendation.</p>
    #[doc(hidden)]
    pub currency_code: std::option::Option<std::string::String>,
}
impl ReservationPurchaseRecommendationSummary {
    /// <p>The total amount that Amazon Web Services estimates that this recommendation could save you in a month.</p>
    pub fn total_estimated_monthly_savings_amount(&self) -> std::option::Option<&str> {
        self.total_estimated_monthly_savings_amount.as_deref()
    }
    /// <p>The total amount that Amazon Web Services estimates that this recommendation could save you in a month, as a percentage of your costs.</p>
    pub fn total_estimated_monthly_savings_percentage(&self) -> std::option::Option<&str> {
        self.total_estimated_monthly_savings_percentage.as_deref()
    }
    /// <p>The currency code used for this recommendation.</p>
    pub fn currency_code(&self) -> std::option::Option<&str> {
        self.currency_code.as_deref()
    }
}
impl ReservationPurchaseRecommendationSummary {
    /// Creates a new builder-style object to manufacture [`ReservationPurchaseRecommendationSummary`](crate::types::ReservationPurchaseRecommendationSummary).
    pub fn builder() -> crate::types::builders::ReservationPurchaseRecommendationSummaryBuilder {
        crate::types::builders::ReservationPurchaseRecommendationSummaryBuilder::default()
    }
}

/// A builder for [`ReservationPurchaseRecommendationSummary`](crate::types::ReservationPurchaseRecommendationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReservationPurchaseRecommendationSummaryBuilder {
    pub(crate) total_estimated_monthly_savings_amount: std::option::Option<std::string::String>,
    pub(crate) total_estimated_monthly_savings_percentage: std::option::Option<std::string::String>,
    pub(crate) currency_code: std::option::Option<std::string::String>,
}
impl ReservationPurchaseRecommendationSummaryBuilder {
    /// <p>The total amount that Amazon Web Services estimates that this recommendation could save you in a month.</p>
    pub fn total_estimated_monthly_savings_amount(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.total_estimated_monthly_savings_amount = Some(input.into());
        self
    }
    /// <p>The total amount that Amazon Web Services estimates that this recommendation could save you in a month.</p>
    pub fn set_total_estimated_monthly_savings_amount(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.total_estimated_monthly_savings_amount = input;
        self
    }
    /// <p>The total amount that Amazon Web Services estimates that this recommendation could save you in a month, as a percentage of your costs.</p>
    pub fn total_estimated_monthly_savings_percentage(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.total_estimated_monthly_savings_percentage = Some(input.into());
        self
    }
    /// <p>The total amount that Amazon Web Services estimates that this recommendation could save you in a month, as a percentage of your costs.</p>
    pub fn set_total_estimated_monthly_savings_percentage(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.total_estimated_monthly_savings_percentage = input;
        self
    }
    /// <p>The currency code used for this recommendation.</p>
    pub fn currency_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.currency_code = Some(input.into());
        self
    }
    /// <p>The currency code used for this recommendation.</p>
    pub fn set_currency_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// Consumes the builder and constructs a [`ReservationPurchaseRecommendationSummary`](crate::types::ReservationPurchaseRecommendationSummary).
    pub fn build(self) -> crate::types::ReservationPurchaseRecommendationSummary {
        crate::types::ReservationPurchaseRecommendationSummary {
            total_estimated_monthly_savings_amount: self.total_estimated_monthly_savings_amount,
            total_estimated_monthly_savings_percentage: self
                .total_estimated_monthly_savings_percentage,
            currency_code: self.currency_code,
        }
    }
}
