// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The field that contains a list of disk (local storage) metrics that are associated with the current instance. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DiskResourceUtilization {
    /// <p>The maximum number of read operations per second. </p>
    #[doc(hidden)]
    pub disk_read_ops_per_second: std::option::Option<std::string::String>,
    /// <p>The maximum number of write operations per second. </p>
    #[doc(hidden)]
    pub disk_write_ops_per_second: std::option::Option<std::string::String>,
    /// <p>The maximum read throughput operations per second. </p>
    #[doc(hidden)]
    pub disk_read_bytes_per_second: std::option::Option<std::string::String>,
    /// <p>The maximum write throughput operations per second. </p>
    #[doc(hidden)]
    pub disk_write_bytes_per_second: std::option::Option<std::string::String>,
}
impl DiskResourceUtilization {
    /// <p>The maximum number of read operations per second. </p>
    pub fn disk_read_ops_per_second(&self) -> std::option::Option<&str> {
        self.disk_read_ops_per_second.as_deref()
    }
    /// <p>The maximum number of write operations per second. </p>
    pub fn disk_write_ops_per_second(&self) -> std::option::Option<&str> {
        self.disk_write_ops_per_second.as_deref()
    }
    /// <p>The maximum read throughput operations per second. </p>
    pub fn disk_read_bytes_per_second(&self) -> std::option::Option<&str> {
        self.disk_read_bytes_per_second.as_deref()
    }
    /// <p>The maximum write throughput operations per second. </p>
    pub fn disk_write_bytes_per_second(&self) -> std::option::Option<&str> {
        self.disk_write_bytes_per_second.as_deref()
    }
}
impl DiskResourceUtilization {
    /// Creates a new builder-style object to manufacture [`DiskResourceUtilization`](crate::types::DiskResourceUtilization).
    pub fn builder() -> crate::types::builders::DiskResourceUtilizationBuilder {
        crate::types::builders::DiskResourceUtilizationBuilder::default()
    }
}

/// A builder for [`DiskResourceUtilization`](crate::types::DiskResourceUtilization).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DiskResourceUtilizationBuilder {
    pub(crate) disk_read_ops_per_second: std::option::Option<std::string::String>,
    pub(crate) disk_write_ops_per_second: std::option::Option<std::string::String>,
    pub(crate) disk_read_bytes_per_second: std::option::Option<std::string::String>,
    pub(crate) disk_write_bytes_per_second: std::option::Option<std::string::String>,
}
impl DiskResourceUtilizationBuilder {
    /// <p>The maximum number of read operations per second. </p>
    pub fn disk_read_ops_per_second(mut self, input: impl Into<std::string::String>) -> Self {
        self.disk_read_ops_per_second = Some(input.into());
        self
    }
    /// <p>The maximum number of read operations per second. </p>
    pub fn set_disk_read_ops_per_second(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.disk_read_ops_per_second = input;
        self
    }
    /// <p>The maximum number of write operations per second. </p>
    pub fn disk_write_ops_per_second(mut self, input: impl Into<std::string::String>) -> Self {
        self.disk_write_ops_per_second = Some(input.into());
        self
    }
    /// <p>The maximum number of write operations per second. </p>
    pub fn set_disk_write_ops_per_second(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.disk_write_ops_per_second = input;
        self
    }
    /// <p>The maximum read throughput operations per second. </p>
    pub fn disk_read_bytes_per_second(mut self, input: impl Into<std::string::String>) -> Self {
        self.disk_read_bytes_per_second = Some(input.into());
        self
    }
    /// <p>The maximum read throughput operations per second. </p>
    pub fn set_disk_read_bytes_per_second(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.disk_read_bytes_per_second = input;
        self
    }
    /// <p>The maximum write throughput operations per second. </p>
    pub fn disk_write_bytes_per_second(mut self, input: impl Into<std::string::String>) -> Self {
        self.disk_write_bytes_per_second = Some(input.into());
        self
    }
    /// <p>The maximum write throughput operations per second. </p>
    pub fn set_disk_write_bytes_per_second(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.disk_write_bytes_per_second = input;
        self
    }
    /// Consumes the builder and constructs a [`DiskResourceUtilization`](crate::types::DiskResourceUtilization).
    pub fn build(self) -> crate::types::DiskResourceUtilization {
        crate::types::DiskResourceUtilization {
            disk_read_ops_per_second: self.disk_read_ops_per_second,
            disk_write_ops_per_second: self.disk_write_ops_per_second,
            disk_read_bytes_per_second: self.disk_read_bytes_per_second,
            disk_write_bytes_per_second: self.disk_write_bytes_per_second,
        }
    }
}
