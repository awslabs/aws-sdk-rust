// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a group when you specify a group by criteria or in the response to a query with a specific grouping.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GroupDefinition {
    /// <p>The string that represents the type of group.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::GroupDefinitionType>,
    /// <p>The string that represents a key for a specified group.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
}
impl GroupDefinition {
    /// <p>The string that represents the type of group.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::GroupDefinitionType> {
        self.r#type.as_ref()
    }
    /// <p>The string that represents a key for a specified group.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
}
impl GroupDefinition {
    /// Creates a new builder-style object to manufacture [`GroupDefinition`](crate::types::GroupDefinition).
    pub fn builder() -> crate::types::builders::GroupDefinitionBuilder {
        crate::types::builders::GroupDefinitionBuilder::default()
    }
}

/// A builder for [`GroupDefinition`](crate::types::GroupDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GroupDefinitionBuilder {
    pub(crate) r#type: std::option::Option<crate::types::GroupDefinitionType>,
    pub(crate) key: std::option::Option<std::string::String>,
}
impl GroupDefinitionBuilder {
    /// <p>The string that represents the type of group.</p>
    pub fn r#type(mut self, input: crate::types::GroupDefinitionType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The string that represents the type of group.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::GroupDefinitionType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The string that represents a key for a specified group.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The string that represents a key for a specified group.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// Consumes the builder and constructs a [`GroupDefinition`](crate::types::GroupDefinition).
    pub fn build(self) -> crate::types::GroupDefinition {
        crate::types::GroupDefinition {
            r#type: self.r#type,
            key: self.key,
        }
    }
}
