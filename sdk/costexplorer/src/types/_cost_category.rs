// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure of Cost Categories. This includes detailed metadata and the set of rules for the <code>CostCategory</code> object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CostCategory {
    /// <p>The unique identifier for your Cost Category. </p>
    pub cost_category_arn: ::std::string::String,
    /// <p>The effective start date of your Cost Category.</p>
    pub effective_start: ::std::string::String,
    /// <p>The effective end date of your Cost Category.</p>
    pub effective_end: ::std::option::Option<::std::string::String>,
    /// <p>The unique name of the Cost Category.</p>
    pub name: ::std::string::String,
    /// <p>The rule schema version in this particular Cost Category.</p>
    pub rule_version: crate::types::CostCategoryRuleVersion,
    /// <p>The rules are processed in order. If there are multiple rules that match the line item, then the first rule to match is used to determine that Cost Category value. </p>
    pub rules: ::std::vec::Vec<crate::types::CostCategoryRule>,
    /// <p> The split charge rules that are used to allocate your charges between your Cost Category values. </p>
    pub split_charge_rules: ::std::option::Option<::std::vec::Vec<crate::types::CostCategorySplitChargeRule>>,
    /// <p>The list of processing statuses for Cost Management products for a specific cost category. </p>
    pub processing_status: ::std::option::Option<::std::vec::Vec<crate::types::CostCategoryProcessingStatus>>,
    /// <p>The default value for the cost category.</p>
    pub default_value: ::std::option::Option<::std::string::String>,
}
impl CostCategory {
    /// <p>The unique identifier for your Cost Category. </p>
    pub fn cost_category_arn(&self) -> &str {
        use std::ops::Deref;
        self.cost_category_arn.deref()
    }
    /// <p>The effective start date of your Cost Category.</p>
    pub fn effective_start(&self) -> &str {
        use std::ops::Deref;
        self.effective_start.deref()
    }
    /// <p>The effective end date of your Cost Category.</p>
    pub fn effective_end(&self) -> ::std::option::Option<&str> {
        self.effective_end.as_deref()
    }
    /// <p>The unique name of the Cost Category.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The rule schema version in this particular Cost Category.</p>
    pub fn rule_version(&self) -> &crate::types::CostCategoryRuleVersion {
        &self.rule_version
    }
    /// <p>The rules are processed in order. If there are multiple rules that match the line item, then the first rule to match is used to determine that Cost Category value. </p>
    pub fn rules(&self) -> &[crate::types::CostCategoryRule] {
        use std::ops::Deref;
        self.rules.deref()
    }
    /// <p> The split charge rules that are used to allocate your charges between your Cost Category values. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.split_charge_rules.is_none()`.
    pub fn split_charge_rules(&self) -> &[crate::types::CostCategorySplitChargeRule] {
        self.split_charge_rules.as_deref().unwrap_or_default()
    }
    /// <p>The list of processing statuses for Cost Management products for a specific cost category. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.processing_status.is_none()`.
    pub fn processing_status(&self) -> &[crate::types::CostCategoryProcessingStatus] {
        self.processing_status.as_deref().unwrap_or_default()
    }
    /// <p>The default value for the cost category.</p>
    pub fn default_value(&self) -> ::std::option::Option<&str> {
        self.default_value.as_deref()
    }
}
impl CostCategory {
    /// Creates a new builder-style object to manufacture [`CostCategory`](crate::types::CostCategory).
    pub fn builder() -> crate::types::builders::CostCategoryBuilder {
        crate::types::builders::CostCategoryBuilder::default()
    }
}

/// A builder for [`CostCategory`](crate::types::CostCategory).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CostCategoryBuilder {
    pub(crate) cost_category_arn: ::std::option::Option<::std::string::String>,
    pub(crate) effective_start: ::std::option::Option<::std::string::String>,
    pub(crate) effective_end: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) rule_version: ::std::option::Option<crate::types::CostCategoryRuleVersion>,
    pub(crate) rules: ::std::option::Option<::std::vec::Vec<crate::types::CostCategoryRule>>,
    pub(crate) split_charge_rules: ::std::option::Option<::std::vec::Vec<crate::types::CostCategorySplitChargeRule>>,
    pub(crate) processing_status: ::std::option::Option<::std::vec::Vec<crate::types::CostCategoryProcessingStatus>>,
    pub(crate) default_value: ::std::option::Option<::std::string::String>,
}
impl CostCategoryBuilder {
    /// <p>The unique identifier for your Cost Category. </p>
    /// This field is required.
    pub fn cost_category_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cost_category_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for your Cost Category. </p>
    pub fn set_cost_category_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cost_category_arn = input;
        self
    }
    /// <p>The unique identifier for your Cost Category. </p>
    pub fn get_cost_category_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cost_category_arn
    }
    /// <p>The effective start date of your Cost Category.</p>
    /// This field is required.
    pub fn effective_start(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.effective_start = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The effective start date of your Cost Category.</p>
    pub fn set_effective_start(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.effective_start = input;
        self
    }
    /// <p>The effective start date of your Cost Category.</p>
    pub fn get_effective_start(&self) -> &::std::option::Option<::std::string::String> {
        &self.effective_start
    }
    /// <p>The effective end date of your Cost Category.</p>
    pub fn effective_end(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.effective_end = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The effective end date of your Cost Category.</p>
    pub fn set_effective_end(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.effective_end = input;
        self
    }
    /// <p>The effective end date of your Cost Category.</p>
    pub fn get_effective_end(&self) -> &::std::option::Option<::std::string::String> {
        &self.effective_end
    }
    /// <p>The unique name of the Cost Category.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the Cost Category.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The unique name of the Cost Category.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The rule schema version in this particular Cost Category.</p>
    /// This field is required.
    pub fn rule_version(mut self, input: crate::types::CostCategoryRuleVersion) -> Self {
        self.rule_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rule schema version in this particular Cost Category.</p>
    pub fn set_rule_version(mut self, input: ::std::option::Option<crate::types::CostCategoryRuleVersion>) -> Self {
        self.rule_version = input;
        self
    }
    /// <p>The rule schema version in this particular Cost Category.</p>
    pub fn get_rule_version(&self) -> &::std::option::Option<crate::types::CostCategoryRuleVersion> {
        &self.rule_version
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The rules are processed in order. If there are multiple rules that match the line item, then the first rule to match is used to determine that Cost Category value. </p>
    pub fn rules(mut self, input: crate::types::CostCategoryRule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>The rules are processed in order. If there are multiple rules that match the line item, then the first rule to match is used to determine that Cost Category value. </p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CostCategoryRule>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>The rules are processed in order. If there are multiple rules that match the line item, then the first rule to match is used to determine that Cost Category value. </p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CostCategoryRule>> {
        &self.rules
    }
    /// Appends an item to `split_charge_rules`.
    ///
    /// To override the contents of this collection use [`set_split_charge_rules`](Self::set_split_charge_rules).
    ///
    /// <p> The split charge rules that are used to allocate your charges between your Cost Category values. </p>
    pub fn split_charge_rules(mut self, input: crate::types::CostCategorySplitChargeRule) -> Self {
        let mut v = self.split_charge_rules.unwrap_or_default();
        v.push(input);
        self.split_charge_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p> The split charge rules that are used to allocate your charges between your Cost Category values. </p>
    pub fn set_split_charge_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CostCategorySplitChargeRule>>) -> Self {
        self.split_charge_rules = input;
        self
    }
    /// <p> The split charge rules that are used to allocate your charges between your Cost Category values. </p>
    pub fn get_split_charge_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CostCategorySplitChargeRule>> {
        &self.split_charge_rules
    }
    /// Appends an item to `processing_status`.
    ///
    /// To override the contents of this collection use [`set_processing_status`](Self::set_processing_status).
    ///
    /// <p>The list of processing statuses for Cost Management products for a specific cost category. </p>
    pub fn processing_status(mut self, input: crate::types::CostCategoryProcessingStatus) -> Self {
        let mut v = self.processing_status.unwrap_or_default();
        v.push(input);
        self.processing_status = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of processing statuses for Cost Management products for a specific cost category. </p>
    pub fn set_processing_status(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CostCategoryProcessingStatus>>) -> Self {
        self.processing_status = input;
        self
    }
    /// <p>The list of processing statuses for Cost Management products for a specific cost category. </p>
    pub fn get_processing_status(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CostCategoryProcessingStatus>> {
        &self.processing_status
    }
    /// <p>The default value for the cost category.</p>
    pub fn default_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default value for the cost category.</p>
    pub fn set_default_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The default value for the cost category.</p>
    pub fn get_default_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_value
    }
    /// Consumes the builder and constructs a [`CostCategory`](crate::types::CostCategory).
    /// This method will fail if any of the following fields are not set:
    /// - [`cost_category_arn`](crate::types::builders::CostCategoryBuilder::cost_category_arn)
    /// - [`effective_start`](crate::types::builders::CostCategoryBuilder::effective_start)
    /// - [`name`](crate::types::builders::CostCategoryBuilder::name)
    /// - [`rule_version`](crate::types::builders::CostCategoryBuilder::rule_version)
    /// - [`rules`](crate::types::builders::CostCategoryBuilder::rules)
    pub fn build(self) -> ::std::result::Result<crate::types::CostCategory, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CostCategory {
            cost_category_arn: self.cost_category_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cost_category_arn",
                    "cost_category_arn was not specified but it is required when building CostCategory",
                )
            })?,
            effective_start: self.effective_start.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "effective_start",
                    "effective_start was not specified but it is required when building CostCategory",
                )
            })?,
            effective_end: self.effective_end,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CostCategory",
                )
            })?,
            rule_version: self.rule_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_version",
                    "rule_version was not specified but it is required when building CostCategory",
                )
            })?,
            rules: self.rules.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rules",
                    "rules was not specified but it is required when building CostCategory",
                )
            })?,
            split_charge_rules: self.split_charge_rules,
            processing_status: self.processing_status,
            default_value: self.default_value,
        })
    }
}
