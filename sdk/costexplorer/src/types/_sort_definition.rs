// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details for how to sort the data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SortDefinition {
    /// <p>The key that's used to sort the data.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The order that's used to sort the data.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
}
impl SortDefinition {
    /// <p>The key that's used to sort the data.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The order that's used to sort the data.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
}
impl SortDefinition {
    /// Creates a new builder-style object to manufacture [`SortDefinition`](crate::types::SortDefinition).
    pub fn builder() -> crate::types::builders::SortDefinitionBuilder {
        crate::types::builders::SortDefinitionBuilder::default()
    }
}

/// A builder for [`SortDefinition`](crate::types::SortDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SortDefinitionBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
}
impl SortDefinitionBuilder {
    /// <p>The key that's used to sort the data.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The key that's used to sort the data.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The order that's used to sort the data.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>The order that's used to sort the data.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// Consumes the builder and constructs a [`SortDefinition`](crate::types::SortDefinition).
    pub fn build(self) -> crate::types::SortDefinition {
        crate::types::SortDefinition {
            key: self.key,
            sort_order: self.sort_order,
        }
    }
}
