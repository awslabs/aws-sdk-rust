// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Reservation coverage for a specified period, in hours.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CoverageByTime {
    /// <p>The period that this coverage was used over.</p>
    #[doc(hidden)]
    pub time_period: std::option::Option<crate::types::DateInterval>,
    /// <p>The groups of instances that the reservation covered.</p>
    #[doc(hidden)]
    pub groups: std::option::Option<std::vec::Vec<crate::types::ReservationCoverageGroup>>,
    /// <p>The total reservation coverage, in hours.</p>
    #[doc(hidden)]
    pub total: std::option::Option<crate::types::Coverage>,
}
impl CoverageByTime {
    /// <p>The period that this coverage was used over.</p>
    pub fn time_period(&self) -> std::option::Option<&crate::types::DateInterval> {
        self.time_period.as_ref()
    }
    /// <p>The groups of instances that the reservation covered.</p>
    pub fn groups(&self) -> std::option::Option<&[crate::types::ReservationCoverageGroup]> {
        self.groups.as_deref()
    }
    /// <p>The total reservation coverage, in hours.</p>
    pub fn total(&self) -> std::option::Option<&crate::types::Coverage> {
        self.total.as_ref()
    }
}
impl CoverageByTime {
    /// Creates a new builder-style object to manufacture [`CoverageByTime`](crate::types::CoverageByTime).
    pub fn builder() -> crate::types::builders::CoverageByTimeBuilder {
        crate::types::builders::CoverageByTimeBuilder::default()
    }
}

/// A builder for [`CoverageByTime`](crate::types::CoverageByTime).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CoverageByTimeBuilder {
    pub(crate) time_period: std::option::Option<crate::types::DateInterval>,
    pub(crate) groups: std::option::Option<std::vec::Vec<crate::types::ReservationCoverageGroup>>,
    pub(crate) total: std::option::Option<crate::types::Coverage>,
}
impl CoverageByTimeBuilder {
    /// <p>The period that this coverage was used over.</p>
    pub fn time_period(mut self, input: crate::types::DateInterval) -> Self {
        self.time_period = Some(input);
        self
    }
    /// <p>The period that this coverage was used over.</p>
    pub fn set_time_period(
        mut self,
        input: std::option::Option<crate::types::DateInterval>,
    ) -> Self {
        self.time_period = input;
        self
    }
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>The groups of instances that the reservation covered.</p>
    pub fn groups(mut self, input: crate::types::ReservationCoverageGroup) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input);
        self.groups = Some(v);
        self
    }
    /// <p>The groups of instances that the reservation covered.</p>
    pub fn set_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReservationCoverageGroup>>,
    ) -> Self {
        self.groups = input;
        self
    }
    /// <p>The total reservation coverage, in hours.</p>
    pub fn total(mut self, input: crate::types::Coverage) -> Self {
        self.total = Some(input);
        self
    }
    /// <p>The total reservation coverage, in hours.</p>
    pub fn set_total(mut self, input: std::option::Option<crate::types::Coverage>) -> Self {
        self.total = input;
        self
    }
    /// Consumes the builder and constructs a [`CoverageByTime`](crate::types::CoverageByTime).
    pub fn build(self) -> crate::types::CoverageByTime {
        crate::types::CoverageByTime {
            time_period: self.time_period,
            groups: self.groups,
            total: self.total,
        }
    }
}
