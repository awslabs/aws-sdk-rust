// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the Amazon EC2 instances that Amazon Web Services recommends that you purchase.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Ec2InstanceDetails {
    /// <p>The instance family of the recommended reservation.</p>
    #[doc(hidden)]
    pub family: std::option::Option<std::string::String>,
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services Region of the recommended reservation.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>The Availability Zone of the recommended reservation.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The platform of the recommended reservation. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<std::string::String>,
    /// <p>Determines whether the recommended reservation is dedicated or shared.</p>
    #[doc(hidden)]
    pub tenancy: std::option::Option<std::string::String>,
    /// <p>Determines whether the recommendation is for a current-generation instance. </p>
    #[doc(hidden)]
    pub current_generation: bool,
    /// <p>Determines whether the recommended reservation is size flexible.</p>
    #[doc(hidden)]
    pub size_flex_eligible: bool,
}
impl Ec2InstanceDetails {
    /// <p>The instance family of the recommended reservation.</p>
    pub fn family(&self) -> std::option::Option<&str> {
        self.family.as_deref()
    }
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The Amazon Web Services Region of the recommended reservation.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The Availability Zone of the recommended reservation.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The platform of the recommended reservation. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn platform(&self) -> std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>Determines whether the recommended reservation is dedicated or shared.</p>
    pub fn tenancy(&self) -> std::option::Option<&str> {
        self.tenancy.as_deref()
    }
    /// <p>Determines whether the recommendation is for a current-generation instance. </p>
    pub fn current_generation(&self) -> bool {
        self.current_generation
    }
    /// <p>Determines whether the recommended reservation is size flexible.</p>
    pub fn size_flex_eligible(&self) -> bool {
        self.size_flex_eligible
    }
}
impl Ec2InstanceDetails {
    /// Creates a new builder-style object to manufacture [`Ec2InstanceDetails`](crate::types::Ec2InstanceDetails).
    pub fn builder() -> crate::types::builders::Ec2InstanceDetailsBuilder {
        crate::types::builders::Ec2InstanceDetailsBuilder::default()
    }
}

/// A builder for [`Ec2InstanceDetails`](crate::types::Ec2InstanceDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct Ec2InstanceDetailsBuilder {
    pub(crate) family: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) platform: std::option::Option<std::string::String>,
    pub(crate) tenancy: std::option::Option<std::string::String>,
    pub(crate) current_generation: std::option::Option<bool>,
    pub(crate) size_flex_eligible: std::option::Option<bool>,
}
impl Ec2InstanceDetailsBuilder {
    /// <p>The instance family of the recommended reservation.</p>
    pub fn family(mut self, input: impl Into<std::string::String>) -> Self {
        self.family = Some(input.into());
        self
    }
    /// <p>The instance family of the recommended reservation.</p>
    pub fn set_family(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.family = input;
        self
    }
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The Amazon Web Services Region of the recommended reservation.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region of the recommended reservation.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Availability Zone of the recommended reservation.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The Availability Zone of the recommended reservation.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The platform of the recommended reservation. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn platform(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform = Some(input.into());
        self
    }
    /// <p>The platform of the recommended reservation. The platform is the specific combination of operating system, license model, and software on an instance.</p>
    pub fn set_platform(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>Determines whether the recommended reservation is dedicated or shared.</p>
    pub fn tenancy(mut self, input: impl Into<std::string::String>) -> Self {
        self.tenancy = Some(input.into());
        self
    }
    /// <p>Determines whether the recommended reservation is dedicated or shared.</p>
    pub fn set_tenancy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tenancy = input;
        self
    }
    /// <p>Determines whether the recommendation is for a current-generation instance. </p>
    pub fn current_generation(mut self, input: bool) -> Self {
        self.current_generation = Some(input);
        self
    }
    /// <p>Determines whether the recommendation is for a current-generation instance. </p>
    pub fn set_current_generation(mut self, input: std::option::Option<bool>) -> Self {
        self.current_generation = input;
        self
    }
    /// <p>Determines whether the recommended reservation is size flexible.</p>
    pub fn size_flex_eligible(mut self, input: bool) -> Self {
        self.size_flex_eligible = Some(input);
        self
    }
    /// <p>Determines whether the recommended reservation is size flexible.</p>
    pub fn set_size_flex_eligible(mut self, input: std::option::Option<bool>) -> Self {
        self.size_flex_eligible = input;
        self
    }
    /// Consumes the builder and constructs a [`Ec2InstanceDetails`](crate::types::Ec2InstanceDetails).
    pub fn build(self) -> crate::types::Ec2InstanceDetails {
        crate::types::Ec2InstanceDetails {
            family: self.family,
            instance_type: self.instance_type,
            region: self.region,
            availability_zone: self.availability_zone,
            platform: self.platform,
            tenancy: self.tenancy,
            current_generation: self.current_generation.unwrap_or_default(),
            size_flex_eligible: self.size_flex_eligible.unwrap_or_default(),
        }
    }
}
