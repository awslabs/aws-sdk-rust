// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about your recommended reservation purchase.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReservationPurchaseRecommendationDetail {
    /// <p>The account that this Reserved Instance (RI) recommendation is for.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>Details about the instances that Amazon Web Services recommends that you purchase.</p>
    #[doc(hidden)]
    pub instance_details: std::option::Option<crate::types::InstanceDetails>,
    /// <p>The number of instances that Amazon Web Services recommends that you purchase.</p>
    #[doc(hidden)]
    pub recommended_number_of_instances_to_purchase: std::option::Option<std::string::String>,
    /// <p>The number of normalized units that Amazon Web Services recommends that you purchase.</p>
    #[doc(hidden)]
    pub recommended_normalized_units_to_purchase: std::option::Option<std::string::String>,
    /// <p>The minimum number of instances that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    #[doc(hidden)]
    pub minimum_number_of_instances_used_per_hour: std::option::Option<std::string::String>,
    /// <p>The minimum number of normalized units that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    #[doc(hidden)]
    pub minimum_normalized_units_used_per_hour: std::option::Option<std::string::String>,
    /// <p>The maximum number of instances that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    #[doc(hidden)]
    pub maximum_number_of_instances_used_per_hour: std::option::Option<std::string::String>,
    /// <p>The maximum number of normalized units that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    #[doc(hidden)]
    pub maximum_normalized_units_used_per_hour: std::option::Option<std::string::String>,
    /// <p>The average number of instances that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    #[doc(hidden)]
    pub average_number_of_instances_used_per_hour: std::option::Option<std::string::String>,
    /// <p>The average number of normalized units that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    #[doc(hidden)]
    pub average_normalized_units_used_per_hour: std::option::Option<std::string::String>,
    /// <p>The average utilization of your instances. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    #[doc(hidden)]
    pub average_utilization: std::option::Option<std::string::String>,
    /// <p>How long Amazon Web Services estimates that it takes for this instance to start saving you money, in months.</p>
    #[doc(hidden)]
    pub estimated_break_even_in_months: std::option::Option<std::string::String>,
    /// <p>The currency code that Amazon Web Services used to calculate the costs for this instance.</p>
    #[doc(hidden)]
    pub currency_code: std::option::Option<std::string::String>,
    /// <p>How much Amazon Web Services estimates that this specific recommendation might save you in a month.</p>
    #[doc(hidden)]
    pub estimated_monthly_savings_amount: std::option::Option<std::string::String>,
    /// <p>How much Amazon Web Services estimates that this specific recommendation might save you in a month, as a percentage of your overall costs.</p>
    #[doc(hidden)]
    pub estimated_monthly_savings_percentage: std::option::Option<std::string::String>,
    /// <p>How much Amazon Web Services estimates that you spend on On-Demand Instances in a month.</p>
    #[doc(hidden)]
    pub estimated_monthly_on_demand_cost: std::option::Option<std::string::String>,
    /// <p>How much Amazon Web Services estimates that you might spend for all usage during the specified historical period if you had a reservation.</p>
    #[doc(hidden)]
    pub estimated_reservation_cost_for_lookback_period: std::option::Option<std::string::String>,
    /// <p>How much purchasing this instance costs you upfront.</p>
    #[doc(hidden)]
    pub upfront_cost: std::option::Option<std::string::String>,
    /// <p>How much purchasing this instance costs you on a monthly basis.</p>
    #[doc(hidden)]
    pub recurring_standard_monthly_cost: std::option::Option<std::string::String>,
}
impl ReservationPurchaseRecommendationDetail {
    /// <p>The account that this Reserved Instance (RI) recommendation is for.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Details about the instances that Amazon Web Services recommends that you purchase.</p>
    pub fn instance_details(&self) -> std::option::Option<&crate::types::InstanceDetails> {
        self.instance_details.as_ref()
    }
    /// <p>The number of instances that Amazon Web Services recommends that you purchase.</p>
    pub fn recommended_number_of_instances_to_purchase(&self) -> std::option::Option<&str> {
        self.recommended_number_of_instances_to_purchase.as_deref()
    }
    /// <p>The number of normalized units that Amazon Web Services recommends that you purchase.</p>
    pub fn recommended_normalized_units_to_purchase(&self) -> std::option::Option<&str> {
        self.recommended_normalized_units_to_purchase.as_deref()
    }
    /// <p>The minimum number of instances that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn minimum_number_of_instances_used_per_hour(&self) -> std::option::Option<&str> {
        self.minimum_number_of_instances_used_per_hour.as_deref()
    }
    /// <p>The minimum number of normalized units that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn minimum_normalized_units_used_per_hour(&self) -> std::option::Option<&str> {
        self.minimum_normalized_units_used_per_hour.as_deref()
    }
    /// <p>The maximum number of instances that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn maximum_number_of_instances_used_per_hour(&self) -> std::option::Option<&str> {
        self.maximum_number_of_instances_used_per_hour.as_deref()
    }
    /// <p>The maximum number of normalized units that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn maximum_normalized_units_used_per_hour(&self) -> std::option::Option<&str> {
        self.maximum_normalized_units_used_per_hour.as_deref()
    }
    /// <p>The average number of instances that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn average_number_of_instances_used_per_hour(&self) -> std::option::Option<&str> {
        self.average_number_of_instances_used_per_hour.as_deref()
    }
    /// <p>The average number of normalized units that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn average_normalized_units_used_per_hour(&self) -> std::option::Option<&str> {
        self.average_normalized_units_used_per_hour.as_deref()
    }
    /// <p>The average utilization of your instances. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn average_utilization(&self) -> std::option::Option<&str> {
        self.average_utilization.as_deref()
    }
    /// <p>How long Amazon Web Services estimates that it takes for this instance to start saving you money, in months.</p>
    pub fn estimated_break_even_in_months(&self) -> std::option::Option<&str> {
        self.estimated_break_even_in_months.as_deref()
    }
    /// <p>The currency code that Amazon Web Services used to calculate the costs for this instance.</p>
    pub fn currency_code(&self) -> std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>How much Amazon Web Services estimates that this specific recommendation might save you in a month.</p>
    pub fn estimated_monthly_savings_amount(&self) -> std::option::Option<&str> {
        self.estimated_monthly_savings_amount.as_deref()
    }
    /// <p>How much Amazon Web Services estimates that this specific recommendation might save you in a month, as a percentage of your overall costs.</p>
    pub fn estimated_monthly_savings_percentage(&self) -> std::option::Option<&str> {
        self.estimated_monthly_savings_percentage.as_deref()
    }
    /// <p>How much Amazon Web Services estimates that you spend on On-Demand Instances in a month.</p>
    pub fn estimated_monthly_on_demand_cost(&self) -> std::option::Option<&str> {
        self.estimated_monthly_on_demand_cost.as_deref()
    }
    /// <p>How much Amazon Web Services estimates that you might spend for all usage during the specified historical period if you had a reservation.</p>
    pub fn estimated_reservation_cost_for_lookback_period(&self) -> std::option::Option<&str> {
        self.estimated_reservation_cost_for_lookback_period
            .as_deref()
    }
    /// <p>How much purchasing this instance costs you upfront.</p>
    pub fn upfront_cost(&self) -> std::option::Option<&str> {
        self.upfront_cost.as_deref()
    }
    /// <p>How much purchasing this instance costs you on a monthly basis.</p>
    pub fn recurring_standard_monthly_cost(&self) -> std::option::Option<&str> {
        self.recurring_standard_monthly_cost.as_deref()
    }
}
impl ReservationPurchaseRecommendationDetail {
    /// Creates a new builder-style object to manufacture [`ReservationPurchaseRecommendationDetail`](crate::types::ReservationPurchaseRecommendationDetail).
    pub fn builder() -> crate::types::builders::ReservationPurchaseRecommendationDetailBuilder {
        crate::types::builders::ReservationPurchaseRecommendationDetailBuilder::default()
    }
}

/// A builder for [`ReservationPurchaseRecommendationDetail`](crate::types::ReservationPurchaseRecommendationDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReservationPurchaseRecommendationDetailBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) instance_details: std::option::Option<crate::types::InstanceDetails>,
    pub(crate) recommended_number_of_instances_to_purchase:
        std::option::Option<std::string::String>,
    pub(crate) recommended_normalized_units_to_purchase: std::option::Option<std::string::String>,
    pub(crate) minimum_number_of_instances_used_per_hour: std::option::Option<std::string::String>,
    pub(crate) minimum_normalized_units_used_per_hour: std::option::Option<std::string::String>,
    pub(crate) maximum_number_of_instances_used_per_hour: std::option::Option<std::string::String>,
    pub(crate) maximum_normalized_units_used_per_hour: std::option::Option<std::string::String>,
    pub(crate) average_number_of_instances_used_per_hour: std::option::Option<std::string::String>,
    pub(crate) average_normalized_units_used_per_hour: std::option::Option<std::string::String>,
    pub(crate) average_utilization: std::option::Option<std::string::String>,
    pub(crate) estimated_break_even_in_months: std::option::Option<std::string::String>,
    pub(crate) currency_code: std::option::Option<std::string::String>,
    pub(crate) estimated_monthly_savings_amount: std::option::Option<std::string::String>,
    pub(crate) estimated_monthly_savings_percentage: std::option::Option<std::string::String>,
    pub(crate) estimated_monthly_on_demand_cost: std::option::Option<std::string::String>,
    pub(crate) estimated_reservation_cost_for_lookback_period:
        std::option::Option<std::string::String>,
    pub(crate) upfront_cost: std::option::Option<std::string::String>,
    pub(crate) recurring_standard_monthly_cost: std::option::Option<std::string::String>,
}
impl ReservationPurchaseRecommendationDetailBuilder {
    /// <p>The account that this Reserved Instance (RI) recommendation is for.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The account that this Reserved Instance (RI) recommendation is for.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Details about the instances that Amazon Web Services recommends that you purchase.</p>
    pub fn instance_details(mut self, input: crate::types::InstanceDetails) -> Self {
        self.instance_details = Some(input);
        self
    }
    /// <p>Details about the instances that Amazon Web Services recommends that you purchase.</p>
    pub fn set_instance_details(
        mut self,
        input: std::option::Option<crate::types::InstanceDetails>,
    ) -> Self {
        self.instance_details = input;
        self
    }
    /// <p>The number of instances that Amazon Web Services recommends that you purchase.</p>
    pub fn recommended_number_of_instances_to_purchase(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.recommended_number_of_instances_to_purchase = Some(input.into());
        self
    }
    /// <p>The number of instances that Amazon Web Services recommends that you purchase.</p>
    pub fn set_recommended_number_of_instances_to_purchase(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recommended_number_of_instances_to_purchase = input;
        self
    }
    /// <p>The number of normalized units that Amazon Web Services recommends that you purchase.</p>
    pub fn recommended_normalized_units_to_purchase(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.recommended_normalized_units_to_purchase = Some(input.into());
        self
    }
    /// <p>The number of normalized units that Amazon Web Services recommends that you purchase.</p>
    pub fn set_recommended_normalized_units_to_purchase(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recommended_normalized_units_to_purchase = input;
        self
    }
    /// <p>The minimum number of instances that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn minimum_number_of_instances_used_per_hour(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.minimum_number_of_instances_used_per_hour = Some(input.into());
        self
    }
    /// <p>The minimum number of instances that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn set_minimum_number_of_instances_used_per_hour(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.minimum_number_of_instances_used_per_hour = input;
        self
    }
    /// <p>The minimum number of normalized units that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn minimum_normalized_units_used_per_hour(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.minimum_normalized_units_used_per_hour = Some(input.into());
        self
    }
    /// <p>The minimum number of normalized units that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn set_minimum_normalized_units_used_per_hour(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.minimum_normalized_units_used_per_hour = input;
        self
    }
    /// <p>The maximum number of instances that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn maximum_number_of_instances_used_per_hour(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.maximum_number_of_instances_used_per_hour = Some(input.into());
        self
    }
    /// <p>The maximum number of instances that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn set_maximum_number_of_instances_used_per_hour(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.maximum_number_of_instances_used_per_hour = input;
        self
    }
    /// <p>The maximum number of normalized units that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn maximum_normalized_units_used_per_hour(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.maximum_normalized_units_used_per_hour = Some(input.into());
        self
    }
    /// <p>The maximum number of normalized units that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn set_maximum_normalized_units_used_per_hour(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.maximum_normalized_units_used_per_hour = input;
        self
    }
    /// <p>The average number of instances that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn average_number_of_instances_used_per_hour(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.average_number_of_instances_used_per_hour = Some(input.into());
        self
    }
    /// <p>The average number of instances that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn set_average_number_of_instances_used_per_hour(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.average_number_of_instances_used_per_hour = input;
        self
    }
    /// <p>The average number of normalized units that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn average_normalized_units_used_per_hour(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.average_normalized_units_used_per_hour = Some(input.into());
        self
    }
    /// <p>The average number of normalized units that you used in an hour during the historical period. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn set_average_normalized_units_used_per_hour(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.average_normalized_units_used_per_hour = input;
        self
    }
    /// <p>The average utilization of your instances. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn average_utilization(mut self, input: impl Into<std::string::String>) -> Self {
        self.average_utilization = Some(input.into());
        self
    }
    /// <p>The average utilization of your instances. Amazon Web Services uses this to calculate your recommended reservation purchases.</p>
    pub fn set_average_utilization(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.average_utilization = input;
        self
    }
    /// <p>How long Amazon Web Services estimates that it takes for this instance to start saving you money, in months.</p>
    pub fn estimated_break_even_in_months(mut self, input: impl Into<std::string::String>) -> Self {
        self.estimated_break_even_in_months = Some(input.into());
        self
    }
    /// <p>How long Amazon Web Services estimates that it takes for this instance to start saving you money, in months.</p>
    pub fn set_estimated_break_even_in_months(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.estimated_break_even_in_months = input;
        self
    }
    /// <p>The currency code that Amazon Web Services used to calculate the costs for this instance.</p>
    pub fn currency_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.currency_code = Some(input.into());
        self
    }
    /// <p>The currency code that Amazon Web Services used to calculate the costs for this instance.</p>
    pub fn set_currency_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>How much Amazon Web Services estimates that this specific recommendation might save you in a month.</p>
    pub fn estimated_monthly_savings_amount(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.estimated_monthly_savings_amount = Some(input.into());
        self
    }
    /// <p>How much Amazon Web Services estimates that this specific recommendation might save you in a month.</p>
    pub fn set_estimated_monthly_savings_amount(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.estimated_monthly_savings_amount = input;
        self
    }
    /// <p>How much Amazon Web Services estimates that this specific recommendation might save you in a month, as a percentage of your overall costs.</p>
    pub fn estimated_monthly_savings_percentage(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.estimated_monthly_savings_percentage = Some(input.into());
        self
    }
    /// <p>How much Amazon Web Services estimates that this specific recommendation might save you in a month, as a percentage of your overall costs.</p>
    pub fn set_estimated_monthly_savings_percentage(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.estimated_monthly_savings_percentage = input;
        self
    }
    /// <p>How much Amazon Web Services estimates that you spend on On-Demand Instances in a month.</p>
    pub fn estimated_monthly_on_demand_cost(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.estimated_monthly_on_demand_cost = Some(input.into());
        self
    }
    /// <p>How much Amazon Web Services estimates that you spend on On-Demand Instances in a month.</p>
    pub fn set_estimated_monthly_on_demand_cost(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.estimated_monthly_on_demand_cost = input;
        self
    }
    /// <p>How much Amazon Web Services estimates that you might spend for all usage during the specified historical period if you had a reservation.</p>
    pub fn estimated_reservation_cost_for_lookback_period(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.estimated_reservation_cost_for_lookback_period = Some(input.into());
        self
    }
    /// <p>How much Amazon Web Services estimates that you might spend for all usage during the specified historical period if you had a reservation.</p>
    pub fn set_estimated_reservation_cost_for_lookback_period(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.estimated_reservation_cost_for_lookback_period = input;
        self
    }
    /// <p>How much purchasing this instance costs you upfront.</p>
    pub fn upfront_cost(mut self, input: impl Into<std::string::String>) -> Self {
        self.upfront_cost = Some(input.into());
        self
    }
    /// <p>How much purchasing this instance costs you upfront.</p>
    pub fn set_upfront_cost(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.upfront_cost = input;
        self
    }
    /// <p>How much purchasing this instance costs you on a monthly basis.</p>
    pub fn recurring_standard_monthly_cost(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.recurring_standard_monthly_cost = Some(input.into());
        self
    }
    /// <p>How much purchasing this instance costs you on a monthly basis.</p>
    pub fn set_recurring_standard_monthly_cost(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recurring_standard_monthly_cost = input;
        self
    }
    /// Consumes the builder and constructs a [`ReservationPurchaseRecommendationDetail`](crate::types::ReservationPurchaseRecommendationDetail).
    pub fn build(self) -> crate::types::ReservationPurchaseRecommendationDetail {
        crate::types::ReservationPurchaseRecommendationDetail {
            account_id: self.account_id,
            instance_details: self.instance_details,
            recommended_number_of_instances_to_purchase: self
                .recommended_number_of_instances_to_purchase,
            recommended_normalized_units_to_purchase: self.recommended_normalized_units_to_purchase,
            minimum_number_of_instances_used_per_hour: self
                .minimum_number_of_instances_used_per_hour,
            minimum_normalized_units_used_per_hour: self.minimum_normalized_units_used_per_hour,
            maximum_number_of_instances_used_per_hour: self
                .maximum_number_of_instances_used_per_hour,
            maximum_normalized_units_used_per_hour: self.maximum_normalized_units_used_per_hour,
            average_number_of_instances_used_per_hour: self
                .average_number_of_instances_used_per_hour,
            average_normalized_units_used_per_hour: self.average_normalized_units_used_per_hour,
            average_utilization: self.average_utilization,
            estimated_break_even_in_months: self.estimated_break_even_in_months,
            currency_code: self.currency_code,
            estimated_monthly_savings_amount: self.estimated_monthly_savings_amount,
            estimated_monthly_savings_percentage: self.estimated_monthly_savings_percentage,
            estimated_monthly_on_demand_cost: self.estimated_monthly_on_demand_cost,
            estimated_reservation_cost_for_lookback_period: self
                .estimated_reservation_cost_for_lookback_period,
            upfront_cost: self.upfront_cost,
            recurring_standard_monthly_cost: self.recurring_standard_monthly_cost,
        }
    }
}
