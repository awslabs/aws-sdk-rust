// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Cost Categories values used for filtering the costs.</p>
/// <p>If <code>Values</code> and <code>Key</code> are not specified, the <code>ABSENT</code> <code>MatchOption</code> is applied to all Cost Categories. That is, it filters on resources that aren't mapped to any Cost Categories.</p>
/// <p>If <code>Values</code> is provided and <code>Key</code> isn't specified, the <code>ABSENT</code> <code>MatchOption</code> is applied to the Cost Categories <code>Key</code> only. That is, it filters on resources without the given Cost Categories key.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CostCategoryValues {
    /// <p>The unique name of the Cost Category.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The specific value of the Cost Category.</p>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for <code>MatchOptions</code> is <code>EQUALS</code> and <code>CASE_SENSITIVE</code>. </p>
    pub match_options: ::std::option::Option<::std::vec::Vec<crate::types::MatchOption>>,
}
impl CostCategoryValues {
    /// <p>The unique name of the Cost Category.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The specific value of the Cost Category.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
    /// <p>The match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for <code>MatchOptions</code> is <code>EQUALS</code> and <code>CASE_SENSITIVE</code>. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.match_options.is_none()`.
    pub fn match_options(&self) -> &[crate::types::MatchOption] {
        self.match_options.as_deref().unwrap_or_default()
    }
}
impl CostCategoryValues {
    /// Creates a new builder-style object to manufacture [`CostCategoryValues`](crate::types::CostCategoryValues).
    pub fn builder() -> crate::types::builders::CostCategoryValuesBuilder {
        crate::types::builders::CostCategoryValuesBuilder::default()
    }
}

/// A builder for [`CostCategoryValues`](crate::types::CostCategoryValues).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CostCategoryValuesBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) match_options: ::std::option::Option<::std::vec::Vec<crate::types::MatchOption>>,
}
impl CostCategoryValuesBuilder {
    /// <p>The unique name of the Cost Category.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the Cost Category.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The unique name of the Cost Category.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The specific value of the Cost Category.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The specific value of the Cost Category.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The specific value of the Cost Category.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Appends an item to `match_options`.
    ///
    /// To override the contents of this collection use [`set_match_options`](Self::set_match_options).
    ///
    /// <p>The match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for <code>MatchOptions</code> is <code>EQUALS</code> and <code>CASE_SENSITIVE</code>. </p>
    pub fn match_options(mut self, input: crate::types::MatchOption) -> Self {
        let mut v = self.match_options.unwrap_or_default();
        v.push(input);
        self.match_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>The match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for <code>MatchOptions</code> is <code>EQUALS</code> and <code>CASE_SENSITIVE</code>. </p>
    pub fn set_match_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MatchOption>>) -> Self {
        self.match_options = input;
        self
    }
    /// <p>The match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for <code>MatchOptions</code> is <code>EQUALS</code> and <code>CASE_SENSITIVE</code>. </p>
    pub fn get_match_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MatchOption>> {
        &self.match_options
    }
    /// Consumes the builder and constructs a [`CostCategoryValues`](crate::types::CostCategoryValues).
    pub fn build(self) -> crate::types::CostCategoryValues {
        crate::types::CostCategoryValues {
            key: self.key,
            values: self.values,
            match_options: self.match_options,
        }
    }
}
