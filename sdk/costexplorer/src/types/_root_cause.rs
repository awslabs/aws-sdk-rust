// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The combination of Amazon Web Servicesservice, linked account, linked account name, Region, and usage type where a cost anomaly is observed. The linked account name will only be available when the account name can be identified.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RootCause {
    /// <p>The Amazon Web Servicesservice name that's associated with the cost anomaly.</p>
    pub service: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region that's associated with the cost anomaly.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The member account value that's associated with the cost anomaly.</p>
    pub linked_account: ::std::option::Option<::std::string::String>,
    /// <p>The <code>UsageType</code> value that's associated with the cost anomaly.</p>
    pub usage_type: ::std::option::Option<::std::string::String>,
    /// <p>The member account name value that's associated with the cost anomaly.</p>
    pub linked_account_name: ::std::option::Option<::std::string::String>,
}
impl RootCause {
    /// <p>The Amazon Web Servicesservice name that's associated with the cost anomaly.</p>
    pub fn service(&self) -> ::std::option::Option<&str> {
        self.service.as_deref()
    }
    /// <p>The Amazon Web Services Region that's associated with the cost anomaly.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The member account value that's associated with the cost anomaly.</p>
    pub fn linked_account(&self) -> ::std::option::Option<&str> {
        self.linked_account.as_deref()
    }
    /// <p>The <code>UsageType</code> value that's associated with the cost anomaly.</p>
    pub fn usage_type(&self) -> ::std::option::Option<&str> {
        self.usage_type.as_deref()
    }
    /// <p>The member account name value that's associated with the cost anomaly.</p>
    pub fn linked_account_name(&self) -> ::std::option::Option<&str> {
        self.linked_account_name.as_deref()
    }
}
impl RootCause {
    /// Creates a new builder-style object to manufacture [`RootCause`](crate::types::RootCause).
    pub fn builder() -> crate::types::builders::RootCauseBuilder {
        crate::types::builders::RootCauseBuilder::default()
    }
}

/// A builder for [`RootCause`](crate::types::RootCause).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RootCauseBuilder {
    pub(crate) service: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) linked_account: ::std::option::Option<::std::string::String>,
    pub(crate) usage_type: ::std::option::Option<::std::string::String>,
    pub(crate) linked_account_name: ::std::option::Option<::std::string::String>,
}
impl RootCauseBuilder {
    /// <p>The Amazon Web Servicesservice name that's associated with the cost anomaly.</p>
    pub fn service(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Servicesservice name that's associated with the cost anomaly.</p>
    pub fn set_service(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service = input;
        self
    }
    /// <p>The Amazon Web Servicesservice name that's associated with the cost anomaly.</p>
    pub fn get_service(&self) -> &::std::option::Option<::std::string::String> {
        &self.service
    }
    /// <p>The Amazon Web Services Region that's associated with the cost anomaly.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region that's associated with the cost anomaly.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region that's associated with the cost anomaly.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The member account value that's associated with the cost anomaly.</p>
    pub fn linked_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.linked_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The member account value that's associated with the cost anomaly.</p>
    pub fn set_linked_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.linked_account = input;
        self
    }
    /// <p>The member account value that's associated with the cost anomaly.</p>
    pub fn get_linked_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.linked_account
    }
    /// <p>The <code>UsageType</code> value that's associated with the cost anomaly.</p>
    pub fn usage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.usage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>UsageType</code> value that's associated with the cost anomaly.</p>
    pub fn set_usage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.usage_type = input;
        self
    }
    /// <p>The <code>UsageType</code> value that's associated with the cost anomaly.</p>
    pub fn get_usage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.usage_type
    }
    /// <p>The member account name value that's associated with the cost anomaly.</p>
    pub fn linked_account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.linked_account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The member account name value that's associated with the cost anomaly.</p>
    pub fn set_linked_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.linked_account_name = input;
        self
    }
    /// <p>The member account name value that's associated with the cost anomaly.</p>
    pub fn get_linked_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.linked_account_name
    }
    /// Consumes the builder and constructs a [`RootCause`](crate::types::RootCause).
    pub fn build(self) -> crate::types::RootCause {
        crate::types::RootCause {
            service: self.service,
            region: self.region,
            linked_account: self.linked_account,
            usage_type: self.usage_type,
            linked_account_name: self.linked_account_name,
        }
    }
}
