// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The values that are available for a tag.</p>
/// <p>If <code>Values</code> and <code>Key</code> aren't specified, the <code>ABSENT</code> <code>MatchOption</code> is applied to all tags. That is, it's filtered on resources with no tags.</p>
/// <p>If <code>Key</code> is provided and <code>Values</code> isn't specified, the <code>ABSENT</code> <code>MatchOption</code> is applied to the tag <code>Key</code> only. That is, it's filtered on resources without the given tag key.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagValues {
    /// <p>The key for the tag.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The specific value of the tag.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The match options that you can use to filter your results. <code>MatchOptions</code> is only applicable for actions related to Cost Category. The default values for <code>MatchOptions</code> are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>.</p>
    #[doc(hidden)]
    pub match_options: std::option::Option<std::vec::Vec<crate::types::MatchOption>>,
}
impl TagValues {
    /// <p>The key for the tag.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The specific value of the tag.</p>
    pub fn values(&self) -> std::option::Option<&[std::string::String]> {
        self.values.as_deref()
    }
    /// <p>The match options that you can use to filter your results. <code>MatchOptions</code> is only applicable for actions related to Cost Category. The default values for <code>MatchOptions</code> are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>.</p>
    pub fn match_options(&self) -> std::option::Option<&[crate::types::MatchOption]> {
        self.match_options.as_deref()
    }
}
impl TagValues {
    /// Creates a new builder-style object to manufacture [`TagValues`](crate::types::TagValues).
    pub fn builder() -> crate::types::builders::TagValuesBuilder {
        crate::types::builders::TagValuesBuilder::default()
    }
}

/// A builder for [`TagValues`](crate::types::TagValues).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TagValuesBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) match_options: std::option::Option<std::vec::Vec<crate::types::MatchOption>>,
}
impl TagValuesBuilder {
    /// <p>The key for the tag.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The key for the tag.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The specific value of the tag.</p>
    pub fn values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = Some(v);
        self
    }
    /// <p>The specific value of the tag.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// Appends an item to `match_options`.
    ///
    /// To override the contents of this collection use [`set_match_options`](Self::set_match_options).
    ///
    /// <p>The match options that you can use to filter your results. <code>MatchOptions</code> is only applicable for actions related to Cost Category. The default values for <code>MatchOptions</code> are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>.</p>
    pub fn match_options(mut self, input: crate::types::MatchOption) -> Self {
        let mut v = self.match_options.unwrap_or_default();
        v.push(input);
        self.match_options = Some(v);
        self
    }
    /// <p>The match options that you can use to filter your results. <code>MatchOptions</code> is only applicable for actions related to Cost Category. The default values for <code>MatchOptions</code> are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>.</p>
    pub fn set_match_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MatchOption>>,
    ) -> Self {
        self.match_options = input;
        self
    }
    /// Consumes the builder and constructs a [`TagValues`](crate::types::TagValues).
    pub fn build(self) -> crate::types::TagValues {
        crate::types::TagValues {
            key: self.key,
            values: self.values,
            match_options: self.match_options,
        }
    }
}
