// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single daily or monthly Savings Plans utilization rate and details for your account. A management account in an organization have access to member accounts. You can use <code>GetDimensionValues</code> to determine the possible dimension values. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SavingsPlansUtilizationDetail {
    /// <p>The unique Amazon Resource Name (ARN) for a particular Savings Plan.</p>
    #[doc(hidden)]
    pub savings_plan_arn: std::option::Option<std::string::String>,
    /// <p>The attribute that applies to a specific <code>Dimension</code>.</p>
    #[doc(hidden)]
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A ratio of your effectiveness of using existing Savings Plans to apply to workloads that are Savings Plans eligible.</p>
    #[doc(hidden)]
    pub utilization: std::option::Option<crate::types::SavingsPlansUtilization>,
    /// <p>The amount saved by using existing Savings Plans. Savings returns both net savings from savings plans and also the <code>onDemandCostEquivalent</code> of the Savings Plans when considering the utilization rate.</p>
    #[doc(hidden)]
    pub savings: std::option::Option<crate::types::SavingsPlansSavings>,
    /// <p>The total amortized commitment for a Savings Plans. Includes the sum of the upfront and recurring Savings Plans fees.</p>
    #[doc(hidden)]
    pub amortized_commitment: std::option::Option<crate::types::SavingsPlansAmortizedCommitment>,
}
impl SavingsPlansUtilizationDetail {
    /// <p>The unique Amazon Resource Name (ARN) for a particular Savings Plan.</p>
    pub fn savings_plan_arn(&self) -> std::option::Option<&str> {
        self.savings_plan_arn.as_deref()
    }
    /// <p>The attribute that applies to a specific <code>Dimension</code>.</p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
    /// <p>A ratio of your effectiveness of using existing Savings Plans to apply to workloads that are Savings Plans eligible.</p>
    pub fn utilization(&self) -> std::option::Option<&crate::types::SavingsPlansUtilization> {
        self.utilization.as_ref()
    }
    /// <p>The amount saved by using existing Savings Plans. Savings returns both net savings from savings plans and also the <code>onDemandCostEquivalent</code> of the Savings Plans when considering the utilization rate.</p>
    pub fn savings(&self) -> std::option::Option<&crate::types::SavingsPlansSavings> {
        self.savings.as_ref()
    }
    /// <p>The total amortized commitment for a Savings Plans. Includes the sum of the upfront and recurring Savings Plans fees.</p>
    pub fn amortized_commitment(
        &self,
    ) -> std::option::Option<&crate::types::SavingsPlansAmortizedCommitment> {
        self.amortized_commitment.as_ref()
    }
}
impl SavingsPlansUtilizationDetail {
    /// Creates a new builder-style object to manufacture [`SavingsPlansUtilizationDetail`](crate::types::SavingsPlansUtilizationDetail).
    pub fn builder() -> crate::types::builders::SavingsPlansUtilizationDetailBuilder {
        crate::types::builders::SavingsPlansUtilizationDetailBuilder::default()
    }
}

/// A builder for [`SavingsPlansUtilizationDetail`](crate::types::SavingsPlansUtilizationDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SavingsPlansUtilizationDetailBuilder {
    pub(crate) savings_plan_arn: std::option::Option<std::string::String>,
    pub(crate) attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) utilization: std::option::Option<crate::types::SavingsPlansUtilization>,
    pub(crate) savings: std::option::Option<crate::types::SavingsPlansSavings>,
    pub(crate) amortized_commitment:
        std::option::Option<crate::types::SavingsPlansAmortizedCommitment>,
}
impl SavingsPlansUtilizationDetailBuilder {
    /// <p>The unique Amazon Resource Name (ARN) for a particular Savings Plan.</p>
    pub fn savings_plan_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.savings_plan_arn = Some(input.into());
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) for a particular Savings Plan.</p>
    pub fn set_savings_plan_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.savings_plan_arn = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>The attribute that applies to a specific <code>Dimension</code>.</p>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = Some(hash_map);
        self
    }
    /// <p>The attribute that applies to a specific <code>Dimension</code>.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>A ratio of your effectiveness of using existing Savings Plans to apply to workloads that are Savings Plans eligible.</p>
    pub fn utilization(mut self, input: crate::types::SavingsPlansUtilization) -> Self {
        self.utilization = Some(input);
        self
    }
    /// <p>A ratio of your effectiveness of using existing Savings Plans to apply to workloads that are Savings Plans eligible.</p>
    pub fn set_utilization(
        mut self,
        input: std::option::Option<crate::types::SavingsPlansUtilization>,
    ) -> Self {
        self.utilization = input;
        self
    }
    /// <p>The amount saved by using existing Savings Plans. Savings returns both net savings from savings plans and also the <code>onDemandCostEquivalent</code> of the Savings Plans when considering the utilization rate.</p>
    pub fn savings(mut self, input: crate::types::SavingsPlansSavings) -> Self {
        self.savings = Some(input);
        self
    }
    /// <p>The amount saved by using existing Savings Plans. Savings returns both net savings from savings plans and also the <code>onDemandCostEquivalent</code> of the Savings Plans when considering the utilization rate.</p>
    pub fn set_savings(
        mut self,
        input: std::option::Option<crate::types::SavingsPlansSavings>,
    ) -> Self {
        self.savings = input;
        self
    }
    /// <p>The total amortized commitment for a Savings Plans. Includes the sum of the upfront and recurring Savings Plans fees.</p>
    pub fn amortized_commitment(
        mut self,
        input: crate::types::SavingsPlansAmortizedCommitment,
    ) -> Self {
        self.amortized_commitment = Some(input);
        self
    }
    /// <p>The total amortized commitment for a Savings Plans. Includes the sum of the upfront and recurring Savings Plans fees.</p>
    pub fn set_amortized_commitment(
        mut self,
        input: std::option::Option<crate::types::SavingsPlansAmortizedCommitment>,
    ) -> Self {
        self.amortized_commitment = input;
        self
    }
    /// Consumes the builder and constructs a [`SavingsPlansUtilizationDetail`](crate::types::SavingsPlansUtilizationDetail).
    pub fn build(self) -> crate::types::SavingsPlansUtilizationDetail {
        crate::types::SavingsPlansUtilizationDetail {
            savings_plan_arn: self.savings_plan_arn,
            attributes: self.attributes,
            utilization: self.utilization,
            savings: self.savings,
            amortized_commitment: self.amortized_commitment,
        }
    }
}
