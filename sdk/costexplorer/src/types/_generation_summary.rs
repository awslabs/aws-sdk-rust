// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the Savings Plans recommendation generation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GenerationSummary {
    /// <p>Indicates the ID for this specific recommendation.</p>
    #[doc(hidden)]
    pub recommendation_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether the recommendation generation succeeded, is processing, or failed.</p>
    #[doc(hidden)]
    pub generation_status: std::option::Option<crate::types::GenerationStatus>,
    /// <p>Indicates the start time of the recommendation generation.</p>
    #[doc(hidden)]
    pub generation_started_time: std::option::Option<std::string::String>,
    /// <p>Indicates the completion time of the recommendation generation.</p>
    #[doc(hidden)]
    pub generation_completion_time: std::option::Option<std::string::String>,
    /// <p>Indicates the estimated time for when the recommendation generation will complete.</p>
    #[doc(hidden)]
    pub estimated_completion_time: std::option::Option<std::string::String>,
}
impl GenerationSummary {
    /// <p>Indicates the ID for this specific recommendation.</p>
    pub fn recommendation_id(&self) -> std::option::Option<&str> {
        self.recommendation_id.as_deref()
    }
    /// <p>Indicates whether the recommendation generation succeeded, is processing, or failed.</p>
    pub fn generation_status(&self) -> std::option::Option<&crate::types::GenerationStatus> {
        self.generation_status.as_ref()
    }
    /// <p>Indicates the start time of the recommendation generation.</p>
    pub fn generation_started_time(&self) -> std::option::Option<&str> {
        self.generation_started_time.as_deref()
    }
    /// <p>Indicates the completion time of the recommendation generation.</p>
    pub fn generation_completion_time(&self) -> std::option::Option<&str> {
        self.generation_completion_time.as_deref()
    }
    /// <p>Indicates the estimated time for when the recommendation generation will complete.</p>
    pub fn estimated_completion_time(&self) -> std::option::Option<&str> {
        self.estimated_completion_time.as_deref()
    }
}
impl GenerationSummary {
    /// Creates a new builder-style object to manufacture [`GenerationSummary`](crate::types::GenerationSummary).
    pub fn builder() -> crate::types::builders::GenerationSummaryBuilder {
        crate::types::builders::GenerationSummaryBuilder::default()
    }
}

/// A builder for [`GenerationSummary`](crate::types::GenerationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GenerationSummaryBuilder {
    pub(crate) recommendation_id: std::option::Option<std::string::String>,
    pub(crate) generation_status: std::option::Option<crate::types::GenerationStatus>,
    pub(crate) generation_started_time: std::option::Option<std::string::String>,
    pub(crate) generation_completion_time: std::option::Option<std::string::String>,
    pub(crate) estimated_completion_time: std::option::Option<std::string::String>,
}
impl GenerationSummaryBuilder {
    /// <p>Indicates the ID for this specific recommendation.</p>
    pub fn recommendation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.recommendation_id = Some(input.into());
        self
    }
    /// <p>Indicates the ID for this specific recommendation.</p>
    pub fn set_recommendation_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recommendation_id = input;
        self
    }
    /// <p>Indicates whether the recommendation generation succeeded, is processing, or failed.</p>
    pub fn generation_status(mut self, input: crate::types::GenerationStatus) -> Self {
        self.generation_status = Some(input);
        self
    }
    /// <p>Indicates whether the recommendation generation succeeded, is processing, or failed.</p>
    pub fn set_generation_status(
        mut self,
        input: std::option::Option<crate::types::GenerationStatus>,
    ) -> Self {
        self.generation_status = input;
        self
    }
    /// <p>Indicates the start time of the recommendation generation.</p>
    pub fn generation_started_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.generation_started_time = Some(input.into());
        self
    }
    /// <p>Indicates the start time of the recommendation generation.</p>
    pub fn set_generation_started_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.generation_started_time = input;
        self
    }
    /// <p>Indicates the completion time of the recommendation generation.</p>
    pub fn generation_completion_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.generation_completion_time = Some(input.into());
        self
    }
    /// <p>Indicates the completion time of the recommendation generation.</p>
    pub fn set_generation_completion_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.generation_completion_time = input;
        self
    }
    /// <p>Indicates the estimated time for when the recommendation generation will complete.</p>
    pub fn estimated_completion_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.estimated_completion_time = Some(input.into());
        self
    }
    /// <p>Indicates the estimated time for when the recommendation generation will complete.</p>
    pub fn set_estimated_completion_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.estimated_completion_time = input;
        self
    }
    /// Consumes the builder and constructs a [`GenerationSummary`](crate::types::GenerationSummary).
    pub fn build(self) -> crate::types::GenerationSummary {
        crate::types::GenerationSummary {
            recommendation_id: self.recommendation_id,
            generation_status: self.generation_status,
            generation_started_time: self.generation_started_time,
            generation_completion_time: self.generation_completion_time,
            estimated_completion_time: self.estimated_completion_time,
        }
    }
}
