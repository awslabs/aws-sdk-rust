// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The amount of savings that you're accumulating, against the public On-Demand rate of the usage accrued in an account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SavingsPlansSavings {
    /// <p>The savings amount that you're accumulating for the usage that's covered by a Savings Plans, when compared to the On-Demand equivalent of the same usage.</p>
    #[doc(hidden)]
    pub net_savings: std::option::Option<std::string::String>,
    /// <p>How much the amount that the usage would have cost if it was accrued at the On-Demand rate.</p>
    #[doc(hidden)]
    pub on_demand_cost_equivalent: std::option::Option<std::string::String>,
}
impl SavingsPlansSavings {
    /// <p>The savings amount that you're accumulating for the usage that's covered by a Savings Plans, when compared to the On-Demand equivalent of the same usage.</p>
    pub fn net_savings(&self) -> std::option::Option<&str> {
        self.net_savings.as_deref()
    }
    /// <p>How much the amount that the usage would have cost if it was accrued at the On-Demand rate.</p>
    pub fn on_demand_cost_equivalent(&self) -> std::option::Option<&str> {
        self.on_demand_cost_equivalent.as_deref()
    }
}
impl SavingsPlansSavings {
    /// Creates a new builder-style object to manufacture [`SavingsPlansSavings`](crate::types::SavingsPlansSavings).
    pub fn builder() -> crate::types::builders::SavingsPlansSavingsBuilder {
        crate::types::builders::SavingsPlansSavingsBuilder::default()
    }
}

/// A builder for [`SavingsPlansSavings`](crate::types::SavingsPlansSavings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SavingsPlansSavingsBuilder {
    pub(crate) net_savings: std::option::Option<std::string::String>,
    pub(crate) on_demand_cost_equivalent: std::option::Option<std::string::String>,
}
impl SavingsPlansSavingsBuilder {
    /// <p>The savings amount that you're accumulating for the usage that's covered by a Savings Plans, when compared to the On-Demand equivalent of the same usage.</p>
    pub fn net_savings(mut self, input: impl Into<std::string::String>) -> Self {
        self.net_savings = Some(input.into());
        self
    }
    /// <p>The savings amount that you're accumulating for the usage that's covered by a Savings Plans, when compared to the On-Demand equivalent of the same usage.</p>
    pub fn set_net_savings(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.net_savings = input;
        self
    }
    /// <p>How much the amount that the usage would have cost if it was accrued at the On-Demand rate.</p>
    pub fn on_demand_cost_equivalent(mut self, input: impl Into<std::string::String>) -> Self {
        self.on_demand_cost_equivalent = Some(input.into());
        self
    }
    /// <p>How much the amount that the usage would have cost if it was accrued at the On-Demand rate.</p>
    pub fn set_on_demand_cost_equivalent(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.on_demand_cost_equivalent = input;
        self
    }
    /// Consumes the builder and constructs a [`SavingsPlansSavings`](crate::types::SavingsPlansSavings).
    pub fn build(self) -> crate::types::SavingsPlansSavings {
        crate::types::SavingsPlansSavings {
            net_savings: self.net_savings,
            on_demand_cost_equivalent: self.on_demand_cost_equivalent,
        }
    }
}
