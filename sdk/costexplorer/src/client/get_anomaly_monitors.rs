// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetAnomalyMonitors`](crate::client::fluent_builders::GetAnomalyMonitors) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_arn_list(Vec<String>)`](crate::client::fluent_builders::GetAnomalyMonitors::monitor_arn_list) / [`set_monitor_arn_list(Option<Vec<String>>)`](crate::client::fluent_builders::GetAnomalyMonitors::set_monitor_arn_list): <p>A list of cost anomaly monitor ARNs. </p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetAnomalyMonitors::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetAnomalyMonitors::set_next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetAnomalyMonitors::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetAnomalyMonitors::set_max_results): <p>The number of entries that a paginated response contains. </p>
    /// - On success, responds with [`GetAnomalyMonitorsOutput`](crate::output::GetAnomalyMonitorsOutput) with field(s):
    ///   - [`anomaly_monitors(Option<Vec<AnomalyMonitor>>)`](crate::output::GetAnomalyMonitorsOutput::anomaly_monitors): <p>A list of cost anomaly monitors that includes the detailed metadata for each monitor. </p>
    ///   - [`next_page_token(Option<String>)`](crate::output::GetAnomalyMonitorsOutput::next_page_token): <p>The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size. </p>
    /// - On failure, responds with [`SdkError<GetAnomalyMonitorsError>`](crate::error::GetAnomalyMonitorsError)
    pub fn get_anomaly_monitors(&self) -> crate::client::fluent_builders::GetAnomalyMonitors {
        crate::client::fluent_builders::GetAnomalyMonitors::new(self.handle.clone())
    }
}
