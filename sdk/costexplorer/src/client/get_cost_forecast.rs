// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetCostForecast`](crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`time_period(DateInterval)`](crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder::time_period) / [`set_time_period(Option<DateInterval>)`](crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder::set_time_period):<br>required: **true**<br><p>The period of time that you want the forecast to cover. The start date must be equal to or no later than the current date to avoid a validation error.</p><br>
    ///   - [`metric(Metric)`](crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder::metric) / [`set_metric(Option<Metric>)`](crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder::set_metric):<br>required: **true**<br><p>Which metric Cost Explorer uses to create your forecast. For more information about blended and unblended rates, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/">Why does the "blended" annotation appear on some line items in my bill?</a>. </p>  <p>Valid values for a <code>GetCostForecast</code> call are the following:</p>  <ul>   <li> <p>AMORTIZED_COST</p> </li>   <li> <p>BLENDED_COST</p> </li>   <li> <p>NET_AMORTIZED_COST</p> </li>   <li> <p>NET_UNBLENDED_COST</p> </li>   <li> <p>UNBLENDED_COST</p> </li>  </ul><br>
    ///   - [`granularity(Granularity)`](crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder::granularity) / [`set_granularity(Option<Granularity>)`](crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder::set_granularity):<br>required: **true**<br><p>How granular you want the forecast to be. You can get 3 months of <code>DAILY</code> forecasts or 12 months of <code>MONTHLY</code> forecasts.</p>  <p>The <code>GetCostForecast</code> operation supports only <code>DAILY</code> and <code>MONTHLY</code> granularities.</p><br>
    ///   - [`filter(Expression)`](crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder::filter) / [`set_filter(Option<Expression>)`](crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder::set_filter):<br>required: **false**<br><p>The filters that you want to use to filter your forecast. The <code>GetCostForecast</code> API supports filtering by the following dimensions:</p>  <ul>   <li> <p> <code>AZ</code> </p> </li>   <li> <p> <code>INSTANCE_TYPE</code> </p> </li>   <li> <p> <code>LINKED_ACCOUNT</code> </p> </li>   <li> <p> <code>LINKED_ACCOUNT_NAME</code> </p> </li>   <li> <p> <code>OPERATION</code> </p> </li>   <li> <p> <code>PURCHASE_TYPE</code> </p> </li>   <li> <p> <code>REGION</code> </p> </li>   <li> <p> <code>SERVICE</code> </p> </li>   <li> <p> <code>USAGE_TYPE</code> </p> </li>   <li> <p> <code>USAGE_TYPE_GROUP</code> </p> </li>   <li> <p> <code>RECORD_TYPE</code> </p> </li>   <li> <p> <code>OPERATING_SYSTEM</code> </p> </li>   <li> <p> <code>TENANCY</code> </p> </li>   <li> <p> <code>SCOPE</code> </p> </li>   <li> <p> <code>PLATFORM</code> </p> </li>   <li> <p> <code>SUBSCRIPTION_ID</code> </p> </li>   <li> <p> <code>LEGAL_ENTITY_NAME</code> </p> </li>   <li> <p> <code>DEPLOYMENT_OPTION</code> </p> </li>   <li> <p> <code>DATABASE_ENGINE</code> </p> </li>   <li> <p> <code>INSTANCE_TYPE_FAMILY</code> </p> </li>   <li> <p> <code>BILLING_ENTITY</code> </p> </li>   <li> <p> <code>RESERVATION_ID</code> </p> </li>   <li> <p> <code>SAVINGS_PLAN_ARN</code> </p> </li>  </ul><br>
    ///   - [`prediction_interval_level(i32)`](crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder::prediction_interval_level) / [`set_prediction_interval_level(Option<i32>)`](crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder::set_prediction_interval_level):<br>required: **false**<br><p>Cost Explorer always returns the mean forecast as a single point. You can request a prediction interval around the mean by specifying a confidence level. The higher the confidence level, the more confident Cost Explorer is about the actual value falling in the prediction interval. Higher confidence levels result in wider prediction intervals.</p><br>
    /// - On success, responds with [`GetCostForecastOutput`](crate::operation::get_cost_forecast::GetCostForecastOutput) with field(s):
    ///   - [`total(Option<MetricValue>)`](crate::operation::get_cost_forecast::GetCostForecastOutput::total): <p>How much you are forecasted to spend over the forecast period, in <code>USD</code>.</p>
    ///   - [`forecast_results_by_time(Option<Vec::<ForecastResult>>)`](crate::operation::get_cost_forecast::GetCostForecastOutput::forecast_results_by_time): <p>The forecasts for your query, in order. For <code>DAILY</code> forecasts, this is a list of days. For <code>MONTHLY</code> forecasts, this is a list of months.</p>
    /// - On failure, responds with [`SdkError<GetCostForecastError>`](crate::operation::get_cost_forecast::GetCostForecastError)
    pub fn get_cost_forecast(&self) -> crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder {
        crate::operation::get_cost_forecast::builders::GetCostForecastFluentBuilder::new(self.handle.clone())
    }
}
