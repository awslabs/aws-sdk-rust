// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetCostCategories`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`search_string(impl Into<String>)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::search_string) / [`set_search_string(Option<String>)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::set_search_string):<br>required: **false**<br><p>The value that you want to search the filter values for.</p>  <p>If you don't specify a <code>CostCategoryName</code>, <code>SearchString</code> is used to filter Cost Category names that match the <code>SearchString</code> pattern. If you specify a <code>CostCategoryName</code>, <code>SearchString</code> is used to filter Cost Category values that match the <code>SearchString</code> pattern.</p><br>
    ///   - [`time_period(DateInterval)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::time_period) / [`set_time_period(Option<DateInterval>)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::set_time_period):<br>required: **true**<br><p>The time period of the request. </p><br>
    ///   - [`cost_category_name(impl Into<String>)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::cost_category_name) / [`set_cost_category_name(Option<String>)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::set_cost_category_name):<br>required: **false**<br><p>The unique name of the Cost Category.</p><br>
    ///   - [`filter(Expression)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::filter) / [`set_filter(Option<Expression>)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::set_filter):<br>required: **false**<br><p>Use <code>Expression</code> to filter in various Cost Explorer APIs.</p>  <p>Not all <code>Expression</code> types are supported in each API. Refer to the documentation for each specific API to see what is supported.</p>  <p>There are two patterns:</p>  <ul>   <li> <p>Simple dimension values.</p>    <ul>     <li> <p>There are three types of simple dimension values: <code>CostCategories</code>, <code>Tags</code>, and <code>Dimensions</code>.</p>      <ul>       <li> <p>Specify the <code>CostCategories</code> field to define a filter that acts on Cost Categories.</p> </li>       <li> <p>Specify the <code>Tags</code> field to define a filter that acts on Cost Allocation Tags.</p> </li>       <li> <p>Specify the <code>Dimensions</code> field to define a filter that acts on the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_DimensionValues.html"> <code>DimensionValues</code> </a>.</p> </li>      </ul> </li>     <li> <p>For each filter type, you can set the dimension name and values for the filters that you plan to use.</p>      <ul>       <li> <p>For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. For <code>GetRightsizingRecommendation</code>, the Region is a full name (for example, <code>REGION==US East (N. Virginia)</code>.</p> </li>       <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] } }</code> </p> </li>       <li> <p>As shown in the previous example, lists of dimension values are combined with <code>OR</code> when applying the filter.</p> </li>      </ul> </li>     <li> <p>You can also set different match options to further control how the filter behaves. Not all APIs support match options. Refer to the documentation for each specific API to see what is supported.</p>      <ul>       <li> <p>For example, you can filter for linked account names that start with "a".</p> </li>       <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "Dimensions": { "Key": "LINKED_ACCOUNT_NAME", "MatchOptions": [ "STARTS_WITH" ], "Values": [ "a" ] } }</code> </p> </li>      </ul> </li>    </ul> </li>   <li> <p>Compound <code>Expression</code> types with logical operations.</p>    <ul>     <li> <p>You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. By doing this, you can filter by more advanced options.</p> </li>     <li> <p>For example, you can filter by <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>.</p> </li>     <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> </li>    </ul> <note>     <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error: <code> { "And": [ ... ], "Dimensions": { "Key": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p>     <p>The following is an example of the corresponding error message: <code>"Expression has more than one roots. Only one root operator is allowed for each expression: And, Or, Not, Dimensions, Tags, CostCategories"</code> </p>    </note> </li>  </ul> <note>   <p>For the <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT isn't supported. OR isn't supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p>   <p>For the <code>GetReservationPurchaseRecommendation</code> action, only NOT is supported. AND and OR aren't supported. Dimensions are limited to <code>LINKED_ACCOUNT</code>.</p>  </note><br>
    ///   - [`sort_by(SortDefinition)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::sort_by) / [`set_sort_by(Option<Vec::<SortDefinition>>)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::set_sort_by):<br>required: **false**<br><p>The value that you sort the data by.</p>  <p>The key represents the cost and usage metrics. The following values are supported:</p>  <ul>   <li> <p> <code>BlendedCost</code> </p> </li>   <li> <p> <code>UnblendedCost</code> </p> </li>   <li> <p> <code>AmortizedCost</code> </p> </li>   <li> <p> <code>NetAmortizedCost</code> </p> </li>   <li> <p> <code>NetUnblendedCost</code> </p> </li>   <li> <p> <code>UsageQuantity</code> </p> </li>   <li> <p> <code>NormalizedUsageAmount</code> </p> </li>  </ul>  <p>The supported key values for the <code>SortOrder</code> value are <code>ASCENDING</code> and <code>DESCENDING</code>.</p>  <p>When you use the <code>SortBy</code> value, the <code>NextPageToken</code> and <code>SearchString</code> key values aren't supported.</p><br>
    ///   - [`max_results(i32)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::set_max_results):<br>required: **false**<br><p>This field is only used when the <code>SortBy</code> value is provided in the request.</p>  <p>The maximum number of objects that are returned for this request. If <code>MaxResults</code> isn't specified with the <code>SortBy</code> value, the request returns 1000 results as the default value for this parameter.</p>  <p>For <code>GetCostCategories</code>, MaxResults has an upper quota of 1000.</p><br>
    ///   - [`next_page_token(impl Into<String>)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::next_page_token) / [`set_next_page_token(Option<String>)`](crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::set_next_page_token):<br>required: **false**<br><p>If the number of objects that are still available for retrieval exceeds the quota, Amazon Web Services returns a NextPageToken value in the response. To retrieve the next batch of objects, provide the NextPageToken from the previous call in your next request.</p><br>
    /// - On success, responds with [`GetCostCategoriesOutput`](crate::operation::get_cost_categories::GetCostCategoriesOutput) with field(s):
    ///   - [`next_page_token(Option<String>)`](crate::operation::get_cost_categories::GetCostCategoriesOutput::next_page_token): <p>If the number of objects that are still available for retrieval exceeds the quota, Amazon Web Services returns a NextPageToken value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
    ///   - [`cost_category_names(Option<Vec::<String>>)`](crate::operation::get_cost_categories::GetCostCategoriesOutput::cost_category_names): <p>The names of the Cost Categories.</p>
    ///   - [`cost_category_values(Option<Vec::<String>>)`](crate::operation::get_cost_categories::GetCostCategoriesOutput::cost_category_values): <p>The Cost Category values.</p>  <p>If the <code>CostCategoryName</code> key isn't specified in the request, the <code>CostCategoryValues</code> fields aren't returned. </p>
    ///   - [`return_size(i32)`](crate::operation::get_cost_categories::GetCostCategoriesOutput::return_size): <p>The number of objects that are returned.</p>
    ///   - [`total_size(i32)`](crate::operation::get_cost_categories::GetCostCategoriesOutput::total_size): <p>The total number of objects.</p>
    /// - On failure, responds with [`SdkError<GetCostCategoriesError>`](crate::operation::get_cost_categories::GetCostCategoriesError)
    pub fn get_cost_categories(&self) -> crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder {
        crate::operation::get_cost_categories::builders::GetCostCategoriesFluentBuilder::new(self.handle.clone())
    }
}
