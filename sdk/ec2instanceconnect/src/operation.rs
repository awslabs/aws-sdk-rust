// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Pushes an SSH public key to the specified EC2 instance. The key remains for 60
/// seconds, which gives you 60 seconds to establish a serial console connection to the
/// instance using SSH. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-serial-console.html">EC2 Serial Console</a> in
/// the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendSerialConsoleSSHPublicKey {
    _private: (),
}
impl SendSerialConsoleSSHPublicKey {
    /// Creates a new builder-style object to manufacture [`SendSerialConsoleSshPublicKeyInput`](crate::input::SendSerialConsoleSshPublicKeyInput)
    pub fn builder() -> crate::input::send_serial_console_ssh_public_key_input::Builder {
        crate::input::send_serial_console_ssh_public_key_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendSerialConsoleSSHPublicKey {
    type Output = std::result::Result<
        crate::output::SendSerialConsoleSshPublicKeyOutput,
        crate::error::SendSerialConsoleSSHPublicKeyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_serial_console_ssh_public_key_error(response)
        } else {
            crate::operation_deser::parse_send_serial_console_ssh_public_key_response(response)
        }
    }
}

/// <p>Pushes an SSH public key to the specified EC2 instance for use by the specified user.
/// The key remains for 60 seconds. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect.html">Connect to
/// your Linux instance using EC2 Instance Connect</a> in the <i>Amazon EC2
/// User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendSSHPublicKey {
    _private: (),
}
impl SendSSHPublicKey {
    /// Creates a new builder-style object to manufacture [`SendSshPublicKeyInput`](crate::input::SendSshPublicKeyInput)
    pub fn builder() -> crate::input::send_ssh_public_key_input::Builder {
        crate::input::send_ssh_public_key_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendSSHPublicKey {
    type Output = std::result::Result<
        crate::output::SendSshPublicKeyOutput,
        crate::error::SendSSHPublicKeyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_ssh_public_key_error(response)
        } else {
            crate::operation_deser::parse_send_ssh_public_key_response(response)
        }
    }
}
