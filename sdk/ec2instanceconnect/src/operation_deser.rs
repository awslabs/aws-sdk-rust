// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_send_serial_console_ssh_public_key_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SendSerialConsoleSshPublicKeyOutput,
    crate::error::SendSerialConsoleSSHPublicKeyError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::SendSerialConsoleSSHPublicKeyError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::SendSerialConsoleSSHPublicKeyError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AuthException" => crate::error::SendSerialConsoleSSHPublicKeyError { meta: generic, kind: crate::error::SendSerialConsoleSSHPublicKeyErrorKind::AuthException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::auth_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_auth_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSerialConsoleSSHPublicKeyError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "EC2InstanceNotFoundException" => crate::error::SendSerialConsoleSSHPublicKeyError { meta: generic, kind: crate::error::SendSerialConsoleSSHPublicKeyErrorKind::Ec2InstanceNotFoundException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::ec2_instance_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_ec2_instance_not_found_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSerialConsoleSSHPublicKeyError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "EC2InstanceTypeInvalidException" => crate::error::SendSerialConsoleSSHPublicKeyError { meta: generic, kind: crate::error::SendSerialConsoleSSHPublicKeyErrorKind::Ec2InstanceTypeInvalidException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::ec2_instance_type_invalid_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_ec2_instance_type_invalid_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSerialConsoleSSHPublicKeyError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "InvalidArgsException" => crate::error::SendSerialConsoleSSHPublicKeyError { meta: generic, kind: crate::error::SendSerialConsoleSSHPublicKeyErrorKind::InvalidArgsException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::invalid_args_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_args_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSerialConsoleSSHPublicKeyError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "SerialConsoleAccessDisabledException" => crate::error::SendSerialConsoleSSHPublicKeyError { meta: generic, kind: crate::error::SendSerialConsoleSSHPublicKeyErrorKind::SerialConsoleAccessDisabledException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::serial_console_access_disabled_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_serial_console_access_disabled_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSerialConsoleSSHPublicKeyError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "SerialConsoleSessionLimitExceededException" => crate::error::SendSerialConsoleSSHPublicKeyError { meta: generic, kind: crate::error::SendSerialConsoleSSHPublicKeyErrorKind::SerialConsoleSessionLimitExceededException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::serial_console_session_limit_exceeded_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_serial_console_session_limit_exceeded_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSerialConsoleSSHPublicKeyError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "SerialConsoleSessionUnavailableException" => crate::error::SendSerialConsoleSSHPublicKeyError { meta: generic, kind: crate::error::SendSerialConsoleSSHPublicKeyErrorKind::SerialConsoleSessionUnavailableException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::serial_console_session_unavailable_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_serial_console_session_unavailable_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSerialConsoleSSHPublicKeyError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "ServiceException" => crate::error::SendSerialConsoleSSHPublicKeyError { meta: generic, kind: crate::error::SendSerialConsoleSSHPublicKeyErrorKind::ServiceException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::service_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_service_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSerialConsoleSSHPublicKeyError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "ThrottlingException" => crate::error::SendSerialConsoleSSHPublicKeyError { meta: generic, kind: crate::error::SendSerialConsoleSSHPublicKeyErrorKind::ThrottlingException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSerialConsoleSSHPublicKeyError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::SendSerialConsoleSSHPublicKeyError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_send_serial_console_ssh_public_key_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SendSerialConsoleSshPublicKeyOutput,
    crate::error::SendSerialConsoleSSHPublicKeyError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::send_serial_console_ssh_public_key_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_crate_operation_send_serial_console_ssh_public_key(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::SendSerialConsoleSSHPublicKeyError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_send_ssh_public_key_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::SendSshPublicKeyOutput, crate::error::SendSSHPublicKeyError>
{
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::SendSSHPublicKeyError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::SendSSHPublicKeyError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AuthException" => crate::error::SendSSHPublicKeyError {
            meta: generic,
            kind: crate::error::SendSSHPublicKeyErrorKind::AuthException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::auth_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_auth_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::SendSSHPublicKeyError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "EC2InstanceNotFoundException" => crate::error::SendSSHPublicKeyError {
            meta: generic,
            kind: crate::error::SendSSHPublicKeyErrorKind::Ec2InstanceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::ec2_instance_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_ec2_instance_not_found_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSSHPublicKeyError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidArgsException" => crate::error::SendSSHPublicKeyError {
            meta: generic,
            kind: crate::error::SendSSHPublicKeyErrorKind::InvalidArgsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_args_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_args_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSSHPublicKeyError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ServiceException" => {
            crate::error::SendSSHPublicKeyError {
                meta: generic,
                kind: crate::error::SendSSHPublicKeyErrorKind::ServiceException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::service_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_service_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSSHPublicKeyError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "ThrottlingException" => crate::error::SendSSHPublicKeyError {
            meta: generic,
            kind: crate::error::SendSSHPublicKeyErrorKind::ThrottlingException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_throttling_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendSSHPublicKeyError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::SendSSHPublicKeyError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_send_ssh_public_key_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::SendSshPublicKeyOutput, crate::error::SendSSHPublicKeyError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::send_ssh_public_key_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_send_ssh_public_key(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::SendSSHPublicKeyError::unhandled)?;
        output.build()
    })
}
