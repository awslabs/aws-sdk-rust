// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendSerialConsoleSshPublicKeyOutput {
    /// <p>The ID of the request. Please provide this ID when contacting AWS Support for assistance.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    /// <p>Is true if the request succeeds and an error otherwise.</p>
    #[doc(hidden)]
    pub success: bool,
    _request_id: Option<String>,
}
impl SendSerialConsoleSshPublicKeyOutput {
    /// <p>The ID of the request. Please provide this ID when contacting AWS Support for assistance.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>Is true if the request succeeds and an error otherwise.</p>
    pub fn success(&self) -> bool {
        self.success
    }
}
impl aws_http::request_id::RequestId for SendSerialConsoleSshPublicKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SendSerialConsoleSshPublicKeyOutput {
    /// Creates a new builder-style object to manufacture [`SendSerialConsoleSshPublicKeyOutput`](crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyOutput).
    pub fn builder() -> crate::operation::send_serial_console_ssh_public_key::builders::SendSerialConsoleSshPublicKeyOutputBuilder{
        crate::operation::send_serial_console_ssh_public_key::builders::SendSerialConsoleSshPublicKeyOutputBuilder::default()
    }
}

/// A builder for [`SendSerialConsoleSshPublicKeyOutput`](crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendSerialConsoleSshPublicKeyOutputBuilder {
    pub(crate) request_id: std::option::Option<std::string::String>,
    pub(crate) success: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl SendSerialConsoleSshPublicKeyOutputBuilder {
    /// <p>The ID of the request. Please provide this ID when contacting AWS Support for assistance.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The ID of the request. Please provide this ID when contacting AWS Support for assistance.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>Is true if the request succeeds and an error otherwise.</p>
    pub fn success(mut self, input: bool) -> Self {
        self.success = Some(input);
        self
    }
    /// <p>Is true if the request succeeds and an error otherwise.</p>
    pub fn set_success(mut self, input: std::option::Option<bool>) -> Self {
        self.success = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SendSerialConsoleSshPublicKeyOutput`](crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyOutput).
    pub fn build(
        self,
    ) -> crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyOutput
    {
        crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyOutput {
            request_id: self.request_id,
            success: self.success.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
