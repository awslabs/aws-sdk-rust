// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SendSerialConsoleSshPublicKeyInput {
    /// <p>The ID of the EC2 instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The serial port of the EC2 instance. Currently only port 0 is supported.</p>
    /// <p>Default: 0</p>
    pub serial_port: ::std::option::Option<i32>,
    /// <p>The public key material. To use the public key, you must have the matching private key. For information about the supported key formats and lengths, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws">Requirements for key pairs</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub ssh_public_key: ::std::option::Option<::std::string::String>,
}
impl SendSerialConsoleSshPublicKeyInput {
    /// <p>The ID of the EC2 instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The serial port of the EC2 instance. Currently only port 0 is supported.</p>
    /// <p>Default: 0</p>
    pub fn serial_port(&self) -> ::std::option::Option<i32> {
        self.serial_port
    }
    /// <p>The public key material. To use the public key, you must have the matching private key. For information about the supported key formats and lengths, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws">Requirements for key pairs</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn ssh_public_key(&self) -> ::std::option::Option<&str> {
        self.ssh_public_key.as_deref()
    }
}
impl SendSerialConsoleSshPublicKeyInput {
    /// Creates a new builder-style object to manufacture [`SendSerialConsoleSshPublicKeyInput`](crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyInput).
    pub fn builder() -> crate::operation::send_serial_console_ssh_public_key::builders::SendSerialConsoleSshPublicKeyInputBuilder {
        crate::operation::send_serial_console_ssh_public_key::builders::SendSerialConsoleSshPublicKeyInputBuilder::default()
    }
}

/// A builder for [`SendSerialConsoleSshPublicKeyInput`](crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SendSerialConsoleSshPublicKeyInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) serial_port: ::std::option::Option<i32>,
    pub(crate) ssh_public_key: ::std::option::Option<::std::string::String>,
}
impl SendSerialConsoleSshPublicKeyInputBuilder {
    /// <p>The ID of the EC2 instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the EC2 instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the EC2 instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The serial port of the EC2 instance. Currently only port 0 is supported.</p>
    /// <p>Default: 0</p>
    pub fn serial_port(mut self, input: i32) -> Self {
        self.serial_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The serial port of the EC2 instance. Currently only port 0 is supported.</p>
    /// <p>Default: 0</p>
    pub fn set_serial_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.serial_port = input;
        self
    }
    /// <p>The serial port of the EC2 instance. Currently only port 0 is supported.</p>
    /// <p>Default: 0</p>
    pub fn get_serial_port(&self) -> &::std::option::Option<i32> {
        &self.serial_port
    }
    /// <p>The public key material. To use the public key, you must have the matching private key. For information about the supported key formats and lengths, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws">Requirements for key pairs</a> in the <i>Amazon EC2 User Guide</i>.</p>
    /// This field is required.
    pub fn ssh_public_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ssh_public_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public key material. To use the public key, you must have the matching private key. For information about the supported key formats and lengths, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws">Requirements for key pairs</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn set_ssh_public_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ssh_public_key = input;
        self
    }
    /// <p>The public key material. To use the public key, you must have the matching private key. For information about the supported key formats and lengths, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws">Requirements for key pairs</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn get_ssh_public_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.ssh_public_key
    }
    /// Consumes the builder and constructs a [`SendSerialConsoleSshPublicKeyInput`](crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyInput {
            instance_id: self.instance_id,
            serial_port: self.serial_port,
            ssh_public_key: self.ssh_public_key,
        })
    }
}
