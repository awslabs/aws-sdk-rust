// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Orchestration and serialization glue logic for `SendSerialConsoleSSHPublicKey`.
#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SendSerialConsoleSSHPublicKey;
impl SendSerialConsoleSSHPublicKey {
    /// Creates a new `SendSerialConsoleSSHPublicKey`
    pub fn new() -> Self {
        Self
    }
    pub(crate) async fn orchestrate(
        runtime_plugins: &::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
        input: crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyInput,
    ) -> ::std::result::Result<
        crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSSHPublicKeyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let map_err = |err: ::aws_smithy_runtime_api::client::result::SdkError<
            ::aws_smithy_runtime_api::client::interceptors::context::Error,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >| {
            err.map_service_error(|err| {
                err.downcast::<crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSSHPublicKeyError>()
                    .expect("correct error type")
            })
        };
        let context = Self::orchestrate_with_stop_point(runtime_plugins, input, ::aws_smithy_runtime::client::orchestrator::StopPoint::None)
            .await
            .map_err(map_err)?;
        let output = context.finalize().map_err(map_err)?;
        ::std::result::Result::Ok(
            output
                .downcast::<crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyOutput>()
                .expect("correct output type"),
        )
    }

    pub(crate) async fn orchestrate_with_stop_point(
        runtime_plugins: &::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
        input: crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyInput,
        stop_point: ::aws_smithy_runtime::client::orchestrator::StopPoint,
    ) -> ::std::result::Result<
        ::aws_smithy_runtime_api::client::interceptors::context::InterceptorContext,
        ::aws_smithy_runtime_api::client::result::SdkError<
            ::aws_smithy_runtime_api::client::interceptors::context::Error,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = ::aws_smithy_runtime_api::client::interceptors::context::Input::erase(input);
        ::aws_smithy_runtime::client::orchestrator::invoke_with_stop_point(
            "ec2instanceconnect",
            "SendSerialConsoleSSHPublicKey",
            input,
            runtime_plugins,
            stop_point,
        )
        .await
    }

    pub(crate) fn operation_runtime_plugins(
        client_runtime_plugins: ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
        client_config: &crate::config::Config,
        config_override: ::std::option::Option<crate::config::Builder>,
    ) -> ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins {
        let mut runtime_plugins = client_runtime_plugins.with_operation_plugin(Self::new());
        runtime_plugins = runtime_plugins.with_client_plugin(crate::auth_plugin::DefaultAuthOptionsPlugin::new(vec![
            ::aws_runtime::auth::sigv4::SCHEME_ID,
        ]));
        if let ::std::option::Option::Some(config_override) = config_override {
            for plugin in config_override.runtime_plugins.iter().cloned() {
                runtime_plugins = runtime_plugins.with_operation_plugin(plugin);
            }
            runtime_plugins = runtime_plugins.with_operation_plugin(crate::config::ConfigOverrideRuntimePlugin::new(
                config_override,
                client_config.config.clone(),
                &client_config.runtime_components,
            ));
        }
        runtime_plugins
    }
}
impl ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugin for SendSerialConsoleSSHPublicKey {
    fn config(&self) -> ::std::option::Option<::aws_smithy_types::config_bag::FrozenLayer> {
        let mut cfg = ::aws_smithy_types::config_bag::Layer::new("SendSerialConsoleSSHPublicKey");

        cfg.store_put(::aws_smithy_runtime_api::client::ser_de::SharedRequestSerializer::new(
            SendSerialConsoleSSHPublicKeyRequestSerializer,
        ));
        cfg.store_put(::aws_smithy_runtime_api::client::ser_de::SharedResponseDeserializer::new(
            SendSerialConsoleSSHPublicKeyResponseDeserializer,
        ));

        cfg.store_put(::aws_smithy_runtime_api::client::auth::AuthSchemeOptionResolverParams::new(
            ::aws_smithy_runtime_api::client::auth::static_resolver::StaticAuthSchemeOptionResolverParams::new(),
        ));

        cfg.store_put(::aws_smithy_runtime_api::client::orchestrator::Metadata::new(
            "SendSerialConsoleSSHPublicKey",
            "ec2instanceconnect",
        ));
        let mut signing_options = ::aws_runtime::auth::SigningOptions::default();
        signing_options.double_uri_encode = true;
        signing_options.content_sha256_header = false;
        signing_options.normalize_uri_path = true;
        signing_options.payload_override = None;

        cfg.store_put(::aws_runtime::auth::SigV4OperationSigningConfig {
            signing_options,
            ..::std::default::Default::default()
        });

        ::std::option::Option::Some(cfg.freeze())
    }

    fn runtime_components(
        &self,
        _: &::aws_smithy_runtime_api::client::runtime_components::RuntimeComponentsBuilder,
    ) -> ::std::borrow::Cow<'_, ::aws_smithy_runtime_api::client::runtime_components::RuntimeComponentsBuilder> {
        #[allow(unused_mut)]
        let mut rcb = ::aws_smithy_runtime_api::client::runtime_components::RuntimeComponentsBuilder::new("SendSerialConsoleSSHPublicKey")
            .with_interceptor(
                ::aws_smithy_runtime::client::stalled_stream_protection::StalledStreamProtectionInterceptor::new(
                    ::aws_smithy_runtime::client::stalled_stream_protection::StalledStreamProtectionInterceptorKind::ResponseBody,
                ),
            )
            .with_interceptor(SendSerialConsoleSSHPublicKeyEndpointParamsInterceptor)
            .with_retry_classifier(::aws_smithy_runtime::client::retries::classifiers::TransientErrorClassifier::<
                crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSSHPublicKeyError,
            >::new())
            .with_retry_classifier(::aws_smithy_runtime::client::retries::classifiers::ModeledAsRetryableClassifier::<
                crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSSHPublicKeyError,
            >::new())
            .with_retry_classifier(::aws_runtime::retries::classifiers::AwsErrorCodeClassifier::<
                crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSSHPublicKeyError,
            >::new());

        ::std::borrow::Cow::Owned(rcb)
    }
}

#[derive(Debug)]
struct SendSerialConsoleSSHPublicKeyResponseDeserializer;
impl ::aws_smithy_runtime_api::client::ser_de::DeserializeResponse for SendSerialConsoleSSHPublicKeyResponseDeserializer {
    fn deserialize_nonstreaming(
        &self,
        response: &::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
    ) -> ::aws_smithy_runtime_api::client::interceptors::context::OutputOrError {
        let (success, status) = (response.status().is_success(), response.status().as_u16());
        let headers = response.headers();
        let body = response.body().bytes().expect("body loaded");
        #[allow(unused_mut)]
        let mut force_error = false;
        ::tracing::debug!(request_id = ?::aws_types::request_id::RequestId::request_id(response));
        let parse_result = if !success && status != 200 || force_error {
            crate::protocol_serde::shape_send_serial_console_ssh_public_key::de_send_serial_console_ssh_public_key_http_error(status, headers, body)
        } else {
            crate::protocol_serde::shape_send_serial_console_ssh_public_key::de_send_serial_console_ssh_public_key_http_response(
                status, headers, body,
            )
        };
        crate::protocol_serde::type_erase_result(parse_result)
    }
}
#[derive(Debug)]
struct SendSerialConsoleSSHPublicKeyRequestSerializer;
impl ::aws_smithy_runtime_api::client::ser_de::SerializeRequest for SendSerialConsoleSSHPublicKeyRequestSerializer {
    #[allow(unused_mut, clippy::let_and_return, clippy::needless_borrow, clippy::useless_conversion)]
    fn serialize_input(
        &self,
        input: ::aws_smithy_runtime_api::client::interceptors::context::Input,
        _cfg: &mut ::aws_smithy_types::config_bag::ConfigBag,
    ) -> ::std::result::Result<::aws_smithy_runtime_api::client::orchestrator::HttpRequest, ::aws_smithy_runtime_api::box_error::BoxError> {
        let input = input
            .downcast::<crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyInput>()
            .expect("correct type");
        let _header_serialization_settings = _cfg
            .load::<crate::serialization_settings::HeaderSerializationSettings>()
            .cloned()
            .unwrap_or_default();
        let mut request_builder = {
            fn uri_base(
                _input: &crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyInput,
                output: &mut ::std::string::String,
            ) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::BuildError> {
                use ::std::fmt::Write as _;
                ::std::write!(output, "/").expect("formatting should succeed");
                ::std::result::Result::Ok(())
            }
            #[allow(clippy::unnecessary_wraps)]
            fn update_http_builder(
                input: &crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSshPublicKeyInput,
                builder: ::http::request::Builder,
            ) -> ::std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
                let mut uri = ::std::string::String::new();
                uri_base(input, &mut uri)?;
                ::std::result::Result::Ok(builder.method("POST").uri(uri))
            }
            let mut builder = update_http_builder(&input, ::http::request::Builder::new())?;
            builder = _header_serialization_settings.set_default_header(builder, ::http::header::CONTENT_TYPE, "application/x-amz-json-1.1");
            builder = _header_serialization_settings.set_default_header(
                builder,
                ::http::header::HeaderName::from_static("x-amz-target"),
                "AWSEC2InstanceConnectService.SendSerialConsoleSSHPublicKey",
            );
            builder
        };
        let body = ::aws_smithy_types::body::SdkBody::from(
            crate::protocol_serde::shape_send_serial_console_ssh_public_key::ser_send_serial_console_ssh_public_key_input(&input)?,
        );
        if let Some(content_length) = body.content_length() {
            let content_length = content_length.to_string();
            request_builder = _header_serialization_settings.set_default_header(request_builder, ::http::header::CONTENT_LENGTH, &content_length);
        }
        ::std::result::Result::Ok(request_builder.body(body).expect("valid request").try_into().unwrap())
    }
}
#[derive(Debug)]
struct SendSerialConsoleSSHPublicKeyEndpointParamsInterceptor;

impl ::aws_smithy_runtime_api::client::interceptors::Intercept for SendSerialConsoleSSHPublicKeyEndpointParamsInterceptor {
    fn name(&self) -> &'static str {
        "SendSerialConsoleSSHPublicKeyEndpointParamsInterceptor"
    }

    fn read_before_execution(
        &self,
        context: &::aws_smithy_runtime_api::client::interceptors::context::BeforeSerializationInterceptorContextRef<
            '_,
            ::aws_smithy_runtime_api::client::interceptors::context::Input,
            ::aws_smithy_runtime_api::client::interceptors::context::Output,
            ::aws_smithy_runtime_api::client::interceptors::context::Error,
        >,
        cfg: &mut ::aws_smithy_types::config_bag::ConfigBag,
    ) -> ::std::result::Result<(), ::aws_smithy_runtime_api::box_error::BoxError> {
        let _input = context
            .input()
            .downcast_ref::<SendSerialConsoleSshPublicKeyInput>()
            .ok_or("failed to downcast to SendSerialConsoleSshPublicKeyInput")?;

        let params = crate::config::endpoint::Params::builder()
            .set_region(cfg.load::<::aws_types::region::Region>().map(|r| r.as_ref().to_owned()))
            .set_use_dual_stack(cfg.load::<::aws_types::endpoint_config::UseDualStack>().map(|ty| ty.0))
            .set_use_fips(cfg.load::<::aws_types::endpoint_config::UseFips>().map(|ty| ty.0))
            .set_endpoint(cfg.load::<::aws_types::endpoint_config::EndpointUrl>().map(|ty| ty.0.clone()))
            .build()
            .map_err(|err| {
                ::aws_smithy_runtime_api::client::interceptors::error::ContextAttachedError::new("endpoint params could not be built", err)
            })?;
        cfg.interceptor_state()
            .store_put(::aws_smithy_runtime_api::client::endpoint::EndpointResolverParams::new(params));
        ::std::result::Result::Ok(())
    }
}

/// Error type for the `SendSerialConsoleSSHPublicKeyError` operation.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum SendSerialConsoleSSHPublicKeyError {
    /// <p>Either your AWS credentials are not valid or you do not have access to the EC2 instance.</p>
    AuthException(crate::types::error::AuthException),
    /// <p>The specified instance was not found.</p>
    Ec2InstanceNotFoundException(crate::types::error::Ec2InstanceNotFoundException),
    /// <p>Unable to connect because the instance is not in a valid state. Connecting to a stopped or terminated instance is not supported. If the instance is stopped, start your instance, and try to connect again.</p>
    Ec2InstanceStateInvalidException(crate::types::error::Ec2InstanceStateInvalidException),
    /// <p>The instance type is not supported for connecting via the serial console. Only Nitro instance types are currently supported.</p>
    Ec2InstanceTypeInvalidException(crate::types::error::Ec2InstanceTypeInvalidException),
    /// <p>The instance is currently unavailable. Wait a few minutes and try again.</p>
    Ec2InstanceUnavailableException(crate::types::error::Ec2InstanceUnavailableException),
    /// <p>One of the parameters is not valid.</p>
    InvalidArgsException(crate::types::error::InvalidArgsException),
    /// <p>Your account is not authorized to use the EC2 Serial Console. To authorize your account, run the EnableSerialConsoleAccess API. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_EnableSerialConsoleAccess.html">EnableSerialConsoleAccess</a> in the <i>Amazon EC2 API Reference</i>.</p>
    SerialConsoleAccessDisabledException(crate::types::error::SerialConsoleAccessDisabledException),
    /// <p>The instance currently has 1 active serial console session. Only 1 session is supported at a time.</p>
    SerialConsoleSessionLimitExceededException(crate::types::error::SerialConsoleSessionLimitExceededException),
    /// <p>Unable to start a serial console session. Please try again.</p>
    SerialConsoleSessionUnavailableException(crate::types::error::SerialConsoleSessionUnavailableException),
    /// <p>Your instance's BIOS version is unsupported for serial console connection. Reboot your instance to update its BIOS, and then try again to connect.</p>
    SerialConsoleSessionUnsupportedException(crate::types::error::SerialConsoleSessionUnsupportedException),
    /// <p>The service encountered an error. Follow the instructions in the error message and try again.</p>
    ServiceException(crate::types::error::ServiceException),
    /// <p>The requests were made too frequently and have been throttled. Wait a while and try again. To increase the limit on your request frequency, contact AWS Support.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-SendSerialConsoleSSHPublicKeyError) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl SendSerialConsoleSSHPublicKeyError {
    /// Creates the `SendSerialConsoleSSHPublicKeyError::Unhandled` variant from any error type.
    pub fn unhandled(
        err: impl ::std::convert::Into<::std::boxed::Box<dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static>>,
    ) -> Self {
        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: err.into(),
            meta: ::std::default::Default::default(),
        })
    }

    /// Creates the `SendSerialConsoleSSHPublicKeyError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: err.clone().into(),
            meta: err,
        })
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::AuthException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::Ec2InstanceNotFoundException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::Ec2InstanceStateInvalidException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::Ec2InstanceTypeInvalidException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::Ec2InstanceUnavailableException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::InvalidArgsException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::SerialConsoleAccessDisabledException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::SerialConsoleSessionLimitExceededException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::SerialConsoleSessionUnavailableException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::SerialConsoleSessionUnsupportedException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::ServiceException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::ThrottlingException(e) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(e),
            Self::Unhandled(e) => &e.meta,
        }
    }
    /// Returns `true` if the error kind is `SendSerialConsoleSSHPublicKeyError::AuthException`.
    pub fn is_auth_exception(&self) -> bool {
        matches!(self, Self::AuthException(_))
    }
    /// Returns `true` if the error kind is `SendSerialConsoleSSHPublicKeyError::Ec2InstanceNotFoundException`.
    pub fn is_ec2_instance_not_found_exception(&self) -> bool {
        matches!(self, Self::Ec2InstanceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `SendSerialConsoleSSHPublicKeyError::Ec2InstanceStateInvalidException`.
    pub fn is_ec2_instance_state_invalid_exception(&self) -> bool {
        matches!(self, Self::Ec2InstanceStateInvalidException(_))
    }
    /// Returns `true` if the error kind is `SendSerialConsoleSSHPublicKeyError::Ec2InstanceTypeInvalidException`.
    pub fn is_ec2_instance_type_invalid_exception(&self) -> bool {
        matches!(self, Self::Ec2InstanceTypeInvalidException(_))
    }
    /// Returns `true` if the error kind is `SendSerialConsoleSSHPublicKeyError::Ec2InstanceUnavailableException`.
    pub fn is_ec2_instance_unavailable_exception(&self) -> bool {
        matches!(self, Self::Ec2InstanceUnavailableException(_))
    }
    /// Returns `true` if the error kind is `SendSerialConsoleSSHPublicKeyError::InvalidArgsException`.
    pub fn is_invalid_args_exception(&self) -> bool {
        matches!(self, Self::InvalidArgsException(_))
    }
    /// Returns `true` if the error kind is `SendSerialConsoleSSHPublicKeyError::SerialConsoleAccessDisabledException`.
    pub fn is_serial_console_access_disabled_exception(&self) -> bool {
        matches!(self, Self::SerialConsoleAccessDisabledException(_))
    }
    /// Returns `true` if the error kind is `SendSerialConsoleSSHPublicKeyError::SerialConsoleSessionLimitExceededException`.
    pub fn is_serial_console_session_limit_exceeded_exception(&self) -> bool {
        matches!(self, Self::SerialConsoleSessionLimitExceededException(_))
    }
    /// Returns `true` if the error kind is `SendSerialConsoleSSHPublicKeyError::SerialConsoleSessionUnavailableException`.
    pub fn is_serial_console_session_unavailable_exception(&self) -> bool {
        matches!(self, Self::SerialConsoleSessionUnavailableException(_))
    }
    /// Returns `true` if the error kind is `SendSerialConsoleSSHPublicKeyError::SerialConsoleSessionUnsupportedException`.
    pub fn is_serial_console_session_unsupported_exception(&self) -> bool {
        matches!(self, Self::SerialConsoleSessionUnsupportedException(_))
    }
    /// Returns `true` if the error kind is `SendSerialConsoleSSHPublicKeyError::ServiceException`.
    pub fn is_service_exception(&self) -> bool {
        matches!(self, Self::ServiceException(_))
    }
    /// Returns `true` if the error kind is `SendSerialConsoleSSHPublicKeyError::ThrottlingException`.
    pub fn is_throttling_exception(&self) -> bool {
        matches!(self, Self::ThrottlingException(_))
    }
}
impl ::std::error::Error for SendSerialConsoleSSHPublicKeyError {
    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Self::AuthException(_inner) => ::std::option::Option::Some(_inner),
            Self::Ec2InstanceNotFoundException(_inner) => ::std::option::Option::Some(_inner),
            Self::Ec2InstanceStateInvalidException(_inner) => ::std::option::Option::Some(_inner),
            Self::Ec2InstanceTypeInvalidException(_inner) => ::std::option::Option::Some(_inner),
            Self::Ec2InstanceUnavailableException(_inner) => ::std::option::Option::Some(_inner),
            Self::InvalidArgsException(_inner) => ::std::option::Option::Some(_inner),
            Self::SerialConsoleAccessDisabledException(_inner) => ::std::option::Option::Some(_inner),
            Self::SerialConsoleSessionLimitExceededException(_inner) => ::std::option::Option::Some(_inner),
            Self::SerialConsoleSessionUnavailableException(_inner) => ::std::option::Option::Some(_inner),
            Self::SerialConsoleSessionUnsupportedException(_inner) => ::std::option::Option::Some(_inner),
            Self::ServiceException(_inner) => ::std::option::Option::Some(_inner),
            Self::ThrottlingException(_inner) => ::std::option::Option::Some(_inner),
            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
        }
    }
}
impl ::std::fmt::Display for SendSerialConsoleSSHPublicKeyError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::AuthException(_inner) => _inner.fmt(f),
            Self::Ec2InstanceNotFoundException(_inner) => _inner.fmt(f),
            Self::Ec2InstanceStateInvalidException(_inner) => _inner.fmt(f),
            Self::Ec2InstanceTypeInvalidException(_inner) => _inner.fmt(f),
            Self::Ec2InstanceUnavailableException(_inner) => _inner.fmt(f),
            Self::InvalidArgsException(_inner) => _inner.fmt(f),
            Self::SerialConsoleAccessDisabledException(_inner) => _inner.fmt(f),
            Self::SerialConsoleSessionLimitExceededException(_inner) => _inner.fmt(f),
            Self::SerialConsoleSessionUnavailableException(_inner) => _inner.fmt(f),
            Self::SerialConsoleSessionUnsupportedException(_inner) => _inner.fmt(f),
            Self::ServiceException(_inner) => _inner.fmt(f),
            Self::ThrottlingException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl ::aws_smithy_types::retry::ProvideErrorKind for SendSerialConsoleSSHPublicKeyError {
    fn code(&self) -> ::std::option::Option<&str> {
        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
        ::std::option::Option::None
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for SendSerialConsoleSSHPublicKeyError {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::AuthException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::Ec2InstanceNotFoundException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::Ec2InstanceStateInvalidException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::Ec2InstanceTypeInvalidException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::Ec2InstanceUnavailableException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::InvalidArgsException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::SerialConsoleAccessDisabledException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::SerialConsoleSessionLimitExceededException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::SerialConsoleSessionUnavailableException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::SerialConsoleSessionUnsupportedException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::ServiceException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::ThrottlingException(_inner) => ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner),
            Self::Unhandled(_inner) => &_inner.meta,
        }
    }
}
impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for SendSerialConsoleSSHPublicKeyError {
    fn create_unhandled_error(
        source: ::std::boxed::Box<dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static>,
        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source,
            meta: meta.unwrap_or_default(),
        })
    }
}
impl ::aws_types::request_id::RequestId for crate::operation::send_serial_console_ssh_public_key::SendSerialConsoleSSHPublicKeyError {
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}

pub use crate::operation::send_serial_console_ssh_public_key::_send_serial_console_ssh_public_key_output::SendSerialConsoleSshPublicKeyOutput;

pub use crate::operation::send_serial_console_ssh_public_key::_send_serial_console_ssh_public_key_input::SendSerialConsoleSshPublicKeyInput;

mod _send_serial_console_ssh_public_key_input;

mod _send_serial_console_ssh_public_key_output;

/// Builders
pub mod builders;
