// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateProject`](crate::operation::update_project::builders::UpdateProjectFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::operation::update_project::builders::UpdateProjectFluentBuilder::project_name) / [`set_project_name(Option<String>)`](crate::operation::update_project::builders::UpdateProjectFluentBuilder::set_project_name):<br>required: **true**<br><p>The name of the project to be updated.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::update_project::builders::UpdateProjectFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::update_project::builders::UpdateProjectFluentBuilder::set_description):<br>required: **false**<br><p>An optional user-defined description for the project.</p><br>
    ///   - [`placement_template(PlacementTemplate)`](crate::operation::update_project::builders::UpdateProjectFluentBuilder::placement_template) / [`set_placement_template(Option<PlacementTemplate>)`](crate::operation::update_project::builders::UpdateProjectFluentBuilder::set_placement_template):<br>required: **false**<br><p>An object defining the project update. Once a project has been created, you cannot add device template names to the project. However, for a given <code>placementTemplate</code>, you can update the associated <code>callbackOverrides</code> for the device definition using this API.</p><br>
    /// - On success, responds with [`UpdateProjectOutput`](crate::operation::update_project::UpdateProjectOutput)
    /// - On failure, responds with [`SdkError<UpdateProjectError>`](crate::operation::update_project::UpdateProjectError)
    pub fn update_project(&self) -> crate::operation::update_project::builders::UpdateProjectFluentBuilder {
        crate::operation::update_project::builders::UpdateProjectFluentBuilder::new(self.handle.clone())
    }
}
