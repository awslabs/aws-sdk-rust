// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdatePlacementInput {
    /// <p>The name of the placement to update.</p>
    pub placement_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the project containing the placement to be updated.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>The user-defined object of attributes used to update the placement. The maximum number of key/value pairs is 50.</p>
    pub attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl UpdatePlacementInput {
    /// <p>The name of the placement to update.</p>
    pub fn placement_name(&self) -> ::std::option::Option<&str> {
        self.placement_name.as_deref()
    }
    /// <p>The name of the project containing the placement to be updated.</p>
    pub fn project_name(&self) -> ::std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>The user-defined object of attributes used to update the placement. The maximum number of key/value pairs is 50.</p>
    pub fn attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.attributes.as_ref()
    }
}
impl UpdatePlacementInput {
    /// Creates a new builder-style object to manufacture [`UpdatePlacementInput`](crate::operation::update_placement::UpdatePlacementInput).
    pub fn builder() -> crate::operation::update_placement::builders::UpdatePlacementInputBuilder {
        crate::operation::update_placement::builders::UpdatePlacementInputBuilder::default()
    }
}

/// A builder for [`UpdatePlacementInput`](crate::operation::update_placement::UpdatePlacementInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdatePlacementInputBuilder {
    pub(crate) placement_name: ::std::option::Option<::std::string::String>,
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl UpdatePlacementInputBuilder {
    /// <p>The name of the placement to update.</p>
    /// This field is required.
    pub fn placement_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.placement_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the placement to update.</p>
    pub fn set_placement_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.placement_name = input;
        self
    }
    /// <p>The name of the placement to update.</p>
    pub fn get_placement_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.placement_name
    }
    /// <p>The name of the project containing the placement to be updated.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project containing the placement to be updated.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the project containing the placement to be updated.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>The user-defined object of attributes used to update the placement. The maximum number of key/value pairs is 50.</p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The user-defined object of attributes used to update the placement. The maximum number of key/value pairs is 50.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The user-defined object of attributes used to update the placement. The maximum number of key/value pairs is 50.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`UpdatePlacementInput`](crate::operation::update_placement::UpdatePlacementInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_placement::UpdatePlacementInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_placement::UpdatePlacementInput {
            placement_name: self.placement_name,
            project_name: self.project_name,
            attributes: self.attributes,
        })
    }
}
