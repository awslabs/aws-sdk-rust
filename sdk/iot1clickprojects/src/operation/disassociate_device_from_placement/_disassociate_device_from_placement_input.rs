// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisassociateDeviceFromPlacementInput {
    /// <p>The name of the project that contains the placement.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the placement that the device should be removed from.</p>
    pub placement_name: ::std::option::Option<::std::string::String>,
    /// <p>The device ID that should be removed from the placement.</p>
    pub device_template_name: ::std::option::Option<::std::string::String>,
}
impl DisassociateDeviceFromPlacementInput {
    /// <p>The name of the project that contains the placement.</p>
    pub fn project_name(&self) -> ::std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>The name of the placement that the device should be removed from.</p>
    pub fn placement_name(&self) -> ::std::option::Option<&str> {
        self.placement_name.as_deref()
    }
    /// <p>The device ID that should be removed from the placement.</p>
    pub fn device_template_name(&self) -> ::std::option::Option<&str> {
        self.device_template_name.as_deref()
    }
}
impl DisassociateDeviceFromPlacementInput {
    /// Creates a new builder-style object to manufacture [`DisassociateDeviceFromPlacementInput`](crate::operation::disassociate_device_from_placement::DisassociateDeviceFromPlacementInput).
    pub fn builder() -> crate::operation::disassociate_device_from_placement::builders::DisassociateDeviceFromPlacementInputBuilder {
        crate::operation::disassociate_device_from_placement::builders::DisassociateDeviceFromPlacementInputBuilder::default()
    }
}

/// A builder for [`DisassociateDeviceFromPlacementInput`](crate::operation::disassociate_device_from_placement::DisassociateDeviceFromPlacementInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DisassociateDeviceFromPlacementInputBuilder {
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) placement_name: ::std::option::Option<::std::string::String>,
    pub(crate) device_template_name: ::std::option::Option<::std::string::String>,
}
impl DisassociateDeviceFromPlacementInputBuilder {
    /// <p>The name of the project that contains the placement.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project that contains the placement.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the project that contains the placement.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The name of the placement that the device should be removed from.</p>
    /// This field is required.
    pub fn placement_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.placement_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the placement that the device should be removed from.</p>
    pub fn set_placement_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.placement_name = input;
        self
    }
    /// <p>The name of the placement that the device should be removed from.</p>
    pub fn get_placement_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.placement_name
    }
    /// <p>The device ID that should be removed from the placement.</p>
    /// This field is required.
    pub fn device_template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The device ID that should be removed from the placement.</p>
    pub fn set_device_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_template_name = input;
        self
    }
    /// <p>The device ID that should be removed from the placement.</p>
    pub fn get_device_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_template_name
    }
    /// Consumes the builder and constructs a [`DisassociateDeviceFromPlacementInput`](crate::operation::disassociate_device_from_placement::DisassociateDeviceFromPlacementInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::disassociate_device_from_placement::DisassociateDeviceFromPlacementInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::disassociate_device_from_placement::DisassociateDeviceFromPlacementInput {
                project_name: self.project_name,
                placement_name: self.placement_name,
                device_template_name: self.device_template_name,
            },
        )
    }
}
