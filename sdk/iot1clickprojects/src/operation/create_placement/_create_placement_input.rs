// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePlacementInput {
    /// <p>The name of the placement to be created.</p>
    #[doc(hidden)]
    pub placement_name: std::option::Option<std::string::String>,
    /// <p>The name of the project in which to create the placement.</p>
    #[doc(hidden)]
    pub project_name: std::option::Option<std::string::String>,
    /// <p>Optional user-defined key/value pairs providing contextual data (such as location or function) for the placement.</p>
    #[doc(hidden)]
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreatePlacementInput {
    /// <p>The name of the placement to be created.</p>
    pub fn placement_name(&self) -> std::option::Option<&str> {
        self.placement_name.as_deref()
    }
    /// <p>The name of the project in which to create the placement.</p>
    pub fn project_name(&self) -> std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>Optional user-defined key/value pairs providing contextual data (such as location or function) for the placement.</p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
}
impl CreatePlacementInput {
    /// Creates a new builder-style object to manufacture [`CreatePlacementInput`](crate::operation::create_placement::CreatePlacementInput).
    pub fn builder() -> crate::operation::create_placement::builders::CreatePlacementInputBuilder {
        crate::operation::create_placement::builders::CreatePlacementInputBuilder::default()
    }
}

/// A builder for [`CreatePlacementInput`](crate::operation::create_placement::CreatePlacementInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreatePlacementInputBuilder {
    pub(crate) placement_name: std::option::Option<std::string::String>,
    pub(crate) project_name: std::option::Option<std::string::String>,
    pub(crate) attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreatePlacementInputBuilder {
    /// <p>The name of the placement to be created.</p>
    pub fn placement_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.placement_name = Some(input.into());
        self
    }
    /// <p>The name of the placement to be created.</p>
    pub fn set_placement_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.placement_name = input;
        self
    }
    /// <p>The name of the project in which to create the placement.</p>
    pub fn project_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_name = Some(input.into());
        self
    }
    /// <p>The name of the project in which to create the placement.</p>
    pub fn set_project_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Optional user-defined key/value pairs providing contextual data (such as location or function) for the placement.</p>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = Some(hash_map);
        self
    }
    /// <p>Optional user-defined key/value pairs providing contextual data (such as location or function) for the placement.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// Consumes the builder and constructs a [`CreatePlacementInput`](crate::operation::create_placement::CreatePlacementInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_placement::CreatePlacementInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_placement::CreatePlacementInput {
            placement_name: self.placement_name,
            project_name: self.project_name,
            attributes: self.attributes,
        })
    }
}
