// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object providing summary information for a particular placement.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PlacementSummary {
    /// <p>The name of the project containing the placement.</p>
    pub project_name: ::std::string::String,
    /// <p>The name of the placement being summarized.</p>
    pub placement_name: ::std::string::String,
    /// <p>The date when the placement was originally created, in UNIX epoch time format.</p>
    pub created_date: ::aws_smithy_types::DateTime,
    /// <p>The date when the placement was last updated, in UNIX epoch time format. If the placement was not updated, then <code>createdDate</code> and <code>updatedDate</code> are the same.</p>
    pub updated_date: ::aws_smithy_types::DateTime,
}
impl PlacementSummary {
    /// <p>The name of the project containing the placement.</p>
    pub fn project_name(&self) -> &str {
        use std::ops::Deref;
        self.project_name.deref()
    }
    /// <p>The name of the placement being summarized.</p>
    pub fn placement_name(&self) -> &str {
        use std::ops::Deref;
        self.placement_name.deref()
    }
    /// <p>The date when the placement was originally created, in UNIX epoch time format.</p>
    pub fn created_date(&self) -> &::aws_smithy_types::DateTime {
        &self.created_date
    }
    /// <p>The date when the placement was last updated, in UNIX epoch time format. If the placement was not updated, then <code>createdDate</code> and <code>updatedDate</code> are the same.</p>
    pub fn updated_date(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_date
    }
}
impl PlacementSummary {
    /// Creates a new builder-style object to manufacture [`PlacementSummary`](crate::types::PlacementSummary).
    pub fn builder() -> crate::types::builders::PlacementSummaryBuilder {
        crate::types::builders::PlacementSummaryBuilder::default()
    }
}

/// A builder for [`PlacementSummary`](crate::types::PlacementSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PlacementSummaryBuilder {
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) placement_name: ::std::option::Option<::std::string::String>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PlacementSummaryBuilder {
    /// <p>The name of the project containing the placement.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project containing the placement.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the project containing the placement.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The name of the placement being summarized.</p>
    /// This field is required.
    pub fn placement_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.placement_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the placement being summarized.</p>
    pub fn set_placement_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.placement_name = input;
        self
    }
    /// <p>The name of the placement being summarized.</p>
    pub fn get_placement_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.placement_name
    }
    /// <p>The date when the placement was originally created, in UNIX epoch time format.</p>
    /// This field is required.
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the placement was originally created, in UNIX epoch time format.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The date when the placement was originally created, in UNIX epoch time format.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>The date when the placement was last updated, in UNIX epoch time format. If the placement was not updated, then <code>createdDate</code> and <code>updatedDate</code> are the same.</p>
    /// This field is required.
    pub fn updated_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the placement was last updated, in UNIX epoch time format. If the placement was not updated, then <code>createdDate</code> and <code>updatedDate</code> are the same.</p>
    pub fn set_updated_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_date = input;
        self
    }
    /// <p>The date when the placement was last updated, in UNIX epoch time format. If the placement was not updated, then <code>createdDate</code> and <code>updatedDate</code> are the same.</p>
    pub fn get_updated_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_date
    }
    /// Consumes the builder and constructs a [`PlacementSummary`](crate::types::PlacementSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`project_name`](crate::types::builders::PlacementSummaryBuilder::project_name)
    /// - [`placement_name`](crate::types::builders::PlacementSummaryBuilder::placement_name)
    /// - [`created_date`](crate::types::builders::PlacementSummaryBuilder::created_date)
    /// - [`updated_date`](crate::types::builders::PlacementSummaryBuilder::updated_date)
    pub fn build(self) -> ::std::result::Result<crate::types::PlacementSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PlacementSummary {
            project_name: self.project_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_name",
                    "project_name was not specified but it is required when building PlacementSummary",
                )
            })?,
            placement_name: self.placement_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "placement_name",
                    "placement_name was not specified but it is required when building PlacementSummary",
                )
            })?,
            created_date: self.created_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_date",
                    "created_date was not specified but it is required when building PlacementSummary",
                )
            })?,
            updated_date: self.updated_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_date",
                    "updated_date was not specified but it is required when building PlacementSummary",
                )
            })?,
        })
    }
}
