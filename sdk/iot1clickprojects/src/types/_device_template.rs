// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing a device for a placement template (see <code>PlacementTemplate</code>).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeviceTemplate {
    /// <p>The device type, which currently must be <code>"button"</code>.</p>
    #[doc(hidden)]
    pub device_type: std::option::Option<std::string::String>,
    /// <p>An optional Lambda function to invoke instead of the default Lambda function provided by the placement template.</p>
    #[doc(hidden)]
    pub callback_overrides:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DeviceTemplate {
    /// <p>The device type, which currently must be <code>"button"</code>.</p>
    pub fn device_type(&self) -> std::option::Option<&str> {
        self.device_type.as_deref()
    }
    /// <p>An optional Lambda function to invoke instead of the default Lambda function provided by the placement template.</p>
    pub fn callback_overrides(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.callback_overrides.as_ref()
    }
}
impl DeviceTemplate {
    /// Creates a new builder-style object to manufacture [`DeviceTemplate`](crate::types::DeviceTemplate).
    pub fn builder() -> crate::types::builders::DeviceTemplateBuilder {
        crate::types::builders::DeviceTemplateBuilder::default()
    }
}

/// A builder for [`DeviceTemplate`](crate::types::DeviceTemplate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceTemplateBuilder {
    pub(crate) device_type: std::option::Option<std::string::String>,
    pub(crate) callback_overrides:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DeviceTemplateBuilder {
    /// <p>The device type, which currently must be <code>"button"</code>.</p>
    pub fn device_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_type = Some(input.into());
        self
    }
    /// <p>The device type, which currently must be <code>"button"</code>.</p>
    pub fn set_device_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_type = input;
        self
    }
    /// Adds a key-value pair to `callback_overrides`.
    ///
    /// To override the contents of this collection use [`set_callback_overrides`](Self::set_callback_overrides).
    ///
    /// <p>An optional Lambda function to invoke instead of the default Lambda function provided by the placement template.</p>
    pub fn callback_overrides(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.callback_overrides.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.callback_overrides = Some(hash_map);
        self
    }
    /// <p>An optional Lambda function to invoke instead of the default Lambda function provided by the placement template.</p>
    pub fn set_callback_overrides(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.callback_overrides = input;
        self
    }
    /// Consumes the builder and constructs a [`DeviceTemplate`](crate::types::DeviceTemplate).
    pub fn build(self) -> crate::types::DeviceTemplate {
        crate::types::DeviceTemplate {
            device_type: self.device_type,
            callback_overrides: self.callback_overrides,
        }
    }
}
