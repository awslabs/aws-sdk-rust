// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS IoT 1-Click Projects Service
///
/// Client for invoking operations on AWS IoT 1-Click Projects Service. Each operation on AWS IoT 1-Click Projects Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_iot1clickprojects::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_iot1clickprojects::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_iot1clickprojects::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AssociateDeviceWithPlacement`](crate::client::fluent_builders::AssociateDeviceWithPlacement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::AssociateDeviceWithPlacement::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::AssociateDeviceWithPlacement::set_project_name): <p>The name of the project containing the placement in which to associate the device.</p>
    ///   - [`placement_name(impl Into<String>)`](crate::client::fluent_builders::AssociateDeviceWithPlacement::placement_name) / [`set_placement_name(Option<String>)`](crate::client::fluent_builders::AssociateDeviceWithPlacement::set_placement_name): <p>The name of the placement in which to associate the device.</p>
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::AssociateDeviceWithPlacement::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::AssociateDeviceWithPlacement::set_device_id): <p>The ID of the physical device to be associated with the given placement in the project. Note that a mandatory 4 character prefix is required for all <code>deviceId</code> values.</p>
    ///   - [`device_template_name(impl Into<String>)`](crate::client::fluent_builders::AssociateDeviceWithPlacement::device_template_name) / [`set_device_template_name(Option<String>)`](crate::client::fluent_builders::AssociateDeviceWithPlacement::set_device_template_name): <p>The device template name to associate with the device ID.</p>
    /// - On success, responds with [`AssociateDeviceWithPlacementOutput`](crate::output::AssociateDeviceWithPlacementOutput)

    /// - On failure, responds with [`SdkError<AssociateDeviceWithPlacementError>`](crate::error::AssociateDeviceWithPlacementError)
    pub fn associate_device_with_placement(
        &self,
    ) -> crate::client::fluent_builders::AssociateDeviceWithPlacement {
        crate::client::fluent_builders::AssociateDeviceWithPlacement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreatePlacement`](crate::client::fluent_builders::CreatePlacement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`placement_name(impl Into<String>)`](crate::client::fluent_builders::CreatePlacement::placement_name) / [`set_placement_name(Option<String>)`](crate::client::fluent_builders::CreatePlacement::set_placement_name): <p>The name of the placement to be created.</p>
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::CreatePlacement::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::CreatePlacement::set_project_name): <p>The name of the project in which to create the placement.</p>
    ///   - [`attributes(HashMap<String, String>)`](crate::client::fluent_builders::CreatePlacement::attributes) / [`set_attributes(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreatePlacement::set_attributes): <p>Optional user-defined key/value pairs providing contextual data (such as location or function) for the placement.</p>
    /// - On success, responds with [`CreatePlacementOutput`](crate::output::CreatePlacementOutput)

    /// - On failure, responds with [`SdkError<CreatePlacementError>`](crate::error::CreatePlacementError)
    pub fn create_placement(&self) -> crate::client::fluent_builders::CreatePlacement {
        crate::client::fluent_builders::CreatePlacement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateProject`](crate::client::fluent_builders::CreateProject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::CreateProject::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::CreateProject::set_project_name): <p>The name of the project to create.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateProject::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateProject::set_description): <p>An optional description for the project.</p>
    ///   - [`placement_template(PlacementTemplate)`](crate::client::fluent_builders::CreateProject::placement_template) / [`set_placement_template(Option<PlacementTemplate>)`](crate::client::fluent_builders::CreateProject::set_placement_template): <p>The schema defining the placement to be created. A placement template defines placement default attributes and device templates. You cannot add or remove device templates after the project has been created. However, you can update <code>callbackOverrides</code> for the device templates using the <code>UpdateProject</code> API.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateProject::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateProject::set_tags): <p>Optional tags (metadata key/value pairs) to be associated with the project. For example, <code>{ {"key1": "value1", "key2": "value2"} }</code>. For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">AWS Tagging Strategies</a>.</p>
    /// - On success, responds with [`CreateProjectOutput`](crate::output::CreateProjectOutput)

    /// - On failure, responds with [`SdkError<CreateProjectError>`](crate::error::CreateProjectError)
    pub fn create_project(&self) -> crate::client::fluent_builders::CreateProject {
        crate::client::fluent_builders::CreateProject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePlacement`](crate::client::fluent_builders::DeletePlacement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`placement_name(impl Into<String>)`](crate::client::fluent_builders::DeletePlacement::placement_name) / [`set_placement_name(Option<String>)`](crate::client::fluent_builders::DeletePlacement::set_placement_name): <p>The name of the empty placement to delete.</p>
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DeletePlacement::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DeletePlacement::set_project_name): <p>The project containing the empty placement to delete.</p>
    /// - On success, responds with [`DeletePlacementOutput`](crate::output::DeletePlacementOutput)

    /// - On failure, responds with [`SdkError<DeletePlacementError>`](crate::error::DeletePlacementError)
    pub fn delete_placement(&self) -> crate::client::fluent_builders::DeletePlacement {
        crate::client::fluent_builders::DeletePlacement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteProject`](crate::client::fluent_builders::DeleteProject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DeleteProject::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DeleteProject::set_project_name): <p>The name of the empty project to delete.</p>
    /// - On success, responds with [`DeleteProjectOutput`](crate::output::DeleteProjectOutput)

    /// - On failure, responds with [`SdkError<DeleteProjectError>`](crate::error::DeleteProjectError)
    pub fn delete_project(&self) -> crate::client::fluent_builders::DeleteProject {
        crate::client::fluent_builders::DeleteProject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribePlacement`](crate::client::fluent_builders::DescribePlacement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`placement_name(impl Into<String>)`](crate::client::fluent_builders::DescribePlacement::placement_name) / [`set_placement_name(Option<String>)`](crate::client::fluent_builders::DescribePlacement::set_placement_name): <p>The name of the placement within a project.</p>
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DescribePlacement::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DescribePlacement::set_project_name): <p>The project containing the placement to be described.</p>
    /// - On success, responds with [`DescribePlacementOutput`](crate::output::DescribePlacementOutput) with field(s):
    ///   - [`placement(Option<PlacementDescription>)`](crate::output::DescribePlacementOutput::placement): <p>An object describing the placement.</p>
    /// - On failure, responds with [`SdkError<DescribePlacementError>`](crate::error::DescribePlacementError)
    pub fn describe_placement(&self) -> crate::client::fluent_builders::DescribePlacement {
        crate::client::fluent_builders::DescribePlacement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeProject`](crate::client::fluent_builders::DescribeProject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DescribeProject::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DescribeProject::set_project_name): <p>The name of the project to be described.</p>
    /// - On success, responds with [`DescribeProjectOutput`](crate::output::DescribeProjectOutput) with field(s):
    ///   - [`project(Option<ProjectDescription>)`](crate::output::DescribeProjectOutput::project): <p>An object describing the project.</p>
    /// - On failure, responds with [`SdkError<DescribeProjectError>`](crate::error::DescribeProjectError)
    pub fn describe_project(&self) -> crate::client::fluent_builders::DescribeProject {
        crate::client::fluent_builders::DescribeProject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateDeviceFromPlacement`](crate::client::fluent_builders::DisassociateDeviceFromPlacement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DisassociateDeviceFromPlacement::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DisassociateDeviceFromPlacement::set_project_name): <p>The name of the project that contains the placement.</p>
    ///   - [`placement_name(impl Into<String>)`](crate::client::fluent_builders::DisassociateDeviceFromPlacement::placement_name) / [`set_placement_name(Option<String>)`](crate::client::fluent_builders::DisassociateDeviceFromPlacement::set_placement_name): <p>The name of the placement that the device should be removed from.</p>
    ///   - [`device_template_name(impl Into<String>)`](crate::client::fluent_builders::DisassociateDeviceFromPlacement::device_template_name) / [`set_device_template_name(Option<String>)`](crate::client::fluent_builders::DisassociateDeviceFromPlacement::set_device_template_name): <p>The device ID that should be removed from the placement.</p>
    /// - On success, responds with [`DisassociateDeviceFromPlacementOutput`](crate::output::DisassociateDeviceFromPlacementOutput)

    /// - On failure, responds with [`SdkError<DisassociateDeviceFromPlacementError>`](crate::error::DisassociateDeviceFromPlacementError)
    pub fn disassociate_device_from_placement(
        &self,
    ) -> crate::client::fluent_builders::DisassociateDeviceFromPlacement {
        crate::client::fluent_builders::DisassociateDeviceFromPlacement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDevicesInPlacement`](crate::client::fluent_builders::GetDevicesInPlacement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::GetDevicesInPlacement::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::GetDevicesInPlacement::set_project_name): <p>The name of the project containing the placement.</p>
    ///   - [`placement_name(impl Into<String>)`](crate::client::fluent_builders::GetDevicesInPlacement::placement_name) / [`set_placement_name(Option<String>)`](crate::client::fluent_builders::GetDevicesInPlacement::set_placement_name): <p>The name of the placement to get the devices from.</p>
    /// - On success, responds with [`GetDevicesInPlacementOutput`](crate::output::GetDevicesInPlacementOutput) with field(s):
    ///   - [`devices(Option<HashMap<String, String>>)`](crate::output::GetDevicesInPlacementOutput::devices): <p>An object containing the devices (zero or more) within the placement.</p>
    /// - On failure, responds with [`SdkError<GetDevicesInPlacementError>`](crate::error::GetDevicesInPlacementError)
    pub fn get_devices_in_placement(
        &self,
    ) -> crate::client::fluent_builders::GetDevicesInPlacement {
        crate::client::fluent_builders::GetDevicesInPlacement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPlacements`](crate::client::fluent_builders::ListPlacements) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPlacements::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::ListPlacements::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::ListPlacements::set_project_name): <p>The project containing the placements to be listed.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPlacements::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPlacements::set_next_token): <p>The token to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPlacements::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPlacements::set_max_results): <p>The maximum number of results to return per request. If not set, a default value of 100 is used.</p>
    /// - On success, responds with [`ListPlacementsOutput`](crate::output::ListPlacementsOutput) with field(s):
    ///   - [`placements(Option<Vec<PlacementSummary>>)`](crate::output::ListPlacementsOutput::placements): <p>An object listing the requested placements.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPlacementsOutput::next_token): <p>The token used to retrieve the next set of results - will be effectively empty if there are no further results.</p>
    /// - On failure, responds with [`SdkError<ListPlacementsError>`](crate::error::ListPlacementsError)
    pub fn list_placements(&self) -> crate::client::fluent_builders::ListPlacements {
        crate::client::fluent_builders::ListPlacements::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListProjects`](crate::client::fluent_builders::ListProjects) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListProjects::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListProjects::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListProjects::set_next_token): <p>The token to retrieve the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListProjects::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListProjects::set_max_results): <p>The maximum number of results to return per request. If not set, a default value of 100 is used.</p>
    /// - On success, responds with [`ListProjectsOutput`](crate::output::ListProjectsOutput) with field(s):
    ///   - [`projects(Option<Vec<ProjectSummary>>)`](crate::output::ListProjectsOutput::projects): <p>An object containing the list of projects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListProjectsOutput::next_token): <p>The token used to retrieve the next set of results - will be effectively empty if there are no further results.</p>
    /// - On failure, responds with [`SdkError<ListProjectsError>`](crate::error::ListProjectsError)
    pub fn list_projects(&self) -> crate::client::fluent_builders::ListProjects {
        crate::client::fluent_builders::ListProjects::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN of the resource whose tags you want to list.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The tags (metadata key/value pairs) which you have assigned to the resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of the resouce for which tag(s) should be added or modified.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The new or modifying tag(s) for the resource. See <a href="https://docs.aws.amazon.com/iot-1-click/latest/developerguide/1click-appendix.html#1click-limits">AWS IoT 1-Click Service Limits</a> for the maximum number of tags allowed per resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the resource whose tag you want to remove.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The keys of those tags which you want to remove.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdatePlacement`](crate::client::fluent_builders::UpdatePlacement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`placement_name(impl Into<String>)`](crate::client::fluent_builders::UpdatePlacement::placement_name) / [`set_placement_name(Option<String>)`](crate::client::fluent_builders::UpdatePlacement::set_placement_name): <p>The name of the placement to update.</p>
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::UpdatePlacement::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::UpdatePlacement::set_project_name): <p>The name of the project containing the placement to be updated.</p>
    ///   - [`attributes(HashMap<String, String>)`](crate::client::fluent_builders::UpdatePlacement::attributes) / [`set_attributes(Option<HashMap<String, String>>)`](crate::client::fluent_builders::UpdatePlacement::set_attributes): <p>The user-defined object of attributes used to update the placement. The maximum number of key/value pairs is 50.</p>
    /// - On success, responds with [`UpdatePlacementOutput`](crate::output::UpdatePlacementOutput)

    /// - On failure, responds with [`SdkError<UpdatePlacementError>`](crate::error::UpdatePlacementError)
    pub fn update_placement(&self) -> crate::client::fluent_builders::UpdatePlacement {
        crate::client::fluent_builders::UpdatePlacement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateProject`](crate::client::fluent_builders::UpdateProject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::UpdateProject::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::UpdateProject::set_project_name): <p>The name of the project to be updated.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateProject::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateProject::set_description): <p>An optional user-defined description for the project.</p>
    ///   - [`placement_template(PlacementTemplate)`](crate::client::fluent_builders::UpdateProject::placement_template) / [`set_placement_template(Option<PlacementTemplate>)`](crate::client::fluent_builders::UpdateProject::set_placement_template): <p>An object defining the project update. Once a project has been created, you cannot add device template names to the project. However, for a given <code>placementTemplate</code>, you can update the associated <code>callbackOverrides</code> for the device definition using this API.</p>
    /// - On success, responds with [`UpdateProjectOutput`](crate::output::UpdateProjectOutput)

    /// - On failure, responds with [`SdkError<UpdateProjectError>`](crate::error::UpdateProjectError)
    pub fn update_project(&self) -> crate::client::fluent_builders::UpdateProject {
        crate::client::fluent_builders::UpdateProject::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
