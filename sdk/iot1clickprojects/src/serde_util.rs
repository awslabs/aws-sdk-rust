// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn internal_failure_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalFailureExceptionBuilder,
) -> crate::types::error::builders::InternalFailureExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_request_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidRequestExceptionBuilder,
) -> crate::types::error::builders::InvalidRequestExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceConflictExceptionBuilder,
) -> crate::types::error::builders::ResourceConflictExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn too_many_requests_exception_correct_errors(
    mut builder: crate::types::error::builders::TooManyRequestsExceptionBuilder,
) -> crate::types::error::builders::TooManyRequestsExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_placement_output_correct_errors(
    mut builder: crate::operation::describe_placement::builders::DescribePlacementOutputBuilder,
) -> crate::operation::describe_placement::builders::DescribePlacementOutputBuilder {
    if builder.placement.is_none() {
        builder.placement = {
            let builder = crate::types::builders::PlacementDescriptionBuilder::default();
            crate::serde_util::placement_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_project_output_correct_errors(
    mut builder: crate::operation::describe_project::builders::DescribeProjectOutputBuilder,
) -> crate::operation::describe_project::builders::DescribeProjectOutputBuilder {
    if builder.project.is_none() {
        builder.project = {
            let builder = crate::types::builders::ProjectDescriptionBuilder::default();
            crate::serde_util::project_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_devices_in_placement_output_correct_errors(
    mut builder: crate::operation::get_devices_in_placement::builders::GetDevicesInPlacementOutputBuilder,
) -> crate::operation::get_devices_in_placement::builders::GetDevicesInPlacementOutputBuilder {
    if builder.devices.is_none() {
        builder.devices = Some(Default::default())
    }
    builder
}

pub(crate) fn list_placements_output_correct_errors(
    mut builder: crate::operation::list_placements::builders::ListPlacementsOutputBuilder,
) -> crate::operation::list_placements::builders::ListPlacementsOutputBuilder {
    if builder.placements.is_none() {
        builder.placements = Some(Default::default())
    }
    builder
}

pub(crate) fn list_projects_output_correct_errors(
    mut builder: crate::operation::list_projects::builders::ListProjectsOutputBuilder,
) -> crate::operation::list_projects::builders::ListProjectsOutputBuilder {
    if builder.projects.is_none() {
        builder.projects = Some(Default::default())
    }
    builder
}

pub(crate) fn placement_description_correct_errors(
    mut builder: crate::types::builders::PlacementDescriptionBuilder,
) -> crate::types::builders::PlacementDescriptionBuilder {
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.placement_name.is_none() {
        builder.placement_name = Some(Default::default())
    }
    if builder.attributes.is_none() {
        builder.attributes = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_date.is_none() {
        builder.updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn project_description_correct_errors(
    mut builder: crate::types::builders::ProjectDescriptionBuilder,
) -> crate::types::builders::ProjectDescriptionBuilder {
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_date.is_none() {
        builder.updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn placement_summary_correct_errors(
    mut builder: crate::types::builders::PlacementSummaryBuilder,
) -> crate::types::builders::PlacementSummaryBuilder {
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.placement_name.is_none() {
        builder.placement_name = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_date.is_none() {
        builder.updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn project_summary_correct_errors(
    mut builder: crate::types::builders::ProjectSummaryBuilder,
) -> crate::types::builders::ProjectSummaryBuilder {
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_date.is_none() {
        builder.updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}
