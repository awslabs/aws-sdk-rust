// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_model_create_application_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateApplicationRequest,
) {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1);
    }
    if let Some(var_2) = &input.tags {
        let mut object_3 = object.key("tags").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4).string(value_5);
            }
        }
        object_3.finish();
    }
}

pub fn serialize_structure_crate_model_write_campaign_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WriteCampaignRequest,
) {
    if let Some(var_6) = &input.additional_treatments {
        let mut array_7 = object.key("AdditionalTreatments").start_array();
        for item_8 in var_6 {
            {
                let mut object_9 = array_7.value().start_object();
                crate::json_ser::serialize_structure_crate_model_write_treatment_resource(
                    &mut object_9,
                    item_8,
                );
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.custom_delivery_configuration {
        let mut object_11 = object.key("CustomDeliveryConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_delivery_configuration(
            &mut object_11,
            var_10,
        );
        object_11.finish();
    }
    if let Some(var_12) = &input.description {
        object.key("Description").string(var_12);
    }
    if input.holdout_percent != 0 {
        object.key("HoldoutPercent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.holdout_percent).into()),
        );
    }
    if let Some(var_13) = &input.hook {
        let mut object_14 = object.key("Hook").start_object();
        crate::json_ser::serialize_structure_crate_model_campaign_hook(&mut object_14, var_13);
        object_14.finish();
    }
    if input.is_paused {
        object.key("IsPaused").boolean(input.is_paused);
    }
    if let Some(var_15) = &input.limits {
        let mut object_16 = object.key("Limits").start_object();
        crate::json_ser::serialize_structure_crate_model_campaign_limits(&mut object_16, var_15);
        object_16.finish();
    }
    if let Some(var_17) = &input.message_configuration {
        let mut object_18 = object.key("MessageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_message_configuration(
            &mut object_18,
            var_17,
        );
        object_18.finish();
    }
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19);
    }
    if let Some(var_20) = &input.schedule {
        let mut object_21 = object.key("Schedule").start_object();
        crate::json_ser::serialize_structure_crate_model_schedule(&mut object_21, var_20);
        object_21.finish();
    }
    if let Some(var_22) = &input.segment_id {
        object.key("SegmentId").string(var_22);
    }
    if input.segment_version != 0 {
        object.key("SegmentVersion").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.segment_version).into()),
        );
    }
    if let Some(var_23) = &input.tags {
        let mut object_24 = object.key("tags").start_object();
        for (key_25, value_26) in var_23 {
            {
                object_24.key(key_25).string(value_26);
            }
        }
        object_24.finish();
    }
    if let Some(var_27) = &input.template_configuration {
        let mut object_28 = object.key("TemplateConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_template_configuration(
            &mut object_28,
            var_27,
        );
        object_28.finish();
    }
    if let Some(var_29) = &input.treatment_description {
        object.key("TreatmentDescription").string(var_29);
    }
    if let Some(var_30) = &input.treatment_name {
        object.key("TreatmentName").string(var_30);
    }
}

pub fn serialize_structure_crate_model_email_template_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EmailTemplateRequest,
) {
    if let Some(var_31) = &input.default_substitutions {
        object.key("DefaultSubstitutions").string(var_31);
    }
    if let Some(var_32) = &input.html_part {
        object.key("HtmlPart").string(var_32);
    }
    if let Some(var_33) = &input.recommender_id {
        object.key("RecommenderId").string(var_33);
    }
    if let Some(var_34) = &input.subject {
        object.key("Subject").string(var_34);
    }
    if let Some(var_35) = &input.tags {
        let mut object_36 = object.key("tags").start_object();
        for (key_37, value_38) in var_35 {
            {
                object_36.key(key_37).string(value_38);
            }
        }
        object_36.finish();
    }
    if let Some(var_39) = &input.template_description {
        object.key("TemplateDescription").string(var_39);
    }
    if let Some(var_40) = &input.text_part {
        object.key("TextPart").string(var_40);
    }
}

pub fn serialize_structure_crate_model_export_job_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportJobRequest,
) {
    if let Some(var_41) = &input.role_arn {
        object.key("RoleArn").string(var_41);
    }
    if let Some(var_42) = &input.s3_url_prefix {
        object.key("S3UrlPrefix").string(var_42);
    }
    if let Some(var_43) = &input.segment_id {
        object.key("SegmentId").string(var_43);
    }
    if input.segment_version != 0 {
        object.key("SegmentVersion").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.segment_version).into()),
        );
    }
}

pub fn serialize_structure_crate_model_import_job_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportJobRequest,
) {
    if input.define_segment {
        object.key("DefineSegment").boolean(input.define_segment);
    }
    if let Some(var_44) = &input.external_id {
        object.key("ExternalId").string(var_44);
    }
    if let Some(var_45) = &input.format {
        object.key("Format").string(var_45.as_str());
    }
    if input.register_endpoints {
        object
            .key("RegisterEndpoints")
            .boolean(input.register_endpoints);
    }
    if let Some(var_46) = &input.role_arn {
        object.key("RoleArn").string(var_46);
    }
    if let Some(var_47) = &input.s3_url {
        object.key("S3Url").string(var_47);
    }
    if let Some(var_48) = &input.segment_id {
        object.key("SegmentId").string(var_48);
    }
    if let Some(var_49) = &input.segment_name {
        object.key("SegmentName").string(var_49);
    }
}

pub fn serialize_structure_crate_model_write_journey_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WriteJourneyRequest,
) {
    if let Some(var_50) = &input.activities {
        let mut object_51 = object.key("Activities").start_object();
        for (key_52, value_53) in var_50 {
            {
                let mut object_54 = object_51.key(key_52).start_object();
                crate::json_ser::serialize_structure_crate_model_activity(&mut object_54, value_53);
                object_54.finish();
            }
        }
        object_51.finish();
    }
    if let Some(var_55) = &input.creation_date {
        object.key("CreationDate").string(var_55);
    }
    if let Some(var_56) = &input.last_modified_date {
        object.key("LastModifiedDate").string(var_56);
    }
    if let Some(var_57) = &input.limits {
        let mut object_58 = object.key("Limits").start_object();
        crate::json_ser::serialize_structure_crate_model_journey_limits(&mut object_58, var_57);
        object_58.finish();
    }
    if input.local_time {
        object.key("LocalTime").boolean(input.local_time);
    }
    if let Some(var_59) = &input.name {
        object.key("Name").string(var_59);
    }
    if let Some(var_60) = &input.quiet_time {
        let mut object_61 = object.key("QuietTime").start_object();
        crate::json_ser::serialize_structure_crate_model_quiet_time(&mut object_61, var_60);
        object_61.finish();
    }
    if let Some(var_62) = &input.refresh_frequency {
        object.key("RefreshFrequency").string(var_62);
    }
    if let Some(var_63) = &input.schedule {
        let mut object_64 = object.key("Schedule").start_object();
        crate::json_ser::serialize_structure_crate_model_journey_schedule(&mut object_64, var_63);
        object_64.finish();
    }
    if let Some(var_65) = &input.start_activity {
        object.key("StartActivity").string(var_65);
    }
    if let Some(var_66) = &input.start_condition {
        let mut object_67 = object.key("StartCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_start_condition(&mut object_67, var_66);
        object_67.finish();
    }
    if let Some(var_68) = &input.state {
        object.key("State").string(var_68.as_str());
    }
    if input.wait_for_quiet_time {
        object
            .key("WaitForQuietTime")
            .boolean(input.wait_for_quiet_time);
    }
    if input.refresh_on_segment_update {
        object
            .key("RefreshOnSegmentUpdate")
            .boolean(input.refresh_on_segment_update);
    }
}

pub fn serialize_structure_crate_model_push_notification_template_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PushNotificationTemplateRequest,
) {
    if let Some(var_69) = &input.adm {
        let mut object_70 = object.key("ADM").start_object();
        crate::json_ser::serialize_structure_crate_model_android_push_notification_template(
            &mut object_70,
            var_69,
        );
        object_70.finish();
    }
    if let Some(var_71) = &input.apns {
        let mut object_72 = object.key("APNS").start_object();
        crate::json_ser::serialize_structure_crate_model_apns_push_notification_template(
            &mut object_72,
            var_71,
        );
        object_72.finish();
    }
    if let Some(var_73) = &input.baidu {
        let mut object_74 = object.key("Baidu").start_object();
        crate::json_ser::serialize_structure_crate_model_android_push_notification_template(
            &mut object_74,
            var_73,
        );
        object_74.finish();
    }
    if let Some(var_75) = &input.default_value {
        let mut object_76 = object.key("Default").start_object();
        crate::json_ser::serialize_structure_crate_model_default_push_notification_template(
            &mut object_76,
            var_75,
        );
        object_76.finish();
    }
    if let Some(var_77) = &input.default_substitutions {
        object.key("DefaultSubstitutions").string(var_77);
    }
    if let Some(var_78) = &input.gcm {
        let mut object_79 = object.key("GCM").start_object();
        crate::json_ser::serialize_structure_crate_model_android_push_notification_template(
            &mut object_79,
            var_78,
        );
        object_79.finish();
    }
    if let Some(var_80) = &input.recommender_id {
        object.key("RecommenderId").string(var_80);
    }
    if let Some(var_81) = &input.tags {
        let mut object_82 = object.key("tags").start_object();
        for (key_83, value_84) in var_81 {
            {
                object_82.key(key_83).string(value_84);
            }
        }
        object_82.finish();
    }
    if let Some(var_85) = &input.template_description {
        object.key("TemplateDescription").string(var_85);
    }
}

pub fn serialize_structure_crate_model_create_recommender_configuration_shape(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateRecommenderConfigurationShape,
) {
    if let Some(var_86) = &input.attributes {
        let mut object_87 = object.key("Attributes").start_object();
        for (key_88, value_89) in var_86 {
            {
                object_87.key(key_88).string(value_89);
            }
        }
        object_87.finish();
    }
    if let Some(var_90) = &input.description {
        object.key("Description").string(var_90);
    }
    if let Some(var_91) = &input.name {
        object.key("Name").string(var_91);
    }
    if let Some(var_92) = &input.recommendation_provider_id_type {
        object.key("RecommendationProviderIdType").string(var_92);
    }
    if let Some(var_93) = &input.recommendation_provider_role_arn {
        object.key("RecommendationProviderRoleArn").string(var_93);
    }
    if let Some(var_94) = &input.recommendation_provider_uri {
        object.key("RecommendationProviderUri").string(var_94);
    }
    if let Some(var_95) = &input.recommendation_transformer_uri {
        object.key("RecommendationTransformerUri").string(var_95);
    }
    if let Some(var_96) = &input.recommendations_display_name {
        object.key("RecommendationsDisplayName").string(var_96);
    }
    if input.recommendations_per_message != 0 {
        object.key("RecommendationsPerMessage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.recommendations_per_message).into()),
        );
    }
}

pub fn serialize_structure_crate_model_write_segment_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WriteSegmentRequest,
) {
    if let Some(var_97) = &input.dimensions {
        let mut object_98 = object.key("Dimensions").start_object();
        crate::json_ser::serialize_structure_crate_model_segment_dimensions(&mut object_98, var_97);
        object_98.finish();
    }
    if let Some(var_99) = &input.name {
        object.key("Name").string(var_99);
    }
    if let Some(var_100) = &input.segment_groups {
        let mut object_101 = object.key("SegmentGroups").start_object();
        crate::json_ser::serialize_structure_crate_model_segment_group_list(
            &mut object_101,
            var_100,
        );
        object_101.finish();
    }
    if let Some(var_102) = &input.tags {
        let mut object_103 = object.key("tags").start_object();
        for (key_104, value_105) in var_102 {
            {
                object_103.key(key_104).string(value_105);
            }
        }
        object_103.finish();
    }
}

pub fn serialize_structure_crate_model_sms_template_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SmsTemplateRequest,
) {
    if let Some(var_106) = &input.body {
        object.key("Body").string(var_106);
    }
    if let Some(var_107) = &input.default_substitutions {
        object.key("DefaultSubstitutions").string(var_107);
    }
    if let Some(var_108) = &input.recommender_id {
        object.key("RecommenderId").string(var_108);
    }
    if let Some(var_109) = &input.tags {
        let mut object_110 = object.key("tags").start_object();
        for (key_111, value_112) in var_109 {
            {
                object_110.key(key_111).string(value_112);
            }
        }
        object_110.finish();
    }
    if let Some(var_113) = &input.template_description {
        object.key("TemplateDescription").string(var_113);
    }
}

pub fn serialize_structure_crate_model_voice_template_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceTemplateRequest,
) {
    if let Some(var_114) = &input.body {
        object.key("Body").string(var_114);
    }
    if let Some(var_115) = &input.default_substitutions {
        object.key("DefaultSubstitutions").string(var_115);
    }
    if let Some(var_116) = &input.language_code {
        object.key("LanguageCode").string(var_116);
    }
    if let Some(var_117) = &input.tags {
        let mut object_118 = object.key("tags").start_object();
        for (key_119, value_120) in var_117 {
            {
                object_118.key(key_119).string(value_120);
            }
        }
        object_118.finish();
    }
    if let Some(var_121) = &input.template_description {
        object.key("TemplateDescription").string(var_121);
    }
    if let Some(var_122) = &input.voice_id {
        object.key("VoiceId").string(var_122);
    }
}

pub fn serialize_structure_crate_model_number_validate_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NumberValidateRequest,
) {
    if let Some(var_123) = &input.iso_country_code {
        object.key("IsoCountryCode").string(var_123);
    }
    if let Some(var_124) = &input.phone_number {
        object.key("PhoneNumber").string(var_124);
    }
}

pub fn serialize_structure_crate_model_events_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventsRequest,
) {
    if let Some(var_125) = &input.batch_item {
        let mut object_126 = object.key("BatchItem").start_object();
        for (key_127, value_128) in var_125 {
            {
                let mut object_129 = object_126.key(key_127).start_object();
                crate::json_ser::serialize_structure_crate_model_events_batch(
                    &mut object_129,
                    value_128,
                );
                object_129.finish();
            }
        }
        object_126.finish();
    }
}

pub fn serialize_structure_crate_model_write_event_stream(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WriteEventStream,
) {
    if let Some(var_130) = &input.destination_stream_arn {
        object.key("DestinationStreamArn").string(var_130);
    }
    if let Some(var_131) = &input.role_arn {
        object.key("RoleArn").string(var_131);
    }
}

pub fn serialize_structure_crate_model_update_attributes_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateAttributesRequest,
) {
    if let Some(var_132) = &input.blacklist {
        let mut array_133 = object.key("Blacklist").start_array();
        for item_134 in var_132 {
            {
                array_133.value().string(item_134);
            }
        }
        array_133.finish();
    }
}

pub fn serialize_structure_crate_model_message_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MessageRequest,
) {
    if let Some(var_135) = &input.addresses {
        let mut object_136 = object.key("Addresses").start_object();
        for (key_137, value_138) in var_135 {
            {
                let mut object_139 = object_136.key(key_137).start_object();
                crate::json_ser::serialize_structure_crate_model_address_configuration(
                    &mut object_139,
                    value_138,
                );
                object_139.finish();
            }
        }
        object_136.finish();
    }
    if let Some(var_140) = &input.context {
        let mut object_141 = object.key("Context").start_object();
        for (key_142, value_143) in var_140 {
            {
                object_141.key(key_142).string(value_143);
            }
        }
        object_141.finish();
    }
    if let Some(var_144) = &input.endpoints {
        let mut object_145 = object.key("Endpoints").start_object();
        for (key_146, value_147) in var_144 {
            {
                let mut object_148 = object_145.key(key_146).start_object();
                crate::json_ser::serialize_structure_crate_model_endpoint_send_configuration(
                    &mut object_148,
                    value_147,
                );
                object_148.finish();
            }
        }
        object_145.finish();
    }
    if let Some(var_149) = &input.message_configuration {
        let mut object_150 = object.key("MessageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_message_configuration(
            &mut object_150,
            var_149,
        );
        object_150.finish();
    }
    if let Some(var_151) = &input.template_configuration {
        let mut object_152 = object.key("TemplateConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_template_configuration(
            &mut object_152,
            var_151,
        );
        object_152.finish();
    }
    if let Some(var_153) = &input.trace_id {
        object.key("TraceId").string(var_153);
    }
}

pub fn serialize_structure_crate_model_send_users_message_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SendUsersMessageRequest,
) {
    if let Some(var_154) = &input.context {
        let mut object_155 = object.key("Context").start_object();
        for (key_156, value_157) in var_154 {
            {
                object_155.key(key_156).string(value_157);
            }
        }
        object_155.finish();
    }
    if let Some(var_158) = &input.message_configuration {
        let mut object_159 = object.key("MessageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_message_configuration(
            &mut object_159,
            var_158,
        );
        object_159.finish();
    }
    if let Some(var_160) = &input.template_configuration {
        let mut object_161 = object.key("TemplateConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_template_configuration(
            &mut object_161,
            var_160,
        );
        object_161.finish();
    }
    if let Some(var_162) = &input.trace_id {
        object.key("TraceId").string(var_162);
    }
    if let Some(var_163) = &input.users {
        let mut object_164 = object.key("Users").start_object();
        for (key_165, value_166) in var_163 {
            {
                let mut object_167 = object_164.key(key_165).start_object();
                crate::json_ser::serialize_structure_crate_model_endpoint_send_configuration(
                    &mut object_167,
                    value_166,
                );
                object_167.finish();
            }
        }
        object_164.finish();
    }
}

pub fn serialize_structure_crate_model_tags_model(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagsModel,
) {
    if let Some(var_168) = &input.tags {
        let mut object_169 = object.key("tags").start_object();
        for (key_170, value_171) in var_168 {
            {
                object_169.key(key_170).string(value_171);
            }
        }
        object_169.finish();
    }
}

pub fn serialize_structure_crate_model_adm_channel_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdmChannelRequest,
) {
    if let Some(var_172) = &input.client_id {
        object.key("ClientId").string(var_172);
    }
    if let Some(var_173) = &input.client_secret {
        object.key("ClientSecret").string(var_173);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_crate_model_apns_channel_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApnsChannelRequest,
) {
    if let Some(var_174) = &input.bundle_id {
        object.key("BundleId").string(var_174);
    }
    if let Some(var_175) = &input.certificate {
        object.key("Certificate").string(var_175);
    }
    if let Some(var_176) = &input.default_authentication_method {
        object.key("DefaultAuthenticationMethod").string(var_176);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_177) = &input.private_key {
        object.key("PrivateKey").string(var_177);
    }
    if let Some(var_178) = &input.team_id {
        object.key("TeamId").string(var_178);
    }
    if let Some(var_179) = &input.token_key {
        object.key("TokenKey").string(var_179);
    }
    if let Some(var_180) = &input.token_key_id {
        object.key("TokenKeyId").string(var_180);
    }
}

pub fn serialize_structure_crate_model_apns_sandbox_channel_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApnsSandboxChannelRequest,
) {
    if let Some(var_181) = &input.bundle_id {
        object.key("BundleId").string(var_181);
    }
    if let Some(var_182) = &input.certificate {
        object.key("Certificate").string(var_182);
    }
    if let Some(var_183) = &input.default_authentication_method {
        object.key("DefaultAuthenticationMethod").string(var_183);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_184) = &input.private_key {
        object.key("PrivateKey").string(var_184);
    }
    if let Some(var_185) = &input.team_id {
        object.key("TeamId").string(var_185);
    }
    if let Some(var_186) = &input.token_key {
        object.key("TokenKey").string(var_186);
    }
    if let Some(var_187) = &input.token_key_id {
        object.key("TokenKeyId").string(var_187);
    }
}

pub fn serialize_structure_crate_model_apns_voip_channel_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApnsVoipChannelRequest,
) {
    if let Some(var_188) = &input.bundle_id {
        object.key("BundleId").string(var_188);
    }
    if let Some(var_189) = &input.certificate {
        object.key("Certificate").string(var_189);
    }
    if let Some(var_190) = &input.default_authentication_method {
        object.key("DefaultAuthenticationMethod").string(var_190);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_191) = &input.private_key {
        object.key("PrivateKey").string(var_191);
    }
    if let Some(var_192) = &input.team_id {
        object.key("TeamId").string(var_192);
    }
    if let Some(var_193) = &input.token_key {
        object.key("TokenKey").string(var_193);
    }
    if let Some(var_194) = &input.token_key_id {
        object.key("TokenKeyId").string(var_194);
    }
}

pub fn serialize_structure_crate_model_apns_voip_sandbox_channel_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApnsVoipSandboxChannelRequest,
) {
    if let Some(var_195) = &input.bundle_id {
        object.key("BundleId").string(var_195);
    }
    if let Some(var_196) = &input.certificate {
        object.key("Certificate").string(var_196);
    }
    if let Some(var_197) = &input.default_authentication_method {
        object.key("DefaultAuthenticationMethod").string(var_197);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_198) = &input.private_key {
        object.key("PrivateKey").string(var_198);
    }
    if let Some(var_199) = &input.team_id {
        object.key("TeamId").string(var_199);
    }
    if let Some(var_200) = &input.token_key {
        object.key("TokenKey").string(var_200);
    }
    if let Some(var_201) = &input.token_key_id {
        object.key("TokenKeyId").string(var_201);
    }
}

pub fn serialize_structure_crate_model_write_application_settings_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WriteApplicationSettingsRequest,
) {
    if let Some(var_202) = &input.campaign_hook {
        let mut object_203 = object.key("CampaignHook").start_object();
        crate::json_ser::serialize_structure_crate_model_campaign_hook(&mut object_203, var_202);
        object_203.finish();
    }
    if input.cloud_watch_metrics_enabled {
        object
            .key("CloudWatchMetricsEnabled")
            .boolean(input.cloud_watch_metrics_enabled);
    }
    if input.event_tagging_enabled {
        object
            .key("EventTaggingEnabled")
            .boolean(input.event_tagging_enabled);
    }
    if let Some(var_204) = &input.limits {
        let mut object_205 = object.key("Limits").start_object();
        crate::json_ser::serialize_structure_crate_model_campaign_limits(&mut object_205, var_204);
        object_205.finish();
    }
    if let Some(var_206) = &input.quiet_time {
        let mut object_207 = object.key("QuietTime").start_object();
        crate::json_ser::serialize_structure_crate_model_quiet_time(&mut object_207, var_206);
        object_207.finish();
    }
}

pub fn serialize_structure_crate_model_baidu_channel_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BaiduChannelRequest,
) {
    if let Some(var_208) = &input.api_key {
        object.key("ApiKey").string(var_208);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_209) = &input.secret_key {
        object.key("SecretKey").string(var_209);
    }
}

pub fn serialize_structure_crate_model_email_channel_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EmailChannelRequest,
) {
    if let Some(var_210) = &input.configuration_set {
        object.key("ConfigurationSet").string(var_210);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_211) = &input.from_address {
        object.key("FromAddress").string(var_211);
    }
    if let Some(var_212) = &input.identity {
        object.key("Identity").string(var_212);
    }
    if let Some(var_213) = &input.role_arn {
        object.key("RoleArn").string(var_213);
    }
}

pub fn serialize_structure_crate_model_endpoint_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointRequest,
) {
    if let Some(var_214) = &input.address {
        object.key("Address").string(var_214);
    }
    if let Some(var_215) = &input.attributes {
        let mut object_216 = object.key("Attributes").start_object();
        for (key_217, value_218) in var_215 {
            {
                let mut array_219 = object_216.key(key_217).start_array();
                for item_220 in value_218 {
                    {
                        array_219.value().string(item_220);
                    }
                }
                array_219.finish();
            }
        }
        object_216.finish();
    }
    if let Some(var_221) = &input.channel_type {
        object.key("ChannelType").string(var_221.as_str());
    }
    if let Some(var_222) = &input.demographic {
        let mut object_223 = object.key("Demographic").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_demographic(
            &mut object_223,
            var_222,
        );
        object_223.finish();
    }
    if let Some(var_224) = &input.effective_date {
        object.key("EffectiveDate").string(var_224);
    }
    if let Some(var_225) = &input.endpoint_status {
        object.key("EndpointStatus").string(var_225);
    }
    if let Some(var_226) = &input.location {
        let mut object_227 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_location(
            &mut object_227,
            var_226,
        );
        object_227.finish();
    }
    if let Some(var_228) = &input.metrics {
        let mut object_229 = object.key("Metrics").start_object();
        for (key_230, value_231) in var_228 {
            {
                object_229.key(key_230).number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::Float((*value_231).into()),
                );
            }
        }
        object_229.finish();
    }
    if let Some(var_232) = &input.opt_out {
        object.key("OptOut").string(var_232);
    }
    if let Some(var_233) = &input.request_id {
        object.key("RequestId").string(var_233);
    }
    if let Some(var_234) = &input.user {
        let mut object_235 = object.key("User").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_user(&mut object_235, var_234);
        object_235.finish();
    }
}

pub fn serialize_structure_crate_model_endpoint_batch_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointBatchRequest,
) {
    if let Some(var_236) = &input.item {
        let mut array_237 = object.key("Item").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_crate_model_endpoint_batch_item(
                    &mut object_239,
                    item_238,
                );
                object_239.finish();
            }
        }
        array_237.finish();
    }
}

pub fn serialize_structure_crate_model_gcm_channel_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GcmChannelRequest,
) {
    if let Some(var_240) = &input.api_key {
        object.key("ApiKey").string(var_240);
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_crate_model_journey_state_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JourneyStateRequest,
) {
    if let Some(var_241) = &input.state {
        object.key("State").string(var_241.as_str());
    }
}

pub fn serialize_structure_crate_model_update_recommender_configuration_shape(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateRecommenderConfigurationShape,
) {
    if let Some(var_242) = &input.attributes {
        let mut object_243 = object.key("Attributes").start_object();
        for (key_244, value_245) in var_242 {
            {
                object_243.key(key_244).string(value_245);
            }
        }
        object_243.finish();
    }
    if let Some(var_246) = &input.description {
        object.key("Description").string(var_246);
    }
    if let Some(var_247) = &input.name {
        object.key("Name").string(var_247);
    }
    if let Some(var_248) = &input.recommendation_provider_id_type {
        object.key("RecommendationProviderIdType").string(var_248);
    }
    if let Some(var_249) = &input.recommendation_provider_role_arn {
        object.key("RecommendationProviderRoleArn").string(var_249);
    }
    if let Some(var_250) = &input.recommendation_provider_uri {
        object.key("RecommendationProviderUri").string(var_250);
    }
    if let Some(var_251) = &input.recommendation_transformer_uri {
        object.key("RecommendationTransformerUri").string(var_251);
    }
    if let Some(var_252) = &input.recommendations_display_name {
        object.key("RecommendationsDisplayName").string(var_252);
    }
    if input.recommendations_per_message != 0 {
        object.key("RecommendationsPerMessage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.recommendations_per_message).into()),
        );
    }
}

pub fn serialize_structure_crate_model_sms_channel_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SmsChannelRequest,
) {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_253) = &input.sender_id {
        object.key("SenderId").string(var_253);
    }
    if let Some(var_254) = &input.short_code {
        object.key("ShortCode").string(var_254);
    }
}

pub fn serialize_structure_crate_model_template_active_version_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateActiveVersionRequest,
) {
    if let Some(var_255) = &input.version {
        object.key("Version").string(var_255);
    }
}

pub fn serialize_structure_crate_model_voice_channel_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceChannelRequest,
) {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
}

pub fn serialize_structure_crate_model_write_treatment_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WriteTreatmentResource,
) {
    if let Some(var_256) = &input.custom_delivery_configuration {
        let mut object_257 = object.key("CustomDeliveryConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_delivery_configuration(
            &mut object_257,
            var_256,
        );
        object_257.finish();
    }
    if let Some(var_258) = &input.message_configuration {
        let mut object_259 = object.key("MessageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_message_configuration(
            &mut object_259,
            var_258,
        );
        object_259.finish();
    }
    if let Some(var_260) = &input.schedule {
        let mut object_261 = object.key("Schedule").start_object();
        crate::json_ser::serialize_structure_crate_model_schedule(&mut object_261, var_260);
        object_261.finish();
    }
    {
        object.key("SizePercent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.size_percent).into()),
        );
    }
    if let Some(var_262) = &input.template_configuration {
        let mut object_263 = object.key("TemplateConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_template_configuration(
            &mut object_263,
            var_262,
        );
        object_263.finish();
    }
    if let Some(var_264) = &input.treatment_description {
        object.key("TreatmentDescription").string(var_264);
    }
    if let Some(var_265) = &input.treatment_name {
        object.key("TreatmentName").string(var_265);
    }
}

pub fn serialize_structure_crate_model_custom_delivery_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDeliveryConfiguration,
) {
    if let Some(var_266) = &input.delivery_uri {
        object.key("DeliveryUri").string(var_266);
    }
    if let Some(var_267) = &input.endpoint_types {
        let mut array_268 = object.key("EndpointTypes").start_array();
        for item_269 in var_267 {
            {
                array_268.value().string(item_269.as_str());
            }
        }
        array_268.finish();
    }
}

pub fn serialize_structure_crate_model_campaign_hook(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CampaignHook,
) {
    if let Some(var_270) = &input.lambda_function_name {
        object.key("LambdaFunctionName").string(var_270);
    }
    if let Some(var_271) = &input.mode {
        object.key("Mode").string(var_271.as_str());
    }
    if let Some(var_272) = &input.web_url {
        object.key("WebUrl").string(var_272);
    }
}

pub fn serialize_structure_crate_model_campaign_limits(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CampaignLimits,
) {
    if input.daily != 0 {
        object.key("Daily").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.daily).into()),
        );
    }
    if input.maximum_duration != 0 {
        object.key("MaximumDuration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maximum_duration).into()),
        );
    }
    if input.messages_per_second != 0 {
        object.key("MessagesPerSecond").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.messages_per_second).into()),
        );
    }
    if input.total != 0 {
        object.key("Total").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.total).into()),
        );
    }
}

pub fn serialize_structure_crate_model_message_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MessageConfiguration,
) {
    if let Some(var_273) = &input.adm_message {
        let mut object_274 = object.key("ADMMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_message(&mut object_274, var_273);
        object_274.finish();
    }
    if let Some(var_275) = &input.apns_message {
        let mut object_276 = object.key("APNSMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_message(&mut object_276, var_275);
        object_276.finish();
    }
    if let Some(var_277) = &input.baidu_message {
        let mut object_278 = object.key("BaiduMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_message(&mut object_278, var_277);
        object_278.finish();
    }
    if let Some(var_279) = &input.custom_message {
        let mut object_280 = object.key("CustomMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_campaign_custom_message(
            &mut object_280,
            var_279,
        );
        object_280.finish();
    }
    if let Some(var_281) = &input.default_message {
        let mut object_282 = object.key("DefaultMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_message(&mut object_282, var_281);
        object_282.finish();
    }
    if let Some(var_283) = &input.email_message {
        let mut object_284 = object.key("EmailMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_campaign_email_message(
            &mut object_284,
            var_283,
        );
        object_284.finish();
    }
    if let Some(var_285) = &input.gcm_message {
        let mut object_286 = object.key("GCMMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_message(&mut object_286, var_285);
        object_286.finish();
    }
    if let Some(var_287) = &input.sms_message {
        let mut object_288 = object.key("SMSMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_campaign_sms_message(
            &mut object_288,
            var_287,
        );
        object_288.finish();
    }
}

pub fn serialize_structure_crate_model_schedule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Schedule,
) {
    if let Some(var_289) = &input.end_time {
        object.key("EndTime").string(var_289);
    }
    if let Some(var_290) = &input.event_filter {
        let mut object_291 = object.key("EventFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_campaign_event_filter(
            &mut object_291,
            var_290,
        );
        object_291.finish();
    }
    if let Some(var_292) = &input.frequency {
        object.key("Frequency").string(var_292.as_str());
    }
    if input.is_local_time {
        object.key("IsLocalTime").boolean(input.is_local_time);
    }
    if let Some(var_293) = &input.quiet_time {
        let mut object_294 = object.key("QuietTime").start_object();
        crate::json_ser::serialize_structure_crate_model_quiet_time(&mut object_294, var_293);
        object_294.finish();
    }
    if let Some(var_295) = &input.start_time {
        object.key("StartTime").string(var_295);
    }
    if let Some(var_296) = &input.timezone {
        object.key("Timezone").string(var_296);
    }
}

pub fn serialize_structure_crate_model_template_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateConfiguration,
) {
    if let Some(var_297) = &input.email_template {
        let mut object_298 = object.key("EmailTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_template(&mut object_298, var_297);
        object_298.finish();
    }
    if let Some(var_299) = &input.push_template {
        let mut object_300 = object.key("PushTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_template(&mut object_300, var_299);
        object_300.finish();
    }
    if let Some(var_301) = &input.sms_template {
        let mut object_302 = object.key("SMSTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_template(&mut object_302, var_301);
        object_302.finish();
    }
    if let Some(var_303) = &input.voice_template {
        let mut object_304 = object.key("VoiceTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_template(&mut object_304, var_303);
        object_304.finish();
    }
}

pub fn serialize_structure_crate_model_activity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Activity,
) {
    if let Some(var_305) = &input.custom {
        let mut object_306 = object.key("CUSTOM").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_message_activity(
            &mut object_306,
            var_305,
        );
        object_306.finish();
    }
    if let Some(var_307) = &input.conditional_split {
        let mut object_308 = object.key("ConditionalSplit").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_split_activity(
            &mut object_308,
            var_307,
        );
        object_308.finish();
    }
    if let Some(var_309) = &input.description {
        object.key("Description").string(var_309);
    }
    if let Some(var_310) = &input.email {
        let mut object_311 = object.key("EMAIL").start_object();
        crate::json_ser::serialize_structure_crate_model_email_message_activity(
            &mut object_311,
            var_310,
        );
        object_311.finish();
    }
    if let Some(var_312) = &input.holdout {
        let mut object_313 = object.key("Holdout").start_object();
        crate::json_ser::serialize_structure_crate_model_holdout_activity(&mut object_313, var_312);
        object_313.finish();
    }
    if let Some(var_314) = &input.multi_condition {
        let mut object_315 = object.key("MultiCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_multi_conditional_split_activity(
            &mut object_315,
            var_314,
        );
        object_315.finish();
    }
    if let Some(var_316) = &input.push {
        let mut object_317 = object.key("PUSH").start_object();
        crate::json_ser::serialize_structure_crate_model_push_message_activity(
            &mut object_317,
            var_316,
        );
        object_317.finish();
    }
    if let Some(var_318) = &input.random_split {
        let mut object_319 = object.key("RandomSplit").start_object();
        crate::json_ser::serialize_structure_crate_model_random_split_activity(
            &mut object_319,
            var_318,
        );
        object_319.finish();
    }
    if let Some(var_320) = &input.sms {
        let mut object_321 = object.key("SMS").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_message_activity(
            &mut object_321,
            var_320,
        );
        object_321.finish();
    }
    if let Some(var_322) = &input.wait {
        let mut object_323 = object.key("Wait").start_object();
        crate::json_ser::serialize_structure_crate_model_wait_activity(&mut object_323, var_322);
        object_323.finish();
    }
}

pub fn serialize_structure_crate_model_journey_limits(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JourneyLimits,
) {
    if input.daily_cap != 0 {
        object.key("DailyCap").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.daily_cap).into()),
        );
    }
    if input.endpoint_reentry_cap != 0 {
        object.key("EndpointReentryCap").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.endpoint_reentry_cap).into()),
        );
    }
    if input.messages_per_second != 0 {
        object.key("MessagesPerSecond").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.messages_per_second).into()),
        );
    }
    if let Some(var_324) = &input.endpoint_reentry_interval {
        object.key("EndpointReentryInterval").string(var_324);
    }
}

pub fn serialize_structure_crate_model_quiet_time(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QuietTime,
) {
    if let Some(var_325) = &input.end {
        object.key("End").string(var_325);
    }
    if let Some(var_326) = &input.start {
        object.key("Start").string(var_326);
    }
}

pub fn serialize_structure_crate_model_journey_schedule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JourneySchedule,
) {
    if let Some(var_327) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_327, smithy_types::instant::Format::DateTime);
    }
    if let Some(var_328) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_328, smithy_types::instant::Format::DateTime);
    }
    if let Some(var_329) = &input.timezone {
        object.key("Timezone").string(var_329);
    }
}

pub fn serialize_structure_crate_model_start_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartCondition,
) {
    if let Some(var_330) = &input.description {
        object.key("Description").string(var_330);
    }
    if let Some(var_331) = &input.event_start_condition {
        let mut object_332 = object.key("EventStartCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_start_condition(
            &mut object_332,
            var_331,
        );
        object_332.finish();
    }
    if let Some(var_333) = &input.segment_start_condition {
        let mut object_334 = object.key("SegmentStartCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_segment_condition(
            &mut object_334,
            var_333,
        );
        object_334.finish();
    }
}

pub fn serialize_structure_crate_model_android_push_notification_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AndroidPushNotificationTemplate,
) {
    if let Some(var_335) = &input.action {
        object.key("Action").string(var_335.as_str());
    }
    if let Some(var_336) = &input.body {
        object.key("Body").string(var_336);
    }
    if let Some(var_337) = &input.image_icon_url {
        object.key("ImageIconUrl").string(var_337);
    }
    if let Some(var_338) = &input.image_url {
        object.key("ImageUrl").string(var_338);
    }
    if let Some(var_339) = &input.raw_content {
        object.key("RawContent").string(var_339);
    }
    if let Some(var_340) = &input.small_image_icon_url {
        object.key("SmallImageIconUrl").string(var_340);
    }
    if let Some(var_341) = &input.sound {
        object.key("Sound").string(var_341);
    }
    if let Some(var_342) = &input.title {
        object.key("Title").string(var_342);
    }
    if let Some(var_343) = &input.url {
        object.key("Url").string(var_343);
    }
}

pub fn serialize_structure_crate_model_apns_push_notification_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApnsPushNotificationTemplate,
) {
    if let Some(var_344) = &input.action {
        object.key("Action").string(var_344.as_str());
    }
    if let Some(var_345) = &input.body {
        object.key("Body").string(var_345);
    }
    if let Some(var_346) = &input.media_url {
        object.key("MediaUrl").string(var_346);
    }
    if let Some(var_347) = &input.raw_content {
        object.key("RawContent").string(var_347);
    }
    if let Some(var_348) = &input.sound {
        object.key("Sound").string(var_348);
    }
    if let Some(var_349) = &input.title {
        object.key("Title").string(var_349);
    }
    if let Some(var_350) = &input.url {
        object.key("Url").string(var_350);
    }
}

pub fn serialize_structure_crate_model_default_push_notification_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DefaultPushNotificationTemplate,
) {
    if let Some(var_351) = &input.action {
        object.key("Action").string(var_351.as_str());
    }
    if let Some(var_352) = &input.body {
        object.key("Body").string(var_352);
    }
    if let Some(var_353) = &input.sound {
        object.key("Sound").string(var_353);
    }
    if let Some(var_354) = &input.title {
        object.key("Title").string(var_354);
    }
    if let Some(var_355) = &input.url {
        object.key("Url").string(var_355);
    }
}

pub fn serialize_structure_crate_model_segment_dimensions(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SegmentDimensions,
) {
    if let Some(var_356) = &input.attributes {
        let mut object_357 = object.key("Attributes").start_object();
        for (key_358, value_359) in var_356 {
            {
                let mut object_360 = object_357.key(key_358).start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_dimension(
                    &mut object_360,
                    value_359,
                );
                object_360.finish();
            }
        }
        object_357.finish();
    }
    if let Some(var_361) = &input.behavior {
        let mut object_362 = object.key("Behavior").start_object();
        crate::json_ser::serialize_structure_crate_model_segment_behaviors(
            &mut object_362,
            var_361,
        );
        object_362.finish();
    }
    if let Some(var_363) = &input.demographic {
        let mut object_364 = object.key("Demographic").start_object();
        crate::json_ser::serialize_structure_crate_model_segment_demographics(
            &mut object_364,
            var_363,
        );
        object_364.finish();
    }
    if let Some(var_365) = &input.location {
        let mut object_366 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_segment_location(&mut object_366, var_365);
        object_366.finish();
    }
    if let Some(var_367) = &input.metrics {
        let mut object_368 = object.key("Metrics").start_object();
        for (key_369, value_370) in var_367 {
            {
                let mut object_371 = object_368.key(key_369).start_object();
                crate::json_ser::serialize_structure_crate_model_metric_dimension(
                    &mut object_371,
                    value_370,
                );
                object_371.finish();
            }
        }
        object_368.finish();
    }
    if let Some(var_372) = &input.user_attributes {
        let mut object_373 = object.key("UserAttributes").start_object();
        for (key_374, value_375) in var_372 {
            {
                let mut object_376 = object_373.key(key_374).start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_dimension(
                    &mut object_376,
                    value_375,
                );
                object_376.finish();
            }
        }
        object_373.finish();
    }
}

pub fn serialize_structure_crate_model_segment_group_list(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SegmentGroupList,
) {
    if let Some(var_377) = &input.groups {
        let mut array_378 = object.key("Groups").start_array();
        for item_379 in var_377 {
            {
                let mut object_380 = array_378.value().start_object();
                crate::json_ser::serialize_structure_crate_model_segment_group(
                    &mut object_380,
                    item_379,
                );
                object_380.finish();
            }
        }
        array_378.finish();
    }
    if let Some(var_381) = &input.include {
        object.key("Include").string(var_381.as_str());
    }
}

pub fn serialize_structure_crate_model_events_batch(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventsBatch,
) {
    if let Some(var_382) = &input.endpoint {
        let mut object_383 = object.key("Endpoint").start_object();
        crate::json_ser::serialize_structure_crate_model_public_endpoint(&mut object_383, var_382);
        object_383.finish();
    }
    if let Some(var_384) = &input.events {
        let mut object_385 = object.key("Events").start_object();
        for (key_386, value_387) in var_384 {
            {
                let mut object_388 = object_385.key(key_386).start_object();
                crate::json_ser::serialize_structure_crate_model_event(&mut object_388, value_387);
                object_388.finish();
            }
        }
        object_385.finish();
    }
}

pub fn serialize_structure_crate_model_address_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AddressConfiguration,
) {
    if let Some(var_389) = &input.body_override {
        object.key("BodyOverride").string(var_389);
    }
    if let Some(var_390) = &input.channel_type {
        object.key("ChannelType").string(var_390.as_str());
    }
    if let Some(var_391) = &input.context {
        let mut object_392 = object.key("Context").start_object();
        for (key_393, value_394) in var_391 {
            {
                object_392.key(key_393).string(value_394);
            }
        }
        object_392.finish();
    }
    if let Some(var_395) = &input.raw_content {
        object.key("RawContent").string(var_395);
    }
    if let Some(var_396) = &input.substitutions {
        let mut object_397 = object.key("Substitutions").start_object();
        for (key_398, value_399) in var_396 {
            {
                let mut array_400 = object_397.key(key_398).start_array();
                for item_401 in value_399 {
                    {
                        array_400.value().string(item_401);
                    }
                }
                array_400.finish();
            }
        }
        object_397.finish();
    }
    if let Some(var_402) = &input.title_override {
        object.key("TitleOverride").string(var_402);
    }
}

pub fn serialize_structure_crate_model_endpoint_send_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointSendConfiguration,
) {
    if let Some(var_403) = &input.body_override {
        object.key("BodyOverride").string(var_403);
    }
    if let Some(var_404) = &input.context {
        let mut object_405 = object.key("Context").start_object();
        for (key_406, value_407) in var_404 {
            {
                object_405.key(key_406).string(value_407);
            }
        }
        object_405.finish();
    }
    if let Some(var_408) = &input.raw_content {
        object.key("RawContent").string(var_408);
    }
    if let Some(var_409) = &input.substitutions {
        let mut object_410 = object.key("Substitutions").start_object();
        for (key_411, value_412) in var_409 {
            {
                let mut array_413 = object_410.key(key_411).start_array();
                for item_414 in value_412 {
                    {
                        array_413.value().string(item_414);
                    }
                }
                array_413.finish();
            }
        }
        object_410.finish();
    }
    if let Some(var_415) = &input.title_override {
        object.key("TitleOverride").string(var_415);
    }
}

pub fn serialize_structure_crate_model_direct_message_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DirectMessageConfiguration,
) {
    if let Some(var_416) = &input.adm_message {
        let mut object_417 = object.key("ADMMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_adm_message(&mut object_417, var_416);
        object_417.finish();
    }
    if let Some(var_418) = &input.apns_message {
        let mut object_419 = object.key("APNSMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_apns_message(&mut object_419, var_418);
        object_419.finish();
    }
    if let Some(var_420) = &input.baidu_message {
        let mut object_421 = object.key("BaiduMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_baidu_message(&mut object_421, var_420);
        object_421.finish();
    }
    if let Some(var_422) = &input.default_message {
        let mut object_423 = object.key("DefaultMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_default_message(&mut object_423, var_422);
        object_423.finish();
    }
    if let Some(var_424) = &input.default_push_notification_message {
        let mut object_425 = object.key("DefaultPushNotificationMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_default_push_notification_message(
            &mut object_425,
            var_424,
        );
        object_425.finish();
    }
    if let Some(var_426) = &input.email_message {
        let mut object_427 = object.key("EmailMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_email_message(&mut object_427, var_426);
        object_427.finish();
    }
    if let Some(var_428) = &input.gcm_message {
        let mut object_429 = object.key("GCMMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_gcm_message(&mut object_429, var_428);
        object_429.finish();
    }
    if let Some(var_430) = &input.sms_message {
        let mut object_431 = object.key("SMSMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_sms_message(&mut object_431, var_430);
        object_431.finish();
    }
    if let Some(var_432) = &input.voice_message {
        let mut object_433 = object.key("VoiceMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_message(&mut object_433, var_432);
        object_433.finish();
    }
}

pub fn serialize_structure_crate_model_endpoint_demographic(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointDemographic,
) {
    if let Some(var_434) = &input.app_version {
        object.key("AppVersion").string(var_434);
    }
    if let Some(var_435) = &input.locale {
        object.key("Locale").string(var_435);
    }
    if let Some(var_436) = &input.make {
        object.key("Make").string(var_436);
    }
    if let Some(var_437) = &input.model {
        object.key("Model").string(var_437);
    }
    if let Some(var_438) = &input.model_version {
        object.key("ModelVersion").string(var_438);
    }
    if let Some(var_439) = &input.platform {
        object.key("Platform").string(var_439);
    }
    if let Some(var_440) = &input.platform_version {
        object.key("PlatformVersion").string(var_440);
    }
    if let Some(var_441) = &input.timezone {
        object.key("Timezone").string(var_441);
    }
}

pub fn serialize_structure_crate_model_endpoint_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointLocation,
) {
    if let Some(var_442) = &input.city {
        object.key("City").string(var_442);
    }
    if let Some(var_443) = &input.country {
        object.key("Country").string(var_443);
    }
    if input.latitude != 0.0 {
        object.key("Latitude").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.latitude).into()),
        );
    }
    if input.longitude != 0.0 {
        object.key("Longitude").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.longitude).into()),
        );
    }
    if let Some(var_444) = &input.postal_code {
        object.key("PostalCode").string(var_444);
    }
    if let Some(var_445) = &input.region {
        object.key("Region").string(var_445);
    }
}

pub fn serialize_structure_crate_model_endpoint_user(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointUser,
) {
    if let Some(var_446) = &input.user_attributes {
        let mut object_447 = object.key("UserAttributes").start_object();
        for (key_448, value_449) in var_446 {
            {
                let mut array_450 = object_447.key(key_448).start_array();
                for item_451 in value_449 {
                    {
                        array_450.value().string(item_451);
                    }
                }
                array_450.finish();
            }
        }
        object_447.finish();
    }
    if let Some(var_452) = &input.user_id {
        object.key("UserId").string(var_452);
    }
}

pub fn serialize_structure_crate_model_endpoint_batch_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointBatchItem,
) {
    if let Some(var_453) = &input.address {
        object.key("Address").string(var_453);
    }
    if let Some(var_454) = &input.attributes {
        let mut object_455 = object.key("Attributes").start_object();
        for (key_456, value_457) in var_454 {
            {
                let mut array_458 = object_455.key(key_456).start_array();
                for item_459 in value_457 {
                    {
                        array_458.value().string(item_459);
                    }
                }
                array_458.finish();
            }
        }
        object_455.finish();
    }
    if let Some(var_460) = &input.channel_type {
        object.key("ChannelType").string(var_460.as_str());
    }
    if let Some(var_461) = &input.demographic {
        let mut object_462 = object.key("Demographic").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_demographic(
            &mut object_462,
            var_461,
        );
        object_462.finish();
    }
    if let Some(var_463) = &input.effective_date {
        object.key("EffectiveDate").string(var_463);
    }
    if let Some(var_464) = &input.endpoint_status {
        object.key("EndpointStatus").string(var_464);
    }
    if let Some(var_465) = &input.id {
        object.key("Id").string(var_465);
    }
    if let Some(var_466) = &input.location {
        let mut object_467 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_location(
            &mut object_467,
            var_466,
        );
        object_467.finish();
    }
    if let Some(var_468) = &input.metrics {
        let mut object_469 = object.key("Metrics").start_object();
        for (key_470, value_471) in var_468 {
            {
                object_469.key(key_470).number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::Float((*value_471).into()),
                );
            }
        }
        object_469.finish();
    }
    if let Some(var_472) = &input.opt_out {
        object.key("OptOut").string(var_472);
    }
    if let Some(var_473) = &input.request_id {
        object.key("RequestId").string(var_473);
    }
    if let Some(var_474) = &input.user {
        let mut object_475 = object.key("User").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_user(&mut object_475, var_474);
        object_475.finish();
    }
}

pub fn serialize_structure_crate_model_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Message,
) {
    if let Some(var_476) = &input.action {
        object.key("Action").string(var_476.as_str());
    }
    if let Some(var_477) = &input.body {
        object.key("Body").string(var_477);
    }
    if let Some(var_478) = &input.image_icon_url {
        object.key("ImageIconUrl").string(var_478);
    }
    if let Some(var_479) = &input.image_small_icon_url {
        object.key("ImageSmallIconUrl").string(var_479);
    }
    if let Some(var_480) = &input.image_url {
        object.key("ImageUrl").string(var_480);
    }
    if let Some(var_481) = &input.json_body {
        object.key("JsonBody").string(var_481);
    }
    if let Some(var_482) = &input.media_url {
        object.key("MediaUrl").string(var_482);
    }
    if let Some(var_483) = &input.raw_content {
        object.key("RawContent").string(var_483);
    }
    if input.silent_push {
        object.key("SilentPush").boolean(input.silent_push);
    }
    if input.time_to_live != 0 {
        object.key("TimeToLive").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.time_to_live).into()),
        );
    }
    if let Some(var_484) = &input.title {
        object.key("Title").string(var_484);
    }
    if let Some(var_485) = &input.url {
        object.key("Url").string(var_485);
    }
}

pub fn serialize_structure_crate_model_campaign_custom_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CampaignCustomMessage,
) {
    if let Some(var_486) = &input.data {
        object.key("Data").string(var_486);
    }
}

pub fn serialize_structure_crate_model_campaign_email_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CampaignEmailMessage,
) {
    if let Some(var_487) = &input.body {
        object.key("Body").string(var_487);
    }
    if let Some(var_488) = &input.from_address {
        object.key("FromAddress").string(var_488);
    }
    if let Some(var_489) = &input.html_body {
        object.key("HtmlBody").string(var_489);
    }
    if let Some(var_490) = &input.title {
        object.key("Title").string(var_490);
    }
}

pub fn serialize_structure_crate_model_campaign_sms_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CampaignSmsMessage,
) {
    if let Some(var_491) = &input.body {
        object.key("Body").string(var_491);
    }
    if let Some(var_492) = &input.message_type {
        object.key("MessageType").string(var_492.as_str());
    }
    if let Some(var_493) = &input.origination_number {
        object.key("OriginationNumber").string(var_493);
    }
    if let Some(var_494) = &input.sender_id {
        object.key("SenderId").string(var_494);
    }
    if let Some(var_495) = &input.entity_id {
        object.key("EntityId").string(var_495);
    }
    if let Some(var_496) = &input.template_id {
        object.key("TemplateId").string(var_496);
    }
}

pub fn serialize_structure_crate_model_campaign_event_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CampaignEventFilter,
) {
    if let Some(var_497) = &input.dimensions {
        let mut object_498 = object.key("Dimensions").start_object();
        crate::json_ser::serialize_structure_crate_model_event_dimensions(&mut object_498, var_497);
        object_498.finish();
    }
    if let Some(var_499) = &input.filter_type {
        object.key("FilterType").string(var_499.as_str());
    }
}

pub fn serialize_structure_crate_model_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Template,
) {
    if let Some(var_500) = &input.name {
        object.key("Name").string(var_500);
    }
    if let Some(var_501) = &input.version {
        object.key("Version").string(var_501);
    }
}

pub fn serialize_structure_crate_model_custom_message_activity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomMessageActivity,
) {
    if let Some(var_502) = &input.delivery_uri {
        object.key("DeliveryUri").string(var_502);
    }
    if let Some(var_503) = &input.endpoint_types {
        let mut array_504 = object.key("EndpointTypes").start_array();
        for item_505 in var_503 {
            {
                array_504.value().string(item_505.as_str());
            }
        }
        array_504.finish();
    }
    if let Some(var_506) = &input.message_config {
        let mut object_507 = object.key("MessageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_journey_custom_message(
            &mut object_507,
            var_506,
        );
        object_507.finish();
    }
    if let Some(var_508) = &input.next_activity {
        object.key("NextActivity").string(var_508);
    }
    if let Some(var_509) = &input.template_name {
        object.key("TemplateName").string(var_509);
    }
    if let Some(var_510) = &input.template_version {
        object.key("TemplateVersion").string(var_510);
    }
}

pub fn serialize_structure_crate_model_conditional_split_activity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConditionalSplitActivity,
) {
    if let Some(var_511) = &input.condition {
        let mut object_512 = object.key("Condition").start_object();
        crate::json_ser::serialize_structure_crate_model_condition(&mut object_512, var_511);
        object_512.finish();
    }
    if let Some(var_513) = &input.evaluation_wait_time {
        let mut object_514 = object.key("EvaluationWaitTime").start_object();
        crate::json_ser::serialize_structure_crate_model_wait_time(&mut object_514, var_513);
        object_514.finish();
    }
    if let Some(var_515) = &input.false_activity {
        object.key("FalseActivity").string(var_515);
    }
    if let Some(var_516) = &input.true_activity {
        object.key("TrueActivity").string(var_516);
    }
}

pub fn serialize_structure_crate_model_email_message_activity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EmailMessageActivity,
) {
    if let Some(var_517) = &input.message_config {
        let mut object_518 = object.key("MessageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_journey_email_message(
            &mut object_518,
            var_517,
        );
        object_518.finish();
    }
    if let Some(var_519) = &input.next_activity {
        object.key("NextActivity").string(var_519);
    }
    if let Some(var_520) = &input.template_name {
        object.key("TemplateName").string(var_520);
    }
    if let Some(var_521) = &input.template_version {
        object.key("TemplateVersion").string(var_521);
    }
}

pub fn serialize_structure_crate_model_holdout_activity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HoldoutActivity,
) {
    if let Some(var_522) = &input.next_activity {
        object.key("NextActivity").string(var_522);
    }
    {
        object.key("Percentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.percentage).into()),
        );
    }
}

pub fn serialize_structure_crate_model_multi_conditional_split_activity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiConditionalSplitActivity,
) {
    if let Some(var_523) = &input.branches {
        let mut array_524 = object.key("Branches").start_array();
        for item_525 in var_523 {
            {
                let mut object_526 = array_524.value().start_object();
                crate::json_ser::serialize_structure_crate_model_multi_conditional_branch(
                    &mut object_526,
                    item_525,
                );
                object_526.finish();
            }
        }
        array_524.finish();
    }
    if let Some(var_527) = &input.default_activity {
        object.key("DefaultActivity").string(var_527);
    }
    if let Some(var_528) = &input.evaluation_wait_time {
        let mut object_529 = object.key("EvaluationWaitTime").start_object();
        crate::json_ser::serialize_structure_crate_model_wait_time(&mut object_529, var_528);
        object_529.finish();
    }
}

pub fn serialize_structure_crate_model_push_message_activity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PushMessageActivity,
) {
    if let Some(var_530) = &input.message_config {
        let mut object_531 = object.key("MessageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_journey_push_message(
            &mut object_531,
            var_530,
        );
        object_531.finish();
    }
    if let Some(var_532) = &input.next_activity {
        object.key("NextActivity").string(var_532);
    }
    if let Some(var_533) = &input.template_name {
        object.key("TemplateName").string(var_533);
    }
    if let Some(var_534) = &input.template_version {
        object.key("TemplateVersion").string(var_534);
    }
}

pub fn serialize_structure_crate_model_random_split_activity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RandomSplitActivity,
) {
    if let Some(var_535) = &input.branches {
        let mut array_536 = object.key("Branches").start_array();
        for item_537 in var_535 {
            {
                let mut object_538 = array_536.value().start_object();
                crate::json_ser::serialize_structure_crate_model_random_split_entry(
                    &mut object_538,
                    item_537,
                );
                object_538.finish();
            }
        }
        array_536.finish();
    }
}

pub fn serialize_structure_crate_model_sms_message_activity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SmsMessageActivity,
) {
    if let Some(var_539) = &input.message_config {
        let mut object_540 = object.key("MessageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_journey_sms_message(
            &mut object_540,
            var_539,
        );
        object_540.finish();
    }
    if let Some(var_541) = &input.next_activity {
        object.key("NextActivity").string(var_541);
    }
    if let Some(var_542) = &input.template_name {
        object.key("TemplateName").string(var_542);
    }
    if let Some(var_543) = &input.template_version {
        object.key("TemplateVersion").string(var_543);
    }
}

pub fn serialize_structure_crate_model_wait_activity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WaitActivity,
) {
    if let Some(var_544) = &input.next_activity {
        object.key("NextActivity").string(var_544);
    }
    if let Some(var_545) = &input.wait_time {
        let mut object_546 = object.key("WaitTime").start_object();
        crate::json_ser::serialize_structure_crate_model_wait_time(&mut object_546, var_545);
        object_546.finish();
    }
}

pub fn serialize_structure_crate_model_event_start_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventStartCondition,
) {
    if let Some(var_547) = &input.event_filter {
        let mut object_548 = object.key("EventFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_event_filter(&mut object_548, var_547);
        object_548.finish();
    }
    if let Some(var_549) = &input.segment_id {
        object.key("SegmentId").string(var_549);
    }
}

pub fn serialize_structure_crate_model_segment_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SegmentCondition,
) {
    if let Some(var_550) = &input.segment_id {
        object.key("SegmentId").string(var_550);
    }
}

pub fn serialize_structure_crate_model_attribute_dimension(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeDimension,
) {
    if let Some(var_551) = &input.attribute_type {
        object.key("AttributeType").string(var_551.as_str());
    }
    if let Some(var_552) = &input.values {
        let mut array_553 = object.key("Values").start_array();
        for item_554 in var_552 {
            {
                array_553.value().string(item_554);
            }
        }
        array_553.finish();
    }
}

pub fn serialize_structure_crate_model_segment_behaviors(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SegmentBehaviors,
) {
    if let Some(var_555) = &input.recency {
        let mut object_556 = object.key("Recency").start_object();
        crate::json_ser::serialize_structure_crate_model_recency_dimension(
            &mut object_556,
            var_555,
        );
        object_556.finish();
    }
}

pub fn serialize_structure_crate_model_segment_demographics(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SegmentDemographics,
) {
    if let Some(var_557) = &input.app_version {
        let mut object_558 = object.key("AppVersion").start_object();
        crate::json_ser::serialize_structure_crate_model_set_dimension(&mut object_558, var_557);
        object_558.finish();
    }
    if let Some(var_559) = &input.channel {
        let mut object_560 = object.key("Channel").start_object();
        crate::json_ser::serialize_structure_crate_model_set_dimension(&mut object_560, var_559);
        object_560.finish();
    }
    if let Some(var_561) = &input.device_type {
        let mut object_562 = object.key("DeviceType").start_object();
        crate::json_ser::serialize_structure_crate_model_set_dimension(&mut object_562, var_561);
        object_562.finish();
    }
    if let Some(var_563) = &input.make {
        let mut object_564 = object.key("Make").start_object();
        crate::json_ser::serialize_structure_crate_model_set_dimension(&mut object_564, var_563);
        object_564.finish();
    }
    if let Some(var_565) = &input.model {
        let mut object_566 = object.key("Model").start_object();
        crate::json_ser::serialize_structure_crate_model_set_dimension(&mut object_566, var_565);
        object_566.finish();
    }
    if let Some(var_567) = &input.platform {
        let mut object_568 = object.key("Platform").start_object();
        crate::json_ser::serialize_structure_crate_model_set_dimension(&mut object_568, var_567);
        object_568.finish();
    }
}

pub fn serialize_structure_crate_model_segment_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SegmentLocation,
) {
    if let Some(var_569) = &input.country {
        let mut object_570 = object.key("Country").start_object();
        crate::json_ser::serialize_structure_crate_model_set_dimension(&mut object_570, var_569);
        object_570.finish();
    }
    if let Some(var_571) = &input.gps_point {
        let mut object_572 = object.key("GPSPoint").start_object();
        crate::json_ser::serialize_structure_crate_model_gps_point_dimension(
            &mut object_572,
            var_571,
        );
        object_572.finish();
    }
}

pub fn serialize_structure_crate_model_metric_dimension(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDimension,
) {
    if let Some(var_573) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_573);
    }
    {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.value).into()),
        );
    }
}

pub fn serialize_structure_crate_model_segment_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SegmentGroup,
) {
    if let Some(var_574) = &input.dimensions {
        let mut array_575 = object.key("Dimensions").start_array();
        for item_576 in var_574 {
            {
                let mut object_577 = array_575.value().start_object();
                crate::json_ser::serialize_structure_crate_model_segment_dimensions(
                    &mut object_577,
                    item_576,
                );
                object_577.finish();
            }
        }
        array_575.finish();
    }
    if let Some(var_578) = &input.source_segments {
        let mut array_579 = object.key("SourceSegments").start_array();
        for item_580 in var_578 {
            {
                let mut object_581 = array_579.value().start_object();
                crate::json_ser::serialize_structure_crate_model_segment_reference(
                    &mut object_581,
                    item_580,
                );
                object_581.finish();
            }
        }
        array_579.finish();
    }
    if let Some(var_582) = &input.source_type {
        object.key("SourceType").string(var_582.as_str());
    }
    if let Some(var_583) = &input.r#type {
        object.key("Type").string(var_583.as_str());
    }
}

pub fn serialize_structure_crate_model_public_endpoint(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublicEndpoint,
) {
    if let Some(var_584) = &input.address {
        object.key("Address").string(var_584);
    }
    if let Some(var_585) = &input.attributes {
        let mut object_586 = object.key("Attributes").start_object();
        for (key_587, value_588) in var_585 {
            {
                let mut array_589 = object_586.key(key_587).start_array();
                for item_590 in value_588 {
                    {
                        array_589.value().string(item_590);
                    }
                }
                array_589.finish();
            }
        }
        object_586.finish();
    }
    if let Some(var_591) = &input.channel_type {
        object.key("ChannelType").string(var_591.as_str());
    }
    if let Some(var_592) = &input.demographic {
        let mut object_593 = object.key("Demographic").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_demographic(
            &mut object_593,
            var_592,
        );
        object_593.finish();
    }
    if let Some(var_594) = &input.effective_date {
        object.key("EffectiveDate").string(var_594);
    }
    if let Some(var_595) = &input.endpoint_status {
        object.key("EndpointStatus").string(var_595);
    }
    if let Some(var_596) = &input.location {
        let mut object_597 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_location(
            &mut object_597,
            var_596,
        );
        object_597.finish();
    }
    if let Some(var_598) = &input.metrics {
        let mut object_599 = object.key("Metrics").start_object();
        for (key_600, value_601) in var_598 {
            {
                object_599.key(key_600).number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::Float((*value_601).into()),
                );
            }
        }
        object_599.finish();
    }
    if let Some(var_602) = &input.opt_out {
        object.key("OptOut").string(var_602);
    }
    if let Some(var_603) = &input.request_id {
        object.key("RequestId").string(var_603);
    }
    if let Some(var_604) = &input.user {
        let mut object_605 = object.key("User").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_user(&mut object_605, var_604);
        object_605.finish();
    }
}

pub fn serialize_structure_crate_model_event(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Event,
) {
    if let Some(var_606) = &input.app_package_name {
        object.key("AppPackageName").string(var_606);
    }
    if let Some(var_607) = &input.app_title {
        object.key("AppTitle").string(var_607);
    }
    if let Some(var_608) = &input.app_version_code {
        object.key("AppVersionCode").string(var_608);
    }
    if let Some(var_609) = &input.attributes {
        let mut object_610 = object.key("Attributes").start_object();
        for (key_611, value_612) in var_609 {
            {
                object_610.key(key_611).string(value_612);
            }
        }
        object_610.finish();
    }
    if let Some(var_613) = &input.client_sdk_version {
        object.key("ClientSdkVersion").string(var_613);
    }
    if let Some(var_614) = &input.event_type {
        object.key("EventType").string(var_614);
    }
    if let Some(var_615) = &input.metrics {
        let mut object_616 = object.key("Metrics").start_object();
        for (key_617, value_618) in var_615 {
            {
                object_616.key(key_617).number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::Float((*value_618).into()),
                );
            }
        }
        object_616.finish();
    }
    if let Some(var_619) = &input.sdk_name {
        object.key("SdkName").string(var_619);
    }
    if let Some(var_620) = &input.session {
        let mut object_621 = object.key("Session").start_object();
        crate::json_ser::serialize_structure_crate_model_session(&mut object_621, var_620);
        object_621.finish();
    }
    if let Some(var_622) = &input.timestamp {
        object.key("Timestamp").string(var_622);
    }
}

pub fn serialize_structure_crate_model_adm_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdmMessage,
) {
    if let Some(var_623) = &input.action {
        object.key("Action").string(var_623.as_str());
    }
    if let Some(var_624) = &input.body {
        object.key("Body").string(var_624);
    }
    if let Some(var_625) = &input.consolidation_key {
        object.key("ConsolidationKey").string(var_625);
    }
    if let Some(var_626) = &input.data {
        let mut object_627 = object.key("Data").start_object();
        for (key_628, value_629) in var_626 {
            {
                object_627.key(key_628).string(value_629);
            }
        }
        object_627.finish();
    }
    if let Some(var_630) = &input.expires_after {
        object.key("ExpiresAfter").string(var_630);
    }
    if let Some(var_631) = &input.icon_reference {
        object.key("IconReference").string(var_631);
    }
    if let Some(var_632) = &input.image_icon_url {
        object.key("ImageIconUrl").string(var_632);
    }
    if let Some(var_633) = &input.image_url {
        object.key("ImageUrl").string(var_633);
    }
    if let Some(var_634) = &input.md5 {
        object.key("MD5").string(var_634);
    }
    if let Some(var_635) = &input.raw_content {
        object.key("RawContent").string(var_635);
    }
    if input.silent_push {
        object.key("SilentPush").boolean(input.silent_push);
    }
    if let Some(var_636) = &input.small_image_icon_url {
        object.key("SmallImageIconUrl").string(var_636);
    }
    if let Some(var_637) = &input.sound {
        object.key("Sound").string(var_637);
    }
    if let Some(var_638) = &input.substitutions {
        let mut object_639 = object.key("Substitutions").start_object();
        for (key_640, value_641) in var_638 {
            {
                let mut array_642 = object_639.key(key_640).start_array();
                for item_643 in value_641 {
                    {
                        array_642.value().string(item_643);
                    }
                }
                array_642.finish();
            }
        }
        object_639.finish();
    }
    if let Some(var_644) = &input.title {
        object.key("Title").string(var_644);
    }
    if let Some(var_645) = &input.url {
        object.key("Url").string(var_645);
    }
}

pub fn serialize_structure_crate_model_apns_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApnsMessage,
) {
    if let Some(var_646) = &input.apns_push_type {
        object.key("APNSPushType").string(var_646);
    }
    if let Some(var_647) = &input.action {
        object.key("Action").string(var_647.as_str());
    }
    if input.badge != 0 {
        object.key("Badge").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.badge).into()),
        );
    }
    if let Some(var_648) = &input.body {
        object.key("Body").string(var_648);
    }
    if let Some(var_649) = &input.category {
        object.key("Category").string(var_649);
    }
    if let Some(var_650) = &input.collapse_id {
        object.key("CollapseId").string(var_650);
    }
    if let Some(var_651) = &input.data {
        let mut object_652 = object.key("Data").start_object();
        for (key_653, value_654) in var_651 {
            {
                object_652.key(key_653).string(value_654);
            }
        }
        object_652.finish();
    }
    if let Some(var_655) = &input.media_url {
        object.key("MediaUrl").string(var_655);
    }
    if let Some(var_656) = &input.preferred_authentication_method {
        object.key("PreferredAuthenticationMethod").string(var_656);
    }
    if let Some(var_657) = &input.priority {
        object.key("Priority").string(var_657);
    }
    if let Some(var_658) = &input.raw_content {
        object.key("RawContent").string(var_658);
    }
    if input.silent_push {
        object.key("SilentPush").boolean(input.silent_push);
    }
    if let Some(var_659) = &input.sound {
        object.key("Sound").string(var_659);
    }
    if let Some(var_660) = &input.substitutions {
        let mut object_661 = object.key("Substitutions").start_object();
        for (key_662, value_663) in var_660 {
            {
                let mut array_664 = object_661.key(key_662).start_array();
                for item_665 in value_663 {
                    {
                        array_664.value().string(item_665);
                    }
                }
                array_664.finish();
            }
        }
        object_661.finish();
    }
    if let Some(var_666) = &input.thread_id {
        object.key("ThreadId").string(var_666);
    }
    if input.time_to_live != 0 {
        object.key("TimeToLive").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.time_to_live).into()),
        );
    }
    if let Some(var_667) = &input.title {
        object.key("Title").string(var_667);
    }
    if let Some(var_668) = &input.url {
        object.key("Url").string(var_668);
    }
}

pub fn serialize_structure_crate_model_baidu_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BaiduMessage,
) {
    if let Some(var_669) = &input.action {
        object.key("Action").string(var_669.as_str());
    }
    if let Some(var_670) = &input.body {
        object.key("Body").string(var_670);
    }
    if let Some(var_671) = &input.data {
        let mut object_672 = object.key("Data").start_object();
        for (key_673, value_674) in var_671 {
            {
                object_672.key(key_673).string(value_674);
            }
        }
        object_672.finish();
    }
    if let Some(var_675) = &input.icon_reference {
        object.key("IconReference").string(var_675);
    }
    if let Some(var_676) = &input.image_icon_url {
        object.key("ImageIconUrl").string(var_676);
    }
    if let Some(var_677) = &input.image_url {
        object.key("ImageUrl").string(var_677);
    }
    if let Some(var_678) = &input.raw_content {
        object.key("RawContent").string(var_678);
    }
    if input.silent_push {
        object.key("SilentPush").boolean(input.silent_push);
    }
    if let Some(var_679) = &input.small_image_icon_url {
        object.key("SmallImageIconUrl").string(var_679);
    }
    if let Some(var_680) = &input.sound {
        object.key("Sound").string(var_680);
    }
    if let Some(var_681) = &input.substitutions {
        let mut object_682 = object.key("Substitutions").start_object();
        for (key_683, value_684) in var_681 {
            {
                let mut array_685 = object_682.key(key_683).start_array();
                for item_686 in value_684 {
                    {
                        array_685.value().string(item_686);
                    }
                }
                array_685.finish();
            }
        }
        object_682.finish();
    }
    if input.time_to_live != 0 {
        object.key("TimeToLive").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.time_to_live).into()),
        );
    }
    if let Some(var_687) = &input.title {
        object.key("Title").string(var_687);
    }
    if let Some(var_688) = &input.url {
        object.key("Url").string(var_688);
    }
}

pub fn serialize_structure_crate_model_default_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DefaultMessage,
) {
    if let Some(var_689) = &input.body {
        object.key("Body").string(var_689);
    }
    if let Some(var_690) = &input.substitutions {
        let mut object_691 = object.key("Substitutions").start_object();
        for (key_692, value_693) in var_690 {
            {
                let mut array_694 = object_691.key(key_692).start_array();
                for item_695 in value_693 {
                    {
                        array_694.value().string(item_695);
                    }
                }
                array_694.finish();
            }
        }
        object_691.finish();
    }
}

pub fn serialize_structure_crate_model_default_push_notification_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DefaultPushNotificationMessage,
) {
    if let Some(var_696) = &input.action {
        object.key("Action").string(var_696.as_str());
    }
    if let Some(var_697) = &input.body {
        object.key("Body").string(var_697);
    }
    if let Some(var_698) = &input.data {
        let mut object_699 = object.key("Data").start_object();
        for (key_700, value_701) in var_698 {
            {
                object_699.key(key_700).string(value_701);
            }
        }
        object_699.finish();
    }
    if input.silent_push {
        object.key("SilentPush").boolean(input.silent_push);
    }
    if let Some(var_702) = &input.substitutions {
        let mut object_703 = object.key("Substitutions").start_object();
        for (key_704, value_705) in var_702 {
            {
                let mut array_706 = object_703.key(key_704).start_array();
                for item_707 in value_705 {
                    {
                        array_706.value().string(item_707);
                    }
                }
                array_706.finish();
            }
        }
        object_703.finish();
    }
    if let Some(var_708) = &input.title {
        object.key("Title").string(var_708);
    }
    if let Some(var_709) = &input.url {
        object.key("Url").string(var_709);
    }
}

pub fn serialize_structure_crate_model_email_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EmailMessage,
) {
    if let Some(var_710) = &input.body {
        object.key("Body").string(var_710);
    }
    if let Some(var_711) = &input.feedback_forwarding_address {
        object.key("FeedbackForwardingAddress").string(var_711);
    }
    if let Some(var_712) = &input.from_address {
        object.key("FromAddress").string(var_712);
    }
    if let Some(var_713) = &input.raw_email {
        let mut object_714 = object.key("RawEmail").start_object();
        crate::json_ser::serialize_structure_crate_model_raw_email(&mut object_714, var_713);
        object_714.finish();
    }
    if let Some(var_715) = &input.reply_to_addresses {
        let mut array_716 = object.key("ReplyToAddresses").start_array();
        for item_717 in var_715 {
            {
                array_716.value().string(item_717);
            }
        }
        array_716.finish();
    }
    if let Some(var_718) = &input.simple_email {
        let mut object_719 = object.key("SimpleEmail").start_object();
        crate::json_ser::serialize_structure_crate_model_simple_email(&mut object_719, var_718);
        object_719.finish();
    }
    if let Some(var_720) = &input.substitutions {
        let mut object_721 = object.key("Substitutions").start_object();
        for (key_722, value_723) in var_720 {
            {
                let mut array_724 = object_721.key(key_722).start_array();
                for item_725 in value_723 {
                    {
                        array_724.value().string(item_725);
                    }
                }
                array_724.finish();
            }
        }
        object_721.finish();
    }
}

pub fn serialize_structure_crate_model_gcm_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GcmMessage,
) {
    if let Some(var_726) = &input.action {
        object.key("Action").string(var_726.as_str());
    }
    if let Some(var_727) = &input.body {
        object.key("Body").string(var_727);
    }
    if let Some(var_728) = &input.collapse_key {
        object.key("CollapseKey").string(var_728);
    }
    if let Some(var_729) = &input.data {
        let mut object_730 = object.key("Data").start_object();
        for (key_731, value_732) in var_729 {
            {
                object_730.key(key_731).string(value_732);
            }
        }
        object_730.finish();
    }
    if let Some(var_733) = &input.icon_reference {
        object.key("IconReference").string(var_733);
    }
    if let Some(var_734) = &input.image_icon_url {
        object.key("ImageIconUrl").string(var_734);
    }
    if let Some(var_735) = &input.image_url {
        object.key("ImageUrl").string(var_735);
    }
    if let Some(var_736) = &input.priority {
        object.key("Priority").string(var_736);
    }
    if let Some(var_737) = &input.raw_content {
        object.key("RawContent").string(var_737);
    }
    if let Some(var_738) = &input.restricted_package_name {
        object.key("RestrictedPackageName").string(var_738);
    }
    if input.silent_push {
        object.key("SilentPush").boolean(input.silent_push);
    }
    if let Some(var_739) = &input.small_image_icon_url {
        object.key("SmallImageIconUrl").string(var_739);
    }
    if let Some(var_740) = &input.sound {
        object.key("Sound").string(var_740);
    }
    if let Some(var_741) = &input.substitutions {
        let mut object_742 = object.key("Substitutions").start_object();
        for (key_743, value_744) in var_741 {
            {
                let mut array_745 = object_742.key(key_743).start_array();
                for item_746 in value_744 {
                    {
                        array_745.value().string(item_746);
                    }
                }
                array_745.finish();
            }
        }
        object_742.finish();
    }
    if input.time_to_live != 0 {
        object.key("TimeToLive").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.time_to_live).into()),
        );
    }
    if let Some(var_747) = &input.title {
        object.key("Title").string(var_747);
    }
    if let Some(var_748) = &input.url {
        object.key("Url").string(var_748);
    }
}

pub fn serialize_structure_crate_model_sms_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SmsMessage,
) {
    if let Some(var_749) = &input.body {
        object.key("Body").string(var_749);
    }
    if let Some(var_750) = &input.keyword {
        object.key("Keyword").string(var_750);
    }
    if let Some(var_751) = &input.media_url {
        object.key("MediaUrl").string(var_751);
    }
    if let Some(var_752) = &input.message_type {
        object.key("MessageType").string(var_752.as_str());
    }
    if let Some(var_753) = &input.origination_number {
        object.key("OriginationNumber").string(var_753);
    }
    if let Some(var_754) = &input.sender_id {
        object.key("SenderId").string(var_754);
    }
    if let Some(var_755) = &input.substitutions {
        let mut object_756 = object.key("Substitutions").start_object();
        for (key_757, value_758) in var_755 {
            {
                let mut array_759 = object_756.key(key_757).start_array();
                for item_760 in value_758 {
                    {
                        array_759.value().string(item_760);
                    }
                }
                array_759.finish();
            }
        }
        object_756.finish();
    }
    if let Some(var_761) = &input.entity_id {
        object.key("EntityId").string(var_761);
    }
    if let Some(var_762) = &input.template_id {
        object.key("TemplateId").string(var_762);
    }
}

pub fn serialize_structure_crate_model_voice_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceMessage,
) {
    if let Some(var_763) = &input.body {
        object.key("Body").string(var_763);
    }
    if let Some(var_764) = &input.language_code {
        object.key("LanguageCode").string(var_764);
    }
    if let Some(var_765) = &input.origination_number {
        object.key("OriginationNumber").string(var_765);
    }
    if let Some(var_766) = &input.substitutions {
        let mut object_767 = object.key("Substitutions").start_object();
        for (key_768, value_769) in var_766 {
            {
                let mut array_770 = object_767.key(key_768).start_array();
                for item_771 in value_769 {
                    {
                        array_770.value().string(item_771);
                    }
                }
                array_770.finish();
            }
        }
        object_767.finish();
    }
    if let Some(var_772) = &input.voice_id {
        object.key("VoiceId").string(var_772);
    }
}

pub fn serialize_structure_crate_model_event_dimensions(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventDimensions,
) {
    if let Some(var_773) = &input.attributes {
        let mut object_774 = object.key("Attributes").start_object();
        for (key_775, value_776) in var_773 {
            {
                let mut object_777 = object_774.key(key_775).start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_dimension(
                    &mut object_777,
                    value_776,
                );
                object_777.finish();
            }
        }
        object_774.finish();
    }
    if let Some(var_778) = &input.event_type {
        let mut object_779 = object.key("EventType").start_object();
        crate::json_ser::serialize_structure_crate_model_set_dimension(&mut object_779, var_778);
        object_779.finish();
    }
    if let Some(var_780) = &input.metrics {
        let mut object_781 = object.key("Metrics").start_object();
        for (key_782, value_783) in var_780 {
            {
                let mut object_784 = object_781.key(key_782).start_object();
                crate::json_ser::serialize_structure_crate_model_metric_dimension(
                    &mut object_784,
                    value_783,
                );
                object_784.finish();
            }
        }
        object_781.finish();
    }
}

pub fn serialize_structure_crate_model_journey_custom_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JourneyCustomMessage,
) {
    if let Some(var_785) = &input.data {
        object.key("Data").string(var_785);
    }
}

pub fn serialize_structure_crate_model_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) {
    if let Some(var_786) = &input.conditions {
        let mut array_787 = object.key("Conditions").start_array();
        for item_788 in var_786 {
            {
                let mut object_789 = array_787.value().start_object();
                crate::json_ser::serialize_structure_crate_model_simple_condition(
                    &mut object_789,
                    item_788,
                );
                object_789.finish();
            }
        }
        array_787.finish();
    }
    if let Some(var_790) = &input.operator {
        object.key("Operator").string(var_790.as_str());
    }
}

pub fn serialize_structure_crate_model_wait_time(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WaitTime,
) {
    if let Some(var_791) = &input.wait_for {
        object.key("WaitFor").string(var_791);
    }
    if let Some(var_792) = &input.wait_until {
        object.key("WaitUntil").string(var_792);
    }
}

pub fn serialize_structure_crate_model_journey_email_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JourneyEmailMessage,
) {
    if let Some(var_793) = &input.from_address {
        object.key("FromAddress").string(var_793);
    }
}

pub fn serialize_structure_crate_model_multi_conditional_branch(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiConditionalBranch,
) {
    if let Some(var_794) = &input.condition {
        let mut object_795 = object.key("Condition").start_object();
        crate::json_ser::serialize_structure_crate_model_simple_condition(&mut object_795, var_794);
        object_795.finish();
    }
    if let Some(var_796) = &input.next_activity {
        object.key("NextActivity").string(var_796);
    }
}

pub fn serialize_structure_crate_model_journey_push_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JourneyPushMessage,
) {
    if let Some(var_797) = &input.time_to_live {
        object.key("TimeToLive").string(var_797);
    }
}

pub fn serialize_structure_crate_model_random_split_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RandomSplitEntry,
) {
    if let Some(var_798) = &input.next_activity {
        object.key("NextActivity").string(var_798);
    }
    if input.percentage != 0 {
        object.key("Percentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.percentage).into()),
        );
    }
}

pub fn serialize_structure_crate_model_journey_sms_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JourneySmsMessage,
) {
    if let Some(var_799) = &input.message_type {
        object.key("MessageType").string(var_799.as_str());
    }
    if let Some(var_800) = &input.origination_number {
        object.key("OriginationNumber").string(var_800);
    }
    if let Some(var_801) = &input.sender_id {
        object.key("SenderId").string(var_801);
    }
    if let Some(var_802) = &input.entity_id {
        object.key("EntityId").string(var_802);
    }
    if let Some(var_803) = &input.template_id {
        object.key("TemplateId").string(var_803);
    }
}

pub fn serialize_structure_crate_model_event_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventFilter,
) {
    if let Some(var_804) = &input.dimensions {
        let mut object_805 = object.key("Dimensions").start_object();
        crate::json_ser::serialize_structure_crate_model_event_dimensions(&mut object_805, var_804);
        object_805.finish();
    }
    if let Some(var_806) = &input.filter_type {
        object.key("FilterType").string(var_806.as_str());
    }
}

pub fn serialize_structure_crate_model_recency_dimension(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecencyDimension,
) {
    if let Some(var_807) = &input.duration {
        object.key("Duration").string(var_807.as_str());
    }
    if let Some(var_808) = &input.recency_type {
        object.key("RecencyType").string(var_808.as_str());
    }
}

pub fn serialize_structure_crate_model_set_dimension(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SetDimension,
) {
    if let Some(var_809) = &input.dimension_type {
        object.key("DimensionType").string(var_809.as_str());
    }
    if let Some(var_810) = &input.values {
        let mut array_811 = object.key("Values").start_array();
        for item_812 in var_810 {
            {
                array_811.value().string(item_812);
            }
        }
        array_811.finish();
    }
}

pub fn serialize_structure_crate_model_gps_point_dimension(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GpsPointDimension,
) {
    if let Some(var_813) = &input.coordinates {
        let mut object_814 = object.key("Coordinates").start_object();
        crate::json_ser::serialize_structure_crate_model_gps_coordinates(&mut object_814, var_813);
        object_814.finish();
    }
    if input.range_in_kilometers != 0.0 {
        object.key("RangeInKilometers").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.range_in_kilometers).into()),
        );
    }
}

pub fn serialize_structure_crate_model_segment_reference(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SegmentReference,
) {
    if let Some(var_815) = &input.id {
        object.key("Id").string(var_815);
    }
    if input.version != 0 {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.version).into()),
        );
    }
}

pub fn serialize_structure_crate_model_session(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Session,
) {
    if input.duration != 0 {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.duration).into()),
        );
    }
    if let Some(var_816) = &input.id {
        object.key("Id").string(var_816);
    }
    if let Some(var_817) = &input.start_timestamp {
        object.key("StartTimestamp").string(var_817);
    }
    if let Some(var_818) = &input.stop_timestamp {
        object.key("StopTimestamp").string(var_818);
    }
}

pub fn serialize_structure_crate_model_raw_email(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RawEmail,
) {
    if let Some(var_819) = &input.data {
        object
            .key("Data")
            .string_unchecked(&smithy_types::base64::encode(var_819));
    }
}

pub fn serialize_structure_crate_model_simple_email(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimpleEmail,
) {
    if let Some(var_820) = &input.html_part {
        let mut object_821 = object.key("HtmlPart").start_object();
        crate::json_ser::serialize_structure_crate_model_simple_email_part(
            &mut object_821,
            var_820,
        );
        object_821.finish();
    }
    if let Some(var_822) = &input.subject {
        let mut object_823 = object.key("Subject").start_object();
        crate::json_ser::serialize_structure_crate_model_simple_email_part(
            &mut object_823,
            var_822,
        );
        object_823.finish();
    }
    if let Some(var_824) = &input.text_part {
        let mut object_825 = object.key("TextPart").start_object();
        crate::json_ser::serialize_structure_crate_model_simple_email_part(
            &mut object_825,
            var_824,
        );
        object_825.finish();
    }
}

pub fn serialize_structure_crate_model_simple_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimpleCondition,
) {
    if let Some(var_826) = &input.event_condition {
        let mut object_827 = object.key("EventCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_condition(&mut object_827, var_826);
        object_827.finish();
    }
    if let Some(var_828) = &input.segment_condition {
        let mut object_829 = object.key("SegmentCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_segment_condition(
            &mut object_829,
            var_828,
        );
        object_829.finish();
    }
    if let Some(var_830) = &input.segment_dimensions {
        let mut object_831 = object.key("segmentDimensions").start_object();
        crate::json_ser::serialize_structure_crate_model_segment_dimensions(
            &mut object_831,
            var_830,
        );
        object_831.finish();
    }
}

pub fn serialize_structure_crate_model_gps_coordinates(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GpsCoordinates,
) {
    {
        object.key("Latitude").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.latitude).into()),
        );
    }
    {
        object.key("Longitude").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((input.longitude).into()),
        );
    }
}

pub fn serialize_structure_crate_model_simple_email_part(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimpleEmailPart,
) {
    if let Some(var_832) = &input.charset {
        object.key("Charset").string(var_832);
    }
    if let Some(var_833) = &input.data {
        object.key("Data").string(var_833);
    }
}

pub fn serialize_structure_crate_model_event_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventCondition,
) {
    if let Some(var_834) = &input.dimensions {
        let mut object_835 = object.key("Dimensions").start_object();
        crate::json_ser::serialize_structure_crate_model_event_dimensions(&mut object_835, var_834);
        object_835.finish();
    }
    if let Some(var_836) = &input.message_activity {
        object.key("MessageActivity").string(var_836);
    }
}
