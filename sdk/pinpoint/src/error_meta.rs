// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Provides information about an API request or response.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>Provides information about an API request or response.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>Provides information about an API request or response.</p>
    ForbiddenException(crate::error::ForbiddenException),
    /// <p>Provides information about an API request or response.</p>
    InternalServerErrorException(crate::error::InternalServerErrorException),
    /// <p>Provides information about an API request or response.</p>
    MethodNotAllowedException(crate::error::MethodNotAllowedException),
    /// <p>Provides information about an API request or response.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>Provides information about an API request or response.</p>
    PayloadTooLargeException(crate::error::PayloadTooLargeException),
    /// <p>Provides information about an API request or response.</p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::MethodNotAllowedException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::PayloadTooLargeException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAppError> for Error {
    fn from(err: crate::error::CreateAppError) -> Self {
        match err {
            crate::error::CreateAppError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateAppError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateAppError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateAppError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreateAppError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateAppError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::CreateAppError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCampaignError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateCampaignError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCampaignError> for Error {
    fn from(err: crate::error::CreateCampaignError) -> Self {
        match err {
            crate::error::CreateCampaignError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateCampaignError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateCampaignError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateCampaignError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreateCampaignError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateCampaignError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::CreateCampaignError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateCampaignError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEmailTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateEmailTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEmailTemplateError> for Error {
    fn from(err: crate::error::CreateEmailTemplateError) -> Self {
        match err {
            crate::error::CreateEmailTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateEmailTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateEmailTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateEmailTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreateEmailTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateEmailTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateExportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateExportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateExportJobError> for Error {
    fn from(err: crate::error::CreateExportJobError) -> Self {
        match err {
            crate::error::CreateExportJobError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateExportJobError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateExportJobError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateExportJobError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreateExportJobError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateExportJobError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::CreateExportJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateImportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateImportJobError> for Error {
    fn from(err: crate::error::CreateImportJobError) -> Self {
        match err {
            crate::error::CreateImportJobError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateImportJobError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateImportJobError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateImportJobError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreateImportJobError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateImportJobError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::CreateImportJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateInAppTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateInAppTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateInAppTemplateError> for Error {
    fn from(err: crate::error::CreateInAppTemplateError) -> Self {
        match err {
            crate::error::CreateInAppTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateInAppTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateInAppTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateInAppTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreateInAppTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateInAppTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateJourneyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateJourneyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateJourneyError> for Error {
    fn from(err: crate::error::CreateJourneyError) -> Self {
        match err {
            crate::error::CreateJourneyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateJourneyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateJourneyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateJourneyError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreateJourneyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateJourneyError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::CreateJourneyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateJourneyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePushTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePushTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePushTemplateError> for Error {
    fn from(err: crate::error::CreatePushTemplateError) -> Self {
        match err {
            crate::error::CreatePushTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreatePushTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreatePushTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreatePushTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreatePushTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreatePushTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateRecommenderConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateRecommenderConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRecommenderConfigurationError> for Error {
    fn from(err: crate::error::CreateRecommenderConfigurationError) -> Self {
        match err {
            crate::error::CreateRecommenderConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateRecommenderConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateRecommenderConfigurationError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::CreateRecommenderConfigurationError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreateRecommenderConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateRecommenderConfigurationError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::CreateRecommenderConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateRecommenderConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSegmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSegmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSegmentError> for Error {
    fn from(err: crate::error::CreateSegmentError) -> Self {
        match err {
            crate::error::CreateSegmentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateSegmentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateSegmentError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateSegmentError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreateSegmentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateSegmentError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::CreateSegmentError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateSegmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSmsTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSmsTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSmsTemplateError> for Error {
    fn from(err: crate::error::CreateSmsTemplateError) -> Self {
        match err {
            crate::error::CreateSmsTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateSmsTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateSmsTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateSmsTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreateSmsTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateSmsTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVoiceTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVoiceTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVoiceTemplateError> for Error {
    fn from(err: crate::error::CreateVoiceTemplateError) -> Self {
        match err {
            crate::error::CreateVoiceTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateVoiceTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateVoiceTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateVoiceTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::CreateVoiceTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateVoiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAdmChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAdmChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAdmChannelError> for Error {
    fn from(err: crate::error::DeleteAdmChannelError) -> Self {
        match err {
            crate::error::DeleteAdmChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteAdmChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteAdmChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteAdmChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteAdmChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteAdmChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteAdmChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteAdmChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteApnsChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteApnsChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteApnsChannelError> for Error {
    fn from(err: crate::error::DeleteApnsChannelError) -> Self {
        match err {
            crate::error::DeleteApnsChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteApnsChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteApnsChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteApnsChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteApnsChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteApnsChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteApnsChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteApnsChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteApnsSandboxChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteApnsSandboxChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteApnsSandboxChannelError> for Error {
    fn from(err: crate::error::DeleteApnsSandboxChannelError) -> Self {
        match err {
            crate::error::DeleteApnsSandboxChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteApnsSandboxChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteApnsSandboxChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteApnsSandboxChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteApnsSandboxChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteApnsSandboxChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteApnsSandboxChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteApnsSandboxChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteApnsVoipChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteApnsVoipChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteApnsVoipChannelError> for Error {
    fn from(err: crate::error::DeleteApnsVoipChannelError) -> Self {
        match err {
            crate::error::DeleteApnsVoipChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteApnsVoipChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteApnsVoipChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteApnsVoipChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteApnsVoipChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteApnsVoipChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteApnsVoipChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteApnsVoipChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteApnsVoipSandboxChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteApnsVoipSandboxChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteApnsVoipSandboxChannelError> for Error {
    fn from(err: crate::error::DeleteApnsVoipSandboxChannelError) -> Self {
        match err {
            crate::error::DeleteApnsVoipSandboxChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteApnsVoipSandboxChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteApnsVoipSandboxChannelError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::DeleteApnsVoipSandboxChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteApnsVoipSandboxChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteApnsVoipSandboxChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteApnsVoipSandboxChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteApnsVoipSandboxChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppError> for Error {
    fn from(err: crate::error::DeleteAppError) -> Self {
        match err {
            crate::error::DeleteAppError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteAppError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteAppError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteAppError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteAppError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteAppError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteAppError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBaiduChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBaiduChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBaiduChannelError> for Error {
    fn from(err: crate::error::DeleteBaiduChannelError) -> Self {
        match err {
            crate::error::DeleteBaiduChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBaiduChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteBaiduChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteBaiduChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteBaiduChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBaiduChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteBaiduChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteBaiduChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCampaignError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteCampaignError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCampaignError> for Error {
    fn from(err: crate::error::DeleteCampaignError) -> Self {
        match err {
            crate::error::DeleteCampaignError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteCampaignError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteCampaignError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteCampaignError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteCampaignError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteCampaignError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteCampaignError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteCampaignError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEmailChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEmailChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEmailChannelError> for Error {
    fn from(err: crate::error::DeleteEmailChannelError) -> Self {
        match err {
            crate::error::DeleteEmailChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteEmailChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteEmailChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteEmailChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteEmailChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteEmailChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteEmailChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteEmailChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEmailTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEmailTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEmailTemplateError> for Error {
    fn from(err: crate::error::DeleteEmailTemplateError) -> Self {
        match err {
            crate::error::DeleteEmailTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteEmailTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteEmailTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteEmailTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteEmailTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteEmailTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteEmailTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteEmailTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteEndpointError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEndpointError> for Error {
    fn from(err: crate::error::DeleteEndpointError) -> Self {
        match err {
            crate::error::DeleteEndpointError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteEndpointError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteEndpointError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteEndpointError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteEndpointError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteEndpointError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteEndpointError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEventStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEventStreamError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEventStreamError> for Error {
    fn from(err: crate::error::DeleteEventStreamError) -> Self {
        match err {
            crate::error::DeleteEventStreamError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteEventStreamError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteEventStreamError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteEventStreamError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteEventStreamError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteEventStreamError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteEventStreamError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteEventStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGcmChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGcmChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGcmChannelError> for Error {
    fn from(err: crate::error::DeleteGcmChannelError) -> Self {
        match err {
            crate::error::DeleteGcmChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteGcmChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteGcmChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteGcmChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteGcmChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteGcmChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteGcmChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteGcmChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInAppTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteInAppTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInAppTemplateError> for Error {
    fn from(err: crate::error::DeleteInAppTemplateError) -> Self {
        match err {
            crate::error::DeleteInAppTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteInAppTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteInAppTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteInAppTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteInAppTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteInAppTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteInAppTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteInAppTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteJourneyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteJourneyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteJourneyError> for Error {
    fn from(err: crate::error::DeleteJourneyError) -> Self {
        match err {
            crate::error::DeleteJourneyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteJourneyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteJourneyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteJourneyError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteJourneyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteJourneyError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteJourneyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteJourneyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePushTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeletePushTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePushTemplateError> for Error {
    fn from(err: crate::error::DeletePushTemplateError) -> Self {
        match err {
            crate::error::DeletePushTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeletePushTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeletePushTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeletePushTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeletePushTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeletePushTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeletePushTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeletePushTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteRecommenderConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteRecommenderConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRecommenderConfigurationError> for Error {
    fn from(err: crate::error::DeleteRecommenderConfigurationError) -> Self {
        match err {
            crate::error::DeleteRecommenderConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteRecommenderConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteRecommenderConfigurationError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::DeleteRecommenderConfigurationError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteRecommenderConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteRecommenderConfigurationError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteRecommenderConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteRecommenderConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSegmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSegmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSegmentError> for Error {
    fn from(err: crate::error::DeleteSegmentError) -> Self {
        match err {
            crate::error::DeleteSegmentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteSegmentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteSegmentError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteSegmentError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteSegmentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteSegmentError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteSegmentError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteSegmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSmsChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSmsChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSmsChannelError> for Error {
    fn from(err: crate::error::DeleteSmsChannelError) -> Self {
        match err {
            crate::error::DeleteSmsChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteSmsChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteSmsChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteSmsChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteSmsChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteSmsChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteSmsChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteSmsChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSmsTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSmsTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSmsTemplateError> for Error {
    fn from(err: crate::error::DeleteSmsTemplateError) -> Self {
        match err {
            crate::error::DeleteSmsTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteSmsTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteSmsTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteSmsTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteSmsTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteSmsTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteSmsTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteSmsTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteUserEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserEndpointsError> for Error {
    fn from(err: crate::error::DeleteUserEndpointsError) -> Self {
        match err {
            crate::error::DeleteUserEndpointsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteUserEndpointsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteUserEndpointsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteUserEndpointsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteUserEndpointsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteUserEndpointsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteUserEndpointsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteUserEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceChannelError> for Error {
    fn from(err: crate::error::DeleteVoiceChannelError) -> Self {
        match err {
            crate::error::DeleteVoiceChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVoiceChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVoiceChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteVoiceChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteVoiceChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVoiceChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteVoiceChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteVoiceChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVoiceTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVoiceTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceTemplateError> for Error {
    fn from(err: crate::error::DeleteVoiceTemplateError) -> Self {
        match err {
            crate::error::DeleteVoiceTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVoiceTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVoiceTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteVoiceTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::DeleteVoiceTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVoiceTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::DeleteVoiceTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteVoiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAdmChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAdmChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAdmChannelError> for Error {
    fn from(err: crate::error::GetAdmChannelError) -> Self {
        match err {
            crate::error::GetAdmChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAdmChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetAdmChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetAdmChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetAdmChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetAdmChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetAdmChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetAdmChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetApnsChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetApnsChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetApnsChannelError> for Error {
    fn from(err: crate::error::GetApnsChannelError) -> Self {
        match err {
            crate::error::GetApnsChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetApnsChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetApnsChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetApnsChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetApnsChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetApnsChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetApnsChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetApnsChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetApnsSandboxChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetApnsSandboxChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetApnsSandboxChannelError> for Error {
    fn from(err: crate::error::GetApnsSandboxChannelError) -> Self {
        match err {
            crate::error::GetApnsSandboxChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetApnsSandboxChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetApnsSandboxChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetApnsSandboxChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetApnsSandboxChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetApnsSandboxChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetApnsSandboxChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetApnsSandboxChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetApnsVoipChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetApnsVoipChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetApnsVoipChannelError> for Error {
    fn from(err: crate::error::GetApnsVoipChannelError) -> Self {
        match err {
            crate::error::GetApnsVoipChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetApnsVoipChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetApnsVoipChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetApnsVoipChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetApnsVoipChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetApnsVoipChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetApnsVoipChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetApnsVoipChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetApnsVoipSandboxChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetApnsVoipSandboxChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetApnsVoipSandboxChannelError> for Error {
    fn from(err: crate::error::GetApnsVoipSandboxChannelError) -> Self {
        match err {
            crate::error::GetApnsVoipSandboxChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetApnsVoipSandboxChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetApnsVoipSandboxChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetApnsVoipSandboxChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetApnsVoipSandboxChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetApnsVoipSandboxChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetApnsVoipSandboxChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetApnsVoipSandboxChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAppError> for Error {
    fn from(err: crate::error::GetAppError) -> Self {
        match err {
            crate::error::GetAppError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAppError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetAppError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetAppError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetAppError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetAppError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetAppError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetApplicationDateRangeKpiError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetApplicationDateRangeKpiError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetApplicationDateRangeKpiError> for Error {
    fn from(err: crate::error::GetApplicationDateRangeKpiError) -> Self {
        match err {
            crate::error::GetApplicationDateRangeKpiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetApplicationDateRangeKpiError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetApplicationDateRangeKpiError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetApplicationDateRangeKpiError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetApplicationDateRangeKpiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetApplicationDateRangeKpiError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetApplicationDateRangeKpiError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetApplicationDateRangeKpiError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetApplicationSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetApplicationSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetApplicationSettingsError> for Error {
    fn from(err: crate::error::GetApplicationSettingsError) -> Self {
        match err {
            crate::error::GetApplicationSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetApplicationSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetApplicationSettingsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetApplicationSettingsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetApplicationSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetApplicationSettingsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetApplicationSettingsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetApplicationSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAppsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAppsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAppsError> for Error {
    fn from(err: crate::error::GetAppsError) -> Self {
        match err {
            crate::error::GetAppsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAppsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetAppsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetAppsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetAppsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetAppsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetAppsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetAppsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBaiduChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBaiduChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBaiduChannelError> for Error {
    fn from(err: crate::error::GetBaiduChannelError) -> Self {
        match err {
            crate::error::GetBaiduChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBaiduChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetBaiduChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetBaiduChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetBaiduChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBaiduChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetBaiduChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetBaiduChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCampaignError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCampaignError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCampaignError> for Error {
    fn from(err: crate::error::GetCampaignError) -> Self {
        match err {
            crate::error::GetCampaignError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetCampaignError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetCampaignError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetCampaignError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetCampaignError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetCampaignError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetCampaignError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetCampaignError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCampaignActivitiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCampaignActivitiesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCampaignActivitiesError> for Error {
    fn from(err: crate::error::GetCampaignActivitiesError) -> Self {
        match err {
            crate::error::GetCampaignActivitiesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetCampaignActivitiesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetCampaignActivitiesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetCampaignActivitiesError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetCampaignActivitiesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetCampaignActivitiesError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetCampaignActivitiesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetCampaignActivitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCampaignDateRangeKpiError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCampaignDateRangeKpiError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCampaignDateRangeKpiError> for Error {
    fn from(err: crate::error::GetCampaignDateRangeKpiError) -> Self {
        match err {
            crate::error::GetCampaignDateRangeKpiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetCampaignDateRangeKpiError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetCampaignDateRangeKpiError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetCampaignDateRangeKpiError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetCampaignDateRangeKpiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetCampaignDateRangeKpiError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetCampaignDateRangeKpiError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetCampaignDateRangeKpiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCampaignsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCampaignsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCampaignsError> for Error {
    fn from(err: crate::error::GetCampaignsError) -> Self {
        match err {
            crate::error::GetCampaignsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetCampaignsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetCampaignsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetCampaignsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetCampaignsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetCampaignsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetCampaignsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetCampaignsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCampaignVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCampaignVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCampaignVersionError> for Error {
    fn from(err: crate::error::GetCampaignVersionError) -> Self {
        match err {
            crate::error::GetCampaignVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetCampaignVersionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetCampaignVersionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetCampaignVersionError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetCampaignVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetCampaignVersionError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetCampaignVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetCampaignVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCampaignVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCampaignVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCampaignVersionsError> for Error {
    fn from(err: crate::error::GetCampaignVersionsError) -> Self {
        match err {
            crate::error::GetCampaignVersionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetCampaignVersionsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetCampaignVersionsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetCampaignVersionsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetCampaignVersionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetCampaignVersionsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetCampaignVersionsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetCampaignVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetChannelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetChannelsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetChannelsError> for Error {
    fn from(err: crate::error::GetChannelsError) -> Self {
        match err {
            crate::error::GetChannelsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetChannelsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetChannelsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetChannelsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetChannelsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetChannelsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetChannelsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetChannelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEmailChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetEmailChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEmailChannelError> for Error {
    fn from(err: crate::error::GetEmailChannelError) -> Self {
        match err {
            crate::error::GetEmailChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetEmailChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetEmailChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetEmailChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetEmailChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetEmailChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetEmailChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetEmailChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEmailTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetEmailTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEmailTemplateError> for Error {
    fn from(err: crate::error::GetEmailTemplateError) -> Self {
        match err {
            crate::error::GetEmailTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetEmailTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetEmailTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetEmailTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetEmailTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetEmailTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetEmailTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetEmailTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetEndpointError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEndpointError> for Error {
    fn from(err: crate::error::GetEndpointError) -> Self {
        match err {
            crate::error::GetEndpointError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetEndpointError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetEndpointError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetEndpointError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetEndpointError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetEndpointError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetEndpointError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEventStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetEventStreamError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEventStreamError> for Error {
    fn from(err: crate::error::GetEventStreamError) -> Self {
        match err {
            crate::error::GetEventStreamError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetEventStreamError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetEventStreamError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetEventStreamError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetEventStreamError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetEventStreamError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetEventStreamError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetEventStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetExportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetExportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetExportJobError> for Error {
    fn from(err: crate::error::GetExportJobError) -> Self {
        match err {
            crate::error::GetExportJobError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetExportJobError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetExportJobError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetExportJobError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetExportJobError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetExportJobError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetExportJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetExportJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetExportJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetExportJobsError> for Error {
    fn from(err: crate::error::GetExportJobsError) -> Self {
        match err {
            crate::error::GetExportJobsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetExportJobsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetExportJobsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetExportJobsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetExportJobsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetExportJobsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetExportJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetExportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGcmChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGcmChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGcmChannelError> for Error {
    fn from(err: crate::error::GetGcmChannelError) -> Self {
        match err {
            crate::error::GetGcmChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetGcmChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetGcmChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetGcmChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetGcmChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetGcmChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetGcmChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetGcmChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetImportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetImportJobError> for Error {
    fn from(err: crate::error::GetImportJobError) -> Self {
        match err {
            crate::error::GetImportJobError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetImportJobError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetImportJobError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetImportJobError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetImportJobError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetImportJobError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetImportJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetImportJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetImportJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetImportJobsError> for Error {
    fn from(err: crate::error::GetImportJobsError) -> Self {
        match err {
            crate::error::GetImportJobsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetImportJobsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetImportJobsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetImportJobsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetImportJobsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetImportJobsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetImportJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInAppMessagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInAppMessagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInAppMessagesError> for Error {
    fn from(err: crate::error::GetInAppMessagesError) -> Self {
        match err {
            crate::error::GetInAppMessagesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetInAppMessagesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetInAppMessagesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetInAppMessagesError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetInAppMessagesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetInAppMessagesError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetInAppMessagesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetInAppMessagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInAppTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInAppTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInAppTemplateError> for Error {
    fn from(err: crate::error::GetInAppTemplateError) -> Self {
        match err {
            crate::error::GetInAppTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetInAppTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetInAppTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetInAppTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetInAppTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetInAppTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetInAppTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetInAppTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetJourneyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetJourneyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetJourneyError> for Error {
    fn from(err: crate::error::GetJourneyError) -> Self {
        match err {
            crate::error::GetJourneyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetJourneyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetJourneyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetJourneyError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetJourneyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetJourneyError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetJourneyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetJourneyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetJourneyDateRangeKpiError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetJourneyDateRangeKpiError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetJourneyDateRangeKpiError> for Error {
    fn from(err: crate::error::GetJourneyDateRangeKpiError) -> Self {
        match err {
            crate::error::GetJourneyDateRangeKpiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetJourneyDateRangeKpiError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetJourneyDateRangeKpiError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetJourneyDateRangeKpiError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetJourneyDateRangeKpiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetJourneyDateRangeKpiError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetJourneyDateRangeKpiError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetJourneyDateRangeKpiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::GetJourneyExecutionActivityMetricsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetJourneyExecutionActivityMetricsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetJourneyExecutionActivityMetricsError> for Error {
    fn from(err: crate::error::GetJourneyExecutionActivityMetricsError) -> Self {
        match err {
            crate::error::GetJourneyExecutionActivityMetricsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetJourneyExecutionActivityMetricsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetJourneyExecutionActivityMetricsError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::GetJourneyExecutionActivityMetricsError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::error::GetJourneyExecutionActivityMetricsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetJourneyExecutionActivityMetricsError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::error::GetJourneyExecutionActivityMetricsError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::GetJourneyExecutionActivityMetricsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetJourneyExecutionMetricsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetJourneyExecutionMetricsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetJourneyExecutionMetricsError> for Error {
    fn from(err: crate::error::GetJourneyExecutionMetricsError) -> Self {
        match err {
            crate::error::GetJourneyExecutionMetricsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetJourneyExecutionMetricsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetJourneyExecutionMetricsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetJourneyExecutionMetricsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetJourneyExecutionMetricsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetJourneyExecutionMetricsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetJourneyExecutionMetricsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetJourneyExecutionMetricsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPushTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetPushTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPushTemplateError> for Error {
    fn from(err: crate::error::GetPushTemplateError) -> Self {
        match err {
            crate::error::GetPushTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetPushTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetPushTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetPushTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetPushTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetPushTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetPushTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetPushTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRecommenderConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRecommenderConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRecommenderConfigurationError> for Error {
    fn from(err: crate::error::GetRecommenderConfigurationError) -> Self {
        match err {
            crate::error::GetRecommenderConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetRecommenderConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetRecommenderConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetRecommenderConfigurationError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetRecommenderConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRecommenderConfigurationError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetRecommenderConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetRecommenderConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRecommenderConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRecommenderConfigurationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRecommenderConfigurationsError> for Error {
    fn from(err: crate::error::GetRecommenderConfigurationsError) -> Self {
        match err {
            crate::error::GetRecommenderConfigurationsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetRecommenderConfigurationsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetRecommenderConfigurationsError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::GetRecommenderConfigurationsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetRecommenderConfigurationsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRecommenderConfigurationsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetRecommenderConfigurationsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetRecommenderConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSegmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSegmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSegmentError> for Error {
    fn from(err: crate::error::GetSegmentError) -> Self {
        match err {
            crate::error::GetSegmentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSegmentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetSegmentError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetSegmentError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetSegmentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSegmentError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetSegmentError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetSegmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSegmentExportJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSegmentExportJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSegmentExportJobsError> for Error {
    fn from(err: crate::error::GetSegmentExportJobsError) -> Self {
        match err {
            crate::error::GetSegmentExportJobsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSegmentExportJobsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetSegmentExportJobsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetSegmentExportJobsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetSegmentExportJobsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSegmentExportJobsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetSegmentExportJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetSegmentExportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSegmentImportJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSegmentImportJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSegmentImportJobsError> for Error {
    fn from(err: crate::error::GetSegmentImportJobsError) -> Self {
        match err {
            crate::error::GetSegmentImportJobsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSegmentImportJobsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetSegmentImportJobsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetSegmentImportJobsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetSegmentImportJobsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSegmentImportJobsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetSegmentImportJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetSegmentImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSegmentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSegmentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSegmentsError> for Error {
    fn from(err: crate::error::GetSegmentsError) -> Self {
        match err {
            crate::error::GetSegmentsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSegmentsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetSegmentsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetSegmentsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetSegmentsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSegmentsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetSegmentsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetSegmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSegmentVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSegmentVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSegmentVersionError> for Error {
    fn from(err: crate::error::GetSegmentVersionError) -> Self {
        match err {
            crate::error::GetSegmentVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSegmentVersionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetSegmentVersionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetSegmentVersionError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetSegmentVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSegmentVersionError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetSegmentVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetSegmentVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSegmentVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSegmentVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSegmentVersionsError> for Error {
    fn from(err: crate::error::GetSegmentVersionsError) -> Self {
        match err {
            crate::error::GetSegmentVersionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSegmentVersionsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetSegmentVersionsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetSegmentVersionsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetSegmentVersionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSegmentVersionsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetSegmentVersionsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetSegmentVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSmsChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSmsChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSmsChannelError> for Error {
    fn from(err: crate::error::GetSmsChannelError) -> Self {
        match err {
            crate::error::GetSmsChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSmsChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetSmsChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetSmsChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetSmsChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSmsChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetSmsChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetSmsChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSmsTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSmsTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSmsTemplateError> for Error {
    fn from(err: crate::error::GetSmsTemplateError) -> Self {
        match err {
            crate::error::GetSmsTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSmsTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetSmsTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetSmsTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetSmsTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSmsTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetSmsTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetSmsTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUserEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetUserEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUserEndpointsError> for Error {
    fn from(err: crate::error::GetUserEndpointsError) -> Self {
        match err {
            crate::error::GetUserEndpointsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetUserEndpointsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetUserEndpointsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetUserEndpointsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetUserEndpointsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetUserEndpointsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetUserEndpointsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetUserEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVoiceChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceChannelError> for Error {
    fn from(err: crate::error::GetVoiceChannelError) -> Self {
        match err {
            crate::error::GetVoiceChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetVoiceChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetVoiceChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetVoiceChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetVoiceChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVoiceTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetVoiceTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVoiceTemplateError> for Error {
    fn from(err: crate::error::GetVoiceTemplateError) -> Self {
        match err {
            crate::error::GetVoiceTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVoiceTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetVoiceTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::GetVoiceTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::GetVoiceTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVoiceTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::GetVoiceTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetVoiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListJourneysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListJourneysError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListJourneysError> for Error {
    fn from(err: crate::error::ListJourneysError) -> Self {
        match err {
            crate::error::ListJourneysError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListJourneysError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListJourneysError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListJourneysError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::ListJourneysError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListJourneysError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::ListJourneysError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListJourneysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTemplatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTemplatesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTemplatesError> for Error {
    fn from(err: crate::error::ListTemplatesError) -> Self {
        match err {
            crate::error::ListTemplatesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListTemplatesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListTemplatesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListTemplatesError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::ListTemplatesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTemplateVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTemplateVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTemplateVersionsError> for Error {
    fn from(err: crate::error::ListTemplateVersionsError) -> Self {
        match err {
            crate::error::ListTemplateVersionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListTemplateVersionsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListTemplateVersionsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListTemplateVersionsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::ListTemplateVersionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTemplateVersionsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::ListTemplateVersionsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListTemplateVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PhoneNumberValidateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PhoneNumberValidateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PhoneNumberValidateError> for Error {
    fn from(err: crate::error::PhoneNumberValidateError) -> Self {
        match err {
            crate::error::PhoneNumberValidateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PhoneNumberValidateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PhoneNumberValidateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::PhoneNumberValidateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::PhoneNumberValidateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PhoneNumberValidateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::PhoneNumberValidateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PhoneNumberValidateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutEventsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutEventsError> for Error {
    fn from(err: crate::error::PutEventsError) -> Self {
        match err {
            crate::error::PutEventsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutEventsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutEventsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::PutEventsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::PutEventsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutEventsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::PutEventsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PutEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutEventStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutEventStreamError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutEventStreamError> for Error {
    fn from(err: crate::error::PutEventStreamError) -> Self {
        match err {
            crate::error::PutEventStreamError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutEventStreamError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutEventStreamError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::PutEventStreamError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::PutEventStreamError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutEventStreamError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::PutEventStreamError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PutEventStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveAttributesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveAttributesError> for Error {
    fn from(err: crate::error::RemoveAttributesError) -> Self {
        match err {
            crate::error::RemoveAttributesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RemoveAttributesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RemoveAttributesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::RemoveAttributesError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::RemoveAttributesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RemoveAttributesError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::RemoveAttributesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::RemoveAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendMessagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SendMessagesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendMessagesError> for Error {
    fn from(err: crate::error::SendMessagesError) -> Self {
        match err {
            crate::error::SendMessagesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::SendMessagesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::SendMessagesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::SendMessagesError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::SendMessagesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::SendMessagesError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::SendMessagesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::SendMessagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendOTPMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SendOTPMessageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendOTPMessageError> for Error {
    fn from(err: crate::error::SendOTPMessageError) -> Self {
        match err {
            crate::error::SendOTPMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::SendOTPMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::SendOTPMessageError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::SendOTPMessageError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::SendOTPMessageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::SendOTPMessageError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::SendOTPMessageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::SendOTPMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendUsersMessagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SendUsersMessagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendUsersMessagesError> for Error {
    fn from(err: crate::error::SendUsersMessagesError) -> Self {
        match err {
            crate::error::SendUsersMessagesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::SendUsersMessagesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::SendUsersMessagesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::SendUsersMessagesError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::SendUsersMessagesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::SendUsersMessagesError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::SendUsersMessagesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::SendUsersMessagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAdmChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAdmChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAdmChannelError> for Error {
    fn from(err: crate::error::UpdateAdmChannelError) -> Self {
        match err {
            crate::error::UpdateAdmChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateAdmChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateAdmChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateAdmChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateAdmChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateAdmChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateAdmChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateAdmChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateApnsChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateApnsChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateApnsChannelError> for Error {
    fn from(err: crate::error::UpdateApnsChannelError) -> Self {
        match err {
            crate::error::UpdateApnsChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateApnsChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateApnsChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateApnsChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateApnsChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateApnsChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateApnsChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateApnsChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateApnsSandboxChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateApnsSandboxChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateApnsSandboxChannelError> for Error {
    fn from(err: crate::error::UpdateApnsSandboxChannelError) -> Self {
        match err {
            crate::error::UpdateApnsSandboxChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateApnsSandboxChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateApnsSandboxChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateApnsSandboxChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateApnsSandboxChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateApnsSandboxChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateApnsSandboxChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateApnsSandboxChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateApnsVoipChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateApnsVoipChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateApnsVoipChannelError> for Error {
    fn from(err: crate::error::UpdateApnsVoipChannelError) -> Self {
        match err {
            crate::error::UpdateApnsVoipChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateApnsVoipChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateApnsVoipChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateApnsVoipChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateApnsVoipChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateApnsVoipChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateApnsVoipChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateApnsVoipChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateApnsVoipSandboxChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateApnsVoipSandboxChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateApnsVoipSandboxChannelError> for Error {
    fn from(err: crate::error::UpdateApnsVoipSandboxChannelError) -> Self {
        match err {
            crate::error::UpdateApnsVoipSandboxChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateApnsVoipSandboxChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateApnsVoipSandboxChannelError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::UpdateApnsVoipSandboxChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateApnsVoipSandboxChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateApnsVoipSandboxChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateApnsVoipSandboxChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateApnsVoipSandboxChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateApplicationSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateApplicationSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateApplicationSettingsError> for Error {
    fn from(err: crate::error::UpdateApplicationSettingsError) -> Self {
        match err {
            crate::error::UpdateApplicationSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateApplicationSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateApplicationSettingsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateApplicationSettingsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateApplicationSettingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateApplicationSettingsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateApplicationSettingsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateApplicationSettingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBaiduChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBaiduChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBaiduChannelError> for Error {
    fn from(err: crate::error::UpdateBaiduChannelError) -> Self {
        match err {
            crate::error::UpdateBaiduChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateBaiduChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateBaiduChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateBaiduChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateBaiduChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBaiduChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateBaiduChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateBaiduChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateCampaignError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateCampaignError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateCampaignError> for Error {
    fn from(err: crate::error::UpdateCampaignError) -> Self {
        match err {
            crate::error::UpdateCampaignError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateCampaignError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateCampaignError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateCampaignError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateCampaignError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateCampaignError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateCampaignError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateCampaignError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateEmailChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateEmailChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEmailChannelError> for Error {
    fn from(err: crate::error::UpdateEmailChannelError) -> Self {
        match err {
            crate::error::UpdateEmailChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateEmailChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateEmailChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateEmailChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateEmailChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateEmailChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateEmailChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateEmailChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateEmailTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateEmailTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEmailTemplateError> for Error {
    fn from(err: crate::error::UpdateEmailTemplateError) -> Self {
        match err {
            crate::error::UpdateEmailTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateEmailTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateEmailTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateEmailTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateEmailTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateEmailTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateEmailTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateEmailTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateEndpointError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEndpointError> for Error {
    fn from(err: crate::error::UpdateEndpointError) -> Self {
        match err {
            crate::error::UpdateEndpointError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateEndpointError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateEndpointError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateEndpointError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateEndpointError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateEndpointError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateEndpointError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateEndpointsBatchError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateEndpointsBatchError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEndpointsBatchError> for Error {
    fn from(err: crate::error::UpdateEndpointsBatchError) -> Self {
        match err {
            crate::error::UpdateEndpointsBatchError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateEndpointsBatchError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateEndpointsBatchError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateEndpointsBatchError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateEndpointsBatchError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateEndpointsBatchError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateEndpointsBatchError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateEndpointsBatchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGcmChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGcmChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGcmChannelError> for Error {
    fn from(err: crate::error::UpdateGcmChannelError) -> Self {
        match err {
            crate::error::UpdateGcmChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateGcmChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateGcmChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateGcmChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateGcmChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateGcmChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateGcmChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateGcmChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateInAppTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateInAppTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateInAppTemplateError> for Error {
    fn from(err: crate::error::UpdateInAppTemplateError) -> Self {
        match err {
            crate::error::UpdateInAppTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateInAppTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateInAppTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateInAppTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateInAppTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateInAppTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateInAppTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateInAppTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateJourneyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateJourneyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateJourneyError> for Error {
    fn from(err: crate::error::UpdateJourneyError) -> Self {
        match err {
            crate::error::UpdateJourneyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateJourneyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateJourneyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateJourneyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateJourneyError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateJourneyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateJourneyError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateJourneyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateJourneyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateJourneyStateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateJourneyStateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateJourneyStateError> for Error {
    fn from(err: crate::error::UpdateJourneyStateError) -> Self {
        match err {
            crate::error::UpdateJourneyStateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateJourneyStateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateJourneyStateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateJourneyStateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateJourneyStateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateJourneyStateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateJourneyStateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateJourneyStateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePushTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePushTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePushTemplateError> for Error {
    fn from(err: crate::error::UpdatePushTemplateError) -> Self {
        match err {
            crate::error::UpdatePushTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdatePushTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdatePushTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdatePushTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdatePushTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdatePushTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdatePushTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdatePushTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateRecommenderConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateRecommenderConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRecommenderConfigurationError> for Error {
    fn from(err: crate::error::UpdateRecommenderConfigurationError) -> Self {
        match err {
            crate::error::UpdateRecommenderConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateRecommenderConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateRecommenderConfigurationError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::UpdateRecommenderConfigurationError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateRecommenderConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateRecommenderConfigurationError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateRecommenderConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateRecommenderConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSegmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSegmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSegmentError> for Error {
    fn from(err: crate::error::UpdateSegmentError) -> Self {
        match err {
            crate::error::UpdateSegmentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateSegmentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateSegmentError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateSegmentError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateSegmentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSegmentError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateSegmentError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateSegmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSmsChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSmsChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSmsChannelError> for Error {
    fn from(err: crate::error::UpdateSmsChannelError) -> Self {
        match err {
            crate::error::UpdateSmsChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateSmsChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateSmsChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateSmsChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateSmsChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSmsChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateSmsChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateSmsChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSmsTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSmsTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSmsTemplateError> for Error {
    fn from(err: crate::error::UpdateSmsTemplateError) -> Self {
        match err {
            crate::error::UpdateSmsTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateSmsTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateSmsTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateSmsTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateSmsTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSmsTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateSmsTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateSmsTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTemplateActiveVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateTemplateActiveVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTemplateActiveVersionError> for Error {
    fn from(err: crate::error::UpdateTemplateActiveVersionError) -> Self {
        match err {
            crate::error::UpdateTemplateActiveVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateTemplateActiveVersionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateTemplateActiveVersionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateTemplateActiveVersionError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateTemplateActiveVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateTemplateActiveVersionError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateTemplateActiveVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateTemplateActiveVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVoiceChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVoiceChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVoiceChannelError> for Error {
    fn from(err: crate::error::UpdateVoiceChannelError) -> Self {
        match err {
            crate::error::UpdateVoiceChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateVoiceChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateVoiceChannelError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateVoiceChannelError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateVoiceChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateVoiceChannelError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateVoiceChannelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateVoiceChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVoiceTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVoiceTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVoiceTemplateError> for Error {
    fn from(err: crate::error::UpdateVoiceTemplateError) -> Self {
        match err {
            crate::error::UpdateVoiceTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateVoiceTemplateError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateVoiceTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateVoiceTemplateError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::UpdateVoiceTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateVoiceTemplateError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::UpdateVoiceTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateVoiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::VerifyOTPMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::VerifyOTPMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::VerifyOTPMessageError> for Error {
    fn from(err: crate::error::VerifyOTPMessageError) -> Self {
        match err {
            crate::error::VerifyOTPMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::VerifyOTPMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::VerifyOTPMessageError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::VerifyOTPMessageError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::error::VerifyOTPMessageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::VerifyOTPMessageError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::error::VerifyOTPMessageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::VerifyOTPMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::MethodNotAllowedException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::PayloadTooLargeException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
