// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Provides information about an API request or response.</p>
    BadRequestException(crate::types::error::BadRequestException),
    /// <p>Provides information about an API request or response.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Provides information about an API request or response.</p>
    ForbiddenException(crate::types::error::ForbiddenException),
    /// <p>Provides information about an API request or response.</p>
    InternalServerErrorException(crate::types::error::InternalServerErrorException),
    /// <p>Provides information about an API request or response.</p>
    MethodNotAllowedException(crate::types::error::MethodNotAllowedException),
    /// <p>Provides information about an API request or response.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>Provides information about an API request or response.</p>
    PayloadTooLargeException(crate::types::error::PayloadTooLargeException),
    /// <p>Provides information about an API request or response.</p>
    TooManyRequestsException(crate::types::error::TooManyRequestsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::MethodNotAllowedException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::PayloadTooLargeException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_app::CreateAppError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_app::CreateAppError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_app::CreateAppError> for Error {
    fn from(err: crate::operation::create_app::CreateAppError) -> Self {
        match err {
            crate::operation::create_app::CreateAppError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_app::CreateAppError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_app::CreateAppError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_app::CreateAppError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::operation::create_app::CreateAppError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::create_app::CreateAppError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::create_app::CreateAppError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_app::CreateAppError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_campaign::CreateCampaignError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_campaign::CreateCampaignError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_campaign::CreateCampaignError> for Error {
    fn from(err: crate::operation::create_campaign::CreateCampaignError) -> Self {
        match err {
            crate::operation::create_campaign::CreateCampaignError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_campaign::CreateCampaignError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_campaign::CreateCampaignError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_campaign::CreateCampaignError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::create_campaign::CreateCampaignError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_campaign::CreateCampaignError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::create_campaign::CreateCampaignError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_campaign::CreateCampaignError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_email_template::CreateEmailTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_email_template::CreateEmailTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_email_template::CreateEmailTemplateError> for Error {
    fn from(err: crate::operation::create_email_template::CreateEmailTemplateError) -> Self {
        match err {
            crate::operation::create_email_template::CreateEmailTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_email_template::CreateEmailTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_email_template::CreateEmailTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_email_template::CreateEmailTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::create_email_template::CreateEmailTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_email_template::CreateEmailTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_export_job::CreateExportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_export_job::CreateExportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_export_job::CreateExportJobError> for Error {
    fn from(err: crate::operation::create_export_job::CreateExportJobError) -> Self {
        match err {
            crate::operation::create_export_job::CreateExportJobError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_export_job::CreateExportJobError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_export_job::CreateExportJobError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_export_job::CreateExportJobError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::create_export_job::CreateExportJobError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_export_job::CreateExportJobError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::create_export_job::CreateExportJobError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_export_job::CreateExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_import_job::CreateImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_import_job::CreateImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_import_job::CreateImportJobError> for Error {
    fn from(err: crate::operation::create_import_job::CreateImportJobError) -> Self {
        match err {
            crate::operation::create_import_job::CreateImportJobError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_import_job::CreateImportJobError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_import_job::CreateImportJobError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_import_job::CreateImportJobError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::create_import_job::CreateImportJobError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_import_job::CreateImportJobError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::create_import_job::CreateImportJobError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_import_job::CreateImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_in_app_template::CreateInAppTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_in_app_template::CreateInAppTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_in_app_template::CreateInAppTemplateError> for Error {
    fn from(err: crate::operation::create_in_app_template::CreateInAppTemplateError) -> Self {
        match err {
            crate::operation::create_in_app_template::CreateInAppTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_in_app_template::CreateInAppTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_in_app_template::CreateInAppTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_in_app_template::CreateInAppTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::create_in_app_template::CreateInAppTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_in_app_template::CreateInAppTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_journey::CreateJourneyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_journey::CreateJourneyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_journey::CreateJourneyError> for Error {
    fn from(err: crate::operation::create_journey::CreateJourneyError) -> Self {
        match err {
            crate::operation::create_journey::CreateJourneyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_journey::CreateJourneyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_journey::CreateJourneyError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::create_journey::CreateJourneyError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::create_journey::CreateJourneyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::create_journey::CreateJourneyError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::create_journey::CreateJourneyError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::create_journey::CreateJourneyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_push_template::CreatePushTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_push_template::CreatePushTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_push_template::CreatePushTemplateError> for Error {
    fn from(err: crate::operation::create_push_template::CreatePushTemplateError) -> Self {
        match err {
            crate::operation::create_push_template::CreatePushTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_push_template::CreatePushTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_push_template::CreatePushTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_push_template::CreatePushTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::create_push_template::CreatePushTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_push_template::CreatePushTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_recommender_configuration::CreateRecommenderConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_recommender_configuration::CreateRecommenderConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_recommender_configuration::CreateRecommenderConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::create_recommender_configuration::CreateRecommenderConfigurationError,
    ) -> Self {
        match err {
            crate::operation::create_recommender_configuration::CreateRecommenderConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_recommender_configuration::CreateRecommenderConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_recommender_configuration::CreateRecommenderConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_recommender_configuration::CreateRecommenderConfigurationError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::create_recommender_configuration::CreateRecommenderConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_recommender_configuration::CreateRecommenderConfigurationError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::create_recommender_configuration::CreateRecommenderConfigurationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_recommender_configuration::CreateRecommenderConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_segment::CreateSegmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_segment::CreateSegmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_segment::CreateSegmentError> for Error {
    fn from(err: crate::operation::create_segment::CreateSegmentError) -> Self {
        match err {
            crate::operation::create_segment::CreateSegmentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_segment::CreateSegmentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_segment::CreateSegmentError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::create_segment::CreateSegmentError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::create_segment::CreateSegmentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::create_segment::CreateSegmentError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::create_segment::CreateSegmentError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::create_segment::CreateSegmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_sms_template::CreateSmsTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_sms_template::CreateSmsTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_sms_template::CreateSmsTemplateError> for Error {
    fn from(err: crate::operation::create_sms_template::CreateSmsTemplateError) -> Self {
        match err {
            crate::operation::create_sms_template::CreateSmsTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_sms_template::CreateSmsTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_sms_template::CreateSmsTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_sms_template::CreateSmsTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::create_sms_template::CreateSmsTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_sms_template::CreateSmsTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_voice_template::CreateVoiceTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_voice_template::CreateVoiceTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_voice_template::CreateVoiceTemplateError> for Error {
    fn from(err: crate::operation::create_voice_template::CreateVoiceTemplateError) -> Self {
        match err {
            crate::operation::create_voice_template::CreateVoiceTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_voice_template::CreateVoiceTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_voice_template::CreateVoiceTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_voice_template::CreateVoiceTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::create_voice_template::CreateVoiceTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_voice_template::CreateVoiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_adm_channel::DeleteAdmChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_adm_channel::DeleteAdmChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_adm_channel::DeleteAdmChannelError> for Error {
    fn from(err: crate::operation::delete_adm_channel::DeleteAdmChannelError) -> Self {
        match err {
            crate::operation::delete_adm_channel::DeleteAdmChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_adm_channel::DeleteAdmChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_adm_channel::DeleteAdmChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_adm_channel::DeleteAdmChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_adm_channel::DeleteAdmChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_adm_channel::DeleteAdmChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_adm_channel::DeleteAdmChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_adm_channel::DeleteAdmChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_apns_channel::DeleteApnsChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_apns_channel::DeleteApnsChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_apns_channel::DeleteApnsChannelError> for Error {
    fn from(err: crate::operation::delete_apns_channel::DeleteApnsChannelError) -> Self {
        match err {
            crate::operation::delete_apns_channel::DeleteApnsChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_apns_channel::DeleteApnsChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_apns_channel::DeleteApnsChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_apns_channel::DeleteApnsChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_apns_channel::DeleteApnsChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_apns_channel::DeleteApnsChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_apns_channel::DeleteApnsChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_apns_channel::DeleteApnsChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_apns_sandbox_channel::DeleteApnsSandboxChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_apns_sandbox_channel::DeleteApnsSandboxChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_apns_sandbox_channel::DeleteApnsSandboxChannelError> for Error {
    fn from(
        err: crate::operation::delete_apns_sandbox_channel::DeleteApnsSandboxChannelError,
    ) -> Self {
        match err {
            crate::operation::delete_apns_sandbox_channel::DeleteApnsSandboxChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_apns_sandbox_channel::DeleteApnsSandboxChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_apns_sandbox_channel::DeleteApnsSandboxChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_apns_sandbox_channel::DeleteApnsSandboxChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_apns_sandbox_channel::DeleteApnsSandboxChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_apns_sandbox_channel::DeleteApnsSandboxChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_apns_sandbox_channel::DeleteApnsSandboxChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_apns_sandbox_channel::DeleteApnsSandboxChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_apns_voip_channel::DeleteApnsVoipChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_apns_voip_channel::DeleteApnsVoipChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_apns_voip_channel::DeleteApnsVoipChannelError> for Error {
    fn from(err: crate::operation::delete_apns_voip_channel::DeleteApnsVoipChannelError) -> Self {
        match err {
            crate::operation::delete_apns_voip_channel::DeleteApnsVoipChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_apns_voip_channel::DeleteApnsVoipChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_apns_voip_channel::DeleteApnsVoipChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_apns_voip_channel::DeleteApnsVoipChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_apns_voip_channel::DeleteApnsVoipChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_apns_voip_channel::DeleteApnsVoipChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_apns_voip_channel::DeleteApnsVoipChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_apns_voip_channel::DeleteApnsVoipChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_apns_voip_sandbox_channel::DeleteApnsVoipSandboxChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_apns_voip_sandbox_channel::DeleteApnsVoipSandboxChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_apns_voip_sandbox_channel::DeleteApnsVoipSandboxChannelError>
    for Error
{
    fn from(
        err: crate::operation::delete_apns_voip_sandbox_channel::DeleteApnsVoipSandboxChannelError,
    ) -> Self {
        match err {
            crate::operation::delete_apns_voip_sandbox_channel::DeleteApnsVoipSandboxChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_apns_voip_sandbox_channel::DeleteApnsVoipSandboxChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_apns_voip_sandbox_channel::DeleteApnsVoipSandboxChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_apns_voip_sandbox_channel::DeleteApnsVoipSandboxChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_apns_voip_sandbox_channel::DeleteApnsVoipSandboxChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_apns_voip_sandbox_channel::DeleteApnsVoipSandboxChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_apns_voip_sandbox_channel::DeleteApnsVoipSandboxChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_apns_voip_sandbox_channel::DeleteApnsVoipSandboxChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_app::DeleteAppError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_app::DeleteAppError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_app::DeleteAppError> for Error {
    fn from(err: crate::operation::delete_app::DeleteAppError) -> Self {
        match err {
            crate::operation::delete_app::DeleteAppError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_app::DeleteAppError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_app::DeleteAppError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_app::DeleteAppError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::operation::delete_app::DeleteAppError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_app::DeleteAppError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::delete_app::DeleteAppError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_app::DeleteAppError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_baidu_channel::DeleteBaiduChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_baidu_channel::DeleteBaiduChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_baidu_channel::DeleteBaiduChannelError> for Error {
    fn from(err: crate::operation::delete_baidu_channel::DeleteBaiduChannelError) -> Self {
        match err {
            crate::operation::delete_baidu_channel::DeleteBaiduChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_baidu_channel::DeleteBaiduChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_baidu_channel::DeleteBaiduChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_baidu_channel::DeleteBaiduChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_baidu_channel::DeleteBaiduChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_baidu_channel::DeleteBaiduChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_baidu_channel::DeleteBaiduChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_baidu_channel::DeleteBaiduChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_campaign::DeleteCampaignError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_campaign::DeleteCampaignError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_campaign::DeleteCampaignError> for Error {
    fn from(err: crate::operation::delete_campaign::DeleteCampaignError) -> Self {
        match err {
            crate::operation::delete_campaign::DeleteCampaignError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_campaign::DeleteCampaignError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_campaign::DeleteCampaignError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_campaign::DeleteCampaignError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_campaign::DeleteCampaignError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_campaign::DeleteCampaignError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_campaign::DeleteCampaignError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_campaign::DeleteCampaignError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_email_channel::DeleteEmailChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_email_channel::DeleteEmailChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_email_channel::DeleteEmailChannelError> for Error {
    fn from(err: crate::operation::delete_email_channel::DeleteEmailChannelError) -> Self {
        match err {
            crate::operation::delete_email_channel::DeleteEmailChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_email_channel::DeleteEmailChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_email_channel::DeleteEmailChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_email_channel::DeleteEmailChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_email_channel::DeleteEmailChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_email_channel::DeleteEmailChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_email_channel::DeleteEmailChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_email_channel::DeleteEmailChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_email_template::DeleteEmailTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_email_template::DeleteEmailTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_email_template::DeleteEmailTemplateError> for Error {
    fn from(err: crate::operation::delete_email_template::DeleteEmailTemplateError) -> Self {
        match err {
            crate::operation::delete_email_template::DeleteEmailTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_email_template::DeleteEmailTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_email_template::DeleteEmailTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_email_template::DeleteEmailTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_email_template::DeleteEmailTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_email_template::DeleteEmailTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_email_template::DeleteEmailTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_email_template::DeleteEmailTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_endpoint::DeleteEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_endpoint::DeleteEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_endpoint::DeleteEndpointError> for Error {
    fn from(err: crate::operation::delete_endpoint::DeleteEndpointError) -> Self {
        match err {
            crate::operation::delete_endpoint::DeleteEndpointError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_endpoint::DeleteEndpointError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_endpoint::DeleteEndpointError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_endpoint::DeleteEndpointError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_endpoint::DeleteEndpointError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_endpoint::DeleteEndpointError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_endpoint::DeleteEndpointError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_endpoint::DeleteEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_event_stream::DeleteEventStreamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_event_stream::DeleteEventStreamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_event_stream::DeleteEventStreamError> for Error {
    fn from(err: crate::operation::delete_event_stream::DeleteEventStreamError) -> Self {
        match err {
            crate::operation::delete_event_stream::DeleteEventStreamError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_event_stream::DeleteEventStreamError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_event_stream::DeleteEventStreamError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_event_stream::DeleteEventStreamError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_event_stream::DeleteEventStreamError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_event_stream::DeleteEventStreamError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_event_stream::DeleteEventStreamError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_event_stream::DeleteEventStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_gcm_channel::DeleteGcmChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_gcm_channel::DeleteGcmChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_gcm_channel::DeleteGcmChannelError> for Error {
    fn from(err: crate::operation::delete_gcm_channel::DeleteGcmChannelError) -> Self {
        match err {
            crate::operation::delete_gcm_channel::DeleteGcmChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_gcm_channel::DeleteGcmChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_gcm_channel::DeleteGcmChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_gcm_channel::DeleteGcmChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_gcm_channel::DeleteGcmChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_gcm_channel::DeleteGcmChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_gcm_channel::DeleteGcmChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_gcm_channel::DeleteGcmChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_in_app_template::DeleteInAppTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_in_app_template::DeleteInAppTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_in_app_template::DeleteInAppTemplateError> for Error {
    fn from(err: crate::operation::delete_in_app_template::DeleteInAppTemplateError) -> Self {
        match err {
            crate::operation::delete_in_app_template::DeleteInAppTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_in_app_template::DeleteInAppTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_in_app_template::DeleteInAppTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_in_app_template::DeleteInAppTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_in_app_template::DeleteInAppTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_in_app_template::DeleteInAppTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_in_app_template::DeleteInAppTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_in_app_template::DeleteInAppTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_journey::DeleteJourneyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_journey::DeleteJourneyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_journey::DeleteJourneyError> for Error {
    fn from(err: crate::operation::delete_journey::DeleteJourneyError) -> Self {
        match err {
            crate::operation::delete_journey::DeleteJourneyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_journey::DeleteJourneyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_journey::DeleteJourneyError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::delete_journey::DeleteJourneyError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_journey::DeleteJourneyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_journey::DeleteJourneyError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_journey::DeleteJourneyError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::delete_journey::DeleteJourneyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_push_template::DeletePushTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_push_template::DeletePushTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_push_template::DeletePushTemplateError> for Error {
    fn from(err: crate::operation::delete_push_template::DeletePushTemplateError) -> Self {
        match err {
            crate::operation::delete_push_template::DeletePushTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_push_template::DeletePushTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_push_template::DeletePushTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_push_template::DeletePushTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_push_template::DeletePushTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_push_template::DeletePushTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_push_template::DeletePushTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_push_template::DeletePushTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_recommender_configuration::DeleteRecommenderConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_recommender_configuration::DeleteRecommenderConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_recommender_configuration::DeleteRecommenderConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::delete_recommender_configuration::DeleteRecommenderConfigurationError,
    ) -> Self {
        match err {
            crate::operation::delete_recommender_configuration::DeleteRecommenderConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_recommender_configuration::DeleteRecommenderConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_recommender_configuration::DeleteRecommenderConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_recommender_configuration::DeleteRecommenderConfigurationError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_recommender_configuration::DeleteRecommenderConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_recommender_configuration::DeleteRecommenderConfigurationError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_recommender_configuration::DeleteRecommenderConfigurationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_recommender_configuration::DeleteRecommenderConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_segment::DeleteSegmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_segment::DeleteSegmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_segment::DeleteSegmentError> for Error {
    fn from(err: crate::operation::delete_segment::DeleteSegmentError) -> Self {
        match err {
            crate::operation::delete_segment::DeleteSegmentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_segment::DeleteSegmentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_segment::DeleteSegmentError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::delete_segment::DeleteSegmentError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_segment::DeleteSegmentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_segment::DeleteSegmentError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_segment::DeleteSegmentError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::delete_segment::DeleteSegmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_sms_channel::DeleteSmsChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_sms_channel::DeleteSmsChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_sms_channel::DeleteSmsChannelError> for Error {
    fn from(err: crate::operation::delete_sms_channel::DeleteSmsChannelError) -> Self {
        match err {
            crate::operation::delete_sms_channel::DeleteSmsChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_sms_channel::DeleteSmsChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_sms_channel::DeleteSmsChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_sms_channel::DeleteSmsChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_sms_channel::DeleteSmsChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_sms_channel::DeleteSmsChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_sms_channel::DeleteSmsChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_sms_channel::DeleteSmsChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_sms_template::DeleteSmsTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_sms_template::DeleteSmsTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_sms_template::DeleteSmsTemplateError> for Error {
    fn from(err: crate::operation::delete_sms_template::DeleteSmsTemplateError) -> Self {
        match err {
            crate::operation::delete_sms_template::DeleteSmsTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_sms_template::DeleteSmsTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_sms_template::DeleteSmsTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_sms_template::DeleteSmsTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_sms_template::DeleteSmsTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_sms_template::DeleteSmsTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_sms_template::DeleteSmsTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_sms_template::DeleteSmsTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_user_endpoints::DeleteUserEndpointsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_user_endpoints::DeleteUserEndpointsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_user_endpoints::DeleteUserEndpointsError> for Error {
    fn from(err: crate::operation::delete_user_endpoints::DeleteUserEndpointsError) -> Self {
        match err {
            crate::operation::delete_user_endpoints::DeleteUserEndpointsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_user_endpoints::DeleteUserEndpointsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_user_endpoints::DeleteUserEndpointsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_user_endpoints::DeleteUserEndpointsError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_user_endpoints::DeleteUserEndpointsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_user_endpoints::DeleteUserEndpointsError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_user_endpoints::DeleteUserEndpointsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_user_endpoints::DeleteUserEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_voice_channel::DeleteVoiceChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_voice_channel::DeleteVoiceChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_voice_channel::DeleteVoiceChannelError> for Error {
    fn from(err: crate::operation::delete_voice_channel::DeleteVoiceChannelError) -> Self {
        match err {
            crate::operation::delete_voice_channel::DeleteVoiceChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_voice_channel::DeleteVoiceChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_voice_channel::DeleteVoiceChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_voice_channel::DeleteVoiceChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_voice_channel::DeleteVoiceChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_voice_channel::DeleteVoiceChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_voice_channel::DeleteVoiceChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_voice_channel::DeleteVoiceChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_voice_template::DeleteVoiceTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_voice_template::DeleteVoiceTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_voice_template::DeleteVoiceTemplateError> for Error {
    fn from(err: crate::operation::delete_voice_template::DeleteVoiceTemplateError) -> Self {
        match err {
            crate::operation::delete_voice_template::DeleteVoiceTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_voice_template::DeleteVoiceTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_voice_template::DeleteVoiceTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_voice_template::DeleteVoiceTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::delete_voice_template::DeleteVoiceTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_voice_template::DeleteVoiceTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::delete_voice_template::DeleteVoiceTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_voice_template::DeleteVoiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::get_adm_channel::GetAdmChannelError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_adm_channel::GetAdmChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_adm_channel::GetAdmChannelError> for Error {
    fn from(err: crate::operation::get_adm_channel::GetAdmChannelError) -> Self {
        match err {
            crate::operation::get_adm_channel::GetAdmChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_adm_channel::GetAdmChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_adm_channel::GetAdmChannelError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::get_adm_channel::GetAdmChannelError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::get_adm_channel::GetAdmChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_adm_channel::GetAdmChannelError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::get_adm_channel::GetAdmChannelError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::get_adm_channel::GetAdmChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_apns_channel::GetApnsChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_apns_channel::GetApnsChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_apns_channel::GetApnsChannelError> for Error {
    fn from(err: crate::operation::get_apns_channel::GetApnsChannelError) -> Self {
        match err {
            crate::operation::get_apns_channel::GetApnsChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_apns_channel::GetApnsChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_apns_channel::GetApnsChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_apns_channel::GetApnsChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_apns_channel::GetApnsChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_apns_channel::GetApnsChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_apns_channel::GetApnsChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_apns_channel::GetApnsChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_apns_sandbox_channel::GetApnsSandboxChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_apns_sandbox_channel::GetApnsSandboxChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_apns_sandbox_channel::GetApnsSandboxChannelError> for Error {
    fn from(err: crate::operation::get_apns_sandbox_channel::GetApnsSandboxChannelError) -> Self {
        match err {
            crate::operation::get_apns_sandbox_channel::GetApnsSandboxChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_apns_sandbox_channel::GetApnsSandboxChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_apns_sandbox_channel::GetApnsSandboxChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_apns_sandbox_channel::GetApnsSandboxChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_apns_sandbox_channel::GetApnsSandboxChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_apns_sandbox_channel::GetApnsSandboxChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_apns_sandbox_channel::GetApnsSandboxChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_apns_sandbox_channel::GetApnsSandboxChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_apns_voip_channel::GetApnsVoipChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_apns_voip_channel::GetApnsVoipChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_apns_voip_channel::GetApnsVoipChannelError> for Error {
    fn from(err: crate::operation::get_apns_voip_channel::GetApnsVoipChannelError) -> Self {
        match err {
            crate::operation::get_apns_voip_channel::GetApnsVoipChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_apns_voip_channel::GetApnsVoipChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_apns_voip_channel::GetApnsVoipChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_apns_voip_channel::GetApnsVoipChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_apns_voip_channel::GetApnsVoipChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_apns_voip_channel::GetApnsVoipChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_apns_voip_channel::GetApnsVoipChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_apns_voip_channel::GetApnsVoipChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_apns_voip_sandbox_channel::GetApnsVoipSandboxChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_apns_voip_sandbox_channel::GetApnsVoipSandboxChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_apns_voip_sandbox_channel::GetApnsVoipSandboxChannelError>
    for Error
{
    fn from(
        err: crate::operation::get_apns_voip_sandbox_channel::GetApnsVoipSandboxChannelError,
    ) -> Self {
        match err {
            crate::operation::get_apns_voip_sandbox_channel::GetApnsVoipSandboxChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_apns_voip_sandbox_channel::GetApnsVoipSandboxChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_apns_voip_sandbox_channel::GetApnsVoipSandboxChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_apns_voip_sandbox_channel::GetApnsVoipSandboxChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_apns_voip_sandbox_channel::GetApnsVoipSandboxChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_apns_voip_sandbox_channel::GetApnsVoipSandboxChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_apns_voip_sandbox_channel::GetApnsVoipSandboxChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_apns_voip_sandbox_channel::GetApnsVoipSandboxChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_app::GetAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_app::GetAppError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_app::GetAppError> for Error {
    fn from(err: crate::operation::get_app::GetAppError) -> Self {
        match err {
            crate::operation::get_app::GetAppError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_app::GetAppError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_app::GetAppError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_app::GetAppError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::operation::get_app::GetAppError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_app::GetAppError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::get_app::GetAppError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_app::GetAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_application_date_range_kpi::GetApplicationDateRangeKpiError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_application_date_range_kpi::GetApplicationDateRangeKpiError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_application_date_range_kpi::GetApplicationDateRangeKpiError>
    for Error
{
    fn from(
        err: crate::operation::get_application_date_range_kpi::GetApplicationDateRangeKpiError,
    ) -> Self {
        match err {
            crate::operation::get_application_date_range_kpi::GetApplicationDateRangeKpiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_application_date_range_kpi::GetApplicationDateRangeKpiError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_application_date_range_kpi::GetApplicationDateRangeKpiError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_application_date_range_kpi::GetApplicationDateRangeKpiError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_application_date_range_kpi::GetApplicationDateRangeKpiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_application_date_range_kpi::GetApplicationDateRangeKpiError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_application_date_range_kpi::GetApplicationDateRangeKpiError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_application_date_range_kpi::GetApplicationDateRangeKpiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_application_settings::GetApplicationSettingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_application_settings::GetApplicationSettingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_application_settings::GetApplicationSettingsError> for Error {
    fn from(err: crate::operation::get_application_settings::GetApplicationSettingsError) -> Self {
        match err {
            crate::operation::get_application_settings::GetApplicationSettingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_application_settings::GetApplicationSettingsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_application_settings::GetApplicationSettingsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_application_settings::GetApplicationSettingsError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_application_settings::GetApplicationSettingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_application_settings::GetApplicationSettingsError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_application_settings::GetApplicationSettingsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_application_settings::GetApplicationSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_apps::GetAppsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_apps::GetAppsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_apps::GetAppsError> for Error {
    fn from(err: crate::operation::get_apps::GetAppsError) -> Self {
        match err {
            crate::operation::get_apps::GetAppsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_apps::GetAppsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_apps::GetAppsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_apps::GetAppsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::operation::get_apps::GetAppsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_apps::GetAppsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::get_apps::GetAppsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_apps::GetAppsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_baidu_channel::GetBaiduChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_baidu_channel::GetBaiduChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_baidu_channel::GetBaiduChannelError> for Error {
    fn from(err: crate::operation::get_baidu_channel::GetBaiduChannelError) -> Self {
        match err {
            crate::operation::get_baidu_channel::GetBaiduChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_baidu_channel::GetBaiduChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_baidu_channel::GetBaiduChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_baidu_channel::GetBaiduChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_baidu_channel::GetBaiduChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_baidu_channel::GetBaiduChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_baidu_channel::GetBaiduChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_baidu_channel::GetBaiduChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_campaign::GetCampaignError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_campaign::GetCampaignError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_campaign::GetCampaignError> for Error {
    fn from(err: crate::operation::get_campaign::GetCampaignError) -> Self {
        match err {
            crate::operation::get_campaign::GetCampaignError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_campaign::GetCampaignError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_campaign::GetCampaignError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::get_campaign::GetCampaignError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::operation::get_campaign::GetCampaignError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_campaign::GetCampaignError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::get_campaign::GetCampaignError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_campaign::GetCampaignError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_campaign_activities::GetCampaignActivitiesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_campaign_activities::GetCampaignActivitiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_campaign_activities::GetCampaignActivitiesError> for Error {
    fn from(err: crate::operation::get_campaign_activities::GetCampaignActivitiesError) -> Self {
        match err {
            crate::operation::get_campaign_activities::GetCampaignActivitiesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_campaign_activities::GetCampaignActivitiesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_campaign_activities::GetCampaignActivitiesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_campaign_activities::GetCampaignActivitiesError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_campaign_activities::GetCampaignActivitiesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_campaign_activities::GetCampaignActivitiesError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_campaign_activities::GetCampaignActivitiesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_campaign_activities::GetCampaignActivitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_campaign_date_range_kpi::GetCampaignDateRangeKpiError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_campaign_date_range_kpi::GetCampaignDateRangeKpiError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_campaign_date_range_kpi::GetCampaignDateRangeKpiError> for Error {
    fn from(
        err: crate::operation::get_campaign_date_range_kpi::GetCampaignDateRangeKpiError,
    ) -> Self {
        match err {
            crate::operation::get_campaign_date_range_kpi::GetCampaignDateRangeKpiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_campaign_date_range_kpi::GetCampaignDateRangeKpiError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_campaign_date_range_kpi::GetCampaignDateRangeKpiError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_campaign_date_range_kpi::GetCampaignDateRangeKpiError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_campaign_date_range_kpi::GetCampaignDateRangeKpiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_campaign_date_range_kpi::GetCampaignDateRangeKpiError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_campaign_date_range_kpi::GetCampaignDateRangeKpiError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_campaign_date_range_kpi::GetCampaignDateRangeKpiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_campaigns::GetCampaignsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_campaigns::GetCampaignsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_campaigns::GetCampaignsError> for Error {
    fn from(err: crate::operation::get_campaigns::GetCampaignsError) -> Self {
        match err {
            crate::operation::get_campaigns::GetCampaignsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_campaigns::GetCampaignsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_campaigns::GetCampaignsError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::get_campaigns::GetCampaignsError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::get_campaigns::GetCampaignsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_campaigns::GetCampaignsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::get_campaigns::GetCampaignsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_campaigns::GetCampaignsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_campaign_version::GetCampaignVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_campaign_version::GetCampaignVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_campaign_version::GetCampaignVersionError> for Error {
    fn from(err: crate::operation::get_campaign_version::GetCampaignVersionError) -> Self {
        match err {
            crate::operation::get_campaign_version::GetCampaignVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_campaign_version::GetCampaignVersionError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_campaign_version::GetCampaignVersionError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_campaign_version::GetCampaignVersionError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_campaign_version::GetCampaignVersionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_campaign_version::GetCampaignVersionError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_campaign_version::GetCampaignVersionError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_campaign_version::GetCampaignVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_campaign_versions::GetCampaignVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_campaign_versions::GetCampaignVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_campaign_versions::GetCampaignVersionsError> for Error {
    fn from(err: crate::operation::get_campaign_versions::GetCampaignVersionsError) -> Self {
        match err {
            crate::operation::get_campaign_versions::GetCampaignVersionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_campaign_versions::GetCampaignVersionsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_campaign_versions::GetCampaignVersionsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_campaign_versions::GetCampaignVersionsError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_campaign_versions::GetCampaignVersionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_campaign_versions::GetCampaignVersionsError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_campaign_versions::GetCampaignVersionsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_campaign_versions::GetCampaignVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_channels::GetChannelsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_channels::GetChannelsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_channels::GetChannelsError> for Error {
    fn from(err: crate::operation::get_channels::GetChannelsError) -> Self {
        match err {
            crate::operation::get_channels::GetChannelsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_channels::GetChannelsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_channels::GetChannelsError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::get_channels::GetChannelsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::operation::get_channels::GetChannelsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_channels::GetChannelsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::get_channels::GetChannelsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_channels::GetChannelsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_email_channel::GetEmailChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_email_channel::GetEmailChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_email_channel::GetEmailChannelError> for Error {
    fn from(err: crate::operation::get_email_channel::GetEmailChannelError) -> Self {
        match err {
            crate::operation::get_email_channel::GetEmailChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_email_channel::GetEmailChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_email_channel::GetEmailChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_email_channel::GetEmailChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_email_channel::GetEmailChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_email_channel::GetEmailChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_email_channel::GetEmailChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_email_channel::GetEmailChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_email_template::GetEmailTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_email_template::GetEmailTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_email_template::GetEmailTemplateError> for Error {
    fn from(err: crate::operation::get_email_template::GetEmailTemplateError) -> Self {
        match err {
            crate::operation::get_email_template::GetEmailTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_email_template::GetEmailTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_email_template::GetEmailTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_email_template::GetEmailTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_email_template::GetEmailTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_email_template::GetEmailTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_email_template::GetEmailTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_email_template::GetEmailTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_endpoint::GetEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_endpoint::GetEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_endpoint::GetEndpointError> for Error {
    fn from(err: crate::operation::get_endpoint::GetEndpointError) -> Self {
        match err {
            crate::operation::get_endpoint::GetEndpointError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_endpoint::GetEndpointError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_endpoint::GetEndpointError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::get_endpoint::GetEndpointError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::operation::get_endpoint::GetEndpointError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_endpoint::GetEndpointError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::get_endpoint::GetEndpointError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_endpoint::GetEndpointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_event_stream::GetEventStreamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_event_stream::GetEventStreamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_event_stream::GetEventStreamError> for Error {
    fn from(err: crate::operation::get_event_stream::GetEventStreamError) -> Self {
        match err {
            crate::operation::get_event_stream::GetEventStreamError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_event_stream::GetEventStreamError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_event_stream::GetEventStreamError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_event_stream::GetEventStreamError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_event_stream::GetEventStreamError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_event_stream::GetEventStreamError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_event_stream::GetEventStreamError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_event_stream::GetEventStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_export_job::GetExportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_export_job::GetExportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_export_job::GetExportJobError> for Error {
    fn from(err: crate::operation::get_export_job::GetExportJobError) -> Self {
        match err {
            crate::operation::get_export_job::GetExportJobError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_export_job::GetExportJobError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_export_job::GetExportJobError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::get_export_job::GetExportJobError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::get_export_job::GetExportJobError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_export_job::GetExportJobError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::get_export_job::GetExportJobError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::get_export_job::GetExportJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::get_export_jobs::GetExportJobsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_export_jobs::GetExportJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_export_jobs::GetExportJobsError> for Error {
    fn from(err: crate::operation::get_export_jobs::GetExportJobsError) -> Self {
        match err {
            crate::operation::get_export_jobs::GetExportJobsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_export_jobs::GetExportJobsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_export_jobs::GetExportJobsError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::get_export_jobs::GetExportJobsError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::get_export_jobs::GetExportJobsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_export_jobs::GetExportJobsError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::get_export_jobs::GetExportJobsError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::get_export_jobs::GetExportJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::get_gcm_channel::GetGcmChannelError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_gcm_channel::GetGcmChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_gcm_channel::GetGcmChannelError> for Error {
    fn from(err: crate::operation::get_gcm_channel::GetGcmChannelError) -> Self {
        match err {
            crate::operation::get_gcm_channel::GetGcmChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_gcm_channel::GetGcmChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_gcm_channel::GetGcmChannelError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::get_gcm_channel::GetGcmChannelError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::get_gcm_channel::GetGcmChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_gcm_channel::GetGcmChannelError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::get_gcm_channel::GetGcmChannelError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::get_gcm_channel::GetGcmChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_import_job::GetImportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_import_job::GetImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_import_job::GetImportJobError> for Error {
    fn from(err: crate::operation::get_import_job::GetImportJobError) -> Self {
        match err {
            crate::operation::get_import_job::GetImportJobError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_import_job::GetImportJobError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_import_job::GetImportJobError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::get_import_job::GetImportJobError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::get_import_job::GetImportJobError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_import_job::GetImportJobError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::get_import_job::GetImportJobError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::get_import_job::GetImportJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::get_import_jobs::GetImportJobsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_import_jobs::GetImportJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_import_jobs::GetImportJobsError> for Error {
    fn from(err: crate::operation::get_import_jobs::GetImportJobsError) -> Self {
        match err {
            crate::operation::get_import_jobs::GetImportJobsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_import_jobs::GetImportJobsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_import_jobs::GetImportJobsError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::get_import_jobs::GetImportJobsError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::get_import_jobs::GetImportJobsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_import_jobs::GetImportJobsError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::get_import_jobs::GetImportJobsError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::get_import_jobs::GetImportJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_in_app_messages::GetInAppMessagesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_in_app_messages::GetInAppMessagesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_in_app_messages::GetInAppMessagesError> for Error {
    fn from(err: crate::operation::get_in_app_messages::GetInAppMessagesError) -> Self {
        match err {
            crate::operation::get_in_app_messages::GetInAppMessagesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_in_app_messages::GetInAppMessagesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_in_app_messages::GetInAppMessagesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_in_app_messages::GetInAppMessagesError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_in_app_messages::GetInAppMessagesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_in_app_messages::GetInAppMessagesError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_in_app_messages::GetInAppMessagesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_in_app_messages::GetInAppMessagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_in_app_template::GetInAppTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_in_app_template::GetInAppTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_in_app_template::GetInAppTemplateError> for Error {
    fn from(err: crate::operation::get_in_app_template::GetInAppTemplateError) -> Self {
        match err {
            crate::operation::get_in_app_template::GetInAppTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_in_app_template::GetInAppTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_in_app_template::GetInAppTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_in_app_template::GetInAppTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_in_app_template::GetInAppTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_in_app_template::GetInAppTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_in_app_template::GetInAppTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_in_app_template::GetInAppTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_journey::GetJourneyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_journey::GetJourneyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_journey::GetJourneyError> for Error {
    fn from(err: crate::operation::get_journey::GetJourneyError) -> Self {
        match err {
            crate::operation::get_journey::GetJourneyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_journey::GetJourneyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_journey::GetJourneyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_journey::GetJourneyError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::operation::get_journey::GetJourneyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_journey::GetJourneyError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::get_journey::GetJourneyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_journey::GetJourneyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_journey_date_range_kpi::GetJourneyDateRangeKpiError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_journey_date_range_kpi::GetJourneyDateRangeKpiError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_journey_date_range_kpi::GetJourneyDateRangeKpiError> for Error {
    fn from(
        err: crate::operation::get_journey_date_range_kpi::GetJourneyDateRangeKpiError,
    ) -> Self {
        match err {
            crate::operation::get_journey_date_range_kpi::GetJourneyDateRangeKpiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_journey_date_range_kpi::GetJourneyDateRangeKpiError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_journey_date_range_kpi::GetJourneyDateRangeKpiError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_journey_date_range_kpi::GetJourneyDateRangeKpiError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_journey_date_range_kpi::GetJourneyDateRangeKpiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_journey_date_range_kpi::GetJourneyDateRangeKpiError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_journey_date_range_kpi::GetJourneyDateRangeKpiError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_journey_date_range_kpi::GetJourneyDateRangeKpiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsError> for Error {
    fn from(err: crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsError) -> Self {
        match err {
            crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_journey_execution_metrics::GetJourneyExecutionMetricsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_journey_execution_metrics::GetJourneyExecutionMetricsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_journey_execution_metrics::GetJourneyExecutionMetricsError>
    for Error
{
    fn from(
        err: crate::operation::get_journey_execution_metrics::GetJourneyExecutionMetricsError,
    ) -> Self {
        match err {
            crate::operation::get_journey_execution_metrics::GetJourneyExecutionMetricsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_journey_execution_metrics::GetJourneyExecutionMetricsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_journey_execution_metrics::GetJourneyExecutionMetricsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_journey_execution_metrics::GetJourneyExecutionMetricsError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_journey_execution_metrics::GetJourneyExecutionMetricsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_journey_execution_metrics::GetJourneyExecutionMetricsError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_journey_execution_metrics::GetJourneyExecutionMetricsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_journey_execution_metrics::GetJourneyExecutionMetricsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_push_template::GetPushTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_push_template::GetPushTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_push_template::GetPushTemplateError> for Error {
    fn from(err: crate::operation::get_push_template::GetPushTemplateError) -> Self {
        match err {
            crate::operation::get_push_template::GetPushTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_push_template::GetPushTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_push_template::GetPushTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_push_template::GetPushTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_push_template::GetPushTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_push_template::GetPushTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_push_template::GetPushTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_push_template::GetPushTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_recommender_configuration::GetRecommenderConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_recommender_configuration::GetRecommenderConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_recommender_configuration::GetRecommenderConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::get_recommender_configuration::GetRecommenderConfigurationError,
    ) -> Self {
        match err {
            crate::operation::get_recommender_configuration::GetRecommenderConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_recommender_configuration::GetRecommenderConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_recommender_configuration::GetRecommenderConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_recommender_configuration::GetRecommenderConfigurationError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_recommender_configuration::GetRecommenderConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_recommender_configuration::GetRecommenderConfigurationError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_recommender_configuration::GetRecommenderConfigurationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_recommender_configuration::GetRecommenderConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_recommender_configurations::GetRecommenderConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_recommender_configurations::GetRecommenderConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_recommender_configurations::GetRecommenderConfigurationsError>
    for Error
{
    fn from(
        err: crate::operation::get_recommender_configurations::GetRecommenderConfigurationsError,
    ) -> Self {
        match err {
            crate::operation::get_recommender_configurations::GetRecommenderConfigurationsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_recommender_configurations::GetRecommenderConfigurationsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_recommender_configurations::GetRecommenderConfigurationsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_recommender_configurations::GetRecommenderConfigurationsError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_recommender_configurations::GetRecommenderConfigurationsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_recommender_configurations::GetRecommenderConfigurationsError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_recommender_configurations::GetRecommenderConfigurationsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_recommender_configurations::GetRecommenderConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_segment::GetSegmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_segment::GetSegmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_segment::GetSegmentError> for Error {
    fn from(err: crate::operation::get_segment::GetSegmentError) -> Self {
        match err {
            crate::operation::get_segment::GetSegmentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_segment::GetSegmentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_segment::GetSegmentError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_segment::GetSegmentError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::operation::get_segment::GetSegmentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_segment::GetSegmentError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::get_segment::GetSegmentError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_segment::GetSegmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_segment_export_jobs::GetSegmentExportJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_segment_export_jobs::GetSegmentExportJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_segment_export_jobs::GetSegmentExportJobsError> for Error {
    fn from(err: crate::operation::get_segment_export_jobs::GetSegmentExportJobsError) -> Self {
        match err {
            crate::operation::get_segment_export_jobs::GetSegmentExportJobsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_segment_export_jobs::GetSegmentExportJobsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_segment_export_jobs::GetSegmentExportJobsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_segment_export_jobs::GetSegmentExportJobsError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_segment_export_jobs::GetSegmentExportJobsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_segment_export_jobs::GetSegmentExportJobsError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_segment_export_jobs::GetSegmentExportJobsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_segment_export_jobs::GetSegmentExportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_segment_import_jobs::GetSegmentImportJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_segment_import_jobs::GetSegmentImportJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_segment_import_jobs::GetSegmentImportJobsError> for Error {
    fn from(err: crate::operation::get_segment_import_jobs::GetSegmentImportJobsError) -> Self {
        match err {
            crate::operation::get_segment_import_jobs::GetSegmentImportJobsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_segment_import_jobs::GetSegmentImportJobsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_segment_import_jobs::GetSegmentImportJobsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_segment_import_jobs::GetSegmentImportJobsError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_segment_import_jobs::GetSegmentImportJobsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_segment_import_jobs::GetSegmentImportJobsError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_segment_import_jobs::GetSegmentImportJobsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_segment_import_jobs::GetSegmentImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_segments::GetSegmentsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_segments::GetSegmentsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_segments::GetSegmentsError> for Error {
    fn from(err: crate::operation::get_segments::GetSegmentsError) -> Self {
        match err {
            crate::operation::get_segments::GetSegmentsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_segments::GetSegmentsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_segments::GetSegmentsError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::get_segments::GetSegmentsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::operation::get_segments::GetSegmentsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_segments::GetSegmentsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::get_segments::GetSegmentsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_segments::GetSegmentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_segment_version::GetSegmentVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_segment_version::GetSegmentVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_segment_version::GetSegmentVersionError> for Error {
    fn from(err: crate::operation::get_segment_version::GetSegmentVersionError) -> Self {
        match err {
            crate::operation::get_segment_version::GetSegmentVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_segment_version::GetSegmentVersionError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_segment_version::GetSegmentVersionError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_segment_version::GetSegmentVersionError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_segment_version::GetSegmentVersionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_segment_version::GetSegmentVersionError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_segment_version::GetSegmentVersionError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_segment_version::GetSegmentVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_segment_versions::GetSegmentVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_segment_versions::GetSegmentVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_segment_versions::GetSegmentVersionsError> for Error {
    fn from(err: crate::operation::get_segment_versions::GetSegmentVersionsError) -> Self {
        match err {
            crate::operation::get_segment_versions::GetSegmentVersionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_segment_versions::GetSegmentVersionsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_segment_versions::GetSegmentVersionsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_segment_versions::GetSegmentVersionsError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_segment_versions::GetSegmentVersionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_segment_versions::GetSegmentVersionsError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_segment_versions::GetSegmentVersionsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_segment_versions::GetSegmentVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::get_sms_channel::GetSmsChannelError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_sms_channel::GetSmsChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_sms_channel::GetSmsChannelError> for Error {
    fn from(err: crate::operation::get_sms_channel::GetSmsChannelError) -> Self {
        match err {
            crate::operation::get_sms_channel::GetSmsChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_sms_channel::GetSmsChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_sms_channel::GetSmsChannelError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::get_sms_channel::GetSmsChannelError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::get_sms_channel::GetSmsChannelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_sms_channel::GetSmsChannelError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::get_sms_channel::GetSmsChannelError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::get_sms_channel::GetSmsChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_sms_template::GetSmsTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_sms_template::GetSmsTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_sms_template::GetSmsTemplateError> for Error {
    fn from(err: crate::operation::get_sms_template::GetSmsTemplateError) -> Self {
        match err {
            crate::operation::get_sms_template::GetSmsTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_sms_template::GetSmsTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_sms_template::GetSmsTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_sms_template::GetSmsTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_sms_template::GetSmsTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_sms_template::GetSmsTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_sms_template::GetSmsTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_sms_template::GetSmsTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_user_endpoints::GetUserEndpointsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_user_endpoints::GetUserEndpointsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_user_endpoints::GetUserEndpointsError> for Error {
    fn from(err: crate::operation::get_user_endpoints::GetUserEndpointsError) -> Self {
        match err {
            crate::operation::get_user_endpoints::GetUserEndpointsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_user_endpoints::GetUserEndpointsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_user_endpoints::GetUserEndpointsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_user_endpoints::GetUserEndpointsError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_user_endpoints::GetUserEndpointsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_user_endpoints::GetUserEndpointsError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_user_endpoints::GetUserEndpointsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_user_endpoints::GetUserEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_voice_channel::GetVoiceChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_voice_channel::GetVoiceChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_voice_channel::GetVoiceChannelError> for Error {
    fn from(err: crate::operation::get_voice_channel::GetVoiceChannelError) -> Self {
        match err {
            crate::operation::get_voice_channel::GetVoiceChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_voice_channel::GetVoiceChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_voice_channel::GetVoiceChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_voice_channel::GetVoiceChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_voice_channel::GetVoiceChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_voice_channel::GetVoiceChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_voice_channel::GetVoiceChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_voice_channel::GetVoiceChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_voice_template::GetVoiceTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_voice_template::GetVoiceTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_voice_template::GetVoiceTemplateError> for Error {
    fn from(err: crate::operation::get_voice_template::GetVoiceTemplateError) -> Self {
        match err {
            crate::operation::get_voice_template::GetVoiceTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_voice_template::GetVoiceTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_voice_template::GetVoiceTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_voice_template::GetVoiceTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::get_voice_template::GetVoiceTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_voice_template::GetVoiceTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::get_voice_template::GetVoiceTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_voice_template::GetVoiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_journeys::ListJourneysError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_journeys::ListJourneysError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_journeys::ListJourneysError> for Error {
    fn from(err: crate::operation::list_journeys::ListJourneysError) -> Self {
        match err {
            crate::operation::list_journeys::ListJourneysError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_journeys::ListJourneysError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::list_journeys::ListJourneysError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::list_journeys::ListJourneysError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::list_journeys::ListJourneysError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_journeys::ListJourneysError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::list_journeys::ListJourneysError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::list_journeys::ListJourneysError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_templates::ListTemplatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_templates::ListTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_templates::ListTemplatesError> for Error {
    fn from(err: crate::operation::list_templates::ListTemplatesError) -> Self {
        match err {
            crate::operation::list_templates::ListTemplatesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_templates::ListTemplatesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::list_templates::ListTemplatesError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::list_templates::ListTemplatesError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::list_templates::ListTemplatesError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::list_templates::ListTemplatesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_template_versions::ListTemplateVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_template_versions::ListTemplateVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_template_versions::ListTemplateVersionsError> for Error {
    fn from(err: crate::operation::list_template_versions::ListTemplateVersionsError) -> Self {
        match err {
            crate::operation::list_template_versions::ListTemplateVersionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_template_versions::ListTemplateVersionsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_template_versions::ListTemplateVersionsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_template_versions::ListTemplateVersionsError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::list_template_versions::ListTemplateVersionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_template_versions::ListTemplateVersionsError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::list_template_versions::ListTemplateVersionsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_template_versions::ListTemplateVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::phone_number_validate::PhoneNumberValidateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::phone_number_validate::PhoneNumberValidateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::phone_number_validate::PhoneNumberValidateError> for Error {
    fn from(err: crate::operation::phone_number_validate::PhoneNumberValidateError) -> Self {
        match err {
            crate::operation::phone_number_validate::PhoneNumberValidateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::phone_number_validate::PhoneNumberValidateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::phone_number_validate::PhoneNumberValidateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::phone_number_validate::PhoneNumberValidateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::phone_number_validate::PhoneNumberValidateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::phone_number_validate::PhoneNumberValidateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::phone_number_validate::PhoneNumberValidateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::phone_number_validate::PhoneNumberValidateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::put_events::PutEventsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::put_events::PutEventsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_events::PutEventsError> for Error {
    fn from(err: crate::operation::put_events::PutEventsError) -> Self {
        match err {
            crate::operation::put_events::PutEventsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::put_events::PutEventsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::put_events::PutEventsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::put_events::PutEventsError::MethodNotAllowedException(inner) => {
                Error::MethodNotAllowedException(inner)
            }
            crate::operation::put_events::PutEventsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::put_events::PutEventsError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::put_events::PutEventsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::put_events::PutEventsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_event_stream::PutEventStreamError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_event_stream::PutEventStreamError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_event_stream::PutEventStreamError> for Error {
    fn from(err: crate::operation::put_event_stream::PutEventStreamError) -> Self {
        match err {
            crate::operation::put_event_stream::PutEventStreamError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_event_stream::PutEventStreamError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::put_event_stream::PutEventStreamError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::put_event_stream::PutEventStreamError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::put_event_stream::PutEventStreamError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_event_stream::PutEventStreamError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::put_event_stream::PutEventStreamError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::put_event_stream::PutEventStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_attributes::RemoveAttributesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_attributes::RemoveAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_attributes::RemoveAttributesError> for Error {
    fn from(err: crate::operation::remove_attributes::RemoveAttributesError) -> Self {
        match err {
            crate::operation::remove_attributes::RemoveAttributesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::remove_attributes::RemoveAttributesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::remove_attributes::RemoveAttributesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::remove_attributes::RemoveAttributesError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::remove_attributes::RemoveAttributesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::remove_attributes::RemoveAttributesError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::remove_attributes::RemoveAttributesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::remove_attributes::RemoveAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::send_messages::SendMessagesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::send_messages::SendMessagesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_messages::SendMessagesError> for Error {
    fn from(err: crate::operation::send_messages::SendMessagesError) -> Self {
        match err {
            crate::operation::send_messages::SendMessagesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::send_messages::SendMessagesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::send_messages::SendMessagesError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::send_messages::SendMessagesError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::send_messages::SendMessagesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::send_messages::SendMessagesError::PayloadTooLargeException(inner) => {
                Error::PayloadTooLargeException(inner)
            }
            crate::operation::send_messages::SendMessagesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::send_messages::SendMessagesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::send_otp_message::SendOTPMessageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::send_otp_message::SendOTPMessageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_otp_message::SendOTPMessageError> for Error {
    fn from(err: crate::operation::send_otp_message::SendOTPMessageError) -> Self {
        match err {
            crate::operation::send_otp_message::SendOTPMessageError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::send_otp_message::SendOTPMessageError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::send_otp_message::SendOTPMessageError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::send_otp_message::SendOTPMessageError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::send_otp_message::SendOTPMessageError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::send_otp_message::SendOTPMessageError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::send_otp_message::SendOTPMessageError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::send_otp_message::SendOTPMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::send_users_messages::SendUsersMessagesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::send_users_messages::SendUsersMessagesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_users_messages::SendUsersMessagesError> for Error {
    fn from(err: crate::operation::send_users_messages::SendUsersMessagesError) -> Self {
        match err {
            crate::operation::send_users_messages::SendUsersMessagesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::send_users_messages::SendUsersMessagesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::send_users_messages::SendUsersMessagesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::send_users_messages::SendUsersMessagesError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::send_users_messages::SendUsersMessagesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::send_users_messages::SendUsersMessagesError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::send_users_messages::SendUsersMessagesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::send_users_messages::SendUsersMessagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_adm_channel::UpdateAdmChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_adm_channel::UpdateAdmChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_adm_channel::UpdateAdmChannelError> for Error {
    fn from(err: crate::operation::update_adm_channel::UpdateAdmChannelError) -> Self {
        match err {
            crate::operation::update_adm_channel::UpdateAdmChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_adm_channel::UpdateAdmChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_adm_channel::UpdateAdmChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_adm_channel::UpdateAdmChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_adm_channel::UpdateAdmChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_adm_channel::UpdateAdmChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_adm_channel::UpdateAdmChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_adm_channel::UpdateAdmChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_apns_channel::UpdateApnsChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_apns_channel::UpdateApnsChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_apns_channel::UpdateApnsChannelError> for Error {
    fn from(err: crate::operation::update_apns_channel::UpdateApnsChannelError) -> Self {
        match err {
            crate::operation::update_apns_channel::UpdateApnsChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_apns_channel::UpdateApnsChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_apns_channel::UpdateApnsChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_apns_channel::UpdateApnsChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_apns_channel::UpdateApnsChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_apns_channel::UpdateApnsChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_apns_channel::UpdateApnsChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_apns_channel::UpdateApnsChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_apns_sandbox_channel::UpdateApnsSandboxChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_apns_sandbox_channel::UpdateApnsSandboxChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_apns_sandbox_channel::UpdateApnsSandboxChannelError> for Error {
    fn from(
        err: crate::operation::update_apns_sandbox_channel::UpdateApnsSandboxChannelError,
    ) -> Self {
        match err {
            crate::operation::update_apns_sandbox_channel::UpdateApnsSandboxChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_apns_sandbox_channel::UpdateApnsSandboxChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_apns_sandbox_channel::UpdateApnsSandboxChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_apns_sandbox_channel::UpdateApnsSandboxChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_apns_sandbox_channel::UpdateApnsSandboxChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_apns_sandbox_channel::UpdateApnsSandboxChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_apns_sandbox_channel::UpdateApnsSandboxChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_apns_sandbox_channel::UpdateApnsSandboxChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_apns_voip_channel::UpdateApnsVoipChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_apns_voip_channel::UpdateApnsVoipChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_apns_voip_channel::UpdateApnsVoipChannelError> for Error {
    fn from(err: crate::operation::update_apns_voip_channel::UpdateApnsVoipChannelError) -> Self {
        match err {
            crate::operation::update_apns_voip_channel::UpdateApnsVoipChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_apns_voip_channel::UpdateApnsVoipChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_apns_voip_channel::UpdateApnsVoipChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_apns_voip_channel::UpdateApnsVoipChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_apns_voip_channel::UpdateApnsVoipChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_apns_voip_channel::UpdateApnsVoipChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_apns_voip_channel::UpdateApnsVoipChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_apns_voip_channel::UpdateApnsVoipChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_apns_voip_sandbox_channel::UpdateApnsVoipSandboxChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_apns_voip_sandbox_channel::UpdateApnsVoipSandboxChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_apns_voip_sandbox_channel::UpdateApnsVoipSandboxChannelError>
    for Error
{
    fn from(
        err: crate::operation::update_apns_voip_sandbox_channel::UpdateApnsVoipSandboxChannelError,
    ) -> Self {
        match err {
            crate::operation::update_apns_voip_sandbox_channel::UpdateApnsVoipSandboxChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_apns_voip_sandbox_channel::UpdateApnsVoipSandboxChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_apns_voip_sandbox_channel::UpdateApnsVoipSandboxChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_apns_voip_sandbox_channel::UpdateApnsVoipSandboxChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_apns_voip_sandbox_channel::UpdateApnsVoipSandboxChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_apns_voip_sandbox_channel::UpdateApnsVoipSandboxChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_apns_voip_sandbox_channel::UpdateApnsVoipSandboxChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_apns_voip_sandbox_channel::UpdateApnsVoipSandboxChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_application_settings::UpdateApplicationSettingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_application_settings::UpdateApplicationSettingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_application_settings::UpdateApplicationSettingsError> for Error {
    fn from(
        err: crate::operation::update_application_settings::UpdateApplicationSettingsError,
    ) -> Self {
        match err {
            crate::operation::update_application_settings::UpdateApplicationSettingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_application_settings::UpdateApplicationSettingsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_application_settings::UpdateApplicationSettingsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_application_settings::UpdateApplicationSettingsError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_application_settings::UpdateApplicationSettingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_application_settings::UpdateApplicationSettingsError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_application_settings::UpdateApplicationSettingsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_application_settings::UpdateApplicationSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_baidu_channel::UpdateBaiduChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_baidu_channel::UpdateBaiduChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_baidu_channel::UpdateBaiduChannelError> for Error {
    fn from(err: crate::operation::update_baidu_channel::UpdateBaiduChannelError) -> Self {
        match err {
            crate::operation::update_baidu_channel::UpdateBaiduChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_baidu_channel::UpdateBaiduChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_baidu_channel::UpdateBaiduChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_baidu_channel::UpdateBaiduChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_baidu_channel::UpdateBaiduChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_baidu_channel::UpdateBaiduChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_baidu_channel::UpdateBaiduChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_baidu_channel::UpdateBaiduChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_campaign::UpdateCampaignError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_campaign::UpdateCampaignError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_campaign::UpdateCampaignError> for Error {
    fn from(err: crate::operation::update_campaign::UpdateCampaignError) -> Self {
        match err {
            crate::operation::update_campaign::UpdateCampaignError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_campaign::UpdateCampaignError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_campaign::UpdateCampaignError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_campaign::UpdateCampaignError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_campaign::UpdateCampaignError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_campaign::UpdateCampaignError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_campaign::UpdateCampaignError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_campaign::UpdateCampaignError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_email_channel::UpdateEmailChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_email_channel::UpdateEmailChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_email_channel::UpdateEmailChannelError> for Error {
    fn from(err: crate::operation::update_email_channel::UpdateEmailChannelError) -> Self {
        match err {
            crate::operation::update_email_channel::UpdateEmailChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_email_channel::UpdateEmailChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_email_channel::UpdateEmailChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_email_channel::UpdateEmailChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_email_channel::UpdateEmailChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_email_channel::UpdateEmailChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_email_channel::UpdateEmailChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_email_channel::UpdateEmailChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_email_template::UpdateEmailTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_email_template::UpdateEmailTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_email_template::UpdateEmailTemplateError> for Error {
    fn from(err: crate::operation::update_email_template::UpdateEmailTemplateError) -> Self {
        match err {
            crate::operation::update_email_template::UpdateEmailTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_email_template::UpdateEmailTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_email_template::UpdateEmailTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_email_template::UpdateEmailTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_email_template::UpdateEmailTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_email_template::UpdateEmailTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_email_template::UpdateEmailTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_email_template::UpdateEmailTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_endpoint::UpdateEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_endpoint::UpdateEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_endpoint::UpdateEndpointError> for Error {
    fn from(err: crate::operation::update_endpoint::UpdateEndpointError) -> Self {
        match err {
            crate::operation::update_endpoint::UpdateEndpointError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_endpoint::UpdateEndpointError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_endpoint::UpdateEndpointError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_endpoint::UpdateEndpointError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_endpoint::UpdateEndpointError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_endpoint::UpdateEndpointError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_endpoint::UpdateEndpointError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_endpoint::UpdateEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_endpoints_batch::UpdateEndpointsBatchError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_endpoints_batch::UpdateEndpointsBatchError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_endpoints_batch::UpdateEndpointsBatchError> for Error {
    fn from(err: crate::operation::update_endpoints_batch::UpdateEndpointsBatchError) -> Self {
        match err {
            crate::operation::update_endpoints_batch::UpdateEndpointsBatchError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_endpoints_batch::UpdateEndpointsBatchError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_endpoints_batch::UpdateEndpointsBatchError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_endpoints_batch::UpdateEndpointsBatchError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_endpoints_batch::UpdateEndpointsBatchError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_endpoints_batch::UpdateEndpointsBatchError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_endpoints_batch::UpdateEndpointsBatchError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_endpoints_batch::UpdateEndpointsBatchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_gcm_channel::UpdateGcmChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_gcm_channel::UpdateGcmChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_gcm_channel::UpdateGcmChannelError> for Error {
    fn from(err: crate::operation::update_gcm_channel::UpdateGcmChannelError) -> Self {
        match err {
            crate::operation::update_gcm_channel::UpdateGcmChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_gcm_channel::UpdateGcmChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_gcm_channel::UpdateGcmChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_gcm_channel::UpdateGcmChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_gcm_channel::UpdateGcmChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_gcm_channel::UpdateGcmChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_gcm_channel::UpdateGcmChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_gcm_channel::UpdateGcmChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_in_app_template::UpdateInAppTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_in_app_template::UpdateInAppTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_in_app_template::UpdateInAppTemplateError> for Error {
    fn from(err: crate::operation::update_in_app_template::UpdateInAppTemplateError) -> Self {
        match err {
            crate::operation::update_in_app_template::UpdateInAppTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_in_app_template::UpdateInAppTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_in_app_template::UpdateInAppTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_in_app_template::UpdateInAppTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_in_app_template::UpdateInAppTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_in_app_template::UpdateInAppTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_in_app_template::UpdateInAppTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_in_app_template::UpdateInAppTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_journey::UpdateJourneyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_journey::UpdateJourneyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_journey::UpdateJourneyError> for Error {
    fn from(err: crate::operation::update_journey::UpdateJourneyError) -> Self {
        match err {
            crate::operation::update_journey::UpdateJourneyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_journey::UpdateJourneyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_journey::UpdateJourneyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_journey::UpdateJourneyError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::update_journey::UpdateJourneyError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::update_journey::UpdateJourneyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_journey::UpdateJourneyError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::update_journey::UpdateJourneyError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::update_journey::UpdateJourneyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_journey_state::UpdateJourneyStateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_journey_state::UpdateJourneyStateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_journey_state::UpdateJourneyStateError> for Error {
    fn from(err: crate::operation::update_journey_state::UpdateJourneyStateError) -> Self {
        match err {
            crate::operation::update_journey_state::UpdateJourneyStateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_journey_state::UpdateJourneyStateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_journey_state::UpdateJourneyStateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_journey_state::UpdateJourneyStateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_journey_state::UpdateJourneyStateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_journey_state::UpdateJourneyStateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_journey_state::UpdateJourneyStateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_journey_state::UpdateJourneyStateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_push_template::UpdatePushTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_push_template::UpdatePushTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_push_template::UpdatePushTemplateError> for Error {
    fn from(err: crate::operation::update_push_template::UpdatePushTemplateError) -> Self {
        match err {
            crate::operation::update_push_template::UpdatePushTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_push_template::UpdatePushTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_push_template::UpdatePushTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_push_template::UpdatePushTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_push_template::UpdatePushTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_push_template::UpdatePushTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_push_template::UpdatePushTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_push_template::UpdatePushTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_recommender_configuration::UpdateRecommenderConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_recommender_configuration::UpdateRecommenderConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_recommender_configuration::UpdateRecommenderConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::update_recommender_configuration::UpdateRecommenderConfigurationError,
    ) -> Self {
        match err {
            crate::operation::update_recommender_configuration::UpdateRecommenderConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_recommender_configuration::UpdateRecommenderConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_recommender_configuration::UpdateRecommenderConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_recommender_configuration::UpdateRecommenderConfigurationError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_recommender_configuration::UpdateRecommenderConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_recommender_configuration::UpdateRecommenderConfigurationError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_recommender_configuration::UpdateRecommenderConfigurationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_recommender_configuration::UpdateRecommenderConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_segment::UpdateSegmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_segment::UpdateSegmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_segment::UpdateSegmentError> for Error {
    fn from(err: crate::operation::update_segment::UpdateSegmentError) -> Self {
        match err {
            crate::operation::update_segment::UpdateSegmentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_segment::UpdateSegmentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_segment::UpdateSegmentError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::update_segment::UpdateSegmentError::MethodNotAllowedException(
                inner,
            ) => Error::MethodNotAllowedException(inner),
            crate::operation::update_segment::UpdateSegmentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_segment::UpdateSegmentError::PayloadTooLargeException(
                inner,
            ) => Error::PayloadTooLargeException(inner),
            crate::operation::update_segment::UpdateSegmentError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::operation::update_segment::UpdateSegmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_sms_channel::UpdateSmsChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_sms_channel::UpdateSmsChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_sms_channel::UpdateSmsChannelError> for Error {
    fn from(err: crate::operation::update_sms_channel::UpdateSmsChannelError) -> Self {
        match err {
            crate::operation::update_sms_channel::UpdateSmsChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_sms_channel::UpdateSmsChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_sms_channel::UpdateSmsChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_sms_channel::UpdateSmsChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_sms_channel::UpdateSmsChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_sms_channel::UpdateSmsChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_sms_channel::UpdateSmsChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_sms_channel::UpdateSmsChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_sms_template::UpdateSmsTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_sms_template::UpdateSmsTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_sms_template::UpdateSmsTemplateError> for Error {
    fn from(err: crate::operation::update_sms_template::UpdateSmsTemplateError) -> Self {
        match err {
            crate::operation::update_sms_template::UpdateSmsTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_sms_template::UpdateSmsTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_sms_template::UpdateSmsTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_sms_template::UpdateSmsTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_sms_template::UpdateSmsTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_sms_template::UpdateSmsTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_sms_template::UpdateSmsTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_sms_template::UpdateSmsTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_template_active_version::UpdateTemplateActiveVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_template_active_version::UpdateTemplateActiveVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_template_active_version::UpdateTemplateActiveVersionError>
    for Error
{
    fn from(
        err: crate::operation::update_template_active_version::UpdateTemplateActiveVersionError,
    ) -> Self {
        match err {
            crate::operation::update_template_active_version::UpdateTemplateActiveVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_template_active_version::UpdateTemplateActiveVersionError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_template_active_version::UpdateTemplateActiveVersionError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_template_active_version::UpdateTemplateActiveVersionError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_template_active_version::UpdateTemplateActiveVersionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_template_active_version::UpdateTemplateActiveVersionError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_template_active_version::UpdateTemplateActiveVersionError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_template_active_version::UpdateTemplateActiveVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_voice_channel::UpdateVoiceChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_voice_channel::UpdateVoiceChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_voice_channel::UpdateVoiceChannelError> for Error {
    fn from(err: crate::operation::update_voice_channel::UpdateVoiceChannelError) -> Self {
        match err {
            crate::operation::update_voice_channel::UpdateVoiceChannelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_voice_channel::UpdateVoiceChannelError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_voice_channel::UpdateVoiceChannelError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_voice_channel::UpdateVoiceChannelError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_voice_channel::UpdateVoiceChannelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_voice_channel::UpdateVoiceChannelError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_voice_channel::UpdateVoiceChannelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_voice_channel::UpdateVoiceChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_voice_template::UpdateVoiceTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_voice_template::UpdateVoiceTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_voice_template::UpdateVoiceTemplateError> for Error {
    fn from(err: crate::operation::update_voice_template::UpdateVoiceTemplateError) -> Self {
        match err {
            crate::operation::update_voice_template::UpdateVoiceTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_voice_template::UpdateVoiceTemplateError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_voice_template::UpdateVoiceTemplateError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_voice_template::UpdateVoiceTemplateError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::update_voice_template::UpdateVoiceTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_voice_template::UpdateVoiceTemplateError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::update_voice_template::UpdateVoiceTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_voice_template::UpdateVoiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::verify_otp_message::VerifyOTPMessageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::verify_otp_message::VerifyOTPMessageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::verify_otp_message::VerifyOTPMessageError> for Error {
    fn from(err: crate::operation::verify_otp_message::VerifyOTPMessageError) -> Self {
        match err {
            crate::operation::verify_otp_message::VerifyOTPMessageError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::verify_otp_message::VerifyOTPMessageError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::verify_otp_message::VerifyOTPMessageError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::verify_otp_message::VerifyOTPMessageError::MethodNotAllowedException(inner) => Error::MethodNotAllowedException(inner),
            crate::operation::verify_otp_message::VerifyOTPMessageError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::verify_otp_message::VerifyOTPMessageError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::verify_otp_message::VerifyOTPMessageError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::verify_otp_message::VerifyOTPMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::MethodNotAllowedException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::PayloadTooLargeException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
