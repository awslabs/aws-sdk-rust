// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateVoiceTemplateOutput {
    /// <p>Provides information about an API request or response.</p>
    pub message_body: std::option::Option<crate::model::MessageBody>,
}
impl std::fmt::Debug for UpdateVoiceTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateVoiceTemplateOutput");
        formatter.field("message_body", &self.message_body);
        formatter.finish()
    }
}
/// See [`UpdateVoiceTemplateOutput`](crate::output::UpdateVoiceTemplateOutput)
pub mod update_voice_template_output {
    /// A builder for [`UpdateVoiceTemplateOutput`](crate::output::UpdateVoiceTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_body: std::option::Option<crate::model::MessageBody>,
    }
    impl Builder {
        /// <p>Provides information about an API request or response.</p>
        pub fn message_body(mut self, input: crate::model::MessageBody) -> Self {
            self.message_body = Some(input);
            self
        }
        pub fn set_message_body(
            mut self,
            input: std::option::Option<crate::model::MessageBody>,
        ) -> Self {
            self.message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVoiceTemplateOutput`](crate::output::UpdateVoiceTemplateOutput)
        pub fn build(self) -> crate::output::UpdateVoiceTemplateOutput {
            crate::output::UpdateVoiceTemplateOutput {
                message_body: self.message_body,
            }
        }
    }
}
impl UpdateVoiceTemplateOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVoiceTemplateOutput`](crate::output::UpdateVoiceTemplateOutput)
    pub fn builder() -> crate::output::update_voice_template_output::Builder {
        crate::output::update_voice_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateVoiceChannelOutput {
    /// <p>Provides information about the status and settings of the voice channel for an application.</p>
    pub voice_channel_response: std::option::Option<crate::model::VoiceChannelResponse>,
}
impl std::fmt::Debug for UpdateVoiceChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateVoiceChannelOutput");
        formatter.field("voice_channel_response", &self.voice_channel_response);
        formatter.finish()
    }
}
/// See [`UpdateVoiceChannelOutput`](crate::output::UpdateVoiceChannelOutput)
pub mod update_voice_channel_output {
    /// A builder for [`UpdateVoiceChannelOutput`](crate::output::UpdateVoiceChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_channel_response: std::option::Option<crate::model::VoiceChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the voice channel for an application.</p>
        pub fn voice_channel_response(mut self, input: crate::model::VoiceChannelResponse) -> Self {
            self.voice_channel_response = Some(input);
            self
        }
        pub fn set_voice_channel_response(
            mut self,
            input: std::option::Option<crate::model::VoiceChannelResponse>,
        ) -> Self {
            self.voice_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVoiceChannelOutput`](crate::output::UpdateVoiceChannelOutput)
        pub fn build(self) -> crate::output::UpdateVoiceChannelOutput {
            crate::output::UpdateVoiceChannelOutput {
                voice_channel_response: self.voice_channel_response,
            }
        }
    }
}
impl UpdateVoiceChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVoiceChannelOutput`](crate::output::UpdateVoiceChannelOutput)
    pub fn builder() -> crate::output::update_voice_channel_output::Builder {
        crate::output::update_voice_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateTemplateActiveVersionOutput {
    /// <p>Provides information about an API request or response.</p>
    pub message_body: std::option::Option<crate::model::MessageBody>,
}
impl std::fmt::Debug for UpdateTemplateActiveVersionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateTemplateActiveVersionOutput");
        formatter.field("message_body", &self.message_body);
        formatter.finish()
    }
}
/// See [`UpdateTemplateActiveVersionOutput`](crate::output::UpdateTemplateActiveVersionOutput)
pub mod update_template_active_version_output {
    /// A builder for [`UpdateTemplateActiveVersionOutput`](crate::output::UpdateTemplateActiveVersionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_body: std::option::Option<crate::model::MessageBody>,
    }
    impl Builder {
        /// <p>Provides information about an API request or response.</p>
        pub fn message_body(mut self, input: crate::model::MessageBody) -> Self {
            self.message_body = Some(input);
            self
        }
        pub fn set_message_body(
            mut self,
            input: std::option::Option<crate::model::MessageBody>,
        ) -> Self {
            self.message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateTemplateActiveVersionOutput`](crate::output::UpdateTemplateActiveVersionOutput)
        pub fn build(self) -> crate::output::UpdateTemplateActiveVersionOutput {
            crate::output::UpdateTemplateActiveVersionOutput {
                message_body: self.message_body,
            }
        }
    }
}
impl UpdateTemplateActiveVersionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateTemplateActiveVersionOutput`](crate::output::UpdateTemplateActiveVersionOutput)
    pub fn builder() -> crate::output::update_template_active_version_output::Builder {
        crate::output::update_template_active_version_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateSmsTemplateOutput {
    /// <p>Provides information about an API request or response.</p>
    pub message_body: std::option::Option<crate::model::MessageBody>,
}
impl std::fmt::Debug for UpdateSmsTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSmsTemplateOutput");
        formatter.field("message_body", &self.message_body);
        formatter.finish()
    }
}
/// See [`UpdateSmsTemplateOutput`](crate::output::UpdateSmsTemplateOutput)
pub mod update_sms_template_output {
    /// A builder for [`UpdateSmsTemplateOutput`](crate::output::UpdateSmsTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_body: std::option::Option<crate::model::MessageBody>,
    }
    impl Builder {
        /// <p>Provides information about an API request or response.</p>
        pub fn message_body(mut self, input: crate::model::MessageBody) -> Self {
            self.message_body = Some(input);
            self
        }
        pub fn set_message_body(
            mut self,
            input: std::option::Option<crate::model::MessageBody>,
        ) -> Self {
            self.message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSmsTemplateOutput`](crate::output::UpdateSmsTemplateOutput)
        pub fn build(self) -> crate::output::UpdateSmsTemplateOutput {
            crate::output::UpdateSmsTemplateOutput {
                message_body: self.message_body,
            }
        }
    }
}
impl UpdateSmsTemplateOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSmsTemplateOutput`](crate::output::UpdateSmsTemplateOutput)
    pub fn builder() -> crate::output::update_sms_template_output::Builder {
        crate::output::update_sms_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateSmsChannelOutput {
    /// <p>Provides information about the status and settings of the SMS channel for an application.</p>
    pub sms_channel_response: std::option::Option<crate::model::SmsChannelResponse>,
}
impl std::fmt::Debug for UpdateSmsChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSmsChannelOutput");
        formatter.field("sms_channel_response", &self.sms_channel_response);
        formatter.finish()
    }
}
/// See [`UpdateSmsChannelOutput`](crate::output::UpdateSmsChannelOutput)
pub mod update_sms_channel_output {
    /// A builder for [`UpdateSmsChannelOutput`](crate::output::UpdateSmsChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sms_channel_response: std::option::Option<crate::model::SmsChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the SMS channel for an application.</p>
        pub fn sms_channel_response(mut self, input: crate::model::SmsChannelResponse) -> Self {
            self.sms_channel_response = Some(input);
            self
        }
        pub fn set_sms_channel_response(
            mut self,
            input: std::option::Option<crate::model::SmsChannelResponse>,
        ) -> Self {
            self.sms_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSmsChannelOutput`](crate::output::UpdateSmsChannelOutput)
        pub fn build(self) -> crate::output::UpdateSmsChannelOutput {
            crate::output::UpdateSmsChannelOutput {
                sms_channel_response: self.sms_channel_response,
            }
        }
    }
}
impl UpdateSmsChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSmsChannelOutput`](crate::output::UpdateSmsChannelOutput)
    pub fn builder() -> crate::output::update_sms_channel_output::Builder {
        crate::output::update_sms_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateSegmentOutput {
    /// <p>Provides information about the configuration, dimension, and other settings for a segment.</p>
    pub segment_response: std::option::Option<crate::model::SegmentResponse>,
}
impl std::fmt::Debug for UpdateSegmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSegmentOutput");
        formatter.field("segment_response", &self.segment_response);
        formatter.finish()
    }
}
/// See [`UpdateSegmentOutput`](crate::output::UpdateSegmentOutput)
pub mod update_segment_output {
    /// A builder for [`UpdateSegmentOutput`](crate::output::UpdateSegmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) segment_response: std::option::Option<crate::model::SegmentResponse>,
    }
    impl Builder {
        /// <p>Provides information about the configuration, dimension, and other settings for a segment.</p>
        pub fn segment_response(mut self, input: crate::model::SegmentResponse) -> Self {
            self.segment_response = Some(input);
            self
        }
        pub fn set_segment_response(
            mut self,
            input: std::option::Option<crate::model::SegmentResponse>,
        ) -> Self {
            self.segment_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSegmentOutput`](crate::output::UpdateSegmentOutput)
        pub fn build(self) -> crate::output::UpdateSegmentOutput {
            crate::output::UpdateSegmentOutput {
                segment_response: self.segment_response,
            }
        }
    }
}
impl UpdateSegmentOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSegmentOutput`](crate::output::UpdateSegmentOutput)
    pub fn builder() -> crate::output::update_segment_output::Builder {
        crate::output::update_segment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateRecommenderConfigurationOutput {
    /// <p>Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.</p>
    pub recommender_configuration_response:
        std::option::Option<crate::model::RecommenderConfigurationResponse>,
}
impl std::fmt::Debug for UpdateRecommenderConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRecommenderConfigurationOutput");
        formatter.field(
            "recommender_configuration_response",
            &self.recommender_configuration_response,
        );
        formatter.finish()
    }
}
/// See [`UpdateRecommenderConfigurationOutput`](crate::output::UpdateRecommenderConfigurationOutput)
pub mod update_recommender_configuration_output {
    /// A builder for [`UpdateRecommenderConfigurationOutput`](crate::output::UpdateRecommenderConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) recommender_configuration_response:
            std::option::Option<crate::model::RecommenderConfigurationResponse>,
    }
    impl Builder {
        /// <p>Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.</p>
        pub fn recommender_configuration_response(
            mut self,
            input: crate::model::RecommenderConfigurationResponse,
        ) -> Self {
            self.recommender_configuration_response = Some(input);
            self
        }
        pub fn set_recommender_configuration_response(
            mut self,
            input: std::option::Option<crate::model::RecommenderConfigurationResponse>,
        ) -> Self {
            self.recommender_configuration_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateRecommenderConfigurationOutput`](crate::output::UpdateRecommenderConfigurationOutput)
        pub fn build(self) -> crate::output::UpdateRecommenderConfigurationOutput {
            crate::output::UpdateRecommenderConfigurationOutput {
                recommender_configuration_response: self.recommender_configuration_response,
            }
        }
    }
}
impl UpdateRecommenderConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRecommenderConfigurationOutput`](crate::output::UpdateRecommenderConfigurationOutput)
    pub fn builder() -> crate::output::update_recommender_configuration_output::Builder {
        crate::output::update_recommender_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdatePushTemplateOutput {
    /// <p>Provides information about an API request or response.</p>
    pub message_body: std::option::Option<crate::model::MessageBody>,
}
impl std::fmt::Debug for UpdatePushTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePushTemplateOutput");
        formatter.field("message_body", &self.message_body);
        formatter.finish()
    }
}
/// See [`UpdatePushTemplateOutput`](crate::output::UpdatePushTemplateOutput)
pub mod update_push_template_output {
    /// A builder for [`UpdatePushTemplateOutput`](crate::output::UpdatePushTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_body: std::option::Option<crate::model::MessageBody>,
    }
    impl Builder {
        /// <p>Provides information about an API request or response.</p>
        pub fn message_body(mut self, input: crate::model::MessageBody) -> Self {
            self.message_body = Some(input);
            self
        }
        pub fn set_message_body(
            mut self,
            input: std::option::Option<crate::model::MessageBody>,
        ) -> Self {
            self.message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdatePushTemplateOutput`](crate::output::UpdatePushTemplateOutput)
        pub fn build(self) -> crate::output::UpdatePushTemplateOutput {
            crate::output::UpdatePushTemplateOutput {
                message_body: self.message_body,
            }
        }
    }
}
impl UpdatePushTemplateOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePushTemplateOutput`](crate::output::UpdatePushTemplateOutput)
    pub fn builder() -> crate::output::update_push_template_output::Builder {
        crate::output::update_push_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateJourneyStateOutput {
    /// <p>Provides information about the status, configuration, and other settings for a journey.</p>
    pub journey_response: std::option::Option<crate::model::JourneyResponse>,
}
impl std::fmt::Debug for UpdateJourneyStateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateJourneyStateOutput");
        formatter.field("journey_response", &self.journey_response);
        formatter.finish()
    }
}
/// See [`UpdateJourneyStateOutput`](crate::output::UpdateJourneyStateOutput)
pub mod update_journey_state_output {
    /// A builder for [`UpdateJourneyStateOutput`](crate::output::UpdateJourneyStateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) journey_response: std::option::Option<crate::model::JourneyResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status, configuration, and other settings for a journey.</p>
        pub fn journey_response(mut self, input: crate::model::JourneyResponse) -> Self {
            self.journey_response = Some(input);
            self
        }
        pub fn set_journey_response(
            mut self,
            input: std::option::Option<crate::model::JourneyResponse>,
        ) -> Self {
            self.journey_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateJourneyStateOutput`](crate::output::UpdateJourneyStateOutput)
        pub fn build(self) -> crate::output::UpdateJourneyStateOutput {
            crate::output::UpdateJourneyStateOutput {
                journey_response: self.journey_response,
            }
        }
    }
}
impl UpdateJourneyStateOutput {
    /// Creates a new builder-style object to manufacture [`UpdateJourneyStateOutput`](crate::output::UpdateJourneyStateOutput)
    pub fn builder() -> crate::output::update_journey_state_output::Builder {
        crate::output::update_journey_state_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateJourneyOutput {
    /// <p>Provides information about the status, configuration, and other settings for a journey.</p>
    pub journey_response: std::option::Option<crate::model::JourneyResponse>,
}
impl std::fmt::Debug for UpdateJourneyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateJourneyOutput");
        formatter.field("journey_response", &self.journey_response);
        formatter.finish()
    }
}
/// See [`UpdateJourneyOutput`](crate::output::UpdateJourneyOutput)
pub mod update_journey_output {
    /// A builder for [`UpdateJourneyOutput`](crate::output::UpdateJourneyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) journey_response: std::option::Option<crate::model::JourneyResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status, configuration, and other settings for a journey.</p>
        pub fn journey_response(mut self, input: crate::model::JourneyResponse) -> Self {
            self.journey_response = Some(input);
            self
        }
        pub fn set_journey_response(
            mut self,
            input: std::option::Option<crate::model::JourneyResponse>,
        ) -> Self {
            self.journey_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateJourneyOutput`](crate::output::UpdateJourneyOutput)
        pub fn build(self) -> crate::output::UpdateJourneyOutput {
            crate::output::UpdateJourneyOutput {
                journey_response: self.journey_response,
            }
        }
    }
}
impl UpdateJourneyOutput {
    /// Creates a new builder-style object to manufacture [`UpdateJourneyOutput`](crate::output::UpdateJourneyOutput)
    pub fn builder() -> crate::output::update_journey_output::Builder {
        crate::output::update_journey_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateGcmChannelOutput {
    /// <p>Provides information about the status and settings of the GCM channel for an application. The GCM channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.</p>
    pub gcm_channel_response: std::option::Option<crate::model::GcmChannelResponse>,
}
impl std::fmt::Debug for UpdateGcmChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateGcmChannelOutput");
        formatter.field("gcm_channel_response", &self.gcm_channel_response);
        formatter.finish()
    }
}
/// See [`UpdateGcmChannelOutput`](crate::output::UpdateGcmChannelOutput)
pub mod update_gcm_channel_output {
    /// A builder for [`UpdateGcmChannelOutput`](crate::output::UpdateGcmChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) gcm_channel_response: std::option::Option<crate::model::GcmChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the GCM channel for an application. The GCM channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.</p>
        pub fn gcm_channel_response(mut self, input: crate::model::GcmChannelResponse) -> Self {
            self.gcm_channel_response = Some(input);
            self
        }
        pub fn set_gcm_channel_response(
            mut self,
            input: std::option::Option<crate::model::GcmChannelResponse>,
        ) -> Self {
            self.gcm_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateGcmChannelOutput`](crate::output::UpdateGcmChannelOutput)
        pub fn build(self) -> crate::output::UpdateGcmChannelOutput {
            crate::output::UpdateGcmChannelOutput {
                gcm_channel_response: self.gcm_channel_response,
            }
        }
    }
}
impl UpdateGcmChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateGcmChannelOutput`](crate::output::UpdateGcmChannelOutput)
    pub fn builder() -> crate::output::update_gcm_channel_output::Builder {
        crate::output::update_gcm_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateEndpointsBatchOutput {
    /// <p>Provides information about an API request or response.</p>
    pub message_body: std::option::Option<crate::model::MessageBody>,
}
impl std::fmt::Debug for UpdateEndpointsBatchOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEndpointsBatchOutput");
        formatter.field("message_body", &self.message_body);
        formatter.finish()
    }
}
/// See [`UpdateEndpointsBatchOutput`](crate::output::UpdateEndpointsBatchOutput)
pub mod update_endpoints_batch_output {
    /// A builder for [`UpdateEndpointsBatchOutput`](crate::output::UpdateEndpointsBatchOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_body: std::option::Option<crate::model::MessageBody>,
    }
    impl Builder {
        /// <p>Provides information about an API request or response.</p>
        pub fn message_body(mut self, input: crate::model::MessageBody) -> Self {
            self.message_body = Some(input);
            self
        }
        pub fn set_message_body(
            mut self,
            input: std::option::Option<crate::model::MessageBody>,
        ) -> Self {
            self.message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateEndpointsBatchOutput`](crate::output::UpdateEndpointsBatchOutput)
        pub fn build(self) -> crate::output::UpdateEndpointsBatchOutput {
            crate::output::UpdateEndpointsBatchOutput {
                message_body: self.message_body,
            }
        }
    }
}
impl UpdateEndpointsBatchOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEndpointsBatchOutput`](crate::output::UpdateEndpointsBatchOutput)
    pub fn builder() -> crate::output::update_endpoints_batch_output::Builder {
        crate::output::update_endpoints_batch_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateEndpointOutput {
    /// <p>Provides information about an API request or response.</p>
    pub message_body: std::option::Option<crate::model::MessageBody>,
}
impl std::fmt::Debug for UpdateEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEndpointOutput");
        formatter.field("message_body", &self.message_body);
        formatter.finish()
    }
}
/// See [`UpdateEndpointOutput`](crate::output::UpdateEndpointOutput)
pub mod update_endpoint_output {
    /// A builder for [`UpdateEndpointOutput`](crate::output::UpdateEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_body: std::option::Option<crate::model::MessageBody>,
    }
    impl Builder {
        /// <p>Provides information about an API request or response.</p>
        pub fn message_body(mut self, input: crate::model::MessageBody) -> Self {
            self.message_body = Some(input);
            self
        }
        pub fn set_message_body(
            mut self,
            input: std::option::Option<crate::model::MessageBody>,
        ) -> Self {
            self.message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateEndpointOutput`](crate::output::UpdateEndpointOutput)
        pub fn build(self) -> crate::output::UpdateEndpointOutput {
            crate::output::UpdateEndpointOutput {
                message_body: self.message_body,
            }
        }
    }
}
impl UpdateEndpointOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEndpointOutput`](crate::output::UpdateEndpointOutput)
    pub fn builder() -> crate::output::update_endpoint_output::Builder {
        crate::output::update_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateEmailTemplateOutput {
    /// <p>Provides information about an API request or response.</p>
    pub message_body: std::option::Option<crate::model::MessageBody>,
}
impl std::fmt::Debug for UpdateEmailTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEmailTemplateOutput");
        formatter.field("message_body", &self.message_body);
        formatter.finish()
    }
}
/// See [`UpdateEmailTemplateOutput`](crate::output::UpdateEmailTemplateOutput)
pub mod update_email_template_output {
    /// A builder for [`UpdateEmailTemplateOutput`](crate::output::UpdateEmailTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_body: std::option::Option<crate::model::MessageBody>,
    }
    impl Builder {
        /// <p>Provides information about an API request or response.</p>
        pub fn message_body(mut self, input: crate::model::MessageBody) -> Self {
            self.message_body = Some(input);
            self
        }
        pub fn set_message_body(
            mut self,
            input: std::option::Option<crate::model::MessageBody>,
        ) -> Self {
            self.message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateEmailTemplateOutput`](crate::output::UpdateEmailTemplateOutput)
        pub fn build(self) -> crate::output::UpdateEmailTemplateOutput {
            crate::output::UpdateEmailTemplateOutput {
                message_body: self.message_body,
            }
        }
    }
}
impl UpdateEmailTemplateOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEmailTemplateOutput`](crate::output::UpdateEmailTemplateOutput)
    pub fn builder() -> crate::output::update_email_template_output::Builder {
        crate::output::update_email_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateEmailChannelOutput {
    /// <p>Provides information about the status and settings of the email channel for an application.</p>
    pub email_channel_response: std::option::Option<crate::model::EmailChannelResponse>,
}
impl std::fmt::Debug for UpdateEmailChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEmailChannelOutput");
        formatter.field("email_channel_response", &self.email_channel_response);
        formatter.finish()
    }
}
/// See [`UpdateEmailChannelOutput`](crate::output::UpdateEmailChannelOutput)
pub mod update_email_channel_output {
    /// A builder for [`UpdateEmailChannelOutput`](crate::output::UpdateEmailChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) email_channel_response: std::option::Option<crate::model::EmailChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the email channel for an application.</p>
        pub fn email_channel_response(mut self, input: crate::model::EmailChannelResponse) -> Self {
            self.email_channel_response = Some(input);
            self
        }
        pub fn set_email_channel_response(
            mut self,
            input: std::option::Option<crate::model::EmailChannelResponse>,
        ) -> Self {
            self.email_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateEmailChannelOutput`](crate::output::UpdateEmailChannelOutput)
        pub fn build(self) -> crate::output::UpdateEmailChannelOutput {
            crate::output::UpdateEmailChannelOutput {
                email_channel_response: self.email_channel_response,
            }
        }
    }
}
impl UpdateEmailChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEmailChannelOutput`](crate::output::UpdateEmailChannelOutput)
    pub fn builder() -> crate::output::update_email_channel_output::Builder {
        crate::output::update_email_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateCampaignOutput {
    /// <p>Provides information about the status, configuration, and other settings for a campaign.</p>
    pub campaign_response: std::option::Option<crate::model::CampaignResponse>,
}
impl std::fmt::Debug for UpdateCampaignOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCampaignOutput");
        formatter.field("campaign_response", &self.campaign_response);
        formatter.finish()
    }
}
/// See [`UpdateCampaignOutput`](crate::output::UpdateCampaignOutput)
pub mod update_campaign_output {
    /// A builder for [`UpdateCampaignOutput`](crate::output::UpdateCampaignOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) campaign_response: std::option::Option<crate::model::CampaignResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status, configuration, and other settings for a campaign.</p>
        pub fn campaign_response(mut self, input: crate::model::CampaignResponse) -> Self {
            self.campaign_response = Some(input);
            self
        }
        pub fn set_campaign_response(
            mut self,
            input: std::option::Option<crate::model::CampaignResponse>,
        ) -> Self {
            self.campaign_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateCampaignOutput`](crate::output::UpdateCampaignOutput)
        pub fn build(self) -> crate::output::UpdateCampaignOutput {
            crate::output::UpdateCampaignOutput {
                campaign_response: self.campaign_response,
            }
        }
    }
}
impl UpdateCampaignOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCampaignOutput`](crate::output::UpdateCampaignOutput)
    pub fn builder() -> crate::output::update_campaign_output::Builder {
        crate::output::update_campaign_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateBaiduChannelOutput {
    /// <p>Provides information about the status and settings of the Baidu (Baidu Cloud Push) channel for an application.</p>
    pub baidu_channel_response: std::option::Option<crate::model::BaiduChannelResponse>,
}
impl std::fmt::Debug for UpdateBaiduChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBaiduChannelOutput");
        formatter.field("baidu_channel_response", &self.baidu_channel_response);
        formatter.finish()
    }
}
/// See [`UpdateBaiduChannelOutput`](crate::output::UpdateBaiduChannelOutput)
pub mod update_baidu_channel_output {
    /// A builder for [`UpdateBaiduChannelOutput`](crate::output::UpdateBaiduChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) baidu_channel_response: std::option::Option<crate::model::BaiduChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the Baidu (Baidu Cloud Push) channel for an application.</p>
        pub fn baidu_channel_response(mut self, input: crate::model::BaiduChannelResponse) -> Self {
            self.baidu_channel_response = Some(input);
            self
        }
        pub fn set_baidu_channel_response(
            mut self,
            input: std::option::Option<crate::model::BaiduChannelResponse>,
        ) -> Self {
            self.baidu_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateBaiduChannelOutput`](crate::output::UpdateBaiduChannelOutput)
        pub fn build(self) -> crate::output::UpdateBaiduChannelOutput {
            crate::output::UpdateBaiduChannelOutput {
                baidu_channel_response: self.baidu_channel_response,
            }
        }
    }
}
impl UpdateBaiduChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBaiduChannelOutput`](crate::output::UpdateBaiduChannelOutput)
    pub fn builder() -> crate::output::update_baidu_channel_output::Builder {
        crate::output::update_baidu_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateApplicationSettingsOutput {
    /// <p>Provides information about an application, including the default settings for an application.</p>
    pub application_settings_resource:
        std::option::Option<crate::model::ApplicationSettingsResource>,
}
impl std::fmt::Debug for UpdateApplicationSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateApplicationSettingsOutput");
        formatter.field(
            "application_settings_resource",
            &self.application_settings_resource,
        );
        formatter.finish()
    }
}
/// See [`UpdateApplicationSettingsOutput`](crate::output::UpdateApplicationSettingsOutput)
pub mod update_application_settings_output {
    /// A builder for [`UpdateApplicationSettingsOutput`](crate::output::UpdateApplicationSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_settings_resource:
            std::option::Option<crate::model::ApplicationSettingsResource>,
    }
    impl Builder {
        /// <p>Provides information about an application, including the default settings for an application.</p>
        pub fn application_settings_resource(
            mut self,
            input: crate::model::ApplicationSettingsResource,
        ) -> Self {
            self.application_settings_resource = Some(input);
            self
        }
        pub fn set_application_settings_resource(
            mut self,
            input: std::option::Option<crate::model::ApplicationSettingsResource>,
        ) -> Self {
            self.application_settings_resource = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateApplicationSettingsOutput`](crate::output::UpdateApplicationSettingsOutput)
        pub fn build(self) -> crate::output::UpdateApplicationSettingsOutput {
            crate::output::UpdateApplicationSettingsOutput {
                application_settings_resource: self.application_settings_resource,
            }
        }
    }
}
impl UpdateApplicationSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateApplicationSettingsOutput`](crate::output::UpdateApplicationSettingsOutput)
    pub fn builder() -> crate::output::update_application_settings_output::Builder {
        crate::output::update_application_settings_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateApnsVoipSandboxChannelOutput {
    /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP sandbox channel for an application.</p>
    pub apns_voip_sandbox_channel_response:
        std::option::Option<crate::model::ApnsVoipSandboxChannelResponse>,
}
impl std::fmt::Debug for UpdateApnsVoipSandboxChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateApnsVoipSandboxChannelOutput");
        formatter.field(
            "apns_voip_sandbox_channel_response",
            &self.apns_voip_sandbox_channel_response,
        );
        formatter.finish()
    }
}
/// See [`UpdateApnsVoipSandboxChannelOutput`](crate::output::UpdateApnsVoipSandboxChannelOutput)
pub mod update_apns_voip_sandbox_channel_output {
    /// A builder for [`UpdateApnsVoipSandboxChannelOutput`](crate::output::UpdateApnsVoipSandboxChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apns_voip_sandbox_channel_response:
            std::option::Option<crate::model::ApnsVoipSandboxChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP sandbox channel for an application.</p>
        pub fn apns_voip_sandbox_channel_response(
            mut self,
            input: crate::model::ApnsVoipSandboxChannelResponse,
        ) -> Self {
            self.apns_voip_sandbox_channel_response = Some(input);
            self
        }
        pub fn set_apns_voip_sandbox_channel_response(
            mut self,
            input: std::option::Option<crate::model::ApnsVoipSandboxChannelResponse>,
        ) -> Self {
            self.apns_voip_sandbox_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateApnsVoipSandboxChannelOutput`](crate::output::UpdateApnsVoipSandboxChannelOutput)
        pub fn build(self) -> crate::output::UpdateApnsVoipSandboxChannelOutput {
            crate::output::UpdateApnsVoipSandboxChannelOutput {
                apns_voip_sandbox_channel_response: self.apns_voip_sandbox_channel_response,
            }
        }
    }
}
impl UpdateApnsVoipSandboxChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateApnsVoipSandboxChannelOutput`](crate::output::UpdateApnsVoipSandboxChannelOutput)
    pub fn builder() -> crate::output::update_apns_voip_sandbox_channel_output::Builder {
        crate::output::update_apns_voip_sandbox_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateApnsVoipChannelOutput {
    /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.</p>
    pub apns_voip_channel_response: std::option::Option<crate::model::ApnsVoipChannelResponse>,
}
impl std::fmt::Debug for UpdateApnsVoipChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateApnsVoipChannelOutput");
        formatter.field(
            "apns_voip_channel_response",
            &self.apns_voip_channel_response,
        );
        formatter.finish()
    }
}
/// See [`UpdateApnsVoipChannelOutput`](crate::output::UpdateApnsVoipChannelOutput)
pub mod update_apns_voip_channel_output {
    /// A builder for [`UpdateApnsVoipChannelOutput`](crate::output::UpdateApnsVoipChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apns_voip_channel_response:
            std::option::Option<crate::model::ApnsVoipChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.</p>
        pub fn apns_voip_channel_response(
            mut self,
            input: crate::model::ApnsVoipChannelResponse,
        ) -> Self {
            self.apns_voip_channel_response = Some(input);
            self
        }
        pub fn set_apns_voip_channel_response(
            mut self,
            input: std::option::Option<crate::model::ApnsVoipChannelResponse>,
        ) -> Self {
            self.apns_voip_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateApnsVoipChannelOutput`](crate::output::UpdateApnsVoipChannelOutput)
        pub fn build(self) -> crate::output::UpdateApnsVoipChannelOutput {
            crate::output::UpdateApnsVoipChannelOutput {
                apns_voip_channel_response: self.apns_voip_channel_response,
            }
        }
    }
}
impl UpdateApnsVoipChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateApnsVoipChannelOutput`](crate::output::UpdateApnsVoipChannelOutput)
    pub fn builder() -> crate::output::update_apns_voip_channel_output::Builder {
        crate::output::update_apns_voip_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateApnsSandboxChannelOutput {
    /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.</p>
    pub apns_sandbox_channel_response:
        std::option::Option<crate::model::ApnsSandboxChannelResponse>,
}
impl std::fmt::Debug for UpdateApnsSandboxChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateApnsSandboxChannelOutput");
        formatter.field(
            "apns_sandbox_channel_response",
            &self.apns_sandbox_channel_response,
        );
        formatter.finish()
    }
}
/// See [`UpdateApnsSandboxChannelOutput`](crate::output::UpdateApnsSandboxChannelOutput)
pub mod update_apns_sandbox_channel_output {
    /// A builder for [`UpdateApnsSandboxChannelOutput`](crate::output::UpdateApnsSandboxChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apns_sandbox_channel_response:
            std::option::Option<crate::model::ApnsSandboxChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.</p>
        pub fn apns_sandbox_channel_response(
            mut self,
            input: crate::model::ApnsSandboxChannelResponse,
        ) -> Self {
            self.apns_sandbox_channel_response = Some(input);
            self
        }
        pub fn set_apns_sandbox_channel_response(
            mut self,
            input: std::option::Option<crate::model::ApnsSandboxChannelResponse>,
        ) -> Self {
            self.apns_sandbox_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateApnsSandboxChannelOutput`](crate::output::UpdateApnsSandboxChannelOutput)
        pub fn build(self) -> crate::output::UpdateApnsSandboxChannelOutput {
            crate::output::UpdateApnsSandboxChannelOutput {
                apns_sandbox_channel_response: self.apns_sandbox_channel_response,
            }
        }
    }
}
impl UpdateApnsSandboxChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateApnsSandboxChannelOutput`](crate::output::UpdateApnsSandboxChannelOutput)
    pub fn builder() -> crate::output::update_apns_sandbox_channel_output::Builder {
        crate::output::update_apns_sandbox_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateApnsChannelOutput {
    /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) channel for an application.</p>
    pub apns_channel_response: std::option::Option<crate::model::ApnsChannelResponse>,
}
impl std::fmt::Debug for UpdateApnsChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateApnsChannelOutput");
        formatter.field("apns_channel_response", &self.apns_channel_response);
        formatter.finish()
    }
}
/// See [`UpdateApnsChannelOutput`](crate::output::UpdateApnsChannelOutput)
pub mod update_apns_channel_output {
    /// A builder for [`UpdateApnsChannelOutput`](crate::output::UpdateApnsChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apns_channel_response: std::option::Option<crate::model::ApnsChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) channel for an application.</p>
        pub fn apns_channel_response(mut self, input: crate::model::ApnsChannelResponse) -> Self {
            self.apns_channel_response = Some(input);
            self
        }
        pub fn set_apns_channel_response(
            mut self,
            input: std::option::Option<crate::model::ApnsChannelResponse>,
        ) -> Self {
            self.apns_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateApnsChannelOutput`](crate::output::UpdateApnsChannelOutput)
        pub fn build(self) -> crate::output::UpdateApnsChannelOutput {
            crate::output::UpdateApnsChannelOutput {
                apns_channel_response: self.apns_channel_response,
            }
        }
    }
}
impl UpdateApnsChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateApnsChannelOutput`](crate::output::UpdateApnsChannelOutput)
    pub fn builder() -> crate::output::update_apns_channel_output::Builder {
        crate::output::update_apns_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateAdmChannelOutput {
    /// <p>Provides information about the status and settings of the ADM (Amazon Device Messaging) channel for an application.</p>
    pub adm_channel_response: std::option::Option<crate::model::AdmChannelResponse>,
}
impl std::fmt::Debug for UpdateAdmChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAdmChannelOutput");
        formatter.field("adm_channel_response", &self.adm_channel_response);
        formatter.finish()
    }
}
/// See [`UpdateAdmChannelOutput`](crate::output::UpdateAdmChannelOutput)
pub mod update_adm_channel_output {
    /// A builder for [`UpdateAdmChannelOutput`](crate::output::UpdateAdmChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) adm_channel_response: std::option::Option<crate::model::AdmChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the ADM (Amazon Device Messaging) channel for an application.</p>
        pub fn adm_channel_response(mut self, input: crate::model::AdmChannelResponse) -> Self {
            self.adm_channel_response = Some(input);
            self
        }
        pub fn set_adm_channel_response(
            mut self,
            input: std::option::Option<crate::model::AdmChannelResponse>,
        ) -> Self {
            self.adm_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAdmChannelOutput`](crate::output::UpdateAdmChannelOutput)
        pub fn build(self) -> crate::output::UpdateAdmChannelOutput {
            crate::output::UpdateAdmChannelOutput {
                adm_channel_response: self.adm_channel_response,
            }
        }
    }
}
impl UpdateAdmChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAdmChannelOutput`](crate::output::UpdateAdmChannelOutput)
    pub fn builder() -> crate::output::update_adm_channel_output::Builder {
        crate::output::update_adm_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SendUsersMessagesOutput {
    /// <p>Provides information about which users and endpoints a message was sent to.</p>
    pub send_users_message_response: std::option::Option<crate::model::SendUsersMessageResponse>,
}
impl std::fmt::Debug for SendUsersMessagesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SendUsersMessagesOutput");
        formatter.field(
            "send_users_message_response",
            &self.send_users_message_response,
        );
        formatter.finish()
    }
}
/// See [`SendUsersMessagesOutput`](crate::output::SendUsersMessagesOutput)
pub mod send_users_messages_output {
    /// A builder for [`SendUsersMessagesOutput`](crate::output::SendUsersMessagesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) send_users_message_response:
            std::option::Option<crate::model::SendUsersMessageResponse>,
    }
    impl Builder {
        /// <p>Provides information about which users and endpoints a message was sent to.</p>
        pub fn send_users_message_response(
            mut self,
            input: crate::model::SendUsersMessageResponse,
        ) -> Self {
            self.send_users_message_response = Some(input);
            self
        }
        pub fn set_send_users_message_response(
            mut self,
            input: std::option::Option<crate::model::SendUsersMessageResponse>,
        ) -> Self {
            self.send_users_message_response = input;
            self
        }
        /// Consumes the builder and constructs a [`SendUsersMessagesOutput`](crate::output::SendUsersMessagesOutput)
        pub fn build(self) -> crate::output::SendUsersMessagesOutput {
            crate::output::SendUsersMessagesOutput {
                send_users_message_response: self.send_users_message_response,
            }
        }
    }
}
impl SendUsersMessagesOutput {
    /// Creates a new builder-style object to manufacture [`SendUsersMessagesOutput`](crate::output::SendUsersMessagesOutput)
    pub fn builder() -> crate::output::send_users_messages_output::Builder {
        crate::output::send_users_messages_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SendMessagesOutput {
    /// <p>Provides information about the results of a request to send a message to an endpoint address.</p>
    pub message_response: std::option::Option<crate::model::MessageResponse>,
}
impl std::fmt::Debug for SendMessagesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SendMessagesOutput");
        formatter.field("message_response", &self.message_response);
        formatter.finish()
    }
}
/// See [`SendMessagesOutput`](crate::output::SendMessagesOutput)
pub mod send_messages_output {
    /// A builder for [`SendMessagesOutput`](crate::output::SendMessagesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_response: std::option::Option<crate::model::MessageResponse>,
    }
    impl Builder {
        /// <p>Provides information about the results of a request to send a message to an endpoint address.</p>
        pub fn message_response(mut self, input: crate::model::MessageResponse) -> Self {
            self.message_response = Some(input);
            self
        }
        pub fn set_message_response(
            mut self,
            input: std::option::Option<crate::model::MessageResponse>,
        ) -> Self {
            self.message_response = input;
            self
        }
        /// Consumes the builder and constructs a [`SendMessagesOutput`](crate::output::SendMessagesOutput)
        pub fn build(self) -> crate::output::SendMessagesOutput {
            crate::output::SendMessagesOutput {
                message_response: self.message_response,
            }
        }
    }
}
impl SendMessagesOutput {
    /// Creates a new builder-style object to manufacture [`SendMessagesOutput`](crate::output::SendMessagesOutput)
    pub fn builder() -> crate::output::send_messages_output::Builder {
        crate::output::send_messages_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveAttributesOutput {
    /// <p>Provides information about the type and the names of attributes that were removed from all the endpoints that are associated with an application.</p>
    pub attributes_resource: std::option::Option<crate::model::AttributesResource>,
}
impl std::fmt::Debug for RemoveAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveAttributesOutput");
        formatter.field("attributes_resource", &self.attributes_resource);
        formatter.finish()
    }
}
/// See [`RemoveAttributesOutput`](crate::output::RemoveAttributesOutput)
pub mod remove_attributes_output {
    /// A builder for [`RemoveAttributesOutput`](crate::output::RemoveAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attributes_resource: std::option::Option<crate::model::AttributesResource>,
    }
    impl Builder {
        /// <p>Provides information about the type and the names of attributes that were removed from all the endpoints that are associated with an application.</p>
        pub fn attributes_resource(mut self, input: crate::model::AttributesResource) -> Self {
            self.attributes_resource = Some(input);
            self
        }
        pub fn set_attributes_resource(
            mut self,
            input: std::option::Option<crate::model::AttributesResource>,
        ) -> Self {
            self.attributes_resource = input;
            self
        }
        /// Consumes the builder and constructs a [`RemoveAttributesOutput`](crate::output::RemoveAttributesOutput)
        pub fn build(self) -> crate::output::RemoveAttributesOutput {
            crate::output::RemoveAttributesOutput {
                attributes_resource: self.attributes_resource,
            }
        }
    }
}
impl RemoveAttributesOutput {
    /// Creates a new builder-style object to manufacture [`RemoveAttributesOutput`](crate::output::RemoveAttributesOutput)
    pub fn builder() -> crate::output::remove_attributes_output::Builder {
        crate::output::remove_attributes_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutEventStreamOutput {
    /// <p>Specifies settings for publishing event data to an Amazon Kinesis data stream or an Amazon Kinesis Data Firehose delivery stream.</p>
    pub event_stream: std::option::Option<crate::model::EventStream>,
}
impl std::fmt::Debug for PutEventStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutEventStreamOutput");
        formatter.field("event_stream", &self.event_stream);
        formatter.finish()
    }
}
/// See [`PutEventStreamOutput`](crate::output::PutEventStreamOutput)
pub mod put_event_stream_output {
    /// A builder for [`PutEventStreamOutput`](crate::output::PutEventStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_stream: std::option::Option<crate::model::EventStream>,
    }
    impl Builder {
        /// <p>Specifies settings for publishing event data to an Amazon Kinesis data stream or an Amazon Kinesis Data Firehose delivery stream.</p>
        pub fn event_stream(mut self, input: crate::model::EventStream) -> Self {
            self.event_stream = Some(input);
            self
        }
        pub fn set_event_stream(
            mut self,
            input: std::option::Option<crate::model::EventStream>,
        ) -> Self {
            self.event_stream = input;
            self
        }
        /// Consumes the builder and constructs a [`PutEventStreamOutput`](crate::output::PutEventStreamOutput)
        pub fn build(self) -> crate::output::PutEventStreamOutput {
            crate::output::PutEventStreamOutput {
                event_stream: self.event_stream,
            }
        }
    }
}
impl PutEventStreamOutput {
    /// Creates a new builder-style object to manufacture [`PutEventStreamOutput`](crate::output::PutEventStreamOutput)
    pub fn builder() -> crate::output::put_event_stream_output::Builder {
        crate::output::put_event_stream_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutEventsOutput {
    /// <p>Provides information about endpoints and the events that they're associated with.</p>
    pub events_response: std::option::Option<crate::model::EventsResponse>,
}
impl std::fmt::Debug for PutEventsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutEventsOutput");
        formatter.field("events_response", &self.events_response);
        formatter.finish()
    }
}
/// See [`PutEventsOutput`](crate::output::PutEventsOutput)
pub mod put_events_output {
    /// A builder for [`PutEventsOutput`](crate::output::PutEventsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) events_response: std::option::Option<crate::model::EventsResponse>,
    }
    impl Builder {
        /// <p>Provides information about endpoints and the events that they're associated with.</p>
        pub fn events_response(mut self, input: crate::model::EventsResponse) -> Self {
            self.events_response = Some(input);
            self
        }
        pub fn set_events_response(
            mut self,
            input: std::option::Option<crate::model::EventsResponse>,
        ) -> Self {
            self.events_response = input;
            self
        }
        /// Consumes the builder and constructs a [`PutEventsOutput`](crate::output::PutEventsOutput)
        pub fn build(self) -> crate::output::PutEventsOutput {
            crate::output::PutEventsOutput {
                events_response: self.events_response,
            }
        }
    }
}
impl PutEventsOutput {
    /// Creates a new builder-style object to manufacture [`PutEventsOutput`](crate::output::PutEventsOutput)
    pub fn builder() -> crate::output::put_events_output::Builder {
        crate::output::put_events_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PhoneNumberValidateOutput {
    /// <p>Provides information about a phone number.</p>
    pub number_validate_response: std::option::Option<crate::model::NumberValidateResponse>,
}
impl std::fmt::Debug for PhoneNumberValidateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PhoneNumberValidateOutput");
        formatter.field("number_validate_response", &self.number_validate_response);
        formatter.finish()
    }
}
/// See [`PhoneNumberValidateOutput`](crate::output::PhoneNumberValidateOutput)
pub mod phone_number_validate_output {
    /// A builder for [`PhoneNumberValidateOutput`](crate::output::PhoneNumberValidateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) number_validate_response:
            std::option::Option<crate::model::NumberValidateResponse>,
    }
    impl Builder {
        /// <p>Provides information about a phone number.</p>
        pub fn number_validate_response(
            mut self,
            input: crate::model::NumberValidateResponse,
        ) -> Self {
            self.number_validate_response = Some(input);
            self
        }
        pub fn set_number_validate_response(
            mut self,
            input: std::option::Option<crate::model::NumberValidateResponse>,
        ) -> Self {
            self.number_validate_response = input;
            self
        }
        /// Consumes the builder and constructs a [`PhoneNumberValidateOutput`](crate::output::PhoneNumberValidateOutput)
        pub fn build(self) -> crate::output::PhoneNumberValidateOutput {
            crate::output::PhoneNumberValidateOutput {
                number_validate_response: self.number_validate_response,
            }
        }
    }
}
impl PhoneNumberValidateOutput {
    /// Creates a new builder-style object to manufacture [`PhoneNumberValidateOutput`](crate::output::PhoneNumberValidateOutput)
    pub fn builder() -> crate::output::phone_number_validate_output::Builder {
        crate::output::phone_number_validate_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTemplateVersionsOutput {
    /// <p>Provides information about all the versions of a specific message template.</p>
    pub template_versions_response: std::option::Option<crate::model::TemplateVersionsResponse>,
}
impl std::fmt::Debug for ListTemplateVersionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTemplateVersionsOutput");
        formatter.field(
            "template_versions_response",
            &self.template_versions_response,
        );
        formatter.finish()
    }
}
/// See [`ListTemplateVersionsOutput`](crate::output::ListTemplateVersionsOutput)
pub mod list_template_versions_output {
    /// A builder for [`ListTemplateVersionsOutput`](crate::output::ListTemplateVersionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) template_versions_response:
            std::option::Option<crate::model::TemplateVersionsResponse>,
    }
    impl Builder {
        /// <p>Provides information about all the versions of a specific message template.</p>
        pub fn template_versions_response(
            mut self,
            input: crate::model::TemplateVersionsResponse,
        ) -> Self {
            self.template_versions_response = Some(input);
            self
        }
        pub fn set_template_versions_response(
            mut self,
            input: std::option::Option<crate::model::TemplateVersionsResponse>,
        ) -> Self {
            self.template_versions_response = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTemplateVersionsOutput`](crate::output::ListTemplateVersionsOutput)
        pub fn build(self) -> crate::output::ListTemplateVersionsOutput {
            crate::output::ListTemplateVersionsOutput {
                template_versions_response: self.template_versions_response,
            }
        }
    }
}
impl ListTemplateVersionsOutput {
    /// Creates a new builder-style object to manufacture [`ListTemplateVersionsOutput`](crate::output::ListTemplateVersionsOutput)
    pub fn builder() -> crate::output::list_template_versions_output::Builder {
        crate::output::list_template_versions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTemplatesOutput {
    /// <p>Provides information about all the message templates that are associated with your Amazon Pinpoint account.</p>
    pub templates_response: std::option::Option<crate::model::TemplatesResponse>,
}
impl std::fmt::Debug for ListTemplatesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTemplatesOutput");
        formatter.field("templates_response", &self.templates_response);
        formatter.finish()
    }
}
/// See [`ListTemplatesOutput`](crate::output::ListTemplatesOutput)
pub mod list_templates_output {
    /// A builder for [`ListTemplatesOutput`](crate::output::ListTemplatesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) templates_response: std::option::Option<crate::model::TemplatesResponse>,
    }
    impl Builder {
        /// <p>Provides information about all the message templates that are associated with your Amazon Pinpoint account.</p>
        pub fn templates_response(mut self, input: crate::model::TemplatesResponse) -> Self {
            self.templates_response = Some(input);
            self
        }
        pub fn set_templates_response(
            mut self,
            input: std::option::Option<crate::model::TemplatesResponse>,
        ) -> Self {
            self.templates_response = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTemplatesOutput`](crate::output::ListTemplatesOutput)
        pub fn build(self) -> crate::output::ListTemplatesOutput {
            crate::output::ListTemplatesOutput {
                templates_response: self.templates_response,
            }
        }
    }
}
impl ListTemplatesOutput {
    /// Creates a new builder-style object to manufacture [`ListTemplatesOutput`](crate::output::ListTemplatesOutput)
    pub fn builder() -> crate::output::list_templates_output::Builder {
        crate::output::list_templates_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>Specifies the tags (keys and values) for an application, campaign, message template, or segment.</p>
    pub tags_model: std::option::Option<crate::model::TagsModel>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags_model", &self.tags_model);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags_model: std::option::Option<crate::model::TagsModel>,
    }
    impl Builder {
        /// <p>Specifies the tags (keys and values) for an application, campaign, message template, or segment.</p>
        pub fn tags_model(mut self, input: crate::model::TagsModel) -> Self {
            self.tags_model = Some(input);
            self
        }
        pub fn set_tags_model(
            mut self,
            input: std::option::Option<crate::model::TagsModel>,
        ) -> Self {
            self.tags_model = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags_model: self.tags_model,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListJourneysOutput {
    /// <p>Provides information about the status, configuration, and other settings for all the journeys that are associated with an application.</p>
    pub journeys_response: std::option::Option<crate::model::JourneysResponse>,
}
impl std::fmt::Debug for ListJourneysOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListJourneysOutput");
        formatter.field("journeys_response", &self.journeys_response);
        formatter.finish()
    }
}
/// See [`ListJourneysOutput`](crate::output::ListJourneysOutput)
pub mod list_journeys_output {
    /// A builder for [`ListJourneysOutput`](crate::output::ListJourneysOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) journeys_response: std::option::Option<crate::model::JourneysResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status, configuration, and other settings for all the journeys that are associated with an application.</p>
        pub fn journeys_response(mut self, input: crate::model::JourneysResponse) -> Self {
            self.journeys_response = Some(input);
            self
        }
        pub fn set_journeys_response(
            mut self,
            input: std::option::Option<crate::model::JourneysResponse>,
        ) -> Self {
            self.journeys_response = input;
            self
        }
        /// Consumes the builder and constructs a [`ListJourneysOutput`](crate::output::ListJourneysOutput)
        pub fn build(self) -> crate::output::ListJourneysOutput {
            crate::output::ListJourneysOutput {
                journeys_response: self.journeys_response,
            }
        }
    }
}
impl ListJourneysOutput {
    /// Creates a new builder-style object to manufacture [`ListJourneysOutput`](crate::output::ListJourneysOutput)
    pub fn builder() -> crate::output::list_journeys_output::Builder {
        crate::output::list_journeys_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetVoiceTemplateOutput {
    /// <p>Provides information about the content and settings for a message template that can be used in messages that are sent through the voice channel.</p>
    pub voice_template_response: std::option::Option<crate::model::VoiceTemplateResponse>,
}
impl std::fmt::Debug for GetVoiceTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetVoiceTemplateOutput");
        formatter.field("voice_template_response", &self.voice_template_response);
        formatter.finish()
    }
}
/// See [`GetVoiceTemplateOutput`](crate::output::GetVoiceTemplateOutput)
pub mod get_voice_template_output {
    /// A builder for [`GetVoiceTemplateOutput`](crate::output::GetVoiceTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_template_response:
            std::option::Option<crate::model::VoiceTemplateResponse>,
    }
    impl Builder {
        /// <p>Provides information about the content and settings for a message template that can be used in messages that are sent through the voice channel.</p>
        pub fn voice_template_response(
            mut self,
            input: crate::model::VoiceTemplateResponse,
        ) -> Self {
            self.voice_template_response = Some(input);
            self
        }
        pub fn set_voice_template_response(
            mut self,
            input: std::option::Option<crate::model::VoiceTemplateResponse>,
        ) -> Self {
            self.voice_template_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceTemplateOutput`](crate::output::GetVoiceTemplateOutput)
        pub fn build(self) -> crate::output::GetVoiceTemplateOutput {
            crate::output::GetVoiceTemplateOutput {
                voice_template_response: self.voice_template_response,
            }
        }
    }
}
impl GetVoiceTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceTemplateOutput`](crate::output::GetVoiceTemplateOutput)
    pub fn builder() -> crate::output::get_voice_template_output::Builder {
        crate::output::get_voice_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetVoiceChannelOutput {
    /// <p>Provides information about the status and settings of the voice channel for an application.</p>
    pub voice_channel_response: std::option::Option<crate::model::VoiceChannelResponse>,
}
impl std::fmt::Debug for GetVoiceChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetVoiceChannelOutput");
        formatter.field("voice_channel_response", &self.voice_channel_response);
        formatter.finish()
    }
}
/// See [`GetVoiceChannelOutput`](crate::output::GetVoiceChannelOutput)
pub mod get_voice_channel_output {
    /// A builder for [`GetVoiceChannelOutput`](crate::output::GetVoiceChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_channel_response: std::option::Option<crate::model::VoiceChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the voice channel for an application.</p>
        pub fn voice_channel_response(mut self, input: crate::model::VoiceChannelResponse) -> Self {
            self.voice_channel_response = Some(input);
            self
        }
        pub fn set_voice_channel_response(
            mut self,
            input: std::option::Option<crate::model::VoiceChannelResponse>,
        ) -> Self {
            self.voice_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetVoiceChannelOutput`](crate::output::GetVoiceChannelOutput)
        pub fn build(self) -> crate::output::GetVoiceChannelOutput {
            crate::output::GetVoiceChannelOutput {
                voice_channel_response: self.voice_channel_response,
            }
        }
    }
}
impl GetVoiceChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetVoiceChannelOutput`](crate::output::GetVoiceChannelOutput)
    pub fn builder() -> crate::output::get_voice_channel_output::Builder {
        crate::output::get_voice_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetUserEndpointsOutput {
    /// <p>Provides information about all the endpoints that are associated with a user ID.</p>
    pub endpoints_response: std::option::Option<crate::model::EndpointsResponse>,
}
impl std::fmt::Debug for GetUserEndpointsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetUserEndpointsOutput");
        formatter.field("endpoints_response", &self.endpoints_response);
        formatter.finish()
    }
}
/// See [`GetUserEndpointsOutput`](crate::output::GetUserEndpointsOutput)
pub mod get_user_endpoints_output {
    /// A builder for [`GetUserEndpointsOutput`](crate::output::GetUserEndpointsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoints_response: std::option::Option<crate::model::EndpointsResponse>,
    }
    impl Builder {
        /// <p>Provides information about all the endpoints that are associated with a user ID.</p>
        pub fn endpoints_response(mut self, input: crate::model::EndpointsResponse) -> Self {
            self.endpoints_response = Some(input);
            self
        }
        pub fn set_endpoints_response(
            mut self,
            input: std::option::Option<crate::model::EndpointsResponse>,
        ) -> Self {
            self.endpoints_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetUserEndpointsOutput`](crate::output::GetUserEndpointsOutput)
        pub fn build(self) -> crate::output::GetUserEndpointsOutput {
            crate::output::GetUserEndpointsOutput {
                endpoints_response: self.endpoints_response,
            }
        }
    }
}
impl GetUserEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`GetUserEndpointsOutput`](crate::output::GetUserEndpointsOutput)
    pub fn builder() -> crate::output::get_user_endpoints_output::Builder {
        crate::output::get_user_endpoints_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSmsTemplateOutput {
    /// <p>Provides information about the content and settings for a message template that can be used in text messages that are sent through the SMS channel.</p>
    pub sms_template_response: std::option::Option<crate::model::SmsTemplateResponse>,
}
impl std::fmt::Debug for GetSmsTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSmsTemplateOutput");
        formatter.field("sms_template_response", &self.sms_template_response);
        formatter.finish()
    }
}
/// See [`GetSmsTemplateOutput`](crate::output::GetSmsTemplateOutput)
pub mod get_sms_template_output {
    /// A builder for [`GetSmsTemplateOutput`](crate::output::GetSmsTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sms_template_response: std::option::Option<crate::model::SmsTemplateResponse>,
    }
    impl Builder {
        /// <p>Provides information about the content and settings for a message template that can be used in text messages that are sent through the SMS channel.</p>
        pub fn sms_template_response(mut self, input: crate::model::SmsTemplateResponse) -> Self {
            self.sms_template_response = Some(input);
            self
        }
        pub fn set_sms_template_response(
            mut self,
            input: std::option::Option<crate::model::SmsTemplateResponse>,
        ) -> Self {
            self.sms_template_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSmsTemplateOutput`](crate::output::GetSmsTemplateOutput)
        pub fn build(self) -> crate::output::GetSmsTemplateOutput {
            crate::output::GetSmsTemplateOutput {
                sms_template_response: self.sms_template_response,
            }
        }
    }
}
impl GetSmsTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetSmsTemplateOutput`](crate::output::GetSmsTemplateOutput)
    pub fn builder() -> crate::output::get_sms_template_output::Builder {
        crate::output::get_sms_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSmsChannelOutput {
    /// <p>Provides information about the status and settings of the SMS channel for an application.</p>
    pub sms_channel_response: std::option::Option<crate::model::SmsChannelResponse>,
}
impl std::fmt::Debug for GetSmsChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSmsChannelOutput");
        formatter.field("sms_channel_response", &self.sms_channel_response);
        formatter.finish()
    }
}
/// See [`GetSmsChannelOutput`](crate::output::GetSmsChannelOutput)
pub mod get_sms_channel_output {
    /// A builder for [`GetSmsChannelOutput`](crate::output::GetSmsChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sms_channel_response: std::option::Option<crate::model::SmsChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the SMS channel for an application.</p>
        pub fn sms_channel_response(mut self, input: crate::model::SmsChannelResponse) -> Self {
            self.sms_channel_response = Some(input);
            self
        }
        pub fn set_sms_channel_response(
            mut self,
            input: std::option::Option<crate::model::SmsChannelResponse>,
        ) -> Self {
            self.sms_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSmsChannelOutput`](crate::output::GetSmsChannelOutput)
        pub fn build(self) -> crate::output::GetSmsChannelOutput {
            crate::output::GetSmsChannelOutput {
                sms_channel_response: self.sms_channel_response,
            }
        }
    }
}
impl GetSmsChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetSmsChannelOutput`](crate::output::GetSmsChannelOutput)
    pub fn builder() -> crate::output::get_sms_channel_output::Builder {
        crate::output::get_sms_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSegmentVersionsOutput {
    /// <p>Provides information about all the segments that are associated with an application.</p>
    pub segments_response: std::option::Option<crate::model::SegmentsResponse>,
}
impl std::fmt::Debug for GetSegmentVersionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSegmentVersionsOutput");
        formatter.field("segments_response", &self.segments_response);
        formatter.finish()
    }
}
/// See [`GetSegmentVersionsOutput`](crate::output::GetSegmentVersionsOutput)
pub mod get_segment_versions_output {
    /// A builder for [`GetSegmentVersionsOutput`](crate::output::GetSegmentVersionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) segments_response: std::option::Option<crate::model::SegmentsResponse>,
    }
    impl Builder {
        /// <p>Provides information about all the segments that are associated with an application.</p>
        pub fn segments_response(mut self, input: crate::model::SegmentsResponse) -> Self {
            self.segments_response = Some(input);
            self
        }
        pub fn set_segments_response(
            mut self,
            input: std::option::Option<crate::model::SegmentsResponse>,
        ) -> Self {
            self.segments_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSegmentVersionsOutput`](crate::output::GetSegmentVersionsOutput)
        pub fn build(self) -> crate::output::GetSegmentVersionsOutput {
            crate::output::GetSegmentVersionsOutput {
                segments_response: self.segments_response,
            }
        }
    }
}
impl GetSegmentVersionsOutput {
    /// Creates a new builder-style object to manufacture [`GetSegmentVersionsOutput`](crate::output::GetSegmentVersionsOutput)
    pub fn builder() -> crate::output::get_segment_versions_output::Builder {
        crate::output::get_segment_versions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSegmentVersionOutput {
    /// <p>Provides information about the configuration, dimension, and other settings for a segment.</p>
    pub segment_response: std::option::Option<crate::model::SegmentResponse>,
}
impl std::fmt::Debug for GetSegmentVersionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSegmentVersionOutput");
        formatter.field("segment_response", &self.segment_response);
        formatter.finish()
    }
}
/// See [`GetSegmentVersionOutput`](crate::output::GetSegmentVersionOutput)
pub mod get_segment_version_output {
    /// A builder for [`GetSegmentVersionOutput`](crate::output::GetSegmentVersionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) segment_response: std::option::Option<crate::model::SegmentResponse>,
    }
    impl Builder {
        /// <p>Provides information about the configuration, dimension, and other settings for a segment.</p>
        pub fn segment_response(mut self, input: crate::model::SegmentResponse) -> Self {
            self.segment_response = Some(input);
            self
        }
        pub fn set_segment_response(
            mut self,
            input: std::option::Option<crate::model::SegmentResponse>,
        ) -> Self {
            self.segment_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSegmentVersionOutput`](crate::output::GetSegmentVersionOutput)
        pub fn build(self) -> crate::output::GetSegmentVersionOutput {
            crate::output::GetSegmentVersionOutput {
                segment_response: self.segment_response,
            }
        }
    }
}
impl GetSegmentVersionOutput {
    /// Creates a new builder-style object to manufacture [`GetSegmentVersionOutput`](crate::output::GetSegmentVersionOutput)
    pub fn builder() -> crate::output::get_segment_version_output::Builder {
        crate::output::get_segment_version_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSegmentsOutput {
    /// <p>Provides information about all the segments that are associated with an application.</p>
    pub segments_response: std::option::Option<crate::model::SegmentsResponse>,
}
impl std::fmt::Debug for GetSegmentsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSegmentsOutput");
        formatter.field("segments_response", &self.segments_response);
        formatter.finish()
    }
}
/// See [`GetSegmentsOutput`](crate::output::GetSegmentsOutput)
pub mod get_segments_output {
    /// A builder for [`GetSegmentsOutput`](crate::output::GetSegmentsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) segments_response: std::option::Option<crate::model::SegmentsResponse>,
    }
    impl Builder {
        /// <p>Provides information about all the segments that are associated with an application.</p>
        pub fn segments_response(mut self, input: crate::model::SegmentsResponse) -> Self {
            self.segments_response = Some(input);
            self
        }
        pub fn set_segments_response(
            mut self,
            input: std::option::Option<crate::model::SegmentsResponse>,
        ) -> Self {
            self.segments_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSegmentsOutput`](crate::output::GetSegmentsOutput)
        pub fn build(self) -> crate::output::GetSegmentsOutput {
            crate::output::GetSegmentsOutput {
                segments_response: self.segments_response,
            }
        }
    }
}
impl GetSegmentsOutput {
    /// Creates a new builder-style object to manufacture [`GetSegmentsOutput`](crate::output::GetSegmentsOutput)
    pub fn builder() -> crate::output::get_segments_output::Builder {
        crate::output::get_segments_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSegmentImportJobsOutput {
    /// <p>Provides information about the status and settings of all the import jobs that are associated with an application or segment. An import job is a job that imports endpoint definitions from one or more files.</p>
    pub import_jobs_response: std::option::Option<crate::model::ImportJobsResponse>,
}
impl std::fmt::Debug for GetSegmentImportJobsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSegmentImportJobsOutput");
        formatter.field("import_jobs_response", &self.import_jobs_response);
        formatter.finish()
    }
}
/// See [`GetSegmentImportJobsOutput`](crate::output::GetSegmentImportJobsOutput)
pub mod get_segment_import_jobs_output {
    /// A builder for [`GetSegmentImportJobsOutput`](crate::output::GetSegmentImportJobsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) import_jobs_response: std::option::Option<crate::model::ImportJobsResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of all the import jobs that are associated with an application or segment. An import job is a job that imports endpoint definitions from one or more files.</p>
        pub fn import_jobs_response(mut self, input: crate::model::ImportJobsResponse) -> Self {
            self.import_jobs_response = Some(input);
            self
        }
        pub fn set_import_jobs_response(
            mut self,
            input: std::option::Option<crate::model::ImportJobsResponse>,
        ) -> Self {
            self.import_jobs_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSegmentImportJobsOutput`](crate::output::GetSegmentImportJobsOutput)
        pub fn build(self) -> crate::output::GetSegmentImportJobsOutput {
            crate::output::GetSegmentImportJobsOutput {
                import_jobs_response: self.import_jobs_response,
            }
        }
    }
}
impl GetSegmentImportJobsOutput {
    /// Creates a new builder-style object to manufacture [`GetSegmentImportJobsOutput`](crate::output::GetSegmentImportJobsOutput)
    pub fn builder() -> crate::output::get_segment_import_jobs_output::Builder {
        crate::output::get_segment_import_jobs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSegmentExportJobsOutput {
    /// <p>Provides information about all the export jobs that are associated with an application or segment. An export job is a job that exports endpoint definitions to a file.</p>
    pub export_jobs_response: std::option::Option<crate::model::ExportJobsResponse>,
}
impl std::fmt::Debug for GetSegmentExportJobsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSegmentExportJobsOutput");
        formatter.field("export_jobs_response", &self.export_jobs_response);
        formatter.finish()
    }
}
/// See [`GetSegmentExportJobsOutput`](crate::output::GetSegmentExportJobsOutput)
pub mod get_segment_export_jobs_output {
    /// A builder for [`GetSegmentExportJobsOutput`](crate::output::GetSegmentExportJobsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_jobs_response: std::option::Option<crate::model::ExportJobsResponse>,
    }
    impl Builder {
        /// <p>Provides information about all the export jobs that are associated with an application or segment. An export job is a job that exports endpoint definitions to a file.</p>
        pub fn export_jobs_response(mut self, input: crate::model::ExportJobsResponse) -> Self {
            self.export_jobs_response = Some(input);
            self
        }
        pub fn set_export_jobs_response(
            mut self,
            input: std::option::Option<crate::model::ExportJobsResponse>,
        ) -> Self {
            self.export_jobs_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSegmentExportJobsOutput`](crate::output::GetSegmentExportJobsOutput)
        pub fn build(self) -> crate::output::GetSegmentExportJobsOutput {
            crate::output::GetSegmentExportJobsOutput {
                export_jobs_response: self.export_jobs_response,
            }
        }
    }
}
impl GetSegmentExportJobsOutput {
    /// Creates a new builder-style object to manufacture [`GetSegmentExportJobsOutput`](crate::output::GetSegmentExportJobsOutput)
    pub fn builder() -> crate::output::get_segment_export_jobs_output::Builder {
        crate::output::get_segment_export_jobs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSegmentOutput {
    /// <p>Provides information about the configuration, dimension, and other settings for a segment.</p>
    pub segment_response: std::option::Option<crate::model::SegmentResponse>,
}
impl std::fmt::Debug for GetSegmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSegmentOutput");
        formatter.field("segment_response", &self.segment_response);
        formatter.finish()
    }
}
/// See [`GetSegmentOutput`](crate::output::GetSegmentOutput)
pub mod get_segment_output {
    /// A builder for [`GetSegmentOutput`](crate::output::GetSegmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) segment_response: std::option::Option<crate::model::SegmentResponse>,
    }
    impl Builder {
        /// <p>Provides information about the configuration, dimension, and other settings for a segment.</p>
        pub fn segment_response(mut self, input: crate::model::SegmentResponse) -> Self {
            self.segment_response = Some(input);
            self
        }
        pub fn set_segment_response(
            mut self,
            input: std::option::Option<crate::model::SegmentResponse>,
        ) -> Self {
            self.segment_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSegmentOutput`](crate::output::GetSegmentOutput)
        pub fn build(self) -> crate::output::GetSegmentOutput {
            crate::output::GetSegmentOutput {
                segment_response: self.segment_response,
            }
        }
    }
}
impl GetSegmentOutput {
    /// Creates a new builder-style object to manufacture [`GetSegmentOutput`](crate::output::GetSegmentOutput)
    pub fn builder() -> crate::output::get_segment_output::Builder {
        crate::output::get_segment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetRecommenderConfigurationsOutput {
    /// <p>Provides information about all the recommender model configurations that are associated with your Amazon Pinpoint account.</p>
    pub list_recommender_configurations_response:
        std::option::Option<crate::model::ListRecommenderConfigurationsResponse>,
}
impl std::fmt::Debug for GetRecommenderConfigurationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetRecommenderConfigurationsOutput");
        formatter.field(
            "list_recommender_configurations_response",
            &self.list_recommender_configurations_response,
        );
        formatter.finish()
    }
}
/// See [`GetRecommenderConfigurationsOutput`](crate::output::GetRecommenderConfigurationsOutput)
pub mod get_recommender_configurations_output {
    /// A builder for [`GetRecommenderConfigurationsOutput`](crate::output::GetRecommenderConfigurationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) list_recommender_configurations_response:
            std::option::Option<crate::model::ListRecommenderConfigurationsResponse>,
    }
    impl Builder {
        /// <p>Provides information about all the recommender model configurations that are associated with your Amazon Pinpoint account.</p>
        pub fn list_recommender_configurations_response(
            mut self,
            input: crate::model::ListRecommenderConfigurationsResponse,
        ) -> Self {
            self.list_recommender_configurations_response = Some(input);
            self
        }
        pub fn set_list_recommender_configurations_response(
            mut self,
            input: std::option::Option<crate::model::ListRecommenderConfigurationsResponse>,
        ) -> Self {
            self.list_recommender_configurations_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetRecommenderConfigurationsOutput`](crate::output::GetRecommenderConfigurationsOutput)
        pub fn build(self) -> crate::output::GetRecommenderConfigurationsOutput {
            crate::output::GetRecommenderConfigurationsOutput {
                list_recommender_configurations_response: self
                    .list_recommender_configurations_response,
            }
        }
    }
}
impl GetRecommenderConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`GetRecommenderConfigurationsOutput`](crate::output::GetRecommenderConfigurationsOutput)
    pub fn builder() -> crate::output::get_recommender_configurations_output::Builder {
        crate::output::get_recommender_configurations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetRecommenderConfigurationOutput {
    /// <p>Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.</p>
    pub recommender_configuration_response:
        std::option::Option<crate::model::RecommenderConfigurationResponse>,
}
impl std::fmt::Debug for GetRecommenderConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetRecommenderConfigurationOutput");
        formatter.field(
            "recommender_configuration_response",
            &self.recommender_configuration_response,
        );
        formatter.finish()
    }
}
/// See [`GetRecommenderConfigurationOutput`](crate::output::GetRecommenderConfigurationOutput)
pub mod get_recommender_configuration_output {
    /// A builder for [`GetRecommenderConfigurationOutput`](crate::output::GetRecommenderConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) recommender_configuration_response:
            std::option::Option<crate::model::RecommenderConfigurationResponse>,
    }
    impl Builder {
        /// <p>Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.</p>
        pub fn recommender_configuration_response(
            mut self,
            input: crate::model::RecommenderConfigurationResponse,
        ) -> Self {
            self.recommender_configuration_response = Some(input);
            self
        }
        pub fn set_recommender_configuration_response(
            mut self,
            input: std::option::Option<crate::model::RecommenderConfigurationResponse>,
        ) -> Self {
            self.recommender_configuration_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetRecommenderConfigurationOutput`](crate::output::GetRecommenderConfigurationOutput)
        pub fn build(self) -> crate::output::GetRecommenderConfigurationOutput {
            crate::output::GetRecommenderConfigurationOutput {
                recommender_configuration_response: self.recommender_configuration_response,
            }
        }
    }
}
impl GetRecommenderConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetRecommenderConfigurationOutput`](crate::output::GetRecommenderConfigurationOutput)
    pub fn builder() -> crate::output::get_recommender_configuration_output::Builder {
        crate::output::get_recommender_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPushTemplateOutput {
    /// <p>Provides information about the content and settings for a message template that can be used in messages that are sent through a push notification channel.</p>
    pub push_notification_template_response:
        std::option::Option<crate::model::PushNotificationTemplateResponse>,
}
impl std::fmt::Debug for GetPushTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPushTemplateOutput");
        formatter.field(
            "push_notification_template_response",
            &self.push_notification_template_response,
        );
        formatter.finish()
    }
}
/// See [`GetPushTemplateOutput`](crate::output::GetPushTemplateOutput)
pub mod get_push_template_output {
    /// A builder for [`GetPushTemplateOutput`](crate::output::GetPushTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) push_notification_template_response:
            std::option::Option<crate::model::PushNotificationTemplateResponse>,
    }
    impl Builder {
        /// <p>Provides information about the content and settings for a message template that can be used in messages that are sent through a push notification channel.</p>
        pub fn push_notification_template_response(
            mut self,
            input: crate::model::PushNotificationTemplateResponse,
        ) -> Self {
            self.push_notification_template_response = Some(input);
            self
        }
        pub fn set_push_notification_template_response(
            mut self,
            input: std::option::Option<crate::model::PushNotificationTemplateResponse>,
        ) -> Self {
            self.push_notification_template_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetPushTemplateOutput`](crate::output::GetPushTemplateOutput)
        pub fn build(self) -> crate::output::GetPushTemplateOutput {
            crate::output::GetPushTemplateOutput {
                push_notification_template_response: self.push_notification_template_response,
            }
        }
    }
}
impl GetPushTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetPushTemplateOutput`](crate::output::GetPushTemplateOutput)
    pub fn builder() -> crate::output::get_push_template_output::Builder {
        crate::output::get_push_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetJourneyExecutionMetricsOutput {
    /// <p>Provides the results of a query that retrieved the data for a standard execution metric that applies to a journey, and provides information about that query.</p>
    pub journey_execution_metrics_response:
        std::option::Option<crate::model::JourneyExecutionMetricsResponse>,
}
impl std::fmt::Debug for GetJourneyExecutionMetricsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetJourneyExecutionMetricsOutput");
        formatter.field(
            "journey_execution_metrics_response",
            &self.journey_execution_metrics_response,
        );
        formatter.finish()
    }
}
/// See [`GetJourneyExecutionMetricsOutput`](crate::output::GetJourneyExecutionMetricsOutput)
pub mod get_journey_execution_metrics_output {
    /// A builder for [`GetJourneyExecutionMetricsOutput`](crate::output::GetJourneyExecutionMetricsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) journey_execution_metrics_response:
            std::option::Option<crate::model::JourneyExecutionMetricsResponse>,
    }
    impl Builder {
        /// <p>Provides the results of a query that retrieved the data for a standard execution metric that applies to a journey, and provides information about that query.</p>
        pub fn journey_execution_metrics_response(
            mut self,
            input: crate::model::JourneyExecutionMetricsResponse,
        ) -> Self {
            self.journey_execution_metrics_response = Some(input);
            self
        }
        pub fn set_journey_execution_metrics_response(
            mut self,
            input: std::option::Option<crate::model::JourneyExecutionMetricsResponse>,
        ) -> Self {
            self.journey_execution_metrics_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetJourneyExecutionMetricsOutput`](crate::output::GetJourneyExecutionMetricsOutput)
        pub fn build(self) -> crate::output::GetJourneyExecutionMetricsOutput {
            crate::output::GetJourneyExecutionMetricsOutput {
                journey_execution_metrics_response: self.journey_execution_metrics_response,
            }
        }
    }
}
impl GetJourneyExecutionMetricsOutput {
    /// Creates a new builder-style object to manufacture [`GetJourneyExecutionMetricsOutput`](crate::output::GetJourneyExecutionMetricsOutput)
    pub fn builder() -> crate::output::get_journey_execution_metrics_output::Builder {
        crate::output::get_journey_execution_metrics_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetJourneyExecutionActivityMetricsOutput {
    /// <p>Provides the results of a query that retrieved the data for a standard execution metric that applies to a journey activity, and provides information about that query.</p>
    pub journey_execution_activity_metrics_response:
        std::option::Option<crate::model::JourneyExecutionActivityMetricsResponse>,
}
impl std::fmt::Debug for GetJourneyExecutionActivityMetricsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetJourneyExecutionActivityMetricsOutput");
        formatter.field(
            "journey_execution_activity_metrics_response",
            &self.journey_execution_activity_metrics_response,
        );
        formatter.finish()
    }
}
/// See [`GetJourneyExecutionActivityMetricsOutput`](crate::output::GetJourneyExecutionActivityMetricsOutput)
pub mod get_journey_execution_activity_metrics_output {
    /// A builder for [`GetJourneyExecutionActivityMetricsOutput`](crate::output::GetJourneyExecutionActivityMetricsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) journey_execution_activity_metrics_response:
            std::option::Option<crate::model::JourneyExecutionActivityMetricsResponse>,
    }
    impl Builder {
        /// <p>Provides the results of a query that retrieved the data for a standard execution metric that applies to a journey activity, and provides information about that query.</p>
        pub fn journey_execution_activity_metrics_response(
            mut self,
            input: crate::model::JourneyExecutionActivityMetricsResponse,
        ) -> Self {
            self.journey_execution_activity_metrics_response = Some(input);
            self
        }
        pub fn set_journey_execution_activity_metrics_response(
            mut self,
            input: std::option::Option<crate::model::JourneyExecutionActivityMetricsResponse>,
        ) -> Self {
            self.journey_execution_activity_metrics_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetJourneyExecutionActivityMetricsOutput`](crate::output::GetJourneyExecutionActivityMetricsOutput)
        pub fn build(self) -> crate::output::GetJourneyExecutionActivityMetricsOutput {
            crate::output::GetJourneyExecutionActivityMetricsOutput {
                journey_execution_activity_metrics_response: self
                    .journey_execution_activity_metrics_response,
            }
        }
    }
}
impl GetJourneyExecutionActivityMetricsOutput {
    /// Creates a new builder-style object to manufacture [`GetJourneyExecutionActivityMetricsOutput`](crate::output::GetJourneyExecutionActivityMetricsOutput)
    pub fn builder() -> crate::output::get_journey_execution_activity_metrics_output::Builder {
        crate::output::get_journey_execution_activity_metrics_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetJourneyDateRangeKpiOutput {
    /// <p>Provides the results of a query that retrieved the data for a standard engagement metric that applies to a journey, and provides information about that query.</p>
    pub journey_date_range_kpi_response:
        std::option::Option<crate::model::JourneyDateRangeKpiResponse>,
}
impl std::fmt::Debug for GetJourneyDateRangeKpiOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetJourneyDateRangeKpiOutput");
        formatter.field(
            "journey_date_range_kpi_response",
            &self.journey_date_range_kpi_response,
        );
        formatter.finish()
    }
}
/// See [`GetJourneyDateRangeKpiOutput`](crate::output::GetJourneyDateRangeKpiOutput)
pub mod get_journey_date_range_kpi_output {
    /// A builder for [`GetJourneyDateRangeKpiOutput`](crate::output::GetJourneyDateRangeKpiOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) journey_date_range_kpi_response:
            std::option::Option<crate::model::JourneyDateRangeKpiResponse>,
    }
    impl Builder {
        /// <p>Provides the results of a query that retrieved the data for a standard engagement metric that applies to a journey, and provides information about that query.</p>
        pub fn journey_date_range_kpi_response(
            mut self,
            input: crate::model::JourneyDateRangeKpiResponse,
        ) -> Self {
            self.journey_date_range_kpi_response = Some(input);
            self
        }
        pub fn set_journey_date_range_kpi_response(
            mut self,
            input: std::option::Option<crate::model::JourneyDateRangeKpiResponse>,
        ) -> Self {
            self.journey_date_range_kpi_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetJourneyDateRangeKpiOutput`](crate::output::GetJourneyDateRangeKpiOutput)
        pub fn build(self) -> crate::output::GetJourneyDateRangeKpiOutput {
            crate::output::GetJourneyDateRangeKpiOutput {
                journey_date_range_kpi_response: self.journey_date_range_kpi_response,
            }
        }
    }
}
impl GetJourneyDateRangeKpiOutput {
    /// Creates a new builder-style object to manufacture [`GetJourneyDateRangeKpiOutput`](crate::output::GetJourneyDateRangeKpiOutput)
    pub fn builder() -> crate::output::get_journey_date_range_kpi_output::Builder {
        crate::output::get_journey_date_range_kpi_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetJourneyOutput {
    /// <p>Provides information about the status, configuration, and other settings for a journey.</p>
    pub journey_response: std::option::Option<crate::model::JourneyResponse>,
}
impl std::fmt::Debug for GetJourneyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetJourneyOutput");
        formatter.field("journey_response", &self.journey_response);
        formatter.finish()
    }
}
/// See [`GetJourneyOutput`](crate::output::GetJourneyOutput)
pub mod get_journey_output {
    /// A builder for [`GetJourneyOutput`](crate::output::GetJourneyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) journey_response: std::option::Option<crate::model::JourneyResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status, configuration, and other settings for a journey.</p>
        pub fn journey_response(mut self, input: crate::model::JourneyResponse) -> Self {
            self.journey_response = Some(input);
            self
        }
        pub fn set_journey_response(
            mut self,
            input: std::option::Option<crate::model::JourneyResponse>,
        ) -> Self {
            self.journey_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetJourneyOutput`](crate::output::GetJourneyOutput)
        pub fn build(self) -> crate::output::GetJourneyOutput {
            crate::output::GetJourneyOutput {
                journey_response: self.journey_response,
            }
        }
    }
}
impl GetJourneyOutput {
    /// Creates a new builder-style object to manufacture [`GetJourneyOutput`](crate::output::GetJourneyOutput)
    pub fn builder() -> crate::output::get_journey_output::Builder {
        crate::output::get_journey_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetImportJobsOutput {
    /// <p>Provides information about the status and settings of all the import jobs that are associated with an application or segment. An import job is a job that imports endpoint definitions from one or more files.</p>
    pub import_jobs_response: std::option::Option<crate::model::ImportJobsResponse>,
}
impl std::fmt::Debug for GetImportJobsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetImportJobsOutput");
        formatter.field("import_jobs_response", &self.import_jobs_response);
        formatter.finish()
    }
}
/// See [`GetImportJobsOutput`](crate::output::GetImportJobsOutput)
pub mod get_import_jobs_output {
    /// A builder for [`GetImportJobsOutput`](crate::output::GetImportJobsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) import_jobs_response: std::option::Option<crate::model::ImportJobsResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of all the import jobs that are associated with an application or segment. An import job is a job that imports endpoint definitions from one or more files.</p>
        pub fn import_jobs_response(mut self, input: crate::model::ImportJobsResponse) -> Self {
            self.import_jobs_response = Some(input);
            self
        }
        pub fn set_import_jobs_response(
            mut self,
            input: std::option::Option<crate::model::ImportJobsResponse>,
        ) -> Self {
            self.import_jobs_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetImportJobsOutput`](crate::output::GetImportJobsOutput)
        pub fn build(self) -> crate::output::GetImportJobsOutput {
            crate::output::GetImportJobsOutput {
                import_jobs_response: self.import_jobs_response,
            }
        }
    }
}
impl GetImportJobsOutput {
    /// Creates a new builder-style object to manufacture [`GetImportJobsOutput`](crate::output::GetImportJobsOutput)
    pub fn builder() -> crate::output::get_import_jobs_output::Builder {
        crate::output::get_import_jobs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetImportJobOutput {
    /// <p>Provides information about the status and settings of a job that imports endpoint definitions from one or more files. The files can be stored in an Amazon Simple Storage Service (Amazon S3) bucket or uploaded directly from a computer by using the Amazon Pinpoint console.</p>
    pub import_job_response: std::option::Option<crate::model::ImportJobResponse>,
}
impl std::fmt::Debug for GetImportJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetImportJobOutput");
        formatter.field("import_job_response", &self.import_job_response);
        formatter.finish()
    }
}
/// See [`GetImportJobOutput`](crate::output::GetImportJobOutput)
pub mod get_import_job_output {
    /// A builder for [`GetImportJobOutput`](crate::output::GetImportJobOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) import_job_response: std::option::Option<crate::model::ImportJobResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of a job that imports endpoint definitions from one or more files. The files can be stored in an Amazon Simple Storage Service (Amazon S3) bucket or uploaded directly from a computer by using the Amazon Pinpoint console.</p>
        pub fn import_job_response(mut self, input: crate::model::ImportJobResponse) -> Self {
            self.import_job_response = Some(input);
            self
        }
        pub fn set_import_job_response(
            mut self,
            input: std::option::Option<crate::model::ImportJobResponse>,
        ) -> Self {
            self.import_job_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetImportJobOutput`](crate::output::GetImportJobOutput)
        pub fn build(self) -> crate::output::GetImportJobOutput {
            crate::output::GetImportJobOutput {
                import_job_response: self.import_job_response,
            }
        }
    }
}
impl GetImportJobOutput {
    /// Creates a new builder-style object to manufacture [`GetImportJobOutput`](crate::output::GetImportJobOutput)
    pub fn builder() -> crate::output::get_import_job_output::Builder {
        crate::output::get_import_job_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGcmChannelOutput {
    /// <p>Provides information about the status and settings of the GCM channel for an application. The GCM channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.</p>
    pub gcm_channel_response: std::option::Option<crate::model::GcmChannelResponse>,
}
impl std::fmt::Debug for GetGcmChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetGcmChannelOutput");
        formatter.field("gcm_channel_response", &self.gcm_channel_response);
        formatter.finish()
    }
}
/// See [`GetGcmChannelOutput`](crate::output::GetGcmChannelOutput)
pub mod get_gcm_channel_output {
    /// A builder for [`GetGcmChannelOutput`](crate::output::GetGcmChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) gcm_channel_response: std::option::Option<crate::model::GcmChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the GCM channel for an application. The GCM channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.</p>
        pub fn gcm_channel_response(mut self, input: crate::model::GcmChannelResponse) -> Self {
            self.gcm_channel_response = Some(input);
            self
        }
        pub fn set_gcm_channel_response(
            mut self,
            input: std::option::Option<crate::model::GcmChannelResponse>,
        ) -> Self {
            self.gcm_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetGcmChannelOutput`](crate::output::GetGcmChannelOutput)
        pub fn build(self) -> crate::output::GetGcmChannelOutput {
            crate::output::GetGcmChannelOutput {
                gcm_channel_response: self.gcm_channel_response,
            }
        }
    }
}
impl GetGcmChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetGcmChannelOutput`](crate::output::GetGcmChannelOutput)
    pub fn builder() -> crate::output::get_gcm_channel_output::Builder {
        crate::output::get_gcm_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetExportJobsOutput {
    /// <p>Provides information about all the export jobs that are associated with an application or segment. An export job is a job that exports endpoint definitions to a file.</p>
    pub export_jobs_response: std::option::Option<crate::model::ExportJobsResponse>,
}
impl std::fmt::Debug for GetExportJobsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetExportJobsOutput");
        formatter.field("export_jobs_response", &self.export_jobs_response);
        formatter.finish()
    }
}
/// See [`GetExportJobsOutput`](crate::output::GetExportJobsOutput)
pub mod get_export_jobs_output {
    /// A builder for [`GetExportJobsOutput`](crate::output::GetExportJobsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_jobs_response: std::option::Option<crate::model::ExportJobsResponse>,
    }
    impl Builder {
        /// <p>Provides information about all the export jobs that are associated with an application or segment. An export job is a job that exports endpoint definitions to a file.</p>
        pub fn export_jobs_response(mut self, input: crate::model::ExportJobsResponse) -> Self {
            self.export_jobs_response = Some(input);
            self
        }
        pub fn set_export_jobs_response(
            mut self,
            input: std::option::Option<crate::model::ExportJobsResponse>,
        ) -> Self {
            self.export_jobs_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetExportJobsOutput`](crate::output::GetExportJobsOutput)
        pub fn build(self) -> crate::output::GetExportJobsOutput {
            crate::output::GetExportJobsOutput {
                export_jobs_response: self.export_jobs_response,
            }
        }
    }
}
impl GetExportJobsOutput {
    /// Creates a new builder-style object to manufacture [`GetExportJobsOutput`](crate::output::GetExportJobsOutput)
    pub fn builder() -> crate::output::get_export_jobs_output::Builder {
        crate::output::get_export_jobs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetExportJobOutput {
    /// <p>Provides information about the status and settings of a job that exports endpoint definitions to a file. The file can be added directly to an Amazon Simple Storage Service (Amazon S3) bucket by using the Amazon Pinpoint API or downloaded directly to a computer by using the Amazon Pinpoint console.</p>
    pub export_job_response: std::option::Option<crate::model::ExportJobResponse>,
}
impl std::fmt::Debug for GetExportJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetExportJobOutput");
        formatter.field("export_job_response", &self.export_job_response);
        formatter.finish()
    }
}
/// See [`GetExportJobOutput`](crate::output::GetExportJobOutput)
pub mod get_export_job_output {
    /// A builder for [`GetExportJobOutput`](crate::output::GetExportJobOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_job_response: std::option::Option<crate::model::ExportJobResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of a job that exports endpoint definitions to a file. The file can be added directly to an Amazon Simple Storage Service (Amazon S3) bucket by using the Amazon Pinpoint API or downloaded directly to a computer by using the Amazon Pinpoint console.</p>
        pub fn export_job_response(mut self, input: crate::model::ExportJobResponse) -> Self {
            self.export_job_response = Some(input);
            self
        }
        pub fn set_export_job_response(
            mut self,
            input: std::option::Option<crate::model::ExportJobResponse>,
        ) -> Self {
            self.export_job_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetExportJobOutput`](crate::output::GetExportJobOutput)
        pub fn build(self) -> crate::output::GetExportJobOutput {
            crate::output::GetExportJobOutput {
                export_job_response: self.export_job_response,
            }
        }
    }
}
impl GetExportJobOutput {
    /// Creates a new builder-style object to manufacture [`GetExportJobOutput`](crate::output::GetExportJobOutput)
    pub fn builder() -> crate::output::get_export_job_output::Builder {
        crate::output::get_export_job_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetEventStreamOutput {
    /// <p>Specifies settings for publishing event data to an Amazon Kinesis data stream or an Amazon Kinesis Data Firehose delivery stream.</p>
    pub event_stream: std::option::Option<crate::model::EventStream>,
}
impl std::fmt::Debug for GetEventStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetEventStreamOutput");
        formatter.field("event_stream", &self.event_stream);
        formatter.finish()
    }
}
/// See [`GetEventStreamOutput`](crate::output::GetEventStreamOutput)
pub mod get_event_stream_output {
    /// A builder for [`GetEventStreamOutput`](crate::output::GetEventStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_stream: std::option::Option<crate::model::EventStream>,
    }
    impl Builder {
        /// <p>Specifies settings for publishing event data to an Amazon Kinesis data stream or an Amazon Kinesis Data Firehose delivery stream.</p>
        pub fn event_stream(mut self, input: crate::model::EventStream) -> Self {
            self.event_stream = Some(input);
            self
        }
        pub fn set_event_stream(
            mut self,
            input: std::option::Option<crate::model::EventStream>,
        ) -> Self {
            self.event_stream = input;
            self
        }
        /// Consumes the builder and constructs a [`GetEventStreamOutput`](crate::output::GetEventStreamOutput)
        pub fn build(self) -> crate::output::GetEventStreamOutput {
            crate::output::GetEventStreamOutput {
                event_stream: self.event_stream,
            }
        }
    }
}
impl GetEventStreamOutput {
    /// Creates a new builder-style object to manufacture [`GetEventStreamOutput`](crate::output::GetEventStreamOutput)
    pub fn builder() -> crate::output::get_event_stream_output::Builder {
        crate::output::get_event_stream_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetEndpointOutput {
    /// <p>Provides information about the channel type and other settings for an endpoint.</p>
    pub endpoint_response: std::option::Option<crate::model::EndpointResponse>,
}
impl std::fmt::Debug for GetEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetEndpointOutput");
        formatter.field("endpoint_response", &self.endpoint_response);
        formatter.finish()
    }
}
/// See [`GetEndpointOutput`](crate::output::GetEndpointOutput)
pub mod get_endpoint_output {
    /// A builder for [`GetEndpointOutput`](crate::output::GetEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint_response: std::option::Option<crate::model::EndpointResponse>,
    }
    impl Builder {
        /// <p>Provides information about the channel type and other settings for an endpoint.</p>
        pub fn endpoint_response(mut self, input: crate::model::EndpointResponse) -> Self {
            self.endpoint_response = Some(input);
            self
        }
        pub fn set_endpoint_response(
            mut self,
            input: std::option::Option<crate::model::EndpointResponse>,
        ) -> Self {
            self.endpoint_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetEndpointOutput`](crate::output::GetEndpointOutput)
        pub fn build(self) -> crate::output::GetEndpointOutput {
            crate::output::GetEndpointOutput {
                endpoint_response: self.endpoint_response,
            }
        }
    }
}
impl GetEndpointOutput {
    /// Creates a new builder-style object to manufacture [`GetEndpointOutput`](crate::output::GetEndpointOutput)
    pub fn builder() -> crate::output::get_endpoint_output::Builder {
        crate::output::get_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetEmailTemplateOutput {
    /// <p>Provides information about the content and settings for a message template that can be used in messages that are sent through the email channel.</p>
    pub email_template_response: std::option::Option<crate::model::EmailTemplateResponse>,
}
impl std::fmt::Debug for GetEmailTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetEmailTemplateOutput");
        formatter.field("email_template_response", &self.email_template_response);
        formatter.finish()
    }
}
/// See [`GetEmailTemplateOutput`](crate::output::GetEmailTemplateOutput)
pub mod get_email_template_output {
    /// A builder for [`GetEmailTemplateOutput`](crate::output::GetEmailTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) email_template_response:
            std::option::Option<crate::model::EmailTemplateResponse>,
    }
    impl Builder {
        /// <p>Provides information about the content and settings for a message template that can be used in messages that are sent through the email channel.</p>
        pub fn email_template_response(
            mut self,
            input: crate::model::EmailTemplateResponse,
        ) -> Self {
            self.email_template_response = Some(input);
            self
        }
        pub fn set_email_template_response(
            mut self,
            input: std::option::Option<crate::model::EmailTemplateResponse>,
        ) -> Self {
            self.email_template_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetEmailTemplateOutput`](crate::output::GetEmailTemplateOutput)
        pub fn build(self) -> crate::output::GetEmailTemplateOutput {
            crate::output::GetEmailTemplateOutput {
                email_template_response: self.email_template_response,
            }
        }
    }
}
impl GetEmailTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetEmailTemplateOutput`](crate::output::GetEmailTemplateOutput)
    pub fn builder() -> crate::output::get_email_template_output::Builder {
        crate::output::get_email_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetEmailChannelOutput {
    /// <p>Provides information about the status and settings of the email channel for an application.</p>
    pub email_channel_response: std::option::Option<crate::model::EmailChannelResponse>,
}
impl std::fmt::Debug for GetEmailChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetEmailChannelOutput");
        formatter.field("email_channel_response", &self.email_channel_response);
        formatter.finish()
    }
}
/// See [`GetEmailChannelOutput`](crate::output::GetEmailChannelOutput)
pub mod get_email_channel_output {
    /// A builder for [`GetEmailChannelOutput`](crate::output::GetEmailChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) email_channel_response: std::option::Option<crate::model::EmailChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the email channel for an application.</p>
        pub fn email_channel_response(mut self, input: crate::model::EmailChannelResponse) -> Self {
            self.email_channel_response = Some(input);
            self
        }
        pub fn set_email_channel_response(
            mut self,
            input: std::option::Option<crate::model::EmailChannelResponse>,
        ) -> Self {
            self.email_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetEmailChannelOutput`](crate::output::GetEmailChannelOutput)
        pub fn build(self) -> crate::output::GetEmailChannelOutput {
            crate::output::GetEmailChannelOutput {
                email_channel_response: self.email_channel_response,
            }
        }
    }
}
impl GetEmailChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetEmailChannelOutput`](crate::output::GetEmailChannelOutput)
    pub fn builder() -> crate::output::get_email_channel_output::Builder {
        crate::output::get_email_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetChannelsOutput {
    /// <p>Provides information about the general settings and status of all channels for an application, including channels that aren't enabled for the application.</p>
    pub channels_response: std::option::Option<crate::model::ChannelsResponse>,
}
impl std::fmt::Debug for GetChannelsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetChannelsOutput");
        formatter.field("channels_response", &self.channels_response);
        formatter.finish()
    }
}
/// See [`GetChannelsOutput`](crate::output::GetChannelsOutput)
pub mod get_channels_output {
    /// A builder for [`GetChannelsOutput`](crate::output::GetChannelsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channels_response: std::option::Option<crate::model::ChannelsResponse>,
    }
    impl Builder {
        /// <p>Provides information about the general settings and status of all channels for an application, including channels that aren't enabled for the application.</p>
        pub fn channels_response(mut self, input: crate::model::ChannelsResponse) -> Self {
            self.channels_response = Some(input);
            self
        }
        pub fn set_channels_response(
            mut self,
            input: std::option::Option<crate::model::ChannelsResponse>,
        ) -> Self {
            self.channels_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetChannelsOutput`](crate::output::GetChannelsOutput)
        pub fn build(self) -> crate::output::GetChannelsOutput {
            crate::output::GetChannelsOutput {
                channels_response: self.channels_response,
            }
        }
    }
}
impl GetChannelsOutput {
    /// Creates a new builder-style object to manufacture [`GetChannelsOutput`](crate::output::GetChannelsOutput)
    pub fn builder() -> crate::output::get_channels_output::Builder {
        crate::output::get_channels_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCampaignVersionsOutput {
    /// <p>Provides information about the configuration and other settings for all the campaigns that are associated with an application.</p>
    pub campaigns_response: std::option::Option<crate::model::CampaignsResponse>,
}
impl std::fmt::Debug for GetCampaignVersionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCampaignVersionsOutput");
        formatter.field("campaigns_response", &self.campaigns_response);
        formatter.finish()
    }
}
/// See [`GetCampaignVersionsOutput`](crate::output::GetCampaignVersionsOutput)
pub mod get_campaign_versions_output {
    /// A builder for [`GetCampaignVersionsOutput`](crate::output::GetCampaignVersionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) campaigns_response: std::option::Option<crate::model::CampaignsResponse>,
    }
    impl Builder {
        /// <p>Provides information about the configuration and other settings for all the campaigns that are associated with an application.</p>
        pub fn campaigns_response(mut self, input: crate::model::CampaignsResponse) -> Self {
            self.campaigns_response = Some(input);
            self
        }
        pub fn set_campaigns_response(
            mut self,
            input: std::option::Option<crate::model::CampaignsResponse>,
        ) -> Self {
            self.campaigns_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetCampaignVersionsOutput`](crate::output::GetCampaignVersionsOutput)
        pub fn build(self) -> crate::output::GetCampaignVersionsOutput {
            crate::output::GetCampaignVersionsOutput {
                campaigns_response: self.campaigns_response,
            }
        }
    }
}
impl GetCampaignVersionsOutput {
    /// Creates a new builder-style object to manufacture [`GetCampaignVersionsOutput`](crate::output::GetCampaignVersionsOutput)
    pub fn builder() -> crate::output::get_campaign_versions_output::Builder {
        crate::output::get_campaign_versions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCampaignVersionOutput {
    /// <p>Provides information about the status, configuration, and other settings for a campaign.</p>
    pub campaign_response: std::option::Option<crate::model::CampaignResponse>,
}
impl std::fmt::Debug for GetCampaignVersionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCampaignVersionOutput");
        formatter.field("campaign_response", &self.campaign_response);
        formatter.finish()
    }
}
/// See [`GetCampaignVersionOutput`](crate::output::GetCampaignVersionOutput)
pub mod get_campaign_version_output {
    /// A builder for [`GetCampaignVersionOutput`](crate::output::GetCampaignVersionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) campaign_response: std::option::Option<crate::model::CampaignResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status, configuration, and other settings for a campaign.</p>
        pub fn campaign_response(mut self, input: crate::model::CampaignResponse) -> Self {
            self.campaign_response = Some(input);
            self
        }
        pub fn set_campaign_response(
            mut self,
            input: std::option::Option<crate::model::CampaignResponse>,
        ) -> Self {
            self.campaign_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetCampaignVersionOutput`](crate::output::GetCampaignVersionOutput)
        pub fn build(self) -> crate::output::GetCampaignVersionOutput {
            crate::output::GetCampaignVersionOutput {
                campaign_response: self.campaign_response,
            }
        }
    }
}
impl GetCampaignVersionOutput {
    /// Creates a new builder-style object to manufacture [`GetCampaignVersionOutput`](crate::output::GetCampaignVersionOutput)
    pub fn builder() -> crate::output::get_campaign_version_output::Builder {
        crate::output::get_campaign_version_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCampaignsOutput {
    /// <p>Provides information about the configuration and other settings for all the campaigns that are associated with an application.</p>
    pub campaigns_response: std::option::Option<crate::model::CampaignsResponse>,
}
impl std::fmt::Debug for GetCampaignsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCampaignsOutput");
        formatter.field("campaigns_response", &self.campaigns_response);
        formatter.finish()
    }
}
/// See [`GetCampaignsOutput`](crate::output::GetCampaignsOutput)
pub mod get_campaigns_output {
    /// A builder for [`GetCampaignsOutput`](crate::output::GetCampaignsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) campaigns_response: std::option::Option<crate::model::CampaignsResponse>,
    }
    impl Builder {
        /// <p>Provides information about the configuration and other settings for all the campaigns that are associated with an application.</p>
        pub fn campaigns_response(mut self, input: crate::model::CampaignsResponse) -> Self {
            self.campaigns_response = Some(input);
            self
        }
        pub fn set_campaigns_response(
            mut self,
            input: std::option::Option<crate::model::CampaignsResponse>,
        ) -> Self {
            self.campaigns_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetCampaignsOutput`](crate::output::GetCampaignsOutput)
        pub fn build(self) -> crate::output::GetCampaignsOutput {
            crate::output::GetCampaignsOutput {
                campaigns_response: self.campaigns_response,
            }
        }
    }
}
impl GetCampaignsOutput {
    /// Creates a new builder-style object to manufacture [`GetCampaignsOutput`](crate::output::GetCampaignsOutput)
    pub fn builder() -> crate::output::get_campaigns_output::Builder {
        crate::output::get_campaigns_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCampaignDateRangeKpiOutput {
    /// <p>Provides the results of a query that retrieved the data for a standard metric that applies to a campaign, and provides information about that query.</p>
    pub campaign_date_range_kpi_response:
        std::option::Option<crate::model::CampaignDateRangeKpiResponse>,
}
impl std::fmt::Debug for GetCampaignDateRangeKpiOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCampaignDateRangeKpiOutput");
        formatter.field(
            "campaign_date_range_kpi_response",
            &self.campaign_date_range_kpi_response,
        );
        formatter.finish()
    }
}
/// See [`GetCampaignDateRangeKpiOutput`](crate::output::GetCampaignDateRangeKpiOutput)
pub mod get_campaign_date_range_kpi_output {
    /// A builder for [`GetCampaignDateRangeKpiOutput`](crate::output::GetCampaignDateRangeKpiOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) campaign_date_range_kpi_response:
            std::option::Option<crate::model::CampaignDateRangeKpiResponse>,
    }
    impl Builder {
        /// <p>Provides the results of a query that retrieved the data for a standard metric that applies to a campaign, and provides information about that query.</p>
        pub fn campaign_date_range_kpi_response(
            mut self,
            input: crate::model::CampaignDateRangeKpiResponse,
        ) -> Self {
            self.campaign_date_range_kpi_response = Some(input);
            self
        }
        pub fn set_campaign_date_range_kpi_response(
            mut self,
            input: std::option::Option<crate::model::CampaignDateRangeKpiResponse>,
        ) -> Self {
            self.campaign_date_range_kpi_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetCampaignDateRangeKpiOutput`](crate::output::GetCampaignDateRangeKpiOutput)
        pub fn build(self) -> crate::output::GetCampaignDateRangeKpiOutput {
            crate::output::GetCampaignDateRangeKpiOutput {
                campaign_date_range_kpi_response: self.campaign_date_range_kpi_response,
            }
        }
    }
}
impl GetCampaignDateRangeKpiOutput {
    /// Creates a new builder-style object to manufacture [`GetCampaignDateRangeKpiOutput`](crate::output::GetCampaignDateRangeKpiOutput)
    pub fn builder() -> crate::output::get_campaign_date_range_kpi_output::Builder {
        crate::output::get_campaign_date_range_kpi_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCampaignActivitiesOutput {
    /// <p>Provides information about the activities that were performed by a campaign.</p>
    pub activities_response: std::option::Option<crate::model::ActivitiesResponse>,
}
impl std::fmt::Debug for GetCampaignActivitiesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCampaignActivitiesOutput");
        formatter.field("activities_response", &self.activities_response);
        formatter.finish()
    }
}
/// See [`GetCampaignActivitiesOutput`](crate::output::GetCampaignActivitiesOutput)
pub mod get_campaign_activities_output {
    /// A builder for [`GetCampaignActivitiesOutput`](crate::output::GetCampaignActivitiesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) activities_response: std::option::Option<crate::model::ActivitiesResponse>,
    }
    impl Builder {
        /// <p>Provides information about the activities that were performed by a campaign.</p>
        pub fn activities_response(mut self, input: crate::model::ActivitiesResponse) -> Self {
            self.activities_response = Some(input);
            self
        }
        pub fn set_activities_response(
            mut self,
            input: std::option::Option<crate::model::ActivitiesResponse>,
        ) -> Self {
            self.activities_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetCampaignActivitiesOutput`](crate::output::GetCampaignActivitiesOutput)
        pub fn build(self) -> crate::output::GetCampaignActivitiesOutput {
            crate::output::GetCampaignActivitiesOutput {
                activities_response: self.activities_response,
            }
        }
    }
}
impl GetCampaignActivitiesOutput {
    /// Creates a new builder-style object to manufacture [`GetCampaignActivitiesOutput`](crate::output::GetCampaignActivitiesOutput)
    pub fn builder() -> crate::output::get_campaign_activities_output::Builder {
        crate::output::get_campaign_activities_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCampaignOutput {
    /// <p>Provides information about the status, configuration, and other settings for a campaign.</p>
    pub campaign_response: std::option::Option<crate::model::CampaignResponse>,
}
impl std::fmt::Debug for GetCampaignOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCampaignOutput");
        formatter.field("campaign_response", &self.campaign_response);
        formatter.finish()
    }
}
/// See [`GetCampaignOutput`](crate::output::GetCampaignOutput)
pub mod get_campaign_output {
    /// A builder for [`GetCampaignOutput`](crate::output::GetCampaignOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) campaign_response: std::option::Option<crate::model::CampaignResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status, configuration, and other settings for a campaign.</p>
        pub fn campaign_response(mut self, input: crate::model::CampaignResponse) -> Self {
            self.campaign_response = Some(input);
            self
        }
        pub fn set_campaign_response(
            mut self,
            input: std::option::Option<crate::model::CampaignResponse>,
        ) -> Self {
            self.campaign_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetCampaignOutput`](crate::output::GetCampaignOutput)
        pub fn build(self) -> crate::output::GetCampaignOutput {
            crate::output::GetCampaignOutput {
                campaign_response: self.campaign_response,
            }
        }
    }
}
impl GetCampaignOutput {
    /// Creates a new builder-style object to manufacture [`GetCampaignOutput`](crate::output::GetCampaignOutput)
    pub fn builder() -> crate::output::get_campaign_output::Builder {
        crate::output::get_campaign_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetBaiduChannelOutput {
    /// <p>Provides information about the status and settings of the Baidu (Baidu Cloud Push) channel for an application.</p>
    pub baidu_channel_response: std::option::Option<crate::model::BaiduChannelResponse>,
}
impl std::fmt::Debug for GetBaiduChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetBaiduChannelOutput");
        formatter.field("baidu_channel_response", &self.baidu_channel_response);
        formatter.finish()
    }
}
/// See [`GetBaiduChannelOutput`](crate::output::GetBaiduChannelOutput)
pub mod get_baidu_channel_output {
    /// A builder for [`GetBaiduChannelOutput`](crate::output::GetBaiduChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) baidu_channel_response: std::option::Option<crate::model::BaiduChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the Baidu (Baidu Cloud Push) channel for an application.</p>
        pub fn baidu_channel_response(mut self, input: crate::model::BaiduChannelResponse) -> Self {
            self.baidu_channel_response = Some(input);
            self
        }
        pub fn set_baidu_channel_response(
            mut self,
            input: std::option::Option<crate::model::BaiduChannelResponse>,
        ) -> Self {
            self.baidu_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetBaiduChannelOutput`](crate::output::GetBaiduChannelOutput)
        pub fn build(self) -> crate::output::GetBaiduChannelOutput {
            crate::output::GetBaiduChannelOutput {
                baidu_channel_response: self.baidu_channel_response,
            }
        }
    }
}
impl GetBaiduChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetBaiduChannelOutput`](crate::output::GetBaiduChannelOutput)
    pub fn builder() -> crate::output::get_baidu_channel_output::Builder {
        crate::output::get_baidu_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAppsOutput {
    /// <p>Provides information about all of your applications.</p>
    pub applications_response: std::option::Option<crate::model::ApplicationsResponse>,
}
impl std::fmt::Debug for GetAppsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAppsOutput");
        formatter.field("applications_response", &self.applications_response);
        formatter.finish()
    }
}
/// See [`GetAppsOutput`](crate::output::GetAppsOutput)
pub mod get_apps_output {
    /// A builder for [`GetAppsOutput`](crate::output::GetAppsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) applications_response: std::option::Option<crate::model::ApplicationsResponse>,
    }
    impl Builder {
        /// <p>Provides information about all of your applications.</p>
        pub fn applications_response(mut self, input: crate::model::ApplicationsResponse) -> Self {
            self.applications_response = Some(input);
            self
        }
        pub fn set_applications_response(
            mut self,
            input: std::option::Option<crate::model::ApplicationsResponse>,
        ) -> Self {
            self.applications_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAppsOutput`](crate::output::GetAppsOutput)
        pub fn build(self) -> crate::output::GetAppsOutput {
            crate::output::GetAppsOutput {
                applications_response: self.applications_response,
            }
        }
    }
}
impl GetAppsOutput {
    /// Creates a new builder-style object to manufacture [`GetAppsOutput`](crate::output::GetAppsOutput)
    pub fn builder() -> crate::output::get_apps_output::Builder {
        crate::output::get_apps_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetApplicationSettingsOutput {
    /// <p>Provides information about an application, including the default settings for an application.</p>
    pub application_settings_resource:
        std::option::Option<crate::model::ApplicationSettingsResource>,
}
impl std::fmt::Debug for GetApplicationSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetApplicationSettingsOutput");
        formatter.field(
            "application_settings_resource",
            &self.application_settings_resource,
        );
        formatter.finish()
    }
}
/// See [`GetApplicationSettingsOutput`](crate::output::GetApplicationSettingsOutput)
pub mod get_application_settings_output {
    /// A builder for [`GetApplicationSettingsOutput`](crate::output::GetApplicationSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_settings_resource:
            std::option::Option<crate::model::ApplicationSettingsResource>,
    }
    impl Builder {
        /// <p>Provides information about an application, including the default settings for an application.</p>
        pub fn application_settings_resource(
            mut self,
            input: crate::model::ApplicationSettingsResource,
        ) -> Self {
            self.application_settings_resource = Some(input);
            self
        }
        pub fn set_application_settings_resource(
            mut self,
            input: std::option::Option<crate::model::ApplicationSettingsResource>,
        ) -> Self {
            self.application_settings_resource = input;
            self
        }
        /// Consumes the builder and constructs a [`GetApplicationSettingsOutput`](crate::output::GetApplicationSettingsOutput)
        pub fn build(self) -> crate::output::GetApplicationSettingsOutput {
            crate::output::GetApplicationSettingsOutput {
                application_settings_resource: self.application_settings_resource,
            }
        }
    }
}
impl GetApplicationSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetApplicationSettingsOutput`](crate::output::GetApplicationSettingsOutput)
    pub fn builder() -> crate::output::get_application_settings_output::Builder {
        crate::output::get_application_settings_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetApplicationDateRangeKpiOutput {
    /// <p>Provides the results of a query that retrieved the data for a standard metric that applies to an application, and provides information about that query.</p>
    pub application_date_range_kpi_response:
        std::option::Option<crate::model::ApplicationDateRangeKpiResponse>,
}
impl std::fmt::Debug for GetApplicationDateRangeKpiOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetApplicationDateRangeKpiOutput");
        formatter.field(
            "application_date_range_kpi_response",
            &self.application_date_range_kpi_response,
        );
        formatter.finish()
    }
}
/// See [`GetApplicationDateRangeKpiOutput`](crate::output::GetApplicationDateRangeKpiOutput)
pub mod get_application_date_range_kpi_output {
    /// A builder for [`GetApplicationDateRangeKpiOutput`](crate::output::GetApplicationDateRangeKpiOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_date_range_kpi_response:
            std::option::Option<crate::model::ApplicationDateRangeKpiResponse>,
    }
    impl Builder {
        /// <p>Provides the results of a query that retrieved the data for a standard metric that applies to an application, and provides information about that query.</p>
        pub fn application_date_range_kpi_response(
            mut self,
            input: crate::model::ApplicationDateRangeKpiResponse,
        ) -> Self {
            self.application_date_range_kpi_response = Some(input);
            self
        }
        pub fn set_application_date_range_kpi_response(
            mut self,
            input: std::option::Option<crate::model::ApplicationDateRangeKpiResponse>,
        ) -> Self {
            self.application_date_range_kpi_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetApplicationDateRangeKpiOutput`](crate::output::GetApplicationDateRangeKpiOutput)
        pub fn build(self) -> crate::output::GetApplicationDateRangeKpiOutput {
            crate::output::GetApplicationDateRangeKpiOutput {
                application_date_range_kpi_response: self.application_date_range_kpi_response,
            }
        }
    }
}
impl GetApplicationDateRangeKpiOutput {
    /// Creates a new builder-style object to manufacture [`GetApplicationDateRangeKpiOutput`](crate::output::GetApplicationDateRangeKpiOutput)
    pub fn builder() -> crate::output::get_application_date_range_kpi_output::Builder {
        crate::output::get_application_date_range_kpi_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAppOutput {
    /// <p>Provides information about an application.</p>
    pub application_response: std::option::Option<crate::model::ApplicationResponse>,
}
impl std::fmt::Debug for GetAppOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAppOutput");
        formatter.field("application_response", &self.application_response);
        formatter.finish()
    }
}
/// See [`GetAppOutput`](crate::output::GetAppOutput)
pub mod get_app_output {
    /// A builder for [`GetAppOutput`](crate::output::GetAppOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_response: std::option::Option<crate::model::ApplicationResponse>,
    }
    impl Builder {
        /// <p>Provides information about an application.</p>
        pub fn application_response(mut self, input: crate::model::ApplicationResponse) -> Self {
            self.application_response = Some(input);
            self
        }
        pub fn set_application_response(
            mut self,
            input: std::option::Option<crate::model::ApplicationResponse>,
        ) -> Self {
            self.application_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAppOutput`](crate::output::GetAppOutput)
        pub fn build(self) -> crate::output::GetAppOutput {
            crate::output::GetAppOutput {
                application_response: self.application_response,
            }
        }
    }
}
impl GetAppOutput {
    /// Creates a new builder-style object to manufacture [`GetAppOutput`](crate::output::GetAppOutput)
    pub fn builder() -> crate::output::get_app_output::Builder {
        crate::output::get_app_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetApnsVoipSandboxChannelOutput {
    /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP sandbox channel for an application.</p>
    pub apns_voip_sandbox_channel_response:
        std::option::Option<crate::model::ApnsVoipSandboxChannelResponse>,
}
impl std::fmt::Debug for GetApnsVoipSandboxChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetApnsVoipSandboxChannelOutput");
        formatter.field(
            "apns_voip_sandbox_channel_response",
            &self.apns_voip_sandbox_channel_response,
        );
        formatter.finish()
    }
}
/// See [`GetApnsVoipSandboxChannelOutput`](crate::output::GetApnsVoipSandboxChannelOutput)
pub mod get_apns_voip_sandbox_channel_output {
    /// A builder for [`GetApnsVoipSandboxChannelOutput`](crate::output::GetApnsVoipSandboxChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apns_voip_sandbox_channel_response:
            std::option::Option<crate::model::ApnsVoipSandboxChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP sandbox channel for an application.</p>
        pub fn apns_voip_sandbox_channel_response(
            mut self,
            input: crate::model::ApnsVoipSandboxChannelResponse,
        ) -> Self {
            self.apns_voip_sandbox_channel_response = Some(input);
            self
        }
        pub fn set_apns_voip_sandbox_channel_response(
            mut self,
            input: std::option::Option<crate::model::ApnsVoipSandboxChannelResponse>,
        ) -> Self {
            self.apns_voip_sandbox_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetApnsVoipSandboxChannelOutput`](crate::output::GetApnsVoipSandboxChannelOutput)
        pub fn build(self) -> crate::output::GetApnsVoipSandboxChannelOutput {
            crate::output::GetApnsVoipSandboxChannelOutput {
                apns_voip_sandbox_channel_response: self.apns_voip_sandbox_channel_response,
            }
        }
    }
}
impl GetApnsVoipSandboxChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetApnsVoipSandboxChannelOutput`](crate::output::GetApnsVoipSandboxChannelOutput)
    pub fn builder() -> crate::output::get_apns_voip_sandbox_channel_output::Builder {
        crate::output::get_apns_voip_sandbox_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetApnsVoipChannelOutput {
    /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.</p>
    pub apns_voip_channel_response: std::option::Option<crate::model::ApnsVoipChannelResponse>,
}
impl std::fmt::Debug for GetApnsVoipChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetApnsVoipChannelOutput");
        formatter.field(
            "apns_voip_channel_response",
            &self.apns_voip_channel_response,
        );
        formatter.finish()
    }
}
/// See [`GetApnsVoipChannelOutput`](crate::output::GetApnsVoipChannelOutput)
pub mod get_apns_voip_channel_output {
    /// A builder for [`GetApnsVoipChannelOutput`](crate::output::GetApnsVoipChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apns_voip_channel_response:
            std::option::Option<crate::model::ApnsVoipChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.</p>
        pub fn apns_voip_channel_response(
            mut self,
            input: crate::model::ApnsVoipChannelResponse,
        ) -> Self {
            self.apns_voip_channel_response = Some(input);
            self
        }
        pub fn set_apns_voip_channel_response(
            mut self,
            input: std::option::Option<crate::model::ApnsVoipChannelResponse>,
        ) -> Self {
            self.apns_voip_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetApnsVoipChannelOutput`](crate::output::GetApnsVoipChannelOutput)
        pub fn build(self) -> crate::output::GetApnsVoipChannelOutput {
            crate::output::GetApnsVoipChannelOutput {
                apns_voip_channel_response: self.apns_voip_channel_response,
            }
        }
    }
}
impl GetApnsVoipChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetApnsVoipChannelOutput`](crate::output::GetApnsVoipChannelOutput)
    pub fn builder() -> crate::output::get_apns_voip_channel_output::Builder {
        crate::output::get_apns_voip_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetApnsSandboxChannelOutput {
    /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.</p>
    pub apns_sandbox_channel_response:
        std::option::Option<crate::model::ApnsSandboxChannelResponse>,
}
impl std::fmt::Debug for GetApnsSandboxChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetApnsSandboxChannelOutput");
        formatter.field(
            "apns_sandbox_channel_response",
            &self.apns_sandbox_channel_response,
        );
        formatter.finish()
    }
}
/// See [`GetApnsSandboxChannelOutput`](crate::output::GetApnsSandboxChannelOutput)
pub mod get_apns_sandbox_channel_output {
    /// A builder for [`GetApnsSandboxChannelOutput`](crate::output::GetApnsSandboxChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apns_sandbox_channel_response:
            std::option::Option<crate::model::ApnsSandboxChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.</p>
        pub fn apns_sandbox_channel_response(
            mut self,
            input: crate::model::ApnsSandboxChannelResponse,
        ) -> Self {
            self.apns_sandbox_channel_response = Some(input);
            self
        }
        pub fn set_apns_sandbox_channel_response(
            mut self,
            input: std::option::Option<crate::model::ApnsSandboxChannelResponse>,
        ) -> Self {
            self.apns_sandbox_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetApnsSandboxChannelOutput`](crate::output::GetApnsSandboxChannelOutput)
        pub fn build(self) -> crate::output::GetApnsSandboxChannelOutput {
            crate::output::GetApnsSandboxChannelOutput {
                apns_sandbox_channel_response: self.apns_sandbox_channel_response,
            }
        }
    }
}
impl GetApnsSandboxChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetApnsSandboxChannelOutput`](crate::output::GetApnsSandboxChannelOutput)
    pub fn builder() -> crate::output::get_apns_sandbox_channel_output::Builder {
        crate::output::get_apns_sandbox_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetApnsChannelOutput {
    /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) channel for an application.</p>
    pub apns_channel_response: std::option::Option<crate::model::ApnsChannelResponse>,
}
impl std::fmt::Debug for GetApnsChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetApnsChannelOutput");
        formatter.field("apns_channel_response", &self.apns_channel_response);
        formatter.finish()
    }
}
/// See [`GetApnsChannelOutput`](crate::output::GetApnsChannelOutput)
pub mod get_apns_channel_output {
    /// A builder for [`GetApnsChannelOutput`](crate::output::GetApnsChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apns_channel_response: std::option::Option<crate::model::ApnsChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) channel for an application.</p>
        pub fn apns_channel_response(mut self, input: crate::model::ApnsChannelResponse) -> Self {
            self.apns_channel_response = Some(input);
            self
        }
        pub fn set_apns_channel_response(
            mut self,
            input: std::option::Option<crate::model::ApnsChannelResponse>,
        ) -> Self {
            self.apns_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetApnsChannelOutput`](crate::output::GetApnsChannelOutput)
        pub fn build(self) -> crate::output::GetApnsChannelOutput {
            crate::output::GetApnsChannelOutput {
                apns_channel_response: self.apns_channel_response,
            }
        }
    }
}
impl GetApnsChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetApnsChannelOutput`](crate::output::GetApnsChannelOutput)
    pub fn builder() -> crate::output::get_apns_channel_output::Builder {
        crate::output::get_apns_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAdmChannelOutput {
    /// <p>Provides information about the status and settings of the ADM (Amazon Device Messaging) channel for an application.</p>
    pub adm_channel_response: std::option::Option<crate::model::AdmChannelResponse>,
}
impl std::fmt::Debug for GetAdmChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAdmChannelOutput");
        formatter.field("adm_channel_response", &self.adm_channel_response);
        formatter.finish()
    }
}
/// See [`GetAdmChannelOutput`](crate::output::GetAdmChannelOutput)
pub mod get_adm_channel_output {
    /// A builder for [`GetAdmChannelOutput`](crate::output::GetAdmChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) adm_channel_response: std::option::Option<crate::model::AdmChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the ADM (Amazon Device Messaging) channel for an application.</p>
        pub fn adm_channel_response(mut self, input: crate::model::AdmChannelResponse) -> Self {
            self.adm_channel_response = Some(input);
            self
        }
        pub fn set_adm_channel_response(
            mut self,
            input: std::option::Option<crate::model::AdmChannelResponse>,
        ) -> Self {
            self.adm_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAdmChannelOutput`](crate::output::GetAdmChannelOutput)
        pub fn build(self) -> crate::output::GetAdmChannelOutput {
            crate::output::GetAdmChannelOutput {
                adm_channel_response: self.adm_channel_response,
            }
        }
    }
}
impl GetAdmChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetAdmChannelOutput`](crate::output::GetAdmChannelOutput)
    pub fn builder() -> crate::output::get_adm_channel_output::Builder {
        crate::output::get_adm_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteVoiceTemplateOutput {
    /// <p>Provides information about an API request or response.</p>
    pub message_body: std::option::Option<crate::model::MessageBody>,
}
impl std::fmt::Debug for DeleteVoiceTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteVoiceTemplateOutput");
        formatter.field("message_body", &self.message_body);
        formatter.finish()
    }
}
/// See [`DeleteVoiceTemplateOutput`](crate::output::DeleteVoiceTemplateOutput)
pub mod delete_voice_template_output {
    /// A builder for [`DeleteVoiceTemplateOutput`](crate::output::DeleteVoiceTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_body: std::option::Option<crate::model::MessageBody>,
    }
    impl Builder {
        /// <p>Provides information about an API request or response.</p>
        pub fn message_body(mut self, input: crate::model::MessageBody) -> Self {
            self.message_body = Some(input);
            self
        }
        pub fn set_message_body(
            mut self,
            input: std::option::Option<crate::model::MessageBody>,
        ) -> Self {
            self.message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVoiceTemplateOutput`](crate::output::DeleteVoiceTemplateOutput)
        pub fn build(self) -> crate::output::DeleteVoiceTemplateOutput {
            crate::output::DeleteVoiceTemplateOutput {
                message_body: self.message_body,
            }
        }
    }
}
impl DeleteVoiceTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceTemplateOutput`](crate::output::DeleteVoiceTemplateOutput)
    pub fn builder() -> crate::output::delete_voice_template_output::Builder {
        crate::output::delete_voice_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteVoiceChannelOutput {
    /// <p>Provides information about the status and settings of the voice channel for an application.</p>
    pub voice_channel_response: std::option::Option<crate::model::VoiceChannelResponse>,
}
impl std::fmt::Debug for DeleteVoiceChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteVoiceChannelOutput");
        formatter.field("voice_channel_response", &self.voice_channel_response);
        formatter.finish()
    }
}
/// See [`DeleteVoiceChannelOutput`](crate::output::DeleteVoiceChannelOutput)
pub mod delete_voice_channel_output {
    /// A builder for [`DeleteVoiceChannelOutput`](crate::output::DeleteVoiceChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) voice_channel_response: std::option::Option<crate::model::VoiceChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the voice channel for an application.</p>
        pub fn voice_channel_response(mut self, input: crate::model::VoiceChannelResponse) -> Self {
            self.voice_channel_response = Some(input);
            self
        }
        pub fn set_voice_channel_response(
            mut self,
            input: std::option::Option<crate::model::VoiceChannelResponse>,
        ) -> Self {
            self.voice_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVoiceChannelOutput`](crate::output::DeleteVoiceChannelOutput)
        pub fn build(self) -> crate::output::DeleteVoiceChannelOutput {
            crate::output::DeleteVoiceChannelOutput {
                voice_channel_response: self.voice_channel_response,
            }
        }
    }
}
impl DeleteVoiceChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVoiceChannelOutput`](crate::output::DeleteVoiceChannelOutput)
    pub fn builder() -> crate::output::delete_voice_channel_output::Builder {
        crate::output::delete_voice_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteUserEndpointsOutput {
    /// <p>Provides information about all the endpoints that are associated with a user ID.</p>
    pub endpoints_response: std::option::Option<crate::model::EndpointsResponse>,
}
impl std::fmt::Debug for DeleteUserEndpointsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteUserEndpointsOutput");
        formatter.field("endpoints_response", &self.endpoints_response);
        formatter.finish()
    }
}
/// See [`DeleteUserEndpointsOutput`](crate::output::DeleteUserEndpointsOutput)
pub mod delete_user_endpoints_output {
    /// A builder for [`DeleteUserEndpointsOutput`](crate::output::DeleteUserEndpointsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoints_response: std::option::Option<crate::model::EndpointsResponse>,
    }
    impl Builder {
        /// <p>Provides information about all the endpoints that are associated with a user ID.</p>
        pub fn endpoints_response(mut self, input: crate::model::EndpointsResponse) -> Self {
            self.endpoints_response = Some(input);
            self
        }
        pub fn set_endpoints_response(
            mut self,
            input: std::option::Option<crate::model::EndpointsResponse>,
        ) -> Self {
            self.endpoints_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteUserEndpointsOutput`](crate::output::DeleteUserEndpointsOutput)
        pub fn build(self) -> crate::output::DeleteUserEndpointsOutput {
            crate::output::DeleteUserEndpointsOutput {
                endpoints_response: self.endpoints_response,
            }
        }
    }
}
impl DeleteUserEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteUserEndpointsOutput`](crate::output::DeleteUserEndpointsOutput)
    pub fn builder() -> crate::output::delete_user_endpoints_output::Builder {
        crate::output::delete_user_endpoints_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSmsTemplateOutput {
    /// <p>Provides information about an API request or response.</p>
    pub message_body: std::option::Option<crate::model::MessageBody>,
}
impl std::fmt::Debug for DeleteSmsTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSmsTemplateOutput");
        formatter.field("message_body", &self.message_body);
        formatter.finish()
    }
}
/// See [`DeleteSmsTemplateOutput`](crate::output::DeleteSmsTemplateOutput)
pub mod delete_sms_template_output {
    /// A builder for [`DeleteSmsTemplateOutput`](crate::output::DeleteSmsTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_body: std::option::Option<crate::model::MessageBody>,
    }
    impl Builder {
        /// <p>Provides information about an API request or response.</p>
        pub fn message_body(mut self, input: crate::model::MessageBody) -> Self {
            self.message_body = Some(input);
            self
        }
        pub fn set_message_body(
            mut self,
            input: std::option::Option<crate::model::MessageBody>,
        ) -> Self {
            self.message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSmsTemplateOutput`](crate::output::DeleteSmsTemplateOutput)
        pub fn build(self) -> crate::output::DeleteSmsTemplateOutput {
            crate::output::DeleteSmsTemplateOutput {
                message_body: self.message_body,
            }
        }
    }
}
impl DeleteSmsTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSmsTemplateOutput`](crate::output::DeleteSmsTemplateOutput)
    pub fn builder() -> crate::output::delete_sms_template_output::Builder {
        crate::output::delete_sms_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSmsChannelOutput {
    /// <p>Provides information about the status and settings of the SMS channel for an application.</p>
    pub sms_channel_response: std::option::Option<crate::model::SmsChannelResponse>,
}
impl std::fmt::Debug for DeleteSmsChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSmsChannelOutput");
        formatter.field("sms_channel_response", &self.sms_channel_response);
        formatter.finish()
    }
}
/// See [`DeleteSmsChannelOutput`](crate::output::DeleteSmsChannelOutput)
pub mod delete_sms_channel_output {
    /// A builder for [`DeleteSmsChannelOutput`](crate::output::DeleteSmsChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sms_channel_response: std::option::Option<crate::model::SmsChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the SMS channel for an application.</p>
        pub fn sms_channel_response(mut self, input: crate::model::SmsChannelResponse) -> Self {
            self.sms_channel_response = Some(input);
            self
        }
        pub fn set_sms_channel_response(
            mut self,
            input: std::option::Option<crate::model::SmsChannelResponse>,
        ) -> Self {
            self.sms_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSmsChannelOutput`](crate::output::DeleteSmsChannelOutput)
        pub fn build(self) -> crate::output::DeleteSmsChannelOutput {
            crate::output::DeleteSmsChannelOutput {
                sms_channel_response: self.sms_channel_response,
            }
        }
    }
}
impl DeleteSmsChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSmsChannelOutput`](crate::output::DeleteSmsChannelOutput)
    pub fn builder() -> crate::output::delete_sms_channel_output::Builder {
        crate::output::delete_sms_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSegmentOutput {
    /// <p>Provides information about the configuration, dimension, and other settings for a segment.</p>
    pub segment_response: std::option::Option<crate::model::SegmentResponse>,
}
impl std::fmt::Debug for DeleteSegmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSegmentOutput");
        formatter.field("segment_response", &self.segment_response);
        formatter.finish()
    }
}
/// See [`DeleteSegmentOutput`](crate::output::DeleteSegmentOutput)
pub mod delete_segment_output {
    /// A builder for [`DeleteSegmentOutput`](crate::output::DeleteSegmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) segment_response: std::option::Option<crate::model::SegmentResponse>,
    }
    impl Builder {
        /// <p>Provides information about the configuration, dimension, and other settings for a segment.</p>
        pub fn segment_response(mut self, input: crate::model::SegmentResponse) -> Self {
            self.segment_response = Some(input);
            self
        }
        pub fn set_segment_response(
            mut self,
            input: std::option::Option<crate::model::SegmentResponse>,
        ) -> Self {
            self.segment_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSegmentOutput`](crate::output::DeleteSegmentOutput)
        pub fn build(self) -> crate::output::DeleteSegmentOutput {
            crate::output::DeleteSegmentOutput {
                segment_response: self.segment_response,
            }
        }
    }
}
impl DeleteSegmentOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSegmentOutput`](crate::output::DeleteSegmentOutput)
    pub fn builder() -> crate::output::delete_segment_output::Builder {
        crate::output::delete_segment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteRecommenderConfigurationOutput {
    /// <p>Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.</p>
    pub recommender_configuration_response:
        std::option::Option<crate::model::RecommenderConfigurationResponse>,
}
impl std::fmt::Debug for DeleteRecommenderConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteRecommenderConfigurationOutput");
        formatter.field(
            "recommender_configuration_response",
            &self.recommender_configuration_response,
        );
        formatter.finish()
    }
}
/// See [`DeleteRecommenderConfigurationOutput`](crate::output::DeleteRecommenderConfigurationOutput)
pub mod delete_recommender_configuration_output {
    /// A builder for [`DeleteRecommenderConfigurationOutput`](crate::output::DeleteRecommenderConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) recommender_configuration_response:
            std::option::Option<crate::model::RecommenderConfigurationResponse>,
    }
    impl Builder {
        /// <p>Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.</p>
        pub fn recommender_configuration_response(
            mut self,
            input: crate::model::RecommenderConfigurationResponse,
        ) -> Self {
            self.recommender_configuration_response = Some(input);
            self
        }
        pub fn set_recommender_configuration_response(
            mut self,
            input: std::option::Option<crate::model::RecommenderConfigurationResponse>,
        ) -> Self {
            self.recommender_configuration_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteRecommenderConfigurationOutput`](crate::output::DeleteRecommenderConfigurationOutput)
        pub fn build(self) -> crate::output::DeleteRecommenderConfigurationOutput {
            crate::output::DeleteRecommenderConfigurationOutput {
                recommender_configuration_response: self.recommender_configuration_response,
            }
        }
    }
}
impl DeleteRecommenderConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRecommenderConfigurationOutput`](crate::output::DeleteRecommenderConfigurationOutput)
    pub fn builder() -> crate::output::delete_recommender_configuration_output::Builder {
        crate::output::delete_recommender_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeletePushTemplateOutput {
    /// <p>Provides information about an API request or response.</p>
    pub message_body: std::option::Option<crate::model::MessageBody>,
}
impl std::fmt::Debug for DeletePushTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeletePushTemplateOutput");
        formatter.field("message_body", &self.message_body);
        formatter.finish()
    }
}
/// See [`DeletePushTemplateOutput`](crate::output::DeletePushTemplateOutput)
pub mod delete_push_template_output {
    /// A builder for [`DeletePushTemplateOutput`](crate::output::DeletePushTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_body: std::option::Option<crate::model::MessageBody>,
    }
    impl Builder {
        /// <p>Provides information about an API request or response.</p>
        pub fn message_body(mut self, input: crate::model::MessageBody) -> Self {
            self.message_body = Some(input);
            self
        }
        pub fn set_message_body(
            mut self,
            input: std::option::Option<crate::model::MessageBody>,
        ) -> Self {
            self.message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`DeletePushTemplateOutput`](crate::output::DeletePushTemplateOutput)
        pub fn build(self) -> crate::output::DeletePushTemplateOutput {
            crate::output::DeletePushTemplateOutput {
                message_body: self.message_body,
            }
        }
    }
}
impl DeletePushTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DeletePushTemplateOutput`](crate::output::DeletePushTemplateOutput)
    pub fn builder() -> crate::output::delete_push_template_output::Builder {
        crate::output::delete_push_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteJourneyOutput {
    /// <p>Provides information about the status, configuration, and other settings for a journey.</p>
    pub journey_response: std::option::Option<crate::model::JourneyResponse>,
}
impl std::fmt::Debug for DeleteJourneyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteJourneyOutput");
        formatter.field("journey_response", &self.journey_response);
        formatter.finish()
    }
}
/// See [`DeleteJourneyOutput`](crate::output::DeleteJourneyOutput)
pub mod delete_journey_output {
    /// A builder for [`DeleteJourneyOutput`](crate::output::DeleteJourneyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) journey_response: std::option::Option<crate::model::JourneyResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status, configuration, and other settings for a journey.</p>
        pub fn journey_response(mut self, input: crate::model::JourneyResponse) -> Self {
            self.journey_response = Some(input);
            self
        }
        pub fn set_journey_response(
            mut self,
            input: std::option::Option<crate::model::JourneyResponse>,
        ) -> Self {
            self.journey_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteJourneyOutput`](crate::output::DeleteJourneyOutput)
        pub fn build(self) -> crate::output::DeleteJourneyOutput {
            crate::output::DeleteJourneyOutput {
                journey_response: self.journey_response,
            }
        }
    }
}
impl DeleteJourneyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteJourneyOutput`](crate::output::DeleteJourneyOutput)
    pub fn builder() -> crate::output::delete_journey_output::Builder {
        crate::output::delete_journey_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteGcmChannelOutput {
    /// <p>Provides information about the status and settings of the GCM channel for an application. The GCM channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.</p>
    pub gcm_channel_response: std::option::Option<crate::model::GcmChannelResponse>,
}
impl std::fmt::Debug for DeleteGcmChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteGcmChannelOutput");
        formatter.field("gcm_channel_response", &self.gcm_channel_response);
        formatter.finish()
    }
}
/// See [`DeleteGcmChannelOutput`](crate::output::DeleteGcmChannelOutput)
pub mod delete_gcm_channel_output {
    /// A builder for [`DeleteGcmChannelOutput`](crate::output::DeleteGcmChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) gcm_channel_response: std::option::Option<crate::model::GcmChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the GCM channel for an application. The GCM channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.</p>
        pub fn gcm_channel_response(mut self, input: crate::model::GcmChannelResponse) -> Self {
            self.gcm_channel_response = Some(input);
            self
        }
        pub fn set_gcm_channel_response(
            mut self,
            input: std::option::Option<crate::model::GcmChannelResponse>,
        ) -> Self {
            self.gcm_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteGcmChannelOutput`](crate::output::DeleteGcmChannelOutput)
        pub fn build(self) -> crate::output::DeleteGcmChannelOutput {
            crate::output::DeleteGcmChannelOutput {
                gcm_channel_response: self.gcm_channel_response,
            }
        }
    }
}
impl DeleteGcmChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteGcmChannelOutput`](crate::output::DeleteGcmChannelOutput)
    pub fn builder() -> crate::output::delete_gcm_channel_output::Builder {
        crate::output::delete_gcm_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteEventStreamOutput {
    /// <p>Specifies settings for publishing event data to an Amazon Kinesis data stream or an Amazon Kinesis Data Firehose delivery stream.</p>
    pub event_stream: std::option::Option<crate::model::EventStream>,
}
impl std::fmt::Debug for DeleteEventStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteEventStreamOutput");
        formatter.field("event_stream", &self.event_stream);
        formatter.finish()
    }
}
/// See [`DeleteEventStreamOutput`](crate::output::DeleteEventStreamOutput)
pub mod delete_event_stream_output {
    /// A builder for [`DeleteEventStreamOutput`](crate::output::DeleteEventStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_stream: std::option::Option<crate::model::EventStream>,
    }
    impl Builder {
        /// <p>Specifies settings for publishing event data to an Amazon Kinesis data stream or an Amazon Kinesis Data Firehose delivery stream.</p>
        pub fn event_stream(mut self, input: crate::model::EventStream) -> Self {
            self.event_stream = Some(input);
            self
        }
        pub fn set_event_stream(
            mut self,
            input: std::option::Option<crate::model::EventStream>,
        ) -> Self {
            self.event_stream = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEventStreamOutput`](crate::output::DeleteEventStreamOutput)
        pub fn build(self) -> crate::output::DeleteEventStreamOutput {
            crate::output::DeleteEventStreamOutput {
                event_stream: self.event_stream,
            }
        }
    }
}
impl DeleteEventStreamOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEventStreamOutput`](crate::output::DeleteEventStreamOutput)
    pub fn builder() -> crate::output::delete_event_stream_output::Builder {
        crate::output::delete_event_stream_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteEndpointOutput {
    /// <p>Provides information about the channel type and other settings for an endpoint.</p>
    pub endpoint_response: std::option::Option<crate::model::EndpointResponse>,
}
impl std::fmt::Debug for DeleteEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteEndpointOutput");
        formatter.field("endpoint_response", &self.endpoint_response);
        formatter.finish()
    }
}
/// See [`DeleteEndpointOutput`](crate::output::DeleteEndpointOutput)
pub mod delete_endpoint_output {
    /// A builder for [`DeleteEndpointOutput`](crate::output::DeleteEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint_response: std::option::Option<crate::model::EndpointResponse>,
    }
    impl Builder {
        /// <p>Provides information about the channel type and other settings for an endpoint.</p>
        pub fn endpoint_response(mut self, input: crate::model::EndpointResponse) -> Self {
            self.endpoint_response = Some(input);
            self
        }
        pub fn set_endpoint_response(
            mut self,
            input: std::option::Option<crate::model::EndpointResponse>,
        ) -> Self {
            self.endpoint_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEndpointOutput`](crate::output::DeleteEndpointOutput)
        pub fn build(self) -> crate::output::DeleteEndpointOutput {
            crate::output::DeleteEndpointOutput {
                endpoint_response: self.endpoint_response,
            }
        }
    }
}
impl DeleteEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEndpointOutput`](crate::output::DeleteEndpointOutput)
    pub fn builder() -> crate::output::delete_endpoint_output::Builder {
        crate::output::delete_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteEmailTemplateOutput {
    /// <p>Provides information about an API request or response.</p>
    pub message_body: std::option::Option<crate::model::MessageBody>,
}
impl std::fmt::Debug for DeleteEmailTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteEmailTemplateOutput");
        formatter.field("message_body", &self.message_body);
        formatter.finish()
    }
}
/// See [`DeleteEmailTemplateOutput`](crate::output::DeleteEmailTemplateOutput)
pub mod delete_email_template_output {
    /// A builder for [`DeleteEmailTemplateOutput`](crate::output::DeleteEmailTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_body: std::option::Option<crate::model::MessageBody>,
    }
    impl Builder {
        /// <p>Provides information about an API request or response.</p>
        pub fn message_body(mut self, input: crate::model::MessageBody) -> Self {
            self.message_body = Some(input);
            self
        }
        pub fn set_message_body(
            mut self,
            input: std::option::Option<crate::model::MessageBody>,
        ) -> Self {
            self.message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEmailTemplateOutput`](crate::output::DeleteEmailTemplateOutput)
        pub fn build(self) -> crate::output::DeleteEmailTemplateOutput {
            crate::output::DeleteEmailTemplateOutput {
                message_body: self.message_body,
            }
        }
    }
}
impl DeleteEmailTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEmailTemplateOutput`](crate::output::DeleteEmailTemplateOutput)
    pub fn builder() -> crate::output::delete_email_template_output::Builder {
        crate::output::delete_email_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteEmailChannelOutput {
    /// <p>Provides information about the status and settings of the email channel for an application.</p>
    pub email_channel_response: std::option::Option<crate::model::EmailChannelResponse>,
}
impl std::fmt::Debug for DeleteEmailChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteEmailChannelOutput");
        formatter.field("email_channel_response", &self.email_channel_response);
        formatter.finish()
    }
}
/// See [`DeleteEmailChannelOutput`](crate::output::DeleteEmailChannelOutput)
pub mod delete_email_channel_output {
    /// A builder for [`DeleteEmailChannelOutput`](crate::output::DeleteEmailChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) email_channel_response: std::option::Option<crate::model::EmailChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the email channel for an application.</p>
        pub fn email_channel_response(mut self, input: crate::model::EmailChannelResponse) -> Self {
            self.email_channel_response = Some(input);
            self
        }
        pub fn set_email_channel_response(
            mut self,
            input: std::option::Option<crate::model::EmailChannelResponse>,
        ) -> Self {
            self.email_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEmailChannelOutput`](crate::output::DeleteEmailChannelOutput)
        pub fn build(self) -> crate::output::DeleteEmailChannelOutput {
            crate::output::DeleteEmailChannelOutput {
                email_channel_response: self.email_channel_response,
            }
        }
    }
}
impl DeleteEmailChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEmailChannelOutput`](crate::output::DeleteEmailChannelOutput)
    pub fn builder() -> crate::output::delete_email_channel_output::Builder {
        crate::output::delete_email_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteCampaignOutput {
    /// <p>Provides information about the status, configuration, and other settings for a campaign.</p>
    pub campaign_response: std::option::Option<crate::model::CampaignResponse>,
}
impl std::fmt::Debug for DeleteCampaignOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteCampaignOutput");
        formatter.field("campaign_response", &self.campaign_response);
        formatter.finish()
    }
}
/// See [`DeleteCampaignOutput`](crate::output::DeleteCampaignOutput)
pub mod delete_campaign_output {
    /// A builder for [`DeleteCampaignOutput`](crate::output::DeleteCampaignOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) campaign_response: std::option::Option<crate::model::CampaignResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status, configuration, and other settings for a campaign.</p>
        pub fn campaign_response(mut self, input: crate::model::CampaignResponse) -> Self {
            self.campaign_response = Some(input);
            self
        }
        pub fn set_campaign_response(
            mut self,
            input: std::option::Option<crate::model::CampaignResponse>,
        ) -> Self {
            self.campaign_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCampaignOutput`](crate::output::DeleteCampaignOutput)
        pub fn build(self) -> crate::output::DeleteCampaignOutput {
            crate::output::DeleteCampaignOutput {
                campaign_response: self.campaign_response,
            }
        }
    }
}
impl DeleteCampaignOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCampaignOutput`](crate::output::DeleteCampaignOutput)
    pub fn builder() -> crate::output::delete_campaign_output::Builder {
        crate::output::delete_campaign_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteBaiduChannelOutput {
    /// <p>Provides information about the status and settings of the Baidu (Baidu Cloud Push) channel for an application.</p>
    pub baidu_channel_response: std::option::Option<crate::model::BaiduChannelResponse>,
}
impl std::fmt::Debug for DeleteBaiduChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteBaiduChannelOutput");
        formatter.field("baidu_channel_response", &self.baidu_channel_response);
        formatter.finish()
    }
}
/// See [`DeleteBaiduChannelOutput`](crate::output::DeleteBaiduChannelOutput)
pub mod delete_baidu_channel_output {
    /// A builder for [`DeleteBaiduChannelOutput`](crate::output::DeleteBaiduChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) baidu_channel_response: std::option::Option<crate::model::BaiduChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the Baidu (Baidu Cloud Push) channel for an application.</p>
        pub fn baidu_channel_response(mut self, input: crate::model::BaiduChannelResponse) -> Self {
            self.baidu_channel_response = Some(input);
            self
        }
        pub fn set_baidu_channel_response(
            mut self,
            input: std::option::Option<crate::model::BaiduChannelResponse>,
        ) -> Self {
            self.baidu_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteBaiduChannelOutput`](crate::output::DeleteBaiduChannelOutput)
        pub fn build(self) -> crate::output::DeleteBaiduChannelOutput {
            crate::output::DeleteBaiduChannelOutput {
                baidu_channel_response: self.baidu_channel_response,
            }
        }
    }
}
impl DeleteBaiduChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteBaiduChannelOutput`](crate::output::DeleteBaiduChannelOutput)
    pub fn builder() -> crate::output::delete_baidu_channel_output::Builder {
        crate::output::delete_baidu_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAppOutput {
    /// <p>Provides information about an application.</p>
    pub application_response: std::option::Option<crate::model::ApplicationResponse>,
}
impl std::fmt::Debug for DeleteAppOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAppOutput");
        formatter.field("application_response", &self.application_response);
        formatter.finish()
    }
}
/// See [`DeleteAppOutput`](crate::output::DeleteAppOutput)
pub mod delete_app_output {
    /// A builder for [`DeleteAppOutput`](crate::output::DeleteAppOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_response: std::option::Option<crate::model::ApplicationResponse>,
    }
    impl Builder {
        /// <p>Provides information about an application.</p>
        pub fn application_response(mut self, input: crate::model::ApplicationResponse) -> Self {
            self.application_response = Some(input);
            self
        }
        pub fn set_application_response(
            mut self,
            input: std::option::Option<crate::model::ApplicationResponse>,
        ) -> Self {
            self.application_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAppOutput`](crate::output::DeleteAppOutput)
        pub fn build(self) -> crate::output::DeleteAppOutput {
            crate::output::DeleteAppOutput {
                application_response: self.application_response,
            }
        }
    }
}
impl DeleteAppOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAppOutput`](crate::output::DeleteAppOutput)
    pub fn builder() -> crate::output::delete_app_output::Builder {
        crate::output::delete_app_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteApnsVoipSandboxChannelOutput {
    /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP sandbox channel for an application.</p>
    pub apns_voip_sandbox_channel_response:
        std::option::Option<crate::model::ApnsVoipSandboxChannelResponse>,
}
impl std::fmt::Debug for DeleteApnsVoipSandboxChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteApnsVoipSandboxChannelOutput");
        formatter.field(
            "apns_voip_sandbox_channel_response",
            &self.apns_voip_sandbox_channel_response,
        );
        formatter.finish()
    }
}
/// See [`DeleteApnsVoipSandboxChannelOutput`](crate::output::DeleteApnsVoipSandboxChannelOutput)
pub mod delete_apns_voip_sandbox_channel_output {
    /// A builder for [`DeleteApnsVoipSandboxChannelOutput`](crate::output::DeleteApnsVoipSandboxChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apns_voip_sandbox_channel_response:
            std::option::Option<crate::model::ApnsVoipSandboxChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP sandbox channel for an application.</p>
        pub fn apns_voip_sandbox_channel_response(
            mut self,
            input: crate::model::ApnsVoipSandboxChannelResponse,
        ) -> Self {
            self.apns_voip_sandbox_channel_response = Some(input);
            self
        }
        pub fn set_apns_voip_sandbox_channel_response(
            mut self,
            input: std::option::Option<crate::model::ApnsVoipSandboxChannelResponse>,
        ) -> Self {
            self.apns_voip_sandbox_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApnsVoipSandboxChannelOutput`](crate::output::DeleteApnsVoipSandboxChannelOutput)
        pub fn build(self) -> crate::output::DeleteApnsVoipSandboxChannelOutput {
            crate::output::DeleteApnsVoipSandboxChannelOutput {
                apns_voip_sandbox_channel_response: self.apns_voip_sandbox_channel_response,
            }
        }
    }
}
impl DeleteApnsVoipSandboxChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApnsVoipSandboxChannelOutput`](crate::output::DeleteApnsVoipSandboxChannelOutput)
    pub fn builder() -> crate::output::delete_apns_voip_sandbox_channel_output::Builder {
        crate::output::delete_apns_voip_sandbox_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteApnsVoipChannelOutput {
    /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.</p>
    pub apns_voip_channel_response: std::option::Option<crate::model::ApnsVoipChannelResponse>,
}
impl std::fmt::Debug for DeleteApnsVoipChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteApnsVoipChannelOutput");
        formatter.field(
            "apns_voip_channel_response",
            &self.apns_voip_channel_response,
        );
        formatter.finish()
    }
}
/// See [`DeleteApnsVoipChannelOutput`](crate::output::DeleteApnsVoipChannelOutput)
pub mod delete_apns_voip_channel_output {
    /// A builder for [`DeleteApnsVoipChannelOutput`](crate::output::DeleteApnsVoipChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apns_voip_channel_response:
            std::option::Option<crate::model::ApnsVoipChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.</p>
        pub fn apns_voip_channel_response(
            mut self,
            input: crate::model::ApnsVoipChannelResponse,
        ) -> Self {
            self.apns_voip_channel_response = Some(input);
            self
        }
        pub fn set_apns_voip_channel_response(
            mut self,
            input: std::option::Option<crate::model::ApnsVoipChannelResponse>,
        ) -> Self {
            self.apns_voip_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApnsVoipChannelOutput`](crate::output::DeleteApnsVoipChannelOutput)
        pub fn build(self) -> crate::output::DeleteApnsVoipChannelOutput {
            crate::output::DeleteApnsVoipChannelOutput {
                apns_voip_channel_response: self.apns_voip_channel_response,
            }
        }
    }
}
impl DeleteApnsVoipChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApnsVoipChannelOutput`](crate::output::DeleteApnsVoipChannelOutput)
    pub fn builder() -> crate::output::delete_apns_voip_channel_output::Builder {
        crate::output::delete_apns_voip_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteApnsSandboxChannelOutput {
    /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.</p>
    pub apns_sandbox_channel_response:
        std::option::Option<crate::model::ApnsSandboxChannelResponse>,
}
impl std::fmt::Debug for DeleteApnsSandboxChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteApnsSandboxChannelOutput");
        formatter.field(
            "apns_sandbox_channel_response",
            &self.apns_sandbox_channel_response,
        );
        formatter.finish()
    }
}
/// See [`DeleteApnsSandboxChannelOutput`](crate::output::DeleteApnsSandboxChannelOutput)
pub mod delete_apns_sandbox_channel_output {
    /// A builder for [`DeleteApnsSandboxChannelOutput`](crate::output::DeleteApnsSandboxChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apns_sandbox_channel_response:
            std::option::Option<crate::model::ApnsSandboxChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.</p>
        pub fn apns_sandbox_channel_response(
            mut self,
            input: crate::model::ApnsSandboxChannelResponse,
        ) -> Self {
            self.apns_sandbox_channel_response = Some(input);
            self
        }
        pub fn set_apns_sandbox_channel_response(
            mut self,
            input: std::option::Option<crate::model::ApnsSandboxChannelResponse>,
        ) -> Self {
            self.apns_sandbox_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApnsSandboxChannelOutput`](crate::output::DeleteApnsSandboxChannelOutput)
        pub fn build(self) -> crate::output::DeleteApnsSandboxChannelOutput {
            crate::output::DeleteApnsSandboxChannelOutput {
                apns_sandbox_channel_response: self.apns_sandbox_channel_response,
            }
        }
    }
}
impl DeleteApnsSandboxChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApnsSandboxChannelOutput`](crate::output::DeleteApnsSandboxChannelOutput)
    pub fn builder() -> crate::output::delete_apns_sandbox_channel_output::Builder {
        crate::output::delete_apns_sandbox_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteApnsChannelOutput {
    /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) channel for an application.</p>
    pub apns_channel_response: std::option::Option<crate::model::ApnsChannelResponse>,
}
impl std::fmt::Debug for DeleteApnsChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteApnsChannelOutput");
        formatter.field("apns_channel_response", &self.apns_channel_response);
        formatter.finish()
    }
}
/// See [`DeleteApnsChannelOutput`](crate::output::DeleteApnsChannelOutput)
pub mod delete_apns_channel_output {
    /// A builder for [`DeleteApnsChannelOutput`](crate::output::DeleteApnsChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apns_channel_response: std::option::Option<crate::model::ApnsChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the APNs (Apple Push Notification service) channel for an application.</p>
        pub fn apns_channel_response(mut self, input: crate::model::ApnsChannelResponse) -> Self {
            self.apns_channel_response = Some(input);
            self
        }
        pub fn set_apns_channel_response(
            mut self,
            input: std::option::Option<crate::model::ApnsChannelResponse>,
        ) -> Self {
            self.apns_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApnsChannelOutput`](crate::output::DeleteApnsChannelOutput)
        pub fn build(self) -> crate::output::DeleteApnsChannelOutput {
            crate::output::DeleteApnsChannelOutput {
                apns_channel_response: self.apns_channel_response,
            }
        }
    }
}
impl DeleteApnsChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApnsChannelOutput`](crate::output::DeleteApnsChannelOutput)
    pub fn builder() -> crate::output::delete_apns_channel_output::Builder {
        crate::output::delete_apns_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAdmChannelOutput {
    /// <p>Provides information about the status and settings of the ADM (Amazon Device Messaging) channel for an application.</p>
    pub adm_channel_response: std::option::Option<crate::model::AdmChannelResponse>,
}
impl std::fmt::Debug for DeleteAdmChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAdmChannelOutput");
        formatter.field("adm_channel_response", &self.adm_channel_response);
        formatter.finish()
    }
}
/// See [`DeleteAdmChannelOutput`](crate::output::DeleteAdmChannelOutput)
pub mod delete_adm_channel_output {
    /// A builder for [`DeleteAdmChannelOutput`](crate::output::DeleteAdmChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) adm_channel_response: std::option::Option<crate::model::AdmChannelResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of the ADM (Amazon Device Messaging) channel for an application.</p>
        pub fn adm_channel_response(mut self, input: crate::model::AdmChannelResponse) -> Self {
            self.adm_channel_response = Some(input);
            self
        }
        pub fn set_adm_channel_response(
            mut self,
            input: std::option::Option<crate::model::AdmChannelResponse>,
        ) -> Self {
            self.adm_channel_response = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAdmChannelOutput`](crate::output::DeleteAdmChannelOutput)
        pub fn build(self) -> crate::output::DeleteAdmChannelOutput {
            crate::output::DeleteAdmChannelOutput {
                adm_channel_response: self.adm_channel_response,
            }
        }
    }
}
impl DeleteAdmChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAdmChannelOutput`](crate::output::DeleteAdmChannelOutput)
    pub fn builder() -> crate::output::delete_adm_channel_output::Builder {
        crate::output::delete_adm_channel_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateVoiceTemplateOutput {
    /// <p>Provides information about a request to create a message template.</p>
    pub create_template_message_body: std::option::Option<crate::model::CreateTemplateMessageBody>,
}
impl std::fmt::Debug for CreateVoiceTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateVoiceTemplateOutput");
        formatter.field(
            "create_template_message_body",
            &self.create_template_message_body,
        );
        formatter.finish()
    }
}
/// See [`CreateVoiceTemplateOutput`](crate::output::CreateVoiceTemplateOutput)
pub mod create_voice_template_output {
    /// A builder for [`CreateVoiceTemplateOutput`](crate::output::CreateVoiceTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) create_template_message_body:
            std::option::Option<crate::model::CreateTemplateMessageBody>,
    }
    impl Builder {
        /// <p>Provides information about a request to create a message template.</p>
        pub fn create_template_message_body(
            mut self,
            input: crate::model::CreateTemplateMessageBody,
        ) -> Self {
            self.create_template_message_body = Some(input);
            self
        }
        pub fn set_create_template_message_body(
            mut self,
            input: std::option::Option<crate::model::CreateTemplateMessageBody>,
        ) -> Self {
            self.create_template_message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateVoiceTemplateOutput`](crate::output::CreateVoiceTemplateOutput)
        pub fn build(self) -> crate::output::CreateVoiceTemplateOutput {
            crate::output::CreateVoiceTemplateOutput {
                create_template_message_body: self.create_template_message_body,
            }
        }
    }
}
impl CreateVoiceTemplateOutput {
    /// Creates a new builder-style object to manufacture [`CreateVoiceTemplateOutput`](crate::output::CreateVoiceTemplateOutput)
    pub fn builder() -> crate::output::create_voice_template_output::Builder {
        crate::output::create_voice_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSmsTemplateOutput {
    /// <p>Provides information about a request to create a message template.</p>
    pub create_template_message_body: std::option::Option<crate::model::CreateTemplateMessageBody>,
}
impl std::fmt::Debug for CreateSmsTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSmsTemplateOutput");
        formatter.field(
            "create_template_message_body",
            &self.create_template_message_body,
        );
        formatter.finish()
    }
}
/// See [`CreateSmsTemplateOutput`](crate::output::CreateSmsTemplateOutput)
pub mod create_sms_template_output {
    /// A builder for [`CreateSmsTemplateOutput`](crate::output::CreateSmsTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) create_template_message_body:
            std::option::Option<crate::model::CreateTemplateMessageBody>,
    }
    impl Builder {
        /// <p>Provides information about a request to create a message template.</p>
        pub fn create_template_message_body(
            mut self,
            input: crate::model::CreateTemplateMessageBody,
        ) -> Self {
            self.create_template_message_body = Some(input);
            self
        }
        pub fn set_create_template_message_body(
            mut self,
            input: std::option::Option<crate::model::CreateTemplateMessageBody>,
        ) -> Self {
            self.create_template_message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateSmsTemplateOutput`](crate::output::CreateSmsTemplateOutput)
        pub fn build(self) -> crate::output::CreateSmsTemplateOutput {
            crate::output::CreateSmsTemplateOutput {
                create_template_message_body: self.create_template_message_body,
            }
        }
    }
}
impl CreateSmsTemplateOutput {
    /// Creates a new builder-style object to manufacture [`CreateSmsTemplateOutput`](crate::output::CreateSmsTemplateOutput)
    pub fn builder() -> crate::output::create_sms_template_output::Builder {
        crate::output::create_sms_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSegmentOutput {
    /// <p>Provides information about the configuration, dimension, and other settings for a segment.</p>
    pub segment_response: std::option::Option<crate::model::SegmentResponse>,
}
impl std::fmt::Debug for CreateSegmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSegmentOutput");
        formatter.field("segment_response", &self.segment_response);
        formatter.finish()
    }
}
/// See [`CreateSegmentOutput`](crate::output::CreateSegmentOutput)
pub mod create_segment_output {
    /// A builder for [`CreateSegmentOutput`](crate::output::CreateSegmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) segment_response: std::option::Option<crate::model::SegmentResponse>,
    }
    impl Builder {
        /// <p>Provides information about the configuration, dimension, and other settings for a segment.</p>
        pub fn segment_response(mut self, input: crate::model::SegmentResponse) -> Self {
            self.segment_response = Some(input);
            self
        }
        pub fn set_segment_response(
            mut self,
            input: std::option::Option<crate::model::SegmentResponse>,
        ) -> Self {
            self.segment_response = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateSegmentOutput`](crate::output::CreateSegmentOutput)
        pub fn build(self) -> crate::output::CreateSegmentOutput {
            crate::output::CreateSegmentOutput {
                segment_response: self.segment_response,
            }
        }
    }
}
impl CreateSegmentOutput {
    /// Creates a new builder-style object to manufacture [`CreateSegmentOutput`](crate::output::CreateSegmentOutput)
    pub fn builder() -> crate::output::create_segment_output::Builder {
        crate::output::create_segment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateRecommenderConfigurationOutput {
    /// <p>Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.</p>
    pub recommender_configuration_response:
        std::option::Option<crate::model::RecommenderConfigurationResponse>,
}
impl std::fmt::Debug for CreateRecommenderConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateRecommenderConfigurationOutput");
        formatter.field(
            "recommender_configuration_response",
            &self.recommender_configuration_response,
        );
        formatter.finish()
    }
}
/// See [`CreateRecommenderConfigurationOutput`](crate::output::CreateRecommenderConfigurationOutput)
pub mod create_recommender_configuration_output {
    /// A builder for [`CreateRecommenderConfigurationOutput`](crate::output::CreateRecommenderConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) recommender_configuration_response:
            std::option::Option<crate::model::RecommenderConfigurationResponse>,
    }
    impl Builder {
        /// <p>Provides information about Amazon Pinpoint configuration settings for retrieving and processing data from a recommender model.</p>
        pub fn recommender_configuration_response(
            mut self,
            input: crate::model::RecommenderConfigurationResponse,
        ) -> Self {
            self.recommender_configuration_response = Some(input);
            self
        }
        pub fn set_recommender_configuration_response(
            mut self,
            input: std::option::Option<crate::model::RecommenderConfigurationResponse>,
        ) -> Self {
            self.recommender_configuration_response = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateRecommenderConfigurationOutput`](crate::output::CreateRecommenderConfigurationOutput)
        pub fn build(self) -> crate::output::CreateRecommenderConfigurationOutput {
            crate::output::CreateRecommenderConfigurationOutput {
                recommender_configuration_response: self.recommender_configuration_response,
            }
        }
    }
}
impl CreateRecommenderConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateRecommenderConfigurationOutput`](crate::output::CreateRecommenderConfigurationOutput)
    pub fn builder() -> crate::output::create_recommender_configuration_output::Builder {
        crate::output::create_recommender_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreatePushTemplateOutput {
    /// <p>Provides information about a request to create a message template.</p>
    pub create_template_message_body: std::option::Option<crate::model::CreateTemplateMessageBody>,
}
impl std::fmt::Debug for CreatePushTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePushTemplateOutput");
        formatter.field(
            "create_template_message_body",
            &self.create_template_message_body,
        );
        formatter.finish()
    }
}
/// See [`CreatePushTemplateOutput`](crate::output::CreatePushTemplateOutput)
pub mod create_push_template_output {
    /// A builder for [`CreatePushTemplateOutput`](crate::output::CreatePushTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) create_template_message_body:
            std::option::Option<crate::model::CreateTemplateMessageBody>,
    }
    impl Builder {
        /// <p>Provides information about a request to create a message template.</p>
        pub fn create_template_message_body(
            mut self,
            input: crate::model::CreateTemplateMessageBody,
        ) -> Self {
            self.create_template_message_body = Some(input);
            self
        }
        pub fn set_create_template_message_body(
            mut self,
            input: std::option::Option<crate::model::CreateTemplateMessageBody>,
        ) -> Self {
            self.create_template_message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`CreatePushTemplateOutput`](crate::output::CreatePushTemplateOutput)
        pub fn build(self) -> crate::output::CreatePushTemplateOutput {
            crate::output::CreatePushTemplateOutput {
                create_template_message_body: self.create_template_message_body,
            }
        }
    }
}
impl CreatePushTemplateOutput {
    /// Creates a new builder-style object to manufacture [`CreatePushTemplateOutput`](crate::output::CreatePushTemplateOutput)
    pub fn builder() -> crate::output::create_push_template_output::Builder {
        crate::output::create_push_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateJourneyOutput {
    /// <p>Provides information about the status, configuration, and other settings for a journey.</p>
    pub journey_response: std::option::Option<crate::model::JourneyResponse>,
}
impl std::fmt::Debug for CreateJourneyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateJourneyOutput");
        formatter.field("journey_response", &self.journey_response);
        formatter.finish()
    }
}
/// See [`CreateJourneyOutput`](crate::output::CreateJourneyOutput)
pub mod create_journey_output {
    /// A builder for [`CreateJourneyOutput`](crate::output::CreateJourneyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) journey_response: std::option::Option<crate::model::JourneyResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status, configuration, and other settings for a journey.</p>
        pub fn journey_response(mut self, input: crate::model::JourneyResponse) -> Self {
            self.journey_response = Some(input);
            self
        }
        pub fn set_journey_response(
            mut self,
            input: std::option::Option<crate::model::JourneyResponse>,
        ) -> Self {
            self.journey_response = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateJourneyOutput`](crate::output::CreateJourneyOutput)
        pub fn build(self) -> crate::output::CreateJourneyOutput {
            crate::output::CreateJourneyOutput {
                journey_response: self.journey_response,
            }
        }
    }
}
impl CreateJourneyOutput {
    /// Creates a new builder-style object to manufacture [`CreateJourneyOutput`](crate::output::CreateJourneyOutput)
    pub fn builder() -> crate::output::create_journey_output::Builder {
        crate::output::create_journey_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateImportJobOutput {
    /// <p>Provides information about the status and settings of a job that imports endpoint definitions from one or more files. The files can be stored in an Amazon Simple Storage Service (Amazon S3) bucket or uploaded directly from a computer by using the Amazon Pinpoint console.</p>
    pub import_job_response: std::option::Option<crate::model::ImportJobResponse>,
}
impl std::fmt::Debug for CreateImportJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateImportJobOutput");
        formatter.field("import_job_response", &self.import_job_response);
        formatter.finish()
    }
}
/// See [`CreateImportJobOutput`](crate::output::CreateImportJobOutput)
pub mod create_import_job_output {
    /// A builder for [`CreateImportJobOutput`](crate::output::CreateImportJobOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) import_job_response: std::option::Option<crate::model::ImportJobResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of a job that imports endpoint definitions from one or more files. The files can be stored in an Amazon Simple Storage Service (Amazon S3) bucket or uploaded directly from a computer by using the Amazon Pinpoint console.</p>
        pub fn import_job_response(mut self, input: crate::model::ImportJobResponse) -> Self {
            self.import_job_response = Some(input);
            self
        }
        pub fn set_import_job_response(
            mut self,
            input: std::option::Option<crate::model::ImportJobResponse>,
        ) -> Self {
            self.import_job_response = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateImportJobOutput`](crate::output::CreateImportJobOutput)
        pub fn build(self) -> crate::output::CreateImportJobOutput {
            crate::output::CreateImportJobOutput {
                import_job_response: self.import_job_response,
            }
        }
    }
}
impl CreateImportJobOutput {
    /// Creates a new builder-style object to manufacture [`CreateImportJobOutput`](crate::output::CreateImportJobOutput)
    pub fn builder() -> crate::output::create_import_job_output::Builder {
        crate::output::create_import_job_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateExportJobOutput {
    /// <p>Provides information about the status and settings of a job that exports endpoint definitions to a file. The file can be added directly to an Amazon Simple Storage Service (Amazon S3) bucket by using the Amazon Pinpoint API or downloaded directly to a computer by using the Amazon Pinpoint console.</p>
    pub export_job_response: std::option::Option<crate::model::ExportJobResponse>,
}
impl std::fmt::Debug for CreateExportJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateExportJobOutput");
        formatter.field("export_job_response", &self.export_job_response);
        formatter.finish()
    }
}
/// See [`CreateExportJobOutput`](crate::output::CreateExportJobOutput)
pub mod create_export_job_output {
    /// A builder for [`CreateExportJobOutput`](crate::output::CreateExportJobOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_job_response: std::option::Option<crate::model::ExportJobResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status and settings of a job that exports endpoint definitions to a file. The file can be added directly to an Amazon Simple Storage Service (Amazon S3) bucket by using the Amazon Pinpoint API or downloaded directly to a computer by using the Amazon Pinpoint console.</p>
        pub fn export_job_response(mut self, input: crate::model::ExportJobResponse) -> Self {
            self.export_job_response = Some(input);
            self
        }
        pub fn set_export_job_response(
            mut self,
            input: std::option::Option<crate::model::ExportJobResponse>,
        ) -> Self {
            self.export_job_response = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateExportJobOutput`](crate::output::CreateExportJobOutput)
        pub fn build(self) -> crate::output::CreateExportJobOutput {
            crate::output::CreateExportJobOutput {
                export_job_response: self.export_job_response,
            }
        }
    }
}
impl CreateExportJobOutput {
    /// Creates a new builder-style object to manufacture [`CreateExportJobOutput`](crate::output::CreateExportJobOutput)
    pub fn builder() -> crate::output::create_export_job_output::Builder {
        crate::output::create_export_job_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateEmailTemplateOutput {
    /// <p>Provides information about a request to create a message template.</p>
    pub create_template_message_body: std::option::Option<crate::model::CreateTemplateMessageBody>,
}
impl std::fmt::Debug for CreateEmailTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateEmailTemplateOutput");
        formatter.field(
            "create_template_message_body",
            &self.create_template_message_body,
        );
        formatter.finish()
    }
}
/// See [`CreateEmailTemplateOutput`](crate::output::CreateEmailTemplateOutput)
pub mod create_email_template_output {
    /// A builder for [`CreateEmailTemplateOutput`](crate::output::CreateEmailTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) create_template_message_body:
            std::option::Option<crate::model::CreateTemplateMessageBody>,
    }
    impl Builder {
        /// <p>Provides information about a request to create a message template.</p>
        pub fn create_template_message_body(
            mut self,
            input: crate::model::CreateTemplateMessageBody,
        ) -> Self {
            self.create_template_message_body = Some(input);
            self
        }
        pub fn set_create_template_message_body(
            mut self,
            input: std::option::Option<crate::model::CreateTemplateMessageBody>,
        ) -> Self {
            self.create_template_message_body = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateEmailTemplateOutput`](crate::output::CreateEmailTemplateOutput)
        pub fn build(self) -> crate::output::CreateEmailTemplateOutput {
            crate::output::CreateEmailTemplateOutput {
                create_template_message_body: self.create_template_message_body,
            }
        }
    }
}
impl CreateEmailTemplateOutput {
    /// Creates a new builder-style object to manufacture [`CreateEmailTemplateOutput`](crate::output::CreateEmailTemplateOutput)
    pub fn builder() -> crate::output::create_email_template_output::Builder {
        crate::output::create_email_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCampaignOutput {
    /// <p>Provides information about the status, configuration, and other settings for a campaign.</p>
    pub campaign_response: std::option::Option<crate::model::CampaignResponse>,
}
impl std::fmt::Debug for CreateCampaignOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCampaignOutput");
        formatter.field("campaign_response", &self.campaign_response);
        formatter.finish()
    }
}
/// See [`CreateCampaignOutput`](crate::output::CreateCampaignOutput)
pub mod create_campaign_output {
    /// A builder for [`CreateCampaignOutput`](crate::output::CreateCampaignOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) campaign_response: std::option::Option<crate::model::CampaignResponse>,
    }
    impl Builder {
        /// <p>Provides information about the status, configuration, and other settings for a campaign.</p>
        pub fn campaign_response(mut self, input: crate::model::CampaignResponse) -> Self {
            self.campaign_response = Some(input);
            self
        }
        pub fn set_campaign_response(
            mut self,
            input: std::option::Option<crate::model::CampaignResponse>,
        ) -> Self {
            self.campaign_response = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateCampaignOutput`](crate::output::CreateCampaignOutput)
        pub fn build(self) -> crate::output::CreateCampaignOutput {
            crate::output::CreateCampaignOutput {
                campaign_response: self.campaign_response,
            }
        }
    }
}
impl CreateCampaignOutput {
    /// Creates a new builder-style object to manufacture [`CreateCampaignOutput`](crate::output::CreateCampaignOutput)
    pub fn builder() -> crate::output::create_campaign_output::Builder {
        crate::output::create_campaign_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateAppOutput {
    /// <p>Provides information about an application.</p>
    pub application_response: std::option::Option<crate::model::ApplicationResponse>,
}
impl std::fmt::Debug for CreateAppOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAppOutput");
        formatter.field("application_response", &self.application_response);
        formatter.finish()
    }
}
/// See [`CreateAppOutput`](crate::output::CreateAppOutput)
pub mod create_app_output {
    /// A builder for [`CreateAppOutput`](crate::output::CreateAppOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_response: std::option::Option<crate::model::ApplicationResponse>,
    }
    impl Builder {
        /// <p>Provides information about an application.</p>
        pub fn application_response(mut self, input: crate::model::ApplicationResponse) -> Self {
            self.application_response = Some(input);
            self
        }
        pub fn set_application_response(
            mut self,
            input: std::option::Option<crate::model::ApplicationResponse>,
        ) -> Self {
            self.application_response = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateAppOutput`](crate::output::CreateAppOutput)
        pub fn build(self) -> crate::output::CreateAppOutput {
            crate::output::CreateAppOutput {
                application_response: self.application_response,
            }
        }
    }
}
impl CreateAppOutput {
    /// Creates a new builder-style object to manufacture [`CreateAppOutput`](crate::output::CreateAppOutput)
    pub fn builder() -> crate::output::create_app_output::Builder {
        crate::output::create_app_output::Builder::default()
    }
}
