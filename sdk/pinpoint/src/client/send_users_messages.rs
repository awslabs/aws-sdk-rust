// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SendUsersMessages`](crate::operation::send_users_messages::builders::SendUsersMessagesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::operation::send_users_messages::builders::SendUsersMessagesFluentBuilder::application_id) / [`set_application_id(Option<String>)`](crate::operation::send_users_messages::builders::SendUsersMessagesFluentBuilder::set_application_id):<br>required: **true**<br><p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p><br>
    ///   - [`send_users_message_request(SendUsersMessageRequest)`](crate::operation::send_users_messages::builders::SendUsersMessagesFluentBuilder::send_users_message_request) / [`set_send_users_message_request(Option<SendUsersMessageRequest>)`](crate::operation::send_users_messages::builders::SendUsersMessagesFluentBuilder::set_send_users_message_request):<br>required: **true**<br><p>Specifies the configuration and other settings for a message to send to all the endpoints that are associated with a list of users.</p><br>
    /// - On success, responds with [`SendUsersMessagesOutput`](crate::operation::send_users_messages::SendUsersMessagesOutput) with field(s):
    ///   - [`send_users_message_response(Option<SendUsersMessageResponse>)`](crate::operation::send_users_messages::SendUsersMessagesOutput::send_users_message_response): <p>Provides information about which users and endpoints a message was sent to.</p>
    /// - On failure, responds with [`SdkError<SendUsersMessagesError>`](crate::operation::send_users_messages::SendUsersMessagesError)
    pub fn send_users_messages(&self) -> crate::operation::send_users_messages::builders::SendUsersMessagesFluentBuilder {
        crate::operation::send_users_messages::builders::SendUsersMessagesFluentBuilder::new(self.handle.clone())
    }
}
