// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the contents of an email message, composed of a subject, a text part, and an HTML part.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SimpleEmail {
    /// <p>The body of the email message, in HTML format. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    #[doc(hidden)]
    pub html_part: std::option::Option<crate::types::SimpleEmailPart>,
    /// <p>The subject line, or title, of the email.</p>
    #[doc(hidden)]
    pub subject: std::option::Option<crate::types::SimpleEmailPart>,
    /// <p>The body of the email message, in plain text format. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    #[doc(hidden)]
    pub text_part: std::option::Option<crate::types::SimpleEmailPart>,
}
impl SimpleEmail {
    /// <p>The body of the email message, in HTML format. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn html_part(&self) -> std::option::Option<&crate::types::SimpleEmailPart> {
        self.html_part.as_ref()
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn subject(&self) -> std::option::Option<&crate::types::SimpleEmailPart> {
        self.subject.as_ref()
    }
    /// <p>The body of the email message, in plain text format. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn text_part(&self) -> std::option::Option<&crate::types::SimpleEmailPart> {
        self.text_part.as_ref()
    }
}
impl SimpleEmail {
    /// Creates a new builder-style object to manufacture [`SimpleEmail`](crate::types::SimpleEmail).
    pub fn builder() -> crate::types::builders::SimpleEmailBuilder {
        crate::types::builders::SimpleEmailBuilder::default()
    }
}

/// A builder for [`SimpleEmail`](crate::types::SimpleEmail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SimpleEmailBuilder {
    pub(crate) html_part: std::option::Option<crate::types::SimpleEmailPart>,
    pub(crate) subject: std::option::Option<crate::types::SimpleEmailPart>,
    pub(crate) text_part: std::option::Option<crate::types::SimpleEmailPart>,
}
impl SimpleEmailBuilder {
    /// <p>The body of the email message, in HTML format. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn html_part(mut self, input: crate::types::SimpleEmailPart) -> Self {
        self.html_part = Some(input);
        self
    }
    /// <p>The body of the email message, in HTML format. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn set_html_part(
        mut self,
        input: std::option::Option<crate::types::SimpleEmailPart>,
    ) -> Self {
        self.html_part = input;
        self
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn subject(mut self, input: crate::types::SimpleEmailPart) -> Self {
        self.subject = Some(input);
        self
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn set_subject(
        mut self,
        input: std::option::Option<crate::types::SimpleEmailPart>,
    ) -> Self {
        self.subject = input;
        self
    }
    /// <p>The body of the email message, in plain text format. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn text_part(mut self, input: crate::types::SimpleEmailPart) -> Self {
        self.text_part = Some(input);
        self
    }
    /// <p>The body of the email message, in plain text format. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn set_text_part(
        mut self,
        input: std::option::Option<crate::types::SimpleEmailPart>,
    ) -> Self {
        self.text_part = input;
        self
    }
    /// Consumes the builder and constructs a [`SimpleEmail`](crate::types::SimpleEmail).
    pub fn build(self) -> crate::types::SimpleEmail {
        crate::types::SimpleEmail {
            html_part: self.html_part,
            subject: self.subject,
            text_part: self.text_part,
        }
    }
}
