// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the subject or body of an email message, represented as textual email data and the applicable character set.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SimpleEmailPart {
    /// <p>The applicable character set for the message content.</p>
    #[doc(hidden)]
    pub charset: std::option::Option<std::string::String>,
    /// <p>The textual data of the message content.</p>
    #[doc(hidden)]
    pub data: std::option::Option<std::string::String>,
}
impl SimpleEmailPart {
    /// <p>The applicable character set for the message content.</p>
    pub fn charset(&self) -> std::option::Option<&str> {
        self.charset.as_deref()
    }
    /// <p>The textual data of the message content.</p>
    pub fn data(&self) -> std::option::Option<&str> {
        self.data.as_deref()
    }
}
impl SimpleEmailPart {
    /// Creates a new builder-style object to manufacture [`SimpleEmailPart`](crate::types::SimpleEmailPart).
    pub fn builder() -> crate::types::builders::SimpleEmailPartBuilder {
        crate::types::builders::SimpleEmailPartBuilder::default()
    }
}

/// A builder for [`SimpleEmailPart`](crate::types::SimpleEmailPart).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SimpleEmailPartBuilder {
    pub(crate) charset: std::option::Option<std::string::String>,
    pub(crate) data: std::option::Option<std::string::String>,
}
impl SimpleEmailPartBuilder {
    /// <p>The applicable character set for the message content.</p>
    pub fn charset(mut self, input: impl Into<std::string::String>) -> Self {
        self.charset = Some(input.into());
        self
    }
    /// <p>The applicable character set for the message content.</p>
    pub fn set_charset(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.charset = input;
        self
    }
    /// <p>The textual data of the message content.</p>
    pub fn data(mut self, input: impl Into<std::string::String>) -> Self {
        self.data = Some(input.into());
        self
    }
    /// <p>The textual data of the message content.</p>
    pub fn set_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data = input;
        self
    }
    /// Consumes the builder and constructs a [`SimpleEmailPart`](crate::types::SimpleEmailPart).
    pub fn build(self) -> crate::types::SimpleEmailPart {
        crate::types::SimpleEmailPart {
            charset: self.charset,
            data: self.data,
        }
    }
}
