// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a request to create a message template.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TemplateCreateMessageBody {
    /// <p>The Amazon Resource Name (ARN) of the message template that was created.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The message that's returned from the API for the request to create the message template.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the request to create the message template.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
}
impl TemplateCreateMessageBody {
    /// <p>The Amazon Resource Name (ARN) of the message template that was created.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The message that's returned from the API for the request to create the message template.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The unique identifier for the request to create the message template.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
}
impl TemplateCreateMessageBody {
    /// Creates a new builder-style object to manufacture [`TemplateCreateMessageBody`](crate::types::TemplateCreateMessageBody).
    pub fn builder() -> crate::types::builders::TemplateCreateMessageBodyBuilder {
        crate::types::builders::TemplateCreateMessageBodyBuilder::default()
    }
}

/// A builder for [`TemplateCreateMessageBody`](crate::types::TemplateCreateMessageBody).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TemplateCreateMessageBodyBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) request_id: std::option::Option<std::string::String>,
}
impl TemplateCreateMessageBodyBuilder {
    /// <p>The Amazon Resource Name (ARN) of the message template that was created.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the message template that was created.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The message that's returned from the API for the request to create the message template.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>The message that's returned from the API for the request to create the message template.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The unique identifier for the request to create the message template.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the request to create the message template.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// Consumes the builder and constructs a [`TemplateCreateMessageBody`](crate::types::TemplateCreateMessageBody).
    pub fn build(self) -> crate::types::TemplateCreateMessageBody {
        crate::types::TemplateCreateMessageBody {
            arn: self.arn,
            message: self.message,
            request_id: self.request_id,
        }
    }
}
