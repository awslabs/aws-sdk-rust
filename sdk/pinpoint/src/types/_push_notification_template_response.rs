// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the content and settings for a message template that can be used in messages that are sent through a push notification channel.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PushNotificationTemplateResponse {
    /// <p>The message template that's used for the ADM (Amazon Device Messaging) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub adm: ::std::option::Option<crate::types::AndroidPushNotificationTemplate>,
    /// <p>The message template that's used for the APNs (Apple Push Notification service) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub apns: ::std::option::Option<crate::types::ApnsPushNotificationTemplate>,
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The message template that's used for the Baidu (Baidu Cloud Push) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub baidu: ::std::option::Option<crate::types::AndroidPushNotificationTemplate>,
    /// <p>The date, in ISO 8601 format, when the message template was created.</p>
    pub creation_date: ::std::option::Option<::std::string::String>,
    /// <p>The default message template that's used for push notification channels.</p>
    ///
    /// _Note: This member has been renamed from `default`._
    pub default_value: ::std::option::Option<crate::types::DefaultPushNotificationTemplate>,
    /// <p>The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub default_substitutions: ::std::option::Option<::std::string::String>,
    /// <p>The message template that's used for the GCM channel, which is used to send notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub gcm: ::std::option::Option<crate::types::AndroidPushNotificationTemplate>,
    /// <p>The date, in ISO 8601 format, when the message template was last modified.</p>
    pub last_modified_date: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the recommender model that's used by the message template.</p>
    pub recommender_id: ::std::option::Option<::std::string::String>,
    /// <p>A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The custom description of the message template.</p>
    pub template_description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the message template.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of channel that the message template is designed for. For a push notification template, this value is PUSH.</p>
    pub template_type: ::std::option::Option<crate::types::TemplateType>,
    /// <p>The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.</p>
    pub version: ::std::option::Option<::std::string::String>,
}
impl PushNotificationTemplateResponse {
    /// <p>The message template that's used for the ADM (Amazon Device Messaging) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn adm(&self) -> ::std::option::Option<&crate::types::AndroidPushNotificationTemplate> {
        self.adm.as_ref()
    }
    /// <p>The message template that's used for the APNs (Apple Push Notification service) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn apns(&self) -> ::std::option::Option<&crate::types::ApnsPushNotificationTemplate> {
        self.apns.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The message template that's used for the Baidu (Baidu Cloud Push) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn baidu(&self) -> ::std::option::Option<&crate::types::AndroidPushNotificationTemplate> {
        self.baidu.as_ref()
    }
    /// <p>The date, in ISO 8601 format, when the message template was created.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&str> {
        self.creation_date.as_deref()
    }
    /// <p>The default message template that's used for push notification channels.</p>
    ///
    /// _Note: This member has been renamed from `default`._
    pub fn default_value(&self) -> ::std::option::Option<&crate::types::DefaultPushNotificationTemplate> {
        self.default_value.as_ref()
    }
    /// <p>The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub fn default_substitutions(&self) -> ::std::option::Option<&str> {
        self.default_substitutions.as_deref()
    }
    /// <p>The message template that's used for the GCM channel, which is used to send notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn gcm(&self) -> ::std::option::Option<&crate::types::AndroidPushNotificationTemplate> {
        self.gcm.as_ref()
    }
    /// <p>The date, in ISO 8601 format, when the message template was last modified.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&str> {
        self.last_modified_date.as_deref()
    }
    /// <p>The unique identifier for the recommender model that's used by the message template.</p>
    pub fn recommender_id(&self) -> ::std::option::Option<&str> {
        self.recommender_id.as_deref()
    }
    /// <p>A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The custom description of the message template.</p>
    pub fn template_description(&self) -> ::std::option::Option<&str> {
        self.template_description.as_deref()
    }
    /// <p>The name of the message template.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The type of channel that the message template is designed for. For a push notification template, this value is PUSH.</p>
    pub fn template_type(&self) -> ::std::option::Option<&crate::types::TemplateType> {
        self.template_type.as_ref()
    }
    /// <p>The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl PushNotificationTemplateResponse {
    /// Creates a new builder-style object to manufacture [`PushNotificationTemplateResponse`](crate::types::PushNotificationTemplateResponse).
    pub fn builder() -> crate::types::builders::PushNotificationTemplateResponseBuilder {
        crate::types::builders::PushNotificationTemplateResponseBuilder::default()
    }
}

/// A builder for [`PushNotificationTemplateResponse`](crate::types::PushNotificationTemplateResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PushNotificationTemplateResponseBuilder {
    pub(crate) adm: ::std::option::Option<crate::types::AndroidPushNotificationTemplate>,
    pub(crate) apns: ::std::option::Option<crate::types::ApnsPushNotificationTemplate>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) baidu: ::std::option::Option<crate::types::AndroidPushNotificationTemplate>,
    pub(crate) creation_date: ::std::option::Option<::std::string::String>,
    pub(crate) default_value: ::std::option::Option<crate::types::DefaultPushNotificationTemplate>,
    pub(crate) default_substitutions: ::std::option::Option<::std::string::String>,
    pub(crate) gcm: ::std::option::Option<crate::types::AndroidPushNotificationTemplate>,
    pub(crate) last_modified_date: ::std::option::Option<::std::string::String>,
    pub(crate) recommender_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) template_description: ::std::option::Option<::std::string::String>,
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_type: ::std::option::Option<crate::types::TemplateType>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
}
impl PushNotificationTemplateResponseBuilder {
    /// <p>The message template that's used for the ADM (Amazon Device Messaging) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn adm(mut self, input: crate::types::AndroidPushNotificationTemplate) -> Self {
        self.adm = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message template that's used for the ADM (Amazon Device Messaging) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn set_adm(mut self, input: ::std::option::Option<crate::types::AndroidPushNotificationTemplate>) -> Self {
        self.adm = input;
        self
    }
    /// <p>The message template that's used for the ADM (Amazon Device Messaging) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn get_adm(&self) -> &::std::option::Option<crate::types::AndroidPushNotificationTemplate> {
        &self.adm
    }
    /// <p>The message template that's used for the APNs (Apple Push Notification service) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn apns(mut self, input: crate::types::ApnsPushNotificationTemplate) -> Self {
        self.apns = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message template that's used for the APNs (Apple Push Notification service) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn set_apns(mut self, input: ::std::option::Option<crate::types::ApnsPushNotificationTemplate>) -> Self {
        self.apns = input;
        self
    }
    /// <p>The message template that's used for the APNs (Apple Push Notification service) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn get_apns(&self) -> &::std::option::Option<crate::types::ApnsPushNotificationTemplate> {
        &self.apns
    }
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The message template that's used for the Baidu (Baidu Cloud Push) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn baidu(mut self, input: crate::types::AndroidPushNotificationTemplate) -> Self {
        self.baidu = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message template that's used for the Baidu (Baidu Cloud Push) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn set_baidu(mut self, input: ::std::option::Option<crate::types::AndroidPushNotificationTemplate>) -> Self {
        self.baidu = input;
        self
    }
    /// <p>The message template that's used for the Baidu (Baidu Cloud Push) channel. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn get_baidu(&self) -> &::std::option::Option<crate::types::AndroidPushNotificationTemplate> {
        &self.baidu
    }
    /// <p>The date, in ISO 8601 format, when the message template was created.</p>
    /// This field is required.
    pub fn creation_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date, in ISO 8601 format, when the message template was created.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date, in ISO 8601 format, when the message template was created.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_date
    }
    /// <p>The default message template that's used for push notification channels.</p>
    pub fn default_value(mut self, input: crate::types::DefaultPushNotificationTemplate) -> Self {
        self.default_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default message template that's used for push notification channels.</p>
    pub fn set_default(mut self, input: ::std::option::Option<crate::types::DefaultPushNotificationTemplate>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The default message template that's used for push notification channels.</p>
    pub fn get_default(&self) -> &::std::option::Option<crate::types::DefaultPushNotificationTemplate> {
        &self.default_value
    }
    /// <p>The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub fn default_substitutions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_substitutions = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub fn set_default_substitutions(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_substitutions = input;
        self
    }
    /// <p>The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub fn get_default_substitutions(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_substitutions
    }
    /// <p>The message template that's used for the GCM channel, which is used to send notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn gcm(mut self, input: crate::types::AndroidPushNotificationTemplate) -> Self {
        self.gcm = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message template that's used for the GCM channel, which is used to send notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn set_gcm(mut self, input: ::std::option::Option<crate::types::AndroidPushNotificationTemplate>) -> Self {
        self.gcm = input;
        self
    }
    /// <p>The message template that's used for the GCM channel, which is used to send notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service. This message template overrides the default template for push notification channels (DefaultPushNotificationTemplate).</p>
    pub fn get_gcm(&self) -> &::std::option::Option<crate::types::AndroidPushNotificationTemplate> {
        &self.gcm
    }
    /// <p>The date, in ISO 8601 format, when the message template was last modified.</p>
    /// This field is required.
    pub fn last_modified_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date, in ISO 8601 format, when the message template was last modified.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date, in ISO 8601 format, when the message template was last modified.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_modified_date
    }
    /// <p>The unique identifier for the recommender model that's used by the message template.</p>
    pub fn recommender_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommender_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the recommender model that's used by the message template.</p>
    pub fn set_recommender_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommender_id = input;
        self
    }
    /// <p>The unique identifier for the recommender model that's used by the message template.</p>
    pub fn get_recommender_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommender_id
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The custom description of the message template.</p>
    pub fn template_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The custom description of the message template.</p>
    pub fn set_template_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_description = input;
        self
    }
    /// <p>The custom description of the message template.</p>
    pub fn get_template_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_description
    }
    /// <p>The name of the message template.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the message template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the message template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The type of channel that the message template is designed for. For a push notification template, this value is PUSH.</p>
    /// This field is required.
    pub fn template_type(mut self, input: crate::types::TemplateType) -> Self {
        self.template_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of channel that the message template is designed for. For a push notification template, this value is PUSH.</p>
    pub fn set_template_type(mut self, input: ::std::option::Option<crate::types::TemplateType>) -> Self {
        self.template_type = input;
        self
    }
    /// <p>The type of channel that the message template is designed for. For a push notification template, this value is PUSH.</p>
    pub fn get_template_type(&self) -> &::std::option::Option<crate::types::TemplateType> {
        &self.template_type
    }
    /// <p>The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Consumes the builder and constructs a [`PushNotificationTemplateResponse`](crate::types::PushNotificationTemplateResponse).
    pub fn build(self) -> crate::types::PushNotificationTemplateResponse {
        crate::types::PushNotificationTemplateResponse {
            adm: self.adm,
            apns: self.apns,
            arn: self.arn,
            baidu: self.baidu,
            creation_date: self.creation_date,
            default_value: self.default_value,
            default_substitutions: self.default_substitutions,
            gcm: self.gcm,
            last_modified_date: self.last_modified_date,
            recommender_id: self.recommender_id,
            tags: self.tags,
            template_description: self.template_description,
            template_name: self.template_name,
            template_type: self.template_type,
            version: self.version,
        }
    }
}
