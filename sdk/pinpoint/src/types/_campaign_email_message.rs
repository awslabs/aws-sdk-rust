// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the content and "From" address for an email message that's sent to recipients of a campaign.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CampaignEmailMessage {
    /// <p>The body of the email for recipients whose email clients don't render HTML content.</p>
    #[doc(hidden)]
    pub body: std::option::Option<std::string::String>,
    /// <p>The verified email address to send the email from. The default address is the FromAddress specified for the email channel for the application.</p>
    #[doc(hidden)]
    pub from_address: std::option::Option<std::string::String>,
    /// <p>The body of the email, in HTML format, for recipients whose email clients render HTML content.</p>
    #[doc(hidden)]
    pub html_body: std::option::Option<std::string::String>,
    /// <p>The subject line, or title, of the email.</p>
    #[doc(hidden)]
    pub title: std::option::Option<std::string::String>,
}
impl CampaignEmailMessage {
    /// <p>The body of the email for recipients whose email clients don't render HTML content.</p>
    pub fn body(&self) -> std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>The verified email address to send the email from. The default address is the FromAddress specified for the email channel for the application.</p>
    pub fn from_address(&self) -> std::option::Option<&str> {
        self.from_address.as_deref()
    }
    /// <p>The body of the email, in HTML format, for recipients whose email clients render HTML content.</p>
    pub fn html_body(&self) -> std::option::Option<&str> {
        self.html_body.as_deref()
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn title(&self) -> std::option::Option<&str> {
        self.title.as_deref()
    }
}
impl CampaignEmailMessage {
    /// Creates a new builder-style object to manufacture [`CampaignEmailMessage`](crate::types::CampaignEmailMessage).
    pub fn builder() -> crate::types::builders::CampaignEmailMessageBuilder {
        crate::types::builders::CampaignEmailMessageBuilder::default()
    }
}

/// A builder for [`CampaignEmailMessage`](crate::types::CampaignEmailMessage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CampaignEmailMessageBuilder {
    pub(crate) body: std::option::Option<std::string::String>,
    pub(crate) from_address: std::option::Option<std::string::String>,
    pub(crate) html_body: std::option::Option<std::string::String>,
    pub(crate) title: std::option::Option<std::string::String>,
}
impl CampaignEmailMessageBuilder {
    /// <p>The body of the email for recipients whose email clients don't render HTML content.</p>
    pub fn body(mut self, input: impl Into<std::string::String>) -> Self {
        self.body = Some(input.into());
        self
    }
    /// <p>The body of the email for recipients whose email clients don't render HTML content.</p>
    pub fn set_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The verified email address to send the email from. The default address is the FromAddress specified for the email channel for the application.</p>
    pub fn from_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.from_address = Some(input.into());
        self
    }
    /// <p>The verified email address to send the email from. The default address is the FromAddress specified for the email channel for the application.</p>
    pub fn set_from_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.from_address = input;
        self
    }
    /// <p>The body of the email, in HTML format, for recipients whose email clients render HTML content.</p>
    pub fn html_body(mut self, input: impl Into<std::string::String>) -> Self {
        self.html_body = Some(input.into());
        self
    }
    /// <p>The body of the email, in HTML format, for recipients whose email clients render HTML content.</p>
    pub fn set_html_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.html_body = input;
        self
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.title = Some(input.into());
        self
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// Consumes the builder and constructs a [`CampaignEmailMessage`](crate::types::CampaignEmailMessage).
    pub fn build(self) -> crate::types::CampaignEmailMessage {
        crate::types::CampaignEmailMessage {
            body: self.body,
            from_address: self.from_address,
            html_body: self.html_body,
            title: self.title,
        }
    }
}
