// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the settings for a wait activity in a journey. This type of activity waits for a certain amount of time or until a specific date and time before moving participants to the next activity in a journey.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WaitActivity {
    /// <p>The unique identifier for the next activity to perform, after performing the wait activity.</p>
    #[doc(hidden)]
    pub next_activity: std::option::Option<std::string::String>,
    /// <p>The amount of time to wait or the date and time when the activity moves participants to the next activity in the journey.</p>
    #[doc(hidden)]
    pub wait_time: std::option::Option<crate::types::WaitTime>,
}
impl WaitActivity {
    /// <p>The unique identifier for the next activity to perform, after performing the wait activity.</p>
    pub fn next_activity(&self) -> std::option::Option<&str> {
        self.next_activity.as_deref()
    }
    /// <p>The amount of time to wait or the date and time when the activity moves participants to the next activity in the journey.</p>
    pub fn wait_time(&self) -> std::option::Option<&crate::types::WaitTime> {
        self.wait_time.as_ref()
    }
}
impl WaitActivity {
    /// Creates a new builder-style object to manufacture [`WaitActivity`](crate::types::WaitActivity).
    pub fn builder() -> crate::types::builders::WaitActivityBuilder {
        crate::types::builders::WaitActivityBuilder::default()
    }
}

/// A builder for [`WaitActivity`](crate::types::WaitActivity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WaitActivityBuilder {
    pub(crate) next_activity: std::option::Option<std::string::String>,
    pub(crate) wait_time: std::option::Option<crate::types::WaitTime>,
}
impl WaitActivityBuilder {
    /// <p>The unique identifier for the next activity to perform, after performing the wait activity.</p>
    pub fn next_activity(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_activity = Some(input.into());
        self
    }
    /// <p>The unique identifier for the next activity to perform, after performing the wait activity.</p>
    pub fn set_next_activity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_activity = input;
        self
    }
    /// <p>The amount of time to wait or the date and time when the activity moves participants to the next activity in the journey.</p>
    pub fn wait_time(mut self, input: crate::types::WaitTime) -> Self {
        self.wait_time = Some(input);
        self
    }
    /// <p>The amount of time to wait or the date and time when the activity moves participants to the next activity in the journey.</p>
    pub fn set_wait_time(mut self, input: std::option::Option<crate::types::WaitTime>) -> Self {
        self.wait_time = input;
        self
    }
    /// Consumes the builder and constructs a [`WaitActivity`](crate::types::WaitActivity).
    pub fn build(self) -> crate::types::WaitActivity {
        crate::types::WaitActivity {
            next_activity: self.next_activity,
            wait_time: self.wait_time,
        }
    }
}
