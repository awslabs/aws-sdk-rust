// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the settings for a path in a random split activity in a journey.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RandomSplitEntry {
    /// <p>The unique identifier for the next activity to perform, after completing the activity for the path.</p>
    #[doc(hidden)]
    pub next_activity: std::option::Option<std::string::String>,
    /// <p>The percentage of participants to send down the activity path.</p>
    /// <p>To determine which participants are sent down each path, Amazon Pinpoint applies a probability-based algorithm to the percentages that you specify for the paths. Therefore, the actual percentage of participants who are sent down a path may not be equal to the percentage that you specify.</p>
    #[doc(hidden)]
    pub percentage: i32,
}
impl RandomSplitEntry {
    /// <p>The unique identifier for the next activity to perform, after completing the activity for the path.</p>
    pub fn next_activity(&self) -> std::option::Option<&str> {
        self.next_activity.as_deref()
    }
    /// <p>The percentage of participants to send down the activity path.</p>
    /// <p>To determine which participants are sent down each path, Amazon Pinpoint applies a probability-based algorithm to the percentages that you specify for the paths. Therefore, the actual percentage of participants who are sent down a path may not be equal to the percentage that you specify.</p>
    pub fn percentage(&self) -> i32 {
        self.percentage
    }
}
impl RandomSplitEntry {
    /// Creates a new builder-style object to manufacture [`RandomSplitEntry`](crate::types::RandomSplitEntry).
    pub fn builder() -> crate::types::builders::RandomSplitEntryBuilder {
        crate::types::builders::RandomSplitEntryBuilder::default()
    }
}

/// A builder for [`RandomSplitEntry`](crate::types::RandomSplitEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RandomSplitEntryBuilder {
    pub(crate) next_activity: std::option::Option<std::string::String>,
    pub(crate) percentage: std::option::Option<i32>,
}
impl RandomSplitEntryBuilder {
    /// <p>The unique identifier for the next activity to perform, after completing the activity for the path.</p>
    pub fn next_activity(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_activity = Some(input.into());
        self
    }
    /// <p>The unique identifier for the next activity to perform, after completing the activity for the path.</p>
    pub fn set_next_activity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_activity = input;
        self
    }
    /// <p>The percentage of participants to send down the activity path.</p>
    /// <p>To determine which participants are sent down each path, Amazon Pinpoint applies a probability-based algorithm to the percentages that you specify for the paths. Therefore, the actual percentage of participants who are sent down a path may not be equal to the percentage that you specify.</p>
    pub fn percentage(mut self, input: i32) -> Self {
        self.percentage = Some(input);
        self
    }
    /// <p>The percentage of participants to send down the activity path.</p>
    /// <p>To determine which participants are sent down each path, Amazon Pinpoint applies a probability-based algorithm to the percentages that you specify for the paths. Therefore, the actual percentage of participants who are sent down a path may not be equal to the percentage that you specify.</p>
    pub fn set_percentage(mut self, input: std::option::Option<i32>) -> Self {
        self.percentage = input;
        self
    }
    /// Consumes the builder and constructs a [`RandomSplitEntry`](crate::types::RandomSplitEntry).
    pub fn build(self) -> crate::types::RandomSplitEntry {
        crate::types::RandomSplitEntry {
            next_activity: self.next_activity,
            percentage: self.percentage.unwrap_or_default(),
        }
    }
}
