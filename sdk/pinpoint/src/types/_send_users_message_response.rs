// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about which users and endpoints a message was sent to.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendUsersMessageResponse {
    /// <p>The unique identifier for the application that was used to send the message.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier that was assigned to the message request.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    /// <p>An object that indicates which endpoints the message was sent to, for each user. The object lists user IDs and, for each user ID, provides the endpoint IDs that the message was sent to. For each endpoint ID, it provides an EndpointMessageResult object.</p>
    #[doc(hidden)]
    pub result: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::collections::HashMap<std::string::String, crate::types::EndpointMessageResult>,
        >,
    >,
}
impl SendUsersMessageResponse {
    /// <p>The unique identifier for the application that was used to send the message.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier that was assigned to the message request.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>An object that indicates which endpoints the message was sent to, for each user. The object lists user IDs and, for each user ID, provides the endpoint IDs that the message was sent to. For each endpoint ID, it provides an EndpointMessageResult object.</p>
    pub fn result(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            std::collections::HashMap<std::string::String, crate::types::EndpointMessageResult>,
        >,
    > {
        self.result.as_ref()
    }
}
impl SendUsersMessageResponse {
    /// Creates a new builder-style object to manufacture [`SendUsersMessageResponse`](crate::types::SendUsersMessageResponse).
    pub fn builder() -> crate::types::builders::SendUsersMessageResponseBuilder {
        crate::types::builders::SendUsersMessageResponseBuilder::default()
    }
}

/// A builder for [`SendUsersMessageResponse`](crate::types::SendUsersMessageResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendUsersMessageResponseBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) request_id: std::option::Option<std::string::String>,
    pub(crate) result: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::collections::HashMap<std::string::String, crate::types::EndpointMessageResult>,
        >,
    >,
}
impl SendUsersMessageResponseBuilder {
    /// <p>The unique identifier for the application that was used to send the message.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the application that was used to send the message.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier that was assigned to the message request.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The unique identifier that was assigned to the message request.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// Adds a key-value pair to `result`.
    ///
    /// To override the contents of this collection use [`set_result`](Self::set_result).
    ///
    /// <p>An object that indicates which endpoints the message was sent to, for each user. The object lists user IDs and, for each user ID, provides the endpoint IDs that the message was sent to. For each endpoint ID, it provides an EndpointMessageResult object.</p>
    pub fn result(
        mut self,
        k: impl Into<std::string::String>,
        v: std::collections::HashMap<std::string::String, crate::types::EndpointMessageResult>,
    ) -> Self {
        let mut hash_map = self.result.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.result = Some(hash_map);
        self
    }
    /// <p>An object that indicates which endpoints the message was sent to, for each user. The object lists user IDs and, for each user ID, provides the endpoint IDs that the message was sent to. For each endpoint ID, it provides an EndpointMessageResult object.</p>
    pub fn set_result(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                std::collections::HashMap<std::string::String, crate::types::EndpointMessageResult>,
            >,
        >,
    ) -> Self {
        self.result = input;
        self
    }
    /// Consumes the builder and constructs a [`SendUsersMessageResponse`](crate::types::SendUsersMessageResponse).
    pub fn build(self) -> crate::types::SendUsersMessageResponse {
        crate::types::SendUsersMessageResponse {
            application_id: self.application_id,
            request_id: self.request_id,
            result: self.result,
        }
    }
}
