// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>In-app message configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CampaignInAppMessage {
    /// <p>The message body of the notification, the email body or the text message.</p>
    #[doc(hidden)]
    pub body: std::option::Option<std::string::String>,
    /// <p>In-app message content.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::vec::Vec<crate::types::InAppMessageContent>>,
    /// <p>Custom config to be sent to client.</p>
    #[doc(hidden)]
    pub custom_config:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>In-app message layout.</p>
    #[doc(hidden)]
    pub layout: std::option::Option<crate::types::Layout>,
}
impl CampaignInAppMessage {
    /// <p>The message body of the notification, the email body or the text message.</p>
    pub fn body(&self) -> std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>In-app message content.</p>
    pub fn content(&self) -> std::option::Option<&[crate::types::InAppMessageContent]> {
        self.content.as_deref()
    }
    /// <p>Custom config to be sent to client.</p>
    pub fn custom_config(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.custom_config.as_ref()
    }
    /// <p>In-app message layout.</p>
    pub fn layout(&self) -> std::option::Option<&crate::types::Layout> {
        self.layout.as_ref()
    }
}
impl CampaignInAppMessage {
    /// Creates a new builder-style object to manufacture [`CampaignInAppMessage`](crate::types::CampaignInAppMessage).
    pub fn builder() -> crate::types::builders::CampaignInAppMessageBuilder {
        crate::types::builders::CampaignInAppMessageBuilder::default()
    }
}

/// A builder for [`CampaignInAppMessage`](crate::types::CampaignInAppMessage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CampaignInAppMessageBuilder {
    pub(crate) body: std::option::Option<std::string::String>,
    pub(crate) content: std::option::Option<std::vec::Vec<crate::types::InAppMessageContent>>,
    pub(crate) custom_config:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) layout: std::option::Option<crate::types::Layout>,
}
impl CampaignInAppMessageBuilder {
    /// <p>The message body of the notification, the email body or the text message.</p>
    pub fn body(mut self, input: impl Into<std::string::String>) -> Self {
        self.body = Some(input.into());
        self
    }
    /// <p>The message body of the notification, the email body or the text message.</p>
    pub fn set_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// Appends an item to `content`.
    ///
    /// To override the contents of this collection use [`set_content`](Self::set_content).
    ///
    /// <p>In-app message content.</p>
    pub fn content(mut self, input: crate::types::InAppMessageContent) -> Self {
        let mut v = self.content.unwrap_or_default();
        v.push(input);
        self.content = Some(v);
        self
    }
    /// <p>In-app message content.</p>
    pub fn set_content(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InAppMessageContent>>,
    ) -> Self {
        self.content = input;
        self
    }
    /// Adds a key-value pair to `custom_config`.
    ///
    /// To override the contents of this collection use [`set_custom_config`](Self::set_custom_config).
    ///
    /// <p>Custom config to be sent to client.</p>
    pub fn custom_config(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.custom_config.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.custom_config = Some(hash_map);
        self
    }
    /// <p>Custom config to be sent to client.</p>
    pub fn set_custom_config(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.custom_config = input;
        self
    }
    /// <p>In-app message layout.</p>
    pub fn layout(mut self, input: crate::types::Layout) -> Self {
        self.layout = Some(input);
        self
    }
    /// <p>In-app message layout.</p>
    pub fn set_layout(mut self, input: std::option::Option<crate::types::Layout>) -> Self {
        self.layout = input;
        self
    }
    /// Consumes the builder and constructs a [`CampaignInAppMessage`](crate::types::CampaignInAppMessage).
    pub fn build(self) -> crate::types::CampaignInAppMessage {
        crate::types::CampaignInAppMessage {
            body: self.body,
            content: self.content,
            custom_config: self.custom_config,
            layout: self.layout,
        }
    }
}
