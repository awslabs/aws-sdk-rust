// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the default settings and content for a push notification that's sent directly to an endpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DefaultPushNotificationMessage {
    /// <p>The default action to occur if a recipient taps the push notification. Valid values are:</p>
    /// <ul>
    /// <li><p>OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.</p></li>
    /// <li><p>DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS and Android platforms.</p></li>
    /// <li><p>URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.</p></li>
    /// </ul>
    #[doc(hidden)]
    pub action: std::option::Option<crate::types::Action>,
    /// <p>The default body of the notification message.</p>
    #[doc(hidden)]
    pub body: std::option::Option<std::string::String>,
    /// <p>The JSON data payload to use for the default push notification, if the notification is a silent push notification. This payload is added to the data.pinpoint.jsonBody object of the notification.</p>
    #[doc(hidden)]
    pub data:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Specifies whether the default notification is a silent push notification, which is a push notification that doesn't display on a recipient's device. Silent push notifications can be used for cases such as updating an app's configuration or delivering messages to an in-app notification center.</p>
    #[doc(hidden)]
    pub silent_push: bool,
    /// <p>The default message variables to use in the notification message. You can override the default variables with individual address variables.</p>
    #[doc(hidden)]
    pub substitutions: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    /// <p>The default title to display above the notification message on a recipient's device.</p>
    #[doc(hidden)]
    pub title: std::option::Option<std::string::String>,
    /// <p>The default URL to open in a recipient's default mobile browser, if a recipient taps the push notification and the value of the Action property is URL.</p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
}
impl DefaultPushNotificationMessage {
    /// <p>The default action to occur if a recipient taps the push notification. Valid values are:</p>
    /// <ul>
    /// <li><p>OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.</p></li>
    /// <li><p>DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS and Android platforms.</p></li>
    /// <li><p>URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.</p></li>
    /// </ul>
    pub fn action(&self) -> std::option::Option<&crate::types::Action> {
        self.action.as_ref()
    }
    /// <p>The default body of the notification message.</p>
    pub fn body(&self) -> std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>The JSON data payload to use for the default push notification, if the notification is a silent push notification. This payload is added to the data.pinpoint.jsonBody object of the notification.</p>
    pub fn data(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.data.as_ref()
    }
    /// <p>Specifies whether the default notification is a silent push notification, which is a push notification that doesn't display on a recipient's device. Silent push notifications can be used for cases such as updating an app's configuration or delivering messages to an in-app notification center.</p>
    pub fn silent_push(&self) -> bool {
        self.silent_push
    }
    /// <p>The default message variables to use in the notification message. You can override the default variables with individual address variables.</p>
    pub fn substitutions(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.substitutions.as_ref()
    }
    /// <p>The default title to display above the notification message on a recipient's device.</p>
    pub fn title(&self) -> std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The default URL to open in a recipient's default mobile browser, if a recipient taps the push notification and the value of the Action property is URL.</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl DefaultPushNotificationMessage {
    /// Creates a new builder-style object to manufacture [`DefaultPushNotificationMessage`](crate::types::DefaultPushNotificationMessage).
    pub fn builder() -> crate::types::builders::DefaultPushNotificationMessageBuilder {
        crate::types::builders::DefaultPushNotificationMessageBuilder::default()
    }
}

/// A builder for [`DefaultPushNotificationMessage`](crate::types::DefaultPushNotificationMessage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DefaultPushNotificationMessageBuilder {
    pub(crate) action: std::option::Option<crate::types::Action>,
    pub(crate) body: std::option::Option<std::string::String>,
    pub(crate) data:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) silent_push: std::option::Option<bool>,
    pub(crate) substitutions: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    pub(crate) title: std::option::Option<std::string::String>,
    pub(crate) url: std::option::Option<std::string::String>,
}
impl DefaultPushNotificationMessageBuilder {
    /// <p>The default action to occur if a recipient taps the push notification. Valid values are:</p>
    /// <ul>
    /// <li><p>OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.</p></li>
    /// <li><p>DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS and Android platforms.</p></li>
    /// <li><p>URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.</p></li>
    /// </ul>
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.action = Some(input);
        self
    }
    /// <p>The default action to occur if a recipient taps the push notification. Valid values are:</p>
    /// <ul>
    /// <li><p>OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.</p></li>
    /// <li><p>DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS and Android platforms.</p></li>
    /// <li><p>URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.</p></li>
    /// </ul>
    pub fn set_action(mut self, input: std::option::Option<crate::types::Action>) -> Self {
        self.action = input;
        self
    }
    /// <p>The default body of the notification message.</p>
    pub fn body(mut self, input: impl Into<std::string::String>) -> Self {
        self.body = Some(input.into());
        self
    }
    /// <p>The default body of the notification message.</p>
    pub fn set_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// Adds a key-value pair to `data`.
    ///
    /// To override the contents of this collection use [`set_data`](Self::set_data).
    ///
    /// <p>The JSON data payload to use for the default push notification, if the notification is a silent push notification. This payload is added to the data.pinpoint.jsonBody object of the notification.</p>
    pub fn data(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.data.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.data = Some(hash_map);
        self
    }
    /// <p>The JSON data payload to use for the default push notification, if the notification is a silent push notification. This payload is added to the data.pinpoint.jsonBody object of the notification.</p>
    pub fn set_data(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.data = input;
        self
    }
    /// <p>Specifies whether the default notification is a silent push notification, which is a push notification that doesn't display on a recipient's device. Silent push notifications can be used for cases such as updating an app's configuration or delivering messages to an in-app notification center.</p>
    pub fn silent_push(mut self, input: bool) -> Self {
        self.silent_push = Some(input);
        self
    }
    /// <p>Specifies whether the default notification is a silent push notification, which is a push notification that doesn't display on a recipient's device. Silent push notifications can be used for cases such as updating an app's configuration or delivering messages to an in-app notification center.</p>
    pub fn set_silent_push(mut self, input: std::option::Option<bool>) -> Self {
        self.silent_push = input;
        self
    }
    /// Adds a key-value pair to `substitutions`.
    ///
    /// To override the contents of this collection use [`set_substitutions`](Self::set_substitutions).
    ///
    /// <p>The default message variables to use in the notification message. You can override the default variables with individual address variables.</p>
    pub fn substitutions(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.substitutions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.substitutions = Some(hash_map);
        self
    }
    /// <p>The default message variables to use in the notification message. You can override the default variables with individual address variables.</p>
    pub fn set_substitutions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.substitutions = input;
        self
    }
    /// <p>The default title to display above the notification message on a recipient's device.</p>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.title = Some(input.into());
        self
    }
    /// <p>The default title to display above the notification message on a recipient's device.</p>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The default URL to open in a recipient's default mobile browser, if a recipient taps the push notification and the value of the Action property is URL.</p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p>The default URL to open in a recipient's default mobile browser, if a recipient taps the push notification and the value of the Action property is URL.</p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// Consumes the builder and constructs a [`DefaultPushNotificationMessage`](crate::types::DefaultPushNotificationMessage).
    pub fn build(self) -> crate::types::DefaultPushNotificationMessage {
        crate::types::DefaultPushNotificationMessage {
            action: self.action,
            body: self.body,
            data: self.data,
            silent_push: self.silent_push.unwrap_or_default(),
            substitutions: self.substitutions,
            title: self.title,
            url: self.url,
        }
    }
}
