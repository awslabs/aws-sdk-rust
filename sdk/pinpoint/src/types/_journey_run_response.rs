// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information from a specified run of a journey.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JourneyRunResponse {
    /// <p>The time when the journey run was created or scheduled, in ISO 8601 format.</p>
    pub creation_time: ::std::option::Option<::std::string::String>,
    /// <p>The last time the journey run was updated, in ISO 8601 format..</p>
    pub last_update_time: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the run.</p>
    pub run_id: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the journey run.</p>
    pub status: ::std::option::Option<crate::types::JourneyRunStatus>,
}
impl JourneyRunResponse {
    /// <p>The time when the journey run was created or scheduled, in ISO 8601 format.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&str> {
        self.creation_time.as_deref()
    }
    /// <p>The last time the journey run was updated, in ISO 8601 format..</p>
    pub fn last_update_time(&self) -> ::std::option::Option<&str> {
        self.last_update_time.as_deref()
    }
    /// <p>The unique identifier for the run.</p>
    pub fn run_id(&self) -> ::std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p>The current status of the journey run.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::JourneyRunStatus> {
        self.status.as_ref()
    }
}
impl JourneyRunResponse {
    /// Creates a new builder-style object to manufacture [`JourneyRunResponse`](crate::types::JourneyRunResponse).
    pub fn builder() -> crate::types::builders::JourneyRunResponseBuilder {
        crate::types::builders::JourneyRunResponseBuilder::default()
    }
}

/// A builder for [`JourneyRunResponse`](crate::types::JourneyRunResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JourneyRunResponseBuilder {
    pub(crate) creation_time: ::std::option::Option<::std::string::String>,
    pub(crate) last_update_time: ::std::option::Option<::std::string::String>,
    pub(crate) run_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::JourneyRunStatus>,
}
impl JourneyRunResponseBuilder {
    /// <p>The time when the journey run was created or scheduled, in ISO 8601 format.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time when the journey run was created or scheduled, in ISO 8601 format.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time when the journey run was created or scheduled, in ISO 8601 format.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_time
    }
    /// <p>The last time the journey run was updated, in ISO 8601 format..</p>
    /// This field is required.
    pub fn last_update_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_update_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The last time the journey run was updated, in ISO 8601 format..</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The last time the journey run was updated, in ISO 8601 format..</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_update_time
    }
    /// <p>The unique identifier for the run.</p>
    /// This field is required.
    pub fn run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the run.</p>
    pub fn set_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The unique identifier for the run.</p>
    pub fn get_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_id
    }
    /// <p>The current status of the journey run.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::JourneyRunStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the journey run.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::JourneyRunStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the journey run.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::JourneyRunStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`JourneyRunResponse`](crate::types::JourneyRunResponse).
    pub fn build(self) -> crate::types::JourneyRunResponse {
        crate::types::JourneyRunResponse {
            creation_time: self.creation_time,
            last_update_time: self.last_update_time,
            run_id: self.run_id,
            status: self.status,
        }
    }
}
