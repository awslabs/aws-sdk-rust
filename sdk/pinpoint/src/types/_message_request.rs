// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configuration and other settings for a message.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MessageRequest {
    /// <p>A map of key-value pairs, where each key is an address and each value is an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-addressconfiguration">AddressConfiguration</a> object. An address can be a push notification token, a phone number, or an email address. You can use an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-addressconfiguration">AddressConfiguration</a> object to tailor the message for an address by specifying settings such as content overrides and message variables.</p>
    #[doc(hidden)]
    pub addresses: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::AddressConfiguration>,
    >,
    /// <p>A map of custom attributes to attach to the message. For a push notification, this payload is added to the data.pinpoint object. For an email or text message, this payload is added to email/SMS delivery receipt event attributes.</p>
    #[doc(hidden)]
    pub context:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A map of key-value pairs, where each key is an endpoint ID and each value is an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-endpointsendconfiguration">EndpointSendConfiguration</a> object. You can use an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-endpointsendconfiguration">EndpointSendConfiguration</a> object to tailor the message for an endpoint by specifying settings such as content overrides and message variables.</p>
    #[doc(hidden)]
    pub endpoints: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::EndpointSendConfiguration>,
    >,
    /// <p>The settings and content for the default message and any default messages that you defined for specific channels.</p>
    #[doc(hidden)]
    pub message_configuration: std::option::Option<crate::types::DirectMessageConfiguration>,
    /// <p>The message template to use for the message.</p>
    #[doc(hidden)]
    pub template_configuration: std::option::Option<crate::types::TemplateConfiguration>,
    /// <p>The unique identifier for tracing the message. This identifier is visible to message recipients.</p>
    #[doc(hidden)]
    pub trace_id: std::option::Option<std::string::String>,
}
impl MessageRequest {
    /// <p>A map of key-value pairs, where each key is an address and each value is an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-addressconfiguration">AddressConfiguration</a> object. An address can be a push notification token, a phone number, or an email address. You can use an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-addressconfiguration">AddressConfiguration</a> object to tailor the message for an address by specifying settings such as content overrides and message variables.</p>
    pub fn addresses(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::AddressConfiguration>,
    > {
        self.addresses.as_ref()
    }
    /// <p>A map of custom attributes to attach to the message. For a push notification, this payload is added to the data.pinpoint object. For an email or text message, this payload is added to email/SMS delivery receipt event attributes.</p>
    pub fn context(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.context.as_ref()
    }
    /// <p>A map of key-value pairs, where each key is an endpoint ID and each value is an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-endpointsendconfiguration">EndpointSendConfiguration</a> object. You can use an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-endpointsendconfiguration">EndpointSendConfiguration</a> object to tailor the message for an endpoint by specifying settings such as content overrides and message variables.</p>
    pub fn endpoints(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::EndpointSendConfiguration>,
    > {
        self.endpoints.as_ref()
    }
    /// <p>The settings and content for the default message and any default messages that you defined for specific channels.</p>
    pub fn message_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DirectMessageConfiguration> {
        self.message_configuration.as_ref()
    }
    /// <p>The message template to use for the message.</p>
    pub fn template_configuration(
        &self,
    ) -> std::option::Option<&crate::types::TemplateConfiguration> {
        self.template_configuration.as_ref()
    }
    /// <p>The unique identifier for tracing the message. This identifier is visible to message recipients.</p>
    pub fn trace_id(&self) -> std::option::Option<&str> {
        self.trace_id.as_deref()
    }
}
impl MessageRequest {
    /// Creates a new builder-style object to manufacture [`MessageRequest`](crate::types::MessageRequest).
    pub fn builder() -> crate::types::builders::MessageRequestBuilder {
        crate::types::builders::MessageRequestBuilder::default()
    }
}

/// A builder for [`MessageRequest`](crate::types::MessageRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MessageRequestBuilder {
    pub(crate) addresses: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::AddressConfiguration>,
    >,
    pub(crate) context:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) endpoints: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::EndpointSendConfiguration>,
    >,
    pub(crate) message_configuration: std::option::Option<crate::types::DirectMessageConfiguration>,
    pub(crate) template_configuration: std::option::Option<crate::types::TemplateConfiguration>,
    pub(crate) trace_id: std::option::Option<std::string::String>,
}
impl MessageRequestBuilder {
    /// Adds a key-value pair to `addresses`.
    ///
    /// To override the contents of this collection use [`set_addresses`](Self::set_addresses).
    ///
    /// <p>A map of key-value pairs, where each key is an address and each value is an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-addressconfiguration">AddressConfiguration</a> object. An address can be a push notification token, a phone number, or an email address. You can use an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-addressconfiguration">AddressConfiguration</a> object to tailor the message for an address by specifying settings such as content overrides and message variables.</p>
    pub fn addresses(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::AddressConfiguration,
    ) -> Self {
        let mut hash_map = self.addresses.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.addresses = Some(hash_map);
        self
    }
    /// <p>A map of key-value pairs, where each key is an address and each value is an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-addressconfiguration">AddressConfiguration</a> object. An address can be a push notification token, a phone number, or an email address. You can use an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-addressconfiguration">AddressConfiguration</a> object to tailor the message for an address by specifying settings such as content overrides and message variables.</p>
    pub fn set_addresses(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::AddressConfiguration>,
        >,
    ) -> Self {
        self.addresses = input;
        self
    }
    /// Adds a key-value pair to `context`.
    ///
    /// To override the contents of this collection use [`set_context`](Self::set_context).
    ///
    /// <p>A map of custom attributes to attach to the message. For a push notification, this payload is added to the data.pinpoint object. For an email or text message, this payload is added to email/SMS delivery receipt event attributes.</p>
    pub fn context(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.context.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.context = Some(hash_map);
        self
    }
    /// <p>A map of custom attributes to attach to the message. For a push notification, this payload is added to the data.pinpoint object. For an email or text message, this payload is added to email/SMS delivery receipt event attributes.</p>
    pub fn set_context(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.context = input;
        self
    }
    /// Adds a key-value pair to `endpoints`.
    ///
    /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
    ///
    /// <p>A map of key-value pairs, where each key is an endpoint ID and each value is an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-endpointsendconfiguration">EndpointSendConfiguration</a> object. You can use an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-endpointsendconfiguration">EndpointSendConfiguration</a> object to tailor the message for an endpoint by specifying settings such as content overrides and message variables.</p>
    pub fn endpoints(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::EndpointSendConfiguration,
    ) -> Self {
        let mut hash_map = self.endpoints.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.endpoints = Some(hash_map);
        self
    }
    /// <p>A map of key-value pairs, where each key is an endpoint ID and each value is an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-endpointsendconfiguration">EndpointSendConfiguration</a> object. You can use an <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-messages.html#apps-application-id-messages-model-endpointsendconfiguration">EndpointSendConfiguration</a> object to tailor the message for an endpoint by specifying settings such as content overrides and message variables.</p>
    pub fn set_endpoints(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::EndpointSendConfiguration>,
        >,
    ) -> Self {
        self.endpoints = input;
        self
    }
    /// <p>The settings and content for the default message and any default messages that you defined for specific channels.</p>
    pub fn message_configuration(
        mut self,
        input: crate::types::DirectMessageConfiguration,
    ) -> Self {
        self.message_configuration = Some(input);
        self
    }
    /// <p>The settings and content for the default message and any default messages that you defined for specific channels.</p>
    pub fn set_message_configuration(
        mut self,
        input: std::option::Option<crate::types::DirectMessageConfiguration>,
    ) -> Self {
        self.message_configuration = input;
        self
    }
    /// <p>The message template to use for the message.</p>
    pub fn template_configuration(mut self, input: crate::types::TemplateConfiguration) -> Self {
        self.template_configuration = Some(input);
        self
    }
    /// <p>The message template to use for the message.</p>
    pub fn set_template_configuration(
        mut self,
        input: std::option::Option<crate::types::TemplateConfiguration>,
    ) -> Self {
        self.template_configuration = input;
        self
    }
    /// <p>The unique identifier for tracing the message. This identifier is visible to message recipients.</p>
    pub fn trace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.trace_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for tracing the message. This identifier is visible to message recipients.</p>
    pub fn set_trace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.trace_id = input;
        self
    }
    /// Consumes the builder and constructs a [`MessageRequest`](crate::types::MessageRequest).
    pub fn build(self) -> crate::types::MessageRequest {
        crate::types::MessageRequest {
            addresses: self.addresses,
            context: self.context,
            endpoints: self.endpoints,
            message_configuration: self.message_configuration,
            template_configuration: self.template_configuration,
            trace_id: self.trace_id,
        }
    }
}
