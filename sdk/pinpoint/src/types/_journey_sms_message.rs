// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the sender ID and message type for an SMS message that's sent to participants in a journey.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JourneySmsMessage {
    /// <p>The SMS message type. Valid values are TRANSACTIONAL (for messages that are critical or time-sensitive, such as a one-time passwords) and PROMOTIONAL (for messsages that aren't critical or time-sensitive, such as marketing messages).</p>
    #[doc(hidden)]
    pub message_type: std::option::Option<crate::types::MessageType>,
    /// <p>The long code to send the SMS message from. This value should be one of the dedicated long codes that's assigned to your AWS account. Although it isn't required, we recommend that you specify the long code using an E.164 format to ensure prompt and accurate delivery of the message. For example, +12065550100.</p>
    #[doc(hidden)]
    pub origination_number: std::option::Option<std::string::String>,
    /// <p>The sender ID to display as the sender of the message on a recipient's device. Support for sender IDs varies by country or region. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-countries.html">Supported Countries and Regions</a> in the Amazon Pinpoint User Guide.</p>
    #[doc(hidden)]
    pub sender_id: std::option::Option<std::string::String>,
    /// <p>The entity ID or Principal Entity (PE) id received from the regulatory body for sending SMS in your country.</p>
    #[doc(hidden)]
    pub entity_id: std::option::Option<std::string::String>,
    /// <p>The template ID received from the regulatory body for sending SMS in your country.</p>
    #[doc(hidden)]
    pub template_id: std::option::Option<std::string::String>,
}
impl JourneySmsMessage {
    /// <p>The SMS message type. Valid values are TRANSACTIONAL (for messages that are critical or time-sensitive, such as a one-time passwords) and PROMOTIONAL (for messsages that aren't critical or time-sensitive, such as marketing messages).</p>
    pub fn message_type(&self) -> std::option::Option<&crate::types::MessageType> {
        self.message_type.as_ref()
    }
    /// <p>The long code to send the SMS message from. This value should be one of the dedicated long codes that's assigned to your AWS account. Although it isn't required, we recommend that you specify the long code using an E.164 format to ensure prompt and accurate delivery of the message. For example, +12065550100.</p>
    pub fn origination_number(&self) -> std::option::Option<&str> {
        self.origination_number.as_deref()
    }
    /// <p>The sender ID to display as the sender of the message on a recipient's device. Support for sender IDs varies by country or region. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-countries.html">Supported Countries and Regions</a> in the Amazon Pinpoint User Guide.</p>
    pub fn sender_id(&self) -> std::option::Option<&str> {
        self.sender_id.as_deref()
    }
    /// <p>The entity ID or Principal Entity (PE) id received from the regulatory body for sending SMS in your country.</p>
    pub fn entity_id(&self) -> std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The template ID received from the regulatory body for sending SMS in your country.</p>
    pub fn template_id(&self) -> std::option::Option<&str> {
        self.template_id.as_deref()
    }
}
impl JourneySmsMessage {
    /// Creates a new builder-style object to manufacture [`JourneySmsMessage`](crate::types::JourneySmsMessage).
    pub fn builder() -> crate::types::builders::JourneySmsMessageBuilder {
        crate::types::builders::JourneySmsMessageBuilder::default()
    }
}

/// A builder for [`JourneySmsMessage`](crate::types::JourneySmsMessage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JourneySmsMessageBuilder {
    pub(crate) message_type: std::option::Option<crate::types::MessageType>,
    pub(crate) origination_number: std::option::Option<std::string::String>,
    pub(crate) sender_id: std::option::Option<std::string::String>,
    pub(crate) entity_id: std::option::Option<std::string::String>,
    pub(crate) template_id: std::option::Option<std::string::String>,
}
impl JourneySmsMessageBuilder {
    /// <p>The SMS message type. Valid values are TRANSACTIONAL (for messages that are critical or time-sensitive, such as a one-time passwords) and PROMOTIONAL (for messsages that aren't critical or time-sensitive, such as marketing messages).</p>
    pub fn message_type(mut self, input: crate::types::MessageType) -> Self {
        self.message_type = Some(input);
        self
    }
    /// <p>The SMS message type. Valid values are TRANSACTIONAL (for messages that are critical or time-sensitive, such as a one-time passwords) and PROMOTIONAL (for messsages that aren't critical or time-sensitive, such as marketing messages).</p>
    pub fn set_message_type(
        mut self,
        input: std::option::Option<crate::types::MessageType>,
    ) -> Self {
        self.message_type = input;
        self
    }
    /// <p>The long code to send the SMS message from. This value should be one of the dedicated long codes that's assigned to your AWS account. Although it isn't required, we recommend that you specify the long code using an E.164 format to ensure prompt and accurate delivery of the message. For example, +12065550100.</p>
    pub fn origination_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.origination_number = Some(input.into());
        self
    }
    /// <p>The long code to send the SMS message from. This value should be one of the dedicated long codes that's assigned to your AWS account. Although it isn't required, we recommend that you specify the long code using an E.164 format to ensure prompt and accurate delivery of the message. For example, +12065550100.</p>
    pub fn set_origination_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.origination_number = input;
        self
    }
    /// <p>The sender ID to display as the sender of the message on a recipient's device. Support for sender IDs varies by country or region. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-countries.html">Supported Countries and Regions</a> in the Amazon Pinpoint User Guide.</p>
    pub fn sender_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sender_id = Some(input.into());
        self
    }
    /// <p>The sender ID to display as the sender of the message on a recipient's device. Support for sender IDs varies by country or region. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-countries.html">Supported Countries and Regions</a> in the Amazon Pinpoint User Guide.</p>
    pub fn set_sender_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sender_id = input;
        self
    }
    /// <p>The entity ID or Principal Entity (PE) id received from the regulatory body for sending SMS in your country.</p>
    pub fn entity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_id = Some(input.into());
        self
    }
    /// <p>The entity ID or Principal Entity (PE) id received from the regulatory body for sending SMS in your country.</p>
    pub fn set_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The template ID received from the regulatory body for sending SMS in your country.</p>
    pub fn template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_id = Some(input.into());
        self
    }
    /// <p>The template ID received from the regulatory body for sending SMS in your country.</p>
    pub fn set_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_id = input;
        self
    }
    /// Consumes the builder and constructs a [`JourneySmsMessage`](crate::types::JourneySmsMessage).
    pub fn build(self) -> crate::types::JourneySmsMessage {
        crate::types::JourneySmsMessage {
            message_type: self.message_type,
            origination_number: self.origination_number,
            sender_id: self.sender_id,
            entity_id: self.entity_id,
            template_id: self.template_id,
        }
    }
}
