// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the settings for a multivariate split activity in a journey. This type of activity sends participants down one of as many as five paths (including a default <i>Else</i> path) in a journey, based on conditions that you specify.</p> <note>
/// <p>To create multivariate split activities that send participants down different paths based on push notification events (such as Open or Received events), your mobile app has to specify the User ID and Endpoint ID values. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/integrate.html">Integrating Amazon Pinpoint with your application</a> in the <i>Amazon Pinpoint Developer Guide</i>.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MultiConditionalSplitActivity {
    /// <p>The paths for the activity, including the conditions for entering each path and the activity to perform for each path.</p>
    #[doc(hidden)]
    pub branches: std::option::Option<std::vec::Vec<crate::types::MultiConditionalBranch>>,
    /// <p>The unique identifier for the activity to perform for participants who don't meet any of the conditions specified for other paths in the activity.</p>
    #[doc(hidden)]
    pub default_activity: std::option::Option<std::string::String>,
    /// <p>The amount of time to wait or the date and time when Amazon Pinpoint determines whether the conditions are met.</p>
    #[doc(hidden)]
    pub evaluation_wait_time: std::option::Option<crate::types::WaitTime>,
}
impl MultiConditionalSplitActivity {
    /// <p>The paths for the activity, including the conditions for entering each path and the activity to perform for each path.</p>
    pub fn branches(&self) -> std::option::Option<&[crate::types::MultiConditionalBranch]> {
        self.branches.as_deref()
    }
    /// <p>The unique identifier for the activity to perform for participants who don't meet any of the conditions specified for other paths in the activity.</p>
    pub fn default_activity(&self) -> std::option::Option<&str> {
        self.default_activity.as_deref()
    }
    /// <p>The amount of time to wait or the date and time when Amazon Pinpoint determines whether the conditions are met.</p>
    pub fn evaluation_wait_time(&self) -> std::option::Option<&crate::types::WaitTime> {
        self.evaluation_wait_time.as_ref()
    }
}
impl MultiConditionalSplitActivity {
    /// Creates a new builder-style object to manufacture [`MultiConditionalSplitActivity`](crate::types::MultiConditionalSplitActivity).
    pub fn builder() -> crate::types::builders::MultiConditionalSplitActivityBuilder {
        crate::types::builders::MultiConditionalSplitActivityBuilder::default()
    }
}

/// A builder for [`MultiConditionalSplitActivity`](crate::types::MultiConditionalSplitActivity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MultiConditionalSplitActivityBuilder {
    pub(crate) branches: std::option::Option<std::vec::Vec<crate::types::MultiConditionalBranch>>,
    pub(crate) default_activity: std::option::Option<std::string::String>,
    pub(crate) evaluation_wait_time: std::option::Option<crate::types::WaitTime>,
}
impl MultiConditionalSplitActivityBuilder {
    /// Appends an item to `branches`.
    ///
    /// To override the contents of this collection use [`set_branches`](Self::set_branches).
    ///
    /// <p>The paths for the activity, including the conditions for entering each path and the activity to perform for each path.</p>
    pub fn branches(mut self, input: crate::types::MultiConditionalBranch) -> Self {
        let mut v = self.branches.unwrap_or_default();
        v.push(input);
        self.branches = Some(v);
        self
    }
    /// <p>The paths for the activity, including the conditions for entering each path and the activity to perform for each path.</p>
    pub fn set_branches(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MultiConditionalBranch>>,
    ) -> Self {
        self.branches = input;
        self
    }
    /// <p>The unique identifier for the activity to perform for participants who don't meet any of the conditions specified for other paths in the activity.</p>
    pub fn default_activity(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_activity = Some(input.into());
        self
    }
    /// <p>The unique identifier for the activity to perform for participants who don't meet any of the conditions specified for other paths in the activity.</p>
    pub fn set_default_activity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_activity = input;
        self
    }
    /// <p>The amount of time to wait or the date and time when Amazon Pinpoint determines whether the conditions are met.</p>
    pub fn evaluation_wait_time(mut self, input: crate::types::WaitTime) -> Self {
        self.evaluation_wait_time = Some(input);
        self
    }
    /// <p>The amount of time to wait or the date and time when Amazon Pinpoint determines whether the conditions are met.</p>
    pub fn set_evaluation_wait_time(
        mut self,
        input: std::option::Option<crate::types::WaitTime>,
    ) -> Self {
        self.evaluation_wait_time = input;
        self
    }
    /// Consumes the builder and constructs a [`MultiConditionalSplitActivity`](crate::types::MultiConditionalSplitActivity).
    pub fn build(self) -> crate::types::MultiConditionalSplitActivity {
        crate::types::MultiConditionalSplitActivity {
            branches: self.branches,
            default_activity: self.default_activity,
            evaluation_wait_time: self.evaluation_wait_time,
        }
    }
}
