// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the resource settings for a job that exports endpoint definitions to a file. The file can be added directly to an Amazon Simple Storage Service (Amazon S3) bucket by using the Amazon Pinpoint API or downloaded directly to a computer by using the Amazon Pinpoint console.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportJobResource {
    /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorized Amazon Pinpoint to access the Amazon S3 location where the endpoint definitions were exported to.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the location in an Amazon Simple Storage Service (Amazon S3) bucket where the endpoint definitions were exported to. This location is typically a folder that contains multiple files. The URL should be in the following format: s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// folder-name
    /// </replaceable>/.</p>
    pub s3_url_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the segment that the endpoint definitions were exported from. If this value isn't present, Amazon Pinpoint exported definitions for all the endpoints that are associated with the application.</p>
    pub segment_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the segment that the endpoint definitions were exported from.</p>
    pub segment_version: ::std::option::Option<i32>,
}
impl ExportJobResource {
    /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorized Amazon Pinpoint to access the Amazon S3 location where the endpoint definitions were exported to.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The URL of the location in an Amazon Simple Storage Service (Amazon S3) bucket where the endpoint definitions were exported to. This location is typically a folder that contains multiple files. The URL should be in the following format: s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// folder-name
    /// </replaceable>/.</p>
    pub fn s3_url_prefix(&self) -> ::std::option::Option<&str> {
        self.s3_url_prefix.as_deref()
    }
    /// <p>The identifier for the segment that the endpoint definitions were exported from. If this value isn't present, Amazon Pinpoint exported definitions for all the endpoints that are associated with the application.</p>
    pub fn segment_id(&self) -> ::std::option::Option<&str> {
        self.segment_id.as_deref()
    }
    /// <p>The version of the segment that the endpoint definitions were exported from.</p>
    pub fn segment_version(&self) -> ::std::option::Option<i32> {
        self.segment_version
    }
}
impl ExportJobResource {
    /// Creates a new builder-style object to manufacture [`ExportJobResource`](crate::types::ExportJobResource).
    pub fn builder() -> crate::types::builders::ExportJobResourceBuilder {
        crate::types::builders::ExportJobResourceBuilder::default()
    }
}

/// A builder for [`ExportJobResource`](crate::types::ExportJobResource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportJobResourceBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) s3_url_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) segment_id: ::std::option::Option<::std::string::String>,
    pub(crate) segment_version: ::std::option::Option<i32>,
}
impl ExportJobResourceBuilder {
    /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorized Amazon Pinpoint to access the Amazon S3 location where the endpoint definitions were exported to.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorized Amazon Pinpoint to access the Amazon S3 location where the endpoint definitions were exported to.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorized Amazon Pinpoint to access the Amazon S3 location where the endpoint definitions were exported to.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The URL of the location in an Amazon Simple Storage Service (Amazon S3) bucket where the endpoint definitions were exported to. This location is typically a folder that contains multiple files. The URL should be in the following format: s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// folder-name
    /// </replaceable>/.</p>
    /// This field is required.
    pub fn s3_url_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_url_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the location in an Amazon Simple Storage Service (Amazon S3) bucket where the endpoint definitions were exported to. This location is typically a folder that contains multiple files. The URL should be in the following format: s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// folder-name
    /// </replaceable>/.</p>
    pub fn set_s3_url_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_url_prefix = input;
        self
    }
    /// <p>The URL of the location in an Amazon Simple Storage Service (Amazon S3) bucket where the endpoint definitions were exported to. This location is typically a folder that contains multiple files. The URL should be in the following format: s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// folder-name
    /// </replaceable>/.</p>
    pub fn get_s3_url_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_url_prefix
    }
    /// <p>The identifier for the segment that the endpoint definitions were exported from. If this value isn't present, Amazon Pinpoint exported definitions for all the endpoints that are associated with the application.</p>
    pub fn segment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.segment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the segment that the endpoint definitions were exported from. If this value isn't present, Amazon Pinpoint exported definitions for all the endpoints that are associated with the application.</p>
    pub fn set_segment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.segment_id = input;
        self
    }
    /// <p>The identifier for the segment that the endpoint definitions were exported from. If this value isn't present, Amazon Pinpoint exported definitions for all the endpoints that are associated with the application.</p>
    pub fn get_segment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.segment_id
    }
    /// <p>The version of the segment that the endpoint definitions were exported from.</p>
    pub fn segment_version(mut self, input: i32) -> Self {
        self.segment_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the segment that the endpoint definitions were exported from.</p>
    pub fn set_segment_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.segment_version = input;
        self
    }
    /// <p>The version of the segment that the endpoint definitions were exported from.</p>
    pub fn get_segment_version(&self) -> &::std::option::Option<i32> {
        &self.segment_version
    }
    /// Consumes the builder and constructs a [`ExportJobResource`](crate::types::ExportJobResource).
    pub fn build(self) -> crate::types::ExportJobResource {
        crate::types::ExportJobResource {
            role_arn: self.role_arn,
            s3_url_prefix: self.s3_url_prefix,
            segment_id: self.segment_id,
            segment_version: self.segment_version,
        }
    }
}
