// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a segment to associate with an activity in a journey.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SegmentCondition {
    /// <p>The unique identifier for the segment to associate with the activity.</p>
    #[doc(hidden)]
    pub segment_id: std::option::Option<std::string::String>,
}
impl SegmentCondition {
    /// <p>The unique identifier for the segment to associate with the activity.</p>
    pub fn segment_id(&self) -> std::option::Option<&str> {
        self.segment_id.as_deref()
    }
}
impl SegmentCondition {
    /// Creates a new builder-style object to manufacture [`SegmentCondition`](crate::types::SegmentCondition).
    pub fn builder() -> crate::types::builders::SegmentConditionBuilder {
        crate::types::builders::SegmentConditionBuilder::default()
    }
}

/// A builder for [`SegmentCondition`](crate::types::SegmentCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SegmentConditionBuilder {
    pub(crate) segment_id: std::option::Option<std::string::String>,
}
impl SegmentConditionBuilder {
    /// <p>The unique identifier for the segment to associate with the activity.</p>
    pub fn segment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.segment_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the segment to associate with the activity.</p>
    pub fn set_segment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.segment_id = input;
        self
    }
    /// Consumes the builder and constructs a [`SegmentCondition`](crate::types::SegmentCondition).
    pub fn build(self) -> crate::types::SegmentCondition {
        crate::types::SegmentCondition {
            segment_id: self.segment_id,
        }
    }
}
