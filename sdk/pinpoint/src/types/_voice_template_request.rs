// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the content and settings for a message template that can be used in messages that are sent through the voice channel.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VoiceTemplateRequest {
    /// <p>The text of the script to use in messages that are based on the message template, in plain text format.</p>
    #[doc(hidden)]
    pub body: std::option::Option<std::string::String>,
    /// <p>A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.</p>
    #[doc(hidden)]
    pub default_substitutions: std::option::Option<std::string::String>,
    /// <p>The code for the language to use when synthesizing the text of the script in messages that are based on the message template. For a list of supported languages and the code for each one, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<std::string::String>,
    /// <p>A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A custom description of the message template.</p>
    #[doc(hidden)]
    pub template_description: std::option::Option<std::string::String>,
    /// <p>The name of the voice to use when delivering messages that are based on the message template. For a list of supported voices, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    #[doc(hidden)]
    pub voice_id: std::option::Option<std::string::String>,
}
impl VoiceTemplateRequest {
    /// <p>The text of the script to use in messages that are based on the message template, in plain text format.</p>
    pub fn body(&self) -> std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.</p>
    pub fn default_substitutions(&self) -> std::option::Option<&str> {
        self.default_substitutions.as_deref()
    }
    /// <p>The code for the language to use when synthesizing the text of the script in messages that are based on the message template. For a list of supported languages and the code for each one, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    pub fn language_code(&self) -> std::option::Option<&str> {
        self.language_code.as_deref()
    }
    /// <p>A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>A custom description of the message template.</p>
    pub fn template_description(&self) -> std::option::Option<&str> {
        self.template_description.as_deref()
    }
    /// <p>The name of the voice to use when delivering messages that are based on the message template. For a list of supported voices, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    pub fn voice_id(&self) -> std::option::Option<&str> {
        self.voice_id.as_deref()
    }
}
impl VoiceTemplateRequest {
    /// Creates a new builder-style object to manufacture [`VoiceTemplateRequest`](crate::types::VoiceTemplateRequest).
    pub fn builder() -> crate::types::builders::VoiceTemplateRequestBuilder {
        crate::types::builders::VoiceTemplateRequestBuilder::default()
    }
}

/// A builder for [`VoiceTemplateRequest`](crate::types::VoiceTemplateRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VoiceTemplateRequestBuilder {
    pub(crate) body: std::option::Option<std::string::String>,
    pub(crate) default_substitutions: std::option::Option<std::string::String>,
    pub(crate) language_code: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) template_description: std::option::Option<std::string::String>,
    pub(crate) voice_id: std::option::Option<std::string::String>,
}
impl VoiceTemplateRequestBuilder {
    /// <p>The text of the script to use in messages that are based on the message template, in plain text format.</p>
    pub fn body(mut self, input: impl Into<std::string::String>) -> Self {
        self.body = Some(input.into());
        self
    }
    /// <p>The text of the script to use in messages that are based on the message template, in plain text format.</p>
    pub fn set_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.</p>
    pub fn default_substitutions(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_substitutions = Some(input.into());
        self
    }
    /// <p>A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.</p>
    pub fn set_default_substitutions(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_substitutions = input;
        self
    }
    /// <p>The code for the language to use when synthesizing the text of the script in messages that are based on the message template. For a list of supported languages and the code for each one, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    pub fn language_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.language_code = Some(input.into());
        self
    }
    /// <p>The code for the language to use when synthesizing the text of the script in messages that are based on the message template. For a list of supported languages and the code for each one, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    pub fn set_language_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.language_code = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>A custom description of the message template.</p>
    pub fn template_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_description = Some(input.into());
        self
    }
    /// <p>A custom description of the message template.</p>
    pub fn set_template_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.template_description = input;
        self
    }
    /// <p>The name of the voice to use when delivering messages that are based on the message template. For a list of supported voices, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    pub fn voice_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.voice_id = Some(input.into());
        self
    }
    /// <p>The name of the voice to use when delivering messages that are based on the message template. For a list of supported voices, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    pub fn set_voice_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.voice_id = input;
        self
    }
    /// Consumes the builder and constructs a [`VoiceTemplateRequest`](crate::types::VoiceTemplateRequest).
    pub fn build(self) -> crate::types::VoiceTemplateRequest {
        crate::types::VoiceTemplateRequest {
            body: self.body,
            default_substitutions: self.default_substitutions,
            language_code: self.language_code,
            tags: self.tags,
            template_description: self.template_description,
            voice_id: self.voice_id,
        }
    }
}
