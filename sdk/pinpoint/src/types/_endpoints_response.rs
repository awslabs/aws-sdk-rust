// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about all the endpoints that are associated with a user ID.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EndpointsResponse {
    /// <p>An array of responses, one for each endpoint that's associated with the user ID.</p>
    pub item: ::std::option::Option<::std::vec::Vec<crate::types::EndpointResponse>>,
}
impl EndpointsResponse {
    /// <p>An array of responses, one for each endpoint that's associated with the user ID.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.item.is_none()`.
    pub fn item(&self) -> &[crate::types::EndpointResponse] {
        self.item.as_deref().unwrap_or_default()
    }
}
impl EndpointsResponse {
    /// Creates a new builder-style object to manufacture [`EndpointsResponse`](crate::types::EndpointsResponse).
    pub fn builder() -> crate::types::builders::EndpointsResponseBuilder {
        crate::types::builders::EndpointsResponseBuilder::default()
    }
}

/// A builder for [`EndpointsResponse`](crate::types::EndpointsResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EndpointsResponseBuilder {
    pub(crate) item: ::std::option::Option<::std::vec::Vec<crate::types::EndpointResponse>>,
}
impl EndpointsResponseBuilder {
    /// Appends an item to `item`.
    ///
    /// To override the contents of this collection use [`set_item`](Self::set_item).
    ///
    /// <p>An array of responses, one for each endpoint that's associated with the user ID.</p>
    pub fn item(mut self, input: crate::types::EndpointResponse) -> Self {
        let mut v = self.item.unwrap_or_default();
        v.push(input);
        self.item = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of responses, one for each endpoint that's associated with the user ID.</p>
    pub fn set_item(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EndpointResponse>>) -> Self {
        self.item = input;
        self
    }
    /// <p>An array of responses, one for each endpoint that's associated with the user ID.</p>
    pub fn get_item(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EndpointResponse>> {
        &self.item
    }
    /// Consumes the builder and constructs a [`EndpointsResponse`](crate::types::EndpointsResponse).
    pub fn build(self) -> crate::types::EndpointsResponse {
        crate::types::EndpointsResponse { item: self.item }
    }
}
