// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about an API request or response.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MessageBody {
    /// <p>The message that's returned from the API.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the request or response.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
}
impl MessageBody {
    /// <p>The message that's returned from the API.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The unique identifier for the request or response.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
}
impl MessageBody {
    /// Creates a new builder-style object to manufacture [`MessageBody`](crate::types::MessageBody).
    pub fn builder() -> crate::types::builders::MessageBodyBuilder {
        crate::types::builders::MessageBodyBuilder::default()
    }
}

/// A builder for [`MessageBody`](crate::types::MessageBody).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MessageBodyBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) request_id: std::option::Option<std::string::String>,
}
impl MessageBodyBuilder {
    /// <p>The message that's returned from the API.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>The message that's returned from the API.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The unique identifier for the request or response.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the request or response.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// Consumes the builder and constructs a [`MessageBody`](crate::types::MessageBody).
    pub fn build(self) -> crate::types::MessageBody {
        crate::types::MessageBody {
            message: self.message,
            request_id: self.request_id,
        }
    }
}
