// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The time when journey allow to send messages. QuietTime should be configured first and SendingSchedule should be set to true.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OpenHours {
    /// <p>Rules for Email Channel.</p>
    #[doc(hidden)]
    pub email: std::option::Option<
        std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    >,
    /// <p>Rules for SMS Channel.</p>
    #[doc(hidden)]
    pub sms: std::option::Option<
        std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    >,
    /// <p>Rules for Push Channel.</p>
    #[doc(hidden)]
    pub push: std::option::Option<
        std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    >,
    /// <p>Rules for Voice Channel.</p>
    #[doc(hidden)]
    pub voice: std::option::Option<
        std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    >,
    /// <p>Rules for Custom Channel.</p>
    #[doc(hidden)]
    pub custom: std::option::Option<
        std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    >,
}
impl OpenHours {
    /// <p>Rules for Email Channel.</p>
    pub fn email(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    > {
        self.email.as_ref()
    }
    /// <p>Rules for SMS Channel.</p>
    pub fn sms(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    > {
        self.sms.as_ref()
    }
    /// <p>Rules for Push Channel.</p>
    pub fn push(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    > {
        self.push.as_ref()
    }
    /// <p>Rules for Voice Channel.</p>
    pub fn voice(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    > {
        self.voice.as_ref()
    }
    /// <p>Rules for Custom Channel.</p>
    pub fn custom(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    > {
        self.custom.as_ref()
    }
}
impl OpenHours {
    /// Creates a new builder-style object to manufacture [`OpenHours`](crate::types::OpenHours).
    pub fn builder() -> crate::types::builders::OpenHoursBuilder {
        crate::types::builders::OpenHoursBuilder::default()
    }
}

/// A builder for [`OpenHours`](crate::types::OpenHours).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OpenHoursBuilder {
    pub(crate) email: std::option::Option<
        std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    >,
    pub(crate) sms: std::option::Option<
        std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    >,
    pub(crate) push: std::option::Option<
        std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    >,
    pub(crate) voice: std::option::Option<
        std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    >,
    pub(crate) custom: std::option::Option<
        std::collections::HashMap<
            crate::types::DayOfWeek,
            std::vec::Vec<crate::types::OpenHoursRule>,
        >,
    >,
}
impl OpenHoursBuilder {
    /// Adds a key-value pair to `email`.
    ///
    /// To override the contents of this collection use [`set_email`](Self::set_email).
    ///
    /// <p>Rules for Email Channel.</p>
    pub fn email(
        mut self,
        k: crate::types::DayOfWeek,
        v: std::vec::Vec<crate::types::OpenHoursRule>,
    ) -> Self {
        let mut hash_map = self.email.unwrap_or_default();
        hash_map.insert(k, v);
        self.email = Some(hash_map);
        self
    }
    /// <p>Rules for Email Channel.</p>
    pub fn set_email(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::DayOfWeek,
                std::vec::Vec<crate::types::OpenHoursRule>,
            >,
        >,
    ) -> Self {
        self.email = input;
        self
    }
    /// Adds a key-value pair to `sms`.
    ///
    /// To override the contents of this collection use [`set_sms`](Self::set_sms).
    ///
    /// <p>Rules for SMS Channel.</p>
    pub fn sms(
        mut self,
        k: crate::types::DayOfWeek,
        v: std::vec::Vec<crate::types::OpenHoursRule>,
    ) -> Self {
        let mut hash_map = self.sms.unwrap_or_default();
        hash_map.insert(k, v);
        self.sms = Some(hash_map);
        self
    }
    /// <p>Rules for SMS Channel.</p>
    pub fn set_sms(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::DayOfWeek,
                std::vec::Vec<crate::types::OpenHoursRule>,
            >,
        >,
    ) -> Self {
        self.sms = input;
        self
    }
    /// Adds a key-value pair to `push`.
    ///
    /// To override the contents of this collection use [`set_push`](Self::set_push).
    ///
    /// <p>Rules for Push Channel.</p>
    pub fn push(
        mut self,
        k: crate::types::DayOfWeek,
        v: std::vec::Vec<crate::types::OpenHoursRule>,
    ) -> Self {
        let mut hash_map = self.push.unwrap_or_default();
        hash_map.insert(k, v);
        self.push = Some(hash_map);
        self
    }
    /// <p>Rules for Push Channel.</p>
    pub fn set_push(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::DayOfWeek,
                std::vec::Vec<crate::types::OpenHoursRule>,
            >,
        >,
    ) -> Self {
        self.push = input;
        self
    }
    /// Adds a key-value pair to `voice`.
    ///
    /// To override the contents of this collection use [`set_voice`](Self::set_voice).
    ///
    /// <p>Rules for Voice Channel.</p>
    pub fn voice(
        mut self,
        k: crate::types::DayOfWeek,
        v: std::vec::Vec<crate::types::OpenHoursRule>,
    ) -> Self {
        let mut hash_map = self.voice.unwrap_or_default();
        hash_map.insert(k, v);
        self.voice = Some(hash_map);
        self
    }
    /// <p>Rules for Voice Channel.</p>
    pub fn set_voice(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::DayOfWeek,
                std::vec::Vec<crate::types::OpenHoursRule>,
            >,
        >,
    ) -> Self {
        self.voice = input;
        self
    }
    /// Adds a key-value pair to `custom`.
    ///
    /// To override the contents of this collection use [`set_custom`](Self::set_custom).
    ///
    /// <p>Rules for Custom Channel.</p>
    pub fn custom(
        mut self,
        k: crate::types::DayOfWeek,
        v: std::vec::Vec<crate::types::OpenHoursRule>,
    ) -> Self {
        let mut hash_map = self.custom.unwrap_or_default();
        hash_map.insert(k, v);
        self.custom = Some(hash_map);
        self
    }
    /// <p>Rules for Custom Channel.</p>
    pub fn set_custom(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::DayOfWeek,
                std::vec::Vec<crate::types::OpenHoursRule>,
            >,
        >,
    ) -> Self {
        self.custom = input;
        self
    }
    /// Consumes the builder and constructs a [`OpenHours`](crate::types::OpenHours).
    pub fn build(self) -> crate::types::OpenHours {
        crate::types::OpenHours {
            email: self.email,
            sms: self.sms,
            push: self.push,
            voice: self.voice,
            custom: self.custom,
        }
    }
}
