// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Send OTP message request parameters.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendOtpMessageRequestParameters {
    /// <p>The attempts allowed to validate an OTP.</p>
    #[doc(hidden)]
    pub allowed_attempts: i32,
    /// <p>The brand name that will be substituted into the OTP message body. Should be owned by calling AWS account.</p>
    #[doc(hidden)]
    pub brand_name: std::option::Option<std::string::String>,
    /// <p>Channel type for the OTP message. Supported values: [SMS].</p>
    #[doc(hidden)]
    pub channel: std::option::Option<std::string::String>,
    /// <p>The number of characters in the generated OTP.</p>
    #[doc(hidden)]
    pub code_length: i32,
    /// <p>The destination identity to send OTP to.</p>
    #[doc(hidden)]
    pub destination_identity: std::option::Option<std::string::String>,
    /// <p>A unique Entity ID received from DLT after entity registration is approved.</p>
    #[doc(hidden)]
    pub entity_id: std::option::Option<std::string::String>,
    /// <p>The language to be used for the outgoing message body containing the OTP.</p>
    #[doc(hidden)]
    pub language: std::option::Option<std::string::String>,
    /// <p>The origination identity used to send OTP from.</p>
    #[doc(hidden)]
    pub origination_identity: std::option::Option<std::string::String>,
    /// <p>Developer-specified reference identifier. Required to match during OTP verification.</p>
    #[doc(hidden)]
    pub reference_id: std::option::Option<std::string::String>,
    /// <p>A unique Template ID received from DLT after entity registration is approved.</p>
    #[doc(hidden)]
    pub template_id: std::option::Option<std::string::String>,
    /// <p>The time in minutes before the OTP is no longer valid.</p>
    #[doc(hidden)]
    pub validity_period: i32,
}
impl SendOtpMessageRequestParameters {
    /// <p>The attempts allowed to validate an OTP.</p>
    pub fn allowed_attempts(&self) -> i32 {
        self.allowed_attempts
    }
    /// <p>The brand name that will be substituted into the OTP message body. Should be owned by calling AWS account.</p>
    pub fn brand_name(&self) -> std::option::Option<&str> {
        self.brand_name.as_deref()
    }
    /// <p>Channel type for the OTP message. Supported values: [SMS].</p>
    pub fn channel(&self) -> std::option::Option<&str> {
        self.channel.as_deref()
    }
    /// <p>The number of characters in the generated OTP.</p>
    pub fn code_length(&self) -> i32 {
        self.code_length
    }
    /// <p>The destination identity to send OTP to.</p>
    pub fn destination_identity(&self) -> std::option::Option<&str> {
        self.destination_identity.as_deref()
    }
    /// <p>A unique Entity ID received from DLT after entity registration is approved.</p>
    pub fn entity_id(&self) -> std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The language to be used for the outgoing message body containing the OTP.</p>
    pub fn language(&self) -> std::option::Option<&str> {
        self.language.as_deref()
    }
    /// <p>The origination identity used to send OTP from.</p>
    pub fn origination_identity(&self) -> std::option::Option<&str> {
        self.origination_identity.as_deref()
    }
    /// <p>Developer-specified reference identifier. Required to match during OTP verification.</p>
    pub fn reference_id(&self) -> std::option::Option<&str> {
        self.reference_id.as_deref()
    }
    /// <p>A unique Template ID received from DLT after entity registration is approved.</p>
    pub fn template_id(&self) -> std::option::Option<&str> {
        self.template_id.as_deref()
    }
    /// <p>The time in minutes before the OTP is no longer valid.</p>
    pub fn validity_period(&self) -> i32 {
        self.validity_period
    }
}
impl SendOtpMessageRequestParameters {
    /// Creates a new builder-style object to manufacture [`SendOtpMessageRequestParameters`](crate::types::SendOtpMessageRequestParameters).
    pub fn builder() -> crate::types::builders::SendOtpMessageRequestParametersBuilder {
        crate::types::builders::SendOtpMessageRequestParametersBuilder::default()
    }
}

/// A builder for [`SendOtpMessageRequestParameters`](crate::types::SendOtpMessageRequestParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendOtpMessageRequestParametersBuilder {
    pub(crate) allowed_attempts: std::option::Option<i32>,
    pub(crate) brand_name: std::option::Option<std::string::String>,
    pub(crate) channel: std::option::Option<std::string::String>,
    pub(crate) code_length: std::option::Option<i32>,
    pub(crate) destination_identity: std::option::Option<std::string::String>,
    pub(crate) entity_id: std::option::Option<std::string::String>,
    pub(crate) language: std::option::Option<std::string::String>,
    pub(crate) origination_identity: std::option::Option<std::string::String>,
    pub(crate) reference_id: std::option::Option<std::string::String>,
    pub(crate) template_id: std::option::Option<std::string::String>,
    pub(crate) validity_period: std::option::Option<i32>,
}
impl SendOtpMessageRequestParametersBuilder {
    /// <p>The attempts allowed to validate an OTP.</p>
    pub fn allowed_attempts(mut self, input: i32) -> Self {
        self.allowed_attempts = Some(input);
        self
    }
    /// <p>The attempts allowed to validate an OTP.</p>
    pub fn set_allowed_attempts(mut self, input: std::option::Option<i32>) -> Self {
        self.allowed_attempts = input;
        self
    }
    /// <p>The brand name that will be substituted into the OTP message body. Should be owned by calling AWS account.</p>
    pub fn brand_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.brand_name = Some(input.into());
        self
    }
    /// <p>The brand name that will be substituted into the OTP message body. Should be owned by calling AWS account.</p>
    pub fn set_brand_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.brand_name = input;
        self
    }
    /// <p>Channel type for the OTP message. Supported values: [SMS].</p>
    pub fn channel(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel = Some(input.into());
        self
    }
    /// <p>Channel type for the OTP message. Supported values: [SMS].</p>
    pub fn set_channel(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel = input;
        self
    }
    /// <p>The number of characters in the generated OTP.</p>
    pub fn code_length(mut self, input: i32) -> Self {
        self.code_length = Some(input);
        self
    }
    /// <p>The number of characters in the generated OTP.</p>
    pub fn set_code_length(mut self, input: std::option::Option<i32>) -> Self {
        self.code_length = input;
        self
    }
    /// <p>The destination identity to send OTP to.</p>
    pub fn destination_identity(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_identity = Some(input.into());
        self
    }
    /// <p>The destination identity to send OTP to.</p>
    pub fn set_destination_identity(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_identity = input;
        self
    }
    /// <p>A unique Entity ID received from DLT after entity registration is approved.</p>
    pub fn entity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_id = Some(input.into());
        self
    }
    /// <p>A unique Entity ID received from DLT after entity registration is approved.</p>
    pub fn set_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The language to be used for the outgoing message body containing the OTP.</p>
    pub fn language(mut self, input: impl Into<std::string::String>) -> Self {
        self.language = Some(input.into());
        self
    }
    /// <p>The language to be used for the outgoing message body containing the OTP.</p>
    pub fn set_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p>The origination identity used to send OTP from.</p>
    pub fn origination_identity(mut self, input: impl Into<std::string::String>) -> Self {
        self.origination_identity = Some(input.into());
        self
    }
    /// <p>The origination identity used to send OTP from.</p>
    pub fn set_origination_identity(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.origination_identity = input;
        self
    }
    /// <p>Developer-specified reference identifier. Required to match during OTP verification.</p>
    pub fn reference_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.reference_id = Some(input.into());
        self
    }
    /// <p>Developer-specified reference identifier. Required to match during OTP verification.</p>
    pub fn set_reference_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reference_id = input;
        self
    }
    /// <p>A unique Template ID received from DLT after entity registration is approved.</p>
    pub fn template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_id = Some(input.into());
        self
    }
    /// <p>A unique Template ID received from DLT after entity registration is approved.</p>
    pub fn set_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_id = input;
        self
    }
    /// <p>The time in minutes before the OTP is no longer valid.</p>
    pub fn validity_period(mut self, input: i32) -> Self {
        self.validity_period = Some(input);
        self
    }
    /// <p>The time in minutes before the OTP is no longer valid.</p>
    pub fn set_validity_period(mut self, input: std::option::Option<i32>) -> Self {
        self.validity_period = input;
        self
    }
    /// Consumes the builder and constructs a [`SendOtpMessageRequestParameters`](crate::types::SendOtpMessageRequestParameters).
    pub fn build(self) -> crate::types::SendOtpMessageRequestParameters {
        crate::types::SendOtpMessageRequestParameters {
            allowed_attempts: self.allowed_attempts.unwrap_or_default(),
            brand_name: self.brand_name,
            channel: self.channel,
            code_length: self.code_length.unwrap_or_default(),
            destination_identity: self.destination_identity,
            entity_id: self.entity_id,
            language: self.language,
            origination_identity: self.origination_identity,
            reference_id: self.reference_id,
            template_id: self.template_id,
            validity_period: self.validity_period.unwrap_or_default(),
        }
    }
}
