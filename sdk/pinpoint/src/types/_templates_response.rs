// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about all the message templates that are associated with your Amazon Pinpoint account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TemplatesResponse {
    /// <p>An array of responses, one for each message template that's associated with your Amazon Pinpoint account and meets any filter criteria that you specified in the request.</p>
    #[doc(hidden)]
    pub item: std::option::Option<std::vec::Vec<crate::types::TemplateResponse>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl TemplatesResponse {
    /// <p>An array of responses, one for each message template that's associated with your Amazon Pinpoint account and meets any filter criteria that you specified in the request.</p>
    pub fn item(&self) -> std::option::Option<&[crate::types::TemplateResponse]> {
        self.item.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl TemplatesResponse {
    /// Creates a new builder-style object to manufacture [`TemplatesResponse`](crate::types::TemplatesResponse).
    pub fn builder() -> crate::types::builders::TemplatesResponseBuilder {
        crate::types::builders::TemplatesResponseBuilder::default()
    }
}

/// A builder for [`TemplatesResponse`](crate::types::TemplatesResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TemplatesResponseBuilder {
    pub(crate) item: std::option::Option<std::vec::Vec<crate::types::TemplateResponse>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl TemplatesResponseBuilder {
    /// Appends an item to `item`.
    ///
    /// To override the contents of this collection use [`set_item`](Self::set_item).
    ///
    /// <p>An array of responses, one for each message template that's associated with your Amazon Pinpoint account and meets any filter criteria that you specified in the request.</p>
    pub fn item(mut self, input: crate::types::TemplateResponse) -> Self {
        let mut v = self.item.unwrap_or_default();
        v.push(input);
        self.item = Some(v);
        self
    }
    /// <p>An array of responses, one for each message template that's associated with your Amazon Pinpoint account and meets any filter criteria that you specified in the request.</p>
    pub fn set_item(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TemplateResponse>>,
    ) -> Self {
        self.item = input;
        self
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`TemplatesResponse`](crate::types::TemplatesResponse).
    pub fn build(self) -> crate::types::TemplatesResponse {
        crate::types::TemplatesResponse {
            item: self.item,
            next_token: self.next_token,
        }
    }
}
