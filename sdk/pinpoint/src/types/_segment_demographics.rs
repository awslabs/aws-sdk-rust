// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies demographic-based dimension settings for including or excluding endpoints from a segment. These settings derive from characteristics of endpoint devices, such as platform, make, and model.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SegmentDemographics {
    /// <p>The app version criteria for the segment.</p>
    #[doc(hidden)]
    pub app_version: std::option::Option<crate::types::SetDimension>,
    /// <p>The channel criteria for the segment.</p>
    #[doc(hidden)]
    pub channel: std::option::Option<crate::types::SetDimension>,
    /// <p>The device type criteria for the segment.</p>
    #[doc(hidden)]
    pub device_type: std::option::Option<crate::types::SetDimension>,
    /// <p>The device make criteria for the segment.</p>
    #[doc(hidden)]
    pub make: std::option::Option<crate::types::SetDimension>,
    /// <p>The device model criteria for the segment.</p>
    #[doc(hidden)]
    pub model: std::option::Option<crate::types::SetDimension>,
    /// <p>The device platform criteria for the segment.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<crate::types::SetDimension>,
}
impl SegmentDemographics {
    /// <p>The app version criteria for the segment.</p>
    pub fn app_version(&self) -> std::option::Option<&crate::types::SetDimension> {
        self.app_version.as_ref()
    }
    /// <p>The channel criteria for the segment.</p>
    pub fn channel(&self) -> std::option::Option<&crate::types::SetDimension> {
        self.channel.as_ref()
    }
    /// <p>The device type criteria for the segment.</p>
    pub fn device_type(&self) -> std::option::Option<&crate::types::SetDimension> {
        self.device_type.as_ref()
    }
    /// <p>The device make criteria for the segment.</p>
    pub fn make(&self) -> std::option::Option<&crate::types::SetDimension> {
        self.make.as_ref()
    }
    /// <p>The device model criteria for the segment.</p>
    pub fn model(&self) -> std::option::Option<&crate::types::SetDimension> {
        self.model.as_ref()
    }
    /// <p>The device platform criteria for the segment.</p>
    pub fn platform(&self) -> std::option::Option<&crate::types::SetDimension> {
        self.platform.as_ref()
    }
}
impl SegmentDemographics {
    /// Creates a new builder-style object to manufacture [`SegmentDemographics`](crate::types::SegmentDemographics).
    pub fn builder() -> crate::types::builders::SegmentDemographicsBuilder {
        crate::types::builders::SegmentDemographicsBuilder::default()
    }
}

/// A builder for [`SegmentDemographics`](crate::types::SegmentDemographics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SegmentDemographicsBuilder {
    pub(crate) app_version: std::option::Option<crate::types::SetDimension>,
    pub(crate) channel: std::option::Option<crate::types::SetDimension>,
    pub(crate) device_type: std::option::Option<crate::types::SetDimension>,
    pub(crate) make: std::option::Option<crate::types::SetDimension>,
    pub(crate) model: std::option::Option<crate::types::SetDimension>,
    pub(crate) platform: std::option::Option<crate::types::SetDimension>,
}
impl SegmentDemographicsBuilder {
    /// <p>The app version criteria for the segment.</p>
    pub fn app_version(mut self, input: crate::types::SetDimension) -> Self {
        self.app_version = Some(input);
        self
    }
    /// <p>The app version criteria for the segment.</p>
    pub fn set_app_version(
        mut self,
        input: std::option::Option<crate::types::SetDimension>,
    ) -> Self {
        self.app_version = input;
        self
    }
    /// <p>The channel criteria for the segment.</p>
    pub fn channel(mut self, input: crate::types::SetDimension) -> Self {
        self.channel = Some(input);
        self
    }
    /// <p>The channel criteria for the segment.</p>
    pub fn set_channel(mut self, input: std::option::Option<crate::types::SetDimension>) -> Self {
        self.channel = input;
        self
    }
    /// <p>The device type criteria for the segment.</p>
    pub fn device_type(mut self, input: crate::types::SetDimension) -> Self {
        self.device_type = Some(input);
        self
    }
    /// <p>The device type criteria for the segment.</p>
    pub fn set_device_type(
        mut self,
        input: std::option::Option<crate::types::SetDimension>,
    ) -> Self {
        self.device_type = input;
        self
    }
    /// <p>The device make criteria for the segment.</p>
    pub fn make(mut self, input: crate::types::SetDimension) -> Self {
        self.make = Some(input);
        self
    }
    /// <p>The device make criteria for the segment.</p>
    pub fn set_make(mut self, input: std::option::Option<crate::types::SetDimension>) -> Self {
        self.make = input;
        self
    }
    /// <p>The device model criteria for the segment.</p>
    pub fn model(mut self, input: crate::types::SetDimension) -> Self {
        self.model = Some(input);
        self
    }
    /// <p>The device model criteria for the segment.</p>
    pub fn set_model(mut self, input: std::option::Option<crate::types::SetDimension>) -> Self {
        self.model = input;
        self
    }
    /// <p>The device platform criteria for the segment.</p>
    pub fn platform(mut self, input: crate::types::SetDimension) -> Self {
        self.platform = Some(input);
        self
    }
    /// <p>The device platform criteria for the segment.</p>
    pub fn set_platform(mut self, input: std::option::Option<crate::types::SetDimension>) -> Self {
        self.platform = input;
        self
    }
    /// Consumes the builder and constructs a [`SegmentDemographics`](crate::types::SegmentDemographics).
    pub fn build(self) -> crate::types::SegmentDemographics {
        crate::types::SegmentDemographics {
            app_version: self.app_version,
            channel: self.channel,
            device_type: self.device_type,
            make: self.make,
            model: self.model,
            platform: self.platform,
        }
    }
}
