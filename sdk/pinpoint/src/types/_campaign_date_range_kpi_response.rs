// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the results of a query that retrieved the data for a standard metric that applies to a campaign, and provides information about that query.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CampaignDateRangeKpiResponse {
    /// <p>The unique identifier for the application that the metric applies to.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the campaign that the metric applies to.</p>
    #[doc(hidden)]
    pub campaign_id: std::option::Option<std::string::String>,
    /// <p>The last date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, that the data was retrieved for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. For a list of possible values, see the <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html">Amazon Pinpoint Developer Guide</a>.</p>
    #[doc(hidden)]
    pub kpi_name: std::option::Option<std::string::String>,
    /// <p>An array of objects that contains the results of the query. Each object contains the value for the metric and metadata about that value.</p>
    #[doc(hidden)]
    pub kpi_result: std::option::Option<crate::types::BaseKpiResult>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null for the Campaign Metrics resource because the resource returns all results in a single page.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The first date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl CampaignDateRangeKpiResponse {
    /// <p>The unique identifier for the application that the metric applies to.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier for the campaign that the metric applies to.</p>
    pub fn campaign_id(&self) -> std::option::Option<&str> {
        self.campaign_id.as_deref()
    }
    /// <p>The last date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, that the data was retrieved for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. For a list of possible values, see the <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html">Amazon Pinpoint Developer Guide</a>.</p>
    pub fn kpi_name(&self) -> std::option::Option<&str> {
        self.kpi_name.as_deref()
    }
    /// <p>An array of objects that contains the results of the query. Each object contains the value for the metric and metadata about that value.</p>
    pub fn kpi_result(&self) -> std::option::Option<&crate::types::BaseKpiResult> {
        self.kpi_result.as_ref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null for the Campaign Metrics resource because the resource returns all results in a single page.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The first date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
}
impl CampaignDateRangeKpiResponse {
    /// Creates a new builder-style object to manufacture [`CampaignDateRangeKpiResponse`](crate::types::CampaignDateRangeKpiResponse).
    pub fn builder() -> crate::types::builders::CampaignDateRangeKpiResponseBuilder {
        crate::types::builders::CampaignDateRangeKpiResponseBuilder::default()
    }
}

/// A builder for [`CampaignDateRangeKpiResponse`](crate::types::CampaignDateRangeKpiResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CampaignDateRangeKpiResponseBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) campaign_id: std::option::Option<std::string::String>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) kpi_name: std::option::Option<std::string::String>,
    pub(crate) kpi_result: std::option::Option<crate::types::BaseKpiResult>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl CampaignDateRangeKpiResponseBuilder {
    /// <p>The unique identifier for the application that the metric applies to.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the application that the metric applies to.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier for the campaign that the metric applies to.</p>
    pub fn campaign_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.campaign_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the campaign that the metric applies to.</p>
    pub fn set_campaign_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.campaign_id = input;
        self
    }
    /// <p>The last date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The last date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, that the data was retrieved for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. For a list of possible values, see the <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html">Amazon Pinpoint Developer Guide</a>.</p>
    pub fn kpi_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.kpi_name = Some(input.into());
        self
    }
    /// <p>The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, that the data was retrieved for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. For a list of possible values, see the <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html">Amazon Pinpoint Developer Guide</a>.</p>
    pub fn set_kpi_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kpi_name = input;
        self
    }
    /// <p>An array of objects that contains the results of the query. Each object contains the value for the metric and metadata about that value.</p>
    pub fn kpi_result(mut self, input: crate::types::BaseKpiResult) -> Self {
        self.kpi_result = Some(input);
        self
    }
    /// <p>An array of objects that contains the results of the query. Each object contains the value for the metric and metadata about that value.</p>
    pub fn set_kpi_result(
        mut self,
        input: std::option::Option<crate::types::BaseKpiResult>,
    ) -> Self {
        self.kpi_result = input;
        self
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null for the Campaign Metrics resource because the resource returns all results in a single page.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null for the Campaign Metrics resource because the resource returns all results in a single page.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The first date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The first date and time of the date range that was used to filter the query results, in extended ISO 8601 format. The date range is inclusive.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// Consumes the builder and constructs a [`CampaignDateRangeKpiResponse`](crate::types::CampaignDateRangeKpiResponse).
    pub fn build(self) -> crate::types::CampaignDateRangeKpiResponse {
        crate::types::CampaignDateRangeKpiResponse {
            application_id: self.application_id,
            campaign_id: self.campaign_id,
            end_time: self.end_time,
            kpi_name: self.kpi_name,
            kpi_result: self.kpi_result,
            next_token: self.next_token,
            start_time: self.start_time,
        }
    }
}
