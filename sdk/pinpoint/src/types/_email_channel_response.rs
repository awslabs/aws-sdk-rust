// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the status and settings of the email channel for an application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EmailChannelResponse {
    /// <p>The unique identifier for the application that the email channel applies to.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/ses/latest/APIReference/API_ConfigurationSet.html">Amazon SES configuration set</a> that's applied to messages that are sent through the channel.</p>
    #[doc(hidden)]
    pub configuration_set: std::option::Option<std::string::String>,
    /// <p>The date and time, in ISO 8601 format, when the email channel was enabled.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<std::string::String>,
    /// <p>Specifies whether the email channel is enabled for the application.</p>
    #[doc(hidden)]
    pub enabled: bool,
    /// <p>The verified email address that email is sent from when you send email through the channel.</p>
    #[doc(hidden)]
    pub from_address: std::option::Option<std::string::String>,
    /// <p>(Not used) This property is retained only for backward compatibility.</p>
    #[doc(hidden)]
    pub has_credential: bool,
    /// <p>(Deprecated) An identifier for the email channel. This property is retained only for backward compatibility.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the identity, verified with Amazon Simple Email Service (Amazon SES), that's used when you send email through the channel.</p>
    #[doc(hidden)]
    pub identity: std::option::Option<std::string::String>,
    /// <p>Specifies whether the email channel is archived.</p>
    #[doc(hidden)]
    pub is_archived: bool,
    /// <p>The user who last modified the email channel.</p>
    #[doc(hidden)]
    pub last_modified_by: std::option::Option<std::string::String>,
    /// <p>The date and time, in ISO 8601 format, when the email channel was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<std::string::String>,
    /// <p>The maximum number of emails that can be sent through the channel each second.</p>
    #[doc(hidden)]
    pub messages_per_second: i32,
    /// <p>The type of messaging or notification platform for the channel. For the email channel, this value is EMAIL.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<std::string::String>,
    /// <p>The ARN of the AWS Identity and Access Management (IAM) role that Amazon Pinpoint uses to submit email-related event data for the channel.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The current version of the email channel.</p>
    #[doc(hidden)]
    pub version: i32,
}
impl EmailChannelResponse {
    /// <p>The unique identifier for the application that the email channel applies to.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/ses/latest/APIReference/API_ConfigurationSet.html">Amazon SES configuration set</a> that's applied to messages that are sent through the channel.</p>
    pub fn configuration_set(&self) -> std::option::Option<&str> {
        self.configuration_set.as_deref()
    }
    /// <p>The date and time, in ISO 8601 format, when the email channel was enabled.</p>
    pub fn creation_date(&self) -> std::option::Option<&str> {
        self.creation_date.as_deref()
    }
    /// <p>Specifies whether the email channel is enabled for the application.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The verified email address that email is sent from when you send email through the channel.</p>
    pub fn from_address(&self) -> std::option::Option<&str> {
        self.from_address.as_deref()
    }
    /// <p>(Not used) This property is retained only for backward compatibility.</p>
    pub fn has_credential(&self) -> bool {
        self.has_credential
    }
    /// <p>(Deprecated) An identifier for the email channel. This property is retained only for backward compatibility.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the identity, verified with Amazon Simple Email Service (Amazon SES), that's used when you send email through the channel.</p>
    pub fn identity(&self) -> std::option::Option<&str> {
        self.identity.as_deref()
    }
    /// <p>Specifies whether the email channel is archived.</p>
    pub fn is_archived(&self) -> bool {
        self.is_archived
    }
    /// <p>The user who last modified the email channel.</p>
    pub fn last_modified_by(&self) -> std::option::Option<&str> {
        self.last_modified_by.as_deref()
    }
    /// <p>The date and time, in ISO 8601 format, when the email channel was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<&str> {
        self.last_modified_date.as_deref()
    }
    /// <p>The maximum number of emails that can be sent through the channel each second.</p>
    pub fn messages_per_second(&self) -> i32 {
        self.messages_per_second
    }
    /// <p>The type of messaging or notification platform for the channel. For the email channel, this value is EMAIL.</p>
    pub fn platform(&self) -> std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>The ARN of the AWS Identity and Access Management (IAM) role that Amazon Pinpoint uses to submit email-related event data for the channel.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The current version of the email channel.</p>
    pub fn version(&self) -> i32 {
        self.version
    }
}
impl EmailChannelResponse {
    /// Creates a new builder-style object to manufacture [`EmailChannelResponse`](crate::types::EmailChannelResponse).
    pub fn builder() -> crate::types::builders::EmailChannelResponseBuilder {
        crate::types::builders::EmailChannelResponseBuilder::default()
    }
}

/// A builder for [`EmailChannelResponse`](crate::types::EmailChannelResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EmailChannelResponseBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) configuration_set: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<std::string::String>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) from_address: std::option::Option<std::string::String>,
    pub(crate) has_credential: std::option::Option<bool>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) identity: std::option::Option<std::string::String>,
    pub(crate) is_archived: std::option::Option<bool>,
    pub(crate) last_modified_by: std::option::Option<std::string::String>,
    pub(crate) last_modified_date: std::option::Option<std::string::String>,
    pub(crate) messages_per_second: std::option::Option<i32>,
    pub(crate) platform: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<i32>,
}
impl EmailChannelResponseBuilder {
    /// <p>The unique identifier for the application that the email channel applies to.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the application that the email channel applies to.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/ses/latest/APIReference/API_ConfigurationSet.html">Amazon SES configuration set</a> that's applied to messages that are sent through the channel.</p>
    pub fn configuration_set(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_set = Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/ses/latest/APIReference/API_ConfigurationSet.html">Amazon SES configuration set</a> that's applied to messages that are sent through the channel.</p>
    pub fn set_configuration_set(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_set = input;
        self
    }
    /// <p>The date and time, in ISO 8601 format, when the email channel was enabled.</p>
    pub fn creation_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.creation_date = Some(input.into());
        self
    }
    /// <p>The date and time, in ISO 8601 format, when the email channel was enabled.</p>
    pub fn set_creation_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>Specifies whether the email channel is enabled for the application.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Specifies whether the email channel is enabled for the application.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The verified email address that email is sent from when you send email through the channel.</p>
    pub fn from_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.from_address = Some(input.into());
        self
    }
    /// <p>The verified email address that email is sent from when you send email through the channel.</p>
    pub fn set_from_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.from_address = input;
        self
    }
    /// <p>(Not used) This property is retained only for backward compatibility.</p>
    pub fn has_credential(mut self, input: bool) -> Self {
        self.has_credential = Some(input);
        self
    }
    /// <p>(Not used) This property is retained only for backward compatibility.</p>
    pub fn set_has_credential(mut self, input: std::option::Option<bool>) -> Self {
        self.has_credential = input;
        self
    }
    /// <p>(Deprecated) An identifier for the email channel. This property is retained only for backward compatibility.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>(Deprecated) An identifier for the email channel. This property is retained only for backward compatibility.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the identity, verified with Amazon Simple Email Service (Amazon SES), that's used when you send email through the channel.</p>
    pub fn identity(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the identity, verified with Amazon Simple Email Service (Amazon SES), that's used when you send email through the channel.</p>
    pub fn set_identity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity = input;
        self
    }
    /// <p>Specifies whether the email channel is archived.</p>
    pub fn is_archived(mut self, input: bool) -> Self {
        self.is_archived = Some(input);
        self
    }
    /// <p>Specifies whether the email channel is archived.</p>
    pub fn set_is_archived(mut self, input: std::option::Option<bool>) -> Self {
        self.is_archived = input;
        self
    }
    /// <p>The user who last modified the email channel.</p>
    pub fn last_modified_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_modified_by = Some(input.into());
        self
    }
    /// <p>The user who last modified the email channel.</p>
    pub fn set_last_modified_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_modified_by = input;
        self
    }
    /// <p>The date and time, in ISO 8601 format, when the email channel was last modified.</p>
    pub fn last_modified_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_modified_date = Some(input.into());
        self
    }
    /// <p>The date and time, in ISO 8601 format, when the email channel was last modified.</p>
    pub fn set_last_modified_date(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The maximum number of emails that can be sent through the channel each second.</p>
    pub fn messages_per_second(mut self, input: i32) -> Self {
        self.messages_per_second = Some(input);
        self
    }
    /// <p>The maximum number of emails that can be sent through the channel each second.</p>
    pub fn set_messages_per_second(mut self, input: std::option::Option<i32>) -> Self {
        self.messages_per_second = input;
        self
    }
    /// <p>The type of messaging or notification platform for the channel. For the email channel, this value is EMAIL.</p>
    pub fn platform(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform = Some(input.into());
        self
    }
    /// <p>The type of messaging or notification platform for the channel. For the email channel, this value is EMAIL.</p>
    pub fn set_platform(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The ARN of the AWS Identity and Access Management (IAM) role that Amazon Pinpoint uses to submit email-related event data for the channel.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the AWS Identity and Access Management (IAM) role that Amazon Pinpoint uses to submit email-related event data for the channel.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The current version of the email channel.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.version = Some(input);
        self
    }
    /// <p>The current version of the email channel.</p>
    pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`EmailChannelResponse`](crate::types::EmailChannelResponse).
    pub fn build(self) -> crate::types::EmailChannelResponse {
        crate::types::EmailChannelResponse {
            application_id: self.application_id,
            configuration_set: self.configuration_set,
            creation_date: self.creation_date,
            enabled: self.enabled.unwrap_or_default(),
            from_address: self.from_address,
            has_credential: self.has_credential.unwrap_or_default(),
            id: self.id,
            identity: self.identity,
            is_archived: self.is_archived.unwrap_or_default(),
            last_modified_by: self.last_modified_by,
            last_modified_date: self.last_modified_date,
            messages_per_second: self.messages_per_second.unwrap_or_default(),
            platform: self.platform,
            role_arn: self.role_arn,
            version: self.version.unwrap_or_default(),
        }
    }
}
