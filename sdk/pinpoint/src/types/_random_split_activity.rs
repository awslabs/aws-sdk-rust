// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the settings for a random split activity in a journey. This type of activity randomly sends specified percentages of participants down one of as many as five paths in a journey, based on conditions that you specify.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RandomSplitActivity {
    /// <p>The paths for the activity, including the percentage of participants to enter each path and the activity to perform for each path.</p>
    pub branches: ::std::option::Option<::std::vec::Vec<crate::types::RandomSplitEntry>>,
}
impl RandomSplitActivity {
    /// <p>The paths for the activity, including the percentage of participants to enter each path and the activity to perform for each path.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.branches.is_none()`.
    pub fn branches(&self) -> &[crate::types::RandomSplitEntry] {
        self.branches.as_deref().unwrap_or_default()
    }
}
impl RandomSplitActivity {
    /// Creates a new builder-style object to manufacture [`RandomSplitActivity`](crate::types::RandomSplitActivity).
    pub fn builder() -> crate::types::builders::RandomSplitActivityBuilder {
        crate::types::builders::RandomSplitActivityBuilder::default()
    }
}

/// A builder for [`RandomSplitActivity`](crate::types::RandomSplitActivity).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RandomSplitActivityBuilder {
    pub(crate) branches: ::std::option::Option<::std::vec::Vec<crate::types::RandomSplitEntry>>,
}
impl RandomSplitActivityBuilder {
    /// Appends an item to `branches`.
    ///
    /// To override the contents of this collection use [`set_branches`](Self::set_branches).
    ///
    /// <p>The paths for the activity, including the percentage of participants to enter each path and the activity to perform for each path.</p>
    pub fn branches(mut self, input: crate::types::RandomSplitEntry) -> Self {
        let mut v = self.branches.unwrap_or_default();
        v.push(input);
        self.branches = ::std::option::Option::Some(v);
        self
    }
    /// <p>The paths for the activity, including the percentage of participants to enter each path and the activity to perform for each path.</p>
    pub fn set_branches(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RandomSplitEntry>>) -> Self {
        self.branches = input;
        self
    }
    /// <p>The paths for the activity, including the percentage of participants to enter each path and the activity to perform for each path.</p>
    pub fn get_branches(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RandomSplitEntry>> {
        &self.branches
    }
    /// Consumes the builder and constructs a [`RandomSplitActivity`](crate::types::RandomSplitActivity).
    pub fn build(self) -> crate::types::RandomSplitActivity {
        crate::types::RandomSplitActivity { branches: self.branches }
    }
}
