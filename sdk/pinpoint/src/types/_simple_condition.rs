// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a condition to evaluate for an activity in a journey.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SimpleCondition {
    /// <p>The dimension settings for the event that's associated with the activity.</p>
    #[doc(hidden)]
    pub event_condition: std::option::Option<crate::types::EventCondition>,
    /// <p>The segment that's associated with the activity.</p>
    #[doc(hidden)]
    pub segment_condition: std::option::Option<crate::types::SegmentCondition>,
    /// <p>The dimension settings for the segment that's associated with the activity.</p>
    #[doc(hidden)]
    pub segment_dimensions: std::option::Option<crate::types::SegmentDimensions>,
}
impl SimpleCondition {
    /// <p>The dimension settings for the event that's associated with the activity.</p>
    pub fn event_condition(&self) -> std::option::Option<&crate::types::EventCondition> {
        self.event_condition.as_ref()
    }
    /// <p>The segment that's associated with the activity.</p>
    pub fn segment_condition(&self) -> std::option::Option<&crate::types::SegmentCondition> {
        self.segment_condition.as_ref()
    }
    /// <p>The dimension settings for the segment that's associated with the activity.</p>
    pub fn segment_dimensions(&self) -> std::option::Option<&crate::types::SegmentDimensions> {
        self.segment_dimensions.as_ref()
    }
}
impl SimpleCondition {
    /// Creates a new builder-style object to manufacture [`SimpleCondition`](crate::types::SimpleCondition).
    pub fn builder() -> crate::types::builders::SimpleConditionBuilder {
        crate::types::builders::SimpleConditionBuilder::default()
    }
}

/// A builder for [`SimpleCondition`](crate::types::SimpleCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SimpleConditionBuilder {
    pub(crate) event_condition: std::option::Option<crate::types::EventCondition>,
    pub(crate) segment_condition: std::option::Option<crate::types::SegmentCondition>,
    pub(crate) segment_dimensions: std::option::Option<crate::types::SegmentDimensions>,
}
impl SimpleConditionBuilder {
    /// <p>The dimension settings for the event that's associated with the activity.</p>
    pub fn event_condition(mut self, input: crate::types::EventCondition) -> Self {
        self.event_condition = Some(input);
        self
    }
    /// <p>The dimension settings for the event that's associated with the activity.</p>
    pub fn set_event_condition(
        mut self,
        input: std::option::Option<crate::types::EventCondition>,
    ) -> Self {
        self.event_condition = input;
        self
    }
    /// <p>The segment that's associated with the activity.</p>
    pub fn segment_condition(mut self, input: crate::types::SegmentCondition) -> Self {
        self.segment_condition = Some(input);
        self
    }
    /// <p>The segment that's associated with the activity.</p>
    pub fn set_segment_condition(
        mut self,
        input: std::option::Option<crate::types::SegmentCondition>,
    ) -> Self {
        self.segment_condition = input;
        self
    }
    /// <p>The dimension settings for the segment that's associated with the activity.</p>
    pub fn segment_dimensions(mut self, input: crate::types::SegmentDimensions) -> Self {
        self.segment_dimensions = Some(input);
        self
    }
    /// <p>The dimension settings for the segment that's associated with the activity.</p>
    pub fn set_segment_dimensions(
        mut self,
        input: std::option::Option<crate::types::SegmentDimensions>,
    ) -> Self {
        self.segment_dimensions = input;
        self
    }
    /// Consumes the builder and constructs a [`SimpleCondition`](crate::types::SimpleCondition).
    pub fn build(self) -> crate::types::SimpleCondition {
        crate::types::SimpleCondition {
            event_condition: self.event_condition,
            segment_condition: self.segment_condition,
            segment_dimensions: self.segment_dimensions,
        }
    }
}
