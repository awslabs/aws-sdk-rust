// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the status and settings of the SMS channel for an application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SmsChannelRequest {
    /// <p>Specifies whether to enable the SMS channel for the application.</p>
    #[doc(hidden)]
    pub enabled: bool,
    /// <p>The identity that you want to display on recipients' devices when they receive messages from the SMS channel.</p>
    #[doc(hidden)]
    pub sender_id: std::option::Option<std::string::String>,
    /// <p>The registered short code that you want to use when you send messages through the SMS channel.</p>
    #[doc(hidden)]
    pub short_code: std::option::Option<std::string::String>,
}
impl SmsChannelRequest {
    /// <p>Specifies whether to enable the SMS channel for the application.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The identity that you want to display on recipients' devices when they receive messages from the SMS channel.</p>
    pub fn sender_id(&self) -> std::option::Option<&str> {
        self.sender_id.as_deref()
    }
    /// <p>The registered short code that you want to use when you send messages through the SMS channel.</p>
    pub fn short_code(&self) -> std::option::Option<&str> {
        self.short_code.as_deref()
    }
}
impl SmsChannelRequest {
    /// Creates a new builder-style object to manufacture [`SmsChannelRequest`](crate::types::SmsChannelRequest).
    pub fn builder() -> crate::types::builders::SmsChannelRequestBuilder {
        crate::types::builders::SmsChannelRequestBuilder::default()
    }
}

/// A builder for [`SmsChannelRequest`](crate::types::SmsChannelRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SmsChannelRequestBuilder {
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) sender_id: std::option::Option<std::string::String>,
    pub(crate) short_code: std::option::Option<std::string::String>,
}
impl SmsChannelRequestBuilder {
    /// <p>Specifies whether to enable the SMS channel for the application.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Specifies whether to enable the SMS channel for the application.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The identity that you want to display on recipients' devices when they receive messages from the SMS channel.</p>
    pub fn sender_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sender_id = Some(input.into());
        self
    }
    /// <p>The identity that you want to display on recipients' devices when they receive messages from the SMS channel.</p>
    pub fn set_sender_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sender_id = input;
        self
    }
    /// <p>The registered short code that you want to use when you send messages through the SMS channel.</p>
    pub fn short_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.short_code = Some(input.into());
        self
    }
    /// <p>The registered short code that you want to use when you send messages through the SMS channel.</p>
    pub fn set_short_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.short_code = input;
        self
    }
    /// Consumes the builder and constructs a [`SmsChannelRequest`](crate::types::SmsChannelRequest).
    pub fn build(self) -> crate::types::SmsChannelRequest {
        crate::types::SmsChannelRequest {
            enabled: self.enabled.unwrap_or_default(),
            sender_id: self.sender_id,
            short_code: self.short_code,
        }
    }
}
