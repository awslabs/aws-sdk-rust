// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the status and settings of the Baidu (Baidu Cloud Push) channel for an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BaiduChannelRequest {
    /// <p>The API key that you received from the Baidu Cloud Push service to communicate with the service.</p>
    pub api_key: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to enable the Baidu channel for the application.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The secret key that you received from the Baidu Cloud Push service to communicate with the service.</p>
    pub secret_key: ::std::option::Option<::std::string::String>,
}
impl BaiduChannelRequest {
    /// <p>The API key that you received from the Baidu Cloud Push service to communicate with the service.</p>
    pub fn api_key(&self) -> ::std::option::Option<&str> {
        self.api_key.as_deref()
    }
    /// <p>Specifies whether to enable the Baidu channel for the application.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The secret key that you received from the Baidu Cloud Push service to communicate with the service.</p>
    pub fn secret_key(&self) -> ::std::option::Option<&str> {
        self.secret_key.as_deref()
    }
}
impl BaiduChannelRequest {
    /// Creates a new builder-style object to manufacture [`BaiduChannelRequest`](crate::types::BaiduChannelRequest).
    pub fn builder() -> crate::types::builders::BaiduChannelRequestBuilder {
        crate::types::builders::BaiduChannelRequestBuilder::default()
    }
}

/// A builder for [`BaiduChannelRequest`](crate::types::BaiduChannelRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BaiduChannelRequestBuilder {
    pub(crate) api_key: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) secret_key: ::std::option::Option<::std::string::String>,
}
impl BaiduChannelRequestBuilder {
    /// <p>The API key that you received from the Baidu Cloud Push service to communicate with the service.</p>
    /// This field is required.
    pub fn api_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The API key that you received from the Baidu Cloud Push service to communicate with the service.</p>
    pub fn set_api_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_key = input;
        self
    }
    /// <p>The API key that you received from the Baidu Cloud Push service to communicate with the service.</p>
    pub fn get_api_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_key
    }
    /// <p>Specifies whether to enable the Baidu channel for the application.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable the Baidu channel for the application.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether to enable the Baidu channel for the application.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The secret key that you received from the Baidu Cloud Push service to communicate with the service.</p>
    /// This field is required.
    pub fn secret_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The secret key that you received from the Baidu Cloud Push service to communicate with the service.</p>
    pub fn set_secret_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_key = input;
        self
    }
    /// <p>The secret key that you received from the Baidu Cloud Push service to communicate with the service.</p>
    pub fn get_secret_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_key
    }
    /// Consumes the builder and constructs a [`BaiduChannelRequest`](crate::types::BaiduChannelRequest).
    pub fn build(self) -> crate::types::BaiduChannelRequest {
        crate::types::BaiduChannelRequest {
            api_key: self.api_key,
            enabled: self.enabled,
            secret_key: self.secret_key,
        }
    }
}
