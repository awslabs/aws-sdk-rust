// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the status and settings of the APNs (Apple Push Notification service) VoIP channel for an application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApnsVoipChannelRequest {
    /// <p>The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.</p>
    #[doc(hidden)]
    pub bundle_id: std::option::Option<std::string::String>,
    /// <p>The APNs client certificate that you received from Apple, if you want Amazon Pinpoint to communicate with APNs by using an APNs certificate.</p>
    #[doc(hidden)]
    pub certificate: std::option::Option<std::string::String>,
    /// <p>The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs, key or certificate.</p>
    #[doc(hidden)]
    pub default_authentication_method: std::option::Option<std::string::String>,
    /// <p>Specifies whether to enable the APNs VoIP channel for the application.</p>
    #[doc(hidden)]
    pub enabled: bool,
    /// <p>The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with APNs.</p>
    #[doc(hidden)]
    pub private_key: std::option::Option<std::string::String>,
    /// <p>The identifier that's assigned to your Apple developer account team. This identifier is used for APNs tokens.</p>
    #[doc(hidden)]
    pub team_id: std::option::Option<std::string::String>,
    /// <p>The authentication key to use for APNs tokens.</p>
    #[doc(hidden)]
    pub token_key: std::option::Option<std::string::String>,
    /// <p>The key identifier that's assigned to your APNs signing key, if you want Amazon Pinpoint to communicate with APNs by using APNs tokens.</p>
    #[doc(hidden)]
    pub token_key_id: std::option::Option<std::string::String>,
}
impl ApnsVoipChannelRequest {
    /// <p>The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.</p>
    pub fn bundle_id(&self) -> std::option::Option<&str> {
        self.bundle_id.as_deref()
    }
    /// <p>The APNs client certificate that you received from Apple, if you want Amazon Pinpoint to communicate with APNs by using an APNs certificate.</p>
    pub fn certificate(&self) -> std::option::Option<&str> {
        self.certificate.as_deref()
    }
    /// <p>The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs, key or certificate.</p>
    pub fn default_authentication_method(&self) -> std::option::Option<&str> {
        self.default_authentication_method.as_deref()
    }
    /// <p>Specifies whether to enable the APNs VoIP channel for the application.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with APNs.</p>
    pub fn private_key(&self) -> std::option::Option<&str> {
        self.private_key.as_deref()
    }
    /// <p>The identifier that's assigned to your Apple developer account team. This identifier is used for APNs tokens.</p>
    pub fn team_id(&self) -> std::option::Option<&str> {
        self.team_id.as_deref()
    }
    /// <p>The authentication key to use for APNs tokens.</p>
    pub fn token_key(&self) -> std::option::Option<&str> {
        self.token_key.as_deref()
    }
    /// <p>The key identifier that's assigned to your APNs signing key, if you want Amazon Pinpoint to communicate with APNs by using APNs tokens.</p>
    pub fn token_key_id(&self) -> std::option::Option<&str> {
        self.token_key_id.as_deref()
    }
}
impl ApnsVoipChannelRequest {
    /// Creates a new builder-style object to manufacture [`ApnsVoipChannelRequest`](crate::types::ApnsVoipChannelRequest).
    pub fn builder() -> crate::types::builders::ApnsVoipChannelRequestBuilder {
        crate::types::builders::ApnsVoipChannelRequestBuilder::default()
    }
}

/// A builder for [`ApnsVoipChannelRequest`](crate::types::ApnsVoipChannelRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApnsVoipChannelRequestBuilder {
    pub(crate) bundle_id: std::option::Option<std::string::String>,
    pub(crate) certificate: std::option::Option<std::string::String>,
    pub(crate) default_authentication_method: std::option::Option<std::string::String>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) private_key: std::option::Option<std::string::String>,
    pub(crate) team_id: std::option::Option<std::string::String>,
    pub(crate) token_key: std::option::Option<std::string::String>,
    pub(crate) token_key_id: std::option::Option<std::string::String>,
}
impl ApnsVoipChannelRequestBuilder {
    /// <p>The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.</p>
    pub fn bundle_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bundle_id = Some(input.into());
        self
    }
    /// <p>The bundle identifier that's assigned to your iOS app. This identifier is used for APNs tokens.</p>
    pub fn set_bundle_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p>The APNs client certificate that you received from Apple, if you want Amazon Pinpoint to communicate with APNs by using an APNs certificate.</p>
    pub fn certificate(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate = Some(input.into());
        self
    }
    /// <p>The APNs client certificate that you received from Apple, if you want Amazon Pinpoint to communicate with APNs by using an APNs certificate.</p>
    pub fn set_certificate(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate = input;
        self
    }
    /// <p>The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs, key or certificate.</p>
    pub fn default_authentication_method(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_authentication_method = Some(input.into());
        self
    }
    /// <p>The default authentication method that you want Amazon Pinpoint to use when authenticating with APNs, key or certificate.</p>
    pub fn set_default_authentication_method(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_authentication_method = input;
        self
    }
    /// <p>Specifies whether to enable the APNs VoIP channel for the application.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Specifies whether to enable the APNs VoIP channel for the application.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with APNs.</p>
    pub fn private_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_key = Some(input.into());
        self
    }
    /// <p>The private key for the APNs client certificate that you want Amazon Pinpoint to use to communicate with APNs.</p>
    pub fn set_private_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.private_key = input;
        self
    }
    /// <p>The identifier that's assigned to your Apple developer account team. This identifier is used for APNs tokens.</p>
    pub fn team_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.team_id = Some(input.into());
        self
    }
    /// <p>The identifier that's assigned to your Apple developer account team. This identifier is used for APNs tokens.</p>
    pub fn set_team_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.team_id = input;
        self
    }
    /// <p>The authentication key to use for APNs tokens.</p>
    pub fn token_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.token_key = Some(input.into());
        self
    }
    /// <p>The authentication key to use for APNs tokens.</p>
    pub fn set_token_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.token_key = input;
        self
    }
    /// <p>The key identifier that's assigned to your APNs signing key, if you want Amazon Pinpoint to communicate with APNs by using APNs tokens.</p>
    pub fn token_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.token_key_id = Some(input.into());
        self
    }
    /// <p>The key identifier that's assigned to your APNs signing key, if you want Amazon Pinpoint to communicate with APNs by using APNs tokens.</p>
    pub fn set_token_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.token_key_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ApnsVoipChannelRequest`](crate::types::ApnsVoipChannelRequest).
    pub fn build(self) -> crate::types::ApnsVoipChannelRequest {
        crate::types::ApnsVoipChannelRequest {
            bundle_id: self.bundle_id,
            certificate: self.certificate,
            default_authentication_method: self.default_authentication_method,
            enabled: self.enabled.unwrap_or_default(),
            private_key: self.private_key,
            team_id: self.team_id,
            token_key: self.token_key,
            token_key_id: self.token_key_id,
        }
    }
}
