// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies GPS-based criteria for including or excluding endpoints from a segment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GpsPointDimension {
    /// <p>The GPS coordinates to measure distance from.</p>
    #[doc(hidden)]
    pub coordinates: std::option::Option<crate::types::GpsCoordinates>,
    /// <p>The range, in kilometers, from the GPS coordinates.</p>
    #[doc(hidden)]
    pub range_in_kilometers: f64,
}
impl GpsPointDimension {
    /// <p>The GPS coordinates to measure distance from.</p>
    pub fn coordinates(&self) -> std::option::Option<&crate::types::GpsCoordinates> {
        self.coordinates.as_ref()
    }
    /// <p>The range, in kilometers, from the GPS coordinates.</p>
    pub fn range_in_kilometers(&self) -> f64 {
        self.range_in_kilometers
    }
}
impl GpsPointDimension {
    /// Creates a new builder-style object to manufacture [`GpsPointDimension`](crate::types::GpsPointDimension).
    pub fn builder() -> crate::types::builders::GpsPointDimensionBuilder {
        crate::types::builders::GpsPointDimensionBuilder::default()
    }
}

/// A builder for [`GpsPointDimension`](crate::types::GpsPointDimension).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GpsPointDimensionBuilder {
    pub(crate) coordinates: std::option::Option<crate::types::GpsCoordinates>,
    pub(crate) range_in_kilometers: std::option::Option<f64>,
}
impl GpsPointDimensionBuilder {
    /// <p>The GPS coordinates to measure distance from.</p>
    pub fn coordinates(mut self, input: crate::types::GpsCoordinates) -> Self {
        self.coordinates = Some(input);
        self
    }
    /// <p>The GPS coordinates to measure distance from.</p>
    pub fn set_coordinates(
        mut self,
        input: std::option::Option<crate::types::GpsCoordinates>,
    ) -> Self {
        self.coordinates = input;
        self
    }
    /// <p>The range, in kilometers, from the GPS coordinates.</p>
    pub fn range_in_kilometers(mut self, input: f64) -> Self {
        self.range_in_kilometers = Some(input);
        self
    }
    /// <p>The range, in kilometers, from the GPS coordinates.</p>
    pub fn set_range_in_kilometers(mut self, input: std::option::Option<f64>) -> Self {
        self.range_in_kilometers = input;
        self
    }
    /// Consumes the builder and constructs a [`GpsPointDimension`](crate::types::GpsPointDimension).
    pub fn build(self) -> crate::types::GpsPointDimension {
        crate::types::GpsPointDimension {
            coordinates: self.coordinates,
            range_in_kilometers: self.range_in_kilometers.unwrap_or_default(),
        }
    }
}
