// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an endpoint to create or update and the settings and attributes to set or change for the endpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EndpointBatchItem {
    /// <p>The destination address for messages or push notifications that you send to the endpoint. The address varies by channel. For a push-notification channel, use the token provided by the push notification service, such as an Apple Push Notification service (APNs) device token or a Firebase Cloud Messaging (FCM) registration token. For the SMS channel, use a phone number in E.164 format, such as +12065550100. For the email channel, use an email address.</p>
    #[doc(hidden)]
    pub address: std::option::Option<std::string::String>,
    /// <p>One or more custom attributes that describe the endpoint by associating a name with an array of values. For example, the value of a custom attribute named Interests might be: ["Science", "Music", "Travel"]. You can use these attributes as filter criteria when you create segments. Attribute names are case sensitive.</p>
    /// <p>An attribute name can contain up to 50 characters. An attribute value can contain up to 100 characters. When you define the name of a custom attribute, avoid using the following characters: number sign (#), colon (:), question mark (?), backslash (\), and slash (/). The Amazon Pinpoint console can't display attribute names that contain these characters. This restriction doesn't apply to attribute values.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    /// <p>The channel to use when sending messages or push notifications to the endpoint.</p>
    #[doc(hidden)]
    pub channel_type: std::option::Option<crate::types::ChannelType>,
    /// <p>The demographic information for the endpoint, such as the time zone and platform.</p>
    #[doc(hidden)]
    pub demographic: std::option::Option<crate::types::EndpointDemographic>,
    /// <p>The date and time, in ISO 8601 format, when the endpoint was created or updated.</p>
    #[doc(hidden)]
    pub effective_date: std::option::Option<std::string::String>,
    /// <p>Specifies whether to send messages or push notifications to the endpoint. Valid values are: ACTIVE, messages are sent to the endpoint; and, INACTIVE, messages aren’t sent to the endpoint.</p>
    /// <p>Amazon Pinpoint automatically sets this value to ACTIVE when you create an endpoint or update an existing endpoint. Amazon Pinpoint automatically sets this value to INACTIVE if you update another endpoint that has the same address specified by the Address property.</p>
    #[doc(hidden)]
    pub endpoint_status: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the endpoint in the context of the batch.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The geographic information for the endpoint.</p>
    #[doc(hidden)]
    pub location: std::option::Option<crate::types::EndpointLocation>,
    /// <p>One or more custom metrics that your app reports to Amazon Pinpoint for the endpoint.</p>
    #[doc(hidden)]
    pub metrics: std::option::Option<std::collections::HashMap<std::string::String, f64>>,
    /// <p>Specifies whether the user who's associated with the endpoint has opted out of receiving messages and push notifications from you. Possible values are: ALL, the user has opted out and doesn't want to receive any messages or push notifications; and, NONE, the user hasn't opted out and wants to receive all messages and push notifications.</p>
    #[doc(hidden)]
    pub opt_out: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the request to create or update the endpoint.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    /// <p>One or more custom attributes that describe the user who's associated with the endpoint.</p>
    #[doc(hidden)]
    pub user: std::option::Option<crate::types::EndpointUser>,
}
impl EndpointBatchItem {
    /// <p>The destination address for messages or push notifications that you send to the endpoint. The address varies by channel. For a push-notification channel, use the token provided by the push notification service, such as an Apple Push Notification service (APNs) device token or a Firebase Cloud Messaging (FCM) registration token. For the SMS channel, use a phone number in E.164 format, such as +12065550100. For the email channel, use an email address.</p>
    pub fn address(&self) -> std::option::Option<&str> {
        self.address.as_deref()
    }
    /// <p>One or more custom attributes that describe the endpoint by associating a name with an array of values. For example, the value of a custom attribute named Interests might be: ["Science", "Music", "Travel"]. You can use these attributes as filter criteria when you create segments. Attribute names are case sensitive.</p>
    /// <p>An attribute name can contain up to 50 characters. An attribute value can contain up to 100 characters. When you define the name of a custom attribute, avoid using the following characters: number sign (#), colon (:), question mark (?), backslash (\), and slash (/). The Amazon Pinpoint console can't display attribute names that contain these characters. This restriction doesn't apply to attribute values.</p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.attributes.as_ref()
    }
    /// <p>The channel to use when sending messages or push notifications to the endpoint.</p>
    pub fn channel_type(&self) -> std::option::Option<&crate::types::ChannelType> {
        self.channel_type.as_ref()
    }
    /// <p>The demographic information for the endpoint, such as the time zone and platform.</p>
    pub fn demographic(&self) -> std::option::Option<&crate::types::EndpointDemographic> {
        self.demographic.as_ref()
    }
    /// <p>The date and time, in ISO 8601 format, when the endpoint was created or updated.</p>
    pub fn effective_date(&self) -> std::option::Option<&str> {
        self.effective_date.as_deref()
    }
    /// <p>Specifies whether to send messages or push notifications to the endpoint. Valid values are: ACTIVE, messages are sent to the endpoint; and, INACTIVE, messages aren’t sent to the endpoint.</p>
    /// <p>Amazon Pinpoint automatically sets this value to ACTIVE when you create an endpoint or update an existing endpoint. Amazon Pinpoint automatically sets this value to INACTIVE if you update another endpoint that has the same address specified by the Address property.</p>
    pub fn endpoint_status(&self) -> std::option::Option<&str> {
        self.endpoint_status.as_deref()
    }
    /// <p>The unique identifier for the endpoint in the context of the batch.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The geographic information for the endpoint.</p>
    pub fn location(&self) -> std::option::Option<&crate::types::EndpointLocation> {
        self.location.as_ref()
    }
    /// <p>One or more custom metrics that your app reports to Amazon Pinpoint for the endpoint.</p>
    pub fn metrics(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, f64>> {
        self.metrics.as_ref()
    }
    /// <p>Specifies whether the user who's associated with the endpoint has opted out of receiving messages and push notifications from you. Possible values are: ALL, the user has opted out and doesn't want to receive any messages or push notifications; and, NONE, the user hasn't opted out and wants to receive all messages and push notifications.</p>
    pub fn opt_out(&self) -> std::option::Option<&str> {
        self.opt_out.as_deref()
    }
    /// <p>The unique identifier for the request to create or update the endpoint.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>One or more custom attributes that describe the user who's associated with the endpoint.</p>
    pub fn user(&self) -> std::option::Option<&crate::types::EndpointUser> {
        self.user.as_ref()
    }
}
impl EndpointBatchItem {
    /// Creates a new builder-style object to manufacture [`EndpointBatchItem`](crate::types::EndpointBatchItem).
    pub fn builder() -> crate::types::builders::EndpointBatchItemBuilder {
        crate::types::builders::EndpointBatchItemBuilder::default()
    }
}

/// A builder for [`EndpointBatchItem`](crate::types::EndpointBatchItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EndpointBatchItemBuilder {
    pub(crate) address: std::option::Option<std::string::String>,
    pub(crate) attributes: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    pub(crate) channel_type: std::option::Option<crate::types::ChannelType>,
    pub(crate) demographic: std::option::Option<crate::types::EndpointDemographic>,
    pub(crate) effective_date: std::option::Option<std::string::String>,
    pub(crate) endpoint_status: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) location: std::option::Option<crate::types::EndpointLocation>,
    pub(crate) metrics: std::option::Option<std::collections::HashMap<std::string::String, f64>>,
    pub(crate) opt_out: std::option::Option<std::string::String>,
    pub(crate) request_id: std::option::Option<std::string::String>,
    pub(crate) user: std::option::Option<crate::types::EndpointUser>,
}
impl EndpointBatchItemBuilder {
    /// <p>The destination address for messages or push notifications that you send to the endpoint. The address varies by channel. For a push-notification channel, use the token provided by the push notification service, such as an Apple Push Notification service (APNs) device token or a Firebase Cloud Messaging (FCM) registration token. For the SMS channel, use a phone number in E.164 format, such as +12065550100. For the email channel, use an email address.</p>
    pub fn address(mut self, input: impl Into<std::string::String>) -> Self {
        self.address = Some(input.into());
        self
    }
    /// <p>The destination address for messages or push notifications that you send to the endpoint. The address varies by channel. For a push-notification channel, use the token provided by the push notification service, such as an Apple Push Notification service (APNs) device token or a Firebase Cloud Messaging (FCM) registration token. For the SMS channel, use a phone number in E.164 format, such as +12065550100. For the email channel, use an email address.</p>
    pub fn set_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.address = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>One or more custom attributes that describe the endpoint by associating a name with an array of values. For example, the value of a custom attribute named Interests might be: ["Science", "Music", "Travel"]. You can use these attributes as filter criteria when you create segments. Attribute names are case sensitive.</p>
    /// <p>An attribute name can contain up to 50 characters. An attribute value can contain up to 100 characters. When you define the name of a custom attribute, avoid using the following characters: number sign (#), colon (:), question mark (?), backslash (\), and slash (/). The Amazon Pinpoint console can't display attribute names that contain these characters. This restriction doesn't apply to attribute values.</p>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.attributes = Some(hash_map);
        self
    }
    /// <p>One or more custom attributes that describe the endpoint by associating a name with an array of values. For example, the value of a custom attribute named Interests might be: ["Science", "Music", "Travel"]. You can use these attributes as filter criteria when you create segments. Attribute names are case sensitive.</p>
    /// <p>An attribute name can contain up to 50 characters. An attribute value can contain up to 100 characters. When you define the name of a custom attribute, avoid using the following characters: number sign (#), colon (:), question mark (?), backslash (\), and slash (/). The Amazon Pinpoint console can't display attribute names that contain these characters. This restriction doesn't apply to attribute values.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The channel to use when sending messages or push notifications to the endpoint.</p>
    pub fn channel_type(mut self, input: crate::types::ChannelType) -> Self {
        self.channel_type = Some(input);
        self
    }
    /// <p>The channel to use when sending messages or push notifications to the endpoint.</p>
    pub fn set_channel_type(
        mut self,
        input: std::option::Option<crate::types::ChannelType>,
    ) -> Self {
        self.channel_type = input;
        self
    }
    /// <p>The demographic information for the endpoint, such as the time zone and platform.</p>
    pub fn demographic(mut self, input: crate::types::EndpointDemographic) -> Self {
        self.demographic = Some(input);
        self
    }
    /// <p>The demographic information for the endpoint, such as the time zone and platform.</p>
    pub fn set_demographic(
        mut self,
        input: std::option::Option<crate::types::EndpointDemographic>,
    ) -> Self {
        self.demographic = input;
        self
    }
    /// <p>The date and time, in ISO 8601 format, when the endpoint was created or updated.</p>
    pub fn effective_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.effective_date = Some(input.into());
        self
    }
    /// <p>The date and time, in ISO 8601 format, when the endpoint was created or updated.</p>
    pub fn set_effective_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.effective_date = input;
        self
    }
    /// <p>Specifies whether to send messages or push notifications to the endpoint. Valid values are: ACTIVE, messages are sent to the endpoint; and, INACTIVE, messages aren’t sent to the endpoint.</p>
    /// <p>Amazon Pinpoint automatically sets this value to ACTIVE when you create an endpoint or update an existing endpoint. Amazon Pinpoint automatically sets this value to INACTIVE if you update another endpoint that has the same address specified by the Address property.</p>
    pub fn endpoint_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_status = Some(input.into());
        self
    }
    /// <p>Specifies whether to send messages or push notifications to the endpoint. Valid values are: ACTIVE, messages are sent to the endpoint; and, INACTIVE, messages aren’t sent to the endpoint.</p>
    /// <p>Amazon Pinpoint automatically sets this value to ACTIVE when you create an endpoint or update an existing endpoint. Amazon Pinpoint automatically sets this value to INACTIVE if you update another endpoint that has the same address specified by the Address property.</p>
    pub fn set_endpoint_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint_status = input;
        self
    }
    /// <p>The unique identifier for the endpoint in the context of the batch.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the endpoint in the context of the batch.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The geographic information for the endpoint.</p>
    pub fn location(mut self, input: crate::types::EndpointLocation) -> Self {
        self.location = Some(input);
        self
    }
    /// <p>The geographic information for the endpoint.</p>
    pub fn set_location(
        mut self,
        input: std::option::Option<crate::types::EndpointLocation>,
    ) -> Self {
        self.location = input;
        self
    }
    /// Adds a key-value pair to `metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>One or more custom metrics that your app reports to Amazon Pinpoint for the endpoint.</p>
    pub fn metrics(mut self, k: impl Into<std::string::String>, v: f64) -> Self {
        let mut hash_map = self.metrics.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.metrics = Some(hash_map);
        self
    }
    /// <p>One or more custom metrics that your app reports to Amazon Pinpoint for the endpoint.</p>
    pub fn set_metrics(
        mut self,
        input: std::option::Option<std::collections::HashMap<std::string::String, f64>>,
    ) -> Self {
        self.metrics = input;
        self
    }
    /// <p>Specifies whether the user who's associated with the endpoint has opted out of receiving messages and push notifications from you. Possible values are: ALL, the user has opted out and doesn't want to receive any messages or push notifications; and, NONE, the user hasn't opted out and wants to receive all messages and push notifications.</p>
    pub fn opt_out(mut self, input: impl Into<std::string::String>) -> Self {
        self.opt_out = Some(input.into());
        self
    }
    /// <p>Specifies whether the user who's associated with the endpoint has opted out of receiving messages and push notifications from you. Possible values are: ALL, the user has opted out and doesn't want to receive any messages or push notifications; and, NONE, the user hasn't opted out and wants to receive all messages and push notifications.</p>
    pub fn set_opt_out(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.opt_out = input;
        self
    }
    /// <p>The unique identifier for the request to create or update the endpoint.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the request to create or update the endpoint.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>One or more custom attributes that describe the user who's associated with the endpoint.</p>
    pub fn user(mut self, input: crate::types::EndpointUser) -> Self {
        self.user = Some(input);
        self
    }
    /// <p>One or more custom attributes that describe the user who's associated with the endpoint.</p>
    pub fn set_user(mut self, input: std::option::Option<crate::types::EndpointUser>) -> Self {
        self.user = input;
        self
    }
    /// Consumes the builder and constructs a [`EndpointBatchItem`](crate::types::EndpointBatchItem).
    pub fn build(self) -> crate::types::EndpointBatchItem {
        crate::types::EndpointBatchItem {
            address: self.address,
            attributes: self.attributes,
            channel_type: self.channel_type,
            demographic: self.demographic,
            effective_date: self.effective_date,
            endpoint_status: self.endpoint_status,
            id: self.id,
            location: self.location,
            metrics: self.metrics,
            opt_out: self.opt_out,
            request_id: self.request_id,
            user: self.user,
        }
    }
}
