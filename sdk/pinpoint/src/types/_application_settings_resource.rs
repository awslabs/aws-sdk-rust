// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about an application, including the default settings for an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationSettingsResource {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The settings for the AWS Lambda function to invoke by default as a code hook for campaigns in the application. You can use this hook to customize segments that are used by campaigns in the application.</p>
    pub campaign_hook: ::std::option::Option<crate::types::CampaignHook>,
    /// <p>The date and time, in ISO 8601 format, when the application's settings were last modified.</p>
    pub last_modified_date: ::std::option::Option<::std::string::String>,
    /// <p>The default sending limits for campaigns in the application.</p>
    pub limits: ::std::option::Option<crate::types::CampaignLimits>,
    /// <p>The default quiet time for campaigns in the application. Quiet time is a specific time range when messages aren't sent to endpoints, if all the following conditions are met:</p>
    /// <ul>
    /// <li><p>The EndpointDemographic.Timezone property of the endpoint is set to a valid value.</p></li>
    /// <li><p>The current time in the endpoint's time zone is later than or equal to the time specified by the QuietTime.Start property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// <li><p>The current time in the endpoint's time zone is earlier than or equal to the time specified by the QuietTime.End property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// </ul>
    /// <p>If any of the preceding conditions isn't met, the endpoint will receive messages from a campaign or journey, even if quiet time is enabled.</p>
    pub quiet_time: ::std::option::Option<crate::types::QuietTime>,
    /// <p>The default sending limits for journeys in the application. These limits apply to each journey for the application but can be overridden, on a per journey basis, with the JourneyLimits resource.</p>
    pub journey_limits: ::std::option::Option<crate::types::ApplicationSettingsJourneyLimits>,
}
impl ApplicationSettingsResource {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The settings for the AWS Lambda function to invoke by default as a code hook for campaigns in the application. You can use this hook to customize segments that are used by campaigns in the application.</p>
    pub fn campaign_hook(&self) -> ::std::option::Option<&crate::types::CampaignHook> {
        self.campaign_hook.as_ref()
    }
    /// <p>The date and time, in ISO 8601 format, when the application's settings were last modified.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&str> {
        self.last_modified_date.as_deref()
    }
    /// <p>The default sending limits for campaigns in the application.</p>
    pub fn limits(&self) -> ::std::option::Option<&crate::types::CampaignLimits> {
        self.limits.as_ref()
    }
    /// <p>The default quiet time for campaigns in the application. Quiet time is a specific time range when messages aren't sent to endpoints, if all the following conditions are met:</p>
    /// <ul>
    /// <li><p>The EndpointDemographic.Timezone property of the endpoint is set to a valid value.</p></li>
    /// <li><p>The current time in the endpoint's time zone is later than or equal to the time specified by the QuietTime.Start property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// <li><p>The current time in the endpoint's time zone is earlier than or equal to the time specified by the QuietTime.End property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// </ul>
    /// <p>If any of the preceding conditions isn't met, the endpoint will receive messages from a campaign or journey, even if quiet time is enabled.</p>
    pub fn quiet_time(&self) -> ::std::option::Option<&crate::types::QuietTime> {
        self.quiet_time.as_ref()
    }
    /// <p>The default sending limits for journeys in the application. These limits apply to each journey for the application but can be overridden, on a per journey basis, with the JourneyLimits resource.</p>
    pub fn journey_limits(&self) -> ::std::option::Option<&crate::types::ApplicationSettingsJourneyLimits> {
        self.journey_limits.as_ref()
    }
}
impl ApplicationSettingsResource {
    /// Creates a new builder-style object to manufacture [`ApplicationSettingsResource`](crate::types::ApplicationSettingsResource).
    pub fn builder() -> crate::types::builders::ApplicationSettingsResourceBuilder {
        crate::types::builders::ApplicationSettingsResourceBuilder::default()
    }
}

/// A builder for [`ApplicationSettingsResource`](crate::types::ApplicationSettingsResource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationSettingsResourceBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) campaign_hook: ::std::option::Option<crate::types::CampaignHook>,
    pub(crate) last_modified_date: ::std::option::Option<::std::string::String>,
    pub(crate) limits: ::std::option::Option<crate::types::CampaignLimits>,
    pub(crate) quiet_time: ::std::option::Option<crate::types::QuietTime>,
    pub(crate) journey_limits: ::std::option::Option<crate::types::ApplicationSettingsJourneyLimits>,
}
impl ApplicationSettingsResourceBuilder {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The settings for the AWS Lambda function to invoke by default as a code hook for campaigns in the application. You can use this hook to customize segments that are used by campaigns in the application.</p>
    pub fn campaign_hook(mut self, input: crate::types::CampaignHook) -> Self {
        self.campaign_hook = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for the AWS Lambda function to invoke by default as a code hook for campaigns in the application. You can use this hook to customize segments that are used by campaigns in the application.</p>
    pub fn set_campaign_hook(mut self, input: ::std::option::Option<crate::types::CampaignHook>) -> Self {
        self.campaign_hook = input;
        self
    }
    /// <p>The settings for the AWS Lambda function to invoke by default as a code hook for campaigns in the application. You can use this hook to customize segments that are used by campaigns in the application.</p>
    pub fn get_campaign_hook(&self) -> &::std::option::Option<crate::types::CampaignHook> {
        &self.campaign_hook
    }
    /// <p>The date and time, in ISO 8601 format, when the application's settings were last modified.</p>
    pub fn last_modified_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time, in ISO 8601 format, when the application's settings were last modified.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date and time, in ISO 8601 format, when the application's settings were last modified.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_modified_date
    }
    /// <p>The default sending limits for campaigns in the application.</p>
    pub fn limits(mut self, input: crate::types::CampaignLimits) -> Self {
        self.limits = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default sending limits for campaigns in the application.</p>
    pub fn set_limits(mut self, input: ::std::option::Option<crate::types::CampaignLimits>) -> Self {
        self.limits = input;
        self
    }
    /// <p>The default sending limits for campaigns in the application.</p>
    pub fn get_limits(&self) -> &::std::option::Option<crate::types::CampaignLimits> {
        &self.limits
    }
    /// <p>The default quiet time for campaigns in the application. Quiet time is a specific time range when messages aren't sent to endpoints, if all the following conditions are met:</p>
    /// <ul>
    /// <li><p>The EndpointDemographic.Timezone property of the endpoint is set to a valid value.</p></li>
    /// <li><p>The current time in the endpoint's time zone is later than or equal to the time specified by the QuietTime.Start property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// <li><p>The current time in the endpoint's time zone is earlier than or equal to the time specified by the QuietTime.End property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// </ul>
    /// <p>If any of the preceding conditions isn't met, the endpoint will receive messages from a campaign or journey, even if quiet time is enabled.</p>
    pub fn quiet_time(mut self, input: crate::types::QuietTime) -> Self {
        self.quiet_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default quiet time for campaigns in the application. Quiet time is a specific time range when messages aren't sent to endpoints, if all the following conditions are met:</p>
    /// <ul>
    /// <li><p>The EndpointDemographic.Timezone property of the endpoint is set to a valid value.</p></li>
    /// <li><p>The current time in the endpoint's time zone is later than or equal to the time specified by the QuietTime.Start property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// <li><p>The current time in the endpoint's time zone is earlier than or equal to the time specified by the QuietTime.End property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// </ul>
    /// <p>If any of the preceding conditions isn't met, the endpoint will receive messages from a campaign or journey, even if quiet time is enabled.</p>
    pub fn set_quiet_time(mut self, input: ::std::option::Option<crate::types::QuietTime>) -> Self {
        self.quiet_time = input;
        self
    }
    /// <p>The default quiet time for campaigns in the application. Quiet time is a specific time range when messages aren't sent to endpoints, if all the following conditions are met:</p>
    /// <ul>
    /// <li><p>The EndpointDemographic.Timezone property of the endpoint is set to a valid value.</p></li>
    /// <li><p>The current time in the endpoint's time zone is later than or equal to the time specified by the QuietTime.Start property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// <li><p>The current time in the endpoint's time zone is earlier than or equal to the time specified by the QuietTime.End property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// </ul>
    /// <p>If any of the preceding conditions isn't met, the endpoint will receive messages from a campaign or journey, even if quiet time is enabled.</p>
    pub fn get_quiet_time(&self) -> &::std::option::Option<crate::types::QuietTime> {
        &self.quiet_time
    }
    /// <p>The default sending limits for journeys in the application. These limits apply to each journey for the application but can be overridden, on a per journey basis, with the JourneyLimits resource.</p>
    pub fn journey_limits(mut self, input: crate::types::ApplicationSettingsJourneyLimits) -> Self {
        self.journey_limits = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default sending limits for journeys in the application. These limits apply to each journey for the application but can be overridden, on a per journey basis, with the JourneyLimits resource.</p>
    pub fn set_journey_limits(mut self, input: ::std::option::Option<crate::types::ApplicationSettingsJourneyLimits>) -> Self {
        self.journey_limits = input;
        self
    }
    /// <p>The default sending limits for journeys in the application. These limits apply to each journey for the application but can be overridden, on a per journey basis, with the JourneyLimits resource.</p>
    pub fn get_journey_limits(&self) -> &::std::option::Option<crate::types::ApplicationSettingsJourneyLimits> {
        &self.journey_limits
    }
    /// Consumes the builder and constructs a [`ApplicationSettingsResource`](crate::types::ApplicationSettingsResource).
    pub fn build(self) -> crate::types::ApplicationSettingsResource {
        crate::types::ApplicationSettingsResource {
            application_id: self.application_id,
            campaign_hook: self.campaign_hook,
            last_modified_date: self.last_modified_date,
            limits: self.limits,
            quiet_time: self.quiet_time,
            journey_limits: self.journey_limits,
        }
    }
}
