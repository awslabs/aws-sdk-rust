// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the segment identifier and version of a segment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SegmentReference {
    /// <p>The unique identifier for the segment.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The version number of the segment.</p>
    #[doc(hidden)]
    pub version: i32,
}
impl SegmentReference {
    /// <p>The unique identifier for the segment.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The version number of the segment.</p>
    pub fn version(&self) -> i32 {
        self.version
    }
}
impl SegmentReference {
    /// Creates a new builder-style object to manufacture [`SegmentReference`](crate::types::SegmentReference).
    pub fn builder() -> crate::types::builders::SegmentReferenceBuilder {
        crate::types::builders::SegmentReferenceBuilder::default()
    }
}

/// A builder for [`SegmentReference`](crate::types::SegmentReference).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SegmentReferenceBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<i32>,
}
impl SegmentReferenceBuilder {
    /// <p>The unique identifier for the segment.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the segment.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The version number of the segment.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.version = Some(input);
        self
    }
    /// <p>The version number of the segment.</p>
    pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`SegmentReference`](crate::types::SegmentReference).
    pub fn build(self) -> crate::types::SegmentReference {
        crate::types::SegmentReference {
            id: self.id,
            version: self.version.unwrap_or_default(),
        }
    }
}
