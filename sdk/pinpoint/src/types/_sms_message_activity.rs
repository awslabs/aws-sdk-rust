// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the settings for an SMS activity in a journey. This type of activity sends a text message to participants.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SmsMessageActivity {
    /// <p>Specifies the sender ID and message type for an SMS message that's sent to participants in a journey.</p>
    #[doc(hidden)]
    pub message_config: std::option::Option<crate::types::JourneySmsMessage>,
    /// <p>The unique identifier for the next activity to perform, after the message is sent.</p>
    #[doc(hidden)]
    pub next_activity: std::option::Option<std::string::String>,
    /// <p>The name of the SMS message template to use for the message. If specified, this value must match the name of an existing message template.</p>
    #[doc(hidden)]
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the version of the SMS template to use for the message. If specified, this value must match the identifier for an existing template version. To retrieve a list of versions and version identifiers for a template, use the
    /// <link linkend="templates-template-name-template-type-versions">Template Versions resource.</p>
    /// <p>If you don't specify a value for this property, Amazon Pinpoint uses the <i>active version</i> of the template. The <i>active version</i> is typically the version of a template that's been most recently reviewed and approved for use, depending on your workflow. It isn't necessarily the latest version of a template.</p>
    #[doc(hidden)]
    pub template_version: std::option::Option<std::string::String>,
}
impl SmsMessageActivity {
    /// <p>Specifies the sender ID and message type for an SMS message that's sent to participants in a journey.</p>
    pub fn message_config(&self) -> std::option::Option<&crate::types::JourneySmsMessage> {
        self.message_config.as_ref()
    }
    /// <p>The unique identifier for the next activity to perform, after the message is sent.</p>
    pub fn next_activity(&self) -> std::option::Option<&str> {
        self.next_activity.as_deref()
    }
    /// <p>The name of the SMS message template to use for the message. If specified, this value must match the name of an existing message template.</p>
    pub fn template_name(&self) -> std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The unique identifier for the version of the SMS template to use for the message. If specified, this value must match the identifier for an existing template version. To retrieve a list of versions and version identifiers for a template, use the
    /// <link linkend="templates-template-name-template-type-versions">Template Versions resource.</p>
    /// <p>If you don't specify a value for this property, Amazon Pinpoint uses the <i>active version</i> of the template. The <i>active version</i> is typically the version of a template that's been most recently reviewed and approved for use, depending on your workflow. It isn't necessarily the latest version of a template.</p>
    pub fn template_version(&self) -> std::option::Option<&str> {
        self.template_version.as_deref()
    }
}
impl SmsMessageActivity {
    /// Creates a new builder-style object to manufacture [`SmsMessageActivity`](crate::types::SmsMessageActivity).
    pub fn builder() -> crate::types::builders::SmsMessageActivityBuilder {
        crate::types::builders::SmsMessageActivityBuilder::default()
    }
}

/// A builder for [`SmsMessageActivity`](crate::types::SmsMessageActivity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SmsMessageActivityBuilder {
    pub(crate) message_config: std::option::Option<crate::types::JourneySmsMessage>,
    pub(crate) next_activity: std::option::Option<std::string::String>,
    pub(crate) template_name: std::option::Option<std::string::String>,
    pub(crate) template_version: std::option::Option<std::string::String>,
}
impl SmsMessageActivityBuilder {
    /// <p>Specifies the sender ID and message type for an SMS message that's sent to participants in a journey.</p>
    pub fn message_config(mut self, input: crate::types::JourneySmsMessage) -> Self {
        self.message_config = Some(input);
        self
    }
    /// <p>Specifies the sender ID and message type for an SMS message that's sent to participants in a journey.</p>
    pub fn set_message_config(
        mut self,
        input: std::option::Option<crate::types::JourneySmsMessage>,
    ) -> Self {
        self.message_config = input;
        self
    }
    /// <p>The unique identifier for the next activity to perform, after the message is sent.</p>
    pub fn next_activity(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_activity = Some(input.into());
        self
    }
    /// <p>The unique identifier for the next activity to perform, after the message is sent.</p>
    pub fn set_next_activity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_activity = input;
        self
    }
    /// <p>The name of the SMS message template to use for the message. If specified, this value must match the name of an existing message template.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_name = Some(input.into());
        self
    }
    /// <p>The name of the SMS message template to use for the message. If specified, this value must match the name of an existing message template.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The unique identifier for the version of the SMS template to use for the message. If specified, this value must match the identifier for an existing template version. To retrieve a list of versions and version identifiers for a template, use the
    /// <link linkend="templates-template-name-template-type-versions">Template Versions resource.</p>
    /// <p>If you don't specify a value for this property, Amazon Pinpoint uses the <i>active version</i> of the template. The <i>active version</i> is typically the version of a template that's been most recently reviewed and approved for use, depending on your workflow. It isn't necessarily the latest version of a template.</p>
    pub fn template_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_version = Some(input.into());
        self
    }
    /// <p>The unique identifier for the version of the SMS template to use for the message. If specified, this value must match the identifier for an existing template version. To retrieve a list of versions and version identifiers for a template, use the
    /// <link linkend="templates-template-name-template-type-versions">Template Versions resource.</p>
    /// <p>If you don't specify a value for this property, Amazon Pinpoint uses the <i>active version</i> of the template. The <i>active version</i> is typically the version of a template that's been most recently reviewed and approved for use, depending on your workflow. It isn't necessarily the latest version of a template.</p>
    pub fn set_template_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_version = input;
        self
    }
    /// Consumes the builder and constructs a [`SmsMessageActivity`](crate::types::SmsMessageActivity).
    pub fn build(self) -> crate::types::SmsMessageActivity {
        crate::types::SmsMessageActivity {
            message_config: self.message_config,
            next_activity: self.next_activity,
            template_name: self.template_name,
            template_version: self.template_version,
        }
    }
}
