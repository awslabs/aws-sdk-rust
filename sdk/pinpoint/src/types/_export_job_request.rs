// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the settings for a job that exports endpoint definitions to an Amazon Simple Storage Service (Amazon S3) bucket.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportJobRequest {
    /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to access the Amazon S3 location where you want to export endpoint definitions to.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the location in an Amazon Simple Storage Service (Amazon S3) bucket where you want to export endpoint definitions to. This location is typically a folder that contains multiple files. The URL should be in the following format: s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// folder-name
    /// </replaceable>/.</p>
    pub s3_url_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the segment to export endpoint definitions from. If you don't specify this value, Amazon Pinpoint exports definitions for all the endpoints that are associated with the application.</p>
    pub segment_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the segment to export endpoint definitions from, if specified.</p>
    pub segment_version: ::std::option::Option<i32>,
}
impl ExportJobRequest {
    /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to access the Amazon S3 location where you want to export endpoint definitions to.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The URL of the location in an Amazon Simple Storage Service (Amazon S3) bucket where you want to export endpoint definitions to. This location is typically a folder that contains multiple files. The URL should be in the following format: s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// folder-name
    /// </replaceable>/.</p>
    pub fn s3_url_prefix(&self) -> ::std::option::Option<&str> {
        self.s3_url_prefix.as_deref()
    }
    /// <p>The identifier for the segment to export endpoint definitions from. If you don't specify this value, Amazon Pinpoint exports definitions for all the endpoints that are associated with the application.</p>
    pub fn segment_id(&self) -> ::std::option::Option<&str> {
        self.segment_id.as_deref()
    }
    /// <p>The version of the segment to export endpoint definitions from, if specified.</p>
    pub fn segment_version(&self) -> ::std::option::Option<i32> {
        self.segment_version
    }
}
impl ExportJobRequest {
    /// Creates a new builder-style object to manufacture [`ExportJobRequest`](crate::types::ExportJobRequest).
    pub fn builder() -> crate::types::builders::ExportJobRequestBuilder {
        crate::types::builders::ExportJobRequestBuilder::default()
    }
}

/// A builder for [`ExportJobRequest`](crate::types::ExportJobRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportJobRequestBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) s3_url_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) segment_id: ::std::option::Option<::std::string::String>,
    pub(crate) segment_version: ::std::option::Option<i32>,
}
impl ExportJobRequestBuilder {
    /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to access the Amazon S3 location where you want to export endpoint definitions to.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to access the Amazon S3 location where you want to export endpoint definitions to.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon Pinpoint to access the Amazon S3 location where you want to export endpoint definitions to.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The URL of the location in an Amazon Simple Storage Service (Amazon S3) bucket where you want to export endpoint definitions to. This location is typically a folder that contains multiple files. The URL should be in the following format: s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// folder-name
    /// </replaceable>/.</p>
    /// This field is required.
    pub fn s3_url_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_url_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the location in an Amazon Simple Storage Service (Amazon S3) bucket where you want to export endpoint definitions to. This location is typically a folder that contains multiple files. The URL should be in the following format: s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// folder-name
    /// </replaceable>/.</p>
    pub fn set_s3_url_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_url_prefix = input;
        self
    }
    /// <p>The URL of the location in an Amazon Simple Storage Service (Amazon S3) bucket where you want to export endpoint definitions to. This location is typically a folder that contains multiple files. The URL should be in the following format: s3://<replaceable>
    /// bucket-name
    /// </replaceable>/<replaceable>
    /// folder-name
    /// </replaceable>/.</p>
    pub fn get_s3_url_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_url_prefix
    }
    /// <p>The identifier for the segment to export endpoint definitions from. If you don't specify this value, Amazon Pinpoint exports definitions for all the endpoints that are associated with the application.</p>
    pub fn segment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.segment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the segment to export endpoint definitions from. If you don't specify this value, Amazon Pinpoint exports definitions for all the endpoints that are associated with the application.</p>
    pub fn set_segment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.segment_id = input;
        self
    }
    /// <p>The identifier for the segment to export endpoint definitions from. If you don't specify this value, Amazon Pinpoint exports definitions for all the endpoints that are associated with the application.</p>
    pub fn get_segment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.segment_id
    }
    /// <p>The version of the segment to export endpoint definitions from, if specified.</p>
    pub fn segment_version(mut self, input: i32) -> Self {
        self.segment_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the segment to export endpoint definitions from, if specified.</p>
    pub fn set_segment_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.segment_version = input;
        self
    }
    /// <p>The version of the segment to export endpoint definitions from, if specified.</p>
    pub fn get_segment_version(&self) -> &::std::option::Option<i32> {
        &self.segment_version
    }
    /// Consumes the builder and constructs a [`ExportJobRequest`](crate::types::ExportJobRequest).
    pub fn build(self) -> crate::types::ExportJobRequest {
        crate::types::ExportJobRequest {
            role_arn: self.role_arn,
            s3_url_prefix: self.s3_url_prefix,
            segment_id: self.segment_id,
            segment_version: self.segment_version,
        }
    }
}
