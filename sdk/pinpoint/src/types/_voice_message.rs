// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the settings for a one-time voice message that's sent directly to an endpoint through the voice channel.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VoiceMessage {
    /// <p>The text of the script to use for the voice message.</p>
    #[doc(hidden)]
    pub body: std::option::Option<std::string::String>,
    /// <p>The code for the language to use when synthesizing the text of the message script. For a list of supported languages and the code for each one, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<std::string::String>,
    /// <p>The long code to send the voice message from. This value should be one of the dedicated long codes that's assigned to your AWS account. Although it isn't required, we recommend that you specify the long code in E.164 format, for example +12065550100, to ensure prompt and accurate delivery of the message.</p>
    #[doc(hidden)]
    pub origination_number: std::option::Option<std::string::String>,
    /// <p>The default message variables to use in the voice message. You can override the default variables with individual address variables.</p>
    #[doc(hidden)]
    pub substitutions: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    /// <p>The name of the voice to use when delivering the message. For a list of supported voices, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    #[doc(hidden)]
    pub voice_id: std::option::Option<std::string::String>,
}
impl VoiceMessage {
    /// <p>The text of the script to use for the voice message.</p>
    pub fn body(&self) -> std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>The code for the language to use when synthesizing the text of the message script. For a list of supported languages and the code for each one, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    pub fn language_code(&self) -> std::option::Option<&str> {
        self.language_code.as_deref()
    }
    /// <p>The long code to send the voice message from. This value should be one of the dedicated long codes that's assigned to your AWS account. Although it isn't required, we recommend that you specify the long code in E.164 format, for example +12065550100, to ensure prompt and accurate delivery of the message.</p>
    pub fn origination_number(&self) -> std::option::Option<&str> {
        self.origination_number.as_deref()
    }
    /// <p>The default message variables to use in the voice message. You can override the default variables with individual address variables.</p>
    pub fn substitutions(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.substitutions.as_ref()
    }
    /// <p>The name of the voice to use when delivering the message. For a list of supported voices, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    pub fn voice_id(&self) -> std::option::Option<&str> {
        self.voice_id.as_deref()
    }
}
impl VoiceMessage {
    /// Creates a new builder-style object to manufacture [`VoiceMessage`](crate::types::VoiceMessage).
    pub fn builder() -> crate::types::builders::VoiceMessageBuilder {
        crate::types::builders::VoiceMessageBuilder::default()
    }
}

/// A builder for [`VoiceMessage`](crate::types::VoiceMessage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VoiceMessageBuilder {
    pub(crate) body: std::option::Option<std::string::String>,
    pub(crate) language_code: std::option::Option<std::string::String>,
    pub(crate) origination_number: std::option::Option<std::string::String>,
    pub(crate) substitutions: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    pub(crate) voice_id: std::option::Option<std::string::String>,
}
impl VoiceMessageBuilder {
    /// <p>The text of the script to use for the voice message.</p>
    pub fn body(mut self, input: impl Into<std::string::String>) -> Self {
        self.body = Some(input.into());
        self
    }
    /// <p>The text of the script to use for the voice message.</p>
    pub fn set_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The code for the language to use when synthesizing the text of the message script. For a list of supported languages and the code for each one, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    pub fn language_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.language_code = Some(input.into());
        self
    }
    /// <p>The code for the language to use when synthesizing the text of the message script. For a list of supported languages and the code for each one, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    pub fn set_language_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.language_code = input;
        self
    }
    /// <p>The long code to send the voice message from. This value should be one of the dedicated long codes that's assigned to your AWS account. Although it isn't required, we recommend that you specify the long code in E.164 format, for example +12065550100, to ensure prompt and accurate delivery of the message.</p>
    pub fn origination_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.origination_number = Some(input.into());
        self
    }
    /// <p>The long code to send the voice message from. This value should be one of the dedicated long codes that's assigned to your AWS account. Although it isn't required, we recommend that you specify the long code in E.164 format, for example +12065550100, to ensure prompt and accurate delivery of the message.</p>
    pub fn set_origination_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.origination_number = input;
        self
    }
    /// Adds a key-value pair to `substitutions`.
    ///
    /// To override the contents of this collection use [`set_substitutions`](Self::set_substitutions).
    ///
    /// <p>The default message variables to use in the voice message. You can override the default variables with individual address variables.</p>
    pub fn substitutions(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.substitutions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.substitutions = Some(hash_map);
        self
    }
    /// <p>The default message variables to use in the voice message. You can override the default variables with individual address variables.</p>
    pub fn set_substitutions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.substitutions = input;
        self
    }
    /// <p>The name of the voice to use when delivering the message. For a list of supported voices, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    pub fn voice_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.voice_id = Some(input.into());
        self
    }
    /// <p>The name of the voice to use when delivering the message. For a list of supported voices, see the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly Developer Guide</a>.</p>
    pub fn set_voice_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.voice_id = input;
        self
    }
    /// Consumes the builder and constructs a [`VoiceMessage`](crate::types::VoiceMessage).
    pub fn build(self) -> crate::types::VoiceMessage {
        crate::types::VoiceMessage {
            body: self.body,
            language_code: self.language_code,
            origination_number: self.origination_number,
            substitutions: self.substitutions,
            voice_id: self.voice_id,
        }
    }
}
