// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the status and settings of a job that exports endpoint definitions to a file. The file can be added directly to an Amazon Simple Storage Service (Amazon S3) bucket by using the Amazon Pinpoint API or downloaded directly to a computer by using the Amazon Pinpoint console.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportJobResponse {
    /// <p>The unique identifier for the application that's associated with the export job.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The number of pieces that were processed successfully (completed) by the export job, as of the time of the request.</p>
    #[doc(hidden)]
    pub completed_pieces: i32,
    /// <p>The date, in ISO 8601 format, when the export job was completed.</p>
    #[doc(hidden)]
    pub completion_date: std::option::Option<std::string::String>,
    /// <p>The date, in ISO 8601 format, when the export job was created.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<std::string::String>,
    /// <p>The resource settings that apply to the export job.</p>
    #[doc(hidden)]
    pub definition: std::option::Option<crate::types::ExportJobResource>,
    /// <p>The number of pieces that weren't processed successfully (failed) by the export job, as of the time of the request.</p>
    #[doc(hidden)]
    pub failed_pieces: i32,
    /// <p>An array of entries, one for each of the first 100 entries that weren't processed successfully (failed) by the export job, if any.</p>
    #[doc(hidden)]
    pub failures: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The unique identifier for the export job.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The status of the export job. The job status is FAILED if Amazon Pinpoint wasn't able to process one or more pieces in the job.</p>
    #[doc(hidden)]
    pub job_status: std::option::Option<crate::types::JobStatus>,
    /// <p>The total number of endpoint definitions that weren't processed successfully (failed) by the export job, typically because an error, such as a syntax error, occurred.</p>
    #[doc(hidden)]
    pub total_failures: i32,
    /// <p>The total number of pieces that must be processed to complete the export job. Each piece consists of an approximately equal portion of the endpoint definitions that are part of the export job.</p>
    #[doc(hidden)]
    pub total_pieces: i32,
    /// <p>The total number of endpoint definitions that were processed by the export job.</p>
    #[doc(hidden)]
    pub total_processed: i32,
    /// <p>The job type. This value is EXPORT for export jobs.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl ExportJobResponse {
    /// <p>The unique identifier for the application that's associated with the export job.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The number of pieces that were processed successfully (completed) by the export job, as of the time of the request.</p>
    pub fn completed_pieces(&self) -> i32 {
        self.completed_pieces
    }
    /// <p>The date, in ISO 8601 format, when the export job was completed.</p>
    pub fn completion_date(&self) -> std::option::Option<&str> {
        self.completion_date.as_deref()
    }
    /// <p>The date, in ISO 8601 format, when the export job was created.</p>
    pub fn creation_date(&self) -> std::option::Option<&str> {
        self.creation_date.as_deref()
    }
    /// <p>The resource settings that apply to the export job.</p>
    pub fn definition(&self) -> std::option::Option<&crate::types::ExportJobResource> {
        self.definition.as_ref()
    }
    /// <p>The number of pieces that weren't processed successfully (failed) by the export job, as of the time of the request.</p>
    pub fn failed_pieces(&self) -> i32 {
        self.failed_pieces
    }
    /// <p>An array of entries, one for each of the first 100 entries that weren't processed successfully (failed) by the export job, if any.</p>
    pub fn failures(&self) -> std::option::Option<&[std::string::String]> {
        self.failures.as_deref()
    }
    /// <p>The unique identifier for the export job.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The status of the export job. The job status is FAILED if Amazon Pinpoint wasn't able to process one or more pieces in the job.</p>
    pub fn job_status(&self) -> std::option::Option<&crate::types::JobStatus> {
        self.job_status.as_ref()
    }
    /// <p>The total number of endpoint definitions that weren't processed successfully (failed) by the export job, typically because an error, such as a syntax error, occurred.</p>
    pub fn total_failures(&self) -> i32 {
        self.total_failures
    }
    /// <p>The total number of pieces that must be processed to complete the export job. Each piece consists of an approximately equal portion of the endpoint definitions that are part of the export job.</p>
    pub fn total_pieces(&self) -> i32 {
        self.total_pieces
    }
    /// <p>The total number of endpoint definitions that were processed by the export job.</p>
    pub fn total_processed(&self) -> i32 {
        self.total_processed
    }
    /// <p>The job type. This value is EXPORT for export jobs.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl ExportJobResponse {
    /// Creates a new builder-style object to manufacture [`ExportJobResponse`](crate::types::ExportJobResponse).
    pub fn builder() -> crate::types::builders::ExportJobResponseBuilder {
        crate::types::builders::ExportJobResponseBuilder::default()
    }
}

/// A builder for [`ExportJobResponse`](crate::types::ExportJobResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExportJobResponseBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) completed_pieces: std::option::Option<i32>,
    pub(crate) completion_date: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<std::string::String>,
    pub(crate) definition: std::option::Option<crate::types::ExportJobResource>,
    pub(crate) failed_pieces: std::option::Option<i32>,
    pub(crate) failures: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) job_status: std::option::Option<crate::types::JobStatus>,
    pub(crate) total_failures: std::option::Option<i32>,
    pub(crate) total_pieces: std::option::Option<i32>,
    pub(crate) total_processed: std::option::Option<i32>,
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl ExportJobResponseBuilder {
    /// <p>The unique identifier for the application that's associated with the export job.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the application that's associated with the export job.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The number of pieces that were processed successfully (completed) by the export job, as of the time of the request.</p>
    pub fn completed_pieces(mut self, input: i32) -> Self {
        self.completed_pieces = Some(input);
        self
    }
    /// <p>The number of pieces that were processed successfully (completed) by the export job, as of the time of the request.</p>
    pub fn set_completed_pieces(mut self, input: std::option::Option<i32>) -> Self {
        self.completed_pieces = input;
        self
    }
    /// <p>The date, in ISO 8601 format, when the export job was completed.</p>
    pub fn completion_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.completion_date = Some(input.into());
        self
    }
    /// <p>The date, in ISO 8601 format, when the export job was completed.</p>
    pub fn set_completion_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.completion_date = input;
        self
    }
    /// <p>The date, in ISO 8601 format, when the export job was created.</p>
    pub fn creation_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.creation_date = Some(input.into());
        self
    }
    /// <p>The date, in ISO 8601 format, when the export job was created.</p>
    pub fn set_creation_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The resource settings that apply to the export job.</p>
    pub fn definition(mut self, input: crate::types::ExportJobResource) -> Self {
        self.definition = Some(input);
        self
    }
    /// <p>The resource settings that apply to the export job.</p>
    pub fn set_definition(
        mut self,
        input: std::option::Option<crate::types::ExportJobResource>,
    ) -> Self {
        self.definition = input;
        self
    }
    /// <p>The number of pieces that weren't processed successfully (failed) by the export job, as of the time of the request.</p>
    pub fn failed_pieces(mut self, input: i32) -> Self {
        self.failed_pieces = Some(input);
        self
    }
    /// <p>The number of pieces that weren't processed successfully (failed) by the export job, as of the time of the request.</p>
    pub fn set_failed_pieces(mut self, input: std::option::Option<i32>) -> Self {
        self.failed_pieces = input;
        self
    }
    /// Appends an item to `failures`.
    ///
    /// To override the contents of this collection use [`set_failures`](Self::set_failures).
    ///
    /// <p>An array of entries, one for each of the first 100 entries that weren't processed successfully (failed) by the export job, if any.</p>
    pub fn failures(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.failures.unwrap_or_default();
        v.push(input.into());
        self.failures = Some(v);
        self
    }
    /// <p>An array of entries, one for each of the first 100 entries that weren't processed successfully (failed) by the export job, if any.</p>
    pub fn set_failures(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.failures = input;
        self
    }
    /// <p>The unique identifier for the export job.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the export job.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The status of the export job. The job status is FAILED if Amazon Pinpoint wasn't able to process one or more pieces in the job.</p>
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = Some(input);
        self
    }
    /// <p>The status of the export job. The job status is FAILED if Amazon Pinpoint wasn't able to process one or more pieces in the job.</p>
    pub fn set_job_status(mut self, input: std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>The total number of endpoint definitions that weren't processed successfully (failed) by the export job, typically because an error, such as a syntax error, occurred.</p>
    pub fn total_failures(mut self, input: i32) -> Self {
        self.total_failures = Some(input);
        self
    }
    /// <p>The total number of endpoint definitions that weren't processed successfully (failed) by the export job, typically because an error, such as a syntax error, occurred.</p>
    pub fn set_total_failures(mut self, input: std::option::Option<i32>) -> Self {
        self.total_failures = input;
        self
    }
    /// <p>The total number of pieces that must be processed to complete the export job. Each piece consists of an approximately equal portion of the endpoint definitions that are part of the export job.</p>
    pub fn total_pieces(mut self, input: i32) -> Self {
        self.total_pieces = Some(input);
        self
    }
    /// <p>The total number of pieces that must be processed to complete the export job. Each piece consists of an approximately equal portion of the endpoint definitions that are part of the export job.</p>
    pub fn set_total_pieces(mut self, input: std::option::Option<i32>) -> Self {
        self.total_pieces = input;
        self
    }
    /// <p>The total number of endpoint definitions that were processed by the export job.</p>
    pub fn total_processed(mut self, input: i32) -> Self {
        self.total_processed = Some(input);
        self
    }
    /// <p>The total number of endpoint definitions that were processed by the export job.</p>
    pub fn set_total_processed(mut self, input: std::option::Option<i32>) -> Self {
        self.total_processed = input;
        self
    }
    /// <p>The job type. This value is EXPORT for export jobs.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The job type. This value is EXPORT for export jobs.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`ExportJobResponse`](crate::types::ExportJobResponse).
    pub fn build(self) -> crate::types::ExportJobResponse {
        crate::types::ExportJobResponse {
            application_id: self.application_id,
            completed_pieces: self.completed_pieces.unwrap_or_default(),
            completion_date: self.completion_date,
            creation_date: self.creation_date,
            definition: self.definition,
            failed_pieces: self.failed_pieces.unwrap_or_default(),
            failures: self.failures,
            id: self.id,
            job_status: self.job_status,
            total_failures: self.total_failures.unwrap_or_default(),
            total_pieces: self.total_pieces.unwrap_or_default(),
            total_processed: self.total_processed.unwrap_or_default(),
            r#type: self.r#type,
        }
    }
}
