// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the settings for a holdout activity in a journey. This type of activity stops a journey for a specified percentage of participants.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HoldoutActivity {
    /// <p>The unique identifier for the next activity to perform, after performing the holdout activity.</p>
    pub next_activity: ::std::option::Option<::std::string::String>,
    /// <p>The percentage of participants who shouldn't continue the journey.</p>
    /// <p>To determine which participants are held out, Amazon Pinpoint applies a probability-based algorithm to the percentage that you specify. Therefore, the actual percentage of participants who are held out may not be equal to the percentage that you specify.</p>
    pub percentage: ::std::option::Option<i32>,
}
impl HoldoutActivity {
    /// <p>The unique identifier for the next activity to perform, after performing the holdout activity.</p>
    pub fn next_activity(&self) -> ::std::option::Option<&str> {
        self.next_activity.as_deref()
    }
    /// <p>The percentage of participants who shouldn't continue the journey.</p>
    /// <p>To determine which participants are held out, Amazon Pinpoint applies a probability-based algorithm to the percentage that you specify. Therefore, the actual percentage of participants who are held out may not be equal to the percentage that you specify.</p>
    pub fn percentage(&self) -> ::std::option::Option<i32> {
        self.percentage
    }
}
impl HoldoutActivity {
    /// Creates a new builder-style object to manufacture [`HoldoutActivity`](crate::types::HoldoutActivity).
    pub fn builder() -> crate::types::builders::HoldoutActivityBuilder {
        crate::types::builders::HoldoutActivityBuilder::default()
    }
}

/// A builder for [`HoldoutActivity`](crate::types::HoldoutActivity).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HoldoutActivityBuilder {
    pub(crate) next_activity: ::std::option::Option<::std::string::String>,
    pub(crate) percentage: ::std::option::Option<i32>,
}
impl HoldoutActivityBuilder {
    /// <p>The unique identifier for the next activity to perform, after performing the holdout activity.</p>
    pub fn next_activity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_activity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the next activity to perform, after performing the holdout activity.</p>
    pub fn set_next_activity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_activity = input;
        self
    }
    /// <p>The unique identifier for the next activity to perform, after performing the holdout activity.</p>
    pub fn get_next_activity(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_activity
    }
    /// <p>The percentage of participants who shouldn't continue the journey.</p>
    /// <p>To determine which participants are held out, Amazon Pinpoint applies a probability-based algorithm to the percentage that you specify. Therefore, the actual percentage of participants who are held out may not be equal to the percentage that you specify.</p>
    /// This field is required.
    pub fn percentage(mut self, input: i32) -> Self {
        self.percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of participants who shouldn't continue the journey.</p>
    /// <p>To determine which participants are held out, Amazon Pinpoint applies a probability-based algorithm to the percentage that you specify. Therefore, the actual percentage of participants who are held out may not be equal to the percentage that you specify.</p>
    pub fn set_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.percentage = input;
        self
    }
    /// <p>The percentage of participants who shouldn't continue the journey.</p>
    /// <p>To determine which participants are held out, Amazon Pinpoint applies a probability-based algorithm to the percentage that you specify. Therefore, the actual percentage of participants who are held out may not be equal to the percentage that you specify.</p>
    pub fn get_percentage(&self) -> &::std::option::Option<i32> {
        &self.percentage
    }
    /// Consumes the builder and constructs a [`HoldoutActivity`](crate::types::HoldoutActivity).
    pub fn build(self) -> crate::types::HoldoutActivity {
        crate::types::HoldoutActivity {
            next_activity: self.next_activity,
            percentage: self.percentage,
        }
    }
}
