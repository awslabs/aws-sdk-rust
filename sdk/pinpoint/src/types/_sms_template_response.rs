// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the content and settings for a message template that can be used in text messages that are sent through the SMS channel.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SmsTemplateResponse {
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The message body that's used in text messages that are based on the message template.</p>
    pub body: ::std::option::Option<::std::string::String>,
    /// <p>The date, in ISO 8601 format, when the message template was created.</p>
    pub creation_date: ::std::option::Option<::std::string::String>,
    /// <p>The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub default_substitutions: ::std::option::Option<::std::string::String>,
    /// <p>The date, in ISO 8601 format, when the message template was last modified.</p>
    pub last_modified_date: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the recommender model that's used by the message template.</p>
    pub recommender_id: ::std::option::Option<::std::string::String>,
    /// <p>A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The custom description of the message template.</p>
    pub template_description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the message template.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of channel that the message template is designed for. For an SMS template, this value is SMS.</p>
    pub template_type: ::std::option::Option<crate::types::TemplateType>,
    /// <p>The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.</p>
    pub version: ::std::option::Option<::std::string::String>,
}
impl SmsTemplateResponse {
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The message body that's used in text messages that are based on the message template.</p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>The date, in ISO 8601 format, when the message template was created.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&str> {
        self.creation_date.as_deref()
    }
    /// <p>The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub fn default_substitutions(&self) -> ::std::option::Option<&str> {
        self.default_substitutions.as_deref()
    }
    /// <p>The date, in ISO 8601 format, when the message template was last modified.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&str> {
        self.last_modified_date.as_deref()
    }
    /// <p>The unique identifier for the recommender model that's used by the message template.</p>
    pub fn recommender_id(&self) -> ::std::option::Option<&str> {
        self.recommender_id.as_deref()
    }
    /// <p>A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The custom description of the message template.</p>
    pub fn template_description(&self) -> ::std::option::Option<&str> {
        self.template_description.as_deref()
    }
    /// <p>The name of the message template.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The type of channel that the message template is designed for. For an SMS template, this value is SMS.</p>
    pub fn template_type(&self) -> ::std::option::Option<&crate::types::TemplateType> {
        self.template_type.as_ref()
    }
    /// <p>The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl SmsTemplateResponse {
    /// Creates a new builder-style object to manufacture [`SmsTemplateResponse`](crate::types::SmsTemplateResponse).
    pub fn builder() -> crate::types::builders::SmsTemplateResponseBuilder {
        crate::types::builders::SmsTemplateResponseBuilder::default()
    }
}

/// A builder for [`SmsTemplateResponse`](crate::types::SmsTemplateResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SmsTemplateResponseBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::std::string::String>,
    pub(crate) default_substitutions: ::std::option::Option<::std::string::String>,
    pub(crate) last_modified_date: ::std::option::Option<::std::string::String>,
    pub(crate) recommender_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) template_description: ::std::option::Option<::std::string::String>,
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_type: ::std::option::Option<crate::types::TemplateType>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
}
impl SmsTemplateResponseBuilder {
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the message template.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The message body that's used in text messages that are based on the message template.</p>
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message body that's used in text messages that are based on the message template.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The message body that's used in text messages that are based on the message template.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// <p>The date, in ISO 8601 format, when the message template was created.</p>
    /// This field is required.
    pub fn creation_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date, in ISO 8601 format, when the message template was created.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date, in ISO 8601 format, when the message template was created.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_date
    }
    /// <p>The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub fn default_substitutions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_substitutions = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub fn set_default_substitutions(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_substitutions = input;
        self
    }
    /// <p>The JSON object that specifies the default values that are used for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub fn get_default_substitutions(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_substitutions
    }
    /// <p>The date, in ISO 8601 format, when the message template was last modified.</p>
    /// This field is required.
    pub fn last_modified_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date, in ISO 8601 format, when the message template was last modified.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date, in ISO 8601 format, when the message template was last modified.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_modified_date
    }
    /// <p>The unique identifier for the recommender model that's used by the message template.</p>
    pub fn recommender_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommender_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the recommender model that's used by the message template.</p>
    pub fn set_recommender_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommender_id = input;
        self
    }
    /// <p>The unique identifier for the recommender model that's used by the message template.</p>
    pub fn get_recommender_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommender_id
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A string-to-string map of key-value pairs that identifies the tags that are associated with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The custom description of the message template.</p>
    pub fn template_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The custom description of the message template.</p>
    pub fn set_template_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_description = input;
        self
    }
    /// <p>The custom description of the message template.</p>
    pub fn get_template_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_description
    }
    /// <p>The name of the message template.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the message template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the message template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The type of channel that the message template is designed for. For an SMS template, this value is SMS.</p>
    /// This field is required.
    pub fn template_type(mut self, input: crate::types::TemplateType) -> Self {
        self.template_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of channel that the message template is designed for. For an SMS template, this value is SMS.</p>
    pub fn set_template_type(mut self, input: ::std::option::Option<crate::types::TemplateType>) -> Self {
        self.template_type = input;
        self
    }
    /// <p>The type of channel that the message template is designed for. For an SMS template, this value is SMS.</p>
    pub fn get_template_type(&self) -> &::std::option::Option<crate::types::TemplateType> {
        &self.template_type
    }
    /// <p>The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The unique identifier, as an integer, for the active version of the message template, or the version of the template that you specified by using the version parameter in your request.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Consumes the builder and constructs a [`SmsTemplateResponse`](crate::types::SmsTemplateResponse).
    pub fn build(self) -> crate::types::SmsTemplateResponse {
        crate::types::SmsTemplateResponse {
            arn: self.arn,
            body: self.body,
            creation_date: self.creation_date,
            default_substitutions: self.default_substitutions,
            last_modified_date: self.last_modified_date,
            recommender_id: self.recommender_id,
            tags: self.tags,
            template_description: self.template_description,
            template_name: self.template_name,
            template_type: self.template_type,
            version: self.version,
        }
    }
}
