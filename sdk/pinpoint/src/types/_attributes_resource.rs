// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the type and the names of attributes that were removed from all the endpoints that are associated with an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttributesResource {
    /// <p>The unique identifier for the application.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of attribute or attributes that were removed from the endpoints. Valid values are:</p>
    /// <ul>
    /// <li><p>endpoint-custom-attributes - Custom attributes that describe endpoints.</p></li>
    /// <li><p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints.</p></li>
    /// <li><p>endpoint-user-attributes - Custom attributes that describe users.</p></li>
    /// </ul>
    pub attribute_type: ::std::option::Option<::std::string::String>,
    /// <p>An array that specifies the names of the attributes that were removed from the endpoints.</p>
    pub attributes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AttributesResource {
    /// <p>The unique identifier for the application.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The type of attribute or attributes that were removed from the endpoints. Valid values are:</p>
    /// <ul>
    /// <li><p>endpoint-custom-attributes - Custom attributes that describe endpoints.</p></li>
    /// <li><p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints.</p></li>
    /// <li><p>endpoint-user-attributes - Custom attributes that describe users.</p></li>
    /// </ul>
    pub fn attribute_type(&self) -> ::std::option::Option<&str> {
        self.attribute_type.as_deref()
    }
    /// <p>An array that specifies the names of the attributes that were removed from the endpoints.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attributes.is_none()`.
    pub fn attributes(&self) -> &[::std::string::String] {
        self.attributes.as_deref().unwrap_or_default()
    }
}
impl AttributesResource {
    /// Creates a new builder-style object to manufacture [`AttributesResource`](crate::types::AttributesResource).
    pub fn builder() -> crate::types::builders::AttributesResourceBuilder {
        crate::types::builders::AttributesResourceBuilder::default()
    }
}

/// A builder for [`AttributesResource`](crate::types::AttributesResource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AttributesResourceBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_type: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AttributesResourceBuilder {
    /// <p>The unique identifier for the application.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier for the application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The type of attribute or attributes that were removed from the endpoints. Valid values are:</p>
    /// <ul>
    /// <li><p>endpoint-custom-attributes - Custom attributes that describe endpoints.</p></li>
    /// <li><p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints.</p></li>
    /// <li><p>endpoint-user-attributes - Custom attributes that describe users.</p></li>
    /// </ul>
    /// This field is required.
    pub fn attribute_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of attribute or attributes that were removed from the endpoints. Valid values are:</p>
    /// <ul>
    /// <li><p>endpoint-custom-attributes - Custom attributes that describe endpoints.</p></li>
    /// <li><p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints.</p></li>
    /// <li><p>endpoint-user-attributes - Custom attributes that describe users.</p></li>
    /// </ul>
    pub fn set_attribute_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute_type = input;
        self
    }
    /// <p>The type of attribute or attributes that were removed from the endpoints. Valid values are:</p>
    /// <ul>
    /// <li><p>endpoint-custom-attributes - Custom attributes that describe endpoints.</p></li>
    /// <li><p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints.</p></li>
    /// <li><p>endpoint-user-attributes - Custom attributes that describe users.</p></li>
    /// </ul>
    pub fn get_attribute_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute_type
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>An array that specifies the names of the attributes that were removed from the endpoints.</p>
    pub fn attributes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input.into());
        self.attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array that specifies the names of the attributes that were removed from the endpoints.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>An array that specifies the names of the attributes that were removed from the endpoints.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`AttributesResource`](crate::types::AttributesResource).
    pub fn build(self) -> crate::types::AttributesResource {
        crate::types::AttributesResource {
            application_id: self.application_id,
            attribute_type: self.attribute_type,
            attributes: self.attributes,
        }
    }
}
