// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the default settings and content for a message template that can be used in messages that are sent through a push notification channel.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DefaultPushNotificationTemplate {
    /// <p>The action to occur if a recipient taps a push notification that's based on the message template. Valid values are:</p>
    /// <ul>
    /// <li><p>OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.</p></li>
    /// <li><p>DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS and Android platforms.</p></li>
    /// <li><p>URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.</p></li>
    /// </ul>
    #[doc(hidden)]
    pub action: std::option::Option<crate::types::Action>,
    /// <p>The message body to use in push notifications that are based on the message template.</p>
    #[doc(hidden)]
    pub body: std::option::Option<std::string::String>,
    /// <p>The sound to play when a recipient receives a push notification that's based on the message template. You can use the default stream or specify the file name of a sound resource that's bundled in your app. On an Android platform, the sound file must reside in /res/raw/.</p>
    /// <p>For an iOS platform, this value is the key for the name of a sound file in your app's main bundle or the Library/Sounds folder in your app's data container. If the sound file can't be found or you specify default for the value, the system plays the default alert sound.</p>
    #[doc(hidden)]
    pub sound: std::option::Option<std::string::String>,
    /// <p>The title to use in push notifications that are based on the message template. This title appears above the notification message on a recipient's device.</p>
    #[doc(hidden)]
    pub title: std::option::Option<std::string::String>,
    /// <p>The URL to open in a recipient's default mobile browser, if a recipient taps a push notification that's based on the message template and the value of the Action property is URL.</p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
}
impl DefaultPushNotificationTemplate {
    /// <p>The action to occur if a recipient taps a push notification that's based on the message template. Valid values are:</p>
    /// <ul>
    /// <li><p>OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.</p></li>
    /// <li><p>DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS and Android platforms.</p></li>
    /// <li><p>URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.</p></li>
    /// </ul>
    pub fn action(&self) -> std::option::Option<&crate::types::Action> {
        self.action.as_ref()
    }
    /// <p>The message body to use in push notifications that are based on the message template.</p>
    pub fn body(&self) -> std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>The sound to play when a recipient receives a push notification that's based on the message template. You can use the default stream or specify the file name of a sound resource that's bundled in your app. On an Android platform, the sound file must reside in /res/raw/.</p>
    /// <p>For an iOS platform, this value is the key for the name of a sound file in your app's main bundle or the Library/Sounds folder in your app's data container. If the sound file can't be found or you specify default for the value, the system plays the default alert sound.</p>
    pub fn sound(&self) -> std::option::Option<&str> {
        self.sound.as_deref()
    }
    /// <p>The title to use in push notifications that are based on the message template. This title appears above the notification message on a recipient's device.</p>
    pub fn title(&self) -> std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The URL to open in a recipient's default mobile browser, if a recipient taps a push notification that's based on the message template and the value of the Action property is URL.</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl DefaultPushNotificationTemplate {
    /// Creates a new builder-style object to manufacture [`DefaultPushNotificationTemplate`](crate::types::DefaultPushNotificationTemplate).
    pub fn builder() -> crate::types::builders::DefaultPushNotificationTemplateBuilder {
        crate::types::builders::DefaultPushNotificationTemplateBuilder::default()
    }
}

/// A builder for [`DefaultPushNotificationTemplate`](crate::types::DefaultPushNotificationTemplate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DefaultPushNotificationTemplateBuilder {
    pub(crate) action: std::option::Option<crate::types::Action>,
    pub(crate) body: std::option::Option<std::string::String>,
    pub(crate) sound: std::option::Option<std::string::String>,
    pub(crate) title: std::option::Option<std::string::String>,
    pub(crate) url: std::option::Option<std::string::String>,
}
impl DefaultPushNotificationTemplateBuilder {
    /// <p>The action to occur if a recipient taps a push notification that's based on the message template. Valid values are:</p>
    /// <ul>
    /// <li><p>OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.</p></li>
    /// <li><p>DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS and Android platforms.</p></li>
    /// <li><p>URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.</p></li>
    /// </ul>
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.action = Some(input);
        self
    }
    /// <p>The action to occur if a recipient taps a push notification that's based on the message template. Valid values are:</p>
    /// <ul>
    /// <li><p>OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.</p></li>
    /// <li><p>DEEP_LINK - Your app opens and displays a designated user interface in the app. This setting uses the deep-linking features of the iOS and Android platforms.</p></li>
    /// <li><p>URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.</p></li>
    /// </ul>
    pub fn set_action(mut self, input: std::option::Option<crate::types::Action>) -> Self {
        self.action = input;
        self
    }
    /// <p>The message body to use in push notifications that are based on the message template.</p>
    pub fn body(mut self, input: impl Into<std::string::String>) -> Self {
        self.body = Some(input.into());
        self
    }
    /// <p>The message body to use in push notifications that are based on the message template.</p>
    pub fn set_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The sound to play when a recipient receives a push notification that's based on the message template. You can use the default stream or specify the file name of a sound resource that's bundled in your app. On an Android platform, the sound file must reside in /res/raw/.</p>
    /// <p>For an iOS platform, this value is the key for the name of a sound file in your app's main bundle or the Library/Sounds folder in your app's data container. If the sound file can't be found or you specify default for the value, the system plays the default alert sound.</p>
    pub fn sound(mut self, input: impl Into<std::string::String>) -> Self {
        self.sound = Some(input.into());
        self
    }
    /// <p>The sound to play when a recipient receives a push notification that's based on the message template. You can use the default stream or specify the file name of a sound resource that's bundled in your app. On an Android platform, the sound file must reside in /res/raw/.</p>
    /// <p>For an iOS platform, this value is the key for the name of a sound file in your app's main bundle or the Library/Sounds folder in your app's data container. If the sound file can't be found or you specify default for the value, the system plays the default alert sound.</p>
    pub fn set_sound(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sound = input;
        self
    }
    /// <p>The title to use in push notifications that are based on the message template. This title appears above the notification message on a recipient's device.</p>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.title = Some(input.into());
        self
    }
    /// <p>The title to use in push notifications that are based on the message template. This title appears above the notification message on a recipient's device.</p>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The URL to open in a recipient's default mobile browser, if a recipient taps a push notification that's based on the message template and the value of the Action property is URL.</p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p>The URL to open in a recipient's default mobile browser, if a recipient taps a push notification that's based on the message template and the value of the Action property is URL.</p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// Consumes the builder and constructs a [`DefaultPushNotificationTemplate`](crate::types::DefaultPushNotificationTemplate).
    pub fn build(self) -> crate::types::DefaultPushNotificationTemplate {
        crate::types::DefaultPushNotificationTemplate {
            action: self.action,
            body: self.body,
            sound: self.sound,
            title: self.title,
            url: self.url,
        }
    }
}
