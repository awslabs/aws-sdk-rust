// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a batch of events to process.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EventsRequest {
    /// <p>The batch of events to process. For each item in a batch, the endpoint ID acts as a key that has an EventsBatch object as its value.</p>
    #[doc(hidden)]
    pub batch_item: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::EventsBatch>,
    >,
}
impl EventsRequest {
    /// <p>The batch of events to process. For each item in a batch, the endpoint ID acts as a key that has an EventsBatch object as its value.</p>
    pub fn batch_item(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::EventsBatch>,
    > {
        self.batch_item.as_ref()
    }
}
impl EventsRequest {
    /// Creates a new builder-style object to manufacture [`EventsRequest`](crate::types::EventsRequest).
    pub fn builder() -> crate::types::builders::EventsRequestBuilder {
        crate::types::builders::EventsRequestBuilder::default()
    }
}

/// A builder for [`EventsRequest`](crate::types::EventsRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EventsRequestBuilder {
    pub(crate) batch_item: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::EventsBatch>,
    >,
}
impl EventsRequestBuilder {
    /// Adds a key-value pair to `batch_item`.
    ///
    /// To override the contents of this collection use [`set_batch_item`](Self::set_batch_item).
    ///
    /// <p>The batch of events to process. For each item in a batch, the endpoint ID acts as a key that has an EventsBatch object as its value.</p>
    pub fn batch_item(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::EventsBatch,
    ) -> Self {
        let mut hash_map = self.batch_item.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.batch_item = Some(hash_map);
        self
    }
    /// <p>The batch of events to process. For each item in a batch, the endpoint ID acts as a key that has an EventsBatch object as its value.</p>
    pub fn set_batch_item(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::EventsBatch>,
        >,
    ) -> Self {
        self.batch_item = input;
        self
    }
    /// Consumes the builder and constructs a [`EventsRequest`](crate::types::EventsRequest).
    pub fn build(self) -> crate::types::EventsRequest {
        crate::types::EventsRequest {
            batch_item: self.batch_item,
        }
    }
}
