// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the message template to use for the message, for each type of channel.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TemplateConfiguration {
    /// <p>The email template to use for the message.</p>
    #[doc(hidden)]
    pub email_template: std::option::Option<crate::types::Template>,
    /// <p>The push notification template to use for the message.</p>
    #[doc(hidden)]
    pub push_template: std::option::Option<crate::types::Template>,
    /// <p>The SMS template to use for the message.</p>
    #[doc(hidden)]
    pub sms_template: std::option::Option<crate::types::Template>,
    /// <p>The voice template to use for the message. This object isn't supported for campaigns.</p>
    #[doc(hidden)]
    pub voice_template: std::option::Option<crate::types::Template>,
}
impl TemplateConfiguration {
    /// <p>The email template to use for the message.</p>
    pub fn email_template(&self) -> std::option::Option<&crate::types::Template> {
        self.email_template.as_ref()
    }
    /// <p>The push notification template to use for the message.</p>
    pub fn push_template(&self) -> std::option::Option<&crate::types::Template> {
        self.push_template.as_ref()
    }
    /// <p>The SMS template to use for the message.</p>
    pub fn sms_template(&self) -> std::option::Option<&crate::types::Template> {
        self.sms_template.as_ref()
    }
    /// <p>The voice template to use for the message. This object isn't supported for campaigns.</p>
    pub fn voice_template(&self) -> std::option::Option<&crate::types::Template> {
        self.voice_template.as_ref()
    }
}
impl TemplateConfiguration {
    /// Creates a new builder-style object to manufacture [`TemplateConfiguration`](crate::types::TemplateConfiguration).
    pub fn builder() -> crate::types::builders::TemplateConfigurationBuilder {
        crate::types::builders::TemplateConfigurationBuilder::default()
    }
}

/// A builder for [`TemplateConfiguration`](crate::types::TemplateConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TemplateConfigurationBuilder {
    pub(crate) email_template: std::option::Option<crate::types::Template>,
    pub(crate) push_template: std::option::Option<crate::types::Template>,
    pub(crate) sms_template: std::option::Option<crate::types::Template>,
    pub(crate) voice_template: std::option::Option<crate::types::Template>,
}
impl TemplateConfigurationBuilder {
    /// <p>The email template to use for the message.</p>
    pub fn email_template(mut self, input: crate::types::Template) -> Self {
        self.email_template = Some(input);
        self
    }
    /// <p>The email template to use for the message.</p>
    pub fn set_email_template(
        mut self,
        input: std::option::Option<crate::types::Template>,
    ) -> Self {
        self.email_template = input;
        self
    }
    /// <p>The push notification template to use for the message.</p>
    pub fn push_template(mut self, input: crate::types::Template) -> Self {
        self.push_template = Some(input);
        self
    }
    /// <p>The push notification template to use for the message.</p>
    pub fn set_push_template(mut self, input: std::option::Option<crate::types::Template>) -> Self {
        self.push_template = input;
        self
    }
    /// <p>The SMS template to use for the message.</p>
    pub fn sms_template(mut self, input: crate::types::Template) -> Self {
        self.sms_template = Some(input);
        self
    }
    /// <p>The SMS template to use for the message.</p>
    pub fn set_sms_template(mut self, input: std::option::Option<crate::types::Template>) -> Self {
        self.sms_template = input;
        self
    }
    /// <p>The voice template to use for the message. This object isn't supported for campaigns.</p>
    pub fn voice_template(mut self, input: crate::types::Template) -> Self {
        self.voice_template = Some(input);
        self
    }
    /// <p>The voice template to use for the message. This object isn't supported for campaigns.</p>
    pub fn set_voice_template(
        mut self,
        input: std::option::Option<crate::types::Template>,
    ) -> Self {
        self.voice_template = input;
        self
    }
    /// Consumes the builder and constructs a [`TemplateConfiguration`](crate::types::TemplateConfiguration).
    pub fn build(self) -> crate::types::TemplateConfiguration {
        crate::types::TemplateConfiguration {
            email_template: self.email_template,
            push_template: self.push_template,
            sms_template: self.sms_template,
            voice_template: self.voice_template,
        }
    }
}
