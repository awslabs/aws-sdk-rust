// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `EndpointTypesElement`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let endpointtypeselement = unimplemented!();
/// match endpointtypeselement {
///     EndpointTypesElement::Adm => { /* ... */ },
///     EndpointTypesElement::Apns => { /* ... */ },
///     EndpointTypesElement::ApnsSandbox => { /* ... */ },
///     EndpointTypesElement::ApnsVoip => { /* ... */ },
///     EndpointTypesElement::ApnsVoipSandbox => { /* ... */ },
///     EndpointTypesElement::Baidu => { /* ... */ },
///     EndpointTypesElement::Custom => { /* ... */ },
///     EndpointTypesElement::Email => { /* ... */ },
///     EndpointTypesElement::Gcm => { /* ... */ },
///     EndpointTypesElement::InApp => { /* ... */ },
///     EndpointTypesElement::Push => { /* ... */ },
///     EndpointTypesElement::Sms => { /* ... */ },
///     EndpointTypesElement::Voice => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `endpointtypeselement` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `EndpointTypesElement::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `EndpointTypesElement::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `EndpointTypesElement::NewFeature` is defined.
/// Specifically, when `endpointtypeselement` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `EndpointTypesElement::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum EndpointTypesElement {
    #[allow(missing_docs)] // documentation missing in model
    Adm,
    #[allow(missing_docs)] // documentation missing in model
    Apns,
    #[allow(missing_docs)] // documentation missing in model
    ApnsSandbox,
    #[allow(missing_docs)] // documentation missing in model
    ApnsVoip,
    #[allow(missing_docs)] // documentation missing in model
    ApnsVoipSandbox,
    #[allow(missing_docs)] // documentation missing in model
    Baidu,
    #[allow(missing_docs)] // documentation missing in model
    Custom,
    #[allow(missing_docs)] // documentation missing in model
    Email,
    #[allow(missing_docs)] // documentation missing in model
    Gcm,
    #[allow(missing_docs)] // documentation missing in model
    InApp,
    #[allow(missing_docs)] // documentation missing in model
    Push,
    #[allow(missing_docs)] // documentation missing in model
    Sms,
    #[allow(missing_docs)] // documentation missing in model
    Voice,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl ::std::convert::From<&str> for EndpointTypesElement {
    fn from(s: &str) -> Self {
        match s {
            "ADM" => EndpointTypesElement::Adm,
            "APNS" => EndpointTypesElement::Apns,
            "APNS_SANDBOX" => EndpointTypesElement::ApnsSandbox,
            "APNS_VOIP" => EndpointTypesElement::ApnsVoip,
            "APNS_VOIP_SANDBOX" => EndpointTypesElement::ApnsVoipSandbox,
            "BAIDU" => EndpointTypesElement::Baidu,
            "CUSTOM" => EndpointTypesElement::Custom,
            "EMAIL" => EndpointTypesElement::Email,
            "GCM" => EndpointTypesElement::Gcm,
            "IN_APP" => EndpointTypesElement::InApp,
            "PUSH" => EndpointTypesElement::Push,
            "SMS" => EndpointTypesElement::Sms,
            "VOICE" => EndpointTypesElement::Voice,
            other => EndpointTypesElement::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for EndpointTypesElement {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(EndpointTypesElement::from(s))
    }
}
impl EndpointTypesElement {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            EndpointTypesElement::Adm => "ADM",
            EndpointTypesElement::Apns => "APNS",
            EndpointTypesElement::ApnsSandbox => "APNS_SANDBOX",
            EndpointTypesElement::ApnsVoip => "APNS_VOIP",
            EndpointTypesElement::ApnsVoipSandbox => "APNS_VOIP_SANDBOX",
            EndpointTypesElement::Baidu => "BAIDU",
            EndpointTypesElement::Custom => "CUSTOM",
            EndpointTypesElement::Email => "EMAIL",
            EndpointTypesElement::Gcm => "GCM",
            EndpointTypesElement::InApp => "IN_APP",
            EndpointTypesElement::Push => "PUSH",
            EndpointTypesElement::Sms => "SMS",
            EndpointTypesElement::Voice => "VOICE",
            EndpointTypesElement::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ADM",
            "APNS",
            "APNS_SANDBOX",
            "APNS_VOIP",
            "APNS_VOIP_SANDBOX",
            "BAIDU",
            "CUSTOM",
            "EMAIL",
            "GCM",
            "IN_APP",
            "PUSH",
            "SMS",
            "VOICE",
        ]
    }
}
impl ::std::convert::AsRef<str> for EndpointTypesElement {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
