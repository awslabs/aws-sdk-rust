// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContactCenterActivity {
    /// <p>The unique identifier for the next activity to perform after the this activity.</p>
    #[doc(hidden)]
    pub next_activity: std::option::Option<std::string::String>,
}
impl ContactCenterActivity {
    /// <p>The unique identifier for the next activity to perform after the this activity.</p>
    pub fn next_activity(&self) -> std::option::Option<&str> {
        self.next_activity.as_deref()
    }
}
impl ContactCenterActivity {
    /// Creates a new builder-style object to manufacture [`ContactCenterActivity`](crate::types::ContactCenterActivity).
    pub fn builder() -> crate::types::builders::ContactCenterActivityBuilder {
        crate::types::builders::ContactCenterActivityBuilder::default()
    }
}

/// A builder for [`ContactCenterActivity`](crate::types::ContactCenterActivity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContactCenterActivityBuilder {
    pub(crate) next_activity: std::option::Option<std::string::String>,
}
impl ContactCenterActivityBuilder {
    /// <p>The unique identifier for the next activity to perform after the this activity.</p>
    pub fn next_activity(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_activity = Some(input.into());
        self
    }
    /// <p>The unique identifier for the next activity to perform after the this activity.</p>
    pub fn set_next_activity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_activity = input;
        self
    }
    /// Consumes the builder and constructs a [`ContactCenterActivity`](crate::types::ContactCenterActivity).
    pub fn build(self) -> crate::types::ContactCenterActivity {
        crate::types::ContactCenterActivity {
            next_activity: self.next_activity,
        }
    }
}
