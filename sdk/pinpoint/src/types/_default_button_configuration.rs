// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Default button configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefaultButtonConfiguration {
    /// <p>The background color of the button.</p>
    pub background_color: ::std::option::Option<::std::string::String>,
    /// <p>The border radius of the button.</p>
    pub border_radius: ::std::option::Option<i32>,
    /// <p>Action triggered by the button.</p>
    pub button_action: ::std::option::Option<crate::types::ButtonAction>,
    /// <p>Button destination.</p>
    pub link: ::std::option::Option<::std::string::String>,
    /// <p>Button text.</p>
    pub text: ::std::option::Option<::std::string::String>,
    /// <p>The text color of the button.</p>
    pub text_color: ::std::option::Option<::std::string::String>,
}
impl DefaultButtonConfiguration {
    /// <p>The background color of the button.</p>
    pub fn background_color(&self) -> ::std::option::Option<&str> {
        self.background_color.as_deref()
    }
    /// <p>The border radius of the button.</p>
    pub fn border_radius(&self) -> ::std::option::Option<i32> {
        self.border_radius
    }
    /// <p>Action triggered by the button.</p>
    pub fn button_action(&self) -> ::std::option::Option<&crate::types::ButtonAction> {
        self.button_action.as_ref()
    }
    /// <p>Button destination.</p>
    pub fn link(&self) -> ::std::option::Option<&str> {
        self.link.as_deref()
    }
    /// <p>Button text.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The text color of the button.</p>
    pub fn text_color(&self) -> ::std::option::Option<&str> {
        self.text_color.as_deref()
    }
}
impl DefaultButtonConfiguration {
    /// Creates a new builder-style object to manufacture [`DefaultButtonConfiguration`](crate::types::DefaultButtonConfiguration).
    pub fn builder() -> crate::types::builders::DefaultButtonConfigurationBuilder {
        crate::types::builders::DefaultButtonConfigurationBuilder::default()
    }
}

/// A builder for [`DefaultButtonConfiguration`](crate::types::DefaultButtonConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefaultButtonConfigurationBuilder {
    pub(crate) background_color: ::std::option::Option<::std::string::String>,
    pub(crate) border_radius: ::std::option::Option<i32>,
    pub(crate) button_action: ::std::option::Option<crate::types::ButtonAction>,
    pub(crate) link: ::std::option::Option<::std::string::String>,
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) text_color: ::std::option::Option<::std::string::String>,
}
impl DefaultButtonConfigurationBuilder {
    /// <p>The background color of the button.</p>
    pub fn background_color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.background_color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The background color of the button.</p>
    pub fn set_background_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.background_color = input;
        self
    }
    /// <p>The background color of the button.</p>
    pub fn get_background_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.background_color
    }
    /// <p>The border radius of the button.</p>
    pub fn border_radius(mut self, input: i32) -> Self {
        self.border_radius = ::std::option::Option::Some(input);
        self
    }
    /// <p>The border radius of the button.</p>
    pub fn set_border_radius(mut self, input: ::std::option::Option<i32>) -> Self {
        self.border_radius = input;
        self
    }
    /// <p>The border radius of the button.</p>
    pub fn get_border_radius(&self) -> &::std::option::Option<i32> {
        &self.border_radius
    }
    /// <p>Action triggered by the button.</p>
    /// This field is required.
    pub fn button_action(mut self, input: crate::types::ButtonAction) -> Self {
        self.button_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Action triggered by the button.</p>
    pub fn set_button_action(mut self, input: ::std::option::Option<crate::types::ButtonAction>) -> Self {
        self.button_action = input;
        self
    }
    /// <p>Action triggered by the button.</p>
    pub fn get_button_action(&self) -> &::std::option::Option<crate::types::ButtonAction> {
        &self.button_action
    }
    /// <p>Button destination.</p>
    pub fn link(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.link = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Button destination.</p>
    pub fn set_link(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.link = input;
        self
    }
    /// <p>Button destination.</p>
    pub fn get_link(&self) -> &::std::option::Option<::std::string::String> {
        &self.link
    }
    /// <p>Button text.</p>
    /// This field is required.
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Button text.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>Button text.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>The text color of the button.</p>
    pub fn text_color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text_color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text color of the button.</p>
    pub fn set_text_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text_color = input;
        self
    }
    /// <p>The text color of the button.</p>
    pub fn get_text_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.text_color
    }
    /// Consumes the builder and constructs a [`DefaultButtonConfiguration`](crate::types::DefaultButtonConfiguration).
    pub fn build(self) -> crate::types::DefaultButtonConfiguration {
        crate::types::DefaultButtonConfiguration {
            background_color: self.background_color,
            border_radius: self.border_radius,
            button_action: self.button_action,
            link: self.link,
            text: self.text,
            text_color: self.text_color,
        }
    }
}
