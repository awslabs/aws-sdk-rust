// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the status and settings of the GCM channel for an application. The GCM channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GcmChannelResponse {
    /// <p>The unique identifier for the application that the GCM channel applies to.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The date and time when the GCM channel was enabled.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<std::string::String>,
    /// <p>The Web API Key, also referred to as an <i>API_KEY</i> or <i>server key</i>, that you received from Google to communicate with Google services.</p>
    #[doc(hidden)]
    pub credential: std::option::Option<std::string::String>,
    /// <p>Specifies whether the GCM channel is enabled for the application.</p>
    #[doc(hidden)]
    pub enabled: bool,
    /// <p>(Not used) This property is retained only for backward compatibility.</p>
    #[doc(hidden)]
    pub has_credential: bool,
    /// <p>(Deprecated) An identifier for the GCM channel. This property is retained only for backward compatibility.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>Specifies whether the GCM channel is archived.</p>
    #[doc(hidden)]
    pub is_archived: bool,
    /// <p>The user who last modified the GCM channel.</p>
    #[doc(hidden)]
    pub last_modified_by: std::option::Option<std::string::String>,
    /// <p>The date and time when the GCM channel was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<std::string::String>,
    /// <p>The type of messaging or notification platform for the channel. For the GCM channel, this value is GCM.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<std::string::String>,
    /// <p>The current version of the GCM channel.</p>
    #[doc(hidden)]
    pub version: i32,
}
impl GcmChannelResponse {
    /// <p>The unique identifier for the application that the GCM channel applies to.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The date and time when the GCM channel was enabled.</p>
    pub fn creation_date(&self) -> std::option::Option<&str> {
        self.creation_date.as_deref()
    }
    /// <p>The Web API Key, also referred to as an <i>API_KEY</i> or <i>server key</i>, that you received from Google to communicate with Google services.</p>
    pub fn credential(&self) -> std::option::Option<&str> {
        self.credential.as_deref()
    }
    /// <p>Specifies whether the GCM channel is enabled for the application.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>(Not used) This property is retained only for backward compatibility.</p>
    pub fn has_credential(&self) -> bool {
        self.has_credential
    }
    /// <p>(Deprecated) An identifier for the GCM channel. This property is retained only for backward compatibility.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Specifies whether the GCM channel is archived.</p>
    pub fn is_archived(&self) -> bool {
        self.is_archived
    }
    /// <p>The user who last modified the GCM channel.</p>
    pub fn last_modified_by(&self) -> std::option::Option<&str> {
        self.last_modified_by.as_deref()
    }
    /// <p>The date and time when the GCM channel was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<&str> {
        self.last_modified_date.as_deref()
    }
    /// <p>The type of messaging or notification platform for the channel. For the GCM channel, this value is GCM.</p>
    pub fn platform(&self) -> std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>The current version of the GCM channel.</p>
    pub fn version(&self) -> i32 {
        self.version
    }
}
impl GcmChannelResponse {
    /// Creates a new builder-style object to manufacture [`GcmChannelResponse`](crate::types::GcmChannelResponse).
    pub fn builder() -> crate::types::builders::GcmChannelResponseBuilder {
        crate::types::builders::GcmChannelResponseBuilder::default()
    }
}

/// A builder for [`GcmChannelResponse`](crate::types::GcmChannelResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GcmChannelResponseBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<std::string::String>,
    pub(crate) credential: std::option::Option<std::string::String>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) has_credential: std::option::Option<bool>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) is_archived: std::option::Option<bool>,
    pub(crate) last_modified_by: std::option::Option<std::string::String>,
    pub(crate) last_modified_date: std::option::Option<std::string::String>,
    pub(crate) platform: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<i32>,
}
impl GcmChannelResponseBuilder {
    /// <p>The unique identifier for the application that the GCM channel applies to.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the application that the GCM channel applies to.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The date and time when the GCM channel was enabled.</p>
    pub fn creation_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.creation_date = Some(input.into());
        self
    }
    /// <p>The date and time when the GCM channel was enabled.</p>
    pub fn set_creation_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The Web API Key, also referred to as an <i>API_KEY</i> or <i>server key</i>, that you received from Google to communicate with Google services.</p>
    pub fn credential(mut self, input: impl Into<std::string::String>) -> Self {
        self.credential = Some(input.into());
        self
    }
    /// <p>The Web API Key, also referred to as an <i>API_KEY</i> or <i>server key</i>, that you received from Google to communicate with Google services.</p>
    pub fn set_credential(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.credential = input;
        self
    }
    /// <p>Specifies whether the GCM channel is enabled for the application.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Specifies whether the GCM channel is enabled for the application.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>(Not used) This property is retained only for backward compatibility.</p>
    pub fn has_credential(mut self, input: bool) -> Self {
        self.has_credential = Some(input);
        self
    }
    /// <p>(Not used) This property is retained only for backward compatibility.</p>
    pub fn set_has_credential(mut self, input: std::option::Option<bool>) -> Self {
        self.has_credential = input;
        self
    }
    /// <p>(Deprecated) An identifier for the GCM channel. This property is retained only for backward compatibility.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>(Deprecated) An identifier for the GCM channel. This property is retained only for backward compatibility.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Specifies whether the GCM channel is archived.</p>
    pub fn is_archived(mut self, input: bool) -> Self {
        self.is_archived = Some(input);
        self
    }
    /// <p>Specifies whether the GCM channel is archived.</p>
    pub fn set_is_archived(mut self, input: std::option::Option<bool>) -> Self {
        self.is_archived = input;
        self
    }
    /// <p>The user who last modified the GCM channel.</p>
    pub fn last_modified_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_modified_by = Some(input.into());
        self
    }
    /// <p>The user who last modified the GCM channel.</p>
    pub fn set_last_modified_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_modified_by = input;
        self
    }
    /// <p>The date and time when the GCM channel was last modified.</p>
    pub fn last_modified_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_modified_date = Some(input.into());
        self
    }
    /// <p>The date and time when the GCM channel was last modified.</p>
    pub fn set_last_modified_date(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The type of messaging or notification platform for the channel. For the GCM channel, this value is GCM.</p>
    pub fn platform(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform = Some(input.into());
        self
    }
    /// <p>The type of messaging or notification platform for the channel. For the GCM channel, this value is GCM.</p>
    pub fn set_platform(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The current version of the GCM channel.</p>
    pub fn version(mut self, input: i32) -> Self {
        self.version = Some(input);
        self
    }
    /// <p>The current version of the GCM channel.</p>
    pub fn set_version(mut self, input: std::option::Option<i32>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`GcmChannelResponse`](crate::types::GcmChannelResponse).
    pub fn build(self) -> crate::types::GcmChannelResponse {
        crate::types::GcmChannelResponse {
            application_id: self.application_id,
            creation_date: self.creation_date,
            credential: self.credential,
            enabled: self.enabled.unwrap_or_default(),
            has_credential: self.has_credential.unwrap_or_default(),
            id: self.id,
            is_archived: self.is_archived.unwrap_or_default(),
            last_modified_by: self.last_modified_by,
            last_modified_date: self.last_modified_date,
            platform: self.platform,
            version: self.version.unwrap_or_default(),
        }
    }
}
