// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the settings for a yes/no split activity in a journey. This type of activity sends participants down one of two paths in a journey, based on conditions that you specify.</p> <note>
/// <p>To create yes/no split activities that send participants down different paths based on push notification events (such as Open or Received events), your mobile app has to specify the User ID and Endpoint ID values. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/integrate.html">Integrating Amazon Pinpoint with your application</a> in the <i>Amazon Pinpoint Developer Guide</i>.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConditionalSplitActivity {
    /// <p>The conditions that define the paths for the activity, and the relationship between the conditions.</p>
    #[doc(hidden)]
    pub condition: std::option::Option<crate::types::Condition>,
    /// <p>The amount of time to wait before determining whether the conditions are met, or the date and time when Amazon Pinpoint determines whether the conditions are met.</p>
    #[doc(hidden)]
    pub evaluation_wait_time: std::option::Option<crate::types::WaitTime>,
    /// <p>The unique identifier for the activity to perform if the conditions aren't met.</p>
    #[doc(hidden)]
    pub false_activity: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the activity to perform if the conditions are met.</p>
    #[doc(hidden)]
    pub true_activity: std::option::Option<std::string::String>,
}
impl ConditionalSplitActivity {
    /// <p>The conditions that define the paths for the activity, and the relationship between the conditions.</p>
    pub fn condition(&self) -> std::option::Option<&crate::types::Condition> {
        self.condition.as_ref()
    }
    /// <p>The amount of time to wait before determining whether the conditions are met, or the date and time when Amazon Pinpoint determines whether the conditions are met.</p>
    pub fn evaluation_wait_time(&self) -> std::option::Option<&crate::types::WaitTime> {
        self.evaluation_wait_time.as_ref()
    }
    /// <p>The unique identifier for the activity to perform if the conditions aren't met.</p>
    pub fn false_activity(&self) -> std::option::Option<&str> {
        self.false_activity.as_deref()
    }
    /// <p>The unique identifier for the activity to perform if the conditions are met.</p>
    pub fn true_activity(&self) -> std::option::Option<&str> {
        self.true_activity.as_deref()
    }
}
impl ConditionalSplitActivity {
    /// Creates a new builder-style object to manufacture [`ConditionalSplitActivity`](crate::types::ConditionalSplitActivity).
    pub fn builder() -> crate::types::builders::ConditionalSplitActivityBuilder {
        crate::types::builders::ConditionalSplitActivityBuilder::default()
    }
}

/// A builder for [`ConditionalSplitActivity`](crate::types::ConditionalSplitActivity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConditionalSplitActivityBuilder {
    pub(crate) condition: std::option::Option<crate::types::Condition>,
    pub(crate) evaluation_wait_time: std::option::Option<crate::types::WaitTime>,
    pub(crate) false_activity: std::option::Option<std::string::String>,
    pub(crate) true_activity: std::option::Option<std::string::String>,
}
impl ConditionalSplitActivityBuilder {
    /// <p>The conditions that define the paths for the activity, and the relationship between the conditions.</p>
    pub fn condition(mut self, input: crate::types::Condition) -> Self {
        self.condition = Some(input);
        self
    }
    /// <p>The conditions that define the paths for the activity, and the relationship between the conditions.</p>
    pub fn set_condition(mut self, input: std::option::Option<crate::types::Condition>) -> Self {
        self.condition = input;
        self
    }
    /// <p>The amount of time to wait before determining whether the conditions are met, or the date and time when Amazon Pinpoint determines whether the conditions are met.</p>
    pub fn evaluation_wait_time(mut self, input: crate::types::WaitTime) -> Self {
        self.evaluation_wait_time = Some(input);
        self
    }
    /// <p>The amount of time to wait before determining whether the conditions are met, or the date and time when Amazon Pinpoint determines whether the conditions are met.</p>
    pub fn set_evaluation_wait_time(
        mut self,
        input: std::option::Option<crate::types::WaitTime>,
    ) -> Self {
        self.evaluation_wait_time = input;
        self
    }
    /// <p>The unique identifier for the activity to perform if the conditions aren't met.</p>
    pub fn false_activity(mut self, input: impl Into<std::string::String>) -> Self {
        self.false_activity = Some(input.into());
        self
    }
    /// <p>The unique identifier for the activity to perform if the conditions aren't met.</p>
    pub fn set_false_activity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.false_activity = input;
        self
    }
    /// <p>The unique identifier for the activity to perform if the conditions are met.</p>
    pub fn true_activity(mut self, input: impl Into<std::string::String>) -> Self {
        self.true_activity = Some(input.into());
        self
    }
    /// <p>The unique identifier for the activity to perform if the conditions are met.</p>
    pub fn set_true_activity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.true_activity = input;
        self
    }
    /// Consumes the builder and constructs a [`ConditionalSplitActivity`](crate::types::ConditionalSplitActivity).
    pub fn build(self) -> crate::types::ConditionalSplitActivity {
        crate::types::ConditionalSplitActivity {
            condition: self.condition,
            evaluation_wait_time: self.evaluation_wait_time,
            false_activity: self.false_activity,
            true_activity: self.true_activity,
        }
    }
}
