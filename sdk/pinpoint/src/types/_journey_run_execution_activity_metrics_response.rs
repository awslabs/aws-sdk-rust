// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the results of a query that retrieved the data for a standard execution metric that applies to a journey activity for a particular journey run, and provides information about that query.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JourneyRunExecutionActivityMetricsResponse {
    /// <p>The type of activity that the metric applies to. Possible values are:</p>
    /// <ul>
    /// <li><p>CONDITIONAL_SPLIT – For a yes/no split activity, which is an activity that sends participants down one of two paths in a journey.</p></li>
    /// <li><p>HOLDOUT – For a holdout activity, which is an activity that stops a journey for a specified percentage of participants.</p></li>
    /// <li><p>MESSAGE – For an email activity, which is an activity that sends an email message to participants.</p></li>
    /// <li><p>MULTI_CONDITIONAL_SPLIT – For a multivariate split activity, which is an activity that sends participants down one of as many as five paths in a journey.</p></li>
    /// <li><p>RANDOM_SPLIT – For a random split activity, which is an activity that sends specified percentages of participants down one of as many as five paths in a journey.</p></li>
    /// <li><p>WAIT – For a wait activity, which is an activity that waits for a certain amount of time or until a specific date and time before moving participants to the next activity in a journey.</p></li>
    /// </ul>
    pub activity_type: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the application that the metric applies to.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the activity that the metric applies to.</p>
    pub journey_activity_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the journey that the metric applies to.</p>
    pub journey_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time, in ISO 8601 format, when Amazon Pinpoint last evaluated the execution status of the activity for this journey run and updated the data for the metric.</p>
    pub last_evaluated_time: ::std::option::Option<::std::string::String>,
    /// <p>A JSON object that contains the results of the query. For information about the structure and contents of the results, see see <a href="https://docs.aws.amazon.com//pinpoint/latest/developerguide/analytics-standard-metrics.html">Standard Amazon Pinpoint analytics metrics</a> in the <i>Amazon Pinpoint Developer Guide</i>.</p>
    pub metrics: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The unique identifier for the journey run that the metric applies to.</p>
    pub run_id: ::std::option::Option<::std::string::String>,
}
impl JourneyRunExecutionActivityMetricsResponse {
    /// <p>The type of activity that the metric applies to. Possible values are:</p>
    /// <ul>
    /// <li><p>CONDITIONAL_SPLIT – For a yes/no split activity, which is an activity that sends participants down one of two paths in a journey.</p></li>
    /// <li><p>HOLDOUT – For a holdout activity, which is an activity that stops a journey for a specified percentage of participants.</p></li>
    /// <li><p>MESSAGE – For an email activity, which is an activity that sends an email message to participants.</p></li>
    /// <li><p>MULTI_CONDITIONAL_SPLIT – For a multivariate split activity, which is an activity that sends participants down one of as many as five paths in a journey.</p></li>
    /// <li><p>RANDOM_SPLIT – For a random split activity, which is an activity that sends specified percentages of participants down one of as many as five paths in a journey.</p></li>
    /// <li><p>WAIT – For a wait activity, which is an activity that waits for a certain amount of time or until a specific date and time before moving participants to the next activity in a journey.</p></li>
    /// </ul>
    pub fn activity_type(&self) -> ::std::option::Option<&str> {
        self.activity_type.as_deref()
    }
    /// <p>The unique identifier for the application that the metric applies to.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier for the activity that the metric applies to.</p>
    pub fn journey_activity_id(&self) -> ::std::option::Option<&str> {
        self.journey_activity_id.as_deref()
    }
    /// <p>The unique identifier for the journey that the metric applies to.</p>
    pub fn journey_id(&self) -> ::std::option::Option<&str> {
        self.journey_id.as_deref()
    }
    /// <p>The date and time, in ISO 8601 format, when Amazon Pinpoint last evaluated the execution status of the activity for this journey run and updated the data for the metric.</p>
    pub fn last_evaluated_time(&self) -> ::std::option::Option<&str> {
        self.last_evaluated_time.as_deref()
    }
    /// <p>A JSON object that contains the results of the query. For information about the structure and contents of the results, see see <a href="https://docs.aws.amazon.com//pinpoint/latest/developerguide/analytics-standard-metrics.html">Standard Amazon Pinpoint analytics metrics</a> in the <i>Amazon Pinpoint Developer Guide</i>.</p>
    pub fn metrics(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.metrics.as_ref()
    }
    /// <p>The unique identifier for the journey run that the metric applies to.</p>
    pub fn run_id(&self) -> ::std::option::Option<&str> {
        self.run_id.as_deref()
    }
}
impl JourneyRunExecutionActivityMetricsResponse {
    /// Creates a new builder-style object to manufacture [`JourneyRunExecutionActivityMetricsResponse`](crate::types::JourneyRunExecutionActivityMetricsResponse).
    pub fn builder() -> crate::types::builders::JourneyRunExecutionActivityMetricsResponseBuilder {
        crate::types::builders::JourneyRunExecutionActivityMetricsResponseBuilder::default()
    }
}

/// A builder for [`JourneyRunExecutionActivityMetricsResponse`](crate::types::JourneyRunExecutionActivityMetricsResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JourneyRunExecutionActivityMetricsResponseBuilder {
    pub(crate) activity_type: ::std::option::Option<::std::string::String>,
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) journey_activity_id: ::std::option::Option<::std::string::String>,
    pub(crate) journey_id: ::std::option::Option<::std::string::String>,
    pub(crate) last_evaluated_time: ::std::option::Option<::std::string::String>,
    pub(crate) metrics: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) run_id: ::std::option::Option<::std::string::String>,
}
impl JourneyRunExecutionActivityMetricsResponseBuilder {
    /// <p>The type of activity that the metric applies to. Possible values are:</p>
    /// <ul>
    /// <li><p>CONDITIONAL_SPLIT – For a yes/no split activity, which is an activity that sends participants down one of two paths in a journey.</p></li>
    /// <li><p>HOLDOUT – For a holdout activity, which is an activity that stops a journey for a specified percentage of participants.</p></li>
    /// <li><p>MESSAGE – For an email activity, which is an activity that sends an email message to participants.</p></li>
    /// <li><p>MULTI_CONDITIONAL_SPLIT – For a multivariate split activity, which is an activity that sends participants down one of as many as five paths in a journey.</p></li>
    /// <li><p>RANDOM_SPLIT – For a random split activity, which is an activity that sends specified percentages of participants down one of as many as five paths in a journey.</p></li>
    /// <li><p>WAIT – For a wait activity, which is an activity that waits for a certain amount of time or until a specific date and time before moving participants to the next activity in a journey.</p></li>
    /// </ul>
    /// This field is required.
    pub fn activity_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.activity_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of activity that the metric applies to. Possible values are:</p>
    /// <ul>
    /// <li><p>CONDITIONAL_SPLIT – For a yes/no split activity, which is an activity that sends participants down one of two paths in a journey.</p></li>
    /// <li><p>HOLDOUT – For a holdout activity, which is an activity that stops a journey for a specified percentage of participants.</p></li>
    /// <li><p>MESSAGE – For an email activity, which is an activity that sends an email message to participants.</p></li>
    /// <li><p>MULTI_CONDITIONAL_SPLIT – For a multivariate split activity, which is an activity that sends participants down one of as many as five paths in a journey.</p></li>
    /// <li><p>RANDOM_SPLIT – For a random split activity, which is an activity that sends specified percentages of participants down one of as many as five paths in a journey.</p></li>
    /// <li><p>WAIT – For a wait activity, which is an activity that waits for a certain amount of time or until a specific date and time before moving participants to the next activity in a journey.</p></li>
    /// </ul>
    pub fn set_activity_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.activity_type = input;
        self
    }
    /// <p>The type of activity that the metric applies to. Possible values are:</p>
    /// <ul>
    /// <li><p>CONDITIONAL_SPLIT – For a yes/no split activity, which is an activity that sends participants down one of two paths in a journey.</p></li>
    /// <li><p>HOLDOUT – For a holdout activity, which is an activity that stops a journey for a specified percentage of participants.</p></li>
    /// <li><p>MESSAGE – For an email activity, which is an activity that sends an email message to participants.</p></li>
    /// <li><p>MULTI_CONDITIONAL_SPLIT – For a multivariate split activity, which is an activity that sends participants down one of as many as five paths in a journey.</p></li>
    /// <li><p>RANDOM_SPLIT – For a random split activity, which is an activity that sends specified percentages of participants down one of as many as five paths in a journey.</p></li>
    /// <li><p>WAIT – For a wait activity, which is an activity that waits for a certain amount of time or until a specific date and time before moving participants to the next activity in a journey.</p></li>
    /// </ul>
    pub fn get_activity_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.activity_type
    }
    /// <p>The unique identifier for the application that the metric applies to.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the application that the metric applies to.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier for the application that the metric applies to.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The unique identifier for the activity that the metric applies to.</p>
    /// This field is required.
    pub fn journey_activity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.journey_activity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the activity that the metric applies to.</p>
    pub fn set_journey_activity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.journey_activity_id = input;
        self
    }
    /// <p>The unique identifier for the activity that the metric applies to.</p>
    pub fn get_journey_activity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.journey_activity_id
    }
    /// <p>The unique identifier for the journey that the metric applies to.</p>
    /// This field is required.
    pub fn journey_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.journey_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the journey that the metric applies to.</p>
    pub fn set_journey_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.journey_id = input;
        self
    }
    /// <p>The unique identifier for the journey that the metric applies to.</p>
    pub fn get_journey_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.journey_id
    }
    /// <p>The date and time, in ISO 8601 format, when Amazon Pinpoint last evaluated the execution status of the activity for this journey run and updated the data for the metric.</p>
    /// This field is required.
    pub fn last_evaluated_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_evaluated_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time, in ISO 8601 format, when Amazon Pinpoint last evaluated the execution status of the activity for this journey run and updated the data for the metric.</p>
    pub fn set_last_evaluated_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_evaluated_time = input;
        self
    }
    /// <p>The date and time, in ISO 8601 format, when Amazon Pinpoint last evaluated the execution status of the activity for this journey run and updated the data for the metric.</p>
    pub fn get_last_evaluated_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_evaluated_time
    }
    /// Adds a key-value pair to `metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>A JSON object that contains the results of the query. For information about the structure and contents of the results, see see <a href="https://docs.aws.amazon.com//pinpoint/latest/developerguide/analytics-standard-metrics.html">Standard Amazon Pinpoint analytics metrics</a> in the <i>Amazon Pinpoint Developer Guide</i>.</p>
    pub fn metrics(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.metrics.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.metrics = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A JSON object that contains the results of the query. For information about the structure and contents of the results, see see <a href="https://docs.aws.amazon.com//pinpoint/latest/developerguide/analytics-standard-metrics.html">Standard Amazon Pinpoint analytics metrics</a> in the <i>Amazon Pinpoint Developer Guide</i>.</p>
    pub fn set_metrics(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.metrics = input;
        self
    }
    /// <p>A JSON object that contains the results of the query. For information about the structure and contents of the results, see see <a href="https://docs.aws.amazon.com//pinpoint/latest/developerguide/analytics-standard-metrics.html">Standard Amazon Pinpoint analytics metrics</a> in the <i>Amazon Pinpoint Developer Guide</i>.</p>
    pub fn get_metrics(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.metrics
    }
    /// <p>The unique identifier for the journey run that the metric applies to.</p>
    /// This field is required.
    pub fn run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the journey run that the metric applies to.</p>
    pub fn set_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The unique identifier for the journey run that the metric applies to.</p>
    pub fn get_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_id
    }
    /// Consumes the builder and constructs a [`JourneyRunExecutionActivityMetricsResponse`](crate::types::JourneyRunExecutionActivityMetricsResponse).
    pub fn build(self) -> crate::types::JourneyRunExecutionActivityMetricsResponse {
        crate::types::JourneyRunExecutionActivityMetricsResponse {
            activity_type: self.activity_type,
            application_id: self.application_id,
            journey_activity_id: self.journey_activity_id,
            journey_id: self.journey_id,
            last_evaluated_time: self.last_evaluated_time,
            metrics: self.metrics,
            run_id: self.run_id,
        }
    }
}
