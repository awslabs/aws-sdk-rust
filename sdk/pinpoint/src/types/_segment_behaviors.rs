// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies dimension settings for including or excluding endpoints from a segment based on how recently an endpoint was active.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SegmentBehaviors {
    /// <p>The dimension settings that are based on how recently an endpoint was active.</p>
    #[doc(hidden)]
    pub recency: std::option::Option<crate::types::RecencyDimension>,
}
impl SegmentBehaviors {
    /// <p>The dimension settings that are based on how recently an endpoint was active.</p>
    pub fn recency(&self) -> std::option::Option<&crate::types::RecencyDimension> {
        self.recency.as_ref()
    }
}
impl SegmentBehaviors {
    /// Creates a new builder-style object to manufacture [`SegmentBehaviors`](crate::types::SegmentBehaviors).
    pub fn builder() -> crate::types::builders::SegmentBehaviorsBuilder {
        crate::types::builders::SegmentBehaviorsBuilder::default()
    }
}

/// A builder for [`SegmentBehaviors`](crate::types::SegmentBehaviors).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SegmentBehaviorsBuilder {
    pub(crate) recency: std::option::Option<crate::types::RecencyDimension>,
}
impl SegmentBehaviorsBuilder {
    /// <p>The dimension settings that are based on how recently an endpoint was active.</p>
    pub fn recency(mut self, input: crate::types::RecencyDimension) -> Self {
        self.recency = Some(input);
        self
    }
    /// <p>The dimension settings that are based on how recently an endpoint was active.</p>
    pub fn set_recency(
        mut self,
        input: std::option::Option<crate::types::RecencyDimension>,
    ) -> Self {
        self.recency = input;
        self
    }
    /// Consumes the builder and constructs a [`SegmentBehaviors`](crate::types::SegmentBehaviors).
    pub fn build(self) -> crate::types::SegmentBehaviors {
        crate::types::SegmentBehaviors {
            recency: self.recency,
        }
    }
}
