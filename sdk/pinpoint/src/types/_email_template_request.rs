// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the content and settings for a message template that can be used in messages that are sent through the email channel.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EmailTemplateRequest {
    /// <p>A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.</p>
    #[doc(hidden)]
    pub default_substitutions: std::option::Option<std::string::String>,
    /// <p>The message body, in HTML format, to use in email messages that are based on the message template. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    #[doc(hidden)]
    pub html_part: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the recommender model to use for the message template. Amazon Pinpoint uses this value to determine how to retrieve and process data from a recommender model when it sends messages that use the template, if the template contains message variables for recommendation data.</p>
    #[doc(hidden)]
    pub recommender_id: std::option::Option<std::string::String>,
    /// <p>The subject line, or title, to use in email messages that are based on the message template.</p>
    #[doc(hidden)]
    pub subject: std::option::Option<std::string::String>,
    /// <p>A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A custom description of the message template.</p>
    #[doc(hidden)]
    pub template_description: std::option::Option<std::string::String>,
    /// <p>The message body, in plain text format, to use in email messages that are based on the message template. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    #[doc(hidden)]
    pub text_part: std::option::Option<std::string::String>,
}
impl EmailTemplateRequest {
    /// <p>A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.</p>
    pub fn default_substitutions(&self) -> std::option::Option<&str> {
        self.default_substitutions.as_deref()
    }
    /// <p>The message body, in HTML format, to use in email messages that are based on the message template. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn html_part(&self) -> std::option::Option<&str> {
        self.html_part.as_deref()
    }
    /// <p>The unique identifier for the recommender model to use for the message template. Amazon Pinpoint uses this value to determine how to retrieve and process data from a recommender model when it sends messages that use the template, if the template contains message variables for recommendation data.</p>
    pub fn recommender_id(&self) -> std::option::Option<&str> {
        self.recommender_id.as_deref()
    }
    /// <p>The subject line, or title, to use in email messages that are based on the message template.</p>
    pub fn subject(&self) -> std::option::Option<&str> {
        self.subject.as_deref()
    }
    /// <p>A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>A custom description of the message template.</p>
    pub fn template_description(&self) -> std::option::Option<&str> {
        self.template_description.as_deref()
    }
    /// <p>The message body, in plain text format, to use in email messages that are based on the message template. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn text_part(&self) -> std::option::Option<&str> {
        self.text_part.as_deref()
    }
}
impl EmailTemplateRequest {
    /// Creates a new builder-style object to manufacture [`EmailTemplateRequest`](crate::types::EmailTemplateRequest).
    pub fn builder() -> crate::types::builders::EmailTemplateRequestBuilder {
        crate::types::builders::EmailTemplateRequestBuilder::default()
    }
}

/// A builder for [`EmailTemplateRequest`](crate::types::EmailTemplateRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EmailTemplateRequestBuilder {
    pub(crate) default_substitutions: std::option::Option<std::string::String>,
    pub(crate) html_part: std::option::Option<std::string::String>,
    pub(crate) recommender_id: std::option::Option<std::string::String>,
    pub(crate) subject: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) template_description: std::option::Option<std::string::String>,
    pub(crate) text_part: std::option::Option<std::string::String>,
}
impl EmailTemplateRequestBuilder {
    /// <p>A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.</p>
    pub fn default_substitutions(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_substitutions = Some(input.into());
        self
    }
    /// <p>A JSON object that specifies the default values to use for message variables in the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable. When you create a message that's based on the template, you can override these defaults with message-specific and address-specific variables and values.</p>
    pub fn set_default_substitutions(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_substitutions = input;
        self
    }
    /// <p>The message body, in HTML format, to use in email messages that are based on the message template. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn html_part(mut self, input: impl Into<std::string::String>) -> Self {
        self.html_part = Some(input.into());
        self
    }
    /// <p>The message body, in HTML format, to use in email messages that are based on the message template. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn set_html_part(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.html_part = input;
        self
    }
    /// <p>The unique identifier for the recommender model to use for the message template. Amazon Pinpoint uses this value to determine how to retrieve and process data from a recommender model when it sends messages that use the template, if the template contains message variables for recommendation data.</p>
    pub fn recommender_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.recommender_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the recommender model to use for the message template. Amazon Pinpoint uses this value to determine how to retrieve and process data from a recommender model when it sends messages that use the template, if the template contains message variables for recommendation data.</p>
    pub fn set_recommender_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.recommender_id = input;
        self
    }
    /// <p>The subject line, or title, to use in email messages that are based on the message template.</p>
    pub fn subject(mut self, input: impl Into<std::string::String>) -> Self {
        self.subject = Some(input.into());
        self
    }
    /// <p>The subject line, or title, to use in email messages that are based on the message template.</p>
    pub fn set_subject(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subject = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A string-to-string map of key-value pairs that defines the tags to associate with the message template. Each tag consists of a required tag key and an associated tag value.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>A custom description of the message template.</p>
    pub fn template_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_description = Some(input.into());
        self
    }
    /// <p>A custom description of the message template.</p>
    pub fn set_template_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.template_description = input;
        self
    }
    /// <p>The message body, in plain text format, to use in email messages that are based on the message template. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn text_part(mut self, input: impl Into<std::string::String>) -> Self {
        self.text_part = Some(input.into());
        self
    }
    /// <p>The message body, in plain text format, to use in email messages that are based on the message template. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn set_text_part(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.text_part = input;
        self
    }
    /// Consumes the builder and constructs a [`EmailTemplateRequest`](crate::types::EmailTemplateRequest).
    pub fn build(self) -> crate::types::EmailTemplateRequest {
        crate::types::EmailTemplateRequest {
            default_substitutions: self.default_substitutions,
            html_part: self.html_part,
            recommender_id: self.recommender_id,
            subject: self.subject,
            tags: self.tags,
            template_description: self.template_description,
            text_part: self.text_part,
        }
    }
}
