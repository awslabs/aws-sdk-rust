// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about all the segments that are associated with an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SegmentsResponse {
    /// <p>An array of responses, one for each segment that's associated with the application (Segments resource) or each version of a segment that's associated with the application (Segment Versions resource).</p>
    pub item: ::std::option::Option<::std::vec::Vec<crate::types::SegmentResponse>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl SegmentsResponse {
    /// <p>An array of responses, one for each segment that's associated with the application (Segments resource) or each version of a segment that's associated with the application (Segment Versions resource).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.item.is_none()`.
    pub fn item(&self) -> &[crate::types::SegmentResponse] {
        self.item.as_deref().unwrap_or_default()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl SegmentsResponse {
    /// Creates a new builder-style object to manufacture [`SegmentsResponse`](crate::types::SegmentsResponse).
    pub fn builder() -> crate::types::builders::SegmentsResponseBuilder {
        crate::types::builders::SegmentsResponseBuilder::default()
    }
}

/// A builder for [`SegmentsResponse`](crate::types::SegmentsResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SegmentsResponseBuilder {
    pub(crate) item: ::std::option::Option<::std::vec::Vec<crate::types::SegmentResponse>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl SegmentsResponseBuilder {
    /// Appends an item to `item`.
    ///
    /// To override the contents of this collection use [`set_item`](Self::set_item).
    ///
    /// <p>An array of responses, one for each segment that's associated with the application (Segments resource) or each version of a segment that's associated with the application (Segment Versions resource).</p>
    pub fn item(mut self, input: crate::types::SegmentResponse) -> Self {
        let mut v = self.item.unwrap_or_default();
        v.push(input);
        self.item = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of responses, one for each segment that's associated with the application (Segments resource) or each version of a segment that's associated with the application (Segment Versions resource).</p>
    pub fn set_item(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SegmentResponse>>) -> Self {
        self.item = input;
        self
    }
    /// <p>An array of responses, one for each segment that's associated with the application (Segments resource) or each version of a segment that's associated with the application (Segment Versions resource).</p>
    pub fn get_item(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SegmentResponse>> {
        &self.item
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`SegmentsResponse`](crate::types::SegmentsResponse).
    pub fn build(self) -> crate::types::SegmentsResponse {
        crate::types::SegmentsResponse {
            item: self.item,
            next_token: self.next_token,
        }
    }
}
