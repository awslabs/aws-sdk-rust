// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the default settings for an application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WriteApplicationSettingsRequest {
    /// <p>The settings for the AWS Lambda function to invoke by default as a code hook for campaigns in the application. You can use this hook to customize segments that are used by campaigns in the application.</p>
    /// <p>To override these settings and define custom settings for a specific campaign, use the CampaignHook object of the
    /// <link linkend="apps-application-id-campaigns-campaign-id">Campaign resource.</p>
    #[doc(hidden)]
    pub campaign_hook: std::option::Option<crate::types::CampaignHook>,
    /// <p>Specifies whether to enable application-related alarms in Amazon CloudWatch.</p>
    #[doc(hidden)]
    pub cloud_watch_metrics_enabled: bool,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub event_tagging_enabled: bool,
    /// <p>The default sending limits for campaigns in the application. To override these limits and define custom limits for a specific campaign or journey, use the
    /// <link linkend="apps-application-id-campaigns-campaign-id">Campaign resource or the
    /// <link linkend="apps-application-id-journeys-journey-id">Journey resource, respectively.</p>
    #[doc(hidden)]
    pub limits: std::option::Option<crate::types::CampaignLimits>,
    /// <p>The default quiet time for campaigns in the application. Quiet time is a specific time range when messages aren't sent to endpoints, if all the following conditions are met:</p>
    /// <ul>
    /// <li><p>The EndpointDemographic.Timezone property of the endpoint is set to a valid value.</p></li>
    /// <li><p>The current time in the endpoint's time zone is later than or equal to the time specified by the QuietTime.Start property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// <li><p>The current time in the endpoint's time zone is earlier than or equal to the time specified by the QuietTime.End property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// </ul>
    /// <p>If any of the preceding conditions isn't met, the endpoint will receive messages from a campaign or journey, even if quiet time is enabled.</p>
    /// <p>To override the default quiet time settings for a specific campaign or journey, use the
    /// <link linkend="apps-application-id-campaigns-campaign-id">Campaign resource or the
    /// <link linkend="apps-application-id-journeys-journey-id">Journey resource to define a custom quiet time for the campaign or journey.</p>
    #[doc(hidden)]
    pub quiet_time: std::option::Option<crate::types::QuietTime>,
}
impl WriteApplicationSettingsRequest {
    /// <p>The settings for the AWS Lambda function to invoke by default as a code hook for campaigns in the application. You can use this hook to customize segments that are used by campaigns in the application.</p>
    /// <p>To override these settings and define custom settings for a specific campaign, use the CampaignHook object of the
    /// <link linkend="apps-application-id-campaigns-campaign-id">Campaign resource.</p>
    pub fn campaign_hook(&self) -> std::option::Option<&crate::types::CampaignHook> {
        self.campaign_hook.as_ref()
    }
    /// <p>Specifies whether to enable application-related alarms in Amazon CloudWatch.</p>
    pub fn cloud_watch_metrics_enabled(&self) -> bool {
        self.cloud_watch_metrics_enabled
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn event_tagging_enabled(&self) -> bool {
        self.event_tagging_enabled
    }
    /// <p>The default sending limits for campaigns in the application. To override these limits and define custom limits for a specific campaign or journey, use the
    /// <link linkend="apps-application-id-campaigns-campaign-id">Campaign resource or the
    /// <link linkend="apps-application-id-journeys-journey-id">Journey resource, respectively.</p>
    pub fn limits(&self) -> std::option::Option<&crate::types::CampaignLimits> {
        self.limits.as_ref()
    }
    /// <p>The default quiet time for campaigns in the application. Quiet time is a specific time range when messages aren't sent to endpoints, if all the following conditions are met:</p>
    /// <ul>
    /// <li><p>The EndpointDemographic.Timezone property of the endpoint is set to a valid value.</p></li>
    /// <li><p>The current time in the endpoint's time zone is later than or equal to the time specified by the QuietTime.Start property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// <li><p>The current time in the endpoint's time zone is earlier than or equal to the time specified by the QuietTime.End property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// </ul>
    /// <p>If any of the preceding conditions isn't met, the endpoint will receive messages from a campaign or journey, even if quiet time is enabled.</p>
    /// <p>To override the default quiet time settings for a specific campaign or journey, use the
    /// <link linkend="apps-application-id-campaigns-campaign-id">Campaign resource or the
    /// <link linkend="apps-application-id-journeys-journey-id">Journey resource to define a custom quiet time for the campaign or journey.</p>
    pub fn quiet_time(&self) -> std::option::Option<&crate::types::QuietTime> {
        self.quiet_time.as_ref()
    }
}
impl WriteApplicationSettingsRequest {
    /// Creates a new builder-style object to manufacture [`WriteApplicationSettingsRequest`](crate::types::WriteApplicationSettingsRequest).
    pub fn builder() -> crate::types::builders::WriteApplicationSettingsRequestBuilder {
        crate::types::builders::WriteApplicationSettingsRequestBuilder::default()
    }
}

/// A builder for [`WriteApplicationSettingsRequest`](crate::types::WriteApplicationSettingsRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WriteApplicationSettingsRequestBuilder {
    pub(crate) campaign_hook: std::option::Option<crate::types::CampaignHook>,
    pub(crate) cloud_watch_metrics_enabled: std::option::Option<bool>,
    pub(crate) event_tagging_enabled: std::option::Option<bool>,
    pub(crate) limits: std::option::Option<crate::types::CampaignLimits>,
    pub(crate) quiet_time: std::option::Option<crate::types::QuietTime>,
}
impl WriteApplicationSettingsRequestBuilder {
    /// <p>The settings for the AWS Lambda function to invoke by default as a code hook for campaigns in the application. You can use this hook to customize segments that are used by campaigns in the application.</p>
    /// <p>To override these settings and define custom settings for a specific campaign, use the CampaignHook object of the
    /// <link linkend="apps-application-id-campaigns-campaign-id">Campaign resource.</p>
    pub fn campaign_hook(mut self, input: crate::types::CampaignHook) -> Self {
        self.campaign_hook = Some(input);
        self
    }
    /// <p>The settings for the AWS Lambda function to invoke by default as a code hook for campaigns in the application. You can use this hook to customize segments that are used by campaigns in the application.</p>
    /// <p>To override these settings and define custom settings for a specific campaign, use the CampaignHook object of the
    /// <link linkend="apps-application-id-campaigns-campaign-id">Campaign resource.</p>
    pub fn set_campaign_hook(
        mut self,
        input: std::option::Option<crate::types::CampaignHook>,
    ) -> Self {
        self.campaign_hook = input;
        self
    }
    /// <p>Specifies whether to enable application-related alarms in Amazon CloudWatch.</p>
    pub fn cloud_watch_metrics_enabled(mut self, input: bool) -> Self {
        self.cloud_watch_metrics_enabled = Some(input);
        self
    }
    /// <p>Specifies whether to enable application-related alarms in Amazon CloudWatch.</p>
    pub fn set_cloud_watch_metrics_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.cloud_watch_metrics_enabled = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn event_tagging_enabled(mut self, input: bool) -> Self {
        self.event_tagging_enabled = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_event_tagging_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.event_tagging_enabled = input;
        self
    }
    /// <p>The default sending limits for campaigns in the application. To override these limits and define custom limits for a specific campaign or journey, use the
    /// <link linkend="apps-application-id-campaigns-campaign-id">Campaign resource or the
    /// <link linkend="apps-application-id-journeys-journey-id">Journey resource, respectively.</p>
    pub fn limits(mut self, input: crate::types::CampaignLimits) -> Self {
        self.limits = Some(input);
        self
    }
    /// <p>The default sending limits for campaigns in the application. To override these limits and define custom limits for a specific campaign or journey, use the
    /// <link linkend="apps-application-id-campaigns-campaign-id">Campaign resource or the
    /// <link linkend="apps-application-id-journeys-journey-id">Journey resource, respectively.</p>
    pub fn set_limits(mut self, input: std::option::Option<crate::types::CampaignLimits>) -> Self {
        self.limits = input;
        self
    }
    /// <p>The default quiet time for campaigns in the application. Quiet time is a specific time range when messages aren't sent to endpoints, if all the following conditions are met:</p>
    /// <ul>
    /// <li><p>The EndpointDemographic.Timezone property of the endpoint is set to a valid value.</p></li>
    /// <li><p>The current time in the endpoint's time zone is later than or equal to the time specified by the QuietTime.Start property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// <li><p>The current time in the endpoint's time zone is earlier than or equal to the time specified by the QuietTime.End property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// </ul>
    /// <p>If any of the preceding conditions isn't met, the endpoint will receive messages from a campaign or journey, even if quiet time is enabled.</p>
    /// <p>To override the default quiet time settings for a specific campaign or journey, use the
    /// <link linkend="apps-application-id-campaigns-campaign-id">Campaign resource or the
    /// <link linkend="apps-application-id-journeys-journey-id">Journey resource to define a custom quiet time for the campaign or journey.</p>
    pub fn quiet_time(mut self, input: crate::types::QuietTime) -> Self {
        self.quiet_time = Some(input);
        self
    }
    /// <p>The default quiet time for campaigns in the application. Quiet time is a specific time range when messages aren't sent to endpoints, if all the following conditions are met:</p>
    /// <ul>
    /// <li><p>The EndpointDemographic.Timezone property of the endpoint is set to a valid value.</p></li>
    /// <li><p>The current time in the endpoint's time zone is later than or equal to the time specified by the QuietTime.Start property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// <li><p>The current time in the endpoint's time zone is earlier than or equal to the time specified by the QuietTime.End property for the application (or a campaign or journey that has custom quiet time settings).</p></li>
    /// </ul>
    /// <p>If any of the preceding conditions isn't met, the endpoint will receive messages from a campaign or journey, even if quiet time is enabled.</p>
    /// <p>To override the default quiet time settings for a specific campaign or journey, use the
    /// <link linkend="apps-application-id-campaigns-campaign-id">Campaign resource or the
    /// <link linkend="apps-application-id-journeys-journey-id">Journey resource to define a custom quiet time for the campaign or journey.</p>
    pub fn set_quiet_time(mut self, input: std::option::Option<crate::types::QuietTime>) -> Self {
        self.quiet_time = input;
        self
    }
    /// Consumes the builder and constructs a [`WriteApplicationSettingsRequest`](crate::types::WriteApplicationSettingsRequest).
    pub fn build(self) -> crate::types::WriteApplicationSettingsRequest {
        crate::types::WriteApplicationSettingsRequest {
            campaign_hook: self.campaign_hook,
            cloud_watch_metrics_enabled: self.cloud_watch_metrics_enabled.unwrap_or_default(),
            event_tagging_enabled: self.event_tagging_enabled.unwrap_or_default(),
            limits: self.limits,
            quiet_time: self.quiet_time,
        }
    }
}
