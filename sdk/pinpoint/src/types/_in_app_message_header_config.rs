// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Text config for Message Header.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InAppMessageHeaderConfig {
    /// <p>The alignment of the text. Valid values: LEFT, CENTER, RIGHT.</p>
    pub alignment: ::std::option::Option<crate::types::Alignment>,
    /// <p>Message Header.</p>
    pub header: ::std::option::Option<::std::string::String>,
    /// <p>The text color.</p>
    pub text_color: ::std::option::Option<::std::string::String>,
}
impl InAppMessageHeaderConfig {
    /// <p>The alignment of the text. Valid values: LEFT, CENTER, RIGHT.</p>
    pub fn alignment(&self) -> ::std::option::Option<&crate::types::Alignment> {
        self.alignment.as_ref()
    }
    /// <p>Message Header.</p>
    pub fn header(&self) -> ::std::option::Option<&str> {
        self.header.as_deref()
    }
    /// <p>The text color.</p>
    pub fn text_color(&self) -> ::std::option::Option<&str> {
        self.text_color.as_deref()
    }
}
impl InAppMessageHeaderConfig {
    /// Creates a new builder-style object to manufacture [`InAppMessageHeaderConfig`](crate::types::InAppMessageHeaderConfig).
    pub fn builder() -> crate::types::builders::InAppMessageHeaderConfigBuilder {
        crate::types::builders::InAppMessageHeaderConfigBuilder::default()
    }
}

/// A builder for [`InAppMessageHeaderConfig`](crate::types::InAppMessageHeaderConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InAppMessageHeaderConfigBuilder {
    pub(crate) alignment: ::std::option::Option<crate::types::Alignment>,
    pub(crate) header: ::std::option::Option<::std::string::String>,
    pub(crate) text_color: ::std::option::Option<::std::string::String>,
}
impl InAppMessageHeaderConfigBuilder {
    /// <p>The alignment of the text. Valid values: LEFT, CENTER, RIGHT.</p>
    /// This field is required.
    pub fn alignment(mut self, input: crate::types::Alignment) -> Self {
        self.alignment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The alignment of the text. Valid values: LEFT, CENTER, RIGHT.</p>
    pub fn set_alignment(mut self, input: ::std::option::Option<crate::types::Alignment>) -> Self {
        self.alignment = input;
        self
    }
    /// <p>The alignment of the text. Valid values: LEFT, CENTER, RIGHT.</p>
    pub fn get_alignment(&self) -> &::std::option::Option<crate::types::Alignment> {
        &self.alignment
    }
    /// <p>Message Header.</p>
    /// This field is required.
    pub fn header(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.header = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Message Header.</p>
    pub fn set_header(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.header = input;
        self
    }
    /// <p>Message Header.</p>
    pub fn get_header(&self) -> &::std::option::Option<::std::string::String> {
        &self.header
    }
    /// <p>The text color.</p>
    /// This field is required.
    pub fn text_color(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text_color = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text color.</p>
    pub fn set_text_color(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text_color = input;
        self
    }
    /// <p>The text color.</p>
    pub fn get_text_color(&self) -> &::std::option::Option<::std::string::String> {
        &self.text_color
    }
    /// Consumes the builder and constructs a [`InAppMessageHeaderConfig`](crate::types::InAppMessageHeaderConfig).
    pub fn build(self) -> crate::types::InAppMessageHeaderConfig {
        crate::types::InAppMessageHeaderConfig {
            alignment: self.alignment,
            header: self.header,
            text_color: self.text_color,
        }
    }
}
