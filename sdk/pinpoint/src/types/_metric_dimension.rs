// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies metric-based criteria for including or excluding endpoints from a segment. These criteria derive from custom metrics that you define for endpoints.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricDimension {
    /// <p>The operator to use when comparing metric values. Valid values are: GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN_OR_EQUAL, and EQUAL.</p>
    #[doc(hidden)]
    pub comparison_operator: std::option::Option<std::string::String>,
    /// <p>The value to compare.</p>
    #[doc(hidden)]
    pub value: f64,
}
impl MetricDimension {
    /// <p>The operator to use when comparing metric values. Valid values are: GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN_OR_EQUAL, and EQUAL.</p>
    pub fn comparison_operator(&self) -> std::option::Option<&str> {
        self.comparison_operator.as_deref()
    }
    /// <p>The value to compare.</p>
    pub fn value(&self) -> f64 {
        self.value
    }
}
impl MetricDimension {
    /// Creates a new builder-style object to manufacture [`MetricDimension`](crate::types::MetricDimension).
    pub fn builder() -> crate::types::builders::MetricDimensionBuilder {
        crate::types::builders::MetricDimensionBuilder::default()
    }
}

/// A builder for [`MetricDimension`](crate::types::MetricDimension).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricDimensionBuilder {
    pub(crate) comparison_operator: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<f64>,
}
impl MetricDimensionBuilder {
    /// <p>The operator to use when comparing metric values. Valid values are: GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN_OR_EQUAL, and EQUAL.</p>
    pub fn comparison_operator(mut self, input: impl Into<std::string::String>) -> Self {
        self.comparison_operator = Some(input.into());
        self
    }
    /// <p>The operator to use when comparing metric values. Valid values are: GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN_OR_EQUAL, and EQUAL.</p>
    pub fn set_comparison_operator(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.comparison_operator = input;
        self
    }
    /// <p>The value to compare.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value to compare.</p>
    pub fn set_value(mut self, input: std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricDimension`](crate::types::MetricDimension).
    pub fn build(self) -> crate::types::MetricDimension {
        crate::types::MetricDimension {
            comparison_operator: self.comparison_operator,
            value: self.value.unwrap_or_default(),
        }
    }
}
