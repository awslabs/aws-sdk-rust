// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the results of a query that retrieved the data for a standard metric that applies to an application, campaign, or journey.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResultRow {
    /// <p>An array of objects that defines the field and field values that were used to group data in a result set that contains multiple results. This value is null if the data in a result set isn’t grouped.</p>
    #[doc(hidden)]
    pub grouped_bys: std::option::Option<std::vec::Vec<crate::types::ResultRowValue>>,
    /// <p>An array of objects that provides pre-aggregated values for a standard metric that applies to an application, campaign, or journey.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<crate::types::ResultRowValue>>,
}
impl ResultRow {
    /// <p>An array of objects that defines the field and field values that were used to group data in a result set that contains multiple results. This value is null if the data in a result set isn’t grouped.</p>
    pub fn grouped_bys(&self) -> std::option::Option<&[crate::types::ResultRowValue]> {
        self.grouped_bys.as_deref()
    }
    /// <p>An array of objects that provides pre-aggregated values for a standard metric that applies to an application, campaign, or journey.</p>
    pub fn values(&self) -> std::option::Option<&[crate::types::ResultRowValue]> {
        self.values.as_deref()
    }
}
impl ResultRow {
    /// Creates a new builder-style object to manufacture [`ResultRow`](crate::types::ResultRow).
    pub fn builder() -> crate::types::builders::ResultRowBuilder {
        crate::types::builders::ResultRowBuilder::default()
    }
}

/// A builder for [`ResultRow`](crate::types::ResultRow).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResultRowBuilder {
    pub(crate) grouped_bys: std::option::Option<std::vec::Vec<crate::types::ResultRowValue>>,
    pub(crate) values: std::option::Option<std::vec::Vec<crate::types::ResultRowValue>>,
}
impl ResultRowBuilder {
    /// Appends an item to `grouped_bys`.
    ///
    /// To override the contents of this collection use [`set_grouped_bys`](Self::set_grouped_bys).
    ///
    /// <p>An array of objects that defines the field and field values that were used to group data in a result set that contains multiple results. This value is null if the data in a result set isn’t grouped.</p>
    pub fn grouped_bys(mut self, input: crate::types::ResultRowValue) -> Self {
        let mut v = self.grouped_bys.unwrap_or_default();
        v.push(input);
        self.grouped_bys = Some(v);
        self
    }
    /// <p>An array of objects that defines the field and field values that were used to group data in a result set that contains multiple results. This value is null if the data in a result set isn’t grouped.</p>
    pub fn set_grouped_bys(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResultRowValue>>,
    ) -> Self {
        self.grouped_bys = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>An array of objects that provides pre-aggregated values for a standard metric that applies to an application, campaign, or journey.</p>
    pub fn values(mut self, input: crate::types::ResultRowValue) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = Some(v);
        self
    }
    /// <p>An array of objects that provides pre-aggregated values for a standard metric that applies to an application, campaign, or journey.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResultRowValue>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// Consumes the builder and constructs a [`ResultRow`](crate::types::ResultRow).
    pub fn build(self) -> crate::types::ResultRow {
        crate::types::ResultRow {
            grouped_bys: self.grouped_bys,
            values: self.values,
        }
    }
}
