// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies criteria for including or excluding endpoints from a segment based on how recently an endpoint was active.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecencyDimension {
    /// <p>The duration to use when determining whether an endpoint is active or inactive.</p>
    #[doc(hidden)]
    pub duration: std::option::Option<crate::types::Duration>,
    /// <p>The type of recency dimension to use for the segment. Valid values are: ACTIVE, endpoints that were active within the specified duration are included in the segment; and, INACTIVE, endpoints that weren't active within the specified duration are included in the segment.</p>
    #[doc(hidden)]
    pub recency_type: std::option::Option<crate::types::RecencyType>,
}
impl RecencyDimension {
    /// <p>The duration to use when determining whether an endpoint is active or inactive.</p>
    pub fn duration(&self) -> std::option::Option<&crate::types::Duration> {
        self.duration.as_ref()
    }
    /// <p>The type of recency dimension to use for the segment. Valid values are: ACTIVE, endpoints that were active within the specified duration are included in the segment; and, INACTIVE, endpoints that weren't active within the specified duration are included in the segment.</p>
    pub fn recency_type(&self) -> std::option::Option<&crate::types::RecencyType> {
        self.recency_type.as_ref()
    }
}
impl RecencyDimension {
    /// Creates a new builder-style object to manufacture [`RecencyDimension`](crate::types::RecencyDimension).
    pub fn builder() -> crate::types::builders::RecencyDimensionBuilder {
        crate::types::builders::RecencyDimensionBuilder::default()
    }
}

/// A builder for [`RecencyDimension`](crate::types::RecencyDimension).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecencyDimensionBuilder {
    pub(crate) duration: std::option::Option<crate::types::Duration>,
    pub(crate) recency_type: std::option::Option<crate::types::RecencyType>,
}
impl RecencyDimensionBuilder {
    /// <p>The duration to use when determining whether an endpoint is active or inactive.</p>
    pub fn duration(mut self, input: crate::types::Duration) -> Self {
        self.duration = Some(input);
        self
    }
    /// <p>The duration to use when determining whether an endpoint is active or inactive.</p>
    pub fn set_duration(mut self, input: std::option::Option<crate::types::Duration>) -> Self {
        self.duration = input;
        self
    }
    /// <p>The type of recency dimension to use for the segment. Valid values are: ACTIVE, endpoints that were active within the specified duration are included in the segment; and, INACTIVE, endpoints that weren't active within the specified duration are included in the segment.</p>
    pub fn recency_type(mut self, input: crate::types::RecencyType) -> Self {
        self.recency_type = Some(input);
        self
    }
    /// <p>The type of recency dimension to use for the segment. Valid values are: ACTIVE, endpoints that were active within the specified duration are included in the segment; and, INACTIVE, endpoints that weren't active within the specified duration are included in the segment.</p>
    pub fn set_recency_type(
        mut self,
        input: std::option::Option<crate::types::RecencyType>,
    ) -> Self {
        self.recency_type = input;
        self
    }
    /// Consumes the builder and constructs a [`RecencyDimension`](crate::types::RecencyDimension).
    pub fn build(self) -> crate::types::RecencyDimension {
        crate::types::RecencyDimension {
            duration: self.duration,
            recency_type: self.recency_type,
        }
    }
}
