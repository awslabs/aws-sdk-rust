// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the settings for a campaign treatment. A <i>treatment</i> is a variation of a campaign that's used for A/B testing of a campaign.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WriteTreatmentResource {
    /// <p>The delivery configuration settings for sending the treatment through a custom channel. This object is required if the MessageConfiguration object for the treatment specifies a CustomMessage object.</p>
    #[doc(hidden)]
    pub custom_delivery_configuration:
        std::option::Option<crate::types::CustomDeliveryConfiguration>,
    /// <p>The message configuration settings for the treatment.</p>
    #[doc(hidden)]
    pub message_configuration: std::option::Option<crate::types::MessageConfiguration>,
    /// <p>The schedule settings for the treatment.</p>
    #[doc(hidden)]
    pub schedule: std::option::Option<crate::types::Schedule>,
    /// <p>The allocated percentage of users (segment members) to send the treatment to.</p>
    #[doc(hidden)]
    pub size_percent: i32,
    /// <p>The message template to use for the treatment.</p>
    #[doc(hidden)]
    pub template_configuration: std::option::Option<crate::types::TemplateConfiguration>,
    /// <p>A custom description of the treatment.</p>
    #[doc(hidden)]
    pub treatment_description: std::option::Option<std::string::String>,
    /// <p>A custom name for the treatment.</p>
    #[doc(hidden)]
    pub treatment_name: std::option::Option<std::string::String>,
}
impl WriteTreatmentResource {
    /// <p>The delivery configuration settings for sending the treatment through a custom channel. This object is required if the MessageConfiguration object for the treatment specifies a CustomMessage object.</p>
    pub fn custom_delivery_configuration(
        &self,
    ) -> std::option::Option<&crate::types::CustomDeliveryConfiguration> {
        self.custom_delivery_configuration.as_ref()
    }
    /// <p>The message configuration settings for the treatment.</p>
    pub fn message_configuration(
        &self,
    ) -> std::option::Option<&crate::types::MessageConfiguration> {
        self.message_configuration.as_ref()
    }
    /// <p>The schedule settings for the treatment.</p>
    pub fn schedule(&self) -> std::option::Option<&crate::types::Schedule> {
        self.schedule.as_ref()
    }
    /// <p>The allocated percentage of users (segment members) to send the treatment to.</p>
    pub fn size_percent(&self) -> i32 {
        self.size_percent
    }
    /// <p>The message template to use for the treatment.</p>
    pub fn template_configuration(
        &self,
    ) -> std::option::Option<&crate::types::TemplateConfiguration> {
        self.template_configuration.as_ref()
    }
    /// <p>A custom description of the treatment.</p>
    pub fn treatment_description(&self) -> std::option::Option<&str> {
        self.treatment_description.as_deref()
    }
    /// <p>A custom name for the treatment.</p>
    pub fn treatment_name(&self) -> std::option::Option<&str> {
        self.treatment_name.as_deref()
    }
}
impl WriteTreatmentResource {
    /// Creates a new builder-style object to manufacture [`WriteTreatmentResource`](crate::types::WriteTreatmentResource).
    pub fn builder() -> crate::types::builders::WriteTreatmentResourceBuilder {
        crate::types::builders::WriteTreatmentResourceBuilder::default()
    }
}

/// A builder for [`WriteTreatmentResource`](crate::types::WriteTreatmentResource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WriteTreatmentResourceBuilder {
    pub(crate) custom_delivery_configuration:
        std::option::Option<crate::types::CustomDeliveryConfiguration>,
    pub(crate) message_configuration: std::option::Option<crate::types::MessageConfiguration>,
    pub(crate) schedule: std::option::Option<crate::types::Schedule>,
    pub(crate) size_percent: std::option::Option<i32>,
    pub(crate) template_configuration: std::option::Option<crate::types::TemplateConfiguration>,
    pub(crate) treatment_description: std::option::Option<std::string::String>,
    pub(crate) treatment_name: std::option::Option<std::string::String>,
}
impl WriteTreatmentResourceBuilder {
    /// <p>The delivery configuration settings for sending the treatment through a custom channel. This object is required if the MessageConfiguration object for the treatment specifies a CustomMessage object.</p>
    pub fn custom_delivery_configuration(
        mut self,
        input: crate::types::CustomDeliveryConfiguration,
    ) -> Self {
        self.custom_delivery_configuration = Some(input);
        self
    }
    /// <p>The delivery configuration settings for sending the treatment through a custom channel. This object is required if the MessageConfiguration object for the treatment specifies a CustomMessage object.</p>
    pub fn set_custom_delivery_configuration(
        mut self,
        input: std::option::Option<crate::types::CustomDeliveryConfiguration>,
    ) -> Self {
        self.custom_delivery_configuration = input;
        self
    }
    /// <p>The message configuration settings for the treatment.</p>
    pub fn message_configuration(mut self, input: crate::types::MessageConfiguration) -> Self {
        self.message_configuration = Some(input);
        self
    }
    /// <p>The message configuration settings for the treatment.</p>
    pub fn set_message_configuration(
        mut self,
        input: std::option::Option<crate::types::MessageConfiguration>,
    ) -> Self {
        self.message_configuration = input;
        self
    }
    /// <p>The schedule settings for the treatment.</p>
    pub fn schedule(mut self, input: crate::types::Schedule) -> Self {
        self.schedule = Some(input);
        self
    }
    /// <p>The schedule settings for the treatment.</p>
    pub fn set_schedule(mut self, input: std::option::Option<crate::types::Schedule>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The allocated percentage of users (segment members) to send the treatment to.</p>
    pub fn size_percent(mut self, input: i32) -> Self {
        self.size_percent = Some(input);
        self
    }
    /// <p>The allocated percentage of users (segment members) to send the treatment to.</p>
    pub fn set_size_percent(mut self, input: std::option::Option<i32>) -> Self {
        self.size_percent = input;
        self
    }
    /// <p>The message template to use for the treatment.</p>
    pub fn template_configuration(mut self, input: crate::types::TemplateConfiguration) -> Self {
        self.template_configuration = Some(input);
        self
    }
    /// <p>The message template to use for the treatment.</p>
    pub fn set_template_configuration(
        mut self,
        input: std::option::Option<crate::types::TemplateConfiguration>,
    ) -> Self {
        self.template_configuration = input;
        self
    }
    /// <p>A custom description of the treatment.</p>
    pub fn treatment_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.treatment_description = Some(input.into());
        self
    }
    /// <p>A custom description of the treatment.</p>
    pub fn set_treatment_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.treatment_description = input;
        self
    }
    /// <p>A custom name for the treatment.</p>
    pub fn treatment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.treatment_name = Some(input.into());
        self
    }
    /// <p>A custom name for the treatment.</p>
    pub fn set_treatment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.treatment_name = input;
        self
    }
    /// Consumes the builder and constructs a [`WriteTreatmentResource`](crate::types::WriteTreatmentResource).
    pub fn build(self) -> crate::types::WriteTreatmentResource {
        crate::types::WriteTreatmentResource {
            custom_delivery_configuration: self.custom_delivery_configuration,
            message_configuration: self.message_configuration,
            schedule: self.schedule,
            size_percent: self.size_percent.unwrap_or_default(),
            template_configuration: self.template_configuration,
            treatment_description: self.treatment_description,
            treatment_name: self.treatment_name,
        }
    }
}
