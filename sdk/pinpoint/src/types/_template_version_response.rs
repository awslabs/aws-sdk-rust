// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a specific version of a message template.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TemplateVersionResponse {
    /// <p>The date, in ISO 8601 format, when the version of the message template was created.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<std::string::String>,
    /// <p>A JSON object that specifies the default values that are used for message variables in the version of the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    #[doc(hidden)]
    pub default_substitutions: std::option::Option<std::string::String>,
    /// <p>The date, in ISO 8601 format, when the version of the message template was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<std::string::String>,
    /// <p>The custom description of the version of the message template.</p>
    #[doc(hidden)]
    pub template_description: std::option::Option<std::string::String>,
    /// <p>The name of the message template.</p>
    #[doc(hidden)]
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The type of channel that the message template is designed for. Possible values are: EMAIL, PUSH, SMS, and VOICE.</p>
    #[doc(hidden)]
    pub template_type: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the version of the message template. This value is an integer that Amazon Pinpoint automatically increments and assigns to each new version of a template.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl TemplateVersionResponse {
    /// <p>The date, in ISO 8601 format, when the version of the message template was created.</p>
    pub fn creation_date(&self) -> std::option::Option<&str> {
        self.creation_date.as_deref()
    }
    /// <p>A JSON object that specifies the default values that are used for message variables in the version of the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub fn default_substitutions(&self) -> std::option::Option<&str> {
        self.default_substitutions.as_deref()
    }
    /// <p>The date, in ISO 8601 format, when the version of the message template was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<&str> {
        self.last_modified_date.as_deref()
    }
    /// <p>The custom description of the version of the message template.</p>
    pub fn template_description(&self) -> std::option::Option<&str> {
        self.template_description.as_deref()
    }
    /// <p>The name of the message template.</p>
    pub fn template_name(&self) -> std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The type of channel that the message template is designed for. Possible values are: EMAIL, PUSH, SMS, and VOICE.</p>
    pub fn template_type(&self) -> std::option::Option<&str> {
        self.template_type.as_deref()
    }
    /// <p>The unique identifier for the version of the message template. This value is an integer that Amazon Pinpoint automatically increments and assigns to each new version of a template.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl TemplateVersionResponse {
    /// Creates a new builder-style object to manufacture [`TemplateVersionResponse`](crate::types::TemplateVersionResponse).
    pub fn builder() -> crate::types::builders::TemplateVersionResponseBuilder {
        crate::types::builders::TemplateVersionResponseBuilder::default()
    }
}

/// A builder for [`TemplateVersionResponse`](crate::types::TemplateVersionResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TemplateVersionResponseBuilder {
    pub(crate) creation_date: std::option::Option<std::string::String>,
    pub(crate) default_substitutions: std::option::Option<std::string::String>,
    pub(crate) last_modified_date: std::option::Option<std::string::String>,
    pub(crate) template_description: std::option::Option<std::string::String>,
    pub(crate) template_name: std::option::Option<std::string::String>,
    pub(crate) template_type: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
}
impl TemplateVersionResponseBuilder {
    /// <p>The date, in ISO 8601 format, when the version of the message template was created.</p>
    pub fn creation_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.creation_date = Some(input.into());
        self
    }
    /// <p>The date, in ISO 8601 format, when the version of the message template was created.</p>
    pub fn set_creation_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>A JSON object that specifies the default values that are used for message variables in the version of the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub fn default_substitutions(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_substitutions = Some(input.into());
        self
    }
    /// <p>A JSON object that specifies the default values that are used for message variables in the version of the message template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the default value for that variable.</p>
    pub fn set_default_substitutions(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_substitutions = input;
        self
    }
    /// <p>The date, in ISO 8601 format, when the version of the message template was last modified.</p>
    pub fn last_modified_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_modified_date = Some(input.into());
        self
    }
    /// <p>The date, in ISO 8601 format, when the version of the message template was last modified.</p>
    pub fn set_last_modified_date(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The custom description of the version of the message template.</p>
    pub fn template_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_description = Some(input.into());
        self
    }
    /// <p>The custom description of the version of the message template.</p>
    pub fn set_template_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.template_description = input;
        self
    }
    /// <p>The name of the message template.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_name = Some(input.into());
        self
    }
    /// <p>The name of the message template.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The type of channel that the message template is designed for. Possible values are: EMAIL, PUSH, SMS, and VOICE.</p>
    pub fn template_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_type = Some(input.into());
        self
    }
    /// <p>The type of channel that the message template is designed for. Possible values are: EMAIL, PUSH, SMS, and VOICE.</p>
    pub fn set_template_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_type = input;
        self
    }
    /// <p>The unique identifier for the version of the message template. This value is an integer that Amazon Pinpoint automatically increments and assigns to each new version of a template.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The unique identifier for the version of the message template. This value is an integer that Amazon Pinpoint automatically increments and assigns to each new version of a template.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`TemplateVersionResponse`](crate::types::TemplateVersionResponse).
    pub fn build(self) -> crate::types::TemplateVersionResponse {
        crate::types::TemplateVersionResponse {
            creation_date: self.creation_date,
            default_substitutions: self.default_substitutions,
            last_modified_date: self.last_modified_date,
            template_description: self.template_description,
            template_name: self.template_name,
            template_type: self.template_type,
            version: self.version,
        }
    }
}
