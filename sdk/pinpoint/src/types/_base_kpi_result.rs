// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the results of a query that retrieved the data for a standard metric that applies to an application, campaign, or journey.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BaseKpiResult {
    /// <p>An array of objects that provides the results of a query that retrieved the data for a standard metric that applies to an application, campaign, or journey.</p>
    pub rows: ::std::option::Option<::std::vec::Vec<crate::types::ResultRow>>,
}
impl BaseKpiResult {
    /// <p>An array of objects that provides the results of a query that retrieved the data for a standard metric that applies to an application, campaign, or journey.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rows.is_none()`.
    pub fn rows(&self) -> &[crate::types::ResultRow] {
        self.rows.as_deref().unwrap_or_default()
    }
}
impl BaseKpiResult {
    /// Creates a new builder-style object to manufacture [`BaseKpiResult`](crate::types::BaseKpiResult).
    pub fn builder() -> crate::types::builders::BaseKpiResultBuilder {
        crate::types::builders::BaseKpiResultBuilder::default()
    }
}

/// A builder for [`BaseKpiResult`](crate::types::BaseKpiResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BaseKpiResultBuilder {
    pub(crate) rows: ::std::option::Option<::std::vec::Vec<crate::types::ResultRow>>,
}
impl BaseKpiResultBuilder {
    /// Appends an item to `rows`.
    ///
    /// To override the contents of this collection use [`set_rows`](Self::set_rows).
    ///
    /// <p>An array of objects that provides the results of a query that retrieved the data for a standard metric that applies to an application, campaign, or journey.</p>
    pub fn rows(mut self, input: crate::types::ResultRow) -> Self {
        let mut v = self.rows.unwrap_or_default();
        v.push(input);
        self.rows = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that provides the results of a query that retrieved the data for a standard metric that applies to an application, campaign, or journey.</p>
    pub fn set_rows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResultRow>>) -> Self {
        self.rows = input;
        self
    }
    /// <p>An array of objects that provides the results of a query that retrieved the data for a standard metric that applies to an application, campaign, or journey.</p>
    pub fn get_rows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResultRow>> {
        &self.rows
    }
    /// Consumes the builder and constructs a [`BaseKpiResult`](crate::types::BaseKpiResult).
    pub fn build(self) -> crate::types::BaseKpiResult {
        crate::types::BaseKpiResult { rows: self.rows }
    }
}
