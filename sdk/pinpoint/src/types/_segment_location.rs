// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies geographical dimension settings for a segment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SegmentLocation {
    /// <p>The country or region code, in ISO 3166-1 alpha-2 format, for the segment.</p>
    #[doc(hidden)]
    pub country: std::option::Option<crate::types::SetDimension>,
    /// <p>The GPS location and range for the segment.</p>
    #[doc(hidden)]
    pub gps_point: std::option::Option<crate::types::GpsPointDimension>,
}
impl SegmentLocation {
    /// <p>The country or region code, in ISO 3166-1 alpha-2 format, for the segment.</p>
    pub fn country(&self) -> std::option::Option<&crate::types::SetDimension> {
        self.country.as_ref()
    }
    /// <p>The GPS location and range for the segment.</p>
    pub fn gps_point(&self) -> std::option::Option<&crate::types::GpsPointDimension> {
        self.gps_point.as_ref()
    }
}
impl SegmentLocation {
    /// Creates a new builder-style object to manufacture [`SegmentLocation`](crate::types::SegmentLocation).
    pub fn builder() -> crate::types::builders::SegmentLocationBuilder {
        crate::types::builders::SegmentLocationBuilder::default()
    }
}

/// A builder for [`SegmentLocation`](crate::types::SegmentLocation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SegmentLocationBuilder {
    pub(crate) country: std::option::Option<crate::types::SetDimension>,
    pub(crate) gps_point: std::option::Option<crate::types::GpsPointDimension>,
}
impl SegmentLocationBuilder {
    /// <p>The country or region code, in ISO 3166-1 alpha-2 format, for the segment.</p>
    pub fn country(mut self, input: crate::types::SetDimension) -> Self {
        self.country = Some(input);
        self
    }
    /// <p>The country or region code, in ISO 3166-1 alpha-2 format, for the segment.</p>
    pub fn set_country(mut self, input: std::option::Option<crate::types::SetDimension>) -> Self {
        self.country = input;
        self
    }
    /// <p>The GPS location and range for the segment.</p>
    pub fn gps_point(mut self, input: crate::types::GpsPointDimension) -> Self {
        self.gps_point = Some(input);
        self
    }
    /// <p>The GPS location and range for the segment.</p>
    pub fn set_gps_point(
        mut self,
        input: std::option::Option<crate::types::GpsPointDimension>,
    ) -> Self {
        self.gps_point = input;
        self
    }
    /// Consumes the builder and constructs a [`SegmentLocation`](crate::types::SegmentLocation).
    pub fn build(self) -> crate::types::SegmentLocation {
        crate::types::SegmentLocation {
            country: self.country,
            gps_point: self.gps_point,
        }
    }
}
