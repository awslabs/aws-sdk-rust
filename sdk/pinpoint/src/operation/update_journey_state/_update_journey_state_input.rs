// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateJourneyStateInput {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the journey.</p>
    pub journey_id: ::std::option::Option<::std::string::String>,
    /// <p>Changes the status of a journey.</p>
    pub journey_state_request: ::std::option::Option<crate::types::JourneyStateRequest>,
}
impl UpdateJourneyStateInput {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier for the journey.</p>
    pub fn journey_id(&self) -> ::std::option::Option<&str> {
        self.journey_id.as_deref()
    }
    /// <p>Changes the status of a journey.</p>
    pub fn journey_state_request(&self) -> ::std::option::Option<&crate::types::JourneyStateRequest> {
        self.journey_state_request.as_ref()
    }
}
impl UpdateJourneyStateInput {
    /// Creates a new builder-style object to manufacture [`UpdateJourneyStateInput`](crate::operation::update_journey_state::UpdateJourneyStateInput).
    pub fn builder() -> crate::operation::update_journey_state::builders::UpdateJourneyStateInputBuilder {
        crate::operation::update_journey_state::builders::UpdateJourneyStateInputBuilder::default()
    }
}

/// A builder for [`UpdateJourneyStateInput`](crate::operation::update_journey_state::UpdateJourneyStateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateJourneyStateInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) journey_id: ::std::option::Option<::std::string::String>,
    pub(crate) journey_state_request: ::std::option::Option<crate::types::JourneyStateRequest>,
}
impl UpdateJourneyStateInputBuilder {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The unique identifier for the journey.</p>
    /// This field is required.
    pub fn journey_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.journey_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the journey.</p>
    pub fn set_journey_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.journey_id = input;
        self
    }
    /// <p>The unique identifier for the journey.</p>
    pub fn get_journey_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.journey_id
    }
    /// <p>Changes the status of a journey.</p>
    /// This field is required.
    pub fn journey_state_request(mut self, input: crate::types::JourneyStateRequest) -> Self {
        self.journey_state_request = ::std::option::Option::Some(input);
        self
    }
    /// <p>Changes the status of a journey.</p>
    pub fn set_journey_state_request(mut self, input: ::std::option::Option<crate::types::JourneyStateRequest>) -> Self {
        self.journey_state_request = input;
        self
    }
    /// <p>Changes the status of a journey.</p>
    pub fn get_journey_state_request(&self) -> &::std::option::Option<crate::types::JourneyStateRequest> {
        &self.journey_state_request
    }
    /// Consumes the builder and constructs a [`UpdateJourneyStateInput`](crate::operation::update_journey_state::UpdateJourneyStateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_journey_state::UpdateJourneyStateInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_journey_state::UpdateJourneyStateInput {
            application_id: self.application_id,
            journey_id: self.journey_id,
            journey_state_request: self.journey_state_request,
        })
    }
}
