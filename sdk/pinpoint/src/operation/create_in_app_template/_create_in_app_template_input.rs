// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateInAppTemplateInput {
    /// <p>InApp Template Request.</p>
    pub in_app_template_request: ::std::option::Option<crate::types::InAppTemplateRequest>,
    /// <p>The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
}
impl CreateInAppTemplateInput {
    /// <p>InApp Template Request.</p>
    pub fn in_app_template_request(&self) -> ::std::option::Option<&crate::types::InAppTemplateRequest> {
        self.in_app_template_request.as_ref()
    }
    /// <p>The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
}
impl CreateInAppTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateInAppTemplateInput`](crate::operation::create_in_app_template::CreateInAppTemplateInput).
    pub fn builder() -> crate::operation::create_in_app_template::builders::CreateInAppTemplateInputBuilder {
        crate::operation::create_in_app_template::builders::CreateInAppTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateInAppTemplateInput`](crate::operation::create_in_app_template::CreateInAppTemplateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateInAppTemplateInputBuilder {
    pub(crate) in_app_template_request: ::std::option::Option<crate::types::InAppTemplateRequest>,
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
}
impl CreateInAppTemplateInputBuilder {
    /// <p>InApp Template Request.</p>
    /// This field is required.
    pub fn in_app_template_request(mut self, input: crate::types::InAppTemplateRequest) -> Self {
        self.in_app_template_request = ::std::option::Option::Some(input);
        self
    }
    /// <p>InApp Template Request.</p>
    pub fn set_in_app_template_request(mut self, input: ::std::option::Option<crate::types::InAppTemplateRequest>) -> Self {
        self.in_app_template_request = input;
        self
    }
    /// <p>InApp Template Request.</p>
    pub fn get_in_app_template_request(&self) -> &::std::option::Option<crate::types::InAppTemplateRequest> {
        &self.in_app_template_request
    }
    /// <p>The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// Consumes the builder and constructs a [`CreateInAppTemplateInput`](crate::operation::create_in_app_template::CreateInAppTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_in_app_template::CreateInAppTemplateInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_in_app_template::CreateInAppTemplateInput {
            in_app_template_request: self.in_app_template_request,
            template_name: self.template_name,
        })
    }
}
