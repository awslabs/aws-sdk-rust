// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateImportJobInput {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the settings for a job that imports endpoint definitions from an Amazon Simple Storage Service (Amazon S3) bucket.</p>
    pub import_job_request: ::std::option::Option<crate::types::ImportJobRequest>,
}
impl CreateImportJobInput {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>Specifies the settings for a job that imports endpoint definitions from an Amazon Simple Storage Service (Amazon S3) bucket.</p>
    pub fn import_job_request(&self) -> ::std::option::Option<&crate::types::ImportJobRequest> {
        self.import_job_request.as_ref()
    }
}
impl CreateImportJobInput {
    /// Creates a new builder-style object to manufacture [`CreateImportJobInput`](crate::operation::create_import_job::CreateImportJobInput).
    pub fn builder() -> crate::operation::create_import_job::builders::CreateImportJobInputBuilder {
        crate::operation::create_import_job::builders::CreateImportJobInputBuilder::default()
    }
}

/// A builder for [`CreateImportJobInput`](crate::operation::create_import_job::CreateImportJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateImportJobInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) import_job_request: ::std::option::Option<crate::types::ImportJobRequest>,
}
impl CreateImportJobInputBuilder {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>Specifies the settings for a job that imports endpoint definitions from an Amazon Simple Storage Service (Amazon S3) bucket.</p>
    /// This field is required.
    pub fn import_job_request(mut self, input: crate::types::ImportJobRequest) -> Self {
        self.import_job_request = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the settings for a job that imports endpoint definitions from an Amazon Simple Storage Service (Amazon S3) bucket.</p>
    pub fn set_import_job_request(mut self, input: ::std::option::Option<crate::types::ImportJobRequest>) -> Self {
        self.import_job_request = input;
        self
    }
    /// <p>Specifies the settings for a job that imports endpoint definitions from an Amazon Simple Storage Service (Amazon S3) bucket.</p>
    pub fn get_import_job_request(&self) -> &::std::option::Option<crate::types::ImportJobRequest> {
        &self.import_job_request
    }
    /// Consumes the builder and constructs a [`CreateImportJobInput`](crate::operation::create_import_job::CreateImportJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_import_job::CreateImportJobInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_import_job::CreateImportJobInput {
            application_id: self.application_id,
            import_job_request: self.import_job_request,
        })
    }
}
