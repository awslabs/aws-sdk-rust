// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetJourneyRunExecutionMetricsInput {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the journey.</p>
    pub journey_id: ::std::option::Option<::std::string::String>,
    /// <p>The <code></code> string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub page_size: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the journey run.</p>
    pub run_id: ::std::option::Option<::std::string::String>,
}
impl GetJourneyRunExecutionMetricsInput {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier for the journey.</p>
    pub fn journey_id(&self) -> ::std::option::Option<&str> {
        self.journey_id.as_deref()
    }
    /// <p>The <code></code> string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn page_size(&self) -> ::std::option::Option<&str> {
        self.page_size.as_deref()
    }
    /// <p>The unique identifier for the journey run.</p>
    pub fn run_id(&self) -> ::std::option::Option<&str> {
        self.run_id.as_deref()
    }
}
impl GetJourneyRunExecutionMetricsInput {
    /// Creates a new builder-style object to manufacture [`GetJourneyRunExecutionMetricsInput`](crate::operation::get_journey_run_execution_metrics::GetJourneyRunExecutionMetricsInput).
    pub fn builder() -> crate::operation::get_journey_run_execution_metrics::builders::GetJourneyRunExecutionMetricsInputBuilder {
        crate::operation::get_journey_run_execution_metrics::builders::GetJourneyRunExecutionMetricsInputBuilder::default()
    }
}

/// A builder for [`GetJourneyRunExecutionMetricsInput`](crate::operation::get_journey_run_execution_metrics::GetJourneyRunExecutionMetricsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetJourneyRunExecutionMetricsInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) journey_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) page_size: ::std::option::Option<::std::string::String>,
    pub(crate) run_id: ::std::option::Option<::std::string::String>,
}
impl GetJourneyRunExecutionMetricsInputBuilder {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The unique identifier for the journey.</p>
    /// This field is required.
    pub fn journey_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.journey_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the journey.</p>
    pub fn set_journey_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.journey_id = input;
        self
    }
    /// <p>The unique identifier for the journey.</p>
    pub fn get_journey_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.journey_id
    }
    /// <p>The <code></code> string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code></code> string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The <code></code> string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn page_size(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.page_size = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn set_page_size(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn get_page_size(&self) -> &::std::option::Option<::std::string::String> {
        &self.page_size
    }
    /// <p>The unique identifier for the journey run.</p>
    /// This field is required.
    pub fn run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the journey run.</p>
    pub fn set_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The unique identifier for the journey run.</p>
    pub fn get_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_id
    }
    /// Consumes the builder and constructs a [`GetJourneyRunExecutionMetricsInput`](crate::operation::get_journey_run_execution_metrics::GetJourneyRunExecutionMetricsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_journey_run_execution_metrics::GetJourneyRunExecutionMetricsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_journey_run_execution_metrics::GetJourneyRunExecutionMetricsInput {
            application_id: self.application_id,
            journey_id: self.journey_id,
            next_token: self.next_token,
            page_size: self.page_size,
            run_id: self.run_id,
        })
    }
}
