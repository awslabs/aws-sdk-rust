// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetJourneyExecutionActivityMetricsInput {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the journey activity.</p>
    #[doc(hidden)]
    pub journey_activity_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the journey.</p>
    #[doc(hidden)]
    pub journey_id: std::option::Option<std::string::String>,
    /// <p>The string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    #[doc(hidden)]
    pub page_size: std::option::Option<std::string::String>,
}
impl GetJourneyExecutionActivityMetricsInput {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier for the journey activity.</p>
    pub fn journey_activity_id(&self) -> std::option::Option<&str> {
        self.journey_activity_id.as_deref()
    }
    /// <p>The unique identifier for the journey.</p>
    pub fn journey_id(&self) -> std::option::Option<&str> {
        self.journey_id.as_deref()
    }
    /// <p>The string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn page_size(&self) -> std::option::Option<&str> {
        self.page_size.as_deref()
    }
}
impl GetJourneyExecutionActivityMetricsInput {
    /// Creates a new builder-style object to manufacture [`GetJourneyExecutionActivityMetricsInput`](crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsInput).
    pub fn builder() -> crate::operation::get_journey_execution_activity_metrics::builders::GetJourneyExecutionActivityMetricsInputBuilder{
        crate::operation::get_journey_execution_activity_metrics::builders::GetJourneyExecutionActivityMetricsInputBuilder::default()
    }
}

/// A builder for [`GetJourneyExecutionActivityMetricsInput`](crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetJourneyExecutionActivityMetricsInputBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) journey_activity_id: std::option::Option<std::string::String>,
    pub(crate) journey_id: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) page_size: std::option::Option<std::string::String>,
}
impl GetJourneyExecutionActivityMetricsInputBuilder {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier for the journey activity.</p>
    pub fn journey_activity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.journey_activity_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the journey activity.</p>
    pub fn set_journey_activity_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.journey_activity_id = input;
        self
    }
    /// <p>The unique identifier for the journey.</p>
    pub fn journey_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.journey_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the journey.</p>
    pub fn set_journey_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.journey_id = input;
        self
    }
    /// <p>The string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn page_size(mut self, input: impl Into<std::string::String>) -> Self {
        self.page_size = Some(input.into());
        self
    }
    /// <p>The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.</p>
    pub fn set_page_size(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.page_size = input;
        self
    }
    /// Consumes the builder and constructs a [`GetJourneyExecutionActivityMetricsInput`](crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsInput).
    pub fn build(self) -> Result<crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::get_journey_execution_activity_metrics::GetJourneyExecutionActivityMetricsInput {
                application_id: self.application_id
                ,
                journey_activity_id: self.journey_activity_id
                ,
                journey_id: self.journey_id
                ,
                next_token: self.next_token
                ,
                page_size: self.page_size
                ,
            }
        )
    }
}
