// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::remove_attributes::_remove_attributes_output::RemoveAttributesOutputBuilder;

pub use crate::operation::remove_attributes::_remove_attributes_input::RemoveAttributesInputBuilder;

impl crate::operation::remove_attributes::builders::RemoveAttributesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::remove_attributes::RemoveAttributesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::remove_attributes::RemoveAttributesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.remove_attributes();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RemoveAttributes`.
///
/// <p>Removes one or more custom attributes, of the same attribute type, from the application. Existing endpoints still have the attributes but Amazon Pinpoint will stop capturing new or changed values for these attributes.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RemoveAttributesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::remove_attributes::builders::RemoveAttributesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::remove_attributes::RemoveAttributesOutput,
        crate::operation::remove_attributes::RemoveAttributesError,
    > for RemoveAttributesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::remove_attributes::RemoveAttributesOutput,
            crate::operation::remove_attributes::RemoveAttributesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RemoveAttributesFluentBuilder {
    /// Creates a new `RemoveAttributes`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RemoveAttributes as a reference.
    pub fn as_input(&self) -> &crate::operation::remove_attributes::builders::RemoveAttributesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::remove_attributes::RemoveAttributesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::remove_attributes::RemoveAttributesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::remove_attributes::RemoveAttributes::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::remove_attributes::RemoveAttributes::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::remove_attributes::RemoveAttributesOutput,
        crate::operation::remove_attributes::RemoveAttributesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.application_id(input.into());
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_application_id(input);
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_application_id()
    }
    /// <p>The type of attribute or attributes to remove. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>endpoint-custom-attributes - Custom attributes that describe endpoints, such as the date when an associated user opted in or out of receiving communications from you through a specific type of channel.</p></li>
    /// <li>
    /// <p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints, such as the number of app sessions or the number of items left in a cart.</p></li>
    /// <li>
    /// <p>endpoint-user-attributes - Custom attributes that describe users, such as first name, last name, and age.</p></li>
    /// </ul>
    pub fn attribute_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.attribute_type(input.into());
        self
    }
    /// <p>The type of attribute or attributes to remove. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>endpoint-custom-attributes - Custom attributes that describe endpoints, such as the date when an associated user opted in or out of receiving communications from you through a specific type of channel.</p></li>
    /// <li>
    /// <p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints, such as the number of app sessions or the number of items left in a cart.</p></li>
    /// <li>
    /// <p>endpoint-user-attributes - Custom attributes that describe users, such as first name, last name, and age.</p></li>
    /// </ul>
    pub fn set_attribute_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_attribute_type(input);
        self
    }
    /// <p>The type of attribute or attributes to remove. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>endpoint-custom-attributes - Custom attributes that describe endpoints, such as the date when an associated user opted in or out of receiving communications from you through a specific type of channel.</p></li>
    /// <li>
    /// <p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints, such as the number of app sessions or the number of items left in a cart.</p></li>
    /// <li>
    /// <p>endpoint-user-attributes - Custom attributes that describe users, such as first name, last name, and age.</p></li>
    /// </ul>
    pub fn get_attribute_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_attribute_type()
    }
    /// <p>Specifies one or more attributes to remove from all the endpoints that are associated with an application.</p>
    pub fn update_attributes_request(mut self, input: crate::types::UpdateAttributesRequest) -> Self {
        self.inner = self.inner.update_attributes_request(input);
        self
    }
    /// <p>Specifies one or more attributes to remove from all the endpoints that are associated with an application.</p>
    pub fn set_update_attributes_request(mut self, input: ::std::option::Option<crate::types::UpdateAttributesRequest>) -> Self {
        self.inner = self.inner.set_update_attributes_request(input);
        self
    }
    /// <p>Specifies one or more attributes to remove from all the endpoints that are associated with an application.</p>
    pub fn get_update_attributes_request(&self) -> &::std::option::Option<crate::types::UpdateAttributesRequest> {
        self.inner.get_update_attributes_request()
    }
}
