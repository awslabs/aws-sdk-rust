// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSegmentInput {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the segment.</p>
    #[doc(hidden)]
    pub segment_id: std::option::Option<std::string::String>,
    /// <p>Specifies the configuration, dimension, and other settings for a segment. A WriteSegmentRequest object can include a Dimensions object or a SegmentGroups object, but not both.</p>
    #[doc(hidden)]
    pub write_segment_request: std::option::Option<crate::types::WriteSegmentRequest>,
}
impl UpdateSegmentInput {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier for the segment.</p>
    pub fn segment_id(&self) -> std::option::Option<&str> {
        self.segment_id.as_deref()
    }
    /// <p>Specifies the configuration, dimension, and other settings for a segment. A WriteSegmentRequest object can include a Dimensions object or a SegmentGroups object, but not both.</p>
    pub fn write_segment_request(&self) -> std::option::Option<&crate::types::WriteSegmentRequest> {
        self.write_segment_request.as_ref()
    }
}
impl UpdateSegmentInput {
    /// Creates a new builder-style object to manufacture [`UpdateSegmentInput`](crate::operation::update_segment::UpdateSegmentInput).
    pub fn builder() -> crate::operation::update_segment::builders::UpdateSegmentInputBuilder {
        crate::operation::update_segment::builders::UpdateSegmentInputBuilder::default()
    }
}

/// A builder for [`UpdateSegmentInput`](crate::operation::update_segment::UpdateSegmentInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateSegmentInputBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) segment_id: std::option::Option<std::string::String>,
    pub(crate) write_segment_request: std::option::Option<crate::types::WriteSegmentRequest>,
}
impl UpdateSegmentInputBuilder {
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier for the segment.</p>
    pub fn segment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.segment_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the segment.</p>
    pub fn set_segment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.segment_id = input;
        self
    }
    /// <p>Specifies the configuration, dimension, and other settings for a segment. A WriteSegmentRequest object can include a Dimensions object or a SegmentGroups object, but not both.</p>
    pub fn write_segment_request(mut self, input: crate::types::WriteSegmentRequest) -> Self {
        self.write_segment_request = Some(input);
        self
    }
    /// <p>Specifies the configuration, dimension, and other settings for a segment. A WriteSegmentRequest object can include a Dimensions object or a SegmentGroups object, but not both.</p>
    pub fn set_write_segment_request(
        mut self,
        input: std::option::Option<crate::types::WriteSegmentRequest>,
    ) -> Self {
        self.write_segment_request = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateSegmentInput`](crate::operation::update_segment::UpdateSegmentInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_segment::UpdateSegmentInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_segment::UpdateSegmentInput {
            application_id: self.application_id,
            segment_id: self.segment_id,
            write_segment_request: self.write_segment_request,
        })
    }
}
