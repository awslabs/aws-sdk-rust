// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_gcm_channel::_update_gcm_channel_output::UpdateGcmChannelOutputBuilder;

pub use crate::operation::update_gcm_channel::_update_gcm_channel_input::UpdateGcmChannelInputBuilder;

impl UpdateGcmChannelInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_gcm_channel::UpdateGcmChannelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_gcm_channel::UpdateGcmChannelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_gcm_channel();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateGcmChannel`.
///
/// <p>Enables the GCM channel for an application or updates the status and settings of the GCM channel for an application.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateGcmChannelFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_gcm_channel::builders::UpdateGcmChannelInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_gcm_channel::UpdateGcmChannelOutput,
        crate::operation::update_gcm_channel::UpdateGcmChannelError,
    > for UpdateGcmChannelFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_gcm_channel::UpdateGcmChannelOutput,
            crate::operation::update_gcm_channel::UpdateGcmChannelError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateGcmChannelFluentBuilder {
    /// Creates a new `UpdateGcmChannel`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateGcmChannel as a reference.
    pub fn as_input(&self) -> &crate::operation::update_gcm_channel::builders::UpdateGcmChannelInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_gcm_channel::UpdateGcmChannelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_gcm_channel::UpdateGcmChannelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_gcm_channel::UpdateGcmChannel::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_gcm_channel::UpdateGcmChannel::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_gcm_channel::UpdateGcmChannelOutput,
        crate::operation::update_gcm_channel::UpdateGcmChannelError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.application_id(input.into());
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_application_id(input);
        self
    }
    /// <p>The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_application_id()
    }
    /// <p>Specifies the status and settings of the GCM channel for an application. This channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.</p>
    pub fn gcm_channel_request(mut self, input: crate::types::GcmChannelRequest) -> Self {
        self.inner = self.inner.gcm_channel_request(input);
        self
    }
    /// <p>Specifies the status and settings of the GCM channel for an application. This channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.</p>
    pub fn set_gcm_channel_request(mut self, input: ::std::option::Option<crate::types::GcmChannelRequest>) -> Self {
        self.inner = self.inner.set_gcm_channel_request(input);
        self
    }
    /// <p>Specifies the status and settings of the GCM channel for an application. This channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.</p>
    pub fn get_gcm_channel_request(&self) -> &::std::option::Option<crate::types::GcmChannelRequest> {
        self.inner.get_gcm_channel_request()
    }
}
