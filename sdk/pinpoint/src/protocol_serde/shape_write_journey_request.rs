// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_write_journey_request(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::WriteJourneyRequest,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.activities {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Activities").start_object();
        for (key_3, value_4) in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_5 = object_2.key(key_3.as_str()).start_object();
                crate::protocol_serde::shape_activity::ser_activity(&mut object_5, value_4)?;
                object_5.finish();
            }
        }
        object_2.finish();
    }
    if let Some(var_6) = &input.creation_date {
        object.key("CreationDate").string(var_6.as_str());
    }
    if let Some(var_7) = &input.last_modified_date {
        object.key("LastModifiedDate").string(var_7.as_str());
    }
    if let Some(var_8) = &input.limits {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Limits").start_object();
        crate::protocol_serde::shape_journey_limits::ser_journey_limits(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.local_time {
        object.key("LocalTime").boolean(*var_10);
    }
    if let Some(var_11) = &input.name {
        object.key("Name").string(var_11.as_str());
    }
    if let Some(var_12) = &input.quiet_time {
        #[allow(unused_mut)]
        let mut object_13 = object.key("QuietTime").start_object();
        crate::protocol_serde::shape_quiet_time::ser_quiet_time(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.refresh_frequency {
        object.key("RefreshFrequency").string(var_14.as_str());
    }
    if let Some(var_15) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_16 = object.key("Schedule").start_object();
        crate::protocol_serde::shape_journey_schedule::ser_journey_schedule(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.start_activity {
        object.key("StartActivity").string(var_17.as_str());
    }
    if let Some(var_18) = &input.start_condition {
        #[allow(unused_mut)]
        let mut object_19 = object.key("StartCondition").start_object();
        crate::protocol_serde::shape_start_condition::ser_start_condition(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.state {
        object.key("State").string(var_20.as_str());
    }
    if let Some(var_21) = &input.wait_for_quiet_time {
        object.key("WaitForQuietTime").boolean(*var_21);
    }
    if let Some(var_22) = &input.refresh_on_segment_update {
        object.key("RefreshOnSegmentUpdate").boolean(*var_22);
    }
    if let Some(var_23) = &input.journey_channel_settings {
        #[allow(unused_mut)]
        let mut object_24 = object.key("JourneyChannelSettings").start_object();
        crate::protocol_serde::shape_journey_channel_settings::ser_journey_channel_settings(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.sending_schedule {
        object.key("SendingSchedule").boolean(*var_25);
    }
    if let Some(var_26) = &input.open_hours {
        #[allow(unused_mut)]
        let mut object_27 = object.key("OpenHours").start_object();
        crate::protocol_serde::shape_open_hours::ser_open_hours(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.closed_days {
        #[allow(unused_mut)]
        let mut object_29 = object.key("ClosedDays").start_object();
        crate::protocol_serde::shape_closed_days::ser_closed_days(&mut object_29, var_28)?;
        object_29.finish();
    }
    if let Some(var_30) = &input.timezone_estimation_methods {
        let mut array_31 = object.key("TimezoneEstimationMethods").start_array();
        for item_32 in var_30 {
            {
                array_31.value().string(item_32.as_str());
            }
        }
        array_31.finish();
    }
    Ok(())
}
