// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_write_journey_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::WriteJourneyRequest,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.activities {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Activities").start_object();
        for (key_3, value_4) in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_5 = object_2.key(key_3.as_str()).start_object();
                crate::protocol_serde::shape_activity::ser_activity(&mut object_5, value_4)?;
                object_5.finish();
            }
        }
        object_2.finish();
    }
    if let Some(var_6) = &input.creation_date {
        object.key("CreationDate").string(var_6.as_str());
    }
    if let Some(var_7) = &input.last_modified_date {
        object.key("LastModifiedDate").string(var_7.as_str());
    }
    if let Some(var_8) = &input.limits {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Limits").start_object();
        crate::protocol_serde::shape_journey_limits::ser_journey_limits(&mut object_9, var_8)?;
        object_9.finish();
    }
    if input.local_time {
        object.key("LocalTime").boolean(input.local_time);
    }
    if let Some(var_10) = &input.name {
        object.key("Name").string(var_10.as_str());
    }
    if let Some(var_11) = &input.quiet_time {
        #[allow(unused_mut)]
        let mut object_12 = object.key("QuietTime").start_object();
        crate::protocol_serde::shape_quiet_time::ser_quiet_time(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.refresh_frequency {
        object.key("RefreshFrequency").string(var_13.as_str());
    }
    if let Some(var_14) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_15 = object.key("Schedule").start_object();
        crate::protocol_serde::shape_journey_schedule::ser_journey_schedule(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    if let Some(var_16) = &input.start_activity {
        object.key("StartActivity").string(var_16.as_str());
    }
    if let Some(var_17) = &input.start_condition {
        #[allow(unused_mut)]
        let mut object_18 = object.key("StartCondition").start_object();
        crate::protocol_serde::shape_start_condition::ser_start_condition(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.state {
        object.key("State").string(var_19.as_str());
    }
    if input.wait_for_quiet_time {
        object
            .key("WaitForQuietTime")
            .boolean(input.wait_for_quiet_time);
    }
    if input.refresh_on_segment_update {
        object
            .key("RefreshOnSegmentUpdate")
            .boolean(input.refresh_on_segment_update);
    }
    if let Some(var_20) = &input.journey_channel_settings {
        #[allow(unused_mut)]
        let mut object_21 = object.key("JourneyChannelSettings").start_object();
        crate::protocol_serde::shape_journey_channel_settings::ser_journey_channel_settings(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    if input.sending_schedule {
        object
            .key("SendingSchedule")
            .boolean(input.sending_schedule);
    }
    if let Some(var_22) = &input.open_hours {
        #[allow(unused_mut)]
        let mut object_23 = object.key("OpenHours").start_object();
        crate::protocol_serde::shape_open_hours::ser_open_hours(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.closed_days {
        #[allow(unused_mut)]
        let mut object_25 = object.key("ClosedDays").start_object();
        crate::protocol_serde::shape_closed_days::ser_closed_days(&mut object_25, var_24)?;
        object_25.finish();
    }
    Ok(())
}
