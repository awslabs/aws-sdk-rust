// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_baidu_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BaiduMessage,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.action {
        object.key("Action").string(var_1.as_str());
    }
    if let Some(var_2) = &input.body {
        object.key("Body").string(var_2.as_str());
    }
    if let Some(var_3) = &input.data {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Data").start_object();
        for (key_5, value_6) in var_3 {
            {
                object_4.key(key_5.as_str()).string(value_6.as_str());
            }
        }
        object_4.finish();
    }
    if let Some(var_7) = &input.icon_reference {
        object.key("IconReference").string(var_7.as_str());
    }
    if let Some(var_8) = &input.image_icon_url {
        object.key("ImageIconUrl").string(var_8.as_str());
    }
    if let Some(var_9) = &input.image_url {
        object.key("ImageUrl").string(var_9.as_str());
    }
    if let Some(var_10) = &input.raw_content {
        object.key("RawContent").string(var_10.as_str());
    }
    if input.silent_push {
        object.key("SilentPush").boolean(input.silent_push);
    }
    if let Some(var_11) = &input.small_image_icon_url {
        object.key("SmallImageIconUrl").string(var_11.as_str());
    }
    if let Some(var_12) = &input.sound {
        object.key("Sound").string(var_12.as_str());
    }
    if let Some(var_13) = &input.substitutions {
        #[allow(unused_mut)]
        let mut object_14 = object.key("Substitutions").start_object();
        for (key_15, value_16) in var_13 {
            {
                let mut array_17 = object_14.key(key_15.as_str()).start_array();
                for item_18 in value_16 {
                    {
                        array_17.value().string(item_18.as_str());
                    }
                }
                array_17.finish();
            }
        }
        object_14.finish();
    }
    if input.time_to_live != 0 {
        object.key("TimeToLive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.time_to_live).into()),
        );
    }
    if let Some(var_19) = &input.title {
        object.key("Title").string(var_19.as_str());
    }
    if let Some(var_20) = &input.url {
        object.key("Url").string(var_20.as_str());
    }
    Ok(())
}
