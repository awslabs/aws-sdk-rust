// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_journey_response_payload(
    input: &[u8],
) -> Result<crate::types::JourneyResponse, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(input)).peekable();
    let tokens = &mut tokens_owned;
    let result = crate::protocol_serde::shape_journey_response::de_journey_response(tokens)?
        .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("expected payload member value"));
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    result
}

pub(crate) fn de_journey_response<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::JourneyResponse>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::JourneyResponseBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Activities" => {
                            builder = builder.set_activities(crate::protocol_serde::shape_map_of_activity::de_map_of_activity(tokens)?);
                        }
                        "ApplicationId" => {
                            builder = builder.set_application_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CreationDate" => {
                            builder = builder.set_creation_date(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Id" => {
                            builder = builder.set_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "LastModifiedDate" => {
                            builder = builder.set_last_modified_date(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Limits" => {
                            builder = builder.set_limits(crate::protocol_serde::shape_journey_limits::de_journey_limits(tokens)?);
                        }
                        "LocalTime" => {
                            builder = builder.set_local_time(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "QuietTime" => {
                            builder = builder.set_quiet_time(crate::protocol_serde::shape_quiet_time::de_quiet_time(tokens)?);
                        }
                        "RefreshFrequency" => {
                            builder = builder.set_refresh_frequency(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Schedule" => {
                            builder = builder.set_schedule(crate::protocol_serde::shape_journey_schedule::de_journey_schedule(tokens)?);
                        }
                        "StartActivity" => {
                            builder = builder.set_start_activity(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "StartCondition" => {
                            builder = builder.set_start_condition(crate::protocol_serde::shape_start_condition::de_start_condition(tokens)?);
                        }
                        "State" => {
                            builder = builder.set_state(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::State::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "tags" => {
                            builder = builder.set_tags(crate::protocol_serde::shape_map_of_string::de_map_of_string(tokens)?);
                        }
                        "WaitForQuietTime" => {
                            builder = builder.set_wait_for_quiet_time(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "RefreshOnSegmentUpdate" => {
                            builder =
                                builder.set_refresh_on_segment_update(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "JourneyChannelSettings" => {
                            builder = builder.set_journey_channel_settings(
                                crate::protocol_serde::shape_journey_channel_settings::de_journey_channel_settings(tokens)?,
                            );
                        }
                        "SendingSchedule" => {
                            builder = builder.set_sending_schedule(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "OpenHours" => {
                            builder = builder.set_open_hours(crate::protocol_serde::shape_open_hours::de_open_hours(tokens)?);
                        }
                        "ClosedDays" => {
                            builder = builder.set_closed_days(crate::protocol_serde::shape_closed_days::de_closed_days(tokens)?);
                        }
                        "TimezoneEstimationMethods" => {
                            builder = builder.set_timezone_estimation_methods(
                                    crate::protocol_serde::shape_list_of_timezone_estimation_methods_element::de_list_of_timezone_estimation_methods_element(tokens)?
                                );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::journey_response_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
