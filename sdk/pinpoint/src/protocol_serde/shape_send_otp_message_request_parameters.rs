// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_otp_message_request_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SendOtpMessageRequestParameters,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.allowed_attempts != 0 {
        object.key("AllowedAttempts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allowed_attempts).into()),
        );
    }
    if let Some(var_1) = &input.brand_name {
        object.key("BrandName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.channel {
        object.key("Channel").string(var_2.as_str());
    }
    if input.code_length != 0 {
        object.key("CodeLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.code_length).into()),
        );
    }
    if let Some(var_3) = &input.destination_identity {
        object.key("DestinationIdentity").string(var_3.as_str());
    }
    if let Some(var_4) = &input.entity_id {
        object.key("EntityId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.language {
        object.key("Language").string(var_5.as_str());
    }
    if let Some(var_6) = &input.origination_identity {
        object.key("OriginationIdentity").string(var_6.as_str());
    }
    if let Some(var_7) = &input.reference_id {
        object.key("ReferenceId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.template_id {
        object.key("TemplateId").string(var_8.as_str());
    }
    if input.validity_period != 0 {
        object.key("ValidityPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.validity_period).into()),
        );
    }
    Ok(())
}
