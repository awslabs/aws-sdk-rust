// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_write_campaign_request(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::WriteCampaignRequest,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_treatments {
        let mut array_2 = object.key("AdditionalTreatments").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_write_treatment_resource::ser_write_treatment_resource(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.custom_delivery_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("CustomDeliveryConfiguration").start_object();
        crate::protocol_serde::shape_custom_delivery_configuration::ser_custom_delivery_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.description {
        object.key("Description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.holdout_percent {
        object.key("HoldoutPercent").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.hook {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Hook").start_object();
        crate::protocol_serde::shape_campaign_hook::ser_campaign_hook(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.is_paused {
        object.key("IsPaused").boolean(*var_11);
    }
    if let Some(var_12) = &input.limits {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Limits").start_object();
        crate::protocol_serde::shape_campaign_limits::ser_campaign_limits(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.message_configuration {
        #[allow(unused_mut)]
        let mut object_15 = object.key("MessageConfiguration").start_object();
        crate::protocol_serde::shape_message_configuration::ser_message_configuration(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.name {
        object.key("Name").string(var_16.as_str());
    }
    if let Some(var_17) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_18 = object.key("Schedule").start_object();
        crate::protocol_serde::shape_schedule::ser_schedule(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.segment_id {
        object.key("SegmentId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.segment_version {
        object.key("SegmentVersion").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    if let Some(var_21) = &input.tags {
        #[allow(unused_mut)]
        let mut object_22 = object.key("tags").start_object();
        for (key_23, value_24) in var_21 {
            {
                object_22.key(key_23.as_str()).string(value_24.as_str());
            }
        }
        object_22.finish();
    }
    if let Some(var_25) = &input.template_configuration {
        #[allow(unused_mut)]
        let mut object_26 = object.key("TemplateConfiguration").start_object();
        crate::protocol_serde::shape_template_configuration::ser_template_configuration(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.treatment_description {
        object.key("TreatmentDescription").string(var_27.as_str());
    }
    if let Some(var_28) = &input.treatment_name {
        object.key("TreatmentName").string(var_28.as_str());
    }
    if let Some(var_29) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_29).into()),
        );
    }
    Ok(())
}
