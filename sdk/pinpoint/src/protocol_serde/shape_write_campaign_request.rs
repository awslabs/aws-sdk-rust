// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_write_campaign_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::WriteCampaignRequest,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.additional_treatments {
        let mut array_2 = object.key("AdditionalTreatments").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_write_treatment_resource::ser_write_treatment_resource(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.custom_delivery_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("CustomDeliveryConfiguration").start_object();
        crate::protocol_serde::shape_custom_delivery_configuration::ser_custom_delivery_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.description {
        object.key("Description").string(var_7.as_str());
    }
    if input.holdout_percent != 0 {
        object.key("HoldoutPercent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.holdout_percent).into()),
        );
    }
    if let Some(var_8) = &input.hook {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Hook").start_object();
        crate::protocol_serde::shape_campaign_hook::ser_campaign_hook(&mut object_9, var_8)?;
        object_9.finish();
    }
    if input.is_paused {
        object.key("IsPaused").boolean(input.is_paused);
    }
    if let Some(var_10) = &input.limits {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Limits").start_object();
        crate::protocol_serde::shape_campaign_limits::ser_campaign_limits(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.message_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("MessageConfiguration").start_object();
        crate::protocol_serde::shape_message_configuration::ser_message_configuration(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.name {
        object.key("Name").string(var_14.as_str());
    }
    if let Some(var_15) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_16 = object.key("Schedule").start_object();
        crate::protocol_serde::shape_schedule::ser_schedule(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.segment_id {
        object.key("SegmentId").string(var_17.as_str());
    }
    if input.segment_version != 0 {
        object.key("SegmentVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_version).into()),
        );
    }
    if let Some(var_18) = &input.tags {
        #[allow(unused_mut)]
        let mut object_19 = object.key("tags").start_object();
        for (key_20, value_21) in var_18 {
            {
                object_19.key(key_20.as_str()).string(value_21.as_str());
            }
        }
        object_19.finish();
    }
    if let Some(var_22) = &input.template_configuration {
        #[allow(unused_mut)]
        let mut object_23 = object.key("TemplateConfiguration").start_object();
        crate::protocol_serde::shape_template_configuration::ser_template_configuration(
            &mut object_23,
            var_22,
        )?;
        object_23.finish();
    }
    if let Some(var_24) = &input.treatment_description {
        object.key("TreatmentDescription").string(var_24.as_str());
    }
    if let Some(var_25) = &input.treatment_name {
        object.key("TreatmentName").string(var_25.as_str());
    }
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    Ok(())
}
