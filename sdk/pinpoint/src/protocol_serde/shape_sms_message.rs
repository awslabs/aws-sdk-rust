// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_sms_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SmsMessage,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.body {
        object.key("Body").string(var_1.as_str());
    }
    if let Some(var_2) = &input.keyword {
        object.key("Keyword").string(var_2.as_str());
    }
    if let Some(var_3) = &input.media_url {
        object.key("MediaUrl").string(var_3.as_str());
    }
    if let Some(var_4) = &input.message_type {
        object.key("MessageType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.origination_number {
        object.key("OriginationNumber").string(var_5.as_str());
    }
    if let Some(var_6) = &input.sender_id {
        object.key("SenderId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.substitutions {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Substitutions").start_object();
        for (key_9, value_10) in var_7 {
            {
                let mut array_11 = object_8.key(key_9.as_str()).start_array();
                for item_12 in value_10 {
                    {
                        array_11.value().string(item_12.as_str());
                    }
                }
                array_11.finish();
            }
        }
        object_8.finish();
    }
    if let Some(var_13) = &input.entity_id {
        object.key("EntityId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.template_id {
        object.key("TemplateId").string(var_14.as_str());
    }
    Ok(())
}
