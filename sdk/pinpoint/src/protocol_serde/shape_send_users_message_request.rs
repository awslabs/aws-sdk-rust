// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_users_message_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SendUsersMessageRequest,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.context {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Context").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.message_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("MessageConfiguration").start_object();
        crate::protocol_serde::shape_direct_message_configuration::ser_direct_message_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.template_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("TemplateConfiguration").start_object();
        crate::protocol_serde::shape_template_configuration::ser_template_configuration(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.trace_id {
        object.key("TraceId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.users {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Users").start_object();
        for (key_12, value_13) in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_14 = object_11.key(key_12.as_str()).start_object();
                crate::protocol_serde::shape_endpoint_send_configuration::ser_endpoint_send_configuration(&mut object_14, value_13)?;
                object_14.finish();
            }
        }
        object_11.finish();
    }
    Ok(())
}
