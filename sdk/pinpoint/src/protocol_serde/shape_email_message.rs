// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_email_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::EmailMessage,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.body {
        object.key("Body").string(var_1.as_str());
    }
    if let Some(var_2) = &input.feedback_forwarding_address {
        object
            .key("FeedbackForwardingAddress")
            .string(var_2.as_str());
    }
    if let Some(var_3) = &input.from_address {
        object.key("FromAddress").string(var_3.as_str());
    }
    if let Some(var_4) = &input.raw_email {
        #[allow(unused_mut)]
        let mut object_5 = object.key("RawEmail").start_object();
        crate::protocol_serde::shape_raw_email::ser_raw_email(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.reply_to_addresses {
        let mut array_7 = object.key("ReplyToAddresses").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.simple_email {
        #[allow(unused_mut)]
        let mut object_10 = object.key("SimpleEmail").start_object();
        crate::protocol_serde::shape_simple_email::ser_simple_email(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.substitutions {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Substitutions").start_object();
        for (key_13, value_14) in var_11 {
            {
                let mut array_15 = object_12.key(key_13.as_str()).start_array();
                for item_16 in value_14 {
                    {
                        array_15.value().string(item_16.as_str());
                    }
                }
                array_15.finish();
            }
        }
        object_12.finish();
    }
    Ok(())
}
