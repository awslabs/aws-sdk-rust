// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_default_push_notification_message(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::DefaultPushNotificationMessage,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.action {
        object.key("Action").string(var_1.as_str());
    }
    if let Some(var_2) = &input.body {
        object.key("Body").string(var_2.as_str());
    }
    if let Some(var_3) = &input.data {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Data").start_object();
        for (key_5, value_6) in var_3 {
            {
                object_4.key(key_5.as_str()).string(value_6.as_str());
            }
        }
        object_4.finish();
    }
    if let Some(var_7) = &input.silent_push {
        object.key("SilentPush").boolean(*var_7);
    }
    if let Some(var_8) = &input.substitutions {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Substitutions").start_object();
        for (key_10, value_11) in var_8 {
            {
                let mut array_12 = object_9.key(key_10.as_str()).start_array();
                for item_13 in value_11 {
                    {
                        array_12.value().string(item_13.as_str());
                    }
                }
                array_12.finish();
            }
        }
        object_9.finish();
    }
    if let Some(var_14) = &input.title {
        object.key("Title").string(var_14.as_str());
    }
    if let Some(var_15) = &input.url {
        object.key("Url").string(var_15.as_str());
    }
    Ok(())
}
