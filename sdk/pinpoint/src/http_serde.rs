// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_payload_create_app_create_app_output_application_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApplicationResponse>,
    crate::error::CreateAppError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_application_response_payload(body)
                .map_err(crate::error::CreateAppError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_create_campaign_create_campaign_output_campaign_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CampaignResponse>,
    crate::error::CreateCampaignError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_campaign_response_payload(body)
                .map_err(crate::error::CreateCampaignError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_create_email_template_create_email_template_output_create_template_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CreateTemplateMessageBody>,
    crate::error::CreateEmailTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_create_template_message_body_payload(
                body,
            )
            .map_err(crate::error::CreateEmailTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_create_export_job_create_export_job_output_export_job_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ExportJobResponse>,
    crate::error::CreateExportJobError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_export_job_response_payload(body)
                .map_err(crate::error::CreateExportJobError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_create_import_job_create_import_job_output_import_job_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ImportJobResponse>,
    crate::error::CreateImportJobError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_import_job_response_payload(body)
                .map_err(crate::error::CreateImportJobError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_create_in_app_template_create_in_app_template_output_template_create_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::TemplateCreateMessageBody>,
    crate::error::CreateInAppTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_template_create_message_body_payload(
                body,
            )
            .map_err(crate::error::CreateInAppTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_create_journey_create_journey_output_journey_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::JourneyResponse>,
    crate::error::CreateJourneyError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_journey_response_payload(body)
                .map_err(crate::error::CreateJourneyError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_create_push_template_create_push_template_output_create_template_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CreateTemplateMessageBody>,
    crate::error::CreatePushTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_create_template_message_body_payload(
                body,
            )
            .map_err(crate::error::CreatePushTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_create_recommender_configuration_create_recommender_configuration_output_recommender_configuration_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::RecommenderConfigurationResponse>,
    crate::error::CreateRecommenderConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::json_deser::deser_structure_crate_model_recommender_configuration_response_payload(body).map_err(crate::error::CreateRecommenderConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_create_segment_create_segment_output_segment_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::SegmentResponse>,
    crate::error::CreateSegmentError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_segment_response_payload(body)
                .map_err(crate::error::CreateSegmentError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_create_sms_template_create_sms_template_output_create_template_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CreateTemplateMessageBody>,
    crate::error::CreateSmsTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_create_template_message_body_payload(
                body,
            )
            .map_err(crate::error::CreateSmsTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_create_voice_template_create_voice_template_output_create_template_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CreateTemplateMessageBody>,
    crate::error::CreateVoiceTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_create_template_message_body_payload(
                body,
            )
            .map_err(crate::error::CreateVoiceTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_adm_channel_delete_adm_channel_output_adm_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::AdmChannelResponse>,
    crate::error::DeleteAdmChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_adm_channel_response_payload(body)
                .map_err(crate::error::DeleteAdmChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_apns_channel_delete_apns_channel_output_apns_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApnsChannelResponse>,
    crate::error::DeleteApnsChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_apns_channel_response_payload(body)
                .map_err(crate::error::DeleteApnsChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_apns_sandbox_channel_delete_apns_sandbox_channel_output_apns_sandbox_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApnsSandboxChannelResponse>,
    crate::error::DeleteApnsSandboxChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_apns_sandbox_channel_response_payload(
                body,
            )
            .map_err(crate::error::DeleteApnsSandboxChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_apns_voip_channel_delete_apns_voip_channel_output_apns_voip_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApnsVoipChannelResponse>,
    crate::error::DeleteApnsVoipChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_apns_voip_channel_response_payload(body)
                .map_err(crate::error::DeleteApnsVoipChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_apns_voip_sandbox_channel_delete_apns_voip_sandbox_channel_output_apns_voip_sandbox_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApnsVoipSandboxChannelResponse>,
    crate::error::DeleteApnsVoipSandboxChannelError,
> {
    (!body.is_empty()).then(||{
        crate::json_deser::deser_structure_crate_model_apns_voip_sandbox_channel_response_payload(body).map_err(crate::error::DeleteApnsVoipSandboxChannelError::unhandled)
    }).transpose()
}

pub fn deser_payload_delete_app_delete_app_output_application_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApplicationResponse>,
    crate::error::DeleteAppError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_application_response_payload(body)
                .map_err(crate::error::DeleteAppError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_baidu_channel_delete_baidu_channel_output_baidu_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::BaiduChannelResponse>,
    crate::error::DeleteBaiduChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_baidu_channel_response_payload(body)
                .map_err(crate::error::DeleteBaiduChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_campaign_delete_campaign_output_campaign_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CampaignResponse>,
    crate::error::DeleteCampaignError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_campaign_response_payload(body)
                .map_err(crate::error::DeleteCampaignError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_email_channel_delete_email_channel_output_email_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::EmailChannelResponse>,
    crate::error::DeleteEmailChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_email_channel_response_payload(body)
                .map_err(crate::error::DeleteEmailChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_email_template_delete_email_template_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::DeleteEmailTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::DeleteEmailTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_endpoint_delete_endpoint_output_endpoint_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::EndpointResponse>,
    crate::error::DeleteEndpointError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_endpoint_response_payload(body)
                .map_err(crate::error::DeleteEndpointError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_event_stream_delete_event_stream_output_event_stream(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::EventStream>,
    crate::error::DeleteEventStreamError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_event_stream_payload(body)
                .map_err(crate::error::DeleteEventStreamError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_gcm_channel_delete_gcm_channel_output_gcm_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::GcmChannelResponse>,
    crate::error::DeleteGcmChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_gcm_channel_response_payload(body)
                .map_err(crate::error::DeleteGcmChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_in_app_template_delete_in_app_template_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::DeleteInAppTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::DeleteInAppTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_journey_delete_journey_output_journey_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::JourneyResponse>,
    crate::error::DeleteJourneyError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_journey_response_payload(body)
                .map_err(crate::error::DeleteJourneyError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_push_template_delete_push_template_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::DeletePushTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::DeletePushTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_recommender_configuration_delete_recommender_configuration_output_recommender_configuration_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::RecommenderConfigurationResponse>,
    crate::error::DeleteRecommenderConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::json_deser::deser_structure_crate_model_recommender_configuration_response_payload(body).map_err(crate::error::DeleteRecommenderConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_delete_segment_delete_segment_output_segment_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::SegmentResponse>,
    crate::error::DeleteSegmentError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_segment_response_payload(body)
                .map_err(crate::error::DeleteSegmentError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_sms_channel_delete_sms_channel_output_sms_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::SmsChannelResponse>,
    crate::error::DeleteSmsChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_sms_channel_response_payload(body)
                .map_err(crate::error::DeleteSmsChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_sms_template_delete_sms_template_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::DeleteSmsTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::DeleteSmsTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_user_endpoints_delete_user_endpoints_output_endpoints_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::EndpointsResponse>,
    crate::error::DeleteUserEndpointsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_endpoints_response_payload(body)
                .map_err(crate::error::DeleteUserEndpointsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_voice_channel_delete_voice_channel_output_voice_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::VoiceChannelResponse>,
    crate::error::DeleteVoiceChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_voice_channel_response_payload(body)
                .map_err(crate::error::DeleteVoiceChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_delete_voice_template_delete_voice_template_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::DeleteVoiceTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::DeleteVoiceTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_adm_channel_get_adm_channel_output_adm_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::AdmChannelResponse>,
    crate::error::GetAdmChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_adm_channel_response_payload(body)
                .map_err(crate::error::GetAdmChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_apns_channel_get_apns_channel_output_apns_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApnsChannelResponse>,
    crate::error::GetApnsChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_apns_channel_response_payload(body)
                .map_err(crate::error::GetApnsChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_apns_sandbox_channel_get_apns_sandbox_channel_output_apns_sandbox_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApnsSandboxChannelResponse>,
    crate::error::GetApnsSandboxChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_apns_sandbox_channel_response_payload(
                body,
            )
            .map_err(crate::error::GetApnsSandboxChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_apns_voip_channel_get_apns_voip_channel_output_apns_voip_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApnsVoipChannelResponse>,
    crate::error::GetApnsVoipChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_apns_voip_channel_response_payload(body)
                .map_err(crate::error::GetApnsVoipChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_apns_voip_sandbox_channel_get_apns_voip_sandbox_channel_output_apns_voip_sandbox_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApnsVoipSandboxChannelResponse>,
    crate::error::GetApnsVoipSandboxChannelError,
> {
    (!body.is_empty()).then(||{
        crate::json_deser::deser_structure_crate_model_apns_voip_sandbox_channel_response_payload(body).map_err(crate::error::GetApnsVoipSandboxChannelError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_app_get_app_output_application_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApplicationResponse>,
    crate::error::GetAppError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_application_response_payload(body)
                .map_err(crate::error::GetAppError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_application_date_range_kpi_get_application_date_range_kpi_output_application_date_range_kpi_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApplicationDateRangeKpiResponse>,
    crate::error::GetApplicationDateRangeKpiError,
> {
    (!body.is_empty()).then(||{
        crate::json_deser::deser_structure_crate_model_application_date_range_kpi_response_payload(body).map_err(crate::error::GetApplicationDateRangeKpiError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_application_settings_get_application_settings_output_application_settings_resource(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApplicationSettingsResource>,
    crate::error::GetApplicationSettingsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_application_settings_resource_payload(
                body,
            )
            .map_err(crate::error::GetApplicationSettingsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_apps_get_apps_output_applications_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApplicationsResponse>,
    crate::error::GetAppsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_applications_response_payload(body)
                .map_err(crate::error::GetAppsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_baidu_channel_get_baidu_channel_output_baidu_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::BaiduChannelResponse>,
    crate::error::GetBaiduChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_baidu_channel_response_payload(body)
                .map_err(crate::error::GetBaiduChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_campaign_get_campaign_output_campaign_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CampaignResponse>,
    crate::error::GetCampaignError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_campaign_response_payload(body)
                .map_err(crate::error::GetCampaignError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_campaign_activities_get_campaign_activities_output_activities_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ActivitiesResponse>,
    crate::error::GetCampaignActivitiesError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_activities_response_payload(body)
                .map_err(crate::error::GetCampaignActivitiesError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_campaign_date_range_kpi_get_campaign_date_range_kpi_output_campaign_date_range_kpi_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CampaignDateRangeKpiResponse>,
    crate::error::GetCampaignDateRangeKpiError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_campaign_date_range_kpi_response_payload(
                body,
            )
            .map_err(crate::error::GetCampaignDateRangeKpiError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_campaigns_get_campaigns_output_campaigns_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CampaignsResponse>,
    crate::error::GetCampaignsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_campaigns_response_payload(body)
                .map_err(crate::error::GetCampaignsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_campaign_version_get_campaign_version_output_campaign_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CampaignResponse>,
    crate::error::GetCampaignVersionError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_campaign_response_payload(body)
                .map_err(crate::error::GetCampaignVersionError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_campaign_versions_get_campaign_versions_output_campaigns_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CampaignsResponse>,
    crate::error::GetCampaignVersionsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_campaigns_response_payload(body)
                .map_err(crate::error::GetCampaignVersionsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_channels_get_channels_output_channels_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ChannelsResponse>,
    crate::error::GetChannelsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_channels_response_payload(body)
                .map_err(crate::error::GetChannelsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_email_channel_get_email_channel_output_email_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::EmailChannelResponse>,
    crate::error::GetEmailChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_email_channel_response_payload(body)
                .map_err(crate::error::GetEmailChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_email_template_get_email_template_output_email_template_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::EmailTemplateResponse>,
    crate::error::GetEmailTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_email_template_response_payload(body)
                .map_err(crate::error::GetEmailTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_endpoint_get_endpoint_output_endpoint_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::EndpointResponse>,
    crate::error::GetEndpointError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_endpoint_response_payload(body)
                .map_err(crate::error::GetEndpointError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_event_stream_get_event_stream_output_event_stream(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::EventStream>,
    crate::error::GetEventStreamError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_event_stream_payload(body)
                .map_err(crate::error::GetEventStreamError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_export_job_get_export_job_output_export_job_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ExportJobResponse>,
    crate::error::GetExportJobError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_export_job_response_payload(body)
                .map_err(crate::error::GetExportJobError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_export_jobs_get_export_jobs_output_export_jobs_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ExportJobsResponse>,
    crate::error::GetExportJobsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_export_jobs_response_payload(body)
                .map_err(crate::error::GetExportJobsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_gcm_channel_get_gcm_channel_output_gcm_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::GcmChannelResponse>,
    crate::error::GetGcmChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_gcm_channel_response_payload(body)
                .map_err(crate::error::GetGcmChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_import_job_get_import_job_output_import_job_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ImportJobResponse>,
    crate::error::GetImportJobError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_import_job_response_payload(body)
                .map_err(crate::error::GetImportJobError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_import_jobs_get_import_jobs_output_import_jobs_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ImportJobsResponse>,
    crate::error::GetImportJobsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_import_jobs_response_payload(body)
                .map_err(crate::error::GetImportJobsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_in_app_messages_get_in_app_messages_output_in_app_messages_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::InAppMessagesResponse>,
    crate::error::GetInAppMessagesError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_in_app_messages_response_payload(body)
                .map_err(crate::error::GetInAppMessagesError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_in_app_template_get_in_app_template_output_in_app_template_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::InAppTemplateResponse>,
    crate::error::GetInAppTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_in_app_template_response_payload(body)
                .map_err(crate::error::GetInAppTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_journey_get_journey_output_journey_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::JourneyResponse>,
    crate::error::GetJourneyError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_journey_response_payload(body)
                .map_err(crate::error::GetJourneyError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_journey_date_range_kpi_get_journey_date_range_kpi_output_journey_date_range_kpi_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::JourneyDateRangeKpiResponse>,
    crate::error::GetJourneyDateRangeKpiError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_journey_date_range_kpi_response_payload(
                body,
            )
            .map_err(crate::error::GetJourneyDateRangeKpiError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_journey_execution_activity_metrics_get_journey_execution_activity_metrics_output_journey_execution_activity_metrics_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::JourneyExecutionActivityMetricsResponse>,
    crate::error::GetJourneyExecutionActivityMetricsError,
> {
    (!body.is_empty()).then(||{
        crate::json_deser::deser_structure_crate_model_journey_execution_activity_metrics_response_payload(body).map_err(crate::error::GetJourneyExecutionActivityMetricsError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_journey_execution_metrics_get_journey_execution_metrics_output_journey_execution_metrics_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::JourneyExecutionMetricsResponse>,
    crate::error::GetJourneyExecutionMetricsError,
> {
    (!body.is_empty()).then(||{
        crate::json_deser::deser_structure_crate_model_journey_execution_metrics_response_payload(body).map_err(crate::error::GetJourneyExecutionMetricsError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_push_template_get_push_template_output_push_notification_template_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::PushNotificationTemplateResponse>,
    crate::error::GetPushTemplateError,
> {
    (!body.is_empty()).then(||{
        crate::json_deser::deser_structure_crate_model_push_notification_template_response_payload(body).map_err(crate::error::GetPushTemplateError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_recommender_configuration_get_recommender_configuration_output_recommender_configuration_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::RecommenderConfigurationResponse>,
    crate::error::GetRecommenderConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::json_deser::deser_structure_crate_model_recommender_configuration_response_payload(body).map_err(crate::error::GetRecommenderConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_recommender_configurations_get_recommender_configurations_output_list_recommender_configurations_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ListRecommenderConfigurationsResponse>,
    crate::error::GetRecommenderConfigurationsError,
> {
    (!body.is_empty()).then(||{
        crate::json_deser::deser_structure_crate_model_list_recommender_configurations_response_payload(body).map_err(crate::error::GetRecommenderConfigurationsError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_segment_get_segment_output_segment_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::SegmentResponse>,
    crate::error::GetSegmentError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_segment_response_payload(body)
                .map_err(crate::error::GetSegmentError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_segment_export_jobs_get_segment_export_jobs_output_export_jobs_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ExportJobsResponse>,
    crate::error::GetSegmentExportJobsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_export_jobs_response_payload(body)
                .map_err(crate::error::GetSegmentExportJobsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_segment_import_jobs_get_segment_import_jobs_output_import_jobs_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ImportJobsResponse>,
    crate::error::GetSegmentImportJobsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_import_jobs_response_payload(body)
                .map_err(crate::error::GetSegmentImportJobsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_segments_get_segments_output_segments_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::SegmentsResponse>,
    crate::error::GetSegmentsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_segments_response_payload(body)
                .map_err(crate::error::GetSegmentsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_segment_version_get_segment_version_output_segment_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::SegmentResponse>,
    crate::error::GetSegmentVersionError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_segment_response_payload(body)
                .map_err(crate::error::GetSegmentVersionError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_segment_versions_get_segment_versions_output_segments_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::SegmentsResponse>,
    crate::error::GetSegmentVersionsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_segments_response_payload(body)
                .map_err(crate::error::GetSegmentVersionsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_sms_channel_get_sms_channel_output_sms_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::SmsChannelResponse>,
    crate::error::GetSmsChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_sms_channel_response_payload(body)
                .map_err(crate::error::GetSmsChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_sms_template_get_sms_template_output_sms_template_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::SmsTemplateResponse>,
    crate::error::GetSmsTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_sms_template_response_payload(body)
                .map_err(crate::error::GetSmsTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_user_endpoints_get_user_endpoints_output_endpoints_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::EndpointsResponse>,
    crate::error::GetUserEndpointsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_endpoints_response_payload(body)
                .map_err(crate::error::GetUserEndpointsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_voice_channel_get_voice_channel_output_voice_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::VoiceChannelResponse>,
    crate::error::GetVoiceChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_voice_channel_response_payload(body)
                .map_err(crate::error::GetVoiceChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_voice_template_get_voice_template_output_voice_template_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::VoiceTemplateResponse>,
    crate::error::GetVoiceTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_voice_template_response_payload(body)
                .map_err(crate::error::GetVoiceTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_list_journeys_list_journeys_output_journeys_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::JourneysResponse>,
    crate::error::ListJourneysError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_journeys_response_payload(body)
                .map_err(crate::error::ListJourneysError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_list_tags_for_resource_list_tags_for_resource_output_tags_model(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::TagsModel>,
    crate::error::ListTagsForResourceError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_tags_model_payload(body)
                .map_err(crate::error::ListTagsForResourceError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_list_templates_list_templates_output_templates_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::TemplatesResponse>,
    crate::error::ListTemplatesError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_templates_response_payload(body)
                .map_err(crate::error::ListTemplatesError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_list_template_versions_list_template_versions_output_template_versions_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::TemplateVersionsResponse>,
    crate::error::ListTemplateVersionsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_template_versions_response_payload(body)
                .map_err(crate::error::ListTemplateVersionsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_phone_number_validate_phone_number_validate_output_number_validate_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::NumberValidateResponse>,
    crate::error::PhoneNumberValidateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_number_validate_response_payload(body)
                .map_err(crate::error::PhoneNumberValidateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_put_events_put_events_output_events_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::EventsResponse>,
    crate::error::PutEventsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_events_response_payload(body)
                .map_err(crate::error::PutEventsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_put_event_stream_put_event_stream_output_event_stream(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::EventStream>,
    crate::error::PutEventStreamError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_event_stream_payload(body)
                .map_err(crate::error::PutEventStreamError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_remove_attributes_remove_attributes_output_attributes_resource(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::AttributesResource>,
    crate::error::RemoveAttributesError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_attributes_resource_payload(body)
                .map_err(crate::error::RemoveAttributesError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_send_messages_send_messages_output_message_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageResponse>,
    crate::error::SendMessagesError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_response_payload(body)
                .map_err(crate::error::SendMessagesError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_send_otp_message_send_otp_message_output_message_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageResponse>,
    crate::error::SendOTPMessageError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_response_payload(body)
                .map_err(crate::error::SendOTPMessageError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_send_users_messages_send_users_messages_output_send_users_message_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::SendUsersMessageResponse>,
    crate::error::SendUsersMessagesError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_send_users_message_response_payload(body)
                .map_err(crate::error::SendUsersMessagesError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_adm_channel_update_adm_channel_output_adm_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::AdmChannelResponse>,
    crate::error::UpdateAdmChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_adm_channel_response_payload(body)
                .map_err(crate::error::UpdateAdmChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_apns_channel_update_apns_channel_output_apns_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApnsChannelResponse>,
    crate::error::UpdateApnsChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_apns_channel_response_payload(body)
                .map_err(crate::error::UpdateApnsChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_apns_sandbox_channel_update_apns_sandbox_channel_output_apns_sandbox_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApnsSandboxChannelResponse>,
    crate::error::UpdateApnsSandboxChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_apns_sandbox_channel_response_payload(
                body,
            )
            .map_err(crate::error::UpdateApnsSandboxChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_apns_voip_channel_update_apns_voip_channel_output_apns_voip_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApnsVoipChannelResponse>,
    crate::error::UpdateApnsVoipChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_apns_voip_channel_response_payload(body)
                .map_err(crate::error::UpdateApnsVoipChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_apns_voip_sandbox_channel_update_apns_voip_sandbox_channel_output_apns_voip_sandbox_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApnsVoipSandboxChannelResponse>,
    crate::error::UpdateApnsVoipSandboxChannelError,
> {
    (!body.is_empty()).then(||{
        crate::json_deser::deser_structure_crate_model_apns_voip_sandbox_channel_response_payload(body).map_err(crate::error::UpdateApnsVoipSandboxChannelError::unhandled)
    }).transpose()
}

pub fn deser_payload_update_application_settings_update_application_settings_output_application_settings_resource(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ApplicationSettingsResource>,
    crate::error::UpdateApplicationSettingsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_application_settings_resource_payload(
                body,
            )
            .map_err(crate::error::UpdateApplicationSettingsError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_baidu_channel_update_baidu_channel_output_baidu_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::BaiduChannelResponse>,
    crate::error::UpdateBaiduChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_baidu_channel_response_payload(body)
                .map_err(crate::error::UpdateBaiduChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_campaign_update_campaign_output_campaign_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CampaignResponse>,
    crate::error::UpdateCampaignError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_campaign_response_payload(body)
                .map_err(crate::error::UpdateCampaignError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_email_channel_update_email_channel_output_email_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::EmailChannelResponse>,
    crate::error::UpdateEmailChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_email_channel_response_payload(body)
                .map_err(crate::error::UpdateEmailChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_email_template_update_email_template_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::UpdateEmailTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::UpdateEmailTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_endpoint_update_endpoint_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::UpdateEndpointError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::UpdateEndpointError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_endpoints_batch_update_endpoints_batch_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::UpdateEndpointsBatchError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::UpdateEndpointsBatchError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_gcm_channel_update_gcm_channel_output_gcm_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::GcmChannelResponse>,
    crate::error::UpdateGcmChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_gcm_channel_response_payload(body)
                .map_err(crate::error::UpdateGcmChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_in_app_template_update_in_app_template_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::UpdateInAppTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::UpdateInAppTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_journey_update_journey_output_journey_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::JourneyResponse>,
    crate::error::UpdateJourneyError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_journey_response_payload(body)
                .map_err(crate::error::UpdateJourneyError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_journey_state_update_journey_state_output_journey_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::JourneyResponse>,
    crate::error::UpdateJourneyStateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_journey_response_payload(body)
                .map_err(crate::error::UpdateJourneyStateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_push_template_update_push_template_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::UpdatePushTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::UpdatePushTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_recommender_configuration_update_recommender_configuration_output_recommender_configuration_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::RecommenderConfigurationResponse>,
    crate::error::UpdateRecommenderConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::json_deser::deser_structure_crate_model_recommender_configuration_response_payload(body).map_err(crate::error::UpdateRecommenderConfigurationError::unhandled)
    }).transpose()
}

pub fn deser_payload_update_segment_update_segment_output_segment_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::SegmentResponse>,
    crate::error::UpdateSegmentError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_segment_response_payload(body)
                .map_err(crate::error::UpdateSegmentError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_sms_channel_update_sms_channel_output_sms_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::SmsChannelResponse>,
    crate::error::UpdateSmsChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_sms_channel_response_payload(body)
                .map_err(crate::error::UpdateSmsChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_sms_template_update_sms_template_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::UpdateSmsTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::UpdateSmsTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_template_active_version_update_template_active_version_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::UpdateTemplateActiveVersionError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::UpdateTemplateActiveVersionError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_voice_channel_update_voice_channel_output_voice_channel_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::VoiceChannelResponse>,
    crate::error::UpdateVoiceChannelError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_voice_channel_response_payload(body)
                .map_err(crate::error::UpdateVoiceChannelError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_update_voice_template_update_voice_template_output_message_body(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MessageBody>,
    crate::error::UpdateVoiceTemplateError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_message_body_payload(body)
                .map_err(crate::error::UpdateVoiceTemplateError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_verify_otp_message_verify_otp_message_output_verification_response(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::VerificationResponse>,
    crate::error::VerifyOTPMessageError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_verification_response_payload(body)
                .map_err(crate::error::VerifyOTPMessageError::unhandled)
        })
        .transpose()
}
