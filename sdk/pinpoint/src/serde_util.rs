// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_app_output_correct_errors(
    mut builder: crate::operation::create_app::builders::CreateAppOutputBuilder,
) -> crate::operation::create_app::builders::CreateAppOutputBuilder {
    if builder.application_response.is_none() {
        builder.application_response = {
            let builder = crate::types::builders::ApplicationResponseBuilder::default();
            Some(crate::serde_util::application_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn create_campaign_output_correct_errors(
    mut builder: crate::operation::create_campaign::builders::CreateCampaignOutputBuilder,
) -> crate::operation::create_campaign::builders::CreateCampaignOutputBuilder {
    if builder.campaign_response.is_none() {
        builder.campaign_response = {
            let builder = crate::types::builders::CampaignResponseBuilder::default();
            Some(crate::serde_util::campaign_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn create_email_template_output_correct_errors(
    mut builder: crate::operation::create_email_template::builders::CreateEmailTemplateOutputBuilder,
) -> crate::operation::create_email_template::builders::CreateEmailTemplateOutputBuilder {
    if builder.create_template_message_body.is_none() {
        builder.create_template_message_body = {
            let builder = crate::types::builders::CreateTemplateMessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn create_export_job_output_correct_errors(
    mut builder: crate::operation::create_export_job::builders::CreateExportJobOutputBuilder,
) -> crate::operation::create_export_job::builders::CreateExportJobOutputBuilder {
    if builder.export_job_response.is_none() {
        builder.export_job_response = {
            let builder = crate::types::builders::ExportJobResponseBuilder::default();
            Some(crate::serde_util::export_job_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn create_import_job_output_correct_errors(
    mut builder: crate::operation::create_import_job::builders::CreateImportJobOutputBuilder,
) -> crate::operation::create_import_job::builders::CreateImportJobOutputBuilder {
    if builder.import_job_response.is_none() {
        builder.import_job_response = {
            let builder = crate::types::builders::ImportJobResponseBuilder::default();
            Some(crate::serde_util::import_job_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn create_in_app_template_output_correct_errors(
    mut builder: crate::operation::create_in_app_template::builders::CreateInAppTemplateOutputBuilder,
) -> crate::operation::create_in_app_template::builders::CreateInAppTemplateOutputBuilder {
    if builder.template_create_message_body.is_none() {
        builder.template_create_message_body = {
            let builder = crate::types::builders::TemplateCreateMessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn create_journey_output_correct_errors(
    mut builder: crate::operation::create_journey::builders::CreateJourneyOutputBuilder,
) -> crate::operation::create_journey::builders::CreateJourneyOutputBuilder {
    if builder.journey_response.is_none() {
        builder.journey_response = {
            let builder = crate::types::builders::JourneyResponseBuilder::default();
            Some(crate::serde_util::journey_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn create_push_template_output_correct_errors(
    mut builder: crate::operation::create_push_template::builders::CreatePushTemplateOutputBuilder,
) -> crate::operation::create_push_template::builders::CreatePushTemplateOutputBuilder {
    if builder.create_template_message_body.is_none() {
        builder.create_template_message_body = {
            let builder = crate::types::builders::CreateTemplateMessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn create_recommender_configuration_output_correct_errors(
    mut builder: crate::operation::create_recommender_configuration::builders::CreateRecommenderConfigurationOutputBuilder,
) -> crate::operation::create_recommender_configuration::builders::CreateRecommenderConfigurationOutputBuilder {
    if builder.recommender_configuration_response.is_none() {
        builder.recommender_configuration_response = {
            let builder = crate::types::builders::RecommenderConfigurationResponseBuilder::default();
            Some(crate::serde_util::recommender_configuration_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn create_segment_output_correct_errors(
    mut builder: crate::operation::create_segment::builders::CreateSegmentOutputBuilder,
) -> crate::operation::create_segment::builders::CreateSegmentOutputBuilder {
    if builder.segment_response.is_none() {
        builder.segment_response = {
            let builder = crate::types::builders::SegmentResponseBuilder::default();
            Some(crate::serde_util::segment_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn create_sms_template_output_correct_errors(
    mut builder: crate::operation::create_sms_template::builders::CreateSmsTemplateOutputBuilder,
) -> crate::operation::create_sms_template::builders::CreateSmsTemplateOutputBuilder {
    if builder.create_template_message_body.is_none() {
        builder.create_template_message_body = {
            let builder = crate::types::builders::CreateTemplateMessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn create_voice_template_output_correct_errors(
    mut builder: crate::operation::create_voice_template::builders::CreateVoiceTemplateOutputBuilder,
) -> crate::operation::create_voice_template::builders::CreateVoiceTemplateOutputBuilder {
    if builder.create_template_message_body.is_none() {
        builder.create_template_message_body = {
            let builder = crate::types::builders::CreateTemplateMessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_adm_channel_output_correct_errors(
    mut builder: crate::operation::delete_adm_channel::builders::DeleteAdmChannelOutputBuilder,
) -> crate::operation::delete_adm_channel::builders::DeleteAdmChannelOutputBuilder {
    if builder.adm_channel_response.is_none() {
        builder.adm_channel_response = {
            let builder = crate::types::builders::AdmChannelResponseBuilder::default();
            Some(crate::serde_util::adm_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_apns_channel_output_correct_errors(
    mut builder: crate::operation::delete_apns_channel::builders::DeleteApnsChannelOutputBuilder,
) -> crate::operation::delete_apns_channel::builders::DeleteApnsChannelOutputBuilder {
    if builder.apns_channel_response.is_none() {
        builder.apns_channel_response = {
            let builder = crate::types::builders::ApnsChannelResponseBuilder::default();
            Some(crate::serde_util::apns_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_apns_sandbox_channel_output_correct_errors(
    mut builder: crate::operation::delete_apns_sandbox_channel::builders::DeleteApnsSandboxChannelOutputBuilder,
) -> crate::operation::delete_apns_sandbox_channel::builders::DeleteApnsSandboxChannelOutputBuilder {
    if builder.apns_sandbox_channel_response.is_none() {
        builder.apns_sandbox_channel_response = {
            let builder = crate::types::builders::ApnsSandboxChannelResponseBuilder::default();
            Some(crate::serde_util::apns_sandbox_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_apns_voip_channel_output_correct_errors(
    mut builder: crate::operation::delete_apns_voip_channel::builders::DeleteApnsVoipChannelOutputBuilder,
) -> crate::operation::delete_apns_voip_channel::builders::DeleteApnsVoipChannelOutputBuilder {
    if builder.apns_voip_channel_response.is_none() {
        builder.apns_voip_channel_response = {
            let builder = crate::types::builders::ApnsVoipChannelResponseBuilder::default();
            Some(crate::serde_util::apns_voip_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_apns_voip_sandbox_channel_output_correct_errors(
    mut builder: crate::operation::delete_apns_voip_sandbox_channel::builders::DeleteApnsVoipSandboxChannelOutputBuilder,
) -> crate::operation::delete_apns_voip_sandbox_channel::builders::DeleteApnsVoipSandboxChannelOutputBuilder {
    if builder.apns_voip_sandbox_channel_response.is_none() {
        builder.apns_voip_sandbox_channel_response = {
            let builder = crate::types::builders::ApnsVoipSandboxChannelResponseBuilder::default();
            Some(crate::serde_util::apns_voip_sandbox_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_app_output_correct_errors(
    mut builder: crate::operation::delete_app::builders::DeleteAppOutputBuilder,
) -> crate::operation::delete_app::builders::DeleteAppOutputBuilder {
    if builder.application_response.is_none() {
        builder.application_response = {
            let builder = crate::types::builders::ApplicationResponseBuilder::default();
            Some(crate::serde_util::application_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_baidu_channel_output_correct_errors(
    mut builder: crate::operation::delete_baidu_channel::builders::DeleteBaiduChannelOutputBuilder,
) -> crate::operation::delete_baidu_channel::builders::DeleteBaiduChannelOutputBuilder {
    if builder.baidu_channel_response.is_none() {
        builder.baidu_channel_response = {
            let builder = crate::types::builders::BaiduChannelResponseBuilder::default();
            Some(crate::serde_util::baidu_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_campaign_output_correct_errors(
    mut builder: crate::operation::delete_campaign::builders::DeleteCampaignOutputBuilder,
) -> crate::operation::delete_campaign::builders::DeleteCampaignOutputBuilder {
    if builder.campaign_response.is_none() {
        builder.campaign_response = {
            let builder = crate::types::builders::CampaignResponseBuilder::default();
            Some(crate::serde_util::campaign_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_email_channel_output_correct_errors(
    mut builder: crate::operation::delete_email_channel::builders::DeleteEmailChannelOutputBuilder,
) -> crate::operation::delete_email_channel::builders::DeleteEmailChannelOutputBuilder {
    if builder.email_channel_response.is_none() {
        builder.email_channel_response = {
            let builder = crate::types::builders::EmailChannelResponseBuilder::default();
            Some(crate::serde_util::email_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_email_template_output_correct_errors(
    mut builder: crate::operation::delete_email_template::builders::DeleteEmailTemplateOutputBuilder,
) -> crate::operation::delete_email_template::builders::DeleteEmailTemplateOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_endpoint_output_correct_errors(
    mut builder: crate::operation::delete_endpoint::builders::DeleteEndpointOutputBuilder,
) -> crate::operation::delete_endpoint::builders::DeleteEndpointOutputBuilder {
    if builder.endpoint_response.is_none() {
        builder.endpoint_response = {
            let builder = crate::types::builders::EndpointResponseBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_event_stream_output_correct_errors(
    mut builder: crate::operation::delete_event_stream::builders::DeleteEventStreamOutputBuilder,
) -> crate::operation::delete_event_stream::builders::DeleteEventStreamOutputBuilder {
    if builder.event_stream.is_none() {
        builder.event_stream = {
            let builder = crate::types::builders::EventStreamBuilder::default();
            Some(crate::serde_util::event_stream_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_gcm_channel_output_correct_errors(
    mut builder: crate::operation::delete_gcm_channel::builders::DeleteGcmChannelOutputBuilder,
) -> crate::operation::delete_gcm_channel::builders::DeleteGcmChannelOutputBuilder {
    if builder.gcm_channel_response.is_none() {
        builder.gcm_channel_response = {
            let builder = crate::types::builders::GcmChannelResponseBuilder::default();
            Some(crate::serde_util::gcm_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_in_app_template_output_correct_errors(
    mut builder: crate::operation::delete_in_app_template::builders::DeleteInAppTemplateOutputBuilder,
) -> crate::operation::delete_in_app_template::builders::DeleteInAppTemplateOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_journey_output_correct_errors(
    mut builder: crate::operation::delete_journey::builders::DeleteJourneyOutputBuilder,
) -> crate::operation::delete_journey::builders::DeleteJourneyOutputBuilder {
    if builder.journey_response.is_none() {
        builder.journey_response = {
            let builder = crate::types::builders::JourneyResponseBuilder::default();
            Some(crate::serde_util::journey_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_push_template_output_correct_errors(
    mut builder: crate::operation::delete_push_template::builders::DeletePushTemplateOutputBuilder,
) -> crate::operation::delete_push_template::builders::DeletePushTemplateOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_recommender_configuration_output_correct_errors(
    mut builder: crate::operation::delete_recommender_configuration::builders::DeleteRecommenderConfigurationOutputBuilder,
) -> crate::operation::delete_recommender_configuration::builders::DeleteRecommenderConfigurationOutputBuilder {
    if builder.recommender_configuration_response.is_none() {
        builder.recommender_configuration_response = {
            let builder = crate::types::builders::RecommenderConfigurationResponseBuilder::default();
            Some(crate::serde_util::recommender_configuration_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_segment_output_correct_errors(
    mut builder: crate::operation::delete_segment::builders::DeleteSegmentOutputBuilder,
) -> crate::operation::delete_segment::builders::DeleteSegmentOutputBuilder {
    if builder.segment_response.is_none() {
        builder.segment_response = {
            let builder = crate::types::builders::SegmentResponseBuilder::default();
            Some(crate::serde_util::segment_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_sms_channel_output_correct_errors(
    mut builder: crate::operation::delete_sms_channel::builders::DeleteSmsChannelOutputBuilder,
) -> crate::operation::delete_sms_channel::builders::DeleteSmsChannelOutputBuilder {
    if builder.sms_channel_response.is_none() {
        builder.sms_channel_response = {
            let builder = crate::types::builders::SmsChannelResponseBuilder::default();
            Some(crate::serde_util::sms_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_sms_template_output_correct_errors(
    mut builder: crate::operation::delete_sms_template::builders::DeleteSmsTemplateOutputBuilder,
) -> crate::operation::delete_sms_template::builders::DeleteSmsTemplateOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_user_endpoints_output_correct_errors(
    mut builder: crate::operation::delete_user_endpoints::builders::DeleteUserEndpointsOutputBuilder,
) -> crate::operation::delete_user_endpoints::builders::DeleteUserEndpointsOutputBuilder {
    if builder.endpoints_response.is_none() {
        builder.endpoints_response = {
            let builder = crate::types::builders::EndpointsResponseBuilder::default();
            Some(crate::serde_util::endpoints_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_voice_channel_output_correct_errors(
    mut builder: crate::operation::delete_voice_channel::builders::DeleteVoiceChannelOutputBuilder,
) -> crate::operation::delete_voice_channel::builders::DeleteVoiceChannelOutputBuilder {
    if builder.voice_channel_response.is_none() {
        builder.voice_channel_response = {
            let builder = crate::types::builders::VoiceChannelResponseBuilder::default();
            Some(crate::serde_util::voice_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_voice_template_output_correct_errors(
    mut builder: crate::operation::delete_voice_template::builders::DeleteVoiceTemplateOutputBuilder,
) -> crate::operation::delete_voice_template::builders::DeleteVoiceTemplateOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_adm_channel_output_correct_errors(
    mut builder: crate::operation::get_adm_channel::builders::GetAdmChannelOutputBuilder,
) -> crate::operation::get_adm_channel::builders::GetAdmChannelOutputBuilder {
    if builder.adm_channel_response.is_none() {
        builder.adm_channel_response = {
            let builder = crate::types::builders::AdmChannelResponseBuilder::default();
            Some(crate::serde_util::adm_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_apns_channel_output_correct_errors(
    mut builder: crate::operation::get_apns_channel::builders::GetApnsChannelOutputBuilder,
) -> crate::operation::get_apns_channel::builders::GetApnsChannelOutputBuilder {
    if builder.apns_channel_response.is_none() {
        builder.apns_channel_response = {
            let builder = crate::types::builders::ApnsChannelResponseBuilder::default();
            Some(crate::serde_util::apns_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_apns_sandbox_channel_output_correct_errors(
    mut builder: crate::operation::get_apns_sandbox_channel::builders::GetApnsSandboxChannelOutputBuilder,
) -> crate::operation::get_apns_sandbox_channel::builders::GetApnsSandboxChannelOutputBuilder {
    if builder.apns_sandbox_channel_response.is_none() {
        builder.apns_sandbox_channel_response = {
            let builder = crate::types::builders::ApnsSandboxChannelResponseBuilder::default();
            Some(crate::serde_util::apns_sandbox_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_apns_voip_channel_output_correct_errors(
    mut builder: crate::operation::get_apns_voip_channel::builders::GetApnsVoipChannelOutputBuilder,
) -> crate::operation::get_apns_voip_channel::builders::GetApnsVoipChannelOutputBuilder {
    if builder.apns_voip_channel_response.is_none() {
        builder.apns_voip_channel_response = {
            let builder = crate::types::builders::ApnsVoipChannelResponseBuilder::default();
            Some(crate::serde_util::apns_voip_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_apns_voip_sandbox_channel_output_correct_errors(
    mut builder: crate::operation::get_apns_voip_sandbox_channel::builders::GetApnsVoipSandboxChannelOutputBuilder,
) -> crate::operation::get_apns_voip_sandbox_channel::builders::GetApnsVoipSandboxChannelOutputBuilder {
    if builder.apns_voip_sandbox_channel_response.is_none() {
        builder.apns_voip_sandbox_channel_response = {
            let builder = crate::types::builders::ApnsVoipSandboxChannelResponseBuilder::default();
            Some(crate::serde_util::apns_voip_sandbox_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_app_output_correct_errors(
    mut builder: crate::operation::get_app::builders::GetAppOutputBuilder,
) -> crate::operation::get_app::builders::GetAppOutputBuilder {
    if builder.application_response.is_none() {
        builder.application_response = {
            let builder = crate::types::builders::ApplicationResponseBuilder::default();
            Some(crate::serde_util::application_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_application_date_range_kpi_output_correct_errors(
    mut builder: crate::operation::get_application_date_range_kpi::builders::GetApplicationDateRangeKpiOutputBuilder,
) -> crate::operation::get_application_date_range_kpi::builders::GetApplicationDateRangeKpiOutputBuilder {
    if builder.application_date_range_kpi_response.is_none() {
        builder.application_date_range_kpi_response = {
            let builder = crate::types::builders::ApplicationDateRangeKpiResponseBuilder::default();
            Some(crate::serde_util::application_date_range_kpi_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_application_settings_output_correct_errors(
    mut builder: crate::operation::get_application_settings::builders::GetApplicationSettingsOutputBuilder,
) -> crate::operation::get_application_settings::builders::GetApplicationSettingsOutputBuilder {
    if builder.application_settings_resource.is_none() {
        builder.application_settings_resource = {
            let builder = crate::types::builders::ApplicationSettingsResourceBuilder::default();
            Some(crate::serde_util::application_settings_resource_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_apps_output_correct_errors(
    mut builder: crate::operation::get_apps::builders::GetAppsOutputBuilder,
) -> crate::operation::get_apps::builders::GetAppsOutputBuilder {
    if builder.applications_response.is_none() {
        builder.applications_response = {
            let builder = crate::types::builders::ApplicationsResponseBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_baidu_channel_output_correct_errors(
    mut builder: crate::operation::get_baidu_channel::builders::GetBaiduChannelOutputBuilder,
) -> crate::operation::get_baidu_channel::builders::GetBaiduChannelOutputBuilder {
    if builder.baidu_channel_response.is_none() {
        builder.baidu_channel_response = {
            let builder = crate::types::builders::BaiduChannelResponseBuilder::default();
            Some(crate::serde_util::baidu_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_campaign_output_correct_errors(
    mut builder: crate::operation::get_campaign::builders::GetCampaignOutputBuilder,
) -> crate::operation::get_campaign::builders::GetCampaignOutputBuilder {
    if builder.campaign_response.is_none() {
        builder.campaign_response = {
            let builder = crate::types::builders::CampaignResponseBuilder::default();
            Some(crate::serde_util::campaign_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_campaign_activities_output_correct_errors(
    mut builder: crate::operation::get_campaign_activities::builders::GetCampaignActivitiesOutputBuilder,
) -> crate::operation::get_campaign_activities::builders::GetCampaignActivitiesOutputBuilder {
    if builder.activities_response.is_none() {
        builder.activities_response = {
            let builder = crate::types::builders::ActivitiesResponseBuilder::default();
            Some(crate::serde_util::activities_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_campaign_date_range_kpi_output_correct_errors(
    mut builder: crate::operation::get_campaign_date_range_kpi::builders::GetCampaignDateRangeKpiOutputBuilder,
) -> crate::operation::get_campaign_date_range_kpi::builders::GetCampaignDateRangeKpiOutputBuilder {
    if builder.campaign_date_range_kpi_response.is_none() {
        builder.campaign_date_range_kpi_response = {
            let builder = crate::types::builders::CampaignDateRangeKpiResponseBuilder::default();
            Some(crate::serde_util::campaign_date_range_kpi_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_campaign_version_output_correct_errors(
    mut builder: crate::operation::get_campaign_version::builders::GetCampaignVersionOutputBuilder,
) -> crate::operation::get_campaign_version::builders::GetCampaignVersionOutputBuilder {
    if builder.campaign_response.is_none() {
        builder.campaign_response = {
            let builder = crate::types::builders::CampaignResponseBuilder::default();
            Some(crate::serde_util::campaign_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_campaign_versions_output_correct_errors(
    mut builder: crate::operation::get_campaign_versions::builders::GetCampaignVersionsOutputBuilder,
) -> crate::operation::get_campaign_versions::builders::GetCampaignVersionsOutputBuilder {
    if builder.campaigns_response.is_none() {
        builder.campaigns_response = {
            let builder = crate::types::builders::CampaignsResponseBuilder::default();
            Some(crate::serde_util::campaigns_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_campaigns_output_correct_errors(
    mut builder: crate::operation::get_campaigns::builders::GetCampaignsOutputBuilder,
) -> crate::operation::get_campaigns::builders::GetCampaignsOutputBuilder {
    if builder.campaigns_response.is_none() {
        builder.campaigns_response = {
            let builder = crate::types::builders::CampaignsResponseBuilder::default();
            Some(crate::serde_util::campaigns_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_channels_output_correct_errors(
    mut builder: crate::operation::get_channels::builders::GetChannelsOutputBuilder,
) -> crate::operation::get_channels::builders::GetChannelsOutputBuilder {
    if builder.channels_response.is_none() {
        builder.channels_response = {
            let builder = crate::types::builders::ChannelsResponseBuilder::default();
            Some(crate::serde_util::channels_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_email_channel_output_correct_errors(
    mut builder: crate::operation::get_email_channel::builders::GetEmailChannelOutputBuilder,
) -> crate::operation::get_email_channel::builders::GetEmailChannelOutputBuilder {
    if builder.email_channel_response.is_none() {
        builder.email_channel_response = {
            let builder = crate::types::builders::EmailChannelResponseBuilder::default();
            Some(crate::serde_util::email_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_email_template_output_correct_errors(
    mut builder: crate::operation::get_email_template::builders::GetEmailTemplateOutputBuilder,
) -> crate::operation::get_email_template::builders::GetEmailTemplateOutputBuilder {
    if builder.email_template_response.is_none() {
        builder.email_template_response = {
            let builder = crate::types::builders::EmailTemplateResponseBuilder::default();
            Some(crate::serde_util::email_template_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_endpoint_output_correct_errors(
    mut builder: crate::operation::get_endpoint::builders::GetEndpointOutputBuilder,
) -> crate::operation::get_endpoint::builders::GetEndpointOutputBuilder {
    if builder.endpoint_response.is_none() {
        builder.endpoint_response = {
            let builder = crate::types::builders::EndpointResponseBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_event_stream_output_correct_errors(
    mut builder: crate::operation::get_event_stream::builders::GetEventStreamOutputBuilder,
) -> crate::operation::get_event_stream::builders::GetEventStreamOutputBuilder {
    if builder.event_stream.is_none() {
        builder.event_stream = {
            let builder = crate::types::builders::EventStreamBuilder::default();
            Some(crate::serde_util::event_stream_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_export_job_output_correct_errors(
    mut builder: crate::operation::get_export_job::builders::GetExportJobOutputBuilder,
) -> crate::operation::get_export_job::builders::GetExportJobOutputBuilder {
    if builder.export_job_response.is_none() {
        builder.export_job_response = {
            let builder = crate::types::builders::ExportJobResponseBuilder::default();
            Some(crate::serde_util::export_job_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_export_jobs_output_correct_errors(
    mut builder: crate::operation::get_export_jobs::builders::GetExportJobsOutputBuilder,
) -> crate::operation::get_export_jobs::builders::GetExportJobsOutputBuilder {
    if builder.export_jobs_response.is_none() {
        builder.export_jobs_response = {
            let builder = crate::types::builders::ExportJobsResponseBuilder::default();
            Some(crate::serde_util::export_jobs_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_gcm_channel_output_correct_errors(
    mut builder: crate::operation::get_gcm_channel::builders::GetGcmChannelOutputBuilder,
) -> crate::operation::get_gcm_channel::builders::GetGcmChannelOutputBuilder {
    if builder.gcm_channel_response.is_none() {
        builder.gcm_channel_response = {
            let builder = crate::types::builders::GcmChannelResponseBuilder::default();
            Some(crate::serde_util::gcm_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_import_job_output_correct_errors(
    mut builder: crate::operation::get_import_job::builders::GetImportJobOutputBuilder,
) -> crate::operation::get_import_job::builders::GetImportJobOutputBuilder {
    if builder.import_job_response.is_none() {
        builder.import_job_response = {
            let builder = crate::types::builders::ImportJobResponseBuilder::default();
            Some(crate::serde_util::import_job_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_import_jobs_output_correct_errors(
    mut builder: crate::operation::get_import_jobs::builders::GetImportJobsOutputBuilder,
) -> crate::operation::get_import_jobs::builders::GetImportJobsOutputBuilder {
    if builder.import_jobs_response.is_none() {
        builder.import_jobs_response = {
            let builder = crate::types::builders::ImportJobsResponseBuilder::default();
            Some(crate::serde_util::import_jobs_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_in_app_messages_output_correct_errors(
    mut builder: crate::operation::get_in_app_messages::builders::GetInAppMessagesOutputBuilder,
) -> crate::operation::get_in_app_messages::builders::GetInAppMessagesOutputBuilder {
    if builder.in_app_messages_response.is_none() {
        builder.in_app_messages_response = {
            let builder = crate::types::builders::InAppMessagesResponseBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_in_app_template_output_correct_errors(
    mut builder: crate::operation::get_in_app_template::builders::GetInAppTemplateOutputBuilder,
) -> crate::operation::get_in_app_template::builders::GetInAppTemplateOutputBuilder {
    if builder.in_app_template_response.is_none() {
        builder.in_app_template_response = {
            let builder = crate::types::builders::InAppTemplateResponseBuilder::default();
            Some(crate::serde_util::in_app_template_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_journey_output_correct_errors(
    mut builder: crate::operation::get_journey::builders::GetJourneyOutputBuilder,
) -> crate::operation::get_journey::builders::GetJourneyOutputBuilder {
    if builder.journey_response.is_none() {
        builder.journey_response = {
            let builder = crate::types::builders::JourneyResponseBuilder::default();
            Some(crate::serde_util::journey_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_journey_date_range_kpi_output_correct_errors(
    mut builder: crate::operation::get_journey_date_range_kpi::builders::GetJourneyDateRangeKpiOutputBuilder,
) -> crate::operation::get_journey_date_range_kpi::builders::GetJourneyDateRangeKpiOutputBuilder {
    if builder.journey_date_range_kpi_response.is_none() {
        builder.journey_date_range_kpi_response = {
            let builder = crate::types::builders::JourneyDateRangeKpiResponseBuilder::default();
            Some(crate::serde_util::journey_date_range_kpi_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_journey_execution_activity_metrics_output_correct_errors(
    mut builder: crate::operation::get_journey_execution_activity_metrics::builders::GetJourneyExecutionActivityMetricsOutputBuilder,
) -> crate::operation::get_journey_execution_activity_metrics::builders::GetJourneyExecutionActivityMetricsOutputBuilder {
    if builder.journey_execution_activity_metrics_response.is_none() {
        builder.journey_execution_activity_metrics_response = {
            let builder = crate::types::builders::JourneyExecutionActivityMetricsResponseBuilder::default();
            Some(crate::serde_util::journey_execution_activity_metrics_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_journey_execution_metrics_output_correct_errors(
    mut builder: crate::operation::get_journey_execution_metrics::builders::GetJourneyExecutionMetricsOutputBuilder,
) -> crate::operation::get_journey_execution_metrics::builders::GetJourneyExecutionMetricsOutputBuilder {
    if builder.journey_execution_metrics_response.is_none() {
        builder.journey_execution_metrics_response = {
            let builder = crate::types::builders::JourneyExecutionMetricsResponseBuilder::default();
            Some(crate::serde_util::journey_execution_metrics_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_journey_run_execution_activity_metrics_output_correct_errors(
    mut builder: crate::operation::get_journey_run_execution_activity_metrics::builders::GetJourneyRunExecutionActivityMetricsOutputBuilder,
) -> crate::operation::get_journey_run_execution_activity_metrics::builders::GetJourneyRunExecutionActivityMetricsOutputBuilder {
    if builder.journey_run_execution_activity_metrics_response.is_none() {
        builder.journey_run_execution_activity_metrics_response = {
            let builder = crate::types::builders::JourneyRunExecutionActivityMetricsResponseBuilder::default();
            Some(crate::serde_util::journey_run_execution_activity_metrics_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_journey_run_execution_metrics_output_correct_errors(
    mut builder: crate::operation::get_journey_run_execution_metrics::builders::GetJourneyRunExecutionMetricsOutputBuilder,
) -> crate::operation::get_journey_run_execution_metrics::builders::GetJourneyRunExecutionMetricsOutputBuilder {
    if builder.journey_run_execution_metrics_response.is_none() {
        builder.journey_run_execution_metrics_response = {
            let builder = crate::types::builders::JourneyRunExecutionMetricsResponseBuilder::default();
            Some(crate::serde_util::journey_run_execution_metrics_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_journey_runs_output_correct_errors(
    mut builder: crate::operation::get_journey_runs::builders::GetJourneyRunsOutputBuilder,
) -> crate::operation::get_journey_runs::builders::GetJourneyRunsOutputBuilder {
    if builder.journey_runs_response.is_none() {
        builder.journey_runs_response = {
            let builder = crate::types::builders::JourneyRunsResponseBuilder::default();
            Some(crate::serde_util::journey_runs_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_push_template_output_correct_errors(
    mut builder: crate::operation::get_push_template::builders::GetPushTemplateOutputBuilder,
) -> crate::operation::get_push_template::builders::GetPushTemplateOutputBuilder {
    if builder.push_notification_template_response.is_none() {
        builder.push_notification_template_response = {
            let builder = crate::types::builders::PushNotificationTemplateResponseBuilder::default();
            Some(crate::serde_util::push_notification_template_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_recommender_configuration_output_correct_errors(
    mut builder: crate::operation::get_recommender_configuration::builders::GetRecommenderConfigurationOutputBuilder,
) -> crate::operation::get_recommender_configuration::builders::GetRecommenderConfigurationOutputBuilder {
    if builder.recommender_configuration_response.is_none() {
        builder.recommender_configuration_response = {
            let builder = crate::types::builders::RecommenderConfigurationResponseBuilder::default();
            Some(crate::serde_util::recommender_configuration_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_recommender_configurations_output_correct_errors(
    mut builder: crate::operation::get_recommender_configurations::builders::GetRecommenderConfigurationsOutputBuilder,
) -> crate::operation::get_recommender_configurations::builders::GetRecommenderConfigurationsOutputBuilder {
    if builder.list_recommender_configurations_response.is_none() {
        builder.list_recommender_configurations_response = {
            let builder = crate::types::builders::ListRecommenderConfigurationsResponseBuilder::default();
            Some(crate::serde_util::list_recommender_configurations_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_segment_output_correct_errors(
    mut builder: crate::operation::get_segment::builders::GetSegmentOutputBuilder,
) -> crate::operation::get_segment::builders::GetSegmentOutputBuilder {
    if builder.segment_response.is_none() {
        builder.segment_response = {
            let builder = crate::types::builders::SegmentResponseBuilder::default();
            Some(crate::serde_util::segment_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_segment_export_jobs_output_correct_errors(
    mut builder: crate::operation::get_segment_export_jobs::builders::GetSegmentExportJobsOutputBuilder,
) -> crate::operation::get_segment_export_jobs::builders::GetSegmentExportJobsOutputBuilder {
    if builder.export_jobs_response.is_none() {
        builder.export_jobs_response = {
            let builder = crate::types::builders::ExportJobsResponseBuilder::default();
            Some(crate::serde_util::export_jobs_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_segment_import_jobs_output_correct_errors(
    mut builder: crate::operation::get_segment_import_jobs::builders::GetSegmentImportJobsOutputBuilder,
) -> crate::operation::get_segment_import_jobs::builders::GetSegmentImportJobsOutputBuilder {
    if builder.import_jobs_response.is_none() {
        builder.import_jobs_response = {
            let builder = crate::types::builders::ImportJobsResponseBuilder::default();
            Some(crate::serde_util::import_jobs_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_segment_version_output_correct_errors(
    mut builder: crate::operation::get_segment_version::builders::GetSegmentVersionOutputBuilder,
) -> crate::operation::get_segment_version::builders::GetSegmentVersionOutputBuilder {
    if builder.segment_response.is_none() {
        builder.segment_response = {
            let builder = crate::types::builders::SegmentResponseBuilder::default();
            Some(crate::serde_util::segment_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_segment_versions_output_correct_errors(
    mut builder: crate::operation::get_segment_versions::builders::GetSegmentVersionsOutputBuilder,
) -> crate::operation::get_segment_versions::builders::GetSegmentVersionsOutputBuilder {
    if builder.segments_response.is_none() {
        builder.segments_response = {
            let builder = crate::types::builders::SegmentsResponseBuilder::default();
            Some(crate::serde_util::segments_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_segments_output_correct_errors(
    mut builder: crate::operation::get_segments::builders::GetSegmentsOutputBuilder,
) -> crate::operation::get_segments::builders::GetSegmentsOutputBuilder {
    if builder.segments_response.is_none() {
        builder.segments_response = {
            let builder = crate::types::builders::SegmentsResponseBuilder::default();
            Some(crate::serde_util::segments_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_sms_channel_output_correct_errors(
    mut builder: crate::operation::get_sms_channel::builders::GetSmsChannelOutputBuilder,
) -> crate::operation::get_sms_channel::builders::GetSmsChannelOutputBuilder {
    if builder.sms_channel_response.is_none() {
        builder.sms_channel_response = {
            let builder = crate::types::builders::SmsChannelResponseBuilder::default();
            Some(crate::serde_util::sms_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_sms_template_output_correct_errors(
    mut builder: crate::operation::get_sms_template::builders::GetSmsTemplateOutputBuilder,
) -> crate::operation::get_sms_template::builders::GetSmsTemplateOutputBuilder {
    if builder.sms_template_response.is_none() {
        builder.sms_template_response = {
            let builder = crate::types::builders::SmsTemplateResponseBuilder::default();
            Some(crate::serde_util::sms_template_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_user_endpoints_output_correct_errors(
    mut builder: crate::operation::get_user_endpoints::builders::GetUserEndpointsOutputBuilder,
) -> crate::operation::get_user_endpoints::builders::GetUserEndpointsOutputBuilder {
    if builder.endpoints_response.is_none() {
        builder.endpoints_response = {
            let builder = crate::types::builders::EndpointsResponseBuilder::default();
            Some(crate::serde_util::endpoints_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_voice_channel_output_correct_errors(
    mut builder: crate::operation::get_voice_channel::builders::GetVoiceChannelOutputBuilder,
) -> crate::operation::get_voice_channel::builders::GetVoiceChannelOutputBuilder {
    if builder.voice_channel_response.is_none() {
        builder.voice_channel_response = {
            let builder = crate::types::builders::VoiceChannelResponseBuilder::default();
            Some(crate::serde_util::voice_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_voice_template_output_correct_errors(
    mut builder: crate::operation::get_voice_template::builders::GetVoiceTemplateOutputBuilder,
) -> crate::operation::get_voice_template::builders::GetVoiceTemplateOutputBuilder {
    if builder.voice_template_response.is_none() {
        builder.voice_template_response = {
            let builder = crate::types::builders::VoiceTemplateResponseBuilder::default();
            Some(crate::serde_util::voice_template_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn list_journeys_output_correct_errors(
    mut builder: crate::operation::list_journeys::builders::ListJourneysOutputBuilder,
) -> crate::operation::list_journeys::builders::ListJourneysOutputBuilder {
    if builder.journeys_response.is_none() {
        builder.journeys_response = {
            let builder = crate::types::builders::JourneysResponseBuilder::default();
            Some(crate::serde_util::journeys_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags_model.is_none() {
        builder.tags_model = {
            let builder = crate::types::builders::TagsModelBuilder::default();
            Some(crate::serde_util::tags_model_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn list_template_versions_output_correct_errors(
    mut builder: crate::operation::list_template_versions::builders::ListTemplateVersionsOutputBuilder,
) -> crate::operation::list_template_versions::builders::ListTemplateVersionsOutputBuilder {
    if builder.template_versions_response.is_none() {
        builder.template_versions_response = {
            let builder = crate::types::builders::TemplateVersionsResponseBuilder::default();
            Some(crate::serde_util::template_versions_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn list_templates_output_correct_errors(
    mut builder: crate::operation::list_templates::builders::ListTemplatesOutputBuilder,
) -> crate::operation::list_templates::builders::ListTemplatesOutputBuilder {
    if builder.templates_response.is_none() {
        builder.templates_response = {
            let builder = crate::types::builders::TemplatesResponseBuilder::default();
            Some(crate::serde_util::templates_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn phone_number_validate_output_correct_errors(
    mut builder: crate::operation::phone_number_validate::builders::PhoneNumberValidateOutputBuilder,
) -> crate::operation::phone_number_validate::builders::PhoneNumberValidateOutputBuilder {
    if builder.number_validate_response.is_none() {
        builder.number_validate_response = {
            let builder = crate::types::builders::NumberValidateResponseBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn put_event_stream_output_correct_errors(
    mut builder: crate::operation::put_event_stream::builders::PutEventStreamOutputBuilder,
) -> crate::operation::put_event_stream::builders::PutEventStreamOutputBuilder {
    if builder.event_stream.is_none() {
        builder.event_stream = {
            let builder = crate::types::builders::EventStreamBuilder::default();
            Some(crate::serde_util::event_stream_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn put_events_output_correct_errors(
    mut builder: crate::operation::put_events::builders::PutEventsOutputBuilder,
) -> crate::operation::put_events::builders::PutEventsOutputBuilder {
    if builder.events_response.is_none() {
        builder.events_response = {
            let builder = crate::types::builders::EventsResponseBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn remove_attributes_output_correct_errors(
    mut builder: crate::operation::remove_attributes::builders::RemoveAttributesOutputBuilder,
) -> crate::operation::remove_attributes::builders::RemoveAttributesOutputBuilder {
    if builder.attributes_resource.is_none() {
        builder.attributes_resource = {
            let builder = crate::types::builders::AttributesResourceBuilder::default();
            Some(crate::serde_util::attributes_resource_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn send_messages_output_correct_errors(
    mut builder: crate::operation::send_messages::builders::SendMessagesOutputBuilder,
) -> crate::operation::send_messages::builders::SendMessagesOutputBuilder {
    if builder.message_response.is_none() {
        builder.message_response = {
            let builder = crate::types::builders::MessageResponseBuilder::default();
            Some(crate::serde_util::message_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn send_otp_message_output_correct_errors(
    mut builder: crate::operation::send_otp_message::builders::SendOtpMessageOutputBuilder,
) -> crate::operation::send_otp_message::builders::SendOtpMessageOutputBuilder {
    if builder.message_response.is_none() {
        builder.message_response = {
            let builder = crate::types::builders::MessageResponseBuilder::default();
            Some(crate::serde_util::message_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn send_users_messages_output_correct_errors(
    mut builder: crate::operation::send_users_messages::builders::SendUsersMessagesOutputBuilder,
) -> crate::operation::send_users_messages::builders::SendUsersMessagesOutputBuilder {
    if builder.send_users_message_response.is_none() {
        builder.send_users_message_response = {
            let builder = crate::types::builders::SendUsersMessageResponseBuilder::default();
            Some(crate::serde_util::send_users_message_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_adm_channel_output_correct_errors(
    mut builder: crate::operation::update_adm_channel::builders::UpdateAdmChannelOutputBuilder,
) -> crate::operation::update_adm_channel::builders::UpdateAdmChannelOutputBuilder {
    if builder.adm_channel_response.is_none() {
        builder.adm_channel_response = {
            let builder = crate::types::builders::AdmChannelResponseBuilder::default();
            Some(crate::serde_util::adm_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_apns_channel_output_correct_errors(
    mut builder: crate::operation::update_apns_channel::builders::UpdateApnsChannelOutputBuilder,
) -> crate::operation::update_apns_channel::builders::UpdateApnsChannelOutputBuilder {
    if builder.apns_channel_response.is_none() {
        builder.apns_channel_response = {
            let builder = crate::types::builders::ApnsChannelResponseBuilder::default();
            Some(crate::serde_util::apns_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_apns_sandbox_channel_output_correct_errors(
    mut builder: crate::operation::update_apns_sandbox_channel::builders::UpdateApnsSandboxChannelOutputBuilder,
) -> crate::operation::update_apns_sandbox_channel::builders::UpdateApnsSandboxChannelOutputBuilder {
    if builder.apns_sandbox_channel_response.is_none() {
        builder.apns_sandbox_channel_response = {
            let builder = crate::types::builders::ApnsSandboxChannelResponseBuilder::default();
            Some(crate::serde_util::apns_sandbox_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_apns_voip_channel_output_correct_errors(
    mut builder: crate::operation::update_apns_voip_channel::builders::UpdateApnsVoipChannelOutputBuilder,
) -> crate::operation::update_apns_voip_channel::builders::UpdateApnsVoipChannelOutputBuilder {
    if builder.apns_voip_channel_response.is_none() {
        builder.apns_voip_channel_response = {
            let builder = crate::types::builders::ApnsVoipChannelResponseBuilder::default();
            Some(crate::serde_util::apns_voip_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_apns_voip_sandbox_channel_output_correct_errors(
    mut builder: crate::operation::update_apns_voip_sandbox_channel::builders::UpdateApnsVoipSandboxChannelOutputBuilder,
) -> crate::operation::update_apns_voip_sandbox_channel::builders::UpdateApnsVoipSandboxChannelOutputBuilder {
    if builder.apns_voip_sandbox_channel_response.is_none() {
        builder.apns_voip_sandbox_channel_response = {
            let builder = crate::types::builders::ApnsVoipSandboxChannelResponseBuilder::default();
            Some(crate::serde_util::apns_voip_sandbox_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_application_settings_output_correct_errors(
    mut builder: crate::operation::update_application_settings::builders::UpdateApplicationSettingsOutputBuilder,
) -> crate::operation::update_application_settings::builders::UpdateApplicationSettingsOutputBuilder {
    if builder.application_settings_resource.is_none() {
        builder.application_settings_resource = {
            let builder = crate::types::builders::ApplicationSettingsResourceBuilder::default();
            Some(crate::serde_util::application_settings_resource_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_baidu_channel_output_correct_errors(
    mut builder: crate::operation::update_baidu_channel::builders::UpdateBaiduChannelOutputBuilder,
) -> crate::operation::update_baidu_channel::builders::UpdateBaiduChannelOutputBuilder {
    if builder.baidu_channel_response.is_none() {
        builder.baidu_channel_response = {
            let builder = crate::types::builders::BaiduChannelResponseBuilder::default();
            Some(crate::serde_util::baidu_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_campaign_output_correct_errors(
    mut builder: crate::operation::update_campaign::builders::UpdateCampaignOutputBuilder,
) -> crate::operation::update_campaign::builders::UpdateCampaignOutputBuilder {
    if builder.campaign_response.is_none() {
        builder.campaign_response = {
            let builder = crate::types::builders::CampaignResponseBuilder::default();
            Some(crate::serde_util::campaign_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_email_channel_output_correct_errors(
    mut builder: crate::operation::update_email_channel::builders::UpdateEmailChannelOutputBuilder,
) -> crate::operation::update_email_channel::builders::UpdateEmailChannelOutputBuilder {
    if builder.email_channel_response.is_none() {
        builder.email_channel_response = {
            let builder = crate::types::builders::EmailChannelResponseBuilder::default();
            Some(crate::serde_util::email_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_email_template_output_correct_errors(
    mut builder: crate::operation::update_email_template::builders::UpdateEmailTemplateOutputBuilder,
) -> crate::operation::update_email_template::builders::UpdateEmailTemplateOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_endpoint_output_correct_errors(
    mut builder: crate::operation::update_endpoint::builders::UpdateEndpointOutputBuilder,
) -> crate::operation::update_endpoint::builders::UpdateEndpointOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_endpoints_batch_output_correct_errors(
    mut builder: crate::operation::update_endpoints_batch::builders::UpdateEndpointsBatchOutputBuilder,
) -> crate::operation::update_endpoints_batch::builders::UpdateEndpointsBatchOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_gcm_channel_output_correct_errors(
    mut builder: crate::operation::update_gcm_channel::builders::UpdateGcmChannelOutputBuilder,
) -> crate::operation::update_gcm_channel::builders::UpdateGcmChannelOutputBuilder {
    if builder.gcm_channel_response.is_none() {
        builder.gcm_channel_response = {
            let builder = crate::types::builders::GcmChannelResponseBuilder::default();
            Some(crate::serde_util::gcm_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_in_app_template_output_correct_errors(
    mut builder: crate::operation::update_in_app_template::builders::UpdateInAppTemplateOutputBuilder,
) -> crate::operation::update_in_app_template::builders::UpdateInAppTemplateOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_journey_output_correct_errors(
    mut builder: crate::operation::update_journey::builders::UpdateJourneyOutputBuilder,
) -> crate::operation::update_journey::builders::UpdateJourneyOutputBuilder {
    if builder.journey_response.is_none() {
        builder.journey_response = {
            let builder = crate::types::builders::JourneyResponseBuilder::default();
            Some(crate::serde_util::journey_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_journey_state_output_correct_errors(
    mut builder: crate::operation::update_journey_state::builders::UpdateJourneyStateOutputBuilder,
) -> crate::operation::update_journey_state::builders::UpdateJourneyStateOutputBuilder {
    if builder.journey_response.is_none() {
        builder.journey_response = {
            let builder = crate::types::builders::JourneyResponseBuilder::default();
            Some(crate::serde_util::journey_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_push_template_output_correct_errors(
    mut builder: crate::operation::update_push_template::builders::UpdatePushTemplateOutputBuilder,
) -> crate::operation::update_push_template::builders::UpdatePushTemplateOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_recommender_configuration_output_correct_errors(
    mut builder: crate::operation::update_recommender_configuration::builders::UpdateRecommenderConfigurationOutputBuilder,
) -> crate::operation::update_recommender_configuration::builders::UpdateRecommenderConfigurationOutputBuilder {
    if builder.recommender_configuration_response.is_none() {
        builder.recommender_configuration_response = {
            let builder = crate::types::builders::RecommenderConfigurationResponseBuilder::default();
            Some(crate::serde_util::recommender_configuration_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_segment_output_correct_errors(
    mut builder: crate::operation::update_segment::builders::UpdateSegmentOutputBuilder,
) -> crate::operation::update_segment::builders::UpdateSegmentOutputBuilder {
    if builder.segment_response.is_none() {
        builder.segment_response = {
            let builder = crate::types::builders::SegmentResponseBuilder::default();
            Some(crate::serde_util::segment_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_sms_channel_output_correct_errors(
    mut builder: crate::operation::update_sms_channel::builders::UpdateSmsChannelOutputBuilder,
) -> crate::operation::update_sms_channel::builders::UpdateSmsChannelOutputBuilder {
    if builder.sms_channel_response.is_none() {
        builder.sms_channel_response = {
            let builder = crate::types::builders::SmsChannelResponseBuilder::default();
            Some(crate::serde_util::sms_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_sms_template_output_correct_errors(
    mut builder: crate::operation::update_sms_template::builders::UpdateSmsTemplateOutputBuilder,
) -> crate::operation::update_sms_template::builders::UpdateSmsTemplateOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_template_active_version_output_correct_errors(
    mut builder: crate::operation::update_template_active_version::builders::UpdateTemplateActiveVersionOutputBuilder,
) -> crate::operation::update_template_active_version::builders::UpdateTemplateActiveVersionOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_voice_channel_output_correct_errors(
    mut builder: crate::operation::update_voice_channel::builders::UpdateVoiceChannelOutputBuilder,
) -> crate::operation::update_voice_channel::builders::UpdateVoiceChannelOutputBuilder {
    if builder.voice_channel_response.is_none() {
        builder.voice_channel_response = {
            let builder = crate::types::builders::VoiceChannelResponseBuilder::default();
            Some(crate::serde_util::voice_channel_response_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_voice_template_output_correct_errors(
    mut builder: crate::operation::update_voice_template::builders::UpdateVoiceTemplateOutputBuilder,
) -> crate::operation::update_voice_template::builders::UpdateVoiceTemplateOutputBuilder {
    if builder.message_body.is_none() {
        builder.message_body = {
            let builder = crate::types::builders::MessageBodyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn verify_otp_message_output_correct_errors(
    mut builder: crate::operation::verify_otp_message::builders::VerifyOtpMessageOutputBuilder,
) -> crate::operation::verify_otp_message::builders::VerifyOtpMessageOutputBuilder {
    if builder.verification_response.is_none() {
        builder.verification_response = {
            let builder = crate::types::builders::VerificationResponseBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn application_response_correct_errors(
    mut builder: crate::types::builders::ApplicationResponseBuilder,
) -> crate::types::builders::ApplicationResponseBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn campaign_response_correct_errors(
    mut builder: crate::types::builders::CampaignResponseBuilder,
) -> crate::types::builders::CampaignResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(Default::default())
    }
    if builder.segment_id.is_none() {
        builder.segment_id = Some(Default::default())
    }
    if builder.segment_version.is_none() {
        builder.segment_version = Some(Default::default())
    }
    builder
}

pub(crate) fn export_job_response_correct_errors(
    mut builder: crate::types::builders::ExportJobResponseBuilder,
) -> crate::types::builders::ExportJobResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(Default::default())
    }
    if builder.definition.is_none() {
        builder.definition = {
            let builder = crate::types::builders::ExportJobResourceBuilder::default();
            Some(crate::serde_util::export_job_resource_correct_errors(builder).build())
        }
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn import_job_response_correct_errors(
    mut builder: crate::types::builders::ImportJobResponseBuilder,
) -> crate::types::builders::ImportJobResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(Default::default())
    }
    if builder.definition.is_none() {
        builder.definition = {
            let builder = crate::types::builders::ImportJobResourceBuilder::default();
            Some(crate::serde_util::import_job_resource_correct_errors(builder).build())
        }
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn journey_response_correct_errors(
    mut builder: crate::types::builders::JourneyResponseBuilder,
) -> crate::types::builders::JourneyResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn recommender_configuration_response_correct_errors(
    mut builder: crate::types::builders::RecommenderConfigurationResponseBuilder,
) -> crate::types::builders::RecommenderConfigurationResponseBuilder {
    if builder.creation_date.is_none() {
        builder.creation_date = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(Default::default())
    }
    if builder.recommendation_provider_role_arn.is_none() {
        builder.recommendation_provider_role_arn = Some(Default::default())
    }
    if builder.recommendation_provider_uri.is_none() {
        builder.recommendation_provider_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn segment_response_correct_errors(
    mut builder: crate::types::builders::SegmentResponseBuilder,
) -> crate::types::builders::SegmentResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.segment_type.is_none() {
        builder.segment_type = "no value was set".parse::<crate::types::SegmentType>().ok()
    }
    builder
}

pub(crate) fn adm_channel_response_correct_errors(
    mut builder: crate::types::builders::AdmChannelResponseBuilder,
) -> crate::types::builders::AdmChannelResponseBuilder {
    if builder.platform.is_none() {
        builder.platform = Some(Default::default())
    }
    builder
}

pub(crate) fn apns_channel_response_correct_errors(
    mut builder: crate::types::builders::ApnsChannelResponseBuilder,
) -> crate::types::builders::ApnsChannelResponseBuilder {
    if builder.platform.is_none() {
        builder.platform = Some(Default::default())
    }
    builder
}

pub(crate) fn apns_sandbox_channel_response_correct_errors(
    mut builder: crate::types::builders::ApnsSandboxChannelResponseBuilder,
) -> crate::types::builders::ApnsSandboxChannelResponseBuilder {
    if builder.platform.is_none() {
        builder.platform = Some(Default::default())
    }
    builder
}

pub(crate) fn apns_voip_channel_response_correct_errors(
    mut builder: crate::types::builders::ApnsVoipChannelResponseBuilder,
) -> crate::types::builders::ApnsVoipChannelResponseBuilder {
    if builder.platform.is_none() {
        builder.platform = Some(Default::default())
    }
    builder
}

pub(crate) fn apns_voip_sandbox_channel_response_correct_errors(
    mut builder: crate::types::builders::ApnsVoipSandboxChannelResponseBuilder,
) -> crate::types::builders::ApnsVoipSandboxChannelResponseBuilder {
    if builder.platform.is_none() {
        builder.platform = Some(Default::default())
    }
    builder
}

pub(crate) fn baidu_channel_response_correct_errors(
    mut builder: crate::types::builders::BaiduChannelResponseBuilder,
) -> crate::types::builders::BaiduChannelResponseBuilder {
    if builder.credential.is_none() {
        builder.credential = Some(Default::default())
    }
    if builder.platform.is_none() {
        builder.platform = Some(Default::default())
    }
    builder
}

pub(crate) fn email_channel_response_correct_errors(
    mut builder: crate::types::builders::EmailChannelResponseBuilder,
) -> crate::types::builders::EmailChannelResponseBuilder {
    if builder.platform.is_none() {
        builder.platform = Some(Default::default())
    }
    builder
}

pub(crate) fn event_stream_correct_errors(mut builder: crate::types::builders::EventStreamBuilder) -> crate::types::builders::EventStreamBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.destination_stream_arn.is_none() {
        builder.destination_stream_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn gcm_channel_response_correct_errors(
    mut builder: crate::types::builders::GcmChannelResponseBuilder,
) -> crate::types::builders::GcmChannelResponseBuilder {
    if builder.platform.is_none() {
        builder.platform = Some(Default::default())
    }
    builder
}

pub(crate) fn sms_channel_response_correct_errors(
    mut builder: crate::types::builders::SmsChannelResponseBuilder,
) -> crate::types::builders::SmsChannelResponseBuilder {
    if builder.platform.is_none() {
        builder.platform = Some(Default::default())
    }
    builder
}

pub(crate) fn endpoints_response_correct_errors(
    mut builder: crate::types::builders::EndpointsResponseBuilder,
) -> crate::types::builders::EndpointsResponseBuilder {
    if builder.item.is_none() {
        builder.item = Some(Default::default())
    }
    builder
}

pub(crate) fn voice_channel_response_correct_errors(
    mut builder: crate::types::builders::VoiceChannelResponseBuilder,
) -> crate::types::builders::VoiceChannelResponseBuilder {
    if builder.platform.is_none() {
        builder.platform = Some(Default::default())
    }
    builder
}

pub(crate) fn application_date_range_kpi_response_correct_errors(
    mut builder: crate::types::builders::ApplicationDateRangeKpiResponseBuilder,
) -> crate::types::builders::ApplicationDateRangeKpiResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.kpi_name.is_none() {
        builder.kpi_name = Some(Default::default())
    }
    if builder.kpi_result.is_none() {
        builder.kpi_result = {
            let builder = crate::types::builders::BaseKpiResultBuilder::default();
            Some(crate::serde_util::base_kpi_result_correct_errors(builder).build())
        }
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn application_settings_resource_correct_errors(
    mut builder: crate::types::builders::ApplicationSettingsResourceBuilder,
) -> crate::types::builders::ApplicationSettingsResourceBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    builder
}

pub(crate) fn activities_response_correct_errors(
    mut builder: crate::types::builders::ActivitiesResponseBuilder,
) -> crate::types::builders::ActivitiesResponseBuilder {
    if builder.item.is_none() {
        builder.item = Some(Default::default())
    }
    builder
}

pub(crate) fn campaign_date_range_kpi_response_correct_errors(
    mut builder: crate::types::builders::CampaignDateRangeKpiResponseBuilder,
) -> crate::types::builders::CampaignDateRangeKpiResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.campaign_id.is_none() {
        builder.campaign_id = Some(Default::default())
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.kpi_name.is_none() {
        builder.kpi_name = Some(Default::default())
    }
    if builder.kpi_result.is_none() {
        builder.kpi_result = {
            let builder = crate::types::builders::BaseKpiResultBuilder::default();
            Some(crate::serde_util::base_kpi_result_correct_errors(builder).build())
        }
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn campaigns_response_correct_errors(
    mut builder: crate::types::builders::CampaignsResponseBuilder,
) -> crate::types::builders::CampaignsResponseBuilder {
    if builder.item.is_none() {
        builder.item = Some(Default::default())
    }
    builder
}

pub(crate) fn channels_response_correct_errors(
    mut builder: crate::types::builders::ChannelsResponseBuilder,
) -> crate::types::builders::ChannelsResponseBuilder {
    if builder.channels.is_none() {
        builder.channels = Some(Default::default())
    }
    builder
}

pub(crate) fn email_template_response_correct_errors(
    mut builder: crate::types::builders::EmailTemplateResponseBuilder,
) -> crate::types::builders::EmailTemplateResponseBuilder {
    if builder.creation_date.is_none() {
        builder.creation_date = Some(Default::default())
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::TemplateType>().ok()
    }
    builder
}

pub(crate) fn export_jobs_response_correct_errors(
    mut builder: crate::types::builders::ExportJobsResponseBuilder,
) -> crate::types::builders::ExportJobsResponseBuilder {
    if builder.item.is_none() {
        builder.item = Some(Default::default())
    }
    builder
}

pub(crate) fn import_jobs_response_correct_errors(
    mut builder: crate::types::builders::ImportJobsResponseBuilder,
) -> crate::types::builders::ImportJobsResponseBuilder {
    if builder.item.is_none() {
        builder.item = Some(Default::default())
    }
    builder
}

pub(crate) fn in_app_template_response_correct_errors(
    mut builder: crate::types::builders::InAppTemplateResponseBuilder,
) -> crate::types::builders::InAppTemplateResponseBuilder {
    if builder.creation_date.is_none() {
        builder.creation_date = Some(Default::default())
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::TemplateType>().ok()
    }
    builder
}

pub(crate) fn journey_date_range_kpi_response_correct_errors(
    mut builder: crate::types::builders::JourneyDateRangeKpiResponseBuilder,
) -> crate::types::builders::JourneyDateRangeKpiResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.journey_id.is_none() {
        builder.journey_id = Some(Default::default())
    }
    if builder.kpi_name.is_none() {
        builder.kpi_name = Some(Default::default())
    }
    if builder.kpi_result.is_none() {
        builder.kpi_result = {
            let builder = crate::types::builders::BaseKpiResultBuilder::default();
            Some(crate::serde_util::base_kpi_result_correct_errors(builder).build())
        }
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn journey_execution_activity_metrics_response_correct_errors(
    mut builder: crate::types::builders::JourneyExecutionActivityMetricsResponseBuilder,
) -> crate::types::builders::JourneyExecutionActivityMetricsResponseBuilder {
    if builder.activity_type.is_none() {
        builder.activity_type = Some(Default::default())
    }
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.journey_activity_id.is_none() {
        builder.journey_activity_id = Some(Default::default())
    }
    if builder.journey_id.is_none() {
        builder.journey_id = Some(Default::default())
    }
    if builder.last_evaluated_time.is_none() {
        builder.last_evaluated_time = Some(Default::default())
    }
    if builder.metrics.is_none() {
        builder.metrics = Some(Default::default())
    }
    builder
}

pub(crate) fn journey_execution_metrics_response_correct_errors(
    mut builder: crate::types::builders::JourneyExecutionMetricsResponseBuilder,
) -> crate::types::builders::JourneyExecutionMetricsResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.journey_id.is_none() {
        builder.journey_id = Some(Default::default())
    }
    if builder.last_evaluated_time.is_none() {
        builder.last_evaluated_time = Some(Default::default())
    }
    if builder.metrics.is_none() {
        builder.metrics = Some(Default::default())
    }
    builder
}

pub(crate) fn journey_run_execution_activity_metrics_response_correct_errors(
    mut builder: crate::types::builders::JourneyRunExecutionActivityMetricsResponseBuilder,
) -> crate::types::builders::JourneyRunExecutionActivityMetricsResponseBuilder {
    if builder.activity_type.is_none() {
        builder.activity_type = Some(Default::default())
    }
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.journey_activity_id.is_none() {
        builder.journey_activity_id = Some(Default::default())
    }
    if builder.journey_id.is_none() {
        builder.journey_id = Some(Default::default())
    }
    if builder.last_evaluated_time.is_none() {
        builder.last_evaluated_time = Some(Default::default())
    }
    if builder.metrics.is_none() {
        builder.metrics = Some(Default::default())
    }
    if builder.run_id.is_none() {
        builder.run_id = Some(Default::default())
    }
    builder
}

pub(crate) fn journey_run_execution_metrics_response_correct_errors(
    mut builder: crate::types::builders::JourneyRunExecutionMetricsResponseBuilder,
) -> crate::types::builders::JourneyRunExecutionMetricsResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.journey_id.is_none() {
        builder.journey_id = Some(Default::default())
    }
    if builder.last_evaluated_time.is_none() {
        builder.last_evaluated_time = Some(Default::default())
    }
    if builder.metrics.is_none() {
        builder.metrics = Some(Default::default())
    }
    if builder.run_id.is_none() {
        builder.run_id = Some(Default::default())
    }
    builder
}

pub(crate) fn journey_runs_response_correct_errors(
    mut builder: crate::types::builders::JourneyRunsResponseBuilder,
) -> crate::types::builders::JourneyRunsResponseBuilder {
    if builder.item.is_none() {
        builder.item = Some(Default::default())
    }
    builder
}

pub(crate) fn push_notification_template_response_correct_errors(
    mut builder: crate::types::builders::PushNotificationTemplateResponseBuilder,
) -> crate::types::builders::PushNotificationTemplateResponseBuilder {
    if builder.creation_date.is_none() {
        builder.creation_date = Some(Default::default())
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::TemplateType>().ok()
    }
    builder
}

pub(crate) fn list_recommender_configurations_response_correct_errors(
    mut builder: crate::types::builders::ListRecommenderConfigurationsResponseBuilder,
) -> crate::types::builders::ListRecommenderConfigurationsResponseBuilder {
    if builder.item.is_none() {
        builder.item = Some(Default::default())
    }
    builder
}

pub(crate) fn segments_response_correct_errors(
    mut builder: crate::types::builders::SegmentsResponseBuilder,
) -> crate::types::builders::SegmentsResponseBuilder {
    if builder.item.is_none() {
        builder.item = Some(Default::default())
    }
    builder
}

pub(crate) fn sms_template_response_correct_errors(
    mut builder: crate::types::builders::SmsTemplateResponseBuilder,
) -> crate::types::builders::SmsTemplateResponseBuilder {
    if builder.creation_date.is_none() {
        builder.creation_date = Some(Default::default())
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::TemplateType>().ok()
    }
    builder
}

pub(crate) fn voice_template_response_correct_errors(
    mut builder: crate::types::builders::VoiceTemplateResponseBuilder,
) -> crate::types::builders::VoiceTemplateResponseBuilder {
    if builder.creation_date.is_none() {
        builder.creation_date = Some(Default::default())
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::TemplateType>().ok()
    }
    builder
}

pub(crate) fn journeys_response_correct_errors(
    mut builder: crate::types::builders::JourneysResponseBuilder,
) -> crate::types::builders::JourneysResponseBuilder {
    if builder.item.is_none() {
        builder.item = Some(Default::default())
    }
    builder
}

pub(crate) fn tags_model_correct_errors(mut builder: crate::types::builders::TagsModelBuilder) -> crate::types::builders::TagsModelBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn template_versions_response_correct_errors(
    mut builder: crate::types::builders::TemplateVersionsResponseBuilder,
) -> crate::types::builders::TemplateVersionsResponseBuilder {
    if builder.item.is_none() {
        builder.item = Some(Default::default())
    }
    builder
}

pub(crate) fn templates_response_correct_errors(
    mut builder: crate::types::builders::TemplatesResponseBuilder,
) -> crate::types::builders::TemplatesResponseBuilder {
    if builder.item.is_none() {
        builder.item = Some(Default::default())
    }
    builder
}

pub(crate) fn attributes_resource_correct_errors(
    mut builder: crate::types::builders::AttributesResourceBuilder,
) -> crate::types::builders::AttributesResourceBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.attribute_type.is_none() {
        builder.attribute_type = Some(Default::default())
    }
    builder
}

pub(crate) fn message_response_correct_errors(
    mut builder: crate::types::builders::MessageResponseBuilder,
) -> crate::types::builders::MessageResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    builder
}

pub(crate) fn send_users_message_response_correct_errors(
    mut builder: crate::types::builders::SendUsersMessageResponseBuilder,
) -> crate::types::builders::SendUsersMessageResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    builder
}

pub(crate) fn export_job_resource_correct_errors(
    mut builder: crate::types::builders::ExportJobResourceBuilder,
) -> crate::types::builders::ExportJobResourceBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.s3_url_prefix.is_none() {
        builder.s3_url_prefix = Some(Default::default())
    }
    builder
}

pub(crate) fn import_job_resource_correct_errors(
    mut builder: crate::types::builders::ImportJobResourceBuilder,
) -> crate::types::builders::ImportJobResourceBuilder {
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::Format>().ok()
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.s3_url.is_none() {
        builder.s3_url = Some(Default::default())
    }
    builder
}

pub(crate) fn base_kpi_result_correct_errors(
    mut builder: crate::types::builders::BaseKpiResultBuilder,
) -> crate::types::builders::BaseKpiResultBuilder {
    if builder.rows.is_none() {
        builder.rows = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_delivery_configuration_correct_errors(
    mut builder: crate::types::builders::CustomDeliveryConfigurationBuilder,
) -> crate::types::builders::CustomDeliveryConfigurationBuilder {
    if builder.delivery_uri.is_none() {
        builder.delivery_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn schedule_correct_errors(mut builder: crate::types::builders::ScheduleBuilder) -> crate::types::builders::ScheduleBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(Default::default())
    }
    builder
}

pub(crate) fn segment_import_resource_correct_errors(
    mut builder: crate::types::builders::SegmentImportResourceBuilder,
) -> crate::types::builders::SegmentImportResourceBuilder {
    if builder.external_id.is_none() {
        builder.external_id = Some(Default::default())
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::Format>().ok()
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.s3_url.is_none() {
        builder.s3_url = Some(Default::default())
    }
    if builder.size.is_none() {
        builder.size = Some(Default::default())
    }
    builder
}

pub(crate) fn activity_response_correct_errors(
    mut builder: crate::types::builders::ActivityResponseBuilder,
) -> crate::types::builders::ActivityResponseBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.campaign_id.is_none() {
        builder.campaign_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn campaign_event_filter_correct_errors(
    mut builder: crate::types::builders::CampaignEventFilterBuilder,
) -> crate::types::builders::CampaignEventFilterBuilder {
    if builder.dimensions.is_none() {
        builder.dimensions = {
            let builder = crate::types::builders::EventDimensionsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.filter_type.is_none() {
        builder.filter_type = "no value was set".parse::<crate::types::FilterType>().ok()
    }
    builder
}

pub(crate) fn endpoint_message_result_correct_errors(
    mut builder: crate::types::builders::EndpointMessageResultBuilder,
) -> crate::types::builders::EndpointMessageResultBuilder {
    if builder.delivery_status.is_none() {
        builder.delivery_status = "no value was set".parse::<crate::types::DeliveryStatus>().ok()
    }
    if builder.status_code.is_none() {
        builder.status_code = Some(Default::default())
    }
    builder
}

pub(crate) fn journey_run_response_correct_errors(
    mut builder: crate::types::builders::JourneyRunResponseBuilder,
) -> crate::types::builders::JourneyRunResponseBuilder {
    if builder.creation_time.is_none() {
        builder.creation_time = Some(Default::default())
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(Default::default())
    }
    if builder.run_id.is_none() {
        builder.run_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JourneyRunStatus>().ok()
    }
    builder
}

pub(crate) fn message_result_correct_errors(
    mut builder: crate::types::builders::MessageResultBuilder,
) -> crate::types::builders::MessageResultBuilder {
    if builder.delivery_status.is_none() {
        builder.delivery_status = "no value was set".parse::<crate::types::DeliveryStatus>().ok()
    }
    if builder.status_code.is_none() {
        builder.status_code = Some(Default::default())
    }
    builder
}

pub(crate) fn segment_condition_correct_errors(
    mut builder: crate::types::builders::SegmentConditionBuilder,
) -> crate::types::builders::SegmentConditionBuilder {
    if builder.segment_id.is_none() {
        builder.segment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn template_response_correct_errors(
    mut builder: crate::types::builders::TemplateResponseBuilder,
) -> crate::types::builders::TemplateResponseBuilder {
    if builder.creation_date.is_none() {
        builder.creation_date = Some(Default::default())
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::TemplateType>().ok()
    }
    builder
}

pub(crate) fn template_version_response_correct_errors(
    mut builder: crate::types::builders::TemplateVersionResponseBuilder,
) -> crate::types::builders::TemplateVersionResponseBuilder {
    if builder.creation_date.is_none() {
        builder.creation_date = Some(Default::default())
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_type.is_none() {
        builder.template_type = Some(Default::default())
    }
    builder
}

pub(crate) fn treatment_resource_correct_errors(
    mut builder: crate::types::builders::TreatmentResourceBuilder,
) -> crate::types::builders::TreatmentResourceBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.size_percent.is_none() {
        builder.size_percent = Some(Default::default())
    }
    builder
}

pub(crate) fn attribute_dimension_correct_errors(
    mut builder: crate::types::builders::AttributeDimensionBuilder,
) -> crate::types::builders::AttributeDimensionBuilder {
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn event_filter_correct_errors(mut builder: crate::types::builders::EventFilterBuilder) -> crate::types::builders::EventFilterBuilder {
    if builder.dimensions.is_none() {
        builder.dimensions = {
            let builder = crate::types::builders::EventDimensionsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.filter_type.is_none() {
        builder.filter_type = "no value was set".parse::<crate::types::FilterType>().ok()
    }
    builder
}

pub(crate) fn gps_point_dimension_correct_errors(
    mut builder: crate::types::builders::GpsPointDimensionBuilder,
) -> crate::types::builders::GpsPointDimensionBuilder {
    if builder.coordinates.is_none() {
        builder.coordinates = {
            let builder = crate::types::builders::GpsCoordinatesBuilder::default();
            Some(crate::serde_util::gps_coordinates_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn holdout_activity_correct_errors(
    mut builder: crate::types::builders::HoldoutActivityBuilder,
) -> crate::types::builders::HoldoutActivityBuilder {
    if builder.percentage.is_none() {
        builder.percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn in_app_message_body_config_correct_errors(
    mut builder: crate::types::builders::InAppMessageBodyConfigBuilder,
) -> crate::types::builders::InAppMessageBodyConfigBuilder {
    if builder.alignment.is_none() {
        builder.alignment = "no value was set".parse::<crate::types::Alignment>().ok()
    }
    if builder.body.is_none() {
        builder.body = Some(Default::default())
    }
    if builder.text_color.is_none() {
        builder.text_color = Some(Default::default())
    }
    builder
}

pub(crate) fn in_app_message_header_config_correct_errors(
    mut builder: crate::types::builders::InAppMessageHeaderConfigBuilder,
) -> crate::types::builders::InAppMessageHeaderConfigBuilder {
    if builder.alignment.is_none() {
        builder.alignment = "no value was set".parse::<crate::types::Alignment>().ok()
    }
    if builder.header.is_none() {
        builder.header = Some(Default::default())
    }
    if builder.text_color.is_none() {
        builder.text_color = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_dimension_correct_errors(
    mut builder: crate::types::builders::MetricDimensionBuilder,
) -> crate::types::builders::MetricDimensionBuilder {
    if builder.comparison_operator.is_none() {
        builder.comparison_operator = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn recency_dimension_correct_errors(
    mut builder: crate::types::builders::RecencyDimensionBuilder,
) -> crate::types::builders::RecencyDimensionBuilder {
    if builder.duration.is_none() {
        builder.duration = "no value was set".parse::<crate::types::Duration>().ok()
    }
    if builder.recency_type.is_none() {
        builder.recency_type = "no value was set".parse::<crate::types::RecencyType>().ok()
    }
    builder
}

pub(crate) fn result_row_correct_errors(mut builder: crate::types::builders::ResultRowBuilder) -> crate::types::builders::ResultRowBuilder {
    if builder.grouped_bys.is_none() {
        builder.grouped_bys = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn set_dimension_correct_errors(mut builder: crate::types::builders::SetDimensionBuilder) -> crate::types::builders::SetDimensionBuilder {
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn default_button_configuration_correct_errors(
    mut builder: crate::types::builders::DefaultButtonConfigurationBuilder,
) -> crate::types::builders::DefaultButtonConfigurationBuilder {
    if builder.button_action.is_none() {
        builder.button_action = "no value was set".parse::<crate::types::ButtonAction>().ok()
    }
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn gps_coordinates_correct_errors(
    mut builder: crate::types::builders::GpsCoordinatesBuilder,
) -> crate::types::builders::GpsCoordinatesBuilder {
    if builder.latitude.is_none() {
        builder.latitude = Some(Default::default())
    }
    if builder.longitude.is_none() {
        builder.longitude = Some(Default::default())
    }
    builder
}

pub(crate) fn override_button_configuration_correct_errors(
    mut builder: crate::types::builders::OverrideButtonConfigurationBuilder,
) -> crate::types::builders::OverrideButtonConfigurationBuilder {
    if builder.button_action.is_none() {
        builder.button_action = "no value was set".parse::<crate::types::ButtonAction>().ok()
    }
    builder
}

pub(crate) fn result_row_value_correct_errors(
    mut builder: crate::types::builders::ResultRowValueBuilder,
) -> crate::types::builders::ResultRowValueBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn segment_reference_correct_errors(
    mut builder: crate::types::builders::SegmentReferenceBuilder,
) -> crate::types::builders::SegmentReferenceBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}
