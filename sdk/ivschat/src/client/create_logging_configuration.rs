// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLoggingConfiguration`](crate::client::fluent_builders::CreateLoggingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateLoggingConfiguration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateLoggingConfiguration::set_name): <p>Logging-configuration name. The value does not need to be unique.</p>
    ///   - [`destination_configuration(DestinationConfiguration)`](crate::client::fluent_builders::CreateLoggingConfiguration::destination_configuration) / [`set_destination_configuration(Option<DestinationConfiguration>)`](crate::client::fluent_builders::CreateLoggingConfiguration::set_destination_configuration): <p>A complex type that contains a destination configuration for where chat content will be logged. There can be only one type of destination (<code>cloudWatchLogs</code>, <code>firehose</code>, or <code>s3</code>) in a <code>destinationConfiguration</code>.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateLoggingConfiguration::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateLoggingConfiguration::set_tags): <p>Tags to attach to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS Chat has no constraints on tags beyond what is documented there.</p>
    /// - On success, responds with [`CreateLoggingConfigurationOutput`](crate::output::CreateLoggingConfigurationOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::CreateLoggingConfigurationOutput::arn): <p>Logging-configuration ARN, assigned by the system.</p>
    ///   - [`id(Option<String>)`](crate::output::CreateLoggingConfigurationOutput::id): <p>Logging-configuration ID, generated by the system. This is a relative identifier, the part of the ARN that uniquely identifies the logging configuration.</p>
    ///   - [`create_time(Option<DateTime>)`](crate::output::CreateLoggingConfigurationOutput::create_time): <p>Time when the logging configuration was created. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>.</p>
    ///   - [`update_time(Option<DateTime>)`](crate::output::CreateLoggingConfigurationOutput::update_time): <p>Time of the logging configurationâ€™s last update. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateLoggingConfigurationOutput::name): <p>Logging-configuration name, from the request (if specified).</p>
    ///   - [`destination_configuration(Option<DestinationConfiguration>)`](crate::output::CreateLoggingConfigurationOutput::destination_configuration): <p>A complex type that contains a destination configuration for where chat content will be logged, from the request. There is only one type of destination (<code>cloudWatchLogs</code>, <code>firehose</code>, or <code>s3</code>) in a <code>destinationConfiguration</code>.</p>
    ///   - [`state(Option<CreateLoggingConfigurationState>)`](crate::output::CreateLoggingConfigurationOutput::state): <p>The state of the logging configuration. When the state is <code>ACTIVE</code>, the configuration is ready to log chat content.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::CreateLoggingConfigurationOutput::tags): <p>Tags attached to the resource, from the request (if specified). Array of maps, each of the form <code>string:string (key:value)</code>.</p>
    /// - On failure, responds with [`SdkError<CreateLoggingConfigurationError>`](crate::error::CreateLoggingConfigurationError)
    pub fn create_logging_configuration(
        &self,
    ) -> crate::client::fluent_builders::CreateLoggingConfiguration {
        crate::client::fluent_builders::CreateLoggingConfiguration::new(self.handle.clone())
    }
}
