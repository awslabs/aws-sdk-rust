// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetLoggingConfiguration`](crate::operation::get_logging_configuration::builders::GetLoggingConfigurationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identifier(impl Into<String>)`](crate::operation::get_logging_configuration::builders::GetLoggingConfigurationFluentBuilder::identifier) / [`set_identifier(Option<String>)`](crate::operation::get_logging_configuration::builders::GetLoggingConfigurationFluentBuilder::set_identifier): <p>Identifier of the logging configuration to be retrieved.</p>
    /// - On success, responds with [`GetLoggingConfigurationOutput`](crate::operation::get_logging_configuration::GetLoggingConfigurationOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::get_logging_configuration::GetLoggingConfigurationOutput::arn): <p>Logging-configuration ARN, from the request (if <code>identifier</code> was an ARN).</p>
    ///   - [`id(Option<String>)`](crate::operation::get_logging_configuration::GetLoggingConfigurationOutput::id): <p>Logging-configuration ID, generated by the system. This is a relative identifier, the part of the ARN that uniquely identifies the logging configuration.</p>
    ///   - [`create_time(Option<DateTime>)`](crate::operation::get_logging_configuration::GetLoggingConfigurationOutput::create_time): <p>Time when the logging configuration was created. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>.</p>
    ///   - [`update_time(Option<DateTime>)`](crate::operation::get_logging_configuration::GetLoggingConfigurationOutput::update_time): <p>Time of the logging configurationâ€™s last update. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>.</p>
    ///   - [`name(Option<String>)`](crate::operation::get_logging_configuration::GetLoggingConfigurationOutput::name): <p>Logging-configuration name. This value does not need to be unique.</p>
    ///   - [`destination_configuration(Option<DestinationConfiguration>)`](crate::operation::get_logging_configuration::GetLoggingConfigurationOutput::destination_configuration): <p>A complex type that contains a destination configuration for where chat content will be logged. There is only one type of destination (<code>cloudWatchLogs</code>, <code>firehose</code>, or <code>s3</code>) in a <code>destinationConfiguration</code>.</p>
    ///   - [`state(Option<LoggingConfigurationState>)`](crate::operation::get_logging_configuration::GetLoggingConfigurationOutput::state): <p>The state of the logging configuration. When the state is <code>ACTIVE</code>, the configuration is ready to log chat content.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::operation::get_logging_configuration::GetLoggingConfigurationOutput::tags): <p>Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>.</p>
    /// - On failure, responds with [`SdkError<GetLoggingConfigurationError>`](crate::operation::get_logging_configuration::GetLoggingConfigurationError)
    pub fn get_logging_configuration(
        &self,
    ) -> crate::operation::get_logging_configuration::builders::GetLoggingConfigurationFluentBuilder
    {
        crate::operation::get_logging_configuration::builders::GetLoggingConfigurationFluentBuilder::new(self.handle.clone())
    }
}
