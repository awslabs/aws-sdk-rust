// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteMessage`](crate::operation::delete_message::builders::DeleteMessageFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`room_identifier(impl Into<String>)`](crate::operation::delete_message::builders::DeleteMessageFluentBuilder::room_identifier) / [`set_room_identifier(Option<String>)`](crate::operation::delete_message::builders::DeleteMessageFluentBuilder::set_room_identifier): <p>Identifier of the room where the message should be deleted. Currently this must be an ARN. </p>
    ///   - [`id(impl Into<String>)`](crate::operation::delete_message::builders::DeleteMessageFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::delete_message::builders::DeleteMessageFluentBuilder::set_id): <p>ID of the message to be deleted. This is the <code>Id</code> field in the received message (see <a href="https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/actions-message-subscribe.html"> Message (Subscribe)</a> in the Chat Messaging API).</p>
    ///   - [`reason(impl Into<String>)`](crate::operation::delete_message::builders::DeleteMessageFluentBuilder::reason) / [`set_reason(Option<String>)`](crate::operation::delete_message::builders::DeleteMessageFluentBuilder::set_reason): <p>Reason for deleting the message.</p>
    /// - On success, responds with [`DeleteMessageOutput`](crate::operation::delete_message::DeleteMessageOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::operation::delete_message::DeleteMessageOutput::id): <p>Operation identifier, generated by Amazon IVS Chat.</p>
    /// - On failure, responds with [`SdkError<DeleteMessageError>`](crate::operation::delete_message::DeleteMessageError)
    pub fn delete_message(
        &self,
    ) -> crate::operation::delete_message::builders::DeleteMessageFluentBuilder {
        crate::operation::delete_message::builders::DeleteMessageFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
