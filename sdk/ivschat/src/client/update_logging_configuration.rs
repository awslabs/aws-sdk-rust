// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateLoggingConfiguration`](crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identifier(impl Into<String>)`](crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationFluentBuilder::identifier) / [`set_identifier(Option<String>)`](crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationFluentBuilder::set_identifier):<br>required: **true**<br><p>Identifier of the logging configuration to be updated.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationFluentBuilder::set_name):<br>required: **false**<br><p>Logging-configuration name. The value does not need to be unique.</p><br>
    ///   - [`destination_configuration(DestinationConfiguration)`](crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationFluentBuilder::destination_configuration) / [`set_destination_configuration(Option<DestinationConfiguration>)`](crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationFluentBuilder::set_destination_configuration):<br>required: **false**<br><p>A complex type that contains a destination configuration for where chat content will be logged. There can be only one type of destination (<code>cloudWatchLogs</code>, <code>firehose</code>, or <code>s3</code>) in a <code>destinationConfiguration</code>.</p><br>
    /// - On success, responds with [`UpdateLoggingConfigurationOutput`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput::arn): <p>Logging-configuration ARN, from the request (if <code>identifier</code> was an ARN).</p>
    ///   - [`id(Option<String>)`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput::id): <p>Logging-configuration ID, generated by the system. This is a relative identifier, the part of the ARN that uniquely identifies the room.</p>
    ///   - [`create_time(Option<DateTime>)`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput::create_time): <p>Time when the logging configuration was created. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>.</p>
    ///   - [`update_time(Option<DateTime>)`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput::update_time): <p>Time of the logging configurationâ€™s last update. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>.</p>
    ///   - [`name(Option<String>)`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput::name): <p>Logging-configuration name, from the request (if specified).</p>
    ///   - [`destination_configuration(Option<DestinationConfiguration>)`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput::destination_configuration): <p>A complex type that contains a destination configuration for where chat content will be logged, from the request. There is only one type of destination (<code>cloudWatchLogs</code>, <code>firehose</code>, or <code>s3</code>) in a <code>destinationConfiguration</code>.</p>
    ///   - [`state(Option<UpdateLoggingConfigurationState>)`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput::state): <p>The state of the logging configuration. When the state is <code>ACTIVE</code>, the configuration is ready to log chat content.</p>
    ///   - [`tags(Option<HashMap::<String, String>>)`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationOutput::tags): <p>Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. </p>
    /// - On failure, responds with [`SdkError<UpdateLoggingConfigurationError>`](crate::operation::update_logging_configuration::UpdateLoggingConfigurationError)
    pub fn update_logging_configuration(&self) -> crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationFluentBuilder {
        crate::operation::update_logging_configuration::builders::UpdateLoggingConfigurationFluentBuilder::new(self.handle.clone())
    }
}
