// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SendEvent`](crate::operation::send_event::builders::SendEventFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`room_identifier(impl Into<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::room_identifier) / [`set_room_identifier(Option<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::set_room_identifier):<br>required: **true**<br><p>Identifier of the room to which the event will be sent. Currently this must be an ARN.</p><br>
    ///   - [`event_name(impl Into<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::event_name) / [`set_event_name(Option<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::set_event_name):<br>required: **true**<br><p>Application-defined name of the event to send to clients.</p><br>
    ///   - [`attributes(impl Into<String>, impl Into<String>)`](crate::operation::send_event::builders::SendEventFluentBuilder::attributes) / [`set_attributes(Option<HashMap::<String, String>>)`](crate::operation::send_event::builders::SendEventFluentBuilder::set_attributes):<br>required: **false**<br><p>Application-defined metadata to attach to the event sent to clients. The maximum length of the metadata is 1 KB total.</p><br>
    /// - On success, responds with [`SendEventOutput`](crate::operation::send_event::SendEventOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::operation::send_event::SendEventOutput::id): <p>An identifier generated by Amazon IVS Chat. This identifier must be used in subsequent operations for this message, such as DeleteMessage.</p>
    /// - On failure, responds with [`SdkError<SendEventError>`](crate::operation::send_event::SendEventError)
    pub fn send_event(&self) -> crate::operation::send_event::builders::SendEventFluentBuilder {
        crate::operation::send_event::builders::SendEventFluentBuilder::new(self.handle.clone())
    }
}
