// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_room_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_room::CreateRoomInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.logging_configuration_identifiers {
        let mut array_2 = object.key("loggingConfigurationIdentifiers").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if input.maximum_message_length != 0 {
        object.key("maximumMessageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_message_length).into()),
        );
    }
    if input.maximum_message_rate_per_second != 0 {
        object.key("maximumMessageRatePerSecond").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_message_rate_per_second).into()),
        );
    }
    if let Some(var_4) = &input.message_review_handler {
        #[allow(unused_mut)]
        let mut object_5 = object.key("messageReviewHandler").start_object();
        crate::protocol_serde::shape_message_review_handler::ser_message_review_handler(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.name {
        object.key("name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.tags {
        #[allow(unused_mut)]
        let mut object_8 = object.key("tags").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    Ok(())
}
