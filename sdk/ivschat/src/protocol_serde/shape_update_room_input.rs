// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_room_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_room::UpdateRoomInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.identifier {
        object.key("identifier").string(var_1.as_str());
    }
    if let Some(var_2) = &input.logging_configuration_identifiers {
        let mut array_3 = object.key("loggingConfigurationIdentifiers").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.maximum_message_length {
        object.key("maximumMessageLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.maximum_message_rate_per_second {
        object.key("maximumMessageRatePerSecond").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.message_review_handler {
        #[allow(unused_mut)]
        let mut object_8 = object.key("messageReviewHandler").start_object();
        crate::protocol_serde::shape_message_review_handler::ser_message_review_handler(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.name {
        object.key("name").string(var_9.as_str());
    }
    Ok(())
}
