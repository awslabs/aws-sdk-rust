// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListLoggingConfigurationsOutput {
    /// <p>List of the matching logging configurations (summary information only). There is only one type of destination (<code>cloudWatchLogs</code>, <code>firehose</code>, or <code>s3</code>) in a <code>destinationConfiguration</code>.</p>
    pub logging_configurations: ::std::vec::Vec<crate::types::LoggingConfigurationSummary>,
    /// <p>If there are more logging configurations than <code>maxResults</code>, use <code>nextToken</code> in the request to get the next set.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListLoggingConfigurationsOutput {
    /// <p>List of the matching logging configurations (summary information only). There is only one type of destination (<code>cloudWatchLogs</code>, <code>firehose</code>, or <code>s3</code>) in a <code>destinationConfiguration</code>.</p>
    pub fn logging_configurations(&self) -> &[crate::types::LoggingConfigurationSummary] {
        use std::ops::Deref;
        self.logging_configurations.deref()
    }
    /// <p>If there are more logging configurations than <code>maxResults</code>, use <code>nextToken</code> in the request to get the next set.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListLoggingConfigurationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListLoggingConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`ListLoggingConfigurationsOutput`](crate::operation::list_logging_configurations::ListLoggingConfigurationsOutput).
    pub fn builder() -> crate::operation::list_logging_configurations::builders::ListLoggingConfigurationsOutputBuilder {
        crate::operation::list_logging_configurations::builders::ListLoggingConfigurationsOutputBuilder::default()
    }
}

/// A builder for [`ListLoggingConfigurationsOutput`](crate::operation::list_logging_configurations::ListLoggingConfigurationsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListLoggingConfigurationsOutputBuilder {
    pub(crate) logging_configurations: ::std::option::Option<::std::vec::Vec<crate::types::LoggingConfigurationSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListLoggingConfigurationsOutputBuilder {
    /// Appends an item to `logging_configurations`.
    ///
    /// To override the contents of this collection use [`set_logging_configurations`](Self::set_logging_configurations).
    ///
    /// <p>List of the matching logging configurations (summary information only). There is only one type of destination (<code>cloudWatchLogs</code>, <code>firehose</code>, or <code>s3</code>) in a <code>destinationConfiguration</code>.</p>
    pub fn logging_configurations(mut self, input: crate::types::LoggingConfigurationSummary) -> Self {
        let mut v = self.logging_configurations.unwrap_or_default();
        v.push(input);
        self.logging_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of the matching logging configurations (summary information only). There is only one type of destination (<code>cloudWatchLogs</code>, <code>firehose</code>, or <code>s3</code>) in a <code>destinationConfiguration</code>.</p>
    pub fn set_logging_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LoggingConfigurationSummary>>) -> Self {
        self.logging_configurations = input;
        self
    }
    /// <p>List of the matching logging configurations (summary information only). There is only one type of destination (<code>cloudWatchLogs</code>, <code>firehose</code>, or <code>s3</code>) in a <code>destinationConfiguration</code>.</p>
    pub fn get_logging_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LoggingConfigurationSummary>> {
        &self.logging_configurations
    }
    /// <p>If there are more logging configurations than <code>maxResults</code>, use <code>nextToken</code> in the request to get the next set.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If there are more logging configurations than <code>maxResults</code>, use <code>nextToken</code> in the request to get the next set.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If there are more logging configurations than <code>maxResults</code>, use <code>nextToken</code> in the request to get the next set.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListLoggingConfigurationsOutput`](crate::operation::list_logging_configurations::ListLoggingConfigurationsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`logging_configurations`](crate::operation::list_logging_configurations::builders::ListLoggingConfigurationsOutputBuilder::logging_configurations)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_logging_configurations::ListLoggingConfigurationsOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_logging_configurations::ListLoggingConfigurationsOutput {
            logging_configurations: self.logging_configurations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "logging_configurations",
                    "logging_configurations was not specified but it is required when building ListLoggingConfigurationsOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
