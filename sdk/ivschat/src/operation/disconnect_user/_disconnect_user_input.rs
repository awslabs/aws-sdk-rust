// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisconnectUserInput {
    /// <p>Identifier of the room from which the user's clients should be disconnected. Currently this must be an ARN.</p>
    #[doc(hidden)]
    pub room_identifier: std::option::Option<std::string::String>,
    /// <p>ID of the user (connection) to disconnect from the room.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>Reason for disconnecting the user.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<std::string::String>,
}
impl DisconnectUserInput {
    /// <p>Identifier of the room from which the user's clients should be disconnected. Currently this must be an ARN.</p>
    pub fn room_identifier(&self) -> std::option::Option<&str> {
        self.room_identifier.as_deref()
    }
    /// <p>ID of the user (connection) to disconnect from the room.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>Reason for disconnecting the user.</p>
    pub fn reason(&self) -> std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl DisconnectUserInput {
    /// Creates a new builder-style object to manufacture [`DisconnectUserInput`](crate::operation::disconnect_user::DisconnectUserInput).
    pub fn builder() -> crate::operation::disconnect_user::builders::DisconnectUserInputBuilder {
        crate::operation::disconnect_user::builders::DisconnectUserInputBuilder::default()
    }
}

/// A builder for [`DisconnectUserInput`](crate::operation::disconnect_user::DisconnectUserInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DisconnectUserInputBuilder {
    pub(crate) room_identifier: std::option::Option<std::string::String>,
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) reason: std::option::Option<std::string::String>,
}
impl DisconnectUserInputBuilder {
    /// <p>Identifier of the room from which the user's clients should be disconnected. Currently this must be an ARN.</p>
    pub fn room_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.room_identifier = Some(input.into());
        self
    }
    /// <p>Identifier of the room from which the user's clients should be disconnected. Currently this must be an ARN.</p>
    pub fn set_room_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.room_identifier = input;
        self
    }
    /// <p>ID of the user (connection) to disconnect from the room.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>ID of the user (connection) to disconnect from the room.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>Reason for disconnecting the user.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason = Some(input.into());
        self
    }
    /// <p>Reason for disconnecting the user.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// Consumes the builder and constructs a [`DisconnectUserInput`](crate::operation::disconnect_user::DisconnectUserInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::disconnect_user::DisconnectUserInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::disconnect_user::DisconnectUserInput {
            room_identifier: self.room_identifier,
            user_id: self.user_id,
            reason: self.reason,
        })
    }
}
