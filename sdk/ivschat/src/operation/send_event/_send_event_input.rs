// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendEventInput {
    /// <p>Identifier of the room to which the event will be sent. Currently this must be an ARN.</p>
    #[doc(hidden)]
    pub room_identifier: std::option::Option<std::string::String>,
    /// <p>Application-defined name of the event to send to clients.</p>
    #[doc(hidden)]
    pub event_name: std::option::Option<std::string::String>,
    /// <p>Application-defined metadata to attach to the event sent to clients. The maximum length of the metadata is 1 KB total.</p>
    #[doc(hidden)]
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl SendEventInput {
    /// <p>Identifier of the room to which the event will be sent. Currently this must be an ARN.</p>
    pub fn room_identifier(&self) -> std::option::Option<&str> {
        self.room_identifier.as_deref()
    }
    /// <p>Application-defined name of the event to send to clients.</p>
    pub fn event_name(&self) -> std::option::Option<&str> {
        self.event_name.as_deref()
    }
    /// <p>Application-defined metadata to attach to the event sent to clients. The maximum length of the metadata is 1 KB total.</p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
}
impl SendEventInput {
    /// Creates a new builder-style object to manufacture [`SendEventInput`](crate::operation::send_event::SendEventInput).
    pub fn builder() -> crate::operation::send_event::builders::SendEventInputBuilder {
        crate::operation::send_event::builders::SendEventInputBuilder::default()
    }
}

/// A builder for [`SendEventInput`](crate::operation::send_event::SendEventInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendEventInputBuilder {
    pub(crate) room_identifier: std::option::Option<std::string::String>,
    pub(crate) event_name: std::option::Option<std::string::String>,
    pub(crate) attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl SendEventInputBuilder {
    /// <p>Identifier of the room to which the event will be sent. Currently this must be an ARN.</p>
    pub fn room_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.room_identifier = Some(input.into());
        self
    }
    /// <p>Identifier of the room to which the event will be sent. Currently this must be an ARN.</p>
    pub fn set_room_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.room_identifier = input;
        self
    }
    /// <p>Application-defined name of the event to send to clients.</p>
    pub fn event_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_name = Some(input.into());
        self
    }
    /// <p>Application-defined name of the event to send to clients.</p>
    pub fn set_event_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_name = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Application-defined metadata to attach to the event sent to clients. The maximum length of the metadata is 1 KB total.</p>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = Some(hash_map);
        self
    }
    /// <p>Application-defined metadata to attach to the event sent to clients. The maximum length of the metadata is 1 KB total.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// Consumes the builder and constructs a [`SendEventInput`](crate::operation::send_event::SendEventInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::send_event::SendEventInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::send_event::SendEventInput {
            room_identifier: self.room_identifier,
            event_name: self.event_name,
            attributes: self.attributes,
        })
    }
}
