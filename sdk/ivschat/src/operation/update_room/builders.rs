// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_room::_update_room_output::UpdateRoomOutputBuilder;

pub use crate::operation::update_room::_update_room_input::UpdateRoomInputBuilder;

/// Fluent builder constructing a request to `UpdateRoom`.
///
/// <p>Updates a roomâ€™s configuration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRoomFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_room::builders::UpdateRoomInputBuilder,
}
impl UpdateRoomFluentBuilder {
    /// Creates a new `UpdateRoom`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_room::UpdateRoom,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_room::UpdateRoomError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_room::UpdateRoomOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_room::UpdateRoomError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Identifier of the room to be updated. Currently this must be an ARN.</p>
    pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.identifier(input.into());
        self
    }
    /// <p>Identifier of the room to be updated. Currently this must be an ARN.</p>
    pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_identifier(input);
        self
    }
    /// <p>Room name. The value does not need to be unique.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>Room name. The value does not need to be unique.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Maximum number of messages per second that can be sent to the room (by all clients). Default: 10.</p>
    pub fn maximum_message_rate_per_second(mut self, input: i32) -> Self {
        self.inner = self.inner.maximum_message_rate_per_second(input);
        self
    }
    /// <p>Maximum number of messages per second that can be sent to the room (by all clients). Default: 10.</p>
    pub fn set_maximum_message_rate_per_second(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_maximum_message_rate_per_second(input);
        self
    }
    /// <p>The maximum number of characters in a single message. Messages are expected to be UTF-8 encoded and this limit applies specifically to rune/code-point count, not number of bytes. Default: 500.</p>
    pub fn maximum_message_length(mut self, input: i32) -> Self {
        self.inner = self.inner.maximum_message_length(input);
        self
    }
    /// <p>The maximum number of characters in a single message. Messages are expected to be UTF-8 encoded and this limit applies specifically to rune/code-point count, not number of bytes. Default: 500.</p>
    pub fn set_maximum_message_length(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_maximum_message_length(input);
        self
    }
    /// <p>Configuration information for optional review of messages. Specify an empty <code>uri</code> string to disassociate a message review handler from the specified room.</p>
    pub fn message_review_handler(mut self, input: crate::types::MessageReviewHandler) -> Self {
        self.inner = self.inner.message_review_handler(input);
        self
    }
    /// <p>Configuration information for optional review of messages. Specify an empty <code>uri</code> string to disassociate a message review handler from the specified room.</p>
    pub fn set_message_review_handler(
        mut self,
        input: std::option::Option<crate::types::MessageReviewHandler>,
    ) -> Self {
        self.inner = self.inner.set_message_review_handler(input);
        self
    }
    /// Appends an item to `loggingConfigurationIdentifiers`.
    ///
    /// To override the contents of this collection use [`set_logging_configuration_identifiers`](Self::set_logging_configuration_identifiers).
    ///
    /// <p>Array of logging-configuration identifiers attached to the room.</p>
    pub fn logging_configuration_identifiers(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.logging_configuration_identifiers(input.into());
        self
    }
    /// <p>Array of logging-configuration identifiers attached to the room.</p>
    pub fn set_logging_configuration_identifiers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_logging_configuration_identifiers(input);
        self
    }
}
