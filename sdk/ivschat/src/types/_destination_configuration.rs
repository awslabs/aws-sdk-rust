// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that describes a location where chat logs will be stored. Each member represents the configuration of one log destination. For logging, you define only one type of destination (for CloudWatch Logs, Kinesis Firehose, or S3).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum DestinationConfiguration {
    /// <p>An Amazon CloudWatch Logs destination configuration where chat activity will be logged.</p>
    CloudWatchLogs(crate::types::CloudWatchLogsDestinationConfiguration),
    /// <p>An Amazon Kinesis Data Firehose destination configuration where chat activity will be logged.</p>
    Firehose(crate::types::FirehoseDestinationConfiguration),
    /// <p>An Amazon S3 destination configuration where chat activity will be logged.</p>
    S3(crate::types::S3DestinationConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl DestinationConfiguration {
    /// Tries to convert the enum instance into [`CloudWatchLogs`](crate::types::DestinationConfiguration::CloudWatchLogs), extracting the inner [`CloudWatchLogsDestinationConfiguration`](crate::types::CloudWatchLogsDestinationConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_cloud_watch_logs(
        &self,
    ) -> std::result::Result<&crate::types::CloudWatchLogsDestinationConfiguration, &Self> {
        if let DestinationConfiguration::CloudWatchLogs(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`CloudWatchLogs`](crate::types::DestinationConfiguration::CloudWatchLogs).
    pub fn is_cloud_watch_logs(&self) -> bool {
        self.as_cloud_watch_logs().is_ok()
    }
    /// Tries to convert the enum instance into [`Firehose`](crate::types::DestinationConfiguration::Firehose), extracting the inner [`FirehoseDestinationConfiguration`](crate::types::FirehoseDestinationConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_firehose(
        &self,
    ) -> std::result::Result<&crate::types::FirehoseDestinationConfiguration, &Self> {
        if let DestinationConfiguration::Firehose(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Firehose`](crate::types::DestinationConfiguration::Firehose).
    pub fn is_firehose(&self) -> bool {
        self.as_firehose().is_ok()
    }
    /// Tries to convert the enum instance into [`S3`](crate::types::DestinationConfiguration::S3), extracting the inner [`S3DestinationConfiguration`](crate::types::S3DestinationConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_s3(&self) -> std::result::Result<&crate::types::S3DestinationConfiguration, &Self> {
        if let DestinationConfiguration::S3(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`S3`](crate::types::DestinationConfiguration::S3).
    pub fn is_s3(&self) -> bool {
        self.as_s3().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
