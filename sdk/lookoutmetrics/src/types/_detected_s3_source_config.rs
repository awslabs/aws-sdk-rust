// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An inferred source configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectedS3SourceConfig {
    /// <p>The source's file format descriptor.</p>
    #[doc(hidden)]
    pub file_format_descriptor: std::option::Option<crate::types::DetectedFileFormatDescriptor>,
}
impl DetectedS3SourceConfig {
    /// <p>The source's file format descriptor.</p>
    pub fn file_format_descriptor(
        &self,
    ) -> std::option::Option<&crate::types::DetectedFileFormatDescriptor> {
        self.file_format_descriptor.as_ref()
    }
}
impl DetectedS3SourceConfig {
    /// Creates a new builder-style object to manufacture [`DetectedS3SourceConfig`](crate::types::DetectedS3SourceConfig).
    pub fn builder() -> crate::types::builders::DetectedS3SourceConfigBuilder {
        crate::types::builders::DetectedS3SourceConfigBuilder::default()
    }
}

/// A builder for [`DetectedS3SourceConfig`](crate::types::DetectedS3SourceConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetectedS3SourceConfigBuilder {
    pub(crate) file_format_descriptor:
        std::option::Option<crate::types::DetectedFileFormatDescriptor>,
}
impl DetectedS3SourceConfigBuilder {
    /// <p>The source's file format descriptor.</p>
    pub fn file_format_descriptor(
        mut self,
        input: crate::types::DetectedFileFormatDescriptor,
    ) -> Self {
        self.file_format_descriptor = Some(input);
        self
    }
    /// <p>The source's file format descriptor.</p>
    pub fn set_file_format_descriptor(
        mut self,
        input: std::option::Option<crate::types::DetectedFileFormatDescriptor>,
    ) -> Self {
        self.file_format_descriptor = input;
        self
    }
    /// Consumes the builder and constructs a [`DetectedS3SourceConfig`](crate::types::DetectedS3SourceConfig).
    pub fn build(self) -> crate::types::DetectedS3SourceConfig {
        crate::types::DetectedS3SourceConfig {
            file_format_descriptor: self.file_format_descriptor,
        }
    }
}
