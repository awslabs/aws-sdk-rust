// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about how a source JSON data file should be analyzed.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JsonFormatDescriptor {
    /// <p>The level of compression of the source CSV file.</p>
    #[doc(hidden)]
    pub file_compression: std::option::Option<crate::types::JsonFileCompression>,
    /// <p>The character set in which the source JSON file is written.</p>
    #[doc(hidden)]
    pub charset: std::option::Option<std::string::String>,
}
impl JsonFormatDescriptor {
    /// <p>The level of compression of the source CSV file.</p>
    pub fn file_compression(&self) -> std::option::Option<&crate::types::JsonFileCompression> {
        self.file_compression.as_ref()
    }
    /// <p>The character set in which the source JSON file is written.</p>
    pub fn charset(&self) -> std::option::Option<&str> {
        self.charset.as_deref()
    }
}
impl JsonFormatDescriptor {
    /// Creates a new builder-style object to manufacture [`JsonFormatDescriptor`](crate::types::JsonFormatDescriptor).
    pub fn builder() -> crate::types::builders::JsonFormatDescriptorBuilder {
        crate::types::builders::JsonFormatDescriptorBuilder::default()
    }
}

/// A builder for [`JsonFormatDescriptor`](crate::types::JsonFormatDescriptor).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JsonFormatDescriptorBuilder {
    pub(crate) file_compression: std::option::Option<crate::types::JsonFileCompression>,
    pub(crate) charset: std::option::Option<std::string::String>,
}
impl JsonFormatDescriptorBuilder {
    /// <p>The level of compression of the source CSV file.</p>
    pub fn file_compression(mut self, input: crate::types::JsonFileCompression) -> Self {
        self.file_compression = Some(input);
        self
    }
    /// <p>The level of compression of the source CSV file.</p>
    pub fn set_file_compression(
        mut self,
        input: std::option::Option<crate::types::JsonFileCompression>,
    ) -> Self {
        self.file_compression = input;
        self
    }
    /// <p>The character set in which the source JSON file is written.</p>
    pub fn charset(mut self, input: impl Into<std::string::String>) -> Self {
        self.charset = Some(input.into());
        self
    }
    /// <p>The character set in which the source JSON file is written.</p>
    pub fn set_charset(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.charset = input;
        self
    }
    /// Consumes the builder and constructs a [`JsonFormatDescriptor`](crate::types::JsonFormatDescriptor).
    pub fn build(self) -> crate::types::JsonFormatDescriptor {
        crate::types::JsonFormatDescriptor {
            file_compression: self.file_compression,
            charset: self.charset,
        }
    }
}
