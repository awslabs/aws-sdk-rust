// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A configuration that specifies the action to perform when anomalies are detected.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Action {
    /// <p>A configuration for an Amazon SNS channel.</p>
    #[doc(hidden)]
    pub sns_configuration: std::option::Option<crate::types::SnsConfiguration>,
    /// <p>A configuration for an AWS Lambda channel.</p>
    #[doc(hidden)]
    pub lambda_configuration: std::option::Option<crate::types::LambdaConfiguration>,
}
impl Action {
    /// <p>A configuration for an Amazon SNS channel.</p>
    pub fn sns_configuration(&self) -> std::option::Option<&crate::types::SnsConfiguration> {
        self.sns_configuration.as_ref()
    }
    /// <p>A configuration for an AWS Lambda channel.</p>
    pub fn lambda_configuration(&self) -> std::option::Option<&crate::types::LambdaConfiguration> {
        self.lambda_configuration.as_ref()
    }
}
impl Action {
    /// Creates a new builder-style object to manufacture [`Action`](crate::types::Action).
    pub fn builder() -> crate::types::builders::ActionBuilder {
        crate::types::builders::ActionBuilder::default()
    }
}

/// A builder for [`Action`](crate::types::Action).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionBuilder {
    pub(crate) sns_configuration: std::option::Option<crate::types::SnsConfiguration>,
    pub(crate) lambda_configuration: std::option::Option<crate::types::LambdaConfiguration>,
}
impl ActionBuilder {
    /// <p>A configuration for an Amazon SNS channel.</p>
    pub fn sns_configuration(mut self, input: crate::types::SnsConfiguration) -> Self {
        self.sns_configuration = Some(input);
        self
    }
    /// <p>A configuration for an Amazon SNS channel.</p>
    pub fn set_sns_configuration(
        mut self,
        input: std::option::Option<crate::types::SnsConfiguration>,
    ) -> Self {
        self.sns_configuration = input;
        self
    }
    /// <p>A configuration for an AWS Lambda channel.</p>
    pub fn lambda_configuration(mut self, input: crate::types::LambdaConfiguration) -> Self {
        self.lambda_configuration = Some(input);
        self
    }
    /// <p>A configuration for an AWS Lambda channel.</p>
    pub fn set_lambda_configuration(
        mut self,
        input: std::option::Option<crate::types::LambdaConfiguration>,
    ) -> Self {
        self.lambda_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`Action`](crate::types::Action).
    pub fn build(self) -> crate::types::Action {
        crate::types::Action {
            sns_configuration: self.sns_configuration,
            lambda_configuration: self.lambda_configuration,
        }
    }
}
