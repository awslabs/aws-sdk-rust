// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A dimension name and value.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DimensionNameValue {
    /// <p>The name of the dimension.</p>
    #[doc(hidden)]
    pub dimension_name: std::option::Option<std::string::String>,
    /// <p>The value of the dimension.</p>
    #[doc(hidden)]
    pub dimension_value: std::option::Option<std::string::String>,
}
impl DimensionNameValue {
    /// <p>The name of the dimension.</p>
    pub fn dimension_name(&self) -> std::option::Option<&str> {
        self.dimension_name.as_deref()
    }
    /// <p>The value of the dimension.</p>
    pub fn dimension_value(&self) -> std::option::Option<&str> {
        self.dimension_value.as_deref()
    }
}
impl DimensionNameValue {
    /// Creates a new builder-style object to manufacture [`DimensionNameValue`](crate::types::DimensionNameValue).
    pub fn builder() -> crate::types::builders::DimensionNameValueBuilder {
        crate::types::builders::DimensionNameValueBuilder::default()
    }
}

/// A builder for [`DimensionNameValue`](crate::types::DimensionNameValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DimensionNameValueBuilder {
    pub(crate) dimension_name: std::option::Option<std::string::String>,
    pub(crate) dimension_value: std::option::Option<std::string::String>,
}
impl DimensionNameValueBuilder {
    /// <p>The name of the dimension.</p>
    pub fn dimension_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.dimension_name = Some(input.into());
        self
    }
    /// <p>The name of the dimension.</p>
    pub fn set_dimension_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dimension_name = input;
        self
    }
    /// <p>The value of the dimension.</p>
    pub fn dimension_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.dimension_value = Some(input.into());
        self
    }
    /// <p>The value of the dimension.</p>
    pub fn set_dimension_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dimension_value = input;
        self
    }
    /// Consumes the builder and constructs a [`DimensionNameValue`](crate::types::DimensionNameValue).
    pub fn build(self) -> crate::types::DimensionNameValue {
        crate::types::DimensionNameValue {
            dimension_name: self.dimension_name,
            dimension_value: self.dimension_value,
        }
    }
}
