// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Aggregated statistics about a measure affected by an anomaly.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ItemizedMetricStats {
    /// <p>The name of the measure.</p>
    #[doc(hidden)]
    pub metric_name: std::option::Option<std::string::String>,
    /// <p>The number of times that the measure appears.</p>
    #[doc(hidden)]
    pub occurrence_count: i32,
}
impl ItemizedMetricStats {
    /// <p>The name of the measure.</p>
    pub fn metric_name(&self) -> std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>The number of times that the measure appears.</p>
    pub fn occurrence_count(&self) -> i32 {
        self.occurrence_count
    }
}
impl ItemizedMetricStats {
    /// Creates a new builder-style object to manufacture [`ItemizedMetricStats`](crate::types::ItemizedMetricStats).
    pub fn builder() -> crate::types::builders::ItemizedMetricStatsBuilder {
        crate::types::builders::ItemizedMetricStatsBuilder::default()
    }
}

/// A builder for [`ItemizedMetricStats`](crate::types::ItemizedMetricStats).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ItemizedMetricStatsBuilder {
    pub(crate) metric_name: std::option::Option<std::string::String>,
    pub(crate) occurrence_count: std::option::Option<i32>,
}
impl ItemizedMetricStatsBuilder {
    /// <p>The name of the measure.</p>
    pub fn metric_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_name = Some(input.into());
        self
    }
    /// <p>The name of the measure.</p>
    pub fn set_metric_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The number of times that the measure appears.</p>
    pub fn occurrence_count(mut self, input: i32) -> Self {
        self.occurrence_count = Some(input);
        self
    }
    /// <p>The number of times that the measure appears.</p>
    pub fn set_occurrence_count(mut self, input: std::option::Option<i32>) -> Self {
        self.occurrence_count = input;
        self
    }
    /// Consumes the builder and constructs a [`ItemizedMetricStats`](crate::types::ItemizedMetricStats).
    pub fn build(self) -> crate::types::ItemizedMetricStats {
        crate::types::ItemizedMetricStats {
            metric_name: self.metric_name,
            occurrence_count: self.occurrence_count.unwrap_or_default(),
        }
    }
}
