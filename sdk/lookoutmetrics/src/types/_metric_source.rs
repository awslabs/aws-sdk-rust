// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about source data used to generate metrics.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricSource {
    /// <p>Contains information about the configuration of the S3 bucket that contains source files.</p>
    #[doc(hidden)]
    pub s3_source_config: std::option::Option<crate::types::S3SourceConfig>,
    /// <p>Details about an AppFlow datasource.</p>
    #[doc(hidden)]
    pub app_flow_config: std::option::Option<crate::types::AppFlowConfig>,
    /// <p>Details about an Amazon CloudWatch monitoring datasource.</p>
    #[doc(hidden)]
    pub cloud_watch_config: std::option::Option<crate::types::CloudWatchConfig>,
    /// <p>Details about an Amazon Relational Database Service (RDS) datasource.</p>
    #[doc(hidden)]
    pub rds_source_config: std::option::Option<crate::types::RdsSourceConfig>,
    /// <p>Details about an Amazon Redshift database datasource.</p>
    #[doc(hidden)]
    pub redshift_source_config: std::option::Option<crate::types::RedshiftSourceConfig>,
    /// <p>Details about an Amazon Athena datasource.</p>
    #[doc(hidden)]
    pub athena_source_config: std::option::Option<crate::types::AthenaSourceConfig>,
}
impl MetricSource {
    /// <p>Contains information about the configuration of the S3 bucket that contains source files.</p>
    pub fn s3_source_config(&self) -> std::option::Option<&crate::types::S3SourceConfig> {
        self.s3_source_config.as_ref()
    }
    /// <p>Details about an AppFlow datasource.</p>
    pub fn app_flow_config(&self) -> std::option::Option<&crate::types::AppFlowConfig> {
        self.app_flow_config.as_ref()
    }
    /// <p>Details about an Amazon CloudWatch monitoring datasource.</p>
    pub fn cloud_watch_config(&self) -> std::option::Option<&crate::types::CloudWatchConfig> {
        self.cloud_watch_config.as_ref()
    }
    /// <p>Details about an Amazon Relational Database Service (RDS) datasource.</p>
    pub fn rds_source_config(&self) -> std::option::Option<&crate::types::RdsSourceConfig> {
        self.rds_source_config.as_ref()
    }
    /// <p>Details about an Amazon Redshift database datasource.</p>
    pub fn redshift_source_config(
        &self,
    ) -> std::option::Option<&crate::types::RedshiftSourceConfig> {
        self.redshift_source_config.as_ref()
    }
    /// <p>Details about an Amazon Athena datasource.</p>
    pub fn athena_source_config(&self) -> std::option::Option<&crate::types::AthenaSourceConfig> {
        self.athena_source_config.as_ref()
    }
}
impl MetricSource {
    /// Creates a new builder-style object to manufacture [`MetricSource`](crate::types::MetricSource).
    pub fn builder() -> crate::types::builders::MetricSourceBuilder {
        crate::types::builders::MetricSourceBuilder::default()
    }
}

/// A builder for [`MetricSource`](crate::types::MetricSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricSourceBuilder {
    pub(crate) s3_source_config: std::option::Option<crate::types::S3SourceConfig>,
    pub(crate) app_flow_config: std::option::Option<crate::types::AppFlowConfig>,
    pub(crate) cloud_watch_config: std::option::Option<crate::types::CloudWatchConfig>,
    pub(crate) rds_source_config: std::option::Option<crate::types::RdsSourceConfig>,
    pub(crate) redshift_source_config: std::option::Option<crate::types::RedshiftSourceConfig>,
    pub(crate) athena_source_config: std::option::Option<crate::types::AthenaSourceConfig>,
}
impl MetricSourceBuilder {
    /// <p>Contains information about the configuration of the S3 bucket that contains source files.</p>
    pub fn s3_source_config(mut self, input: crate::types::S3SourceConfig) -> Self {
        self.s3_source_config = Some(input);
        self
    }
    /// <p>Contains information about the configuration of the S3 bucket that contains source files.</p>
    pub fn set_s3_source_config(
        mut self,
        input: std::option::Option<crate::types::S3SourceConfig>,
    ) -> Self {
        self.s3_source_config = input;
        self
    }
    /// <p>Details about an AppFlow datasource.</p>
    pub fn app_flow_config(mut self, input: crate::types::AppFlowConfig) -> Self {
        self.app_flow_config = Some(input);
        self
    }
    /// <p>Details about an AppFlow datasource.</p>
    pub fn set_app_flow_config(
        mut self,
        input: std::option::Option<crate::types::AppFlowConfig>,
    ) -> Self {
        self.app_flow_config = input;
        self
    }
    /// <p>Details about an Amazon CloudWatch monitoring datasource.</p>
    pub fn cloud_watch_config(mut self, input: crate::types::CloudWatchConfig) -> Self {
        self.cloud_watch_config = Some(input);
        self
    }
    /// <p>Details about an Amazon CloudWatch monitoring datasource.</p>
    pub fn set_cloud_watch_config(
        mut self,
        input: std::option::Option<crate::types::CloudWatchConfig>,
    ) -> Self {
        self.cloud_watch_config = input;
        self
    }
    /// <p>Details about an Amazon Relational Database Service (RDS) datasource.</p>
    pub fn rds_source_config(mut self, input: crate::types::RdsSourceConfig) -> Self {
        self.rds_source_config = Some(input);
        self
    }
    /// <p>Details about an Amazon Relational Database Service (RDS) datasource.</p>
    pub fn set_rds_source_config(
        mut self,
        input: std::option::Option<crate::types::RdsSourceConfig>,
    ) -> Self {
        self.rds_source_config = input;
        self
    }
    /// <p>Details about an Amazon Redshift database datasource.</p>
    pub fn redshift_source_config(mut self, input: crate::types::RedshiftSourceConfig) -> Self {
        self.redshift_source_config = Some(input);
        self
    }
    /// <p>Details about an Amazon Redshift database datasource.</p>
    pub fn set_redshift_source_config(
        mut self,
        input: std::option::Option<crate::types::RedshiftSourceConfig>,
    ) -> Self {
        self.redshift_source_config = input;
        self
    }
    /// <p>Details about an Amazon Athena datasource.</p>
    pub fn athena_source_config(mut self, input: crate::types::AthenaSourceConfig) -> Self {
        self.athena_source_config = Some(input);
        self
    }
    /// <p>Details about an Amazon Athena datasource.</p>
    pub fn set_athena_source_config(
        mut self,
        input: std::option::Option<crate::types::AthenaSourceConfig>,
    ) -> Self {
        self.athena_source_config = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricSource`](crate::types::MetricSource).
    pub fn build(self) -> crate::types::MetricSource {
        crate::types::MetricSource {
            s3_source_config: self.s3_source_config,
            app_flow_config: self.app_flow_config,
            cloud_watch_config: self.cloud_watch_config,
            rds_source_config: self.rds_source_config,
            redshift_source_config: self.redshift_source_config,
            athena_source_config: self.athena_source_config,
        }
    }
}
