// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a summary of an alert's configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AlertSummary {
    /// <p>The ARN of the alert.</p>
    #[doc(hidden)]
    pub alert_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the detector to which the alert is attached.</p>
    #[doc(hidden)]
    pub anomaly_detector_arn: std::option::Option<std::string::String>,
    /// <p>The name of the alert.</p>
    #[doc(hidden)]
    pub alert_name: std::option::Option<std::string::String>,
    /// <p>The minimum severity for an anomaly to trigger the alert.</p>
    #[doc(hidden)]
    pub alert_sensitivity_threshold: i32,
    /// <p>The type of the alert.</p>
    #[doc(hidden)]
    pub alert_type: std::option::Option<crate::types::AlertType>,
    /// <p>The status of the alert.</p>
    #[doc(hidden)]
    pub alert_status: std::option::Option<crate::types::AlertStatus>,
    /// <p>The time at which the alert was last modified.</p>
    #[doc(hidden)]
    pub last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the alert was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The alert's <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a>.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl AlertSummary {
    /// <p>The ARN of the alert.</p>
    pub fn alert_arn(&self) -> std::option::Option<&str> {
        self.alert_arn.as_deref()
    }
    /// <p>The ARN of the detector to which the alert is attached.</p>
    pub fn anomaly_detector_arn(&self) -> std::option::Option<&str> {
        self.anomaly_detector_arn.as_deref()
    }
    /// <p>The name of the alert.</p>
    pub fn alert_name(&self) -> std::option::Option<&str> {
        self.alert_name.as_deref()
    }
    /// <p>The minimum severity for an anomaly to trigger the alert.</p>
    pub fn alert_sensitivity_threshold(&self) -> i32 {
        self.alert_sensitivity_threshold
    }
    /// <p>The type of the alert.</p>
    pub fn alert_type(&self) -> std::option::Option<&crate::types::AlertType> {
        self.alert_type.as_ref()
    }
    /// <p>The status of the alert.</p>
    pub fn alert_status(&self) -> std::option::Option<&crate::types::AlertStatus> {
        self.alert_status.as_ref()
    }
    /// <p>The time at which the alert was last modified.</p>
    pub fn last_modification_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
    /// <p>The time at which the alert was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The alert's <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a>.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl AlertSummary {
    /// Creates a new builder-style object to manufacture [`AlertSummary`](crate::types::AlertSummary).
    pub fn builder() -> crate::types::builders::AlertSummaryBuilder {
        crate::types::builders::AlertSummaryBuilder::default()
    }
}

/// A builder for [`AlertSummary`](crate::types::AlertSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AlertSummaryBuilder {
    pub(crate) alert_arn: std::option::Option<std::string::String>,
    pub(crate) anomaly_detector_arn: std::option::Option<std::string::String>,
    pub(crate) alert_name: std::option::Option<std::string::String>,
    pub(crate) alert_sensitivity_threshold: std::option::Option<i32>,
    pub(crate) alert_type: std::option::Option<crate::types::AlertType>,
    pub(crate) alert_status: std::option::Option<crate::types::AlertStatus>,
    pub(crate) last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl AlertSummaryBuilder {
    /// <p>The ARN of the alert.</p>
    pub fn alert_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.alert_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the alert.</p>
    pub fn set_alert_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alert_arn = input;
        self
    }
    /// <p>The ARN of the detector to which the alert is attached.</p>
    pub fn anomaly_detector_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.anomaly_detector_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the detector to which the alert is attached.</p>
    pub fn set_anomaly_detector_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.anomaly_detector_arn = input;
        self
    }
    /// <p>The name of the alert.</p>
    pub fn alert_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.alert_name = Some(input.into());
        self
    }
    /// <p>The name of the alert.</p>
    pub fn set_alert_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alert_name = input;
        self
    }
    /// <p>The minimum severity for an anomaly to trigger the alert.</p>
    pub fn alert_sensitivity_threshold(mut self, input: i32) -> Self {
        self.alert_sensitivity_threshold = Some(input);
        self
    }
    /// <p>The minimum severity for an anomaly to trigger the alert.</p>
    pub fn set_alert_sensitivity_threshold(mut self, input: std::option::Option<i32>) -> Self {
        self.alert_sensitivity_threshold = input;
        self
    }
    /// <p>The type of the alert.</p>
    pub fn alert_type(mut self, input: crate::types::AlertType) -> Self {
        self.alert_type = Some(input);
        self
    }
    /// <p>The type of the alert.</p>
    pub fn set_alert_type(mut self, input: std::option::Option<crate::types::AlertType>) -> Self {
        self.alert_type = input;
        self
    }
    /// <p>The status of the alert.</p>
    pub fn alert_status(mut self, input: crate::types::AlertStatus) -> Self {
        self.alert_status = Some(input);
        self
    }
    /// <p>The status of the alert.</p>
    pub fn set_alert_status(
        mut self,
        input: std::option::Option<crate::types::AlertStatus>,
    ) -> Self {
        self.alert_status = input;
        self
    }
    /// <p>The time at which the alert was last modified.</p>
    pub fn last_modification_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = Some(input);
        self
    }
    /// <p>The time at which the alert was last modified.</p>
    pub fn set_last_modification_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modification_time = input;
        self
    }
    /// <p>The time at which the alert was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time at which the alert was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The alert's <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a>.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The alert's <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`AlertSummary`](crate::types::AlertSummary).
    pub fn build(self) -> crate::types::AlertSummary {
        crate::types::AlertSummary {
            alert_arn: self.alert_arn,
            anomaly_detector_arn: self.anomaly_detector_arn,
            alert_name: self.alert_name,
            alert_sensitivity_threshold: self.alert_sensitivity_threshold.unwrap_or_default(),
            alert_type: self.alert_type,
            alert_status: self.alert_status,
            last_modification_time: self.last_modification_time,
            creation_time: self.creation_time,
            tags: self.tags,
        }
    }
}
