// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the source configuration in Amazon S3.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SampleDataS3SourceConfig {
    /// <p>The Amazon Resource Name (ARN) of the role.</p>
    pub role_arn: ::std::string::String,
    /// <p>An array of strings containing the list of templated paths.</p>
    pub templated_path_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An array of strings containing the historical set of data paths.</p>
    pub historical_data_path_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Contains information about a source file's formatting.</p>
    pub file_format_descriptor: ::std::option::Option<crate::types::FileFormatDescriptor>,
}
impl SampleDataS3SourceConfig {
    /// <p>The Amazon Resource Name (ARN) of the role.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>An array of strings containing the list of templated paths.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.templated_path_list.is_none()`.
    pub fn templated_path_list(&self) -> &[::std::string::String] {
        self.templated_path_list.as_deref().unwrap_or_default()
    }
    /// <p>An array of strings containing the historical set of data paths.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.historical_data_path_list.is_none()`.
    pub fn historical_data_path_list(&self) -> &[::std::string::String] {
        self.historical_data_path_list.as_deref().unwrap_or_default()
    }
    /// <p>Contains information about a source file's formatting.</p>
    pub fn file_format_descriptor(&self) -> ::std::option::Option<&crate::types::FileFormatDescriptor> {
        self.file_format_descriptor.as_ref()
    }
}
impl SampleDataS3SourceConfig {
    /// Creates a new builder-style object to manufacture [`SampleDataS3SourceConfig`](crate::types::SampleDataS3SourceConfig).
    pub fn builder() -> crate::types::builders::SampleDataS3SourceConfigBuilder {
        crate::types::builders::SampleDataS3SourceConfigBuilder::default()
    }
}

/// A builder for [`SampleDataS3SourceConfig`](crate::types::SampleDataS3SourceConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SampleDataS3SourceConfigBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) templated_path_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) historical_data_path_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) file_format_descriptor: ::std::option::Option<crate::types::FileFormatDescriptor>,
}
impl SampleDataS3SourceConfigBuilder {
    /// <p>The Amazon Resource Name (ARN) of the role.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Appends an item to `templated_path_list`.
    ///
    /// To override the contents of this collection use [`set_templated_path_list`](Self::set_templated_path_list).
    ///
    /// <p>An array of strings containing the list of templated paths.</p>
    pub fn templated_path_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.templated_path_list.unwrap_or_default();
        v.push(input.into());
        self.templated_path_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of strings containing the list of templated paths.</p>
    pub fn set_templated_path_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.templated_path_list = input;
        self
    }
    /// <p>An array of strings containing the list of templated paths.</p>
    pub fn get_templated_path_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.templated_path_list
    }
    /// Appends an item to `historical_data_path_list`.
    ///
    /// To override the contents of this collection use [`set_historical_data_path_list`](Self::set_historical_data_path_list).
    ///
    /// <p>An array of strings containing the historical set of data paths.</p>
    pub fn historical_data_path_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.historical_data_path_list.unwrap_or_default();
        v.push(input.into());
        self.historical_data_path_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of strings containing the historical set of data paths.</p>
    pub fn set_historical_data_path_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.historical_data_path_list = input;
        self
    }
    /// <p>An array of strings containing the historical set of data paths.</p>
    pub fn get_historical_data_path_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.historical_data_path_list
    }
    /// <p>Contains information about a source file's formatting.</p>
    /// This field is required.
    pub fn file_format_descriptor(mut self, input: crate::types::FileFormatDescriptor) -> Self {
        self.file_format_descriptor = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about a source file's formatting.</p>
    pub fn set_file_format_descriptor(mut self, input: ::std::option::Option<crate::types::FileFormatDescriptor>) -> Self {
        self.file_format_descriptor = input;
        self
    }
    /// <p>Contains information about a source file's formatting.</p>
    pub fn get_file_format_descriptor(&self) -> &::std::option::Option<crate::types::FileFormatDescriptor> {
        &self.file_format_descriptor
    }
    /// Consumes the builder and constructs a [`SampleDataS3SourceConfig`](crate::types::SampleDataS3SourceConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::SampleDataS3SourceConfigBuilder::role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::SampleDataS3SourceConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SampleDataS3SourceConfig {
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building SampleDataS3SourceConfig",
                )
            })?,
            templated_path_list: self.templated_path_list,
            historical_data_path_list: self.historical_data_path_list,
            file_format_descriptor: self.file_format_descriptor,
        })
    }
}
