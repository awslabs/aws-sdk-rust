// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Aggregated statistics for a group of anomalous metrics.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AnomalyGroupStatistics {
    /// <p>The start of the time range that was searched.</p>
    #[doc(hidden)]
    pub evaluation_start_date: std::option::Option<std::string::String>,
    /// <p>The number of groups found.</p>
    #[doc(hidden)]
    pub total_count: i32,
    /// <p>Statistics for individual metrics within the group.</p>
    #[doc(hidden)]
    pub itemized_metric_stats_list:
        std::option::Option<std::vec::Vec<crate::types::ItemizedMetricStats>>,
}
impl AnomalyGroupStatistics {
    /// <p>The start of the time range that was searched.</p>
    pub fn evaluation_start_date(&self) -> std::option::Option<&str> {
        self.evaluation_start_date.as_deref()
    }
    /// <p>The number of groups found.</p>
    pub fn total_count(&self) -> i32 {
        self.total_count
    }
    /// <p>Statistics for individual metrics within the group.</p>
    pub fn itemized_metric_stats_list(
        &self,
    ) -> std::option::Option<&[crate::types::ItemizedMetricStats]> {
        self.itemized_metric_stats_list.as_deref()
    }
}
impl AnomalyGroupStatistics {
    /// Creates a new builder-style object to manufacture [`AnomalyGroupStatistics`](crate::types::AnomalyGroupStatistics).
    pub fn builder() -> crate::types::builders::AnomalyGroupStatisticsBuilder {
        crate::types::builders::AnomalyGroupStatisticsBuilder::default()
    }
}

/// A builder for [`AnomalyGroupStatistics`](crate::types::AnomalyGroupStatistics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AnomalyGroupStatisticsBuilder {
    pub(crate) evaluation_start_date: std::option::Option<std::string::String>,
    pub(crate) total_count: std::option::Option<i32>,
    pub(crate) itemized_metric_stats_list:
        std::option::Option<std::vec::Vec<crate::types::ItemizedMetricStats>>,
}
impl AnomalyGroupStatisticsBuilder {
    /// <p>The start of the time range that was searched.</p>
    pub fn evaluation_start_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.evaluation_start_date = Some(input.into());
        self
    }
    /// <p>The start of the time range that was searched.</p>
    pub fn set_evaluation_start_date(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.evaluation_start_date = input;
        self
    }
    /// <p>The number of groups found.</p>
    pub fn total_count(mut self, input: i32) -> Self {
        self.total_count = Some(input);
        self
    }
    /// <p>The number of groups found.</p>
    pub fn set_total_count(mut self, input: std::option::Option<i32>) -> Self {
        self.total_count = input;
        self
    }
    /// Appends an item to `itemized_metric_stats_list`.
    ///
    /// To override the contents of this collection use [`set_itemized_metric_stats_list`](Self::set_itemized_metric_stats_list).
    ///
    /// <p>Statistics for individual metrics within the group.</p>
    pub fn itemized_metric_stats_list(mut self, input: crate::types::ItemizedMetricStats) -> Self {
        let mut v = self.itemized_metric_stats_list.unwrap_or_default();
        v.push(input);
        self.itemized_metric_stats_list = Some(v);
        self
    }
    /// <p>Statistics for individual metrics within the group.</p>
    pub fn set_itemized_metric_stats_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ItemizedMetricStats>>,
    ) -> Self {
        self.itemized_metric_stats_list = input;
        self
    }
    /// Consumes the builder and constructs a [`AnomalyGroupStatistics`](crate::types::AnomalyGroupStatistics).
    pub fn build(self) -> crate::types::AnomalyGroupStatistics {
        crate::types::AnomalyGroupStatistics {
            evaluation_start_date: self.evaluation_start_date,
            total_count: self.total_count.unwrap_or_default(),
            itemized_metric_stats_list: self.itemized_metric_stats_list,
        }
    }
}
