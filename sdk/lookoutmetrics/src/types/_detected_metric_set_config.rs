// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An inferred dataset configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectedMetricSetConfig {
    /// <p>The dataset's offset.</p>
    #[doc(hidden)]
    pub offset: std::option::Option<crate::types::DetectedField>,
    /// <p>The dataset's interval.</p>
    #[doc(hidden)]
    pub metric_set_frequency: std::option::Option<crate::types::DetectedField>,
    /// <p>The dataset's data source.</p>
    #[doc(hidden)]
    pub metric_source: std::option::Option<crate::types::DetectedMetricSource>,
}
impl DetectedMetricSetConfig {
    /// <p>The dataset's offset.</p>
    pub fn offset(&self) -> std::option::Option<&crate::types::DetectedField> {
        self.offset.as_ref()
    }
    /// <p>The dataset's interval.</p>
    pub fn metric_set_frequency(&self) -> std::option::Option<&crate::types::DetectedField> {
        self.metric_set_frequency.as_ref()
    }
    /// <p>The dataset's data source.</p>
    pub fn metric_source(&self) -> std::option::Option<&crate::types::DetectedMetricSource> {
        self.metric_source.as_ref()
    }
}
impl DetectedMetricSetConfig {
    /// Creates a new builder-style object to manufacture [`DetectedMetricSetConfig`](crate::types::DetectedMetricSetConfig).
    pub fn builder() -> crate::types::builders::DetectedMetricSetConfigBuilder {
        crate::types::builders::DetectedMetricSetConfigBuilder::default()
    }
}

/// A builder for [`DetectedMetricSetConfig`](crate::types::DetectedMetricSetConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetectedMetricSetConfigBuilder {
    pub(crate) offset: std::option::Option<crate::types::DetectedField>,
    pub(crate) metric_set_frequency: std::option::Option<crate::types::DetectedField>,
    pub(crate) metric_source: std::option::Option<crate::types::DetectedMetricSource>,
}
impl DetectedMetricSetConfigBuilder {
    /// <p>The dataset's offset.</p>
    pub fn offset(mut self, input: crate::types::DetectedField) -> Self {
        self.offset = Some(input);
        self
    }
    /// <p>The dataset's offset.</p>
    pub fn set_offset(mut self, input: std::option::Option<crate::types::DetectedField>) -> Self {
        self.offset = input;
        self
    }
    /// <p>The dataset's interval.</p>
    pub fn metric_set_frequency(mut self, input: crate::types::DetectedField) -> Self {
        self.metric_set_frequency = Some(input);
        self
    }
    /// <p>The dataset's interval.</p>
    pub fn set_metric_set_frequency(
        mut self,
        input: std::option::Option<crate::types::DetectedField>,
    ) -> Self {
        self.metric_set_frequency = input;
        self
    }
    /// <p>The dataset's data source.</p>
    pub fn metric_source(mut self, input: crate::types::DetectedMetricSource) -> Self {
        self.metric_source = Some(input);
        self
    }
    /// <p>The dataset's data source.</p>
    pub fn set_metric_source(
        mut self,
        input: std::option::Option<crate::types::DetectedMetricSource>,
    ) -> Self {
        self.metric_source = input;
        self
    }
    /// Consumes the builder and constructs a [`DetectedMetricSetConfig`](crate::types::DetectedMetricSetConfig).
    pub fn build(self) -> crate::types::DetectedMetricSetConfig {
        crate::types::DetectedMetricSetConfig {
            offset: self.offset,
            metric_set_frequency: self.metric_set_frequency,
            metric_source: self.metric_source,
        }
    }
}
