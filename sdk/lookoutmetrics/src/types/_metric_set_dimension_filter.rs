// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a list of filters for choosing a subset of dimension values. Each filter consists of the dimension and one of its values that you want to include. When multiple dimensions or values are specified, the dimensions are joined with an AND operation and the values are joined with an OR operation. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricSetDimensionFilter {
    /// <p>The dimension that you want to filter on.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The list of filters that you are applying.</p>
    pub filter_list: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
}
impl MetricSetDimensionFilter {
    /// <p>The dimension that you want to filter on.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The list of filters that you are applying.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_list.is_none()`.
    pub fn filter_list(&self) -> &[crate::types::Filter] {
        self.filter_list.as_deref().unwrap_or_default()
    }
}
impl MetricSetDimensionFilter {
    /// Creates a new builder-style object to manufacture [`MetricSetDimensionFilter`](crate::types::MetricSetDimensionFilter).
    pub fn builder() -> crate::types::builders::MetricSetDimensionFilterBuilder {
        crate::types::builders::MetricSetDimensionFilterBuilder::default()
    }
}

/// A builder for [`MetricSetDimensionFilter`](crate::types::MetricSetDimensionFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricSetDimensionFilterBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) filter_list: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
}
impl MetricSetDimensionFilterBuilder {
    /// <p>The dimension that you want to filter on.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The dimension that you want to filter on.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The dimension that you want to filter on.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `filter_list`.
    ///
    /// To override the contents of this collection use [`set_filter_list`](Self::set_filter_list).
    ///
    /// <p>The list of filters that you are applying.</p>
    pub fn filter_list(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filter_list.unwrap_or_default();
        v.push(input);
        self.filter_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of filters that you are applying.</p>
    pub fn set_filter_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filter_list = input;
        self
    }
    /// <p>The list of filters that you are applying.</p>
    pub fn get_filter_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filter_list
    }
    /// Consumes the builder and constructs a [`MetricSetDimensionFilter`](crate::types::MetricSetDimensionFilter).
    pub fn build(self) -> crate::types::MetricSetDimensionFilter {
        crate::types::MetricSetDimensionFilter {
            name: self.name,
            filter_list: self.filter_list,
        }
    }
}
