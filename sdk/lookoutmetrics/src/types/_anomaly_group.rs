// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A group of anomalous metrics</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnomalyGroup {
    /// <p>The start time for the group.</p>
    pub start_time: ::std::option::Option<::std::string::String>,
    /// <p>The end time for the group.</p>
    pub end_time: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the anomaly group.</p>
    pub anomaly_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The severity score of the group.</p>
    pub anomaly_group_score: ::std::option::Option<f64>,
    /// <p>The name of the primary affected measure for the group.</p>
    pub primary_metric_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of measures affected by the anomaly.</p>
    pub metric_level_impact_list: ::std::option::Option<::std::vec::Vec<crate::types::MetricLevelImpact>>,
}
impl AnomalyGroup {
    /// <p>The start time for the group.</p>
    pub fn start_time(&self) -> ::std::option::Option<&str> {
        self.start_time.as_deref()
    }
    /// <p>The end time for the group.</p>
    pub fn end_time(&self) -> ::std::option::Option<&str> {
        self.end_time.as_deref()
    }
    /// <p>The ID of the anomaly group.</p>
    pub fn anomaly_group_id(&self) -> ::std::option::Option<&str> {
        self.anomaly_group_id.as_deref()
    }
    /// <p>The severity score of the group.</p>
    pub fn anomaly_group_score(&self) -> ::std::option::Option<f64> {
        self.anomaly_group_score
    }
    /// <p>The name of the primary affected measure for the group.</p>
    pub fn primary_metric_name(&self) -> ::std::option::Option<&str> {
        self.primary_metric_name.as_deref()
    }
    /// <p>A list of measures affected by the anomaly.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_level_impact_list.is_none()`.
    pub fn metric_level_impact_list(&self) -> &[crate::types::MetricLevelImpact] {
        self.metric_level_impact_list.as_deref().unwrap_or_default()
    }
}
impl AnomalyGroup {
    /// Creates a new builder-style object to manufacture [`AnomalyGroup`](crate::types::AnomalyGroup).
    pub fn builder() -> crate::types::builders::AnomalyGroupBuilder {
        crate::types::builders::AnomalyGroupBuilder::default()
    }
}

/// A builder for [`AnomalyGroup`](crate::types::AnomalyGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnomalyGroupBuilder {
    pub(crate) start_time: ::std::option::Option<::std::string::String>,
    pub(crate) end_time: ::std::option::Option<::std::string::String>,
    pub(crate) anomaly_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) anomaly_group_score: ::std::option::Option<f64>,
    pub(crate) primary_metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) metric_level_impact_list: ::std::option::Option<::std::vec::Vec<crate::types::MetricLevelImpact>>,
}
impl AnomalyGroupBuilder {
    /// <p>The start time for the group.</p>
    pub fn start_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The start time for the group.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time for the group.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_time
    }
    /// <p>The end time for the group.</p>
    pub fn end_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.end_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The end time for the group.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time for the group.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.end_time
    }
    /// <p>The ID of the anomaly group.</p>
    pub fn anomaly_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.anomaly_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the anomaly group.</p>
    pub fn set_anomaly_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.anomaly_group_id = input;
        self
    }
    /// <p>The ID of the anomaly group.</p>
    pub fn get_anomaly_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.anomaly_group_id
    }
    /// <p>The severity score of the group.</p>
    pub fn anomaly_group_score(mut self, input: f64) -> Self {
        self.anomaly_group_score = ::std::option::Option::Some(input);
        self
    }
    /// <p>The severity score of the group.</p>
    pub fn set_anomaly_group_score(mut self, input: ::std::option::Option<f64>) -> Self {
        self.anomaly_group_score = input;
        self
    }
    /// <p>The severity score of the group.</p>
    pub fn get_anomaly_group_score(&self) -> &::std::option::Option<f64> {
        &self.anomaly_group_score
    }
    /// <p>The name of the primary affected measure for the group.</p>
    pub fn primary_metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_metric_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the primary affected measure for the group.</p>
    pub fn set_primary_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_metric_name = input;
        self
    }
    /// <p>The name of the primary affected measure for the group.</p>
    pub fn get_primary_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_metric_name
    }
    /// Appends an item to `metric_level_impact_list`.
    ///
    /// To override the contents of this collection use [`set_metric_level_impact_list`](Self::set_metric_level_impact_list).
    ///
    /// <p>A list of measures affected by the anomaly.</p>
    pub fn metric_level_impact_list(mut self, input: crate::types::MetricLevelImpact) -> Self {
        let mut v = self.metric_level_impact_list.unwrap_or_default();
        v.push(input);
        self.metric_level_impact_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of measures affected by the anomaly.</p>
    pub fn set_metric_level_impact_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricLevelImpact>>) -> Self {
        self.metric_level_impact_list = input;
        self
    }
    /// <p>A list of measures affected by the anomaly.</p>
    pub fn get_metric_level_impact_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricLevelImpact>> {
        &self.metric_level_impact_list
    }
    /// Consumes the builder and constructs a [`AnomalyGroup`](crate::types::AnomalyGroup).
    pub fn build(self) -> crate::types::AnomalyGroup {
        crate::types::AnomalyGroup {
            start_time: self.start_time,
            end_time: self.end_time,
            anomaly_group_id: self.anomaly_group_id,
            anomaly_group_score: self.anomaly_group_score,
            primary_metric_name: self.primary_metric_name,
            metric_level_impact_list: self.metric_level_impact_list,
        }
    }
}
