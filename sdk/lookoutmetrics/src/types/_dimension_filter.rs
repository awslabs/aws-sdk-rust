// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The dimension filter, containing DimensionName and DimensionValueList.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DimensionFilter {
    /// <p>The name of the dimension to filter on.</p>
    pub dimension_name: ::std::option::Option<::std::string::String>,
    /// <p>The list of values for the dimension specified in DimensionName that you want to filter on.</p>
    pub dimension_value_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DimensionFilter {
    /// <p>The name of the dimension to filter on.</p>
    pub fn dimension_name(&self) -> ::std::option::Option<&str> {
        self.dimension_name.as_deref()
    }
    /// <p>The list of values for the dimension specified in DimensionName that you want to filter on.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dimension_value_list.is_none()`.
    pub fn dimension_value_list(&self) -> &[::std::string::String] {
        self.dimension_value_list.as_deref().unwrap_or_default()
    }
}
impl DimensionFilter {
    /// Creates a new builder-style object to manufacture [`DimensionFilter`](crate::types::DimensionFilter).
    pub fn builder() -> crate::types::builders::DimensionFilterBuilder {
        crate::types::builders::DimensionFilterBuilder::default()
    }
}

/// A builder for [`DimensionFilter`](crate::types::DimensionFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DimensionFilterBuilder {
    pub(crate) dimension_name: ::std::option::Option<::std::string::String>,
    pub(crate) dimension_value_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DimensionFilterBuilder {
    /// <p>The name of the dimension to filter on.</p>
    pub fn dimension_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dimension_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dimension to filter on.</p>
    pub fn set_dimension_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dimension_name = input;
        self
    }
    /// <p>The name of the dimension to filter on.</p>
    pub fn get_dimension_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dimension_name
    }
    /// Appends an item to `dimension_value_list`.
    ///
    /// To override the contents of this collection use [`set_dimension_value_list`](Self::set_dimension_value_list).
    ///
    /// <p>The list of values for the dimension specified in DimensionName that you want to filter on.</p>
    pub fn dimension_value_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dimension_value_list.unwrap_or_default();
        v.push(input.into());
        self.dimension_value_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of values for the dimension specified in DimensionName that you want to filter on.</p>
    pub fn set_dimension_value_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dimension_value_list = input;
        self
    }
    /// <p>The list of values for the dimension specified in DimensionName that you want to filter on.</p>
    pub fn get_dimension_value_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dimension_value_list
    }
    /// Consumes the builder and constructs a [`DimensionFilter`](crate::types::DimensionFilter).
    pub fn build(self) -> crate::types::DimensionFilter {
        crate::types::DimensionFilter {
            dimension_name: self.dimension_name,
            dimension_value_list: self.dimension_value_list,
        }
    }
}
