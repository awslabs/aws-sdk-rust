// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A detected JSON format descriptor.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectedJsonFormatDescriptor {
    /// <p>The format's file compression.</p>
    #[doc(hidden)]
    pub file_compression: std::option::Option<crate::types::DetectedField>,
    /// <p>The format's character set.</p>
    #[doc(hidden)]
    pub charset: std::option::Option<crate::types::DetectedField>,
}
impl DetectedJsonFormatDescriptor {
    /// <p>The format's file compression.</p>
    pub fn file_compression(&self) -> std::option::Option<&crate::types::DetectedField> {
        self.file_compression.as_ref()
    }
    /// <p>The format's character set.</p>
    pub fn charset(&self) -> std::option::Option<&crate::types::DetectedField> {
        self.charset.as_ref()
    }
}
impl DetectedJsonFormatDescriptor {
    /// Creates a new builder-style object to manufacture [`DetectedJsonFormatDescriptor`](crate::types::DetectedJsonFormatDescriptor).
    pub fn builder() -> crate::types::builders::DetectedJsonFormatDescriptorBuilder {
        crate::types::builders::DetectedJsonFormatDescriptorBuilder::default()
    }
}

/// A builder for [`DetectedJsonFormatDescriptor`](crate::types::DetectedJsonFormatDescriptor).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetectedJsonFormatDescriptorBuilder {
    pub(crate) file_compression: std::option::Option<crate::types::DetectedField>,
    pub(crate) charset: std::option::Option<crate::types::DetectedField>,
}
impl DetectedJsonFormatDescriptorBuilder {
    /// <p>The format's file compression.</p>
    pub fn file_compression(mut self, input: crate::types::DetectedField) -> Self {
        self.file_compression = Some(input);
        self
    }
    /// <p>The format's file compression.</p>
    pub fn set_file_compression(
        mut self,
        input: std::option::Option<crate::types::DetectedField>,
    ) -> Self {
        self.file_compression = input;
        self
    }
    /// <p>The format's character set.</p>
    pub fn charset(mut self, input: crate::types::DetectedField) -> Self {
        self.charset = Some(input);
        self
    }
    /// <p>The format's character set.</p>
    pub fn set_charset(mut self, input: std::option::Option<crate::types::DetectedField>) -> Self {
        self.charset = input;
        self
    }
    /// Consumes the builder and constructs a [`DetectedJsonFormatDescriptor`](crate::types::DetectedJsonFormatDescriptor).
    pub fn build(self) -> crate::types::DetectedJsonFormatDescriptor {
        crate::types::DetectedJsonFormatDescriptor {
            file_compression: self.file_compression,
            charset: self.charset,
        }
    }
}
