// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about feedback submitted for an anomalous metric.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimeSeriesFeedback {
    /// <p>The ID of the metric.</p>
    #[doc(hidden)]
    pub time_series_id: std::option::Option<std::string::String>,
    /// <p>Feedback on whether the metric is a legitimate anomaly.</p>
    #[doc(hidden)]
    pub is_anomaly: std::option::Option<bool>,
}
impl TimeSeriesFeedback {
    /// <p>The ID of the metric.</p>
    pub fn time_series_id(&self) -> std::option::Option<&str> {
        self.time_series_id.as_deref()
    }
    /// <p>Feedback on whether the metric is a legitimate anomaly.</p>
    pub fn is_anomaly(&self) -> std::option::Option<bool> {
        self.is_anomaly
    }
}
impl TimeSeriesFeedback {
    /// Creates a new builder-style object to manufacture [`TimeSeriesFeedback`](crate::types::TimeSeriesFeedback).
    pub fn builder() -> crate::types::builders::TimeSeriesFeedbackBuilder {
        crate::types::builders::TimeSeriesFeedbackBuilder::default()
    }
}

/// A builder for [`TimeSeriesFeedback`](crate::types::TimeSeriesFeedback).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimeSeriesFeedbackBuilder {
    pub(crate) time_series_id: std::option::Option<std::string::String>,
    pub(crate) is_anomaly: std::option::Option<bool>,
}
impl TimeSeriesFeedbackBuilder {
    /// <p>The ID of the metric.</p>
    pub fn time_series_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.time_series_id = Some(input.into());
        self
    }
    /// <p>The ID of the metric.</p>
    pub fn set_time_series_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.time_series_id = input;
        self
    }
    /// <p>Feedback on whether the metric is a legitimate anomaly.</p>
    pub fn is_anomaly(mut self, input: bool) -> Self {
        self.is_anomaly = Some(input);
        self
    }
    /// <p>Feedback on whether the metric is a legitimate anomaly.</p>
    pub fn set_is_anomaly(mut self, input: std::option::Option<bool>) -> Self {
        self.is_anomaly = input;
        self
    }
    /// Consumes the builder and constructs a [`TimeSeriesFeedback`](crate::types::TimeSeriesFeedback).
    pub fn build(self) -> crate::types::TimeSeriesFeedback {
        crate::types::TimeSeriesFeedback {
            time_series_id: self.time_series_id,
            is_anomaly: self.is_anomaly,
        }
    }
}
