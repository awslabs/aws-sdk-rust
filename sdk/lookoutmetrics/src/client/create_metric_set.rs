// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateMetricSet`](crate::client::fluent_builders::CreateMetricSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`anomaly_detector_arn(impl Into<String>)`](crate::client::fluent_builders::CreateMetricSet::anomaly_detector_arn) / [`set_anomaly_detector_arn(Option<String>)`](crate::client::fluent_builders::CreateMetricSet::set_anomaly_detector_arn): <p>The ARN of the anomaly detector that will use the dataset.</p>
    ///   - [`metric_set_name(impl Into<String>)`](crate::client::fluent_builders::CreateMetricSet::metric_set_name) / [`set_metric_set_name(Option<String>)`](crate::client::fluent_builders::CreateMetricSet::set_metric_set_name): <p>The name of the dataset.</p>
    ///   - [`metric_set_description(impl Into<String>)`](crate::client::fluent_builders::CreateMetricSet::metric_set_description) / [`set_metric_set_description(Option<String>)`](crate::client::fluent_builders::CreateMetricSet::set_metric_set_description): <p>A description of the dataset you are creating.</p>
    ///   - [`metric_list(Vec<Metric>)`](crate::client::fluent_builders::CreateMetricSet::metric_list) / [`set_metric_list(Option<Vec<Metric>>)`](crate::client::fluent_builders::CreateMetricSet::set_metric_list): <p>A list of metrics that the dataset will contain.</p>
    ///   - [`offset(i32)`](crate::client::fluent_builders::CreateMetricSet::offset) / [`set_offset(Option<i32>)`](crate::client::fluent_builders::CreateMetricSet::set_offset): <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.</p>
    ///   - [`timestamp_column(TimestampColumn)`](crate::client::fluent_builders::CreateMetricSet::timestamp_column) / [`set_timestamp_column(Option<TimestampColumn>)`](crate::client::fluent_builders::CreateMetricSet::set_timestamp_column): <p>Contains information about the column used for tracking time in your source data.</p>
    ///   - [`dimension_list(Vec<String>)`](crate::client::fluent_builders::CreateMetricSet::dimension_list) / [`set_dimension_list(Option<Vec<String>>)`](crate::client::fluent_builders::CreateMetricSet::set_dimension_list): <p>A list of the fields you want to treat as dimensions.</p>
    ///   - [`metric_set_frequency(Frequency)`](crate::client::fluent_builders::CreateMetricSet::metric_set_frequency) / [`set_metric_set_frequency(Option<Frequency>)`](crate::client::fluent_builders::CreateMetricSet::set_metric_set_frequency): <p>The frequency with which the source data will be analyzed for anomalies.</p>
    ///   - [`metric_source(MetricSource)`](crate::client::fluent_builders::CreateMetricSet::metric_source) / [`set_metric_source(Option<MetricSource>)`](crate::client::fluent_builders::CreateMetricSet::set_metric_source): <p>Contains information about how the source data should be interpreted.</p>
    ///   - [`timezone(impl Into<String>)`](crate::client::fluent_builders::CreateMetricSet::timezone) / [`set_timezone(Option<String>)`](crate::client::fluent_builders::CreateMetricSet::set_timezone): <p>The time zone in which your source data was recorded.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateMetricSet::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateMetricSet::set_tags): <p>A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the dataset.</p>
    ///   - [`dimension_filter_list(Vec<MetricSetDimensionFilter>)`](crate::client::fluent_builders::CreateMetricSet::dimension_filter_list) / [`set_dimension_filter_list(Option<Vec<MetricSetDimensionFilter>>)`](crate::client::fluent_builders::CreateMetricSet::set_dimension_filter_list): <p>A list of filters that specify which data is kept for anomaly detection.</p>
    /// - On success, responds with [`CreateMetricSetOutput`](crate::output::CreateMetricSetOutput) with field(s):
    ///   - [`metric_set_arn(Option<String>)`](crate::output::CreateMetricSetOutput::metric_set_arn): <p>The ARN of the dataset.</p>
    /// - On failure, responds with [`SdkError<CreateMetricSetError>`](crate::error::CreateMetricSetError)
    pub fn create_metric_set(&self) -> crate::client::fluent_builders::CreateMetricSet {
        crate::client::fluent_builders::CreateMetricSet::new(self.handle.clone())
    }
}
