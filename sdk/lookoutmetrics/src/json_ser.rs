// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_activate_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ActivateAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_1);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_back_test_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BackTestAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_2);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_alert_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAlertInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.action {
        let mut object_4 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_action(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.alert_description {
        object.key("AlertDescription").string(var_5);
    }
    if let Some(var_6) = &input.alert_name {
        object.key("AlertName").string(var_6);
    }
    {
        object.key("AlertSensitivityThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.alert_sensitivity_threshold).into()),
        );
    }
    if let Some(var_7) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_7);
    }
    if let Some(var_8) = &input.tags {
        let mut object_9 = object.key("Tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10).string(value_11);
            }
        }
        object_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.anomaly_detector_config {
        let mut object_13 = object.key("AnomalyDetectorConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_detector_config(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.anomaly_detector_description {
        object.key("AnomalyDetectorDescription").string(var_14);
    }
    if let Some(var_15) = &input.anomaly_detector_name {
        object.key("AnomalyDetectorName").string(var_15);
    }
    if let Some(var_16) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_16);
    }
    if let Some(var_17) = &input.tags {
        let mut object_18 = object.key("Tags").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19).string(value_20);
            }
        }
        object_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_metric_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMetricSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_21);
    }
    if let Some(var_22) = &input.dimension_list {
        let mut array_23 = object.key("DimensionList").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24);
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.metric_list {
        let mut array_26 = object.key("MetricList").start_array();
        for item_27 in var_25 {
            {
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    if let Some(var_29) = &input.metric_set_description {
        object.key("MetricSetDescription").string(var_29);
    }
    if let Some(var_30) = &input.metric_set_frequency {
        object.key("MetricSetFrequency").string(var_30.as_str());
    }
    if let Some(var_31) = &input.metric_set_name {
        object.key("MetricSetName").string(var_31);
    }
    if let Some(var_32) = &input.metric_source {
        let mut object_33 = object.key("MetricSource").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_source(&mut object_33, var_32)?;
        object_33.finish();
    }
    if let Some(var_34) = &input.offset {
        object.key("Offset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_34).into()),
        );
    }
    if let Some(var_35) = &input.tags {
        let mut object_36 = object.key("Tags").start_object();
        for (key_37, value_38) in var_35 {
            {
                object_36.key(key_37).string(value_38);
            }
        }
        object_36.finish();
    }
    if let Some(var_39) = &input.timestamp_column {
        let mut object_40 = object.key("TimestampColumn").start_object();
        crate::json_ser::serialize_structure_crate_model_timestamp_column(&mut object_40, var_39)?;
        object_40.finish();
    }
    if let Some(var_41) = &input.timezone {
        object.key("Timezone").string(var_41);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_alert_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlertInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.alert_arn {
        object.key("AlertArn").string(var_42);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_43);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_alert_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlertInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.alert_arn {
        object.key("AlertArn").string(var_44);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_anomaly_detection_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAnomalyDetectionExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_45);
    }
    if let Some(var_46) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_46).into()),
        );
    }
    if let Some(var_47) = &input.next_token {
        object.key("NextToken").string(var_47);
    }
    if let Some(var_48) = &input.timestamp {
        object.key("Timestamp").string(var_48);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_49);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_metric_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMetricSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.metric_set_arn {
        object.key("MetricSetArn").string(var_50);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_anomaly_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAnomalyGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_51);
    }
    if let Some(var_52) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_52);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_53);
    }
    if let Some(var_54) = &input.anomaly_group_time_series_feedback {
        let mut object_55 = object.key("AnomalyGroupTimeSeriesFeedback").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_group_time_series(
            &mut object_55,
            var_54,
        )?;
        object_55.finish();
    }
    if let Some(var_56) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_56).into()),
        );
    }
    if let Some(var_57) = &input.next_token {
        object.key("NextToken").string(var_57);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_sample_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSampleDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.s3_source_config {
        let mut object_59 = object.key("S3SourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_sample_data_s3_source_config(
            &mut object_59,
            var_58,
        )?;
        object_59.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_alerts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAlertsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_60);
    }
    if let Some(var_61) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_61).into()),
        );
    }
    if let Some(var_62) = &input.next_token {
        object.key("NextToken").string(var_62);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_anomaly_detectors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyDetectorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_63).into()),
        );
    }
    if let Some(var_64) = &input.next_token {
        object.key("NextToken").string(var_64);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_anomaly_group_related_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyGroupRelatedMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_65);
    }
    if let Some(var_66) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_66);
    }
    if let Some(var_67) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_67).into()),
        );
    }
    if let Some(var_68) = &input.next_token {
        object.key("NextToken").string(var_68);
    }
    if let Some(var_69) = &input.relationship_type_filter {
        object.key("RelationshipTypeFilter").string(var_69.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_anomaly_group_summaries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyGroupSummariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_70);
    }
    if let Some(var_71) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_71).into()),
        );
    }
    if let Some(var_72) = &input.next_token {
        object.key("NextToken").string(var_72);
    }
    {
        object.key("SensitivityThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sensitivity_threshold).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_anomaly_group_time_series_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyGroupTimeSeriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_73);
    }
    if let Some(var_74) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_74);
    }
    if let Some(var_75) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_75).into()),
        );
    }
    if let Some(var_76) = &input.metric_name {
        object.key("MetricName").string(var_76);
    }
    if let Some(var_77) = &input.next_token {
        object.key("NextToken").string(var_77);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_metric_sets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMetricSetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_78);
    }
    if let Some(var_79) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_79).into()),
        );
    }
    if let Some(var_80) = &input.next_token {
        object.key("NextToken").string(var_80);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_81);
    }
    if let Some(var_82) = &input.anomaly_group_time_series_feedback {
        let mut object_83 = object.key("AnomalyGroupTimeSeriesFeedback").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_group_time_series_feedback(
            &mut object_83,
            var_82,
        )?;
        object_83.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_84) = &input.tags {
        let mut object_85 = object.key("tags").start_object();
        for (key_86, value_87) in var_84 {
            {
                object_85.key(key_86).string(value_87);
            }
        }
        object_85.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_88);
    }
    if let Some(var_89) = &input.anomaly_detector_config {
        let mut object_90 = object.key("AnomalyDetectorConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_detector_config(
            &mut object_90,
            var_89,
        )?;
        object_90.finish();
    }
    if let Some(var_91) = &input.anomaly_detector_description {
        object.key("AnomalyDetectorDescription").string(var_91);
    }
    if let Some(var_92) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_92);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_metric_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMetricSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.dimension_list {
        let mut array_94 = object.key("DimensionList").start_array();
        for item_95 in var_93 {
            {
                array_94.value().string(item_95);
            }
        }
        array_94.finish();
    }
    if let Some(var_96) = &input.metric_list {
        let mut array_97 = object.key("MetricList").start_array();
        for item_98 in var_96 {
            {
                let mut object_99 = array_97.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric(&mut object_99, item_98)?;
                object_99.finish();
            }
        }
        array_97.finish();
    }
    if let Some(var_100) = &input.metric_set_arn {
        object.key("MetricSetArn").string(var_100);
    }
    if let Some(var_101) = &input.metric_set_description {
        object.key("MetricSetDescription").string(var_101);
    }
    if let Some(var_102) = &input.metric_set_frequency {
        object.key("MetricSetFrequency").string(var_102.as_str());
    }
    if let Some(var_103) = &input.metric_source {
        let mut object_104 = object.key("MetricSource").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_source(&mut object_104, var_103)?;
        object_104.finish();
    }
    if let Some(var_105) = &input.offset {
        object.key("Offset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_105).into()),
        );
    }
    if let Some(var_106) = &input.timestamp_column {
        let mut object_107 = object.key("TimestampColumn").start_object();
        crate::json_ser::serialize_structure_crate_model_timestamp_column(
            &mut object_107,
            var_106,
        )?;
        object_107.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.sns_configuration {
        let mut object_109 = object.key("SNSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sns_configuration(
            &mut object_109,
            var_108,
        )?;
        object_109.finish();
    }
    if let Some(var_110) = &input.lambda_configuration {
        let mut object_111 = object.key("LambdaConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_configuration(
            &mut object_111,
            var_110,
        )?;
        object_111.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anomaly_detector_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyDetectorConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_112) = &input.anomaly_detector_frequency {
        object
            .key("AnomalyDetectorFrequency")
            .string(var_112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Metric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.metric_name {
        object.key("MetricName").string(var_113);
    }
    if let Some(var_114) = &input.aggregation_function {
        object.key("AggregationFunction").string(var_114.as_str());
    }
    if let Some(var_115) = &input.namespace {
        object.key("Namespace").string(var_115);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.s3_source_config {
        let mut object_117 = object.key("S3SourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_config(
            &mut object_117,
            var_116,
        )?;
        object_117.finish();
    }
    if let Some(var_118) = &input.app_flow_config {
        let mut object_119 = object.key("AppFlowConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_app_flow_config(&mut object_119, var_118)?;
        object_119.finish();
    }
    if let Some(var_120) = &input.cloud_watch_config {
        let mut object_121 = object.key("CloudWatchConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_config(
            &mut object_121,
            var_120,
        )?;
        object_121.finish();
    }
    if let Some(var_122) = &input.rds_source_config {
        let mut object_123 = object.key("RDSSourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_rds_source_config(
            &mut object_123,
            var_122,
        )?;
        object_123.finish();
    }
    if let Some(var_124) = &input.redshift_source_config {
        let mut object_125 = object.key("RedshiftSourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_source_config(
            &mut object_125,
            var_124,
        )?;
        object_125.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_timestamp_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestampColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.column_name {
        object.key("ColumnName").string(var_126);
    }
    if let Some(var_127) = &input.column_format {
        object.key("ColumnFormat").string(var_127);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anomaly_group_time_series(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyGroupTimeSeries,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_128);
    }
    if let Some(var_129) = &input.time_series_id {
        object.key("TimeSeriesId").string(var_129);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sample_data_s3_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleDataS3SourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.role_arn {
        object.key("RoleArn").string(var_130);
    }
    if let Some(var_131) = &input.templated_path_list {
        let mut array_132 = object.key("TemplatedPathList").start_array();
        for item_133 in var_131 {
            {
                array_132.value().string(item_133);
            }
        }
        array_132.finish();
    }
    if let Some(var_134) = &input.historical_data_path_list {
        let mut array_135 = object.key("HistoricalDataPathList").start_array();
        for item_136 in var_134 {
            {
                array_135.value().string(item_136);
            }
        }
        array_135.finish();
    }
    if let Some(var_137) = &input.file_format_descriptor {
        let mut object_138 = object.key("FileFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_file_format_descriptor(
            &mut object_138,
            var_137,
        )?;
        object_138.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anomaly_group_time_series_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyGroupTimeSeriesFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_139);
    }
    if let Some(var_140) = &input.time_series_id {
        object.key("TimeSeriesId").string(var_140);
    }
    if let Some(var_141) = &input.is_anomaly {
        object.key("IsAnomaly").boolean(*var_141);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sns_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.role_arn {
        object.key("RoleArn").string(var_142);
    }
    if let Some(var_143) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_143);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.role_arn {
        object.key("RoleArn").string(var_144);
    }
    if let Some(var_145) = &input.lambda_arn {
        object.key("LambdaArn").string(var_145);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3SourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.role_arn {
        object.key("RoleArn").string(var_146);
    }
    if let Some(var_147) = &input.templated_path_list {
        let mut array_148 = object.key("TemplatedPathList").start_array();
        for item_149 in var_147 {
            {
                array_148.value().string(item_149);
            }
        }
        array_148.finish();
    }
    if let Some(var_150) = &input.historical_data_path_list {
        let mut array_151 = object.key("HistoricalDataPathList").start_array();
        for item_152 in var_150 {
            {
                array_151.value().string(item_152);
            }
        }
        array_151.finish();
    }
    if let Some(var_153) = &input.file_format_descriptor {
        let mut object_154 = object.key("FileFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_file_format_descriptor(
            &mut object_154,
            var_153,
        )?;
        object_154.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_app_flow_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppFlowConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.role_arn {
        object.key("RoleArn").string(var_155);
    }
    if let Some(var_156) = &input.flow_name {
        object.key("FlowName").string(var_156);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.role_arn {
        object.key("RoleArn").string(var_157);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rds_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RdsSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.db_instance_identifier {
        object.key("DBInstanceIdentifier").string(var_158);
    }
    if let Some(var_159) = &input.database_host {
        object.key("DatabaseHost").string(var_159);
    }
    if let Some(var_160) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    if let Some(var_161) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_161);
    }
    if let Some(var_162) = &input.database_name {
        object.key("DatabaseName").string(var_162);
    }
    if let Some(var_163) = &input.table_name {
        object.key("TableName").string(var_163);
    }
    if let Some(var_164) = &input.role_arn {
        object.key("RoleArn").string(var_164);
    }
    if let Some(var_165) = &input.vpc_configuration {
        let mut object_166 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_configuration(
            &mut object_166,
            var_165,
        )?;
        object_166.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_167);
    }
    if let Some(var_168) = &input.database_host {
        object.key("DatabaseHost").string(var_168);
    }
    if let Some(var_169) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_169).into()),
        );
    }
    if let Some(var_170) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_170);
    }
    if let Some(var_171) = &input.database_name {
        object.key("DatabaseName").string(var_171);
    }
    if let Some(var_172) = &input.table_name {
        object.key("TableName").string(var_172);
    }
    if let Some(var_173) = &input.role_arn {
        object.key("RoleArn").string(var_173);
    }
    if let Some(var_174) = &input.vpc_configuration {
        let mut object_175 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_configuration(
            &mut object_175,
            var_174,
        )?;
        object_175.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_format_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileFormatDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.csv_format_descriptor {
        let mut object_177 = object.key("CsvFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_csv_format_descriptor(
            &mut object_177,
            var_176,
        )?;
        object_177.finish();
    }
    if let Some(var_178) = &input.json_format_descriptor {
        let mut object_179 = object.key("JsonFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_json_format_descriptor(
            &mut object_179,
            var_178,
        )?;
        object_179.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.subnet_id_list {
        let mut array_181 = object.key("SubnetIdList").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182);
            }
        }
        array_181.finish();
    }
    if let Some(var_183) = &input.security_group_id_list {
        let mut array_184 = object.key("SecurityGroupIdList").start_array();
        for item_185 in var_183 {
            {
                array_184.value().string(item_185);
            }
        }
        array_184.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_csv_format_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CsvFormatDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.file_compression {
        object.key("FileCompression").string(var_186.as_str());
    }
    if let Some(var_187) = &input.charset {
        object.key("Charset").string(var_187);
    }
    if let Some(var_188) = &input.contains_header {
        object.key("ContainsHeader").boolean(*var_188);
    }
    if let Some(var_189) = &input.delimiter {
        object.key("Delimiter").string(var_189);
    }
    if let Some(var_190) = &input.header_list {
        let mut array_191 = object.key("HeaderList").start_array();
        for item_192 in var_190 {
            {
                array_191.value().string(item_192);
            }
        }
        array_191.finish();
    }
    if let Some(var_193) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_193);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_json_format_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonFormatDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_194) = &input.file_compression {
        object.key("FileCompression").string(var_194.as_str());
    }
    if let Some(var_195) = &input.charset {
        object.key("Charset").string(var_195);
    }
    Ok(())
}
