// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_activate_anomaly_detector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ActivateAnomalyDetectorInput,
) {
    if let Some(var_1) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_1);
    }
}

pub fn serialize_structure_back_test_anomaly_detector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BackTestAnomalyDetectorInput,
) {
    if let Some(var_2) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_2);
    }
}

pub fn serialize_structure_create_alert_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAlertInput,
) {
    if let Some(var_3) = &input.action {
        let mut object_4 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_action(&mut object_4, var_3);
        object_4.finish();
    }
    if let Some(var_5) = &input.alert_description {
        object.key("AlertDescription").string(var_5);
    }
    if let Some(var_6) = &input.alert_name {
        object.key("AlertName").string(var_6);
    }
    {
        object.key("AlertSensitivityThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.alert_sensitivity_threshold).into()),
        );
    }
    if let Some(var_7) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_7);
    }
    if let Some(var_8) = &input.tags {
        let mut object_9 = object.key("Tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10).string(value_11);
            }
        }
        object_9.finish();
    }
}

pub fn serialize_structure_create_anomaly_detector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnomalyDetectorInput,
) {
    if let Some(var_12) = &input.anomaly_detector_config {
        let mut object_13 = object.key("AnomalyDetectorConfig").start_object();
        crate::json_ser::serialize_structure_anomaly_detector_config(&mut object_13, var_12);
        object_13.finish();
    }
    if let Some(var_14) = &input.anomaly_detector_description {
        object.key("AnomalyDetectorDescription").string(var_14);
    }
    if let Some(var_15) = &input.anomaly_detector_name {
        object.key("AnomalyDetectorName").string(var_15);
    }
    if let Some(var_16) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_16);
    }
    if let Some(var_17) = &input.tags {
        let mut object_18 = object.key("Tags").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19).string(value_20);
            }
        }
        object_18.finish();
    }
}

pub fn serialize_structure_create_metric_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMetricSetInput,
) {
    if let Some(var_21) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_21);
    }
    if let Some(var_22) = &input.dimension_list {
        let mut array_23 = object.key("DimensionList").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24);
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.metric_list {
        let mut array_26 = object.key("MetricList").start_array();
        for item_27 in var_25 {
            {
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_metric(&mut object_28, item_27);
                object_28.finish();
            }
        }
        array_26.finish();
    }
    if let Some(var_29) = &input.metric_set_description {
        object.key("MetricSetDescription").string(var_29);
    }
    if let Some(var_30) = &input.metric_set_frequency {
        object.key("MetricSetFrequency").string(var_30.as_str());
    }
    if let Some(var_31) = &input.metric_set_name {
        object.key("MetricSetName").string(var_31);
    }
    if let Some(var_32) = &input.metric_source {
        let mut object_33 = object.key("MetricSource").start_object();
        crate::json_ser::serialize_structure_metric_source(&mut object_33, var_32);
        object_33.finish();
    }
    if let Some(var_34) = &input.offset {
        object.key("Offset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_34).into()),
        );
    }
    if let Some(var_35) = &input.tags {
        let mut object_36 = object.key("Tags").start_object();
        for (key_37, value_38) in var_35 {
            {
                object_36.key(key_37).string(value_38);
            }
        }
        object_36.finish();
    }
    if let Some(var_39) = &input.timestamp_column {
        let mut object_40 = object.key("TimestampColumn").start_object();
        crate::json_ser::serialize_structure_timestamp_column(&mut object_40, var_39);
        object_40.finish();
    }
    if let Some(var_41) = &input.timezone {
        object.key("Timezone").string(var_41);
    }
}

pub fn serialize_structure_delete_alert_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlertInput,
) {
    if let Some(var_42) = &input.alert_arn {
        object.key("AlertArn").string(var_42);
    }
}

pub fn serialize_structure_delete_anomaly_detector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAnomalyDetectorInput,
) {
    if let Some(var_43) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_43);
    }
}

pub fn serialize_structure_describe_alert_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlertInput,
) {
    if let Some(var_44) = &input.alert_arn {
        object.key("AlertArn").string(var_44);
    }
}

pub fn serialize_structure_describe_anomaly_detection_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAnomalyDetectionExecutionsInput,
) {
    if let Some(var_45) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_45);
    }
    if let Some(var_46) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_46).into()),
        );
    }
    if let Some(var_47) = &input.next_token {
        object.key("NextToken").string(var_47);
    }
    if let Some(var_48) = &input.timestamp {
        object.key("Timestamp").string(var_48);
    }
}

pub fn serialize_structure_describe_anomaly_detector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAnomalyDetectorInput,
) {
    if let Some(var_49) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_49);
    }
}

pub fn serialize_structure_describe_metric_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMetricSetInput,
) {
    if let Some(var_50) = &input.metric_set_arn {
        object.key("MetricSetArn").string(var_50);
    }
}

pub fn serialize_structure_get_anomaly_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAnomalyGroupInput,
) {
    if let Some(var_51) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_51);
    }
    if let Some(var_52) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_52);
    }
}

pub fn serialize_structure_get_feedback_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFeedbackInput,
) {
    if let Some(var_53) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_53);
    }
    if let Some(var_54) = &input.anomaly_group_time_series_feedback {
        let mut object_55 = object.key("AnomalyGroupTimeSeriesFeedback").start_object();
        crate::json_ser::serialize_structure_anomaly_group_time_series(&mut object_55, var_54);
        object_55.finish();
    }
    if let Some(var_56) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_56).into()),
        );
    }
    if let Some(var_57) = &input.next_token {
        object.key("NextToken").string(var_57);
    }
}

pub fn serialize_structure_get_sample_data_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSampleDataInput,
) {
    if let Some(var_58) = &input.s3_source_config {
        let mut object_59 = object.key("S3SourceConfig").start_object();
        crate::json_ser::serialize_structure_sample_data_s3_source_config(&mut object_59, var_58);
        object_59.finish();
    }
}

pub fn serialize_structure_list_alerts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAlertsInput,
) {
    if let Some(var_60) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_60);
    }
    if let Some(var_61) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_61).into()),
        );
    }
    if let Some(var_62) = &input.next_token {
        object.key("NextToken").string(var_62);
    }
}

pub fn serialize_structure_list_anomaly_detectors_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyDetectorsInput,
) {
    if let Some(var_63) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_63).into()),
        );
    }
    if let Some(var_64) = &input.next_token {
        object.key("NextToken").string(var_64);
    }
}

pub fn serialize_structure_list_anomaly_group_summaries_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyGroupSummariesInput,
) {
    if let Some(var_65) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_65);
    }
    if let Some(var_66) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_66).into()),
        );
    }
    if let Some(var_67) = &input.next_token {
        object.key("NextToken").string(var_67);
    }
    {
        object.key("SensitivityThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.sensitivity_threshold).into()),
        );
    }
}

pub fn serialize_structure_list_anomaly_group_time_series_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyGroupTimeSeriesInput,
) {
    if let Some(var_68) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_68);
    }
    if let Some(var_69) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_69);
    }
    if let Some(var_70) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_70).into()),
        );
    }
    if let Some(var_71) = &input.metric_name {
        object.key("MetricName").string(var_71);
    }
    if let Some(var_72) = &input.next_token {
        object.key("NextToken").string(var_72);
    }
}

pub fn serialize_structure_list_metric_sets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMetricSetsInput,
) {
    if let Some(var_73) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_73);
    }
    if let Some(var_74) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_74).into()),
        );
    }
    if let Some(var_75) = &input.next_token {
        object.key("NextToken").string(var_75);
    }
}

pub fn serialize_structure_put_feedback_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutFeedbackInput,
) {
    if let Some(var_76) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_76);
    }
    if let Some(var_77) = &input.anomaly_group_time_series_feedback {
        let mut object_78 = object.key("AnomalyGroupTimeSeriesFeedback").start_object();
        crate::json_ser::serialize_structure_anomaly_group_time_series_feedback(
            &mut object_78,
            var_77,
        );
        object_78.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_79) = &input.tags {
        let mut object_80 = object.key("tags").start_object();
        for (key_81, value_82) in var_79 {
            {
                object_80.key(key_81).string(value_82);
            }
        }
        object_80.finish();
    }
}

pub fn serialize_structure_update_anomaly_detector_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnomalyDetectorInput,
) {
    if let Some(var_83) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_83);
    }
    if let Some(var_84) = &input.anomaly_detector_config {
        let mut object_85 = object.key("AnomalyDetectorConfig").start_object();
        crate::json_ser::serialize_structure_anomaly_detector_config(&mut object_85, var_84);
        object_85.finish();
    }
    if let Some(var_86) = &input.anomaly_detector_description {
        object.key("AnomalyDetectorDescription").string(var_86);
    }
    if let Some(var_87) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_87);
    }
}

pub fn serialize_structure_update_metric_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMetricSetInput,
) {
    if let Some(var_88) = &input.dimension_list {
        let mut array_89 = object.key("DimensionList").start_array();
        for item_90 in var_88 {
            {
                array_89.value().string(item_90);
            }
        }
        array_89.finish();
    }
    if let Some(var_91) = &input.metric_list {
        let mut array_92 = object.key("MetricList").start_array();
        for item_93 in var_91 {
            {
                let mut object_94 = array_92.value().start_object();
                crate::json_ser::serialize_structure_metric(&mut object_94, item_93);
                object_94.finish();
            }
        }
        array_92.finish();
    }
    if let Some(var_95) = &input.metric_set_arn {
        object.key("MetricSetArn").string(var_95);
    }
    if let Some(var_96) = &input.metric_set_description {
        object.key("MetricSetDescription").string(var_96);
    }
    if let Some(var_97) = &input.metric_set_frequency {
        object.key("MetricSetFrequency").string(var_97.as_str());
    }
    if let Some(var_98) = &input.metric_source {
        let mut object_99 = object.key("MetricSource").start_object();
        crate::json_ser::serialize_structure_metric_source(&mut object_99, var_98);
        object_99.finish();
    }
    if let Some(var_100) = &input.offset {
        object.key("Offset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_100).into()),
        );
    }
    if let Some(var_101) = &input.timestamp_column {
        let mut object_102 = object.key("TimestampColumn").start_object();
        crate::json_ser::serialize_structure_timestamp_column(&mut object_102, var_101);
        object_102.finish();
    }
}

pub fn serialize_structure_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) {
    if let Some(var_103) = &input.sns_configuration {
        let mut object_104 = object.key("SNSConfiguration").start_object();
        crate::json_ser::serialize_structure_sns_configuration(&mut object_104, var_103);
        object_104.finish();
    }
    if let Some(var_105) = &input.lambda_configuration {
        let mut object_106 = object.key("LambdaConfiguration").start_object();
        crate::json_ser::serialize_structure_lambda_configuration(&mut object_106, var_105);
        object_106.finish();
    }
}

pub fn serialize_structure_anomaly_detector_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyDetectorConfig,
) {
    if let Some(var_107) = &input.anomaly_detector_frequency {
        object
            .key("AnomalyDetectorFrequency")
            .string(var_107.as_str());
    }
}

pub fn serialize_structure_metric(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Metric,
) {
    if let Some(var_108) = &input.metric_name {
        object.key("MetricName").string(var_108);
    }
    if let Some(var_109) = &input.aggregation_function {
        object.key("AggregationFunction").string(var_109.as_str());
    }
    if let Some(var_110) = &input.namespace {
        object.key("Namespace").string(var_110);
    }
}

pub fn serialize_structure_metric_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricSource,
) {
    if let Some(var_111) = &input.s3_source_config {
        let mut object_112 = object.key("S3SourceConfig").start_object();
        crate::json_ser::serialize_structure_s3_source_config(&mut object_112, var_111);
        object_112.finish();
    }
    if let Some(var_113) = &input.app_flow_config {
        let mut object_114 = object.key("AppFlowConfig").start_object();
        crate::json_ser::serialize_structure_app_flow_config(&mut object_114, var_113);
        object_114.finish();
    }
    if let Some(var_115) = &input.cloud_watch_config {
        let mut object_116 = object.key("CloudWatchConfig").start_object();
        crate::json_ser::serialize_structure_cloud_watch_config(&mut object_116, var_115);
        object_116.finish();
    }
    if let Some(var_117) = &input.rds_source_config {
        let mut object_118 = object.key("RDSSourceConfig").start_object();
        crate::json_ser::serialize_structure_rds_source_config(&mut object_118, var_117);
        object_118.finish();
    }
    if let Some(var_119) = &input.redshift_source_config {
        let mut object_120 = object.key("RedshiftSourceConfig").start_object();
        crate::json_ser::serialize_structure_redshift_source_config(&mut object_120, var_119);
        object_120.finish();
    }
}

pub fn serialize_structure_timestamp_column(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestampColumn,
) {
    if let Some(var_121) = &input.column_name {
        object.key("ColumnName").string(var_121);
    }
    if let Some(var_122) = &input.column_format {
        object.key("ColumnFormat").string(var_122);
    }
}

pub fn serialize_structure_anomaly_group_time_series(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyGroupTimeSeries,
) {
    if let Some(var_123) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_123);
    }
    if let Some(var_124) = &input.time_series_id {
        object.key("TimeSeriesId").string(var_124);
    }
}

pub fn serialize_structure_sample_data_s3_source_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleDataS3SourceConfig,
) {
    if let Some(var_125) = &input.role_arn {
        object.key("RoleArn").string(var_125);
    }
    if let Some(var_126) = &input.templated_path_list {
        let mut array_127 = object.key("TemplatedPathList").start_array();
        for item_128 in var_126 {
            {
                array_127.value().string(item_128);
            }
        }
        array_127.finish();
    }
    if let Some(var_129) = &input.historical_data_path_list {
        let mut array_130 = object.key("HistoricalDataPathList").start_array();
        for item_131 in var_129 {
            {
                array_130.value().string(item_131);
            }
        }
        array_130.finish();
    }
    if let Some(var_132) = &input.file_format_descriptor {
        let mut object_133 = object.key("FileFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_file_format_descriptor(&mut object_133, var_132);
        object_133.finish();
    }
}

pub fn serialize_structure_anomaly_group_time_series_feedback(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyGroupTimeSeriesFeedback,
) {
    if let Some(var_134) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_134);
    }
    if let Some(var_135) = &input.time_series_id {
        object.key("TimeSeriesId").string(var_135);
    }
    if let Some(var_136) = &input.is_anomaly {
        object.key("IsAnomaly").boolean(*var_136);
    }
}

pub fn serialize_structure_sns_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnsConfiguration,
) {
    if let Some(var_137) = &input.role_arn {
        object.key("RoleArn").string(var_137);
    }
    if let Some(var_138) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_138);
    }
}

pub fn serialize_structure_lambda_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaConfiguration,
) {
    if let Some(var_139) = &input.role_arn {
        object.key("RoleArn").string(var_139);
    }
    if let Some(var_140) = &input.lambda_arn {
        object.key("LambdaArn").string(var_140);
    }
}

pub fn serialize_structure_s3_source_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3SourceConfig,
) {
    if let Some(var_141) = &input.role_arn {
        object.key("RoleArn").string(var_141);
    }
    if let Some(var_142) = &input.templated_path_list {
        let mut array_143 = object.key("TemplatedPathList").start_array();
        for item_144 in var_142 {
            {
                array_143.value().string(item_144);
            }
        }
        array_143.finish();
    }
    if let Some(var_145) = &input.historical_data_path_list {
        let mut array_146 = object.key("HistoricalDataPathList").start_array();
        for item_147 in var_145 {
            {
                array_146.value().string(item_147);
            }
        }
        array_146.finish();
    }
    if let Some(var_148) = &input.file_format_descriptor {
        let mut object_149 = object.key("FileFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_file_format_descriptor(&mut object_149, var_148);
        object_149.finish();
    }
}

pub fn serialize_structure_app_flow_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppFlowConfig,
) {
    if let Some(var_150) = &input.role_arn {
        object.key("RoleArn").string(var_150);
    }
    if let Some(var_151) = &input.flow_name {
        object.key("FlowName").string(var_151);
    }
}

pub fn serialize_structure_cloud_watch_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchConfig,
) {
    if let Some(var_152) = &input.role_arn {
        object.key("RoleArn").string(var_152);
    }
}

pub fn serialize_structure_rds_source_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RdsSourceConfig,
) {
    if let Some(var_153) = &input.db_instance_identifier {
        object.key("DBInstanceIdentifier").string(var_153);
    }
    if let Some(var_154) = &input.database_host {
        object.key("DatabaseHost").string(var_154);
    }
    if let Some(var_155) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_155).into()),
        );
    }
    if let Some(var_156) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_156);
    }
    if let Some(var_157) = &input.database_name {
        object.key("DatabaseName").string(var_157);
    }
    if let Some(var_158) = &input.table_name {
        object.key("TableName").string(var_158);
    }
    if let Some(var_159) = &input.role_arn {
        object.key("RoleArn").string(var_159);
    }
    if let Some(var_160) = &input.vpc_configuration {
        let mut object_161 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_vpc_configuration(&mut object_161, var_160);
        object_161.finish();
    }
}

pub fn serialize_structure_redshift_source_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftSourceConfig,
) {
    if let Some(var_162) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_162);
    }
    if let Some(var_163) = &input.database_host {
        object.key("DatabaseHost").string(var_163);
    }
    if let Some(var_164) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_165);
    }
    if let Some(var_166) = &input.database_name {
        object.key("DatabaseName").string(var_166);
    }
    if let Some(var_167) = &input.table_name {
        object.key("TableName").string(var_167);
    }
    if let Some(var_168) = &input.role_arn {
        object.key("RoleArn").string(var_168);
    }
    if let Some(var_169) = &input.vpc_configuration {
        let mut object_170 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_vpc_configuration(&mut object_170, var_169);
        object_170.finish();
    }
}

pub fn serialize_structure_file_format_descriptor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileFormatDescriptor,
) {
    if let Some(var_171) = &input.csv_format_descriptor {
        let mut object_172 = object.key("CsvFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_csv_format_descriptor(&mut object_172, var_171);
        object_172.finish();
    }
    if let Some(var_173) = &input.json_format_descriptor {
        let mut object_174 = object.key("JsonFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_json_format_descriptor(&mut object_174, var_173);
        object_174.finish();
    }
}

pub fn serialize_structure_vpc_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfiguration,
) {
    if let Some(var_175) = &input.subnet_id_list {
        let mut array_176 = object.key("SubnetIdList").start_array();
        for item_177 in var_175 {
            {
                array_176.value().string(item_177);
            }
        }
        array_176.finish();
    }
    if let Some(var_178) = &input.security_group_id_list {
        let mut array_179 = object.key("SecurityGroupIdList").start_array();
        for item_180 in var_178 {
            {
                array_179.value().string(item_180);
            }
        }
        array_179.finish();
    }
}

pub fn serialize_structure_csv_format_descriptor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CsvFormatDescriptor,
) {
    if let Some(var_181) = &input.file_compression {
        object.key("FileCompression").string(var_181.as_str());
    }
    if let Some(var_182) = &input.charset {
        object.key("Charset").string(var_182);
    }
    if let Some(var_183) = &input.contains_header {
        object.key("ContainsHeader").boolean(*var_183);
    }
    if let Some(var_184) = &input.delimiter {
        object.key("Delimiter").string(var_184);
    }
    if let Some(var_185) = &input.header_list {
        let mut array_186 = object.key("HeaderList").start_array();
        for item_187 in var_185 {
            {
                array_186.value().string(item_187);
            }
        }
        array_186.finish();
    }
    if let Some(var_188) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_188);
    }
}

pub fn serialize_structure_json_format_descriptor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonFormatDescriptor,
) {
    if let Some(var_189) = &input.file_compression {
        object.key("FileCompression").string(var_189.as_str());
    }
    if let Some(var_190) = &input.charset {
        object.key("Charset").string(var_190);
    }
}
