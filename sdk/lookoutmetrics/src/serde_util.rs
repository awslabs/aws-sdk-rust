// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn too_many_requests_exception_correct_errors(
    mut builder: crate::types::error::builders::TooManyRequestsExceptionBuilder,
) -> crate::types::error::builders::TooManyRequestsExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_correct_errors(mut builder: crate::types::builders::MetricBuilder) -> crate::types::builders::MetricBuilder {
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    if builder.aggregation_function.is_none() {
        builder.aggregation_function = "no value was set".parse::<crate::types::AggregationFunction>().ok()
    }
    builder
}

pub(crate) fn time_series_correct_errors(mut builder: crate::types::builders::TimeSeriesBuilder) -> crate::types::builders::TimeSeriesBuilder {
    if builder.time_series_id.is_none() {
        builder.time_series_id = Some(Default::default())
    }
    if builder.dimension_list.is_none() {
        builder.dimension_list = Some(Default::default())
    }
    if builder.metric_value_list.is_none() {
        builder.metric_value_list = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn back_test_configuration_correct_errors(
    mut builder: crate::types::builders::BackTestConfigurationBuilder,
) -> crate::types::builders::BackTestConfigurationBuilder {
    if builder.run_back_test_mode.is_none() {
        builder.run_back_test_mode = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_configuration_correct_errors(
    mut builder: crate::types::builders::LambdaConfigurationBuilder,
) -> crate::types::builders::LambdaConfigurationBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.lambda_arn.is_none() {
        builder.lambda_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn sns_configuration_correct_errors(
    mut builder: crate::types::builders::SnsConfigurationBuilder,
) -> crate::types::builders::SnsConfigurationBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.sns_topic_arn.is_none() {
        builder.sns_topic_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_configuration_correct_errors(
    mut builder: crate::types::builders::VpcConfigurationBuilder,
) -> crate::types::builders::VpcConfigurationBuilder {
    if builder.subnet_id_list.is_none() {
        builder.subnet_id_list = Some(Default::default())
    }
    if builder.security_group_id_list.is_none() {
        builder.security_group_id_list = Some(Default::default())
    }
    builder
}

pub(crate) fn dimension_name_value_correct_errors(
    mut builder: crate::types::builders::DimensionNameValueBuilder,
) -> crate::types::builders::DimensionNameValueBuilder {
    if builder.dimension_name.is_none() {
        builder.dimension_name = Some(Default::default())
    }
    if builder.dimension_value.is_none() {
        builder.dimension_value = Some(Default::default())
    }
    builder
}
