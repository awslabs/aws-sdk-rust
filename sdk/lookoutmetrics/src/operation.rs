// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Activates an anomaly detector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ActivateAnomalyDetector {
    _private: (),
}
impl ActivateAnomalyDetector {
    /// Creates a new builder-style object to manufacture [`ActivateAnomalyDetectorInput`](crate::input::ActivateAnomalyDetectorInput)
    pub fn builder() -> crate::input::activate_anomaly_detector_input::Builder {
        crate::input::activate_anomaly_detector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ActivateAnomalyDetector {
    type Output = std::result::Result<
        crate::output::ActivateAnomalyDetectorOutput,
        crate::error::ActivateAnomalyDetectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_activate_anomaly_detector_error(response)
        } else {
            crate::operation_deser::parse_activate_anomaly_detector_response(response)
        }
    }
}

/// <p>Runs a backtest for anomaly detection for the specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BackTestAnomalyDetector {
    _private: (),
}
impl BackTestAnomalyDetector {
    /// Creates a new builder-style object to manufacture [`BackTestAnomalyDetectorInput`](crate::input::BackTestAnomalyDetectorInput)
    pub fn builder() -> crate::input::back_test_anomaly_detector_input::Builder {
        crate::input::back_test_anomaly_detector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BackTestAnomalyDetector {
    type Output = std::result::Result<
        crate::output::BackTestAnomalyDetectorOutput,
        crate::error::BackTestAnomalyDetectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_back_test_anomaly_detector_error(response)
        } else {
            crate::operation_deser::parse_back_test_anomaly_detector_response(response)
        }
    }
}

/// <p>Creates an alert for an anomaly detector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAlert {
    _private: (),
}
impl CreateAlert {
    /// Creates a new builder-style object to manufacture [`CreateAlertInput`](crate::input::CreateAlertInput)
    pub fn builder() -> crate::input::create_alert_input::Builder {
        crate::input::create_alert_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAlert {
    type Output =
        std::result::Result<crate::output::CreateAlertOutput, crate::error::CreateAlertError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_alert_error(response)
        } else {
            crate::operation_deser::parse_create_alert_response(response)
        }
    }
}

/// <p>Creates an anomaly detector.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAnomalyDetector {
    _private: (),
}
impl CreateAnomalyDetector {
    /// Creates a new builder-style object to manufacture [`CreateAnomalyDetectorInput`](crate::input::CreateAnomalyDetectorInput)
    pub fn builder() -> crate::input::create_anomaly_detector_input::Builder {
        crate::input::create_anomaly_detector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAnomalyDetector {
    type Output = std::result::Result<
        crate::output::CreateAnomalyDetectorOutput,
        crate::error::CreateAnomalyDetectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_anomaly_detector_error(response)
        } else {
            crate::operation_deser::parse_create_anomaly_detector_response(response)
        }
    }
}

/// <p>Creates a dataset.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateMetricSet {
    _private: (),
}
impl CreateMetricSet {
    /// Creates a new builder-style object to manufacture [`CreateMetricSetInput`](crate::input::CreateMetricSetInput)
    pub fn builder() -> crate::input::create_metric_set_input::Builder {
        crate::input::create_metric_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateMetricSet {
    type Output = std::result::Result<
        crate::output::CreateMetricSetOutput,
        crate::error::CreateMetricSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_metric_set_error(response)
        } else {
            crate::operation_deser::parse_create_metric_set_response(response)
        }
    }
}

/// <p>Deletes an alert.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAlert {
    _private: (),
}
impl DeleteAlert {
    /// Creates a new builder-style object to manufacture [`DeleteAlertInput`](crate::input::DeleteAlertInput)
    pub fn builder() -> crate::input::delete_alert_input::Builder {
        crate::input::delete_alert_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAlert {
    type Output =
        std::result::Result<crate::output::DeleteAlertOutput, crate::error::DeleteAlertError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_alert_error(response)
        } else {
            crate::operation_deser::parse_delete_alert_response(response)
        }
    }
}

/// <p>Deletes a detector. Deleting an anomaly detector will delete all of its corresponding resources including any
/// configured datasets and alerts.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAnomalyDetector {
    _private: (),
}
impl DeleteAnomalyDetector {
    /// Creates a new builder-style object to manufacture [`DeleteAnomalyDetectorInput`](crate::input::DeleteAnomalyDetectorInput)
    pub fn builder() -> crate::input::delete_anomaly_detector_input::Builder {
        crate::input::delete_anomaly_detector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAnomalyDetector {
    type Output = std::result::Result<
        crate::output::DeleteAnomalyDetectorOutput,
        crate::error::DeleteAnomalyDetectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_anomaly_detector_error(response)
        } else {
            crate::operation_deser::parse_delete_anomaly_detector_response(response)
        }
    }
}

/// <p>Describes an alert.</p>
/// <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
/// immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAlert {
    _private: (),
}
impl DescribeAlert {
    /// Creates a new builder-style object to manufacture [`DescribeAlertInput`](crate::input::DescribeAlertInput)
    pub fn builder() -> crate::input::describe_alert_input::Builder {
        crate::input::describe_alert_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAlert {
    type Output =
        std::result::Result<crate::output::DescribeAlertOutput, crate::error::DescribeAlertError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_alert_error(response)
        } else {
            crate::operation_deser::parse_describe_alert_response(response)
        }
    }
}

/// <p>Returns information about the status of the specified anomaly detection jobs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAnomalyDetectionExecutions {
    _private: (),
}
impl DescribeAnomalyDetectionExecutions {
    /// Creates a new builder-style object to manufacture [`DescribeAnomalyDetectionExecutionsInput`](crate::input::DescribeAnomalyDetectionExecutionsInput)
    pub fn builder() -> crate::input::describe_anomaly_detection_executions_input::Builder {
        crate::input::describe_anomaly_detection_executions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAnomalyDetectionExecutions {
    type Output = std::result::Result<
        crate::output::DescribeAnomalyDetectionExecutionsOutput,
        crate::error::DescribeAnomalyDetectionExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_anomaly_detection_executions_error(response)
        } else {
            crate::operation_deser::parse_describe_anomaly_detection_executions_response(response)
        }
    }
}

/// <p>Describes a detector.</p>
/// <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
/// immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAnomalyDetector {
    _private: (),
}
impl DescribeAnomalyDetector {
    /// Creates a new builder-style object to manufacture [`DescribeAnomalyDetectorInput`](crate::input::DescribeAnomalyDetectorInput)
    pub fn builder() -> crate::input::describe_anomaly_detector_input::Builder {
        crate::input::describe_anomaly_detector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAnomalyDetector {
    type Output = std::result::Result<
        crate::output::DescribeAnomalyDetectorOutput,
        crate::error::DescribeAnomalyDetectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_anomaly_detector_error(response)
        } else {
            crate::operation_deser::parse_describe_anomaly_detector_response(response)
        }
    }
}

/// <p>Describes a dataset.</p>
/// <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
/// immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMetricSet {
    _private: (),
}
impl DescribeMetricSet {
    /// Creates a new builder-style object to manufacture [`DescribeMetricSetInput`](crate::input::DescribeMetricSetInput)
    pub fn builder() -> crate::input::describe_metric_set_input::Builder {
        crate::input::describe_metric_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMetricSet {
    type Output = std::result::Result<
        crate::output::DescribeMetricSetOutput,
        crate::error::DescribeMetricSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_metric_set_error(response)
        } else {
            crate::operation_deser::parse_describe_metric_set_response(response)
        }
    }
}

/// <p>Returns details about a group of anomalous metrics.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAnomalyGroup {
    _private: (),
}
impl GetAnomalyGroup {
    /// Creates a new builder-style object to manufacture [`GetAnomalyGroupInput`](crate::input::GetAnomalyGroupInput)
    pub fn builder() -> crate::input::get_anomaly_group_input::Builder {
        crate::input::get_anomaly_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAnomalyGroup {
    type Output = std::result::Result<
        crate::output::GetAnomalyGroupOutput,
        crate::error::GetAnomalyGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_anomaly_group_error(response)
        } else {
            crate::operation_deser::parse_get_anomaly_group_response(response)
        }
    }
}

/// <p>Get feedback for an anomaly group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetFeedback {
    _private: (),
}
impl GetFeedback {
    /// Creates a new builder-style object to manufacture [`GetFeedbackInput`](crate::input::GetFeedbackInput)
    pub fn builder() -> crate::input::get_feedback_input::Builder {
        crate::input::get_feedback_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetFeedback {
    type Output =
        std::result::Result<crate::output::GetFeedbackOutput, crate::error::GetFeedbackError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_feedback_error(response)
        } else {
            crate::operation_deser::parse_get_feedback_response(response)
        }
    }
}

/// <p>Returns a selection of sample records from an Amazon S3 datasource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSampleData {
    _private: (),
}
impl GetSampleData {
    /// Creates a new builder-style object to manufacture [`GetSampleDataInput`](crate::input::GetSampleDataInput)
    pub fn builder() -> crate::input::get_sample_data_input::Builder {
        crate::input::get_sample_data_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSampleData {
    type Output =
        std::result::Result<crate::output::GetSampleDataOutput, crate::error::GetSampleDataError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_sample_data_error(response)
        } else {
            crate::operation_deser::parse_get_sample_data_response(response)
        }
    }
}

/// <p>Lists the alerts attached to a detector.</p>
/// <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
/// immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAlerts {
    _private: (),
}
impl ListAlerts {
    /// Creates a new builder-style object to manufacture [`ListAlertsInput`](crate::input::ListAlertsInput)
    pub fn builder() -> crate::input::list_alerts_input::Builder {
        crate::input::list_alerts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAlerts {
    type Output =
        std::result::Result<crate::output::ListAlertsOutput, crate::error::ListAlertsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_alerts_error(response)
        } else {
            crate::operation_deser::parse_list_alerts_response(response)
        }
    }
}

/// <p>Lists the detectors in the current AWS Region.</p>
/// <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
/// immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAnomalyDetectors {
    _private: (),
}
impl ListAnomalyDetectors {
    /// Creates a new builder-style object to manufacture [`ListAnomalyDetectorsInput`](crate::input::ListAnomalyDetectorsInput)
    pub fn builder() -> crate::input::list_anomaly_detectors_input::Builder {
        crate::input::list_anomaly_detectors_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAnomalyDetectors {
    type Output = std::result::Result<
        crate::output::ListAnomalyDetectorsOutput,
        crate::error::ListAnomalyDetectorsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_anomaly_detectors_error(response)
        } else {
            crate::operation_deser::parse_list_anomaly_detectors_response(response)
        }
    }
}

/// <p>Returns a list of anomaly groups.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAnomalyGroupSummaries {
    _private: (),
}
impl ListAnomalyGroupSummaries {
    /// Creates a new builder-style object to manufacture [`ListAnomalyGroupSummariesInput`](crate::input::ListAnomalyGroupSummariesInput)
    pub fn builder() -> crate::input::list_anomaly_group_summaries_input::Builder {
        crate::input::list_anomaly_group_summaries_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAnomalyGroupSummaries {
    type Output = std::result::Result<
        crate::output::ListAnomalyGroupSummariesOutput,
        crate::error::ListAnomalyGroupSummariesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_anomaly_group_summaries_error(response)
        } else {
            crate::operation_deser::parse_list_anomaly_group_summaries_response(response)
        }
    }
}

/// <p>Gets a list of anomalous metrics for a measure in an anomaly group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAnomalyGroupTimeSeries {
    _private: (),
}
impl ListAnomalyGroupTimeSeries {
    /// Creates a new builder-style object to manufacture [`ListAnomalyGroupTimeSeriesInput`](crate::input::ListAnomalyGroupTimeSeriesInput)
    pub fn builder() -> crate::input::list_anomaly_group_time_series_input::Builder {
        crate::input::list_anomaly_group_time_series_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAnomalyGroupTimeSeries {
    type Output = std::result::Result<
        crate::output::ListAnomalyGroupTimeSeriesOutput,
        crate::error::ListAnomalyGroupTimeSeriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_anomaly_group_time_series_error(response)
        } else {
            crate::operation_deser::parse_list_anomaly_group_time_series_response(response)
        }
    }
}

/// <p>Lists the datasets in the current AWS Region.</p>
/// <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
/// immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListMetricSets {
    _private: (),
}
impl ListMetricSets {
    /// Creates a new builder-style object to manufacture [`ListMetricSetsInput`](crate::input::ListMetricSetsInput)
    pub fn builder() -> crate::input::list_metric_sets_input::Builder {
        crate::input::list_metric_sets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListMetricSets {
    type Output =
        std::result::Result<crate::output::ListMetricSetsOutput, crate::error::ListMetricSetsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_metric_sets_error(response)
        } else {
            crate::operation_deser::parse_list_metric_sets_response(response)
        }
    }
}

/// <p>Gets a list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> for a detector, dataset, or alert.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Add feedback for an anomalous metric.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutFeedback {
    _private: (),
}
impl PutFeedback {
    /// Creates a new builder-style object to manufacture [`PutFeedbackInput`](crate::input::PutFeedbackInput)
    pub fn builder() -> crate::input::put_feedback_input::Builder {
        crate::input::put_feedback_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutFeedback {
    type Output =
        std::result::Result<crate::output::PutFeedbackOutput, crate::error::PutFeedbackError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_feedback_error(response)
        } else {
            crate::operation_deser::parse_put_feedback_response(response)
        }
    }
}

/// <p>Adds <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to a detector, dataset, or alert.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> from a detector, dataset, or alert.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates a detector. After activation, you can only change a detector's ingestion delay and description.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAnomalyDetector {
    _private: (),
}
impl UpdateAnomalyDetector {
    /// Creates a new builder-style object to manufacture [`UpdateAnomalyDetectorInput`](crate::input::UpdateAnomalyDetectorInput)
    pub fn builder() -> crate::input::update_anomaly_detector_input::Builder {
        crate::input::update_anomaly_detector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAnomalyDetector {
    type Output = std::result::Result<
        crate::output::UpdateAnomalyDetectorOutput,
        crate::error::UpdateAnomalyDetectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_anomaly_detector_error(response)
        } else {
            crate::operation_deser::parse_update_anomaly_detector_response(response)
        }
    }
}

/// <p>Updates a dataset.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMetricSet {
    _private: (),
}
impl UpdateMetricSet {
    /// Creates a new builder-style object to manufacture [`UpdateMetricSetInput`](crate::input::UpdateMetricSetInput)
    pub fn builder() -> crate::input::update_metric_set_input::Builder {
        crate::input::update_metric_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateMetricSet {
    type Output = std::result::Result<
        crate::output::UpdateMetricSetOutput,
        crate::error::UpdateMetricSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_metric_set_error(response)
        } else {
            crate::operation_deser::parse_update_metric_set_response(response)
        }
    }
}
