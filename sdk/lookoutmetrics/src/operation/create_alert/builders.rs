// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_alert::_create_alert_output::CreateAlertOutputBuilder;

pub use crate::operation::create_alert::_create_alert_input::CreateAlertInputBuilder;

/// Fluent builder constructing a request to `CreateAlert`.
///
/// <p>Creates an alert for an anomaly detector.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateAlertFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_alert::builders::CreateAlertInputBuilder,
}
impl CreateAlertFluentBuilder {
    /// Creates a new `CreateAlert`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_alert::CreateAlert,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_alert::CreateAlertError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_alert::CreateAlertOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_alert::CreateAlertError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the alert.</p>
    pub fn alert_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alert_name(input.into());
        self
    }
    /// <p>The name of the alert.</p>
    pub fn set_alert_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alert_name(input);
        self
    }
    /// <p>An integer from 0 to 100 specifying the alert sensitivity threshold.</p>
    pub fn alert_sensitivity_threshold(mut self, input: i32) -> Self {
        self.inner = self.inner.alert_sensitivity_threshold(input);
        self
    }
    /// <p>An integer from 0 to 100 specifying the alert sensitivity threshold.</p>
    pub fn set_alert_sensitivity_threshold(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_alert_sensitivity_threshold(input);
        self
    }
    /// <p>A description of the alert.</p>
    pub fn alert_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alert_description(input.into());
        self
    }
    /// <p>A description of the alert.</p>
    pub fn set_alert_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_alert_description(input);
        self
    }
    /// <p>The ARN of the detector to which the alert is attached.</p>
    pub fn anomaly_detector_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.anomaly_detector_arn(input.into());
        self
    }
    /// <p>The ARN of the detector to which the alert is attached.</p>
    pub fn set_anomaly_detector_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_anomaly_detector_arn(input);
        self
    }
    /// <p>Action that will be triggered when there is an alert.</p>
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.inner = self.inner.action(input);
        self
    }
    /// <p>Action that will be triggered when there is an alert.</p>
    pub fn set_action(mut self, input: std::option::Option<crate::types::Action>) -> Self {
        self.inner = self.inner.set_action(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the alert.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the alert.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The configuration of the alert filters, containing MetricList and DimensionFilterList.</p>
    pub fn alert_filters(mut self, input: crate::types::AlertFilters) -> Self {
        self.inner = self.inner.alert_filters(input);
        self
    }
    /// <p>The configuration of the alert filters, containing MetricList and DimensionFilterList.</p>
    pub fn set_alert_filters(
        mut self,
        input: std::option::Option<crate::types::AlertFilters>,
    ) -> Self {
        self.inner = self.inner.set_alert_filters(input);
        self
    }
}
