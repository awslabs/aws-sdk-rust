// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_metric_set::_create_metric_set_output::CreateMetricSetOutputBuilder;

pub use crate::operation::create_metric_set::_create_metric_set_input::CreateMetricSetInputBuilder;

/// Fluent builder constructing a request to `CreateMetricSet`.
///
/// <p>Creates a dataset.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateMetricSetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_metric_set::builders::CreateMetricSetInputBuilder,
}
impl CreateMetricSetFluentBuilder {
    /// Creates a new `CreateMetricSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_metric_set::CreateMetricSet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_metric_set::CreateMetricSetError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_metric_set::CreateMetricSetOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_metric_set::CreateMetricSetError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the anomaly detector that will use the dataset.</p>
    pub fn anomaly_detector_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.anomaly_detector_arn(input.into());
        self
    }
    /// <p>The ARN of the anomaly detector that will use the dataset.</p>
    pub fn set_anomaly_detector_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_anomaly_detector_arn(input);
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn metric_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.metric_set_name(input.into());
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn set_metric_set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_metric_set_name(input);
        self
    }
    /// <p>A description of the dataset you are creating.</p>
    pub fn metric_set_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.metric_set_description(input.into());
        self
    }
    /// <p>A description of the dataset you are creating.</p>
    pub fn set_metric_set_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_metric_set_description(input);
        self
    }
    /// Appends an item to `MetricList`.
    ///
    /// To override the contents of this collection use [`set_metric_list`](Self::set_metric_list).
    ///
    /// <p>A list of metrics that the dataset will contain.</p>
    pub fn metric_list(mut self, input: crate::types::Metric) -> Self {
        self.inner = self.inner.metric_list(input);
        self
    }
    /// <p>A list of metrics that the dataset will contain.</p>
    pub fn set_metric_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Metric>>,
    ) -> Self {
        self.inner = self.inner.set_metric_list(input);
        self
    }
    /// <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.</p>
    pub fn offset(mut self, input: i32) -> Self {
        self.inner = self.inner.offset(input);
        self
    }
    /// <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.</p>
    pub fn set_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_offset(input);
        self
    }
    /// <p>Contains information about the column used for tracking time in your source data.</p>
    pub fn timestamp_column(mut self, input: crate::types::TimestampColumn) -> Self {
        self.inner = self.inner.timestamp_column(input);
        self
    }
    /// <p>Contains information about the column used for tracking time in your source data.</p>
    pub fn set_timestamp_column(
        mut self,
        input: std::option::Option<crate::types::TimestampColumn>,
    ) -> Self {
        self.inner = self.inner.set_timestamp_column(input);
        self
    }
    /// Appends an item to `DimensionList`.
    ///
    /// To override the contents of this collection use [`set_dimension_list`](Self::set_dimension_list).
    ///
    /// <p>A list of the fields you want to treat as dimensions.</p>
    pub fn dimension_list(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.dimension_list(input.into());
        self
    }
    /// <p>A list of the fields you want to treat as dimensions.</p>
    pub fn set_dimension_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_dimension_list(input);
        self
    }
    /// <p>The frequency with which the source data will be analyzed for anomalies.</p>
    pub fn metric_set_frequency(mut self, input: crate::types::Frequency) -> Self {
        self.inner = self.inner.metric_set_frequency(input);
        self
    }
    /// <p>The frequency with which the source data will be analyzed for anomalies.</p>
    pub fn set_metric_set_frequency(
        mut self,
        input: std::option::Option<crate::types::Frequency>,
    ) -> Self {
        self.inner = self.inner.set_metric_set_frequency(input);
        self
    }
    /// <p>Contains information about how the source data should be interpreted.</p>
    pub fn metric_source(mut self, input: crate::types::MetricSource) -> Self {
        self.inner = self.inner.metric_source(input);
        self
    }
    /// <p>Contains information about how the source data should be interpreted.</p>
    pub fn set_metric_source(
        mut self,
        input: std::option::Option<crate::types::MetricSource>,
    ) -> Self {
        self.inner = self.inner.set_metric_source(input);
        self
    }
    /// <p>The time zone in which your source data was recorded.</p>
    pub fn timezone(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.timezone(input.into());
        self
    }
    /// <p>The time zone in which your source data was recorded.</p>
    pub fn set_timezone(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_timezone(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the dataset.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the dataset.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// Appends an item to `DimensionFilterList`.
    ///
    /// To override the contents of this collection use [`set_dimension_filter_list`](Self::set_dimension_filter_list).
    ///
    /// <p>A list of filters that specify which data is kept for anomaly detection.</p>
    pub fn dimension_filter_list(mut self, input: crate::types::MetricSetDimensionFilter) -> Self {
        self.inner = self.inner.dimension_filter_list(input);
        self
    }
    /// <p>A list of filters that specify which data is kept for anomaly detection.</p>
    pub fn set_dimension_filter_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricSetDimensionFilter>>,
    ) -> Self {
        self.inner = self.inner.set_dimension_filter_list(input);
        self
    }
}
