// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_metric_set::_create_metric_set_output::CreateMetricSetOutputBuilder;

pub use crate::operation::create_metric_set::_create_metric_set_input::CreateMetricSetInputBuilder;

impl CreateMetricSetInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_metric_set::CreateMetricSetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_metric_set::CreateMetricSetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_metric_set();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateMetricSet`.
///
/// <p>Creates a dataset.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateMetricSetFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_metric_set::builders::CreateMetricSetInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_metric_set::CreateMetricSetOutput,
        crate::operation::create_metric_set::CreateMetricSetError,
    > for CreateMetricSetFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_metric_set::CreateMetricSetOutput,
            crate::operation::create_metric_set::CreateMetricSetError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateMetricSetFluentBuilder {
    /// Creates a new `CreateMetricSet`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateMetricSet as a reference.
    pub fn as_input(&self) -> &crate::operation::create_metric_set::builders::CreateMetricSetInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_metric_set::CreateMetricSetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_metric_set::CreateMetricSetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_metric_set::CreateMetricSet::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_metric_set::CreateMetricSet::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_metric_set::CreateMetricSetOutput,
        crate::operation::create_metric_set::CreateMetricSetError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN of the anomaly detector that will use the dataset.</p>
    pub fn anomaly_detector_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.anomaly_detector_arn(input.into());
        self
    }
    /// <p>The ARN of the anomaly detector that will use the dataset.</p>
    pub fn set_anomaly_detector_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_anomaly_detector_arn(input);
        self
    }
    /// <p>The ARN of the anomaly detector that will use the dataset.</p>
    pub fn get_anomaly_detector_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_anomaly_detector_arn()
    }
    /// <p>The name of the dataset.</p>
    pub fn metric_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.metric_set_name(input.into());
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn set_metric_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_metric_set_name(input);
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn get_metric_set_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_metric_set_name()
    }
    /// <p>A description of the dataset you are creating.</p>
    pub fn metric_set_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.metric_set_description(input.into());
        self
    }
    /// <p>A description of the dataset you are creating.</p>
    pub fn set_metric_set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_metric_set_description(input);
        self
    }
    /// <p>A description of the dataset you are creating.</p>
    pub fn get_metric_set_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_metric_set_description()
    }
    /// Appends an item to `MetricList`.
    ///
    /// To override the contents of this collection use [`set_metric_list`](Self::set_metric_list).
    ///
    /// <p>A list of metrics that the dataset will contain.</p>
    pub fn metric_list(mut self, input: crate::types::Metric) -> Self {
        self.inner = self.inner.metric_list(input);
        self
    }
    /// <p>A list of metrics that the dataset will contain.</p>
    pub fn set_metric_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Metric>>) -> Self {
        self.inner = self.inner.set_metric_list(input);
        self
    }
    /// <p>A list of metrics that the dataset will contain.</p>
    pub fn get_metric_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Metric>> {
        self.inner.get_metric_list()
    }
    /// <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.</p>
    pub fn offset(mut self, input: i32) -> Self {
        self.inner = self.inner.offset(input);
        self
    }
    /// <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.</p>
    pub fn set_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_offset(input);
        self
    }
    /// <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.</p>
    pub fn get_offset(&self) -> &::std::option::Option<i32> {
        self.inner.get_offset()
    }
    /// <p>Contains information about the column used for tracking time in your source data.</p>
    pub fn timestamp_column(mut self, input: crate::types::TimestampColumn) -> Self {
        self.inner = self.inner.timestamp_column(input);
        self
    }
    /// <p>Contains information about the column used for tracking time in your source data.</p>
    pub fn set_timestamp_column(mut self, input: ::std::option::Option<crate::types::TimestampColumn>) -> Self {
        self.inner = self.inner.set_timestamp_column(input);
        self
    }
    /// <p>Contains information about the column used for tracking time in your source data.</p>
    pub fn get_timestamp_column(&self) -> &::std::option::Option<crate::types::TimestampColumn> {
        self.inner.get_timestamp_column()
    }
    /// Appends an item to `DimensionList`.
    ///
    /// To override the contents of this collection use [`set_dimension_list`](Self::set_dimension_list).
    ///
    /// <p>A list of the fields you want to treat as dimensions.</p>
    pub fn dimension_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.dimension_list(input.into());
        self
    }
    /// <p>A list of the fields you want to treat as dimensions.</p>
    pub fn set_dimension_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_dimension_list(input);
        self
    }
    /// <p>A list of the fields you want to treat as dimensions.</p>
    pub fn get_dimension_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_dimension_list()
    }
    /// <p>The frequency with which the source data will be analyzed for anomalies.</p>
    pub fn metric_set_frequency(mut self, input: crate::types::Frequency) -> Self {
        self.inner = self.inner.metric_set_frequency(input);
        self
    }
    /// <p>The frequency with which the source data will be analyzed for anomalies.</p>
    pub fn set_metric_set_frequency(mut self, input: ::std::option::Option<crate::types::Frequency>) -> Self {
        self.inner = self.inner.set_metric_set_frequency(input);
        self
    }
    /// <p>The frequency with which the source data will be analyzed for anomalies.</p>
    pub fn get_metric_set_frequency(&self) -> &::std::option::Option<crate::types::Frequency> {
        self.inner.get_metric_set_frequency()
    }
    /// <p>Contains information about how the source data should be interpreted.</p>
    pub fn metric_source(mut self, input: crate::types::MetricSource) -> Self {
        self.inner = self.inner.metric_source(input);
        self
    }
    /// <p>Contains information about how the source data should be interpreted.</p>
    pub fn set_metric_source(mut self, input: ::std::option::Option<crate::types::MetricSource>) -> Self {
        self.inner = self.inner.set_metric_source(input);
        self
    }
    /// <p>Contains information about how the source data should be interpreted.</p>
    pub fn get_metric_source(&self) -> &::std::option::Option<crate::types::MetricSource> {
        self.inner.get_metric_source()
    }
    /// <p>The time zone in which your source data was recorded.</p>
    pub fn timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.timezone(input.into());
        self
    }
    /// <p>The time zone in which your source data was recorded.</p>
    pub fn set_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_timezone(input);
        self
    }
    /// <p>The time zone in which your source data was recorded.</p>
    pub fn get_timezone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_timezone()
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the dataset.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the dataset.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the dataset.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// Appends an item to `DimensionFilterList`.
    ///
    /// To override the contents of this collection use [`set_dimension_filter_list`](Self::set_dimension_filter_list).
    ///
    /// <p>A list of filters that specify which data is kept for anomaly detection.</p>
    pub fn dimension_filter_list(mut self, input: crate::types::MetricSetDimensionFilter) -> Self {
        self.inner = self.inner.dimension_filter_list(input);
        self
    }
    /// <p>A list of filters that specify which data is kept for anomaly detection.</p>
    pub fn set_dimension_filter_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricSetDimensionFilter>>) -> Self {
        self.inner = self.inner.set_dimension_filter_list(input);
        self
    }
    /// <p>A list of filters that specify which data is kept for anomaly detection.</p>
    pub fn get_dimension_filter_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricSetDimensionFilter>> {
        self.inner.get_dimension_filter_list()
    }
}
