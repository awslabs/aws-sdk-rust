// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAnomalyDetectorOutput {
    /// <p>The ARN of the detector.</p>
    #[doc(hidden)]
    pub anomaly_detector_arn: std::option::Option<std::string::String>,
    /// <p>The name of the detector.</p>
    #[doc(hidden)]
    pub anomaly_detector_name: std::option::Option<std::string::String>,
    /// <p>A description of the detector.</p>
    #[doc(hidden)]
    pub anomaly_detector_description: std::option::Option<std::string::String>,
    /// <p>Contains information about the detector's configuration.</p>
    #[doc(hidden)]
    pub anomaly_detector_config: std::option::Option<crate::types::AnomalyDetectorConfigSummary>,
    /// <p>The time at which the detector was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the detector was last modified.</p>
    #[doc(hidden)]
    pub last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the detector.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::AnomalyDetectorStatus>,
    /// <p>The reason that the detector failed.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>The ARN of the KMS key to use to encrypt your data.</p>
    #[doc(hidden)]
    pub kms_key_arn: std::option::Option<std::string::String>,
    /// <p>The process that caused the detector to fail.</p>
    #[doc(hidden)]
    pub failure_type: std::option::Option<crate::types::AnomalyDetectorFailureType>,
    _request_id: Option<String>,
}
impl DescribeAnomalyDetectorOutput {
    /// <p>The ARN of the detector.</p>
    pub fn anomaly_detector_arn(&self) -> std::option::Option<&str> {
        self.anomaly_detector_arn.as_deref()
    }
    /// <p>The name of the detector.</p>
    pub fn anomaly_detector_name(&self) -> std::option::Option<&str> {
        self.anomaly_detector_name.as_deref()
    }
    /// <p>A description of the detector.</p>
    pub fn anomaly_detector_description(&self) -> std::option::Option<&str> {
        self.anomaly_detector_description.as_deref()
    }
    /// <p>Contains information about the detector's configuration.</p>
    pub fn anomaly_detector_config(
        &self,
    ) -> std::option::Option<&crate::types::AnomalyDetectorConfigSummary> {
        self.anomaly_detector_config.as_ref()
    }
    /// <p>The time at which the detector was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time at which the detector was last modified.</p>
    pub fn last_modification_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
    /// <p>The status of the detector.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::AnomalyDetectorStatus> {
        self.status.as_ref()
    }
    /// <p>The reason that the detector failed.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The ARN of the KMS key to use to encrypt your data.</p>
    pub fn kms_key_arn(&self) -> std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The process that caused the detector to fail.</p>
    pub fn failure_type(&self) -> std::option::Option<&crate::types::AnomalyDetectorFailureType> {
        self.failure_type.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeAnomalyDetectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAnomalyDetectorOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAnomalyDetectorOutput`](crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput).
    pub fn builder(
    ) -> crate::operation::describe_anomaly_detector::builders::DescribeAnomalyDetectorOutputBuilder
    {
        crate::operation::describe_anomaly_detector::builders::DescribeAnomalyDetectorOutputBuilder::default()
    }
}

/// A builder for [`DescribeAnomalyDetectorOutput`](crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAnomalyDetectorOutputBuilder {
    pub(crate) anomaly_detector_arn: std::option::Option<std::string::String>,
    pub(crate) anomaly_detector_name: std::option::Option<std::string::String>,
    pub(crate) anomaly_detector_description: std::option::Option<std::string::String>,
    pub(crate) anomaly_detector_config:
        std::option::Option<crate::types::AnomalyDetectorConfigSummary>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::AnomalyDetectorStatus>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    pub(crate) kms_key_arn: std::option::Option<std::string::String>,
    pub(crate) failure_type: std::option::Option<crate::types::AnomalyDetectorFailureType>,
    _request_id: Option<String>,
}
impl DescribeAnomalyDetectorOutputBuilder {
    /// <p>The ARN of the detector.</p>
    pub fn anomaly_detector_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.anomaly_detector_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the detector.</p>
    pub fn set_anomaly_detector_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.anomaly_detector_arn = input;
        self
    }
    /// <p>The name of the detector.</p>
    pub fn anomaly_detector_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.anomaly_detector_name = Some(input.into());
        self
    }
    /// <p>The name of the detector.</p>
    pub fn set_anomaly_detector_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.anomaly_detector_name = input;
        self
    }
    /// <p>A description of the detector.</p>
    pub fn anomaly_detector_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.anomaly_detector_description = Some(input.into());
        self
    }
    /// <p>A description of the detector.</p>
    pub fn set_anomaly_detector_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.anomaly_detector_description = input;
        self
    }
    /// <p>Contains information about the detector's configuration.</p>
    pub fn anomaly_detector_config(
        mut self,
        input: crate::types::AnomalyDetectorConfigSummary,
    ) -> Self {
        self.anomaly_detector_config = Some(input);
        self
    }
    /// <p>Contains information about the detector's configuration.</p>
    pub fn set_anomaly_detector_config(
        mut self,
        input: std::option::Option<crate::types::AnomalyDetectorConfigSummary>,
    ) -> Self {
        self.anomaly_detector_config = input;
        self
    }
    /// <p>The time at which the detector was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time at which the detector was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time at which the detector was last modified.</p>
    pub fn last_modification_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = Some(input);
        self
    }
    /// <p>The time at which the detector was last modified.</p>
    pub fn set_last_modification_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modification_time = input;
        self
    }
    /// <p>The status of the detector.</p>
    pub fn status(mut self, input: crate::types::AnomalyDetectorStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the detector.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::AnomalyDetectorStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The reason that the detector failed.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>The reason that the detector failed.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The ARN of the KMS key to use to encrypt your data.</p>
    pub fn kms_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key to use to encrypt your data.</p>
    pub fn set_kms_key_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The process that caused the detector to fail.</p>
    pub fn failure_type(mut self, input: crate::types::AnomalyDetectorFailureType) -> Self {
        self.failure_type = Some(input);
        self
    }
    /// <p>The process that caused the detector to fail.</p>
    pub fn set_failure_type(
        mut self,
        input: std::option::Option<crate::types::AnomalyDetectorFailureType>,
    ) -> Self {
        self.failure_type = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAnomalyDetectorOutput`](crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput {
        crate::operation::describe_anomaly_detector::DescribeAnomalyDetectorOutput {
            anomaly_detector_arn: self.anomaly_detector_arn,
            anomaly_detector_name: self.anomaly_detector_name,
            anomaly_detector_description: self.anomaly_detector_description,
            anomaly_detector_config: self.anomaly_detector_config,
            creation_time: self.creation_time,
            last_modification_time: self.last_modification_time,
            status: self.status,
            failure_reason: self.failure_reason,
            kms_key_arn: self.kms_key_arn,
            failure_type: self.failure_type,
            _request_id: self._request_id,
        }
    }
}
