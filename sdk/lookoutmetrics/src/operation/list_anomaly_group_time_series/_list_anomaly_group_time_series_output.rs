// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAnomalyGroupTimeSeriesOutput {
    /// <p>The ID of the anomaly group.</p>
    pub anomaly_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the measure field.</p>
    pub metric_name: ::std::option::Option<::std::string::String>,
    /// <p>Timestamps for the anomalous metrics.</p>
    pub timestamp_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The pagination token that's included if more results are available.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>A list of anomalous metrics.</p>
    pub time_series_list: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeries>>,
    _request_id: Option<String>,
}
impl ListAnomalyGroupTimeSeriesOutput {
    /// <p>The ID of the anomaly group.</p>
    pub fn anomaly_group_id(&self) -> ::std::option::Option<&str> {
        self.anomaly_group_id.as_deref()
    }
    /// <p>The name of the measure field.</p>
    pub fn metric_name(&self) -> ::std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>Timestamps for the anomalous metrics.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.timestamp_list.is_none()`.
    pub fn timestamp_list(&self) -> &[::std::string::String] {
        self.timestamp_list.as_deref().unwrap_or_default()
    }
    /// <p>The pagination token that's included if more results are available.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of anomalous metrics.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.time_series_list.is_none()`.
    pub fn time_series_list(&self) -> &[crate::types::TimeSeries] {
        self.time_series_list.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for ListAnomalyGroupTimeSeriesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAnomalyGroupTimeSeriesOutput {
    /// Creates a new builder-style object to manufacture [`ListAnomalyGroupTimeSeriesOutput`](crate::operation::list_anomaly_group_time_series::ListAnomalyGroupTimeSeriesOutput).
    pub fn builder() -> crate::operation::list_anomaly_group_time_series::builders::ListAnomalyGroupTimeSeriesOutputBuilder {
        crate::operation::list_anomaly_group_time_series::builders::ListAnomalyGroupTimeSeriesOutputBuilder::default()
    }
}

/// A builder for [`ListAnomalyGroupTimeSeriesOutput`](crate::operation::list_anomaly_group_time_series::ListAnomalyGroupTimeSeriesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListAnomalyGroupTimeSeriesOutputBuilder {
    pub(crate) anomaly_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) time_series_list: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeries>>,
    _request_id: Option<String>,
}
impl ListAnomalyGroupTimeSeriesOutputBuilder {
    /// <p>The ID of the anomaly group.</p>
    pub fn anomaly_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.anomaly_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the anomaly group.</p>
    pub fn set_anomaly_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.anomaly_group_id = input;
        self
    }
    /// <p>The ID of the anomaly group.</p>
    pub fn get_anomaly_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.anomaly_group_id
    }
    /// <p>The name of the measure field.</p>
    pub fn metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the measure field.</p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The name of the measure field.</p>
    pub fn get_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_name
    }
    /// Appends an item to `timestamp_list`.
    ///
    /// To override the contents of this collection use [`set_timestamp_list`](Self::set_timestamp_list).
    ///
    /// <p>Timestamps for the anomalous metrics.</p>
    pub fn timestamp_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.timestamp_list.unwrap_or_default();
        v.push(input.into());
        self.timestamp_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Timestamps for the anomalous metrics.</p>
    pub fn set_timestamp_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.timestamp_list = input;
        self
    }
    /// <p>Timestamps for the anomalous metrics.</p>
    pub fn get_timestamp_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.timestamp_list
    }
    /// <p>The pagination token that's included if more results are available.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token that's included if more results are available.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token that's included if more results are available.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `time_series_list`.
    ///
    /// To override the contents of this collection use [`set_time_series_list`](Self::set_time_series_list).
    ///
    /// <p>A list of anomalous metrics.</p>
    pub fn time_series_list(mut self, input: crate::types::TimeSeries) -> Self {
        let mut v = self.time_series_list.unwrap_or_default();
        v.push(input);
        self.time_series_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of anomalous metrics.</p>
    pub fn set_time_series_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeries>>) -> Self {
        self.time_series_list = input;
        self
    }
    /// <p>A list of anomalous metrics.</p>
    pub fn get_time_series_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TimeSeries>> {
        &self.time_series_list
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListAnomalyGroupTimeSeriesOutput`](crate::operation::list_anomaly_group_time_series::ListAnomalyGroupTimeSeriesOutput).
    pub fn build(self) -> crate::operation::list_anomaly_group_time_series::ListAnomalyGroupTimeSeriesOutput {
        crate::operation::list_anomaly_group_time_series::ListAnomalyGroupTimeSeriesOutput {
            anomaly_group_id: self.anomaly_group_id,
            metric_name: self.metric_name,
            timestamp_list: self.timestamp_list,
            next_token: self.next_token,
            time_series_list: self.time_series_list,
            _request_id: self._request_id,
        }
    }
}
