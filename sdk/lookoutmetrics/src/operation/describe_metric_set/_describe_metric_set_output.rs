// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeMetricSetOutput {
    /// <p>The ARN of the dataset.</p>
    #[doc(hidden)]
    pub metric_set_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the detector that contains the dataset.</p>
    #[doc(hidden)]
    pub anomaly_detector_arn: std::option::Option<std::string::String>,
    /// <p>The name of the dataset.</p>
    #[doc(hidden)]
    pub metric_set_name: std::option::Option<std::string::String>,
    /// <p>The dataset's description.</p>
    #[doc(hidden)]
    pub metric_set_description: std::option::Option<std::string::String>,
    /// <p>The time at which the dataset was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the dataset was last modified.</p>
    #[doc(hidden)]
    pub last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.</p>
    #[doc(hidden)]
    pub offset: std::option::Option<i32>,
    /// <p>A list of the metrics defined by the dataset.</p>
    #[doc(hidden)]
    pub metric_list: std::option::Option<std::vec::Vec<crate::types::Metric>>,
    /// <p>Contains information about the column used for tracking time in your source data.</p>
    #[doc(hidden)]
    pub timestamp_column: std::option::Option<crate::types::TimestampColumn>,
    /// <p>A list of the dimensions chosen for analysis.</p>
    #[doc(hidden)]
    pub dimension_list: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The interval at which the data will be analyzed for anomalies.</p>
    #[doc(hidden)]
    pub metric_set_frequency: std::option::Option<crate::types::Frequency>,
    /// <p>The time zone in which the dataset's data was recorded.</p>
    #[doc(hidden)]
    pub timezone: std::option::Option<std::string::String>,
    /// <p>Contains information about the dataset's source data.</p>
    #[doc(hidden)]
    pub metric_source: std::option::Option<crate::types::MetricSource>,
    /// <p>The dimensions and their values that were used to filter the dataset.</p>
    #[doc(hidden)]
    pub dimension_filter_list:
        std::option::Option<std::vec::Vec<crate::types::MetricSetDimensionFilter>>,
    _request_id: Option<String>,
}
impl DescribeMetricSetOutput {
    /// <p>The ARN of the dataset.</p>
    pub fn metric_set_arn(&self) -> std::option::Option<&str> {
        self.metric_set_arn.as_deref()
    }
    /// <p>The ARN of the detector that contains the dataset.</p>
    pub fn anomaly_detector_arn(&self) -> std::option::Option<&str> {
        self.anomaly_detector_arn.as_deref()
    }
    /// <p>The name of the dataset.</p>
    pub fn metric_set_name(&self) -> std::option::Option<&str> {
        self.metric_set_name.as_deref()
    }
    /// <p>The dataset's description.</p>
    pub fn metric_set_description(&self) -> std::option::Option<&str> {
        self.metric_set_description.as_deref()
    }
    /// <p>The time at which the dataset was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time at which the dataset was last modified.</p>
    pub fn last_modification_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
    /// <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.</p>
    pub fn offset(&self) -> std::option::Option<i32> {
        self.offset
    }
    /// <p>A list of the metrics defined by the dataset.</p>
    pub fn metric_list(&self) -> std::option::Option<&[crate::types::Metric]> {
        self.metric_list.as_deref()
    }
    /// <p>Contains information about the column used for tracking time in your source data.</p>
    pub fn timestamp_column(&self) -> std::option::Option<&crate::types::TimestampColumn> {
        self.timestamp_column.as_ref()
    }
    /// <p>A list of the dimensions chosen for analysis.</p>
    pub fn dimension_list(&self) -> std::option::Option<&[std::string::String]> {
        self.dimension_list.as_deref()
    }
    /// <p>The interval at which the data will be analyzed for anomalies.</p>
    pub fn metric_set_frequency(&self) -> std::option::Option<&crate::types::Frequency> {
        self.metric_set_frequency.as_ref()
    }
    /// <p>The time zone in which the dataset's data was recorded.</p>
    pub fn timezone(&self) -> std::option::Option<&str> {
        self.timezone.as_deref()
    }
    /// <p>Contains information about the dataset's source data.</p>
    pub fn metric_source(&self) -> std::option::Option<&crate::types::MetricSource> {
        self.metric_source.as_ref()
    }
    /// <p>The dimensions and their values that were used to filter the dataset.</p>
    pub fn dimension_filter_list(
        &self,
    ) -> std::option::Option<&[crate::types::MetricSetDimensionFilter]> {
        self.dimension_filter_list.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeMetricSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeMetricSetOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMetricSetOutput`](crate::operation::describe_metric_set::DescribeMetricSetOutput).
    pub fn builder(
    ) -> crate::operation::describe_metric_set::builders::DescribeMetricSetOutputBuilder {
        crate::operation::describe_metric_set::builders::DescribeMetricSetOutputBuilder::default()
    }
}

/// A builder for [`DescribeMetricSetOutput`](crate::operation::describe_metric_set::DescribeMetricSetOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeMetricSetOutputBuilder {
    pub(crate) metric_set_arn: std::option::Option<std::string::String>,
    pub(crate) anomaly_detector_arn: std::option::Option<std::string::String>,
    pub(crate) metric_set_name: std::option::Option<std::string::String>,
    pub(crate) metric_set_description: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) offset: std::option::Option<i32>,
    pub(crate) metric_list: std::option::Option<std::vec::Vec<crate::types::Metric>>,
    pub(crate) timestamp_column: std::option::Option<crate::types::TimestampColumn>,
    pub(crate) dimension_list: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) metric_set_frequency: std::option::Option<crate::types::Frequency>,
    pub(crate) timezone: std::option::Option<std::string::String>,
    pub(crate) metric_source: std::option::Option<crate::types::MetricSource>,
    pub(crate) dimension_filter_list:
        std::option::Option<std::vec::Vec<crate::types::MetricSetDimensionFilter>>,
    _request_id: Option<String>,
}
impl DescribeMetricSetOutputBuilder {
    /// <p>The ARN of the dataset.</p>
    pub fn metric_set_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_set_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the dataset.</p>
    pub fn set_metric_set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_set_arn = input;
        self
    }
    /// <p>The ARN of the detector that contains the dataset.</p>
    pub fn anomaly_detector_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.anomaly_detector_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the detector that contains the dataset.</p>
    pub fn set_anomaly_detector_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.anomaly_detector_arn = input;
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn metric_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_set_name = Some(input.into());
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn set_metric_set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_set_name = input;
        self
    }
    /// <p>The dataset's description.</p>
    pub fn metric_set_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_set_description = Some(input.into());
        self
    }
    /// <p>The dataset's description.</p>
    pub fn set_metric_set_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.metric_set_description = input;
        self
    }
    /// <p>The time at which the dataset was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time at which the dataset was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time at which the dataset was last modified.</p>
    pub fn last_modification_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = Some(input);
        self
    }
    /// <p>The time at which the dataset was last modified.</p>
    pub fn set_last_modification_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modification_time = input;
        self
    }
    /// <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.</p>
    pub fn offset(mut self, input: i32) -> Self {
        self.offset = Some(input);
        self
    }
    /// <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.</p>
    pub fn set_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.offset = input;
        self
    }
    /// Appends an item to `metric_list`.
    ///
    /// To override the contents of this collection use [`set_metric_list`](Self::set_metric_list).
    ///
    /// <p>A list of the metrics defined by the dataset.</p>
    pub fn metric_list(mut self, input: crate::types::Metric) -> Self {
        let mut v = self.metric_list.unwrap_or_default();
        v.push(input);
        self.metric_list = Some(v);
        self
    }
    /// <p>A list of the metrics defined by the dataset.</p>
    pub fn set_metric_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Metric>>,
    ) -> Self {
        self.metric_list = input;
        self
    }
    /// <p>Contains information about the column used for tracking time in your source data.</p>
    pub fn timestamp_column(mut self, input: crate::types::TimestampColumn) -> Self {
        self.timestamp_column = Some(input);
        self
    }
    /// <p>Contains information about the column used for tracking time in your source data.</p>
    pub fn set_timestamp_column(
        mut self,
        input: std::option::Option<crate::types::TimestampColumn>,
    ) -> Self {
        self.timestamp_column = input;
        self
    }
    /// Appends an item to `dimension_list`.
    ///
    /// To override the contents of this collection use [`set_dimension_list`](Self::set_dimension_list).
    ///
    /// <p>A list of the dimensions chosen for analysis.</p>
    pub fn dimension_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.dimension_list.unwrap_or_default();
        v.push(input.into());
        self.dimension_list = Some(v);
        self
    }
    /// <p>A list of the dimensions chosen for analysis.</p>
    pub fn set_dimension_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.dimension_list = input;
        self
    }
    /// <p>The interval at which the data will be analyzed for anomalies.</p>
    pub fn metric_set_frequency(mut self, input: crate::types::Frequency) -> Self {
        self.metric_set_frequency = Some(input);
        self
    }
    /// <p>The interval at which the data will be analyzed for anomalies.</p>
    pub fn set_metric_set_frequency(
        mut self,
        input: std::option::Option<crate::types::Frequency>,
    ) -> Self {
        self.metric_set_frequency = input;
        self
    }
    /// <p>The time zone in which the dataset's data was recorded.</p>
    pub fn timezone(mut self, input: impl Into<std::string::String>) -> Self {
        self.timezone = Some(input.into());
        self
    }
    /// <p>The time zone in which the dataset's data was recorded.</p>
    pub fn set_timezone(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.timezone = input;
        self
    }
    /// <p>Contains information about the dataset's source data.</p>
    pub fn metric_source(mut self, input: crate::types::MetricSource) -> Self {
        self.metric_source = Some(input);
        self
    }
    /// <p>Contains information about the dataset's source data.</p>
    pub fn set_metric_source(
        mut self,
        input: std::option::Option<crate::types::MetricSource>,
    ) -> Self {
        self.metric_source = input;
        self
    }
    /// Appends an item to `dimension_filter_list`.
    ///
    /// To override the contents of this collection use [`set_dimension_filter_list`](Self::set_dimension_filter_list).
    ///
    /// <p>The dimensions and their values that were used to filter the dataset.</p>
    pub fn dimension_filter_list(mut self, input: crate::types::MetricSetDimensionFilter) -> Self {
        let mut v = self.dimension_filter_list.unwrap_or_default();
        v.push(input);
        self.dimension_filter_list = Some(v);
        self
    }
    /// <p>The dimensions and their values that were used to filter the dataset.</p>
    pub fn set_dimension_filter_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricSetDimensionFilter>>,
    ) -> Self {
        self.dimension_filter_list = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeMetricSetOutput`](crate::operation::describe_metric_set::DescribeMetricSetOutput).
    pub fn build(self) -> crate::operation::describe_metric_set::DescribeMetricSetOutput {
        crate::operation::describe_metric_set::DescribeMetricSetOutput {
            metric_set_arn: self.metric_set_arn,
            anomaly_detector_arn: self.anomaly_detector_arn,
            metric_set_name: self.metric_set_name,
            metric_set_description: self.metric_set_description,
            creation_time: self.creation_time,
            last_modification_time: self.last_modification_time,
            offset: self.offset,
            metric_list: self.metric_list,
            timestamp_column: self.timestamp_column,
            dimension_list: self.dimension_list,
            metric_set_frequency: self.metric_set_frequency,
            timezone: self.timezone,
            metric_source: self.metric_source,
            dimension_filter_list: self.dimension_filter_list,
            _request_id: self._request_id,
        }
    }
}
