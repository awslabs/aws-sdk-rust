// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_metric_set::_update_metric_set_output::UpdateMetricSetOutputBuilder;

pub use crate::operation::update_metric_set::_update_metric_set_input::UpdateMetricSetInputBuilder;

/// Fluent builder constructing a request to `UpdateMetricSet`.
///
/// <p>Updates a dataset.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMetricSetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_metric_set::builders::UpdateMetricSetInputBuilder,
}
impl UpdateMetricSetFluentBuilder {
    /// Creates a new `UpdateMetricSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_metric_set::UpdateMetricSet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_metric_set::UpdateMetricSetError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_metric_set::UpdateMetricSetOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_metric_set::UpdateMetricSetError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the dataset to update.</p>
    pub fn metric_set_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.metric_set_arn(input.into());
        self
    }
    /// <p>The ARN of the dataset to update.</p>
    pub fn set_metric_set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_metric_set_arn(input);
        self
    }
    /// <p>The dataset's description.</p>
    pub fn metric_set_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.metric_set_description(input.into());
        self
    }
    /// <p>The dataset's description.</p>
    pub fn set_metric_set_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_metric_set_description(input);
        self
    }
    /// Appends an item to `MetricList`.
    ///
    /// To override the contents of this collection use [`set_metric_list`](Self::set_metric_list).
    ///
    /// <p>The metric list.</p>
    pub fn metric_list(mut self, input: crate::types::Metric) -> Self {
        self.inner = self.inner.metric_list(input);
        self
    }
    /// <p>The metric list.</p>
    pub fn set_metric_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Metric>>,
    ) -> Self {
        self.inner = self.inner.set_metric_list(input);
        self
    }
    /// <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.</p>
    pub fn offset(mut self, input: i32) -> Self {
        self.inner = self.inner.offset(input);
        self
    }
    /// <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.</p>
    pub fn set_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_offset(input);
        self
    }
    /// <p>The timestamp column.</p>
    pub fn timestamp_column(mut self, input: crate::types::TimestampColumn) -> Self {
        self.inner = self.inner.timestamp_column(input);
        self
    }
    /// <p>The timestamp column.</p>
    pub fn set_timestamp_column(
        mut self,
        input: std::option::Option<crate::types::TimestampColumn>,
    ) -> Self {
        self.inner = self.inner.set_timestamp_column(input);
        self
    }
    /// Appends an item to `DimensionList`.
    ///
    /// To override the contents of this collection use [`set_dimension_list`](Self::set_dimension_list).
    ///
    /// <p>The dimension list.</p>
    pub fn dimension_list(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.dimension_list(input.into());
        self
    }
    /// <p>The dimension list.</p>
    pub fn set_dimension_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_dimension_list(input);
        self
    }
    /// <p>The dataset's interval.</p>
    pub fn metric_set_frequency(mut self, input: crate::types::Frequency) -> Self {
        self.inner = self.inner.metric_set_frequency(input);
        self
    }
    /// <p>The dataset's interval.</p>
    pub fn set_metric_set_frequency(
        mut self,
        input: std::option::Option<crate::types::Frequency>,
    ) -> Self {
        self.inner = self.inner.set_metric_set_frequency(input);
        self
    }
    /// <p>Contains information about source data used to generate metrics.</p>
    pub fn metric_source(mut self, input: crate::types::MetricSource) -> Self {
        self.inner = self.inner.metric_source(input);
        self
    }
    /// <p>Contains information about source data used to generate metrics.</p>
    pub fn set_metric_source(
        mut self,
        input: std::option::Option<crate::types::MetricSource>,
    ) -> Self {
        self.inner = self.inner.set_metric_source(input);
        self
    }
    /// Appends an item to `DimensionFilterList`.
    ///
    /// To override the contents of this collection use [`set_dimension_filter_list`](Self::set_dimension_filter_list).
    ///
    /// <p>Describes a list of filters for choosing specific dimensions and specific values. Each filter consists of the dimension and one of its values that you want to include. When multiple dimensions or values are specified, the dimensions are joined with an AND operation and the values are joined with an OR operation.</p>
    pub fn dimension_filter_list(mut self, input: crate::types::MetricSetDimensionFilter) -> Self {
        self.inner = self.inner.dimension_filter_list(input);
        self
    }
    /// <p>Describes a list of filters for choosing specific dimensions and specific values. Each filter consists of the dimension and one of its values that you want to include. When multiple dimensions or values are specified, the dimensions are joined with an AND operation and the values are joined with an OR operation.</p>
    pub fn set_dimension_filter_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricSetDimensionFilter>>,
    ) -> Self {
        self.inner = self.inner.set_dimension_filter_list(input);
        self
    }
}
