// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAlertOutput {
    /// <p>Contains information about an alert.</p>
    #[doc(hidden)]
    pub alert: std::option::Option<crate::types::Alert>,
    _request_id: Option<String>,
}
impl DescribeAlertOutput {
    /// <p>Contains information about an alert.</p>
    pub fn alert(&self) -> std::option::Option<&crate::types::Alert> {
        self.alert.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeAlertOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAlertOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAlertOutput`](crate::operation::describe_alert::DescribeAlertOutput).
    pub fn builder() -> crate::operation::describe_alert::builders::DescribeAlertOutputBuilder {
        crate::operation::describe_alert::builders::DescribeAlertOutputBuilder::default()
    }
}

/// A builder for [`DescribeAlertOutput`](crate::operation::describe_alert::DescribeAlertOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAlertOutputBuilder {
    pub(crate) alert: std::option::Option<crate::types::Alert>,
    _request_id: Option<String>,
}
impl DescribeAlertOutputBuilder {
    /// <p>Contains information about an alert.</p>
    pub fn alert(mut self, input: crate::types::Alert) -> Self {
        self.alert = Some(input);
        self
    }
    /// <p>Contains information about an alert.</p>
    pub fn set_alert(mut self, input: std::option::Option<crate::types::Alert>) -> Self {
        self.alert = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAlertOutput`](crate::operation::describe_alert::DescribeAlertOutput).
    pub fn build(self) -> crate::operation::describe_alert::DescribeAlertOutput {
        crate::operation::describe_alert::DescribeAlertOutput {
            alert: self.alert,
            _request_id: self._request_id,
        }
    }
}
