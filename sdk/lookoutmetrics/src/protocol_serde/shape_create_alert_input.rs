// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_alert_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_alert::CreateAlertInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.action {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Action").start_object();
        crate::protocol_serde::shape_action::ser_action(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.alert_description {
        object.key("AlertDescription").string(var_3.as_str());
    }
    if let Some(var_4) = &input.alert_filters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("AlertFilters").start_object();
        crate::protocol_serde::shape_alert_filters::ser_alert_filters(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.alert_name {
        object.key("AlertName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.alert_sensitivity_threshold {
        object.key("AlertSensitivityThreshold").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    Ok(())
}
