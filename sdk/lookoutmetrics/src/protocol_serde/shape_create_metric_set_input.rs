// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_metric_set_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_metric_set::CreateMetricSetInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.dimension_filter_list {
        let mut array_3 = object.key("DimensionFilterList").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_metric_set_dimension_filter::ser_metric_set_dimension_filter(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.dimension_list {
        let mut array_7 = object.key("DimensionList").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.metric_list {
        let mut array_10 = object.key("MetricList").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_metric::ser_metric(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.metric_set_description {
        object.key("MetricSetDescription").string(var_13.as_str());
    }
    if let Some(var_14) = &input.metric_set_frequency {
        object.key("MetricSetFrequency").string(var_14.as_str());
    }
    if let Some(var_15) = &input.metric_set_name {
        object.key("MetricSetName").string(var_15.as_str());
    }
    if let Some(var_16) = &input.metric_source {
        #[allow(unused_mut)]
        let mut object_17 = object.key("MetricSource").start_object();
        crate::protocol_serde::shape_metric_source::ser_metric_source(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.offset {
        object.key("Offset").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.tags {
        #[allow(unused_mut)]
        let mut object_20 = object.key("Tags").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21.as_str()).string(value_22.as_str());
            }
        }
        object_20.finish();
    }
    if let Some(var_23) = &input.timestamp_column {
        #[allow(unused_mut)]
        let mut object_24 = object.key("TimestampColumn").start_object();
        crate::protocol_serde::shape_timestamp_column::ser_timestamp_column(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.timezone {
        object.key("Timezone").string(var_25.as_str());
    }
    Ok(())
}
