// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_metric_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_metric_set::UpdateMetricSetInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.dimension_filter_list {
        let mut array_2 = object.key("DimensionFilterList").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_metric_set_dimension_filter::ser_metric_set_dimension_filter(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.dimension_list {
        let mut array_6 = object.key("DimensionList").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.metric_list {
        let mut array_9 = object.key("MetricList").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_metric::ser_metric(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.metric_set_arn {
        object.key("MetricSetArn").string(var_12.as_str());
    }
    if let Some(var_13) = &input.metric_set_description {
        object.key("MetricSetDescription").string(var_13.as_str());
    }
    if let Some(var_14) = &input.metric_set_frequency {
        object.key("MetricSetFrequency").string(var_14.as_str());
    }
    if let Some(var_15) = &input.metric_source {
        #[allow(unused_mut)]
        let mut object_16 = object.key("MetricSource").start_object();
        crate::protocol_serde::shape_metric_source::ser_metric_source(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.offset {
        object.key("Offset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.timestamp_column {
        #[allow(unused_mut)]
        let mut object_19 = object.key("TimestampColumn").start_object();
        crate::protocol_serde::shape_timestamp_column::ser_timestamp_column(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    Ok(())
}
