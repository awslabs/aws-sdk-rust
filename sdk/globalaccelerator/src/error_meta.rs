// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The accelerator that you specified could not be disabled.</p>
    AcceleratorNotDisabledException(crate::types::error::AcceleratorNotDisabledException),
    /// <p>The accelerator that you specified doesn't exist.</p>
    AcceleratorNotFoundException(crate::types::error::AcceleratorNotFoundException),
    /// <p>You don't have access permission.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The listener that you specified has an endpoint group associated with it. You must remove all dependent resources from a listener before you can delete it.</p>
    AssociatedEndpointGroupFoundException(
        crate::types::error::AssociatedEndpointGroupFoundException,
    ),
    /// <p>The accelerator that you specified has a listener associated with it. You must remove all dependent resources from an accelerator before you can delete it.</p>
    AssociatedListenerFoundException(crate::types::error::AssociatedListenerFoundException),
    /// <p>The CIDR that you specified was not found or is incorrect.</p>
    ByoipCidrNotFoundException(crate::types::error::ByoipCidrNotFoundException),
    /// <p>You can't use both of those options.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The endpoint that you specified doesn't exist.</p>
    EndpointAlreadyExistsException(crate::types::error::EndpointAlreadyExistsException),
    /// <p>The endpoint group that you specified already exists.</p>
    EndpointGroupAlreadyExistsException(crate::types::error::EndpointGroupAlreadyExistsException),
    /// <p>The endpoint group that you specified doesn't exist.</p>
    EndpointGroupNotFoundException(crate::types::error::EndpointGroupNotFoundException),
    /// <p>The endpoint that you specified doesn't exist.</p>
    EndpointNotFoundException(crate::types::error::EndpointNotFoundException),
    /// <p>The CIDR that you specified is not valid for this action. For example, the state of the CIDR might be incorrect for this action.</p>
    IncorrectCidrStateException(crate::types::error::IncorrectCidrStateException),
    /// <p>There was an internal error for Global Accelerator.</p>
    InternalServiceErrorException(crate::types::error::InternalServiceErrorException),
    /// <p>An argument that you specified is invalid.</p>
    InvalidArgumentException(crate::types::error::InvalidArgumentException),
    /// <p>There isn't another item to return.</p>
    InvalidNextTokenException(crate::types::error::InvalidNextTokenException),
    /// <p>The port numbers that you specified are not valid numbers or are not unique for this accelerator.</p>
    InvalidPortRangeException(crate::types::error::InvalidPortRangeException),
    /// <p>Processing your request would cause you to exceed an Global Accelerator limit.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The listener that you specified doesn't exist.</p>
    ListenerNotFoundException(crate::types::error::ListenerNotFoundException),
    /// <p>There's already a transaction in progress. Another transaction can't be processed.</p>
    TransactionInProgressException(crate::types::error::TransactionInProgressException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AcceleratorNotDisabledException(inner) => inner.fmt(f),
            Error::AcceleratorNotFoundException(inner) => inner.fmt(f),
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::AssociatedEndpointGroupFoundException(inner) => inner.fmt(f),
            Error::AssociatedListenerFoundException(inner) => inner.fmt(f),
            Error::ByoipCidrNotFoundException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::EndpointAlreadyExistsException(inner) => inner.fmt(f),
            Error::EndpointGroupAlreadyExistsException(inner) => inner.fmt(f),
            Error::EndpointGroupNotFoundException(inner) => inner.fmt(f),
            Error::EndpointNotFoundException(inner) => inner.fmt(f),
            Error::IncorrectCidrStateException(inner) => inner.fmt(f),
            Error::InternalServiceErrorException(inner) => inner.fmt(f),
            Error::InvalidArgumentException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidPortRangeException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ListenerNotFoundException(inner) => inner.fmt(f),
            Error::TransactionInProgressException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::add_custom_routing_endpoints::AddCustomRoutingEndpointsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_custom_routing_endpoints::AddCustomRoutingEndpointsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_custom_routing_endpoints::AddCustomRoutingEndpointsError>
    for Error
{
    fn from(
        err: crate::operation::add_custom_routing_endpoints::AddCustomRoutingEndpointsError,
    ) -> Self {
        match err {
            crate::operation::add_custom_routing_endpoints::AddCustomRoutingEndpointsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::add_custom_routing_endpoints::AddCustomRoutingEndpointsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::add_custom_routing_endpoints::AddCustomRoutingEndpointsError::EndpointAlreadyExistsException(inner) => Error::EndpointAlreadyExistsException(inner),
            crate::operation::add_custom_routing_endpoints::AddCustomRoutingEndpointsError::EndpointGroupNotFoundException(inner) => Error::EndpointGroupNotFoundException(inner),
            crate::operation::add_custom_routing_endpoints::AddCustomRoutingEndpointsError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::add_custom_routing_endpoints::AddCustomRoutingEndpointsError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::add_custom_routing_endpoints::AddCustomRoutingEndpointsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::add_custom_routing_endpoints::AddCustomRoutingEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::add_endpoints::AddEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_endpoints::AddEndpointsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_endpoints::AddEndpointsError> for Error {
    fn from(err: crate::operation::add_endpoints::AddEndpointsError) -> Self {
        match err {
            crate::operation::add_endpoints::AddEndpointsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::add_endpoints::AddEndpointsError::EndpointGroupNotFoundException(
                inner,
            ) => Error::EndpointGroupNotFoundException(inner),
            crate::operation::add_endpoints::AddEndpointsError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::operation::add_endpoints::AddEndpointsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::add_endpoints::AddEndpointsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::add_endpoints::AddEndpointsError::TransactionInProgressException(
                inner,
            ) => Error::TransactionInProgressException(inner),
            crate::operation::add_endpoints::AddEndpointsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::advertise_byoip_cidr::AdvertiseByoipCidrError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::advertise_byoip_cidr::AdvertiseByoipCidrError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::advertise_byoip_cidr::AdvertiseByoipCidrError> for Error {
    fn from(err: crate::operation::advertise_byoip_cidr::AdvertiseByoipCidrError) -> Self {
        match err {
            crate::operation::advertise_byoip_cidr::AdvertiseByoipCidrError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::advertise_byoip_cidr::AdvertiseByoipCidrError::ByoipCidrNotFoundException(inner) => Error::ByoipCidrNotFoundException(inner),
            crate::operation::advertise_byoip_cidr::AdvertiseByoipCidrError::IncorrectCidrStateException(inner) => Error::IncorrectCidrStateException(inner),
            crate::operation::advertise_byoip_cidr::AdvertiseByoipCidrError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::advertise_byoip_cidr::AdvertiseByoipCidrError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::advertise_byoip_cidr::AdvertiseByoipCidrError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::allow_custom_routing_traffic::AllowCustomRoutingTrafficError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::allow_custom_routing_traffic::AllowCustomRoutingTrafficError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::allow_custom_routing_traffic::AllowCustomRoutingTrafficError>
    for Error
{
    fn from(
        err: crate::operation::allow_custom_routing_traffic::AllowCustomRoutingTrafficError,
    ) -> Self {
        match err {
            crate::operation::allow_custom_routing_traffic::AllowCustomRoutingTrafficError::EndpointGroupNotFoundException(inner) => Error::EndpointGroupNotFoundException(inner),
            crate::operation::allow_custom_routing_traffic::AllowCustomRoutingTrafficError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::allow_custom_routing_traffic::AllowCustomRoutingTrafficError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::allow_custom_routing_traffic::AllowCustomRoutingTrafficError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_accelerator::CreateAcceleratorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_accelerator::CreateAcceleratorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_accelerator::CreateAcceleratorError> for Error {
    fn from(err: crate::operation::create_accelerator::CreateAcceleratorError) -> Self {
        match err {
            crate::operation::create_accelerator::CreateAcceleratorError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::create_accelerator::CreateAcceleratorError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::create_accelerator::CreateAcceleratorError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_accelerator::CreateAcceleratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_custom_routing_accelerator::CreateCustomRoutingAcceleratorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_custom_routing_accelerator::CreateCustomRoutingAcceleratorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_custom_routing_accelerator::CreateCustomRoutingAcceleratorError>
    for Error
{
    fn from(
        err: crate::operation::create_custom_routing_accelerator::CreateCustomRoutingAcceleratorError,
    ) -> Self {
        match err {
            crate::operation::create_custom_routing_accelerator::CreateCustomRoutingAcceleratorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_custom_routing_accelerator::CreateCustomRoutingAcceleratorError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::create_custom_routing_accelerator::CreateCustomRoutingAcceleratorError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::create_custom_routing_accelerator::CreateCustomRoutingAcceleratorError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_custom_routing_accelerator::CreateCustomRoutingAcceleratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError> for Error {
    fn from(err: crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError) -> Self {
        match err {
            crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError::EndpointGroupAlreadyExistsException(inner) => Error::EndpointGroupAlreadyExistsException(inner),
            crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError::InvalidPortRangeException(inner) => Error::InvalidPortRangeException(inner),
            crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::operation::create_custom_routing_endpoint_group::CreateCustomRoutingEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_custom_routing_listener::CreateCustomRoutingListenerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_custom_routing_listener::CreateCustomRoutingListenerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_custom_routing_listener::CreateCustomRoutingListenerError>
    for Error
{
    fn from(
        err: crate::operation::create_custom_routing_listener::CreateCustomRoutingListenerError,
    ) -> Self {
        match err {
            crate::operation::create_custom_routing_listener::CreateCustomRoutingListenerError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::create_custom_routing_listener::CreateCustomRoutingListenerError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::create_custom_routing_listener::CreateCustomRoutingListenerError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::create_custom_routing_listener::CreateCustomRoutingListenerError::InvalidPortRangeException(inner) => Error::InvalidPortRangeException(inner),
            crate::operation::create_custom_routing_listener::CreateCustomRoutingListenerError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_custom_routing_listener::CreateCustomRoutingListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_endpoint_group::CreateEndpointGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_endpoint_group::CreateEndpointGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_endpoint_group::CreateEndpointGroupError> for Error {
    fn from(err: crate::operation::create_endpoint_group::CreateEndpointGroupError) -> Self {
        match err {
            crate::operation::create_endpoint_group::CreateEndpointGroupError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::create_endpoint_group::CreateEndpointGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_endpoint_group::CreateEndpointGroupError::EndpointGroupAlreadyExistsException(inner) => Error::EndpointGroupAlreadyExistsException(inner),
            crate::operation::create_endpoint_group::CreateEndpointGroupError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::create_endpoint_group::CreateEndpointGroupError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::create_endpoint_group::CreateEndpointGroupError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_endpoint_group::CreateEndpointGroupError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::operation::create_endpoint_group::CreateEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_listener::CreateListenerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_listener::CreateListenerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_listener::CreateListenerError> for Error {
    fn from(err: crate::operation::create_listener::CreateListenerError) -> Self {
        match err {
            crate::operation::create_listener::CreateListenerError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::create_listener::CreateListenerError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::create_listener::CreateListenerError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::create_listener::CreateListenerError::InvalidPortRangeException(inner) => Error::InvalidPortRangeException(inner),
            crate::operation::create_listener::CreateListenerError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_listener::CreateListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_accelerator::DeleteAcceleratorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_accelerator::DeleteAcceleratorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_accelerator::DeleteAcceleratorError> for Error {
    fn from(err: crate::operation::delete_accelerator::DeleteAcceleratorError) -> Self {
        match err {
            crate::operation::delete_accelerator::DeleteAcceleratorError::AcceleratorNotDisabledException(inner) => Error::AcceleratorNotDisabledException(inner),
            crate::operation::delete_accelerator::DeleteAcceleratorError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::delete_accelerator::DeleteAcceleratorError::AssociatedListenerFoundException(inner) => Error::AssociatedListenerFoundException(inner),
            crate::operation::delete_accelerator::DeleteAcceleratorError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::delete_accelerator::DeleteAcceleratorError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::delete_accelerator::DeleteAcceleratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_custom_routing_accelerator::DeleteCustomRoutingAcceleratorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_custom_routing_accelerator::DeleteCustomRoutingAcceleratorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_custom_routing_accelerator::DeleteCustomRoutingAcceleratorError>
    for Error
{
    fn from(
        err: crate::operation::delete_custom_routing_accelerator::DeleteCustomRoutingAcceleratorError,
    ) -> Self {
        match err {
            crate::operation::delete_custom_routing_accelerator::DeleteCustomRoutingAcceleratorError::AcceleratorNotDisabledException(inner) => Error::AcceleratorNotDisabledException(inner),
            crate::operation::delete_custom_routing_accelerator::DeleteCustomRoutingAcceleratorError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::delete_custom_routing_accelerator::DeleteCustomRoutingAcceleratorError::AssociatedListenerFoundException(inner) => Error::AssociatedListenerFoundException(inner),
            crate::operation::delete_custom_routing_accelerator::DeleteCustomRoutingAcceleratorError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::delete_custom_routing_accelerator::DeleteCustomRoutingAcceleratorError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::delete_custom_routing_accelerator::DeleteCustomRoutingAcceleratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_custom_routing_endpoint_group::DeleteCustomRoutingEndpointGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_custom_routing_endpoint_group::DeleteCustomRoutingEndpointGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_custom_routing_endpoint_group::DeleteCustomRoutingEndpointGroupError> for Error {
    fn from(err: crate::operation::delete_custom_routing_endpoint_group::DeleteCustomRoutingEndpointGroupError) -> Self {
        match err {
            crate::operation::delete_custom_routing_endpoint_group::DeleteCustomRoutingEndpointGroupError::EndpointGroupNotFoundException(inner) => Error::EndpointGroupNotFoundException(inner),
            crate::operation::delete_custom_routing_endpoint_group::DeleteCustomRoutingEndpointGroupError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::delete_custom_routing_endpoint_group::DeleteCustomRoutingEndpointGroupError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::delete_custom_routing_endpoint_group::DeleteCustomRoutingEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_custom_routing_listener::DeleteCustomRoutingListenerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_custom_routing_listener::DeleteCustomRoutingListenerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_custom_routing_listener::DeleteCustomRoutingListenerError>
    for Error
{
    fn from(
        err: crate::operation::delete_custom_routing_listener::DeleteCustomRoutingListenerError,
    ) -> Self {
        match err {
            crate::operation::delete_custom_routing_listener::DeleteCustomRoutingListenerError::AssociatedEndpointGroupFoundException(inner) => Error::AssociatedEndpointGroupFoundException(inner),
            crate::operation::delete_custom_routing_listener::DeleteCustomRoutingListenerError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::delete_custom_routing_listener::DeleteCustomRoutingListenerError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::delete_custom_routing_listener::DeleteCustomRoutingListenerError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::operation::delete_custom_routing_listener::DeleteCustomRoutingListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_endpoint_group::DeleteEndpointGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_endpoint_group::DeleteEndpointGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_endpoint_group::DeleteEndpointGroupError> for Error {
    fn from(err: crate::operation::delete_endpoint_group::DeleteEndpointGroupError) -> Self {
        match err {
            crate::operation::delete_endpoint_group::DeleteEndpointGroupError::EndpointGroupNotFoundException(inner) => Error::EndpointGroupNotFoundException(inner),
            crate::operation::delete_endpoint_group::DeleteEndpointGroupError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::delete_endpoint_group::DeleteEndpointGroupError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::delete_endpoint_group::DeleteEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_listener::DeleteListenerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_listener::DeleteListenerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_listener::DeleteListenerError> for Error {
    fn from(err: crate::operation::delete_listener::DeleteListenerError) -> Self {
        match err {
            crate::operation::delete_listener::DeleteListenerError::AssociatedEndpointGroupFoundException(inner) => Error::AssociatedEndpointGroupFoundException(inner),
            crate::operation::delete_listener::DeleteListenerError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::delete_listener::DeleteListenerError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::delete_listener::DeleteListenerError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::operation::delete_listener::DeleteListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError> for Error {
    fn from(
        err: crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError,
    ) -> Self {
        match err {
            crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError::EndpointGroupNotFoundException(inner) => Error::EndpointGroupNotFoundException(inner),
            crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::deprovision_byoip_cidr::DeprovisionByoipCidrError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::deprovision_byoip_cidr::DeprovisionByoipCidrError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deprovision_byoip_cidr::DeprovisionByoipCidrError> for Error {
    fn from(err: crate::operation::deprovision_byoip_cidr::DeprovisionByoipCidrError) -> Self {
        match err {
            crate::operation::deprovision_byoip_cidr::DeprovisionByoipCidrError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::deprovision_byoip_cidr::DeprovisionByoipCidrError::ByoipCidrNotFoundException(inner) => Error::ByoipCidrNotFoundException(inner),
            crate::operation::deprovision_byoip_cidr::DeprovisionByoipCidrError::IncorrectCidrStateException(inner) => Error::IncorrectCidrStateException(inner),
            crate::operation::deprovision_byoip_cidr::DeprovisionByoipCidrError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::deprovision_byoip_cidr::DeprovisionByoipCidrError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::deprovision_byoip_cidr::DeprovisionByoipCidrError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_accelerator::DescribeAcceleratorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_accelerator::DescribeAcceleratorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_accelerator::DescribeAcceleratorError> for Error {
    fn from(err: crate::operation::describe_accelerator::DescribeAcceleratorError) -> Self {
        match err {
            crate::operation::describe_accelerator::DescribeAcceleratorError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::describe_accelerator::DescribeAcceleratorError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::describe_accelerator::DescribeAcceleratorError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::describe_accelerator::DescribeAcceleratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_accelerator_attributes::DescribeAcceleratorAttributesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_accelerator_attributes::DescribeAcceleratorAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_accelerator_attributes::DescribeAcceleratorAttributesError>
    for Error
{
    fn from(
        err: crate::operation::describe_accelerator_attributes::DescribeAcceleratorAttributesError,
    ) -> Self {
        match err {
            crate::operation::describe_accelerator_attributes::DescribeAcceleratorAttributesError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::describe_accelerator_attributes::DescribeAcceleratorAttributesError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::describe_accelerator_attributes::DescribeAcceleratorAttributesError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::describe_accelerator_attributes::DescribeAcceleratorAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_custom_routing_accelerator::DescribeCustomRoutingAcceleratorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_custom_routing_accelerator::DescribeCustomRoutingAcceleratorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_custom_routing_accelerator::DescribeCustomRoutingAcceleratorError> for Error {
    fn from(err: crate::operation::describe_custom_routing_accelerator::DescribeCustomRoutingAcceleratorError) -> Self {
        match err {
            crate::operation::describe_custom_routing_accelerator::DescribeCustomRoutingAcceleratorError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::describe_custom_routing_accelerator::DescribeCustomRoutingAcceleratorError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::describe_custom_routing_accelerator::DescribeCustomRoutingAcceleratorError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::describe_custom_routing_accelerator::DescribeCustomRoutingAcceleratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_custom_routing_accelerator_attributes::DescribeCustomRoutingAcceleratorAttributesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_custom_routing_accelerator_attributes::DescribeCustomRoutingAcceleratorAttributesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_custom_routing_accelerator_attributes::DescribeCustomRoutingAcceleratorAttributesError> for Error {
    fn from(err: crate::operation::describe_custom_routing_accelerator_attributes::DescribeCustomRoutingAcceleratorAttributesError) -> Self {
        match err {
            crate::operation::describe_custom_routing_accelerator_attributes::DescribeCustomRoutingAcceleratorAttributesError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::describe_custom_routing_accelerator_attributes::DescribeCustomRoutingAcceleratorAttributesError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::describe_custom_routing_accelerator_attributes::DescribeCustomRoutingAcceleratorAttributesError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::describe_custom_routing_accelerator_attributes::DescribeCustomRoutingAcceleratorAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_custom_routing_endpoint_group::DescribeCustomRoutingEndpointGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_custom_routing_endpoint_group::DescribeCustomRoutingEndpointGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_custom_routing_endpoint_group::DescribeCustomRoutingEndpointGroupError> for Error {
    fn from(err: crate::operation::describe_custom_routing_endpoint_group::DescribeCustomRoutingEndpointGroupError) -> Self {
        match err {
            crate::operation::describe_custom_routing_endpoint_group::DescribeCustomRoutingEndpointGroupError::EndpointGroupNotFoundException(inner) => Error::EndpointGroupNotFoundException(inner),
            crate::operation::describe_custom_routing_endpoint_group::DescribeCustomRoutingEndpointGroupError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::describe_custom_routing_endpoint_group::DescribeCustomRoutingEndpointGroupError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::describe_custom_routing_endpoint_group::DescribeCustomRoutingEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_custom_routing_listener::DescribeCustomRoutingListenerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_custom_routing_listener::DescribeCustomRoutingListenerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_custom_routing_listener::DescribeCustomRoutingListenerError>
    for Error
{
    fn from(
        err: crate::operation::describe_custom_routing_listener::DescribeCustomRoutingListenerError,
    ) -> Self {
        match err {
            crate::operation::describe_custom_routing_listener::DescribeCustomRoutingListenerError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::describe_custom_routing_listener::DescribeCustomRoutingListenerError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::describe_custom_routing_listener::DescribeCustomRoutingListenerError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::operation::describe_custom_routing_listener::DescribeCustomRoutingListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_endpoint_group::DescribeEndpointGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_endpoint_group::DescribeEndpointGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_endpoint_group::DescribeEndpointGroupError> for Error {
    fn from(err: crate::operation::describe_endpoint_group::DescribeEndpointGroupError) -> Self {
        match err {
            crate::operation::describe_endpoint_group::DescribeEndpointGroupError::EndpointGroupNotFoundException(inner) => Error::EndpointGroupNotFoundException(inner),
            crate::operation::describe_endpoint_group::DescribeEndpointGroupError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::describe_endpoint_group::DescribeEndpointGroupError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::describe_endpoint_group::DescribeEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_listener::DescribeListenerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_listener::DescribeListenerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_listener::DescribeListenerError> for Error {
    fn from(err: crate::operation::describe_listener::DescribeListenerError) -> Self {
        match err {
            crate::operation::describe_listener::DescribeListenerError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::describe_listener::DescribeListenerError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::describe_listener::DescribeListenerError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::operation::describe_listener::DescribeListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_accelerators::ListAcceleratorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_accelerators::ListAcceleratorsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_accelerators::ListAcceleratorsError> for Error {
    fn from(err: crate::operation::list_accelerators::ListAcceleratorsError) -> Self {
        match err {
            crate::operation::list_accelerators::ListAcceleratorsError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::list_accelerators::ListAcceleratorsError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::list_accelerators::ListAcceleratorsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_accelerators::ListAcceleratorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_byoip_cidrs::ListByoipCidrsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_byoip_cidrs::ListByoipCidrsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_byoip_cidrs::ListByoipCidrsError> for Error {
    fn from(err: crate::operation::list_byoip_cidrs::ListByoipCidrsError) -> Self {
        match err {
            crate::operation::list_byoip_cidrs::ListByoipCidrsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_byoip_cidrs::ListByoipCidrsError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::list_byoip_cidrs::ListByoipCidrsError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::list_byoip_cidrs::ListByoipCidrsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_byoip_cidrs::ListByoipCidrsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_custom_routing_accelerators::ListCustomRoutingAcceleratorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_custom_routing_accelerators::ListCustomRoutingAcceleratorsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_custom_routing_accelerators::ListCustomRoutingAcceleratorsError>
    for Error
{
    fn from(
        err: crate::operation::list_custom_routing_accelerators::ListCustomRoutingAcceleratorsError,
    ) -> Self {
        match err {
            crate::operation::list_custom_routing_accelerators::ListCustomRoutingAcceleratorsError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::list_custom_routing_accelerators::ListCustomRoutingAcceleratorsError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::list_custom_routing_accelerators::ListCustomRoutingAcceleratorsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_custom_routing_accelerators::ListCustomRoutingAcceleratorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_custom_routing_endpoint_groups::ListCustomRoutingEndpointGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_custom_routing_endpoint_groups::ListCustomRoutingEndpointGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<
        crate::operation::list_custom_routing_endpoint_groups::ListCustomRoutingEndpointGroupsError,
    > for Error
{
    fn from(
        err: crate::operation::list_custom_routing_endpoint_groups::ListCustomRoutingEndpointGroupsError,
    ) -> Self {
        match err {
            crate::operation::list_custom_routing_endpoint_groups::ListCustomRoutingEndpointGroupsError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::list_custom_routing_endpoint_groups::ListCustomRoutingEndpointGroupsError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::list_custom_routing_endpoint_groups::ListCustomRoutingEndpointGroupsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_custom_routing_endpoint_groups::ListCustomRoutingEndpointGroupsError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::operation::list_custom_routing_endpoint_groups::ListCustomRoutingEndpointGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_custom_routing_listeners::ListCustomRoutingListenersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_custom_routing_listeners::ListCustomRoutingListenersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_custom_routing_listeners::ListCustomRoutingListenersError>
    for Error
{
    fn from(
        err: crate::operation::list_custom_routing_listeners::ListCustomRoutingListenersError,
    ) -> Self {
        match err {
            crate::operation::list_custom_routing_listeners::ListCustomRoutingListenersError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::list_custom_routing_listeners::ListCustomRoutingListenersError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::list_custom_routing_listeners::ListCustomRoutingListenersError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::list_custom_routing_listeners::ListCustomRoutingListenersError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_custom_routing_listeners::ListCustomRoutingListenersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_custom_routing_port_mappings::ListCustomRoutingPortMappingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_custom_routing_port_mappings::ListCustomRoutingPortMappingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_custom_routing_port_mappings::ListCustomRoutingPortMappingsError>
    for Error
{
    fn from(
        err: crate::operation::list_custom_routing_port_mappings::ListCustomRoutingPortMappingsError,
    ) -> Self {
        match err {
            crate::operation::list_custom_routing_port_mappings::ListCustomRoutingPortMappingsError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::list_custom_routing_port_mappings::ListCustomRoutingPortMappingsError::EndpointGroupNotFoundException(inner) => Error::EndpointGroupNotFoundException(inner),
            crate::operation::list_custom_routing_port_mappings::ListCustomRoutingPortMappingsError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::list_custom_routing_port_mappings::ListCustomRoutingPortMappingsError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::list_custom_routing_port_mappings::ListCustomRoutingPortMappingsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_custom_routing_port_mappings::ListCustomRoutingPortMappingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_custom_routing_port_mappings_by_destination::ListCustomRoutingPortMappingsByDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_custom_routing_port_mappings_by_destination::ListCustomRoutingPortMappingsByDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_custom_routing_port_mappings_by_destination::ListCustomRoutingPortMappingsByDestinationError> for Error {
    fn from(err: crate::operation::list_custom_routing_port_mappings_by_destination::ListCustomRoutingPortMappingsByDestinationError) -> Self {
        match err {
            crate::operation::list_custom_routing_port_mappings_by_destination::ListCustomRoutingPortMappingsByDestinationError::EndpointNotFoundException(inner) => Error::EndpointNotFoundException(inner),
            crate::operation::list_custom_routing_port_mappings_by_destination::ListCustomRoutingPortMappingsByDestinationError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::list_custom_routing_port_mappings_by_destination::ListCustomRoutingPortMappingsByDestinationError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::list_custom_routing_port_mappings_by_destination::ListCustomRoutingPortMappingsByDestinationError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_custom_routing_port_mappings_by_destination::ListCustomRoutingPortMappingsByDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_endpoint_groups::ListEndpointGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_endpoint_groups::ListEndpointGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_endpoint_groups::ListEndpointGroupsError> for Error {
    fn from(err: crate::operation::list_endpoint_groups::ListEndpointGroupsError) -> Self {
        match err {
            crate::operation::list_endpoint_groups::ListEndpointGroupsError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::list_endpoint_groups::ListEndpointGroupsError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::list_endpoint_groups::ListEndpointGroupsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_endpoint_groups::ListEndpointGroupsError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::operation::list_endpoint_groups::ListEndpointGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_listeners::ListListenersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_listeners::ListListenersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_listeners::ListListenersError> for Error {
    fn from(err: crate::operation::list_listeners::ListListenersError) -> Self {
        match err {
            crate::operation::list_listeners::ListListenersError::AcceleratorNotFoundException(
                inner,
            ) => Error::AcceleratorNotFoundException(inner),
            crate::operation::list_listeners::ListListenersError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::operation::list_listeners::ListListenersError::InvalidArgumentException(
                inner,
            ) => Error::InvalidArgumentException(inner),
            crate::operation::list_listeners::ListListenersError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::operation::list_listeners::ListListenersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::provision_byoip_cidr::ProvisionByoipCidrError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::provision_byoip_cidr::ProvisionByoipCidrError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::provision_byoip_cidr::ProvisionByoipCidrError> for Error {
    fn from(err: crate::operation::provision_byoip_cidr::ProvisionByoipCidrError) -> Self {
        match err {
            crate::operation::provision_byoip_cidr::ProvisionByoipCidrError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::provision_byoip_cidr::ProvisionByoipCidrError::IncorrectCidrStateException(inner) => Error::IncorrectCidrStateException(inner),
            crate::operation::provision_byoip_cidr::ProvisionByoipCidrError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::provision_byoip_cidr::ProvisionByoipCidrError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::provision_byoip_cidr::ProvisionByoipCidrError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::provision_byoip_cidr::ProvisionByoipCidrError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_custom_routing_endpoints::RemoveCustomRoutingEndpointsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_custom_routing_endpoints::RemoveCustomRoutingEndpointsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_custom_routing_endpoints::RemoveCustomRoutingEndpointsError>
    for Error
{
    fn from(
        err: crate::operation::remove_custom_routing_endpoints::RemoveCustomRoutingEndpointsError,
    ) -> Self {
        match err {
            crate::operation::remove_custom_routing_endpoints::RemoveCustomRoutingEndpointsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::remove_custom_routing_endpoints::RemoveCustomRoutingEndpointsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::remove_custom_routing_endpoints::RemoveCustomRoutingEndpointsError::EndpointGroupNotFoundException(inner) => Error::EndpointGroupNotFoundException(inner),
            crate::operation::remove_custom_routing_endpoints::RemoveCustomRoutingEndpointsError::EndpointNotFoundException(inner) => Error::EndpointNotFoundException(inner),
            crate::operation::remove_custom_routing_endpoints::RemoveCustomRoutingEndpointsError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::remove_custom_routing_endpoints::RemoveCustomRoutingEndpointsError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::remove_custom_routing_endpoints::RemoveCustomRoutingEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_endpoints::RemoveEndpointsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_endpoints::RemoveEndpointsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_endpoints::RemoveEndpointsError> for Error {
    fn from(err: crate::operation::remove_endpoints::RemoveEndpointsError) -> Self {
        match err {
            crate::operation::remove_endpoints::RemoveEndpointsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::remove_endpoints::RemoveEndpointsError::EndpointGroupNotFoundException(inner) => Error::EndpointGroupNotFoundException(inner),
            crate::operation::remove_endpoints::RemoveEndpointsError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::remove_endpoints::RemoveEndpointsError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::remove_endpoints::RemoveEndpointsError::TransactionInProgressException(inner) => Error::TransactionInProgressException(inner),
            crate::operation::remove_endpoints::RemoveEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AcceleratorNotFoundException(
                inner,
            ) => Error::AcceleratorNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AcceleratorNotFoundException(
                inner,
            ) => Error::AcceleratorNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidArgumentException(
                inner,
            ) => Error::InvalidArgumentException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_accelerator::UpdateAcceleratorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_accelerator::UpdateAcceleratorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_accelerator::UpdateAcceleratorError> for Error {
    fn from(err: crate::operation::update_accelerator::UpdateAcceleratorError) -> Self {
        match err {
            crate::operation::update_accelerator::UpdateAcceleratorError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::update_accelerator::UpdateAcceleratorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_accelerator::UpdateAcceleratorError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::update_accelerator::UpdateAcceleratorError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::update_accelerator::UpdateAcceleratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributesError>
    for Error
{
    fn from(
        err: crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributesError,
    ) -> Self {
        match err {
            crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributesError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributesError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributesError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorError>
    for Error
{
    fn from(
        err: crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorError,
    ) -> Self {
        match err {
            crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_custom_routing_accelerator_attributes::UpdateCustomRoutingAcceleratorAttributesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_custom_routing_accelerator_attributes::UpdateCustomRoutingAcceleratorAttributesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_custom_routing_accelerator_attributes::UpdateCustomRoutingAcceleratorAttributesError> for Error {
    fn from(err: crate::operation::update_custom_routing_accelerator_attributes::UpdateCustomRoutingAcceleratorAttributesError) -> Self {
        match err {
            crate::operation::update_custom_routing_accelerator_attributes::UpdateCustomRoutingAcceleratorAttributesError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::operation::update_custom_routing_accelerator_attributes::UpdateCustomRoutingAcceleratorAttributesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_custom_routing_accelerator_attributes::UpdateCustomRoutingAcceleratorAttributesError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::update_custom_routing_accelerator_attributes::UpdateCustomRoutingAcceleratorAttributesError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::update_custom_routing_accelerator_attributes::UpdateCustomRoutingAcceleratorAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_custom_routing_listener::UpdateCustomRoutingListenerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_custom_routing_listener::UpdateCustomRoutingListenerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_custom_routing_listener::UpdateCustomRoutingListenerError>
    for Error
{
    fn from(
        err: crate::operation::update_custom_routing_listener::UpdateCustomRoutingListenerError,
    ) -> Self {
        match err {
            crate::operation::update_custom_routing_listener::UpdateCustomRoutingListenerError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::update_custom_routing_listener::UpdateCustomRoutingListenerError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::update_custom_routing_listener::UpdateCustomRoutingListenerError::InvalidPortRangeException(inner) => Error::InvalidPortRangeException(inner),
            crate::operation::update_custom_routing_listener::UpdateCustomRoutingListenerError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_custom_routing_listener::UpdateCustomRoutingListenerError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::operation::update_custom_routing_listener::UpdateCustomRoutingListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_endpoint_group::UpdateEndpointGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_endpoint_group::UpdateEndpointGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_endpoint_group::UpdateEndpointGroupError> for Error {
    fn from(err: crate::operation::update_endpoint_group::UpdateEndpointGroupError) -> Self {
        match err {
            crate::operation::update_endpoint_group::UpdateEndpointGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_endpoint_group::UpdateEndpointGroupError::EndpointGroupNotFoundException(inner) => Error::EndpointGroupNotFoundException(inner),
            crate::operation::update_endpoint_group::UpdateEndpointGroupError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::update_endpoint_group::UpdateEndpointGroupError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::update_endpoint_group::UpdateEndpointGroupError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_endpoint_group::UpdateEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_listener::UpdateListenerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_listener::UpdateListenerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_listener::UpdateListenerError> for Error {
    fn from(err: crate::operation::update_listener::UpdateListenerError) -> Self {
        match err {
            crate::operation::update_listener::UpdateListenerError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::update_listener::UpdateListenerError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::update_listener::UpdateListenerError::InvalidPortRangeException(inner) => Error::InvalidPortRangeException(inner),
            crate::operation::update_listener::UpdateListenerError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_listener::UpdateListenerError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::operation::update_listener::UpdateListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::withdraw_byoip_cidr::WithdrawByoipCidrError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::withdraw_byoip_cidr::WithdrawByoipCidrError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::withdraw_byoip_cidr::WithdrawByoipCidrError> for Error {
    fn from(err: crate::operation::withdraw_byoip_cidr::WithdrawByoipCidrError) -> Self {
        match err {
            crate::operation::withdraw_byoip_cidr::WithdrawByoipCidrError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::withdraw_byoip_cidr::WithdrawByoipCidrError::ByoipCidrNotFoundException(inner) => Error::ByoipCidrNotFoundException(inner),
            crate::operation::withdraw_byoip_cidr::WithdrawByoipCidrError::IncorrectCidrStateException(inner) => Error::IncorrectCidrStateException(inner),
            crate::operation::withdraw_byoip_cidr::WithdrawByoipCidrError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::withdraw_byoip_cidr::WithdrawByoipCidrError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::withdraw_byoip_cidr::WithdrawByoipCidrError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AcceleratorNotDisabledException(e) => e.request_id(),
            Self::AcceleratorNotFoundException(e) => e.request_id(),
            Self::AccessDeniedException(e) => e.request_id(),
            Self::AssociatedEndpointGroupFoundException(e) => e.request_id(),
            Self::AssociatedListenerFoundException(e) => e.request_id(),
            Self::ByoipCidrNotFoundException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::EndpointAlreadyExistsException(e) => e.request_id(),
            Self::EndpointGroupAlreadyExistsException(e) => e.request_id(),
            Self::EndpointGroupNotFoundException(e) => e.request_id(),
            Self::EndpointNotFoundException(e) => e.request_id(),
            Self::IncorrectCidrStateException(e) => e.request_id(),
            Self::InternalServiceErrorException(e) => e.request_id(),
            Self::InvalidArgumentException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::InvalidPortRangeException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ListenerNotFoundException(e) => e.request_id(),
            Self::TransactionInProgressException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
