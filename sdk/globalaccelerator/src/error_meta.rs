// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The accelerator that you specified could not be disabled.</p>
    AcceleratorNotDisabledException(crate::error::AcceleratorNotDisabledException),
    /// <p>The accelerator that you specified doesn't exist.</p>
    AcceleratorNotFoundException(crate::error::AcceleratorNotFoundException),
    /// <p>You don't have access permission.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The listener that you specified has an endpoint group associated with it. You must remove all dependent resources from a listener before you can delete it.</p>
    AssociatedEndpointGroupFoundException(crate::error::AssociatedEndpointGroupFoundException),
    /// <p>The accelerator that you specified has a listener associated with it. You must remove all dependent resources from an accelerator before you can delete it.</p>
    AssociatedListenerFoundException(crate::error::AssociatedListenerFoundException),
    /// <p>The CIDR that you specified was not found or is incorrect.</p>
    ByoipCidrNotFoundException(crate::error::ByoipCidrNotFoundException),
    /// <p>You can't use both of those options.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The endpoint that you specified doesn't exist.</p>
    EndpointAlreadyExistsException(crate::error::EndpointAlreadyExistsException),
    /// <p>The endpoint group that you specified already exists.</p>
    EndpointGroupAlreadyExistsException(crate::error::EndpointGroupAlreadyExistsException),
    /// <p>The endpoint group that you specified doesn't exist.</p>
    EndpointGroupNotFoundException(crate::error::EndpointGroupNotFoundException),
    /// <p>The endpoint that you specified doesn't exist.</p>
    EndpointNotFoundException(crate::error::EndpointNotFoundException),
    /// <p>The CIDR that you specified is not valid for this action. For example, the state of the CIDR might be incorrect for this action.</p>
    IncorrectCidrStateException(crate::error::IncorrectCidrStateException),
    /// <p>There was an internal error for Global Accelerator.</p>
    InternalServiceErrorException(crate::error::InternalServiceErrorException),
    /// <p>An argument that you specified is invalid.</p>
    InvalidArgumentException(crate::error::InvalidArgumentException),
    /// <p>There isn't another item to return.</p>
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    /// <p>The port numbers that you specified are not valid numbers or are not unique for this accelerator.</p>
    InvalidPortRangeException(crate::error::InvalidPortRangeException),
    /// <p>Processing your request would cause you to exceed an Global Accelerator limit.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The listener that you specified doesn't exist.</p>
    ListenerNotFoundException(crate::error::ListenerNotFoundException),
    /// <p>There's already a transaction in progress. Another transaction can't be processed.</p>
    TransactionInProgressException(crate::error::TransactionInProgressException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AcceleratorNotDisabledException(inner) => inner.fmt(f),
            Error::AcceleratorNotFoundException(inner) => inner.fmt(f),
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::AssociatedEndpointGroupFoundException(inner) => inner.fmt(f),
            Error::AssociatedListenerFoundException(inner) => inner.fmt(f),
            Error::ByoipCidrNotFoundException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::EndpointAlreadyExistsException(inner) => inner.fmt(f),
            Error::EndpointGroupAlreadyExistsException(inner) => inner.fmt(f),
            Error::EndpointGroupNotFoundException(inner) => inner.fmt(f),
            Error::EndpointNotFoundException(inner) => inner.fmt(f),
            Error::IncorrectCidrStateException(inner) => inner.fmt(f),
            Error::InternalServiceErrorException(inner) => inner.fmt(f),
            Error::InvalidArgumentException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidPortRangeException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ListenerNotFoundException(inner) => inner.fmt(f),
            Error::TransactionInProgressException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddCustomRoutingEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddCustomRoutingEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddCustomRoutingEndpointsError> for Error {
    fn from(err: crate::error::AddCustomRoutingEndpointsError) -> Self {
        match err {
            crate::error::AddCustomRoutingEndpointsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AddCustomRoutingEndpointsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AddCustomRoutingEndpointsError::EndpointAlreadyExistsException(inner) => {
                Error::EndpointAlreadyExistsException(inner)
            }
            crate::error::AddCustomRoutingEndpointsError::EndpointGroupNotFoundException(inner) => {
                Error::EndpointGroupNotFoundException(inner)
            }
            crate::error::AddCustomRoutingEndpointsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::AddCustomRoutingEndpointsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::AddCustomRoutingEndpointsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AddCustomRoutingEndpointsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddEndpointsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddEndpointsError> for Error {
    fn from(err: crate::error::AddEndpointsError) -> Self {
        match err {
            crate::error::AddEndpointsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AddEndpointsError::EndpointGroupNotFoundException(inner) => {
                Error::EndpointGroupNotFoundException(inner)
            }
            crate::error::AddEndpointsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::AddEndpointsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::AddEndpointsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AddEndpointsError::TransactionInProgressException(inner) => {
                Error::TransactionInProgressException(inner)
            }
            crate::error::AddEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdvertiseByoipCidrError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdvertiseByoipCidrError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdvertiseByoipCidrError> for Error {
    fn from(err: crate::error::AdvertiseByoipCidrError) -> Self {
        match err {
            crate::error::AdvertiseByoipCidrError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AdvertiseByoipCidrError::ByoipCidrNotFoundException(inner) => {
                Error::ByoipCidrNotFoundException(inner)
            }
            crate::error::AdvertiseByoipCidrError::IncorrectCidrStateException(inner) => {
                Error::IncorrectCidrStateException(inner)
            }
            crate::error::AdvertiseByoipCidrError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::AdvertiseByoipCidrError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::AdvertiseByoipCidrError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AllowCustomRoutingTrafficError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AllowCustomRoutingTrafficError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AllowCustomRoutingTrafficError> for Error {
    fn from(err: crate::error::AllowCustomRoutingTrafficError) -> Self {
        match err {
            crate::error::AllowCustomRoutingTrafficError::EndpointGroupNotFoundException(inner) => {
                Error::EndpointGroupNotFoundException(inner)
            }
            crate::error::AllowCustomRoutingTrafficError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::AllowCustomRoutingTrafficError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::AllowCustomRoutingTrafficError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAcceleratorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAcceleratorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAcceleratorError> for Error {
    fn from(err: crate::error::CreateAcceleratorError) -> Self {
        match err {
            crate::error::CreateAcceleratorError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::CreateAcceleratorError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::CreateAcceleratorError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateAcceleratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateCustomRoutingAcceleratorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateCustomRoutingAcceleratorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCustomRoutingAcceleratorError> for Error {
    fn from(err: crate::error::CreateCustomRoutingAcceleratorError) -> Self {
        match err {
            crate::error::CreateCustomRoutingAcceleratorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateCustomRoutingAcceleratorError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::CreateCustomRoutingAcceleratorError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::CreateCustomRoutingAcceleratorError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateCustomRoutingAcceleratorError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateCustomRoutingEndpointGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateCustomRoutingEndpointGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCustomRoutingEndpointGroupError> for Error {
    fn from(err: crate::error::CreateCustomRoutingEndpointGroupError) -> Self {
        match err {
            crate::error::CreateCustomRoutingEndpointGroupError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::error::CreateCustomRoutingEndpointGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateCustomRoutingEndpointGroupError::EndpointGroupAlreadyExistsException(inner) => Error::EndpointGroupAlreadyExistsException(inner),
            crate::error::CreateCustomRoutingEndpointGroupError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::error::CreateCustomRoutingEndpointGroupError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::error::CreateCustomRoutingEndpointGroupError::InvalidPortRangeException(inner) => Error::InvalidPortRangeException(inner),
            crate::error::CreateCustomRoutingEndpointGroupError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateCustomRoutingEndpointGroupError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::error::CreateCustomRoutingEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCustomRoutingListenerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCustomRoutingListenerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCustomRoutingListenerError> for Error {
    fn from(err: crate::error::CreateCustomRoutingListenerError) -> Self {
        match err {
            crate::error::CreateCustomRoutingListenerError::AcceleratorNotFoundException(inner) => {
                Error::AcceleratorNotFoundException(inner)
            }
            crate::error::CreateCustomRoutingListenerError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::CreateCustomRoutingListenerError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::CreateCustomRoutingListenerError::InvalidPortRangeException(inner) => {
                Error::InvalidPortRangeException(inner)
            }
            crate::error::CreateCustomRoutingListenerError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateCustomRoutingListenerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEndpointGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateEndpointGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEndpointGroupError> for Error {
    fn from(err: crate::error::CreateEndpointGroupError) -> Self {
        match err {
            crate::error::CreateEndpointGroupError::AcceleratorNotFoundException(inner) => {
                Error::AcceleratorNotFoundException(inner)
            }
            crate::error::CreateEndpointGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateEndpointGroupError::EndpointGroupAlreadyExistsException(inner) => {
                Error::EndpointGroupAlreadyExistsException(inner)
            }
            crate::error::CreateEndpointGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::CreateEndpointGroupError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::CreateEndpointGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateEndpointGroupError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::CreateEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateListenerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateListenerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateListenerError> for Error {
    fn from(err: crate::error::CreateListenerError) -> Self {
        match err {
            crate::error::CreateListenerError::AcceleratorNotFoundException(inner) => {
                Error::AcceleratorNotFoundException(inner)
            }
            crate::error::CreateListenerError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::CreateListenerError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::CreateListenerError::InvalidPortRangeException(inner) => {
                Error::InvalidPortRangeException(inner)
            }
            crate::error::CreateListenerError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAcceleratorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAcceleratorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAcceleratorError> for Error {
    fn from(err: crate::error::DeleteAcceleratorError) -> Self {
        match err {
            crate::error::DeleteAcceleratorError::AcceleratorNotDisabledException(inner) => {
                Error::AcceleratorNotDisabledException(inner)
            }
            crate::error::DeleteAcceleratorError::AcceleratorNotFoundException(inner) => {
                Error::AcceleratorNotFoundException(inner)
            }
            crate::error::DeleteAcceleratorError::AssociatedListenerFoundException(inner) => {
                Error::AssociatedListenerFoundException(inner)
            }
            crate::error::DeleteAcceleratorError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DeleteAcceleratorError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DeleteAcceleratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteCustomRoutingAcceleratorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteCustomRoutingAcceleratorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCustomRoutingAcceleratorError> for Error {
    fn from(err: crate::error::DeleteCustomRoutingAcceleratorError) -> Self {
        match err {
            crate::error::DeleteCustomRoutingAcceleratorError::AcceleratorNotDisabledException(
                inner,
            ) => Error::AcceleratorNotDisabledException(inner),
            crate::error::DeleteCustomRoutingAcceleratorError::AcceleratorNotFoundException(
                inner,
            ) => Error::AcceleratorNotFoundException(inner),
            crate::error::DeleteCustomRoutingAcceleratorError::AssociatedListenerFoundException(
                inner,
            ) => Error::AssociatedListenerFoundException(inner),
            crate::error::DeleteCustomRoutingAcceleratorError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::DeleteCustomRoutingAcceleratorError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DeleteCustomRoutingAcceleratorError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteCustomRoutingEndpointGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteCustomRoutingEndpointGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCustomRoutingEndpointGroupError> for Error {
    fn from(err: crate::error::DeleteCustomRoutingEndpointGroupError) -> Self {
        match err {
            crate::error::DeleteCustomRoutingEndpointGroupError::EndpointGroupNotFoundException(
                inner,
            ) => Error::EndpointGroupNotFoundException(inner),
            crate::error::DeleteCustomRoutingEndpointGroupError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::DeleteCustomRoutingEndpointGroupError::InvalidArgumentException(
                inner,
            ) => Error::InvalidArgumentException(inner),
            crate::error::DeleteCustomRoutingEndpointGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCustomRoutingListenerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCustomRoutingListenerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCustomRoutingListenerError> for Error {
    fn from(err: crate::error::DeleteCustomRoutingListenerError) -> Self {
        match err {
            crate::error::DeleteCustomRoutingListenerError::AssociatedEndpointGroupFoundException(inner) => Error::AssociatedEndpointGroupFoundException(inner),
            crate::error::DeleteCustomRoutingListenerError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::error::DeleteCustomRoutingListenerError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::error::DeleteCustomRoutingListenerError::ListenerNotFoundException(inner) => Error::ListenerNotFoundException(inner),
            crate::error::DeleteCustomRoutingListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEndpointGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEndpointGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEndpointGroupError> for Error {
    fn from(err: crate::error::DeleteEndpointGroupError) -> Self {
        match err {
            crate::error::DeleteEndpointGroupError::EndpointGroupNotFoundException(inner) => {
                Error::EndpointGroupNotFoundException(inner)
            }
            crate::error::DeleteEndpointGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DeleteEndpointGroupError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DeleteEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteListenerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteListenerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteListenerError> for Error {
    fn from(err: crate::error::DeleteListenerError) -> Self {
        match err {
            crate::error::DeleteListenerError::AssociatedEndpointGroupFoundException(inner) => {
                Error::AssociatedEndpointGroupFoundException(inner)
            }
            crate::error::DeleteListenerError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DeleteListenerError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DeleteListenerError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::DeleteListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DenyCustomRoutingTrafficError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DenyCustomRoutingTrafficError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DenyCustomRoutingTrafficError> for Error {
    fn from(err: crate::error::DenyCustomRoutingTrafficError) -> Self {
        match err {
            crate::error::DenyCustomRoutingTrafficError::EndpointGroupNotFoundException(inner) => {
                Error::EndpointGroupNotFoundException(inner)
            }
            crate::error::DenyCustomRoutingTrafficError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DenyCustomRoutingTrafficError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DenyCustomRoutingTrafficError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeprovisionByoipCidrError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeprovisionByoipCidrError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeprovisionByoipCidrError> for Error {
    fn from(err: crate::error::DeprovisionByoipCidrError) -> Self {
        match err {
            crate::error::DeprovisionByoipCidrError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeprovisionByoipCidrError::ByoipCidrNotFoundException(inner) => {
                Error::ByoipCidrNotFoundException(inner)
            }
            crate::error::DeprovisionByoipCidrError::IncorrectCidrStateException(inner) => {
                Error::IncorrectCidrStateException(inner)
            }
            crate::error::DeprovisionByoipCidrError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DeprovisionByoipCidrError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DeprovisionByoipCidrError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAcceleratorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAcceleratorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAcceleratorError> for Error {
    fn from(err: crate::error::DescribeAcceleratorError) -> Self {
        match err {
            crate::error::DescribeAcceleratorError::AcceleratorNotFoundException(inner) => {
                Error::AcceleratorNotFoundException(inner)
            }
            crate::error::DescribeAcceleratorError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DescribeAcceleratorError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DescribeAcceleratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAcceleratorAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAcceleratorAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAcceleratorAttributesError> for Error {
    fn from(err: crate::error::DescribeAcceleratorAttributesError) -> Self {
        match err {
            crate::error::DescribeAcceleratorAttributesError::AcceleratorNotFoundException(
                inner,
            ) => Error::AcceleratorNotFoundException(inner),
            crate::error::DescribeAcceleratorAttributesError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::DescribeAcceleratorAttributesError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DescribeAcceleratorAttributesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeCustomRoutingAcceleratorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeCustomRoutingAcceleratorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCustomRoutingAcceleratorError> for Error {
    fn from(err: crate::error::DescribeCustomRoutingAcceleratorError) -> Self {
        match err {
            crate::error::DescribeCustomRoutingAcceleratorError::AcceleratorNotFoundException(
                inner,
            ) => Error::AcceleratorNotFoundException(inner),
            crate::error::DescribeCustomRoutingAcceleratorError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::DescribeCustomRoutingAcceleratorError::InvalidArgumentException(
                inner,
            ) => Error::InvalidArgumentException(inner),
            crate::error::DescribeCustomRoutingAcceleratorError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeCustomRoutingAcceleratorAttributesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeCustomRoutingAcceleratorAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCustomRoutingAcceleratorAttributesError> for Error {
    fn from(err: crate::error::DescribeCustomRoutingAcceleratorAttributesError) -> Self {
        match err {
            crate::error::DescribeCustomRoutingAcceleratorAttributesError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::error::DescribeCustomRoutingAcceleratorAttributesError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::error::DescribeCustomRoutingAcceleratorAttributesError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::error::DescribeCustomRoutingAcceleratorAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeCustomRoutingEndpointGroupError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeCustomRoutingEndpointGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCustomRoutingEndpointGroupError> for Error {
    fn from(err: crate::error::DescribeCustomRoutingEndpointGroupError) -> Self {
        match err {
            crate::error::DescribeCustomRoutingEndpointGroupError::EndpointGroupNotFoundException(inner) => Error::EndpointGroupNotFoundException(inner),
            crate::error::DescribeCustomRoutingEndpointGroupError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::error::DescribeCustomRoutingEndpointGroupError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::error::DescribeCustomRoutingEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCustomRoutingListenerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCustomRoutingListenerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCustomRoutingListenerError> for Error {
    fn from(err: crate::error::DescribeCustomRoutingListenerError) -> Self {
        match err {
            crate::error::DescribeCustomRoutingListenerError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::DescribeCustomRoutingListenerError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DescribeCustomRoutingListenerError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::DescribeCustomRoutingListenerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEndpointGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEndpointGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEndpointGroupError> for Error {
    fn from(err: crate::error::DescribeEndpointGroupError) -> Self {
        match err {
            crate::error::DescribeEndpointGroupError::EndpointGroupNotFoundException(inner) => {
                Error::EndpointGroupNotFoundException(inner)
            }
            crate::error::DescribeEndpointGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DescribeEndpointGroupError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DescribeEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeListenerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeListenerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeListenerError> for Error {
    fn from(err: crate::error::DescribeListenerError) -> Self {
        match err {
            crate::error::DescribeListenerError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DescribeListenerError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::DescribeListenerError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::DescribeListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAcceleratorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAcceleratorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAcceleratorsError> for Error {
    fn from(err: crate::error::ListAcceleratorsError) -> Self {
        match err {
            crate::error::ListAcceleratorsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListAcceleratorsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListAcceleratorsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListAcceleratorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListByoipCidrsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListByoipCidrsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListByoipCidrsError> for Error {
    fn from(err: crate::error::ListByoipCidrsError) -> Self {
        match err {
            crate::error::ListByoipCidrsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListByoipCidrsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListByoipCidrsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListByoipCidrsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListByoipCidrsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCustomRoutingAcceleratorsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCustomRoutingAcceleratorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCustomRoutingAcceleratorsError> for Error {
    fn from(err: crate::error::ListCustomRoutingAcceleratorsError) -> Self {
        match err {
            crate::error::ListCustomRoutingAcceleratorsError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::ListCustomRoutingAcceleratorsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListCustomRoutingAcceleratorsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListCustomRoutingAcceleratorsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListCustomRoutingEndpointGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListCustomRoutingEndpointGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCustomRoutingEndpointGroupsError> for Error {
    fn from(err: crate::error::ListCustomRoutingEndpointGroupsError) -> Self {
        match err {
            crate::error::ListCustomRoutingEndpointGroupsError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::ListCustomRoutingEndpointGroupsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListCustomRoutingEndpointGroupsError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::error::ListCustomRoutingEndpointGroupsError::ListenerNotFoundException(
                inner,
            ) => Error::ListenerNotFoundException(inner),
            crate::error::ListCustomRoutingEndpointGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCustomRoutingListenersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCustomRoutingListenersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCustomRoutingListenersError> for Error {
    fn from(err: crate::error::ListCustomRoutingListenersError) -> Self {
        match err {
            crate::error::ListCustomRoutingListenersError::AcceleratorNotFoundException(inner) => {
                Error::AcceleratorNotFoundException(inner)
            }
            crate::error::ListCustomRoutingListenersError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListCustomRoutingListenersError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListCustomRoutingListenersError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListCustomRoutingListenersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCustomRoutingPortMappingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCustomRoutingPortMappingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCustomRoutingPortMappingsError> for Error {
    fn from(err: crate::error::ListCustomRoutingPortMappingsError) -> Self {
        match err {
            crate::error::ListCustomRoutingPortMappingsError::AcceleratorNotFoundException(
                inner,
            ) => Error::AcceleratorNotFoundException(inner),
            crate::error::ListCustomRoutingPortMappingsError::EndpointGroupNotFoundException(
                inner,
            ) => Error::EndpointGroupNotFoundException(inner),
            crate::error::ListCustomRoutingPortMappingsError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::ListCustomRoutingPortMappingsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListCustomRoutingPortMappingsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListCustomRoutingPortMappingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListCustomRoutingPortMappingsByDestinationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListCustomRoutingPortMappingsByDestinationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCustomRoutingPortMappingsByDestinationError> for Error {
    fn from(err: crate::error::ListCustomRoutingPortMappingsByDestinationError) -> Self {
        match err {
            crate::error::ListCustomRoutingPortMappingsByDestinationError::EndpointNotFoundException(inner) => Error::EndpointNotFoundException(inner),
            crate::error::ListCustomRoutingPortMappingsByDestinationError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::error::ListCustomRoutingPortMappingsByDestinationError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::error::ListCustomRoutingPortMappingsByDestinationError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::error::ListCustomRoutingPortMappingsByDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEndpointGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEndpointGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEndpointGroupsError> for Error {
    fn from(err: crate::error::ListEndpointGroupsError) -> Self {
        match err {
            crate::error::ListEndpointGroupsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListEndpointGroupsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListEndpointGroupsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListEndpointGroupsError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::ListEndpointGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListListenersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListListenersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListListenersError> for Error {
    fn from(err: crate::error::ListListenersError) -> Self {
        match err {
            crate::error::ListListenersError::AcceleratorNotFoundException(inner) => {
                Error::AcceleratorNotFoundException(inner)
            }
            crate::error::ListListenersError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListListenersError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListListenersError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListListenersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AcceleratorNotFoundException(inner) => {
                Error::AcceleratorNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ProvisionByoipCidrError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ProvisionByoipCidrError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ProvisionByoipCidrError> for Error {
    fn from(err: crate::error::ProvisionByoipCidrError) -> Self {
        match err {
            crate::error::ProvisionByoipCidrError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ProvisionByoipCidrError::IncorrectCidrStateException(inner) => {
                Error::IncorrectCidrStateException(inner)
            }
            crate::error::ProvisionByoipCidrError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ProvisionByoipCidrError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::ProvisionByoipCidrError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ProvisionByoipCidrError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveCustomRoutingEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveCustomRoutingEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveCustomRoutingEndpointsError> for Error {
    fn from(err: crate::error::RemoveCustomRoutingEndpointsError) -> Self {
        match err {
            crate::error::RemoveCustomRoutingEndpointsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RemoveCustomRoutingEndpointsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RemoveCustomRoutingEndpointsError::EndpointGroupNotFoundException(
                inner,
            ) => Error::EndpointGroupNotFoundException(inner),
            crate::error::RemoveCustomRoutingEndpointsError::EndpointNotFoundException(inner) => {
                Error::EndpointNotFoundException(inner)
            }
            crate::error::RemoveCustomRoutingEndpointsError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::RemoveCustomRoutingEndpointsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::RemoveCustomRoutingEndpointsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RemoveEndpointsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveEndpointsError> for Error {
    fn from(err: crate::error::RemoveEndpointsError) -> Self {
        match err {
            crate::error::RemoveEndpointsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RemoveEndpointsError::EndpointGroupNotFoundException(inner) => {
                Error::EndpointGroupNotFoundException(inner)
            }
            crate::error::RemoveEndpointsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::RemoveEndpointsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::RemoveEndpointsError::TransactionInProgressException(inner) => {
                Error::TransactionInProgressException(inner)
            }
            crate::error::RemoveEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AcceleratorNotFoundException(inner) => {
                Error::AcceleratorNotFoundException(inner)
            }
            crate::error::TagResourceError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::TagResourceError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AcceleratorNotFoundException(inner) => {
                Error::AcceleratorNotFoundException(inner)
            }
            crate::error::UntagResourceError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::UntagResourceError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAcceleratorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAcceleratorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAcceleratorError> for Error {
    fn from(err: crate::error::UpdateAcceleratorError) -> Self {
        match err {
            crate::error::UpdateAcceleratorError::AcceleratorNotFoundException(inner) => {
                Error::AcceleratorNotFoundException(inner)
            }
            crate::error::UpdateAcceleratorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAcceleratorError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::UpdateAcceleratorError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::UpdateAcceleratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAcceleratorAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAcceleratorAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAcceleratorAttributesError> for Error {
    fn from(err: crate::error::UpdateAcceleratorAttributesError) -> Self {
        match err {
            crate::error::UpdateAcceleratorAttributesError::AcceleratorNotFoundException(inner) => {
                Error::AcceleratorNotFoundException(inner)
            }
            crate::error::UpdateAcceleratorAttributesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAcceleratorAttributesError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::UpdateAcceleratorAttributesError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::UpdateAcceleratorAttributesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateCustomRoutingAcceleratorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateCustomRoutingAcceleratorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateCustomRoutingAcceleratorError> for Error {
    fn from(err: crate::error::UpdateCustomRoutingAcceleratorError) -> Self {
        match err {
            crate::error::UpdateCustomRoutingAcceleratorError::AcceleratorNotFoundException(
                inner,
            ) => Error::AcceleratorNotFoundException(inner),
            crate::error::UpdateCustomRoutingAcceleratorError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::UpdateCustomRoutingAcceleratorError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::UpdateCustomRoutingAcceleratorError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateCustomRoutingAcceleratorAttributesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateCustomRoutingAcceleratorAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateCustomRoutingAcceleratorAttributesError> for Error {
    fn from(err: crate::error::UpdateCustomRoutingAcceleratorAttributesError) -> Self {
        match err {
            crate::error::UpdateCustomRoutingAcceleratorAttributesError::AcceleratorNotFoundException(inner) => Error::AcceleratorNotFoundException(inner),
            crate::error::UpdateCustomRoutingAcceleratorAttributesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateCustomRoutingAcceleratorAttributesError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::error::UpdateCustomRoutingAcceleratorAttributesError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::error::UpdateCustomRoutingAcceleratorAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateCustomRoutingListenerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateCustomRoutingListenerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateCustomRoutingListenerError> for Error {
    fn from(err: crate::error::UpdateCustomRoutingListenerError) -> Self {
        match err {
            crate::error::UpdateCustomRoutingListenerError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::UpdateCustomRoutingListenerError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::UpdateCustomRoutingListenerError::InvalidPortRangeException(inner) => {
                Error::InvalidPortRangeException(inner)
            }
            crate::error::UpdateCustomRoutingListenerError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateCustomRoutingListenerError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::UpdateCustomRoutingListenerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateEndpointGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateEndpointGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEndpointGroupError> for Error {
    fn from(err: crate::error::UpdateEndpointGroupError) -> Self {
        match err {
            crate::error::UpdateEndpointGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateEndpointGroupError::EndpointGroupNotFoundException(inner) => {
                Error::EndpointGroupNotFoundException(inner)
            }
            crate::error::UpdateEndpointGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::UpdateEndpointGroupError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::UpdateEndpointGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateEndpointGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateListenerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateListenerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateListenerError> for Error {
    fn from(err: crate::error::UpdateListenerError) -> Self {
        match err {
            crate::error::UpdateListenerError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::UpdateListenerError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::UpdateListenerError::InvalidPortRangeException(inner) => {
                Error::InvalidPortRangeException(inner)
            }
            crate::error::UpdateListenerError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateListenerError::ListenerNotFoundException(inner) => {
                Error::ListenerNotFoundException(inner)
            }
            crate::error::UpdateListenerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::WithdrawByoipCidrError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::WithdrawByoipCidrError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::WithdrawByoipCidrError> for Error {
    fn from(err: crate::error::WithdrawByoipCidrError) -> Self {
        match err {
            crate::error::WithdrawByoipCidrError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::WithdrawByoipCidrError::ByoipCidrNotFoundException(inner) => {
                Error::ByoipCidrNotFoundException(inner)
            }
            crate::error::WithdrawByoipCidrError::IncorrectCidrStateException(inner) => {
                Error::IncorrectCidrStateException(inner)
            }
            crate::error::WithdrawByoipCidrError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::WithdrawByoipCidrError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::error::WithdrawByoipCidrError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AcceleratorNotDisabledException(e) => e.request_id(),
            Self::AcceleratorNotFoundException(e) => e.request_id(),
            Self::AccessDeniedException(e) => e.request_id(),
            Self::AssociatedEndpointGroupFoundException(e) => e.request_id(),
            Self::AssociatedListenerFoundException(e) => e.request_id(),
            Self::ByoipCidrNotFoundException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::EndpointAlreadyExistsException(e) => e.request_id(),
            Self::EndpointGroupAlreadyExistsException(e) => e.request_id(),
            Self::EndpointGroupNotFoundException(e) => e.request_id(),
            Self::EndpointNotFoundException(e) => e.request_id(),
            Self::IncorrectCidrStateException(e) => e.request_id(),
            Self::InternalServiceErrorException(e) => e.request_id(),
            Self::InvalidArgumentException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::InvalidPortRangeException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ListenerNotFoundException(e) => e.request_id(),
            Self::TransactionInProgressException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
