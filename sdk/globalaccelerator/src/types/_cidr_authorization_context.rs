// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides authorization for Amazon to bring a specific IP address range to a specific Amazon Web Services account using bring your own IP addresses (BYOIP). </p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/using-byoip.html">Bring your own IP addresses (BYOIP)</a> in the <i>Global Accelerator Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CidrAuthorizationContext {
    /// <p>The plain-text authorization message for the prefix and account.</p>
    pub message: ::std::string::String,
    /// <p>The signed authorization message for the prefix and account.</p>
    pub signature: ::std::string::String,
}
impl CidrAuthorizationContext {
    /// <p>The plain-text authorization message for the prefix and account.</p>
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
    /// <p>The signed authorization message for the prefix and account.</p>
    pub fn signature(&self) -> &str {
        use std::ops::Deref;
        self.signature.deref()
    }
}
impl CidrAuthorizationContext {
    /// Creates a new builder-style object to manufacture [`CidrAuthorizationContext`](crate::types::CidrAuthorizationContext).
    pub fn builder() -> crate::types::builders::CidrAuthorizationContextBuilder {
        crate::types::builders::CidrAuthorizationContextBuilder::default()
    }
}

/// A builder for [`CidrAuthorizationContext`](crate::types::CidrAuthorizationContext).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CidrAuthorizationContextBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) signature: ::std::option::Option<::std::string::String>,
}
impl CidrAuthorizationContextBuilder {
    /// <p>The plain-text authorization message for the prefix and account.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The plain-text authorization message for the prefix and account.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The plain-text authorization message for the prefix and account.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The signed authorization message for the prefix and account.</p>
    /// This field is required.
    pub fn signature(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.signature = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The signed authorization message for the prefix and account.</p>
    pub fn set_signature(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.signature = input;
        self
    }
    /// <p>The signed authorization message for the prefix and account.</p>
    pub fn get_signature(&self) -> &::std::option::Option<::std::string::String> {
        &self.signature
    }
    /// Consumes the builder and constructs a [`CidrAuthorizationContext`](crate::types::CidrAuthorizationContext).
    /// This method will fail if any of the following fields are not set:
    /// - [`message`](crate::types::builders::CidrAuthorizationContextBuilder::message)
    /// - [`signature`](crate::types::builders::CidrAuthorizationContextBuilder::signature)
    pub fn build(self) -> ::std::result::Result<crate::types::CidrAuthorizationContext, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CidrAuthorizationContext {
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building CidrAuthorizationContext",
                )
            })?,
            signature: self.signature.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "signature",
                    "signature was not specified but it is required when building CidrAuthorizationContext",
                )
            })?,
        })
    }
}
