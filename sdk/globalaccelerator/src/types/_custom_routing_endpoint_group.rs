// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type for the endpoint group for a custom routing accelerator. An Amazon Web Services Region can have only one endpoint group for a specific listener. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomRoutingEndpointGroup {
    /// <p>The Amazon Resource Name (ARN) of the endpoint group.</p>
    pub endpoint_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region where the endpoint group is located.</p>
    pub endpoint_group_region: ::std::option::Option<::std::string::String>,
    /// <p>For a custom routing accelerator, describes the port range and protocol for all endpoints (virtual private cloud subnets) in an endpoint group to accept client traffic on.</p>
    pub destination_descriptions: ::std::option::Option<::std::vec::Vec<crate::types::CustomRoutingDestinationDescription>>,
    /// <p>For a custom routing accelerator, describes the endpoints (virtual private cloud subnets) in an endpoint group to accept client traffic on.</p>
    pub endpoint_descriptions: ::std::option::Option<::std::vec::Vec<crate::types::CustomRoutingEndpointDescription>>,
}
impl CustomRoutingEndpointGroup {
    /// <p>The Amazon Resource Name (ARN) of the endpoint group.</p>
    pub fn endpoint_group_arn(&self) -> ::std::option::Option<&str> {
        self.endpoint_group_arn.as_deref()
    }
    /// <p>The Amazon Web Services Region where the endpoint group is located.</p>
    pub fn endpoint_group_region(&self) -> ::std::option::Option<&str> {
        self.endpoint_group_region.as_deref()
    }
    /// <p>For a custom routing accelerator, describes the port range and protocol for all endpoints (virtual private cloud subnets) in an endpoint group to accept client traffic on.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_descriptions.is_none()`.
    pub fn destination_descriptions(&self) -> &[crate::types::CustomRoutingDestinationDescription] {
        self.destination_descriptions.as_deref().unwrap_or_default()
    }
    /// <p>For a custom routing accelerator, describes the endpoints (virtual private cloud subnets) in an endpoint group to accept client traffic on.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.endpoint_descriptions.is_none()`.
    pub fn endpoint_descriptions(&self) -> &[crate::types::CustomRoutingEndpointDescription] {
        self.endpoint_descriptions.as_deref().unwrap_or_default()
    }
}
impl CustomRoutingEndpointGroup {
    /// Creates a new builder-style object to manufacture [`CustomRoutingEndpointGroup`](crate::types::CustomRoutingEndpointGroup).
    pub fn builder() -> crate::types::builders::CustomRoutingEndpointGroupBuilder {
        crate::types::builders::CustomRoutingEndpointGroupBuilder::default()
    }
}

/// A builder for [`CustomRoutingEndpointGroup`](crate::types::CustomRoutingEndpointGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomRoutingEndpointGroupBuilder {
    pub(crate) endpoint_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_group_region: ::std::option::Option<::std::string::String>,
    pub(crate) destination_descriptions: ::std::option::Option<::std::vec::Vec<crate::types::CustomRoutingDestinationDescription>>,
    pub(crate) endpoint_descriptions: ::std::option::Option<::std::vec::Vec<crate::types::CustomRoutingEndpointDescription>>,
}
impl CustomRoutingEndpointGroupBuilder {
    /// <p>The Amazon Resource Name (ARN) of the endpoint group.</p>
    pub fn endpoint_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the endpoint group.</p>
    pub fn set_endpoint_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_group_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the endpoint group.</p>
    pub fn get_endpoint_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_group_arn
    }
    /// <p>The Amazon Web Services Region where the endpoint group is located.</p>
    pub fn endpoint_group_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_group_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the endpoint group is located.</p>
    pub fn set_endpoint_group_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_group_region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the endpoint group is located.</p>
    pub fn get_endpoint_group_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_group_region
    }
    /// Appends an item to `destination_descriptions`.
    ///
    /// To override the contents of this collection use [`set_destination_descriptions`](Self::set_destination_descriptions).
    ///
    /// <p>For a custom routing accelerator, describes the port range and protocol for all endpoints (virtual private cloud subnets) in an endpoint group to accept client traffic on.</p>
    pub fn destination_descriptions(mut self, input: crate::types::CustomRoutingDestinationDescription) -> Self {
        let mut v = self.destination_descriptions.unwrap_or_default();
        v.push(input);
        self.destination_descriptions = ::std::option::Option::Some(v);
        self
    }
    /// <p>For a custom routing accelerator, describes the port range and protocol for all endpoints (virtual private cloud subnets) in an endpoint group to accept client traffic on.</p>
    pub fn set_destination_descriptions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CustomRoutingDestinationDescription>>,
    ) -> Self {
        self.destination_descriptions = input;
        self
    }
    /// <p>For a custom routing accelerator, describes the port range and protocol for all endpoints (virtual private cloud subnets) in an endpoint group to accept client traffic on.</p>
    pub fn get_destination_descriptions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomRoutingDestinationDescription>> {
        &self.destination_descriptions
    }
    /// Appends an item to `endpoint_descriptions`.
    ///
    /// To override the contents of this collection use [`set_endpoint_descriptions`](Self::set_endpoint_descriptions).
    ///
    /// <p>For a custom routing accelerator, describes the endpoints (virtual private cloud subnets) in an endpoint group to accept client traffic on.</p>
    pub fn endpoint_descriptions(mut self, input: crate::types::CustomRoutingEndpointDescription) -> Self {
        let mut v = self.endpoint_descriptions.unwrap_or_default();
        v.push(input);
        self.endpoint_descriptions = ::std::option::Option::Some(v);
        self
    }
    /// <p>For a custom routing accelerator, describes the endpoints (virtual private cloud subnets) in an endpoint group to accept client traffic on.</p>
    pub fn set_endpoint_descriptions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CustomRoutingEndpointDescription>>,
    ) -> Self {
        self.endpoint_descriptions = input;
        self
    }
    /// <p>For a custom routing accelerator, describes the endpoints (virtual private cloud subnets) in an endpoint group to accept client traffic on.</p>
    pub fn get_endpoint_descriptions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomRoutingEndpointDescription>> {
        &self.endpoint_descriptions
    }
    /// Consumes the builder and constructs a [`CustomRoutingEndpointGroup`](crate::types::CustomRoutingEndpointGroup).
    pub fn build(self) -> crate::types::CustomRoutingEndpointGroup {
        crate::types::CustomRoutingEndpointGroup {
            endpoint_group_arn: self.endpoint_group_arn,
            endpoint_group_region: self.endpoint_group_region,
            destination_descriptions: self.destination_descriptions,
            endpoint_descriptions: self.endpoint_descriptions,
        }
    }
}
