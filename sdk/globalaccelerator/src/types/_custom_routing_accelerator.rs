// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Attributes of a custom routing accelerator.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomRoutingAccelerator {
    /// <p>The Amazon Resource Name (ARN) of the custom routing accelerator.</p>
    #[doc(hidden)]
    pub accelerator_arn: std::option::Option<std::string::String>,
    /// <p>The name of the accelerator. The name must contain only alphanumeric characters or hyphens (-), and must not begin or end with a hyphen.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The IP address type that an accelerator supports. For a custom routing accelerator, the value must be IPV4.</p>
    #[doc(hidden)]
    pub ip_address_type: std::option::Option<crate::types::IpAddressType>,
    /// <p>Indicates whether the accelerator is enabled. The value is true or false. The default value is true. </p>
    /// <p>If the value is set to true, the accelerator cannot be deleted. If set to false, accelerator can be deleted.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>The static IP addresses that Global Accelerator associates with the accelerator.</p>
    #[doc(hidden)]
    pub ip_sets: std::option::Option<std::vec::Vec<crate::types::IpSet>>,
    /// <p>The Domain Name System (DNS) name that Global Accelerator creates that points to an accelerator's static IPv4 addresses. </p>
    /// <p>The naming convention for the DNS name is the following: A lowercase letter a, followed by a 16-bit random hex string, followed by .awsglobalaccelerator.com. For example: a1234567890abcdef.awsglobalaccelerator.com.</p>
    /// <p>If you have a dual-stack accelerator, you also have a second DNS name, <code>DualStackDnsName</code>, that points to both the A record and the AAAA record for all four static addresses for the accelerator: two IPv4 addresses and two IPv6 addresses.</p>
    /// <p>For more information about the default DNS name, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/dns-addressing-custom-domains.dns-addressing.html"> Support for DNS addressing in Global Accelerator</a> in the <i>Global Accelerator Developer Guide</i>.</p>
    #[doc(hidden)]
    pub dns_name: std::option::Option<std::string::String>,
    /// <p>Describes the deployment status of the accelerator.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::CustomRoutingAcceleratorStatus>,
    /// <p>The date and time that the accelerator was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the accelerator was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl CustomRoutingAccelerator {
    /// <p>The Amazon Resource Name (ARN) of the custom routing accelerator.</p>
    pub fn accelerator_arn(&self) -> std::option::Option<&str> {
        self.accelerator_arn.as_deref()
    }
    /// <p>The name of the accelerator. The name must contain only alphanumeric characters or hyphens (-), and must not begin or end with a hyphen.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The IP address type that an accelerator supports. For a custom routing accelerator, the value must be IPV4.</p>
    pub fn ip_address_type(&self) -> std::option::Option<&crate::types::IpAddressType> {
        self.ip_address_type.as_ref()
    }
    /// <p>Indicates whether the accelerator is enabled. The value is true or false. The default value is true. </p>
    /// <p>If the value is set to true, the accelerator cannot be deleted. If set to false, accelerator can be deleted.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>The static IP addresses that Global Accelerator associates with the accelerator.</p>
    pub fn ip_sets(&self) -> std::option::Option<&[crate::types::IpSet]> {
        self.ip_sets.as_deref()
    }
    /// <p>The Domain Name System (DNS) name that Global Accelerator creates that points to an accelerator's static IPv4 addresses. </p>
    /// <p>The naming convention for the DNS name is the following: A lowercase letter a, followed by a 16-bit random hex string, followed by .awsglobalaccelerator.com. For example: a1234567890abcdef.awsglobalaccelerator.com.</p>
    /// <p>If you have a dual-stack accelerator, you also have a second DNS name, <code>DualStackDnsName</code>, that points to both the A record and the AAAA record for all four static addresses for the accelerator: two IPv4 addresses and two IPv6 addresses.</p>
    /// <p>For more information about the default DNS name, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/dns-addressing-custom-domains.dns-addressing.html"> Support for DNS addressing in Global Accelerator</a> in the <i>Global Accelerator Developer Guide</i>.</p>
    pub fn dns_name(&self) -> std::option::Option<&str> {
        self.dns_name.as_deref()
    }
    /// <p>Describes the deployment status of the accelerator.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::CustomRoutingAcceleratorStatus> {
        self.status.as_ref()
    }
    /// <p>The date and time that the accelerator was created.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The date and time that the accelerator was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl CustomRoutingAccelerator {
    /// Creates a new builder-style object to manufacture [`CustomRoutingAccelerator`](crate::types::CustomRoutingAccelerator).
    pub fn builder() -> crate::types::builders::CustomRoutingAcceleratorBuilder {
        crate::types::builders::CustomRoutingAcceleratorBuilder::default()
    }
}

/// A builder for [`CustomRoutingAccelerator`](crate::types::CustomRoutingAccelerator).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomRoutingAcceleratorBuilder {
    pub(crate) accelerator_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) ip_address_type: std::option::Option<crate::types::IpAddressType>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) ip_sets: std::option::Option<std::vec::Vec<crate::types::IpSet>>,
    pub(crate) dns_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::CustomRoutingAcceleratorStatus>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl CustomRoutingAcceleratorBuilder {
    /// <p>The Amazon Resource Name (ARN) of the custom routing accelerator.</p>
    pub fn accelerator_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.accelerator_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the custom routing accelerator.</p>
    pub fn set_accelerator_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.accelerator_arn = input;
        self
    }
    /// <p>The name of the accelerator. The name must contain only alphanumeric characters or hyphens (-), and must not begin or end with a hyphen.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the accelerator. The name must contain only alphanumeric characters or hyphens (-), and must not begin or end with a hyphen.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The IP address type that an accelerator supports. For a custom routing accelerator, the value must be IPV4.</p>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.ip_address_type = Some(input);
        self
    }
    /// <p>The IP address type that an accelerator supports. For a custom routing accelerator, the value must be IPV4.</p>
    pub fn set_ip_address_type(
        mut self,
        input: std::option::Option<crate::types::IpAddressType>,
    ) -> Self {
        self.ip_address_type = input;
        self
    }
    /// <p>Indicates whether the accelerator is enabled. The value is true or false. The default value is true. </p>
    /// <p>If the value is set to true, the accelerator cannot be deleted. If set to false, accelerator can be deleted.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Indicates whether the accelerator is enabled. The value is true or false. The default value is true. </p>
    /// <p>If the value is set to true, the accelerator cannot be deleted. If set to false, accelerator can be deleted.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// Appends an item to `ip_sets`.
    ///
    /// To override the contents of this collection use [`set_ip_sets`](Self::set_ip_sets).
    ///
    /// <p>The static IP addresses that Global Accelerator associates with the accelerator.</p>
    pub fn ip_sets(mut self, input: crate::types::IpSet) -> Self {
        let mut v = self.ip_sets.unwrap_or_default();
        v.push(input);
        self.ip_sets = Some(v);
        self
    }
    /// <p>The static IP addresses that Global Accelerator associates with the accelerator.</p>
    pub fn set_ip_sets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::IpSet>>,
    ) -> Self {
        self.ip_sets = input;
        self
    }
    /// <p>The Domain Name System (DNS) name that Global Accelerator creates that points to an accelerator's static IPv4 addresses. </p>
    /// <p>The naming convention for the DNS name is the following: A lowercase letter a, followed by a 16-bit random hex string, followed by .awsglobalaccelerator.com. For example: a1234567890abcdef.awsglobalaccelerator.com.</p>
    /// <p>If you have a dual-stack accelerator, you also have a second DNS name, <code>DualStackDnsName</code>, that points to both the A record and the AAAA record for all four static addresses for the accelerator: two IPv4 addresses and two IPv6 addresses.</p>
    /// <p>For more information about the default DNS name, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/dns-addressing-custom-domains.dns-addressing.html"> Support for DNS addressing in Global Accelerator</a> in the <i>Global Accelerator Developer Guide</i>.</p>
    pub fn dns_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.dns_name = Some(input.into());
        self
    }
    /// <p>The Domain Name System (DNS) name that Global Accelerator creates that points to an accelerator's static IPv4 addresses. </p>
    /// <p>The naming convention for the DNS name is the following: A lowercase letter a, followed by a 16-bit random hex string, followed by .awsglobalaccelerator.com. For example: a1234567890abcdef.awsglobalaccelerator.com.</p>
    /// <p>If you have a dual-stack accelerator, you also have a second DNS name, <code>DualStackDnsName</code>, that points to both the A record and the AAAA record for all four static addresses for the accelerator: two IPv4 addresses and two IPv6 addresses.</p>
    /// <p>For more information about the default DNS name, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/dns-addressing-custom-domains.dns-addressing.html"> Support for DNS addressing in Global Accelerator</a> in the <i>Global Accelerator Developer Guide</i>.</p>
    pub fn set_dns_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dns_name = input;
        self
    }
    /// <p>Describes the deployment status of the accelerator.</p>
    pub fn status(mut self, input: crate::types::CustomRoutingAcceleratorStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Describes the deployment status of the accelerator.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::CustomRoutingAcceleratorStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The date and time that the accelerator was created.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The date and time that the accelerator was created.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time that the accelerator was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The date and time that the accelerator was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomRoutingAccelerator`](crate::types::CustomRoutingAccelerator).
    pub fn build(self) -> crate::types::CustomRoutingAccelerator {
        crate::types::CustomRoutingAccelerator {
            accelerator_arn: self.accelerator_arn,
            name: self.name,
            ip_address_type: self.ip_address_type,
            enabled: self.enabled,
            ip_sets: self.ip_sets,
            dns_name: self.dns_name,
            status: self.status,
            created_time: self.created_time,
            last_modified_time: self.last_modified_time,
        }
    }
}
