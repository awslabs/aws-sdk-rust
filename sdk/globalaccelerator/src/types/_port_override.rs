// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Override specific listener ports used to route traffic to endpoints that are part of an endpoint group. For example, you can create a port override in which the listener receives user traffic on ports 80 and 443, but your accelerator routes that traffic to ports 1080 and 1443, respectively, on the endpoints.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/about-endpoint-groups-port-override.html"> Overriding listener ports</a> in the <i>Global Accelerator Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PortOverride {
    /// <p>The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.</p>
    #[doc(hidden)]
    pub listener_port: std::option::Option<i32>,
    /// <p>The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.</p>
    #[doc(hidden)]
    pub endpoint_port: std::option::Option<i32>,
}
impl PortOverride {
    /// <p>The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.</p>
    pub fn listener_port(&self) -> std::option::Option<i32> {
        self.listener_port
    }
    /// <p>The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.</p>
    pub fn endpoint_port(&self) -> std::option::Option<i32> {
        self.endpoint_port
    }
}
impl PortOverride {
    /// Creates a new builder-style object to manufacture [`PortOverride`](crate::types::PortOverride).
    pub fn builder() -> crate::types::builders::PortOverrideBuilder {
        crate::types::builders::PortOverrideBuilder::default()
    }
}

/// A builder for [`PortOverride`](crate::types::PortOverride).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PortOverrideBuilder {
    pub(crate) listener_port: std::option::Option<i32>,
    pub(crate) endpoint_port: std::option::Option<i32>,
}
impl PortOverrideBuilder {
    /// <p>The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.</p>
    pub fn listener_port(mut self, input: i32) -> Self {
        self.listener_port = Some(input);
        self
    }
    /// <p>The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.</p>
    pub fn set_listener_port(mut self, input: std::option::Option<i32>) -> Self {
        self.listener_port = input;
        self
    }
    /// <p>The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.</p>
    pub fn endpoint_port(mut self, input: i32) -> Self {
        self.endpoint_port = Some(input);
        self
    }
    /// <p>The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.</p>
    pub fn set_endpoint_port(mut self, input: std::option::Option<i32>) -> Self {
        self.endpoint_port = input;
        self
    }
    /// Consumes the builder and constructs a [`PortOverride`](crate::types::PortOverride).
    pub fn build(self) -> crate::types::PortOverride {
        crate::types::PortOverride {
            listener_port: self.listener_port,
            endpoint_port: self.endpoint_port,
        }
    }
}
