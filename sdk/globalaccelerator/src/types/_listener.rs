// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type for a listener.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Listener {
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    #[doc(hidden)]
    pub listener_arn: std::option::Option<std::string::String>,
    /// <p>The list of port ranges for the connections from clients to the accelerator.</p>
    #[doc(hidden)]
    pub port_ranges: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    /// <p>The protocol for the connections from clients to the accelerator.</p>
    #[doc(hidden)]
    pub protocol: std::option::Option<crate::types::Protocol>,
    /// <p>Client affinity lets you direct all requests from a user to the same endpoint, if you have stateful applications, regardless of the port and protocol of the client request. Client affinity gives you control over whether to always route each client to the same specific endpoint.</p>
    /// <p>Global Accelerator uses a consistent-flow hashing algorithm to choose the optimal endpoint for a connection. If client affinity is <code>NONE</code>, Global Accelerator uses the "five-tuple" (5-tuple) properties—source IP address, source port, destination IP address, destination port, and protocol—to select the hash value, and then chooses the best endpoint. However, with this setting, if someone uses different ports to connect to Global Accelerator, their connections might not be always routed to the same endpoint because the hash value changes. </p>
    /// <p>If you want a given client to always be routed to the same endpoint, set client affinity to <code>SOURCE_IP</code> instead. When you use the <code>SOURCE_IP</code> setting, Global Accelerator uses the "two-tuple" (2-tuple) properties— source (client) IP address and destination IP address—to select the hash value.</p>
    /// <p>The default value is <code>NONE</code>.</p>
    #[doc(hidden)]
    pub client_affinity: std::option::Option<crate::types::ClientAffinity>,
}
impl Listener {
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    pub fn listener_arn(&self) -> std::option::Option<&str> {
        self.listener_arn.as_deref()
    }
    /// <p>The list of port ranges for the connections from clients to the accelerator.</p>
    pub fn port_ranges(&self) -> std::option::Option<&[crate::types::PortRange]> {
        self.port_ranges.as_deref()
    }
    /// <p>The protocol for the connections from clients to the accelerator.</p>
    pub fn protocol(&self) -> std::option::Option<&crate::types::Protocol> {
        self.protocol.as_ref()
    }
    /// <p>Client affinity lets you direct all requests from a user to the same endpoint, if you have stateful applications, regardless of the port and protocol of the client request. Client affinity gives you control over whether to always route each client to the same specific endpoint.</p>
    /// <p>Global Accelerator uses a consistent-flow hashing algorithm to choose the optimal endpoint for a connection. If client affinity is <code>NONE</code>, Global Accelerator uses the "five-tuple" (5-tuple) properties—source IP address, source port, destination IP address, destination port, and protocol—to select the hash value, and then chooses the best endpoint. However, with this setting, if someone uses different ports to connect to Global Accelerator, their connections might not be always routed to the same endpoint because the hash value changes. </p>
    /// <p>If you want a given client to always be routed to the same endpoint, set client affinity to <code>SOURCE_IP</code> instead. When you use the <code>SOURCE_IP</code> setting, Global Accelerator uses the "two-tuple" (2-tuple) properties— source (client) IP address and destination IP address—to select the hash value.</p>
    /// <p>The default value is <code>NONE</code>.</p>
    pub fn client_affinity(&self) -> std::option::Option<&crate::types::ClientAffinity> {
        self.client_affinity.as_ref()
    }
}
impl Listener {
    /// Creates a new builder-style object to manufacture [`Listener`](crate::types::Listener).
    pub fn builder() -> crate::types::builders::ListenerBuilder {
        crate::types::builders::ListenerBuilder::default()
    }
}

/// A builder for [`Listener`](crate::types::Listener).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListenerBuilder {
    pub(crate) listener_arn: std::option::Option<std::string::String>,
    pub(crate) port_ranges: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    pub(crate) protocol: std::option::Option<crate::types::Protocol>,
    pub(crate) client_affinity: std::option::Option<crate::types::ClientAffinity>,
}
impl ListenerBuilder {
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    pub fn listener_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.listener_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    pub fn set_listener_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.listener_arn = input;
        self
    }
    /// Appends an item to `port_ranges`.
    ///
    /// To override the contents of this collection use [`set_port_ranges`](Self::set_port_ranges).
    ///
    /// <p>The list of port ranges for the connections from clients to the accelerator.</p>
    pub fn port_ranges(mut self, input: crate::types::PortRange) -> Self {
        let mut v = self.port_ranges.unwrap_or_default();
        v.push(input);
        self.port_ranges = Some(v);
        self
    }
    /// <p>The list of port ranges for the connections from clients to the accelerator.</p>
    pub fn set_port_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    ) -> Self {
        self.port_ranges = input;
        self
    }
    /// <p>The protocol for the connections from clients to the accelerator.</p>
    pub fn protocol(mut self, input: crate::types::Protocol) -> Self {
        self.protocol = Some(input);
        self
    }
    /// <p>The protocol for the connections from clients to the accelerator.</p>
    pub fn set_protocol(mut self, input: std::option::Option<crate::types::Protocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>Client affinity lets you direct all requests from a user to the same endpoint, if you have stateful applications, regardless of the port and protocol of the client request. Client affinity gives you control over whether to always route each client to the same specific endpoint.</p>
    /// <p>Global Accelerator uses a consistent-flow hashing algorithm to choose the optimal endpoint for a connection. If client affinity is <code>NONE</code>, Global Accelerator uses the "five-tuple" (5-tuple) properties—source IP address, source port, destination IP address, destination port, and protocol—to select the hash value, and then chooses the best endpoint. However, with this setting, if someone uses different ports to connect to Global Accelerator, their connections might not be always routed to the same endpoint because the hash value changes. </p>
    /// <p>If you want a given client to always be routed to the same endpoint, set client affinity to <code>SOURCE_IP</code> instead. When you use the <code>SOURCE_IP</code> setting, Global Accelerator uses the "two-tuple" (2-tuple) properties— source (client) IP address and destination IP address—to select the hash value.</p>
    /// <p>The default value is <code>NONE</code>.</p>
    pub fn client_affinity(mut self, input: crate::types::ClientAffinity) -> Self {
        self.client_affinity = Some(input);
        self
    }
    /// <p>Client affinity lets you direct all requests from a user to the same endpoint, if you have stateful applications, regardless of the port and protocol of the client request. Client affinity gives you control over whether to always route each client to the same specific endpoint.</p>
    /// <p>Global Accelerator uses a consistent-flow hashing algorithm to choose the optimal endpoint for a connection. If client affinity is <code>NONE</code>, Global Accelerator uses the "five-tuple" (5-tuple) properties—source IP address, source port, destination IP address, destination port, and protocol—to select the hash value, and then chooses the best endpoint. However, with this setting, if someone uses different ports to connect to Global Accelerator, their connections might not be always routed to the same endpoint because the hash value changes. </p>
    /// <p>If you want a given client to always be routed to the same endpoint, set client affinity to <code>SOURCE_IP</code> instead. When you use the <code>SOURCE_IP</code> setting, Global Accelerator uses the "two-tuple" (2-tuple) properties— source (client) IP address and destination IP address—to select the hash value.</p>
    /// <p>The default value is <code>NONE</code>.</p>
    pub fn set_client_affinity(
        mut self,
        input: std::option::Option<crate::types::ClientAffinity>,
    ) -> Self {
        self.client_affinity = input;
        self
    }
    /// Consumes the builder and constructs a [`Listener`](crate::types::Listener).
    pub fn build(self) -> crate::types::Listener {
        crate::types::Listener {
            listener_arn: self.listener_arn,
            port_ranges: self.port_ranges,
            protocol: self.protocol,
            client_affinity: self.client_affinity,
        }
    }
}
