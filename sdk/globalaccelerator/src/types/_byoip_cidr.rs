// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an IP address range that is provisioned for use with your Amazon Web Services resources through bring your own IP address (BYOIP).</p>
/// <p>The following describes each BYOIP <code>State</code> that your IP address range can be in.</p>
/// <ul>
/// <li> <p> <b>PENDING_PROVISIONING</b> — You’ve submitted a request to provision an IP address range but it is not yet provisioned with Global Accelerator.</p> </li>
/// <li> <p> <b>READY</b> — The address range is provisioned with Global Accelerator and can be advertised.</p> </li>
/// <li> <p> <b>PENDING_ADVERTISING</b> — You’ve submitted a request for Global Accelerator to advertise an address range but it is not yet being advertised.</p> </li>
/// <li> <p> <b>ADVERTISING</b> — The address range is being advertised by Global Accelerator.</p> </li>
/// <li> <p> <b>PENDING_WITHDRAWING</b> — You’ve submitted a request to withdraw an address range from being advertised but it is still being advertised by Global Accelerator.</p> </li>
/// <li> <p> <b>PENDING_DEPROVISIONING</b> — You’ve submitted a request to deprovision an address range from Global Accelerator but it is still provisioned.</p> </li>
/// <li> <p> <b>DEPROVISIONED</b> — The address range is deprovisioned from Global Accelerator.</p> </li>
/// <li> <p> <b>FAILED_PROVISION </b> — The request to provision the address range from Global Accelerator was not successful. Please make sure that you provide all of the correct information, and try again. If the request fails a second time, contact Amazon Web Services support.</p> </li>
/// <li> <p> <b>FAILED_ADVERTISING</b> — The request for Global Accelerator to advertise the address range was not successful. Please make sure that you provide all of the correct information, and try again. If the request fails a second time, contact Amazon Web Services support.</p> </li>
/// <li> <p> <b>FAILED_WITHDRAW</b> — The request to withdraw the address range from advertising by Global Accelerator was not successful. Please make sure that you provide all of the correct information, and try again. If the request fails a second time, contact Amazon Web Services support.</p> </li>
/// <li> <p> <b>FAILED_DEPROVISION </b> — The request to deprovision the address range from Global Accelerator was not successful. Please make sure that you provide all of the correct information, and try again. If the request fails a second time, contact Amazon Web Services support.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ByoipCidr {
    /// <p>The address range, in CIDR notation.</p>
    #[doc(hidden)]
    pub cidr: std::option::Option<std::string::String>,
    /// <p>The state of the address pool.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ByoipCidrState>,
    /// <p>A history of status changes for an IP address range that you bring to Global Accelerator through bring your own IP address (BYOIP).</p>
    #[doc(hidden)]
    pub events: std::option::Option<std::vec::Vec<crate::types::ByoipCidrEvent>>,
}
impl ByoipCidr {
    /// <p>The address range, in CIDR notation.</p>
    pub fn cidr(&self) -> std::option::Option<&str> {
        self.cidr.as_deref()
    }
    /// <p>The state of the address pool.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ByoipCidrState> {
        self.state.as_ref()
    }
    /// <p>A history of status changes for an IP address range that you bring to Global Accelerator through bring your own IP address (BYOIP).</p>
    pub fn events(&self) -> std::option::Option<&[crate::types::ByoipCidrEvent]> {
        self.events.as_deref()
    }
}
impl ByoipCidr {
    /// Creates a new builder-style object to manufacture [`ByoipCidr`](crate::types::ByoipCidr).
    pub fn builder() -> crate::types::builders::ByoipCidrBuilder {
        crate::types::builders::ByoipCidrBuilder::default()
    }
}

/// A builder for [`ByoipCidr`](crate::types::ByoipCidr).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ByoipCidrBuilder {
    pub(crate) cidr: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ByoipCidrState>,
    pub(crate) events: std::option::Option<std::vec::Vec<crate::types::ByoipCidrEvent>>,
}
impl ByoipCidrBuilder {
    /// <p>The address range, in CIDR notation.</p>
    pub fn cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.cidr = Some(input.into());
        self
    }
    /// <p>The address range, in CIDR notation.</p>
    pub fn set_cidr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// <p>The state of the address pool.</p>
    pub fn state(mut self, input: crate::types::ByoipCidrState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the address pool.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::ByoipCidrState>) -> Self {
        self.state = input;
        self
    }
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>A history of status changes for an IP address range that you bring to Global Accelerator through bring your own IP address (BYOIP).</p>
    pub fn events(mut self, input: crate::types::ByoipCidrEvent) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input);
        self.events = Some(v);
        self
    }
    /// <p>A history of status changes for an IP address range that you bring to Global Accelerator through bring your own IP address (BYOIP).</p>
    pub fn set_events(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ByoipCidrEvent>>,
    ) -> Self {
        self.events = input;
        self
    }
    /// Consumes the builder and constructs a [`ByoipCidr`](crate::types::ByoipCidr).
    pub fn build(self) -> crate::types::ByoipCidr {
        crate::types::ByoipCidr {
            cidr: self.cidr,
            state: self.state,
            events: self.events,
        }
    }
}
