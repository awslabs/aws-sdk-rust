// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_endpoint_group_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_endpoint_group::CreateEndpointGroupInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.listener_arn {
        object.key("ListenerArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.endpoint_group_region {
        object.key("EndpointGroupRegion").string(var_2.as_str());
    }
    if let Some(var_3) = &input.endpoint_configurations {
        let mut array_4 = object.key("EndpointConfigurations").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_endpoint_configuration::ser_endpoint_configuration(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.traffic_dial_percentage {
        object.key("TrafficDialPercentage").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.health_check_port {
        object.key("HealthCheckPort").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.health_check_protocol {
        object.key("HealthCheckProtocol").string(var_9.as_str());
    }
    if let Some(var_10) = &input.health_check_path {
        object.key("HealthCheckPath").string(var_10.as_str());
    }
    if let Some(var_11) = &input.health_check_interval_seconds {
        object.key("HealthCheckIntervalSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.threshold_count {
        object.key("ThresholdCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_13.as_str());
    }
    if let Some(var_14) = &input.port_overrides {
        let mut array_15 = object.key("PortOverrides").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_port_override::ser_port_override(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}
