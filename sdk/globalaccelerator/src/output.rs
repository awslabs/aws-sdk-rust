// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct WithdrawByoipCidrOutput {
    /// <p>Information about the address pool.</p>
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
}
impl WithdrawByoipCidrOutput {
    /// <p>Information about the address pool.</p>
    pub fn byoip_cidr(&self) -> std::option::Option<&crate::model::ByoipCidr> {
        self.byoip_cidr.as_ref()
    }
}
impl std::fmt::Debug for WithdrawByoipCidrOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("WithdrawByoipCidrOutput");
        formatter.field("byoip_cidr", &self.byoip_cidr);
        formatter.finish()
    }
}
/// See [`WithdrawByoipCidrOutput`](crate::output::WithdrawByoipCidrOutput)
pub mod withdraw_byoip_cidr_output {
    /// A builder for [`WithdrawByoipCidrOutput`](crate::output::WithdrawByoipCidrOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    }
    impl Builder {
        /// <p>Information about the address pool.</p>
        pub fn byoip_cidr(mut self, input: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(input);
            self
        }
        /// <p>Information about the address pool.</p>
        pub fn set_byoip_cidr(
            mut self,
            input: std::option::Option<crate::model::ByoipCidr>,
        ) -> Self {
            self.byoip_cidr = input;
            self
        }
        /// Consumes the builder and constructs a [`WithdrawByoipCidrOutput`](crate::output::WithdrawByoipCidrOutput)
        pub fn build(self) -> crate::output::WithdrawByoipCidrOutput {
            crate::output::WithdrawByoipCidrOutput {
                byoip_cidr: self.byoip_cidr,
            }
        }
    }
}
impl WithdrawByoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`WithdrawByoipCidrOutput`](crate::output::WithdrawByoipCidrOutput)
    pub fn builder() -> crate::output::withdraw_byoip_cidr_output::Builder {
        crate::output::withdraw_byoip_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateListenerOutput {
    /// <p>Information for the updated listener.</p>
    pub listener: std::option::Option<crate::model::Listener>,
}
impl UpdateListenerOutput {
    /// <p>Information for the updated listener.</p>
    pub fn listener(&self) -> std::option::Option<&crate::model::Listener> {
        self.listener.as_ref()
    }
}
impl std::fmt::Debug for UpdateListenerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateListenerOutput");
        formatter.field("listener", &self.listener);
        formatter.finish()
    }
}
/// See [`UpdateListenerOutput`](crate::output::UpdateListenerOutput)
pub mod update_listener_output {
    /// A builder for [`UpdateListenerOutput`](crate::output::UpdateListenerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) listener: std::option::Option<crate::model::Listener>,
    }
    impl Builder {
        /// <p>Information for the updated listener.</p>
        pub fn listener(mut self, input: crate::model::Listener) -> Self {
            self.listener = Some(input);
            self
        }
        /// <p>Information for the updated listener.</p>
        pub fn set_listener(mut self, input: std::option::Option<crate::model::Listener>) -> Self {
            self.listener = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateListenerOutput`](crate::output::UpdateListenerOutput)
        pub fn build(self) -> crate::output::UpdateListenerOutput {
            crate::output::UpdateListenerOutput {
                listener: self.listener,
            }
        }
    }
}
impl UpdateListenerOutput {
    /// Creates a new builder-style object to manufacture [`UpdateListenerOutput`](crate::output::UpdateListenerOutput)
    pub fn builder() -> crate::output::update_listener_output::Builder {
        crate::output::update_listener_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateEndpointGroupOutput {
    /// <p>The information about the endpoint group that was updated.</p>
    pub endpoint_group: std::option::Option<crate::model::EndpointGroup>,
}
impl UpdateEndpointGroupOutput {
    /// <p>The information about the endpoint group that was updated.</p>
    pub fn endpoint_group(&self) -> std::option::Option<&crate::model::EndpointGroup> {
        self.endpoint_group.as_ref()
    }
}
impl std::fmt::Debug for UpdateEndpointGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEndpointGroupOutput");
        formatter.field("endpoint_group", &self.endpoint_group);
        formatter.finish()
    }
}
/// See [`UpdateEndpointGroupOutput`](crate::output::UpdateEndpointGroupOutput)
pub mod update_endpoint_group_output {
    /// A builder for [`UpdateEndpointGroupOutput`](crate::output::UpdateEndpointGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint_group: std::option::Option<crate::model::EndpointGroup>,
    }
    impl Builder {
        /// <p>The information about the endpoint group that was updated.</p>
        pub fn endpoint_group(mut self, input: crate::model::EndpointGroup) -> Self {
            self.endpoint_group = Some(input);
            self
        }
        /// <p>The information about the endpoint group that was updated.</p>
        pub fn set_endpoint_group(
            mut self,
            input: std::option::Option<crate::model::EndpointGroup>,
        ) -> Self {
            self.endpoint_group = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateEndpointGroupOutput`](crate::output::UpdateEndpointGroupOutput)
        pub fn build(self) -> crate::output::UpdateEndpointGroupOutput {
            crate::output::UpdateEndpointGroupOutput {
                endpoint_group: self.endpoint_group,
            }
        }
    }
}
impl UpdateEndpointGroupOutput {
    /// Creates a new builder-style object to manufacture [`UpdateEndpointGroupOutput`](crate::output::UpdateEndpointGroupOutput)
    pub fn builder() -> crate::output::update_endpoint_group_output::Builder {
        crate::output::update_endpoint_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateCustomRoutingListenerOutput {
    /// <p>Information for the updated listener for a custom routing accelerator.</p>
    pub listener: std::option::Option<crate::model::CustomRoutingListener>,
}
impl UpdateCustomRoutingListenerOutput {
    /// <p>Information for the updated listener for a custom routing accelerator.</p>
    pub fn listener(&self) -> std::option::Option<&crate::model::CustomRoutingListener> {
        self.listener.as_ref()
    }
}
impl std::fmt::Debug for UpdateCustomRoutingListenerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCustomRoutingListenerOutput");
        formatter.field("listener", &self.listener);
        formatter.finish()
    }
}
/// See [`UpdateCustomRoutingListenerOutput`](crate::output::UpdateCustomRoutingListenerOutput)
pub mod update_custom_routing_listener_output {
    /// A builder for [`UpdateCustomRoutingListenerOutput`](crate::output::UpdateCustomRoutingListenerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) listener: std::option::Option<crate::model::CustomRoutingListener>,
    }
    impl Builder {
        /// <p>Information for the updated listener for a custom routing accelerator.</p>
        pub fn listener(mut self, input: crate::model::CustomRoutingListener) -> Self {
            self.listener = Some(input);
            self
        }
        /// <p>Information for the updated listener for a custom routing accelerator.</p>
        pub fn set_listener(
            mut self,
            input: std::option::Option<crate::model::CustomRoutingListener>,
        ) -> Self {
            self.listener = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateCustomRoutingListenerOutput`](crate::output::UpdateCustomRoutingListenerOutput)
        pub fn build(self) -> crate::output::UpdateCustomRoutingListenerOutput {
            crate::output::UpdateCustomRoutingListenerOutput {
                listener: self.listener,
            }
        }
    }
}
impl UpdateCustomRoutingListenerOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCustomRoutingListenerOutput`](crate::output::UpdateCustomRoutingListenerOutput)
    pub fn builder() -> crate::output::update_custom_routing_listener_output::Builder {
        crate::output::update_custom_routing_listener_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateCustomRoutingAcceleratorAttributesOutput {
    /// <p>Updated custom routing accelerator.</p>
    pub accelerator_attributes:
        std::option::Option<crate::model::CustomRoutingAcceleratorAttributes>,
}
impl UpdateCustomRoutingAcceleratorAttributesOutput {
    /// <p>Updated custom routing accelerator.</p>
    pub fn accelerator_attributes(
        &self,
    ) -> std::option::Option<&crate::model::CustomRoutingAcceleratorAttributes> {
        self.accelerator_attributes.as_ref()
    }
}
impl std::fmt::Debug for UpdateCustomRoutingAcceleratorAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCustomRoutingAcceleratorAttributesOutput");
        formatter.field("accelerator_attributes", &self.accelerator_attributes);
        formatter.finish()
    }
}
/// See [`UpdateCustomRoutingAcceleratorAttributesOutput`](crate::output::UpdateCustomRoutingAcceleratorAttributesOutput)
pub mod update_custom_routing_accelerator_attributes_output {
    /// A builder for [`UpdateCustomRoutingAcceleratorAttributesOutput`](crate::output::UpdateCustomRoutingAcceleratorAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accelerator_attributes:
            std::option::Option<crate::model::CustomRoutingAcceleratorAttributes>,
    }
    impl Builder {
        /// <p>Updated custom routing accelerator.</p>
        pub fn accelerator_attributes(
            mut self,
            input: crate::model::CustomRoutingAcceleratorAttributes,
        ) -> Self {
            self.accelerator_attributes = Some(input);
            self
        }
        /// <p>Updated custom routing accelerator.</p>
        pub fn set_accelerator_attributes(
            mut self,
            input: std::option::Option<crate::model::CustomRoutingAcceleratorAttributes>,
        ) -> Self {
            self.accelerator_attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateCustomRoutingAcceleratorAttributesOutput`](crate::output::UpdateCustomRoutingAcceleratorAttributesOutput)
        pub fn build(self) -> crate::output::UpdateCustomRoutingAcceleratorAttributesOutput {
            crate::output::UpdateCustomRoutingAcceleratorAttributesOutput {
                accelerator_attributes: self.accelerator_attributes,
            }
        }
    }
}
impl UpdateCustomRoutingAcceleratorAttributesOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCustomRoutingAcceleratorAttributesOutput`](crate::output::UpdateCustomRoutingAcceleratorAttributesOutput)
    pub fn builder() -> crate::output::update_custom_routing_accelerator_attributes_output::Builder
    {
        crate::output::update_custom_routing_accelerator_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateCustomRoutingAcceleratorOutput {
    /// <p>Information about the updated custom routing accelerator.</p>
    pub accelerator: std::option::Option<crate::model::CustomRoutingAccelerator>,
}
impl UpdateCustomRoutingAcceleratorOutput {
    /// <p>Information about the updated custom routing accelerator.</p>
    pub fn accelerator(&self) -> std::option::Option<&crate::model::CustomRoutingAccelerator> {
        self.accelerator.as_ref()
    }
}
impl std::fmt::Debug for UpdateCustomRoutingAcceleratorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCustomRoutingAcceleratorOutput");
        formatter.field("accelerator", &self.accelerator);
        formatter.finish()
    }
}
/// See [`UpdateCustomRoutingAcceleratorOutput`](crate::output::UpdateCustomRoutingAcceleratorOutput)
pub mod update_custom_routing_accelerator_output {
    /// A builder for [`UpdateCustomRoutingAcceleratorOutput`](crate::output::UpdateCustomRoutingAcceleratorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accelerator: std::option::Option<crate::model::CustomRoutingAccelerator>,
    }
    impl Builder {
        /// <p>Information about the updated custom routing accelerator.</p>
        pub fn accelerator(mut self, input: crate::model::CustomRoutingAccelerator) -> Self {
            self.accelerator = Some(input);
            self
        }
        /// <p>Information about the updated custom routing accelerator.</p>
        pub fn set_accelerator(
            mut self,
            input: std::option::Option<crate::model::CustomRoutingAccelerator>,
        ) -> Self {
            self.accelerator = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateCustomRoutingAcceleratorOutput`](crate::output::UpdateCustomRoutingAcceleratorOutput)
        pub fn build(self) -> crate::output::UpdateCustomRoutingAcceleratorOutput {
            crate::output::UpdateCustomRoutingAcceleratorOutput {
                accelerator: self.accelerator,
            }
        }
    }
}
impl UpdateCustomRoutingAcceleratorOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCustomRoutingAcceleratorOutput`](crate::output::UpdateCustomRoutingAcceleratorOutput)
    pub fn builder() -> crate::output::update_custom_routing_accelerator_output::Builder {
        crate::output::update_custom_routing_accelerator_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateAcceleratorAttributesOutput {
    /// <p>Updated attributes for the accelerator.</p>
    pub accelerator_attributes: std::option::Option<crate::model::AcceleratorAttributes>,
}
impl UpdateAcceleratorAttributesOutput {
    /// <p>Updated attributes for the accelerator.</p>
    pub fn accelerator_attributes(
        &self,
    ) -> std::option::Option<&crate::model::AcceleratorAttributes> {
        self.accelerator_attributes.as_ref()
    }
}
impl std::fmt::Debug for UpdateAcceleratorAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAcceleratorAttributesOutput");
        formatter.field("accelerator_attributes", &self.accelerator_attributes);
        formatter.finish()
    }
}
/// See [`UpdateAcceleratorAttributesOutput`](crate::output::UpdateAcceleratorAttributesOutput)
pub mod update_accelerator_attributes_output {
    /// A builder for [`UpdateAcceleratorAttributesOutput`](crate::output::UpdateAcceleratorAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accelerator_attributes: std::option::Option<crate::model::AcceleratorAttributes>,
    }
    impl Builder {
        /// <p>Updated attributes for the accelerator.</p>
        pub fn accelerator_attributes(
            mut self,
            input: crate::model::AcceleratorAttributes,
        ) -> Self {
            self.accelerator_attributes = Some(input);
            self
        }
        /// <p>Updated attributes for the accelerator.</p>
        pub fn set_accelerator_attributes(
            mut self,
            input: std::option::Option<crate::model::AcceleratorAttributes>,
        ) -> Self {
            self.accelerator_attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAcceleratorAttributesOutput`](crate::output::UpdateAcceleratorAttributesOutput)
        pub fn build(self) -> crate::output::UpdateAcceleratorAttributesOutput {
            crate::output::UpdateAcceleratorAttributesOutput {
                accelerator_attributes: self.accelerator_attributes,
            }
        }
    }
}
impl UpdateAcceleratorAttributesOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAcceleratorAttributesOutput`](crate::output::UpdateAcceleratorAttributesOutput)
    pub fn builder() -> crate::output::update_accelerator_attributes_output::Builder {
        crate::output::update_accelerator_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateAcceleratorOutput {
    /// <p>Information about the updated accelerator.</p>
    pub accelerator: std::option::Option<crate::model::Accelerator>,
}
impl UpdateAcceleratorOutput {
    /// <p>Information about the updated accelerator.</p>
    pub fn accelerator(&self) -> std::option::Option<&crate::model::Accelerator> {
        self.accelerator.as_ref()
    }
}
impl std::fmt::Debug for UpdateAcceleratorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAcceleratorOutput");
        formatter.field("accelerator", &self.accelerator);
        formatter.finish()
    }
}
/// See [`UpdateAcceleratorOutput`](crate::output::UpdateAcceleratorOutput)
pub mod update_accelerator_output {
    /// A builder for [`UpdateAcceleratorOutput`](crate::output::UpdateAcceleratorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accelerator: std::option::Option<crate::model::Accelerator>,
    }
    impl Builder {
        /// <p>Information about the updated accelerator.</p>
        pub fn accelerator(mut self, input: crate::model::Accelerator) -> Self {
            self.accelerator = Some(input);
            self
        }
        /// <p>Information about the updated accelerator.</p>
        pub fn set_accelerator(
            mut self,
            input: std::option::Option<crate::model::Accelerator>,
        ) -> Self {
            self.accelerator = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAcceleratorOutput`](crate::output::UpdateAcceleratorOutput)
        pub fn build(self) -> crate::output::UpdateAcceleratorOutput {
            crate::output::UpdateAcceleratorOutput {
                accelerator: self.accelerator,
            }
        }
    }
}
impl UpdateAcceleratorOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAcceleratorOutput`](crate::output::UpdateAcceleratorOutput)
    pub fn builder() -> crate::output::update_accelerator_output::Builder {
        crate::output::update_accelerator_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveCustomRoutingEndpointsOutput {}
impl std::fmt::Debug for RemoveCustomRoutingEndpointsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveCustomRoutingEndpointsOutput");
        formatter.finish()
    }
}
/// See [`RemoveCustomRoutingEndpointsOutput`](crate::output::RemoveCustomRoutingEndpointsOutput)
pub mod remove_custom_routing_endpoints_output {
    /// A builder for [`RemoveCustomRoutingEndpointsOutput`](crate::output::RemoveCustomRoutingEndpointsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RemoveCustomRoutingEndpointsOutput`](crate::output::RemoveCustomRoutingEndpointsOutput)
        pub fn build(self) -> crate::output::RemoveCustomRoutingEndpointsOutput {
            crate::output::RemoveCustomRoutingEndpointsOutput {}
        }
    }
}
impl RemoveCustomRoutingEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`RemoveCustomRoutingEndpointsOutput`](crate::output::RemoveCustomRoutingEndpointsOutput)
    pub fn builder() -> crate::output::remove_custom_routing_endpoints_output::Builder {
        crate::output::remove_custom_routing_endpoints_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ProvisionByoipCidrOutput {
    /// <p>Information about the address range.</p>
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
}
impl ProvisionByoipCidrOutput {
    /// <p>Information about the address range.</p>
    pub fn byoip_cidr(&self) -> std::option::Option<&crate::model::ByoipCidr> {
        self.byoip_cidr.as_ref()
    }
}
impl std::fmt::Debug for ProvisionByoipCidrOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ProvisionByoipCidrOutput");
        formatter.field("byoip_cidr", &self.byoip_cidr);
        formatter.finish()
    }
}
/// See [`ProvisionByoipCidrOutput`](crate::output::ProvisionByoipCidrOutput)
pub mod provision_byoip_cidr_output {
    /// A builder for [`ProvisionByoipCidrOutput`](crate::output::ProvisionByoipCidrOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    }
    impl Builder {
        /// <p>Information about the address range.</p>
        pub fn byoip_cidr(mut self, input: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(input);
            self
        }
        /// <p>Information about the address range.</p>
        pub fn set_byoip_cidr(
            mut self,
            input: std::option::Option<crate::model::ByoipCidr>,
        ) -> Self {
            self.byoip_cidr = input;
            self
        }
        /// Consumes the builder and constructs a [`ProvisionByoipCidrOutput`](crate::output::ProvisionByoipCidrOutput)
        pub fn build(self) -> crate::output::ProvisionByoipCidrOutput {
            crate::output::ProvisionByoipCidrOutput {
                byoip_cidr: self.byoip_cidr,
            }
        }
    }
}
impl ProvisionByoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`ProvisionByoipCidrOutput`](crate::output::ProvisionByoipCidrOutput)
    pub fn builder() -> crate::output::provision_byoip_cidr_output::Builder {
        crate::output::provision_byoip_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>Root level tag for the Tags parameters.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl ListTagsForResourceOutput {
    /// <p>Root level tag for the Tags parameters.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Root level tag for the Tags parameters.</p>
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        /// <p>Root level tag for the Tags parameters.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListListenersOutput {
    /// <p>The list of listeners for an accelerator.</p>
    pub listeners: std::option::Option<std::vec::Vec<crate::model::Listener>>,
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListListenersOutput {
    /// <p>The list of listeners for an accelerator.</p>
    pub fn listeners(&self) -> std::option::Option<&[crate::model::Listener]> {
        self.listeners.as_deref()
    }
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListListenersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListListenersOutput");
        formatter.field("listeners", &self.listeners);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListListenersOutput`](crate::output::ListListenersOutput)
pub mod list_listeners_output {
    /// A builder for [`ListListenersOutput`](crate::output::ListListenersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) listeners: std::option::Option<std::vec::Vec<crate::model::Listener>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `listeners`.
        ///
        /// To override the contents of this collection use [`set_listeners`](Self::set_listeners).
        ///
        /// <p>The list of listeners for an accelerator.</p>
        pub fn listeners(mut self, input: impl Into<crate::model::Listener>) -> Self {
            let mut v = self.listeners.unwrap_or_default();
            v.push(input.into());
            self.listeners = Some(v);
            self
        }
        /// <p>The list of listeners for an accelerator.</p>
        pub fn set_listeners(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Listener>>,
        ) -> Self {
            self.listeners = input;
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListListenersOutput`](crate::output::ListListenersOutput)
        pub fn build(self) -> crate::output::ListListenersOutput {
            crate::output::ListListenersOutput {
                listeners: self.listeners,
                next_token: self.next_token,
            }
        }
    }
}
impl ListListenersOutput {
    /// Creates a new builder-style object to manufacture [`ListListenersOutput`](crate::output::ListListenersOutput)
    pub fn builder() -> crate::output::list_listeners_output::Builder {
        crate::output::list_listeners_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListEndpointGroupsOutput {
    /// <p>The list of the endpoint groups associated with a listener.</p>
    pub endpoint_groups: std::option::Option<std::vec::Vec<crate::model::EndpointGroup>>,
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListEndpointGroupsOutput {
    /// <p>The list of the endpoint groups associated with a listener.</p>
    pub fn endpoint_groups(&self) -> std::option::Option<&[crate::model::EndpointGroup]> {
        self.endpoint_groups.as_deref()
    }
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListEndpointGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListEndpointGroupsOutput");
        formatter.field("endpoint_groups", &self.endpoint_groups);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListEndpointGroupsOutput`](crate::output::ListEndpointGroupsOutput)
pub mod list_endpoint_groups_output {
    /// A builder for [`ListEndpointGroupsOutput`](crate::output::ListEndpointGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint_groups: std::option::Option<std::vec::Vec<crate::model::EndpointGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `endpoint_groups`.
        ///
        /// To override the contents of this collection use [`set_endpoint_groups`](Self::set_endpoint_groups).
        ///
        /// <p>The list of the endpoint groups associated with a listener.</p>
        pub fn endpoint_groups(mut self, input: impl Into<crate::model::EndpointGroup>) -> Self {
            let mut v = self.endpoint_groups.unwrap_or_default();
            v.push(input.into());
            self.endpoint_groups = Some(v);
            self
        }
        /// <p>The list of the endpoint groups associated with a listener.</p>
        pub fn set_endpoint_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EndpointGroup>>,
        ) -> Self {
            self.endpoint_groups = input;
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListEndpointGroupsOutput`](crate::output::ListEndpointGroupsOutput)
        pub fn build(self) -> crate::output::ListEndpointGroupsOutput {
            crate::output::ListEndpointGroupsOutput {
                endpoint_groups: self.endpoint_groups,
                next_token: self.next_token,
            }
        }
    }
}
impl ListEndpointGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListEndpointGroupsOutput`](crate::output::ListEndpointGroupsOutput)
    pub fn builder() -> crate::output::list_endpoint_groups_output::Builder {
        crate::output::list_endpoint_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListCustomRoutingPortMappingsByDestinationOutput {
    /// <p>The port mappings for the endpoint IP address that you specified in the request.</p>
    pub destination_port_mappings:
        std::option::Option<std::vec::Vec<crate::model::DestinationPortMapping>>,
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListCustomRoutingPortMappingsByDestinationOutput {
    /// <p>The port mappings for the endpoint IP address that you specified in the request.</p>
    pub fn destination_port_mappings(
        &self,
    ) -> std::option::Option<&[crate::model::DestinationPortMapping]> {
        self.destination_port_mappings.as_deref()
    }
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListCustomRoutingPortMappingsByDestinationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListCustomRoutingPortMappingsByDestinationOutput");
        formatter.field("destination_port_mappings", &self.destination_port_mappings);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListCustomRoutingPortMappingsByDestinationOutput`](crate::output::ListCustomRoutingPortMappingsByDestinationOutput)
pub mod list_custom_routing_port_mappings_by_destination_output {
    /// A builder for [`ListCustomRoutingPortMappingsByDestinationOutput`](crate::output::ListCustomRoutingPortMappingsByDestinationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) destination_port_mappings:
            std::option::Option<std::vec::Vec<crate::model::DestinationPortMapping>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `destination_port_mappings`.
        ///
        /// To override the contents of this collection use [`set_destination_port_mappings`](Self::set_destination_port_mappings).
        ///
        /// <p>The port mappings for the endpoint IP address that you specified in the request.</p>
        pub fn destination_port_mappings(
            mut self,
            input: impl Into<crate::model::DestinationPortMapping>,
        ) -> Self {
            let mut v = self.destination_port_mappings.unwrap_or_default();
            v.push(input.into());
            self.destination_port_mappings = Some(v);
            self
        }
        /// <p>The port mappings for the endpoint IP address that you specified in the request.</p>
        pub fn set_destination_port_mappings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DestinationPortMapping>>,
        ) -> Self {
            self.destination_port_mappings = input;
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListCustomRoutingPortMappingsByDestinationOutput`](crate::output::ListCustomRoutingPortMappingsByDestinationOutput)
        pub fn build(self) -> crate::output::ListCustomRoutingPortMappingsByDestinationOutput {
            crate::output::ListCustomRoutingPortMappingsByDestinationOutput {
                destination_port_mappings: self.destination_port_mappings,
                next_token: self.next_token,
            }
        }
    }
}
impl ListCustomRoutingPortMappingsByDestinationOutput {
    /// Creates a new builder-style object to manufacture [`ListCustomRoutingPortMappingsByDestinationOutput`](crate::output::ListCustomRoutingPortMappingsByDestinationOutput)
    pub fn builder(
    ) -> crate::output::list_custom_routing_port_mappings_by_destination_output::Builder {
        crate::output::list_custom_routing_port_mappings_by_destination_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListCustomRoutingPortMappingsOutput {
    /// <p>The port mappings for a custom routing accelerator.</p>
    pub port_mappings: std::option::Option<std::vec::Vec<crate::model::PortMapping>>,
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListCustomRoutingPortMappingsOutput {
    /// <p>The port mappings for a custom routing accelerator.</p>
    pub fn port_mappings(&self) -> std::option::Option<&[crate::model::PortMapping]> {
        self.port_mappings.as_deref()
    }
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListCustomRoutingPortMappingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListCustomRoutingPortMappingsOutput");
        formatter.field("port_mappings", &self.port_mappings);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListCustomRoutingPortMappingsOutput`](crate::output::ListCustomRoutingPortMappingsOutput)
pub mod list_custom_routing_port_mappings_output {
    /// A builder for [`ListCustomRoutingPortMappingsOutput`](crate::output::ListCustomRoutingPortMappingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) port_mappings: std::option::Option<std::vec::Vec<crate::model::PortMapping>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `port_mappings`.
        ///
        /// To override the contents of this collection use [`set_port_mappings`](Self::set_port_mappings).
        ///
        /// <p>The port mappings for a custom routing accelerator.</p>
        pub fn port_mappings(mut self, input: impl Into<crate::model::PortMapping>) -> Self {
            let mut v = self.port_mappings.unwrap_or_default();
            v.push(input.into());
            self.port_mappings = Some(v);
            self
        }
        /// <p>The port mappings for a custom routing accelerator.</p>
        pub fn set_port_mappings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PortMapping>>,
        ) -> Self {
            self.port_mappings = input;
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListCustomRoutingPortMappingsOutput`](crate::output::ListCustomRoutingPortMappingsOutput)
        pub fn build(self) -> crate::output::ListCustomRoutingPortMappingsOutput {
            crate::output::ListCustomRoutingPortMappingsOutput {
                port_mappings: self.port_mappings,
                next_token: self.next_token,
            }
        }
    }
}
impl ListCustomRoutingPortMappingsOutput {
    /// Creates a new builder-style object to manufacture [`ListCustomRoutingPortMappingsOutput`](crate::output::ListCustomRoutingPortMappingsOutput)
    pub fn builder() -> crate::output::list_custom_routing_port_mappings_output::Builder {
        crate::output::list_custom_routing_port_mappings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListCustomRoutingListenersOutput {
    /// <p>The list of listeners for a custom routing accelerator.</p>
    pub listeners: std::option::Option<std::vec::Vec<crate::model::CustomRoutingListener>>,
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListCustomRoutingListenersOutput {
    /// <p>The list of listeners for a custom routing accelerator.</p>
    pub fn listeners(&self) -> std::option::Option<&[crate::model::CustomRoutingListener]> {
        self.listeners.as_deref()
    }
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListCustomRoutingListenersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListCustomRoutingListenersOutput");
        formatter.field("listeners", &self.listeners);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListCustomRoutingListenersOutput`](crate::output::ListCustomRoutingListenersOutput)
pub mod list_custom_routing_listeners_output {
    /// A builder for [`ListCustomRoutingListenersOutput`](crate::output::ListCustomRoutingListenersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) listeners:
            std::option::Option<std::vec::Vec<crate::model::CustomRoutingListener>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `listeners`.
        ///
        /// To override the contents of this collection use [`set_listeners`](Self::set_listeners).
        ///
        /// <p>The list of listeners for a custom routing accelerator.</p>
        pub fn listeners(mut self, input: impl Into<crate::model::CustomRoutingListener>) -> Self {
            let mut v = self.listeners.unwrap_or_default();
            v.push(input.into());
            self.listeners = Some(v);
            self
        }
        /// <p>The list of listeners for a custom routing accelerator.</p>
        pub fn set_listeners(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CustomRoutingListener>>,
        ) -> Self {
            self.listeners = input;
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListCustomRoutingListenersOutput`](crate::output::ListCustomRoutingListenersOutput)
        pub fn build(self) -> crate::output::ListCustomRoutingListenersOutput {
            crate::output::ListCustomRoutingListenersOutput {
                listeners: self.listeners,
                next_token: self.next_token,
            }
        }
    }
}
impl ListCustomRoutingListenersOutput {
    /// Creates a new builder-style object to manufacture [`ListCustomRoutingListenersOutput`](crate::output::ListCustomRoutingListenersOutput)
    pub fn builder() -> crate::output::list_custom_routing_listeners_output::Builder {
        crate::output::list_custom_routing_listeners_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListCustomRoutingEndpointGroupsOutput {
    /// <p>The list of the endpoint groups associated with a listener for a custom routing accelerator.</p>
    pub endpoint_groups:
        std::option::Option<std::vec::Vec<crate::model::CustomRoutingEndpointGroup>>,
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListCustomRoutingEndpointGroupsOutput {
    /// <p>The list of the endpoint groups associated with a listener for a custom routing accelerator.</p>
    pub fn endpoint_groups(
        &self,
    ) -> std::option::Option<&[crate::model::CustomRoutingEndpointGroup]> {
        self.endpoint_groups.as_deref()
    }
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListCustomRoutingEndpointGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListCustomRoutingEndpointGroupsOutput");
        formatter.field("endpoint_groups", &self.endpoint_groups);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListCustomRoutingEndpointGroupsOutput`](crate::output::ListCustomRoutingEndpointGroupsOutput)
pub mod list_custom_routing_endpoint_groups_output {
    /// A builder for [`ListCustomRoutingEndpointGroupsOutput`](crate::output::ListCustomRoutingEndpointGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint_groups:
            std::option::Option<std::vec::Vec<crate::model::CustomRoutingEndpointGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `endpoint_groups`.
        ///
        /// To override the contents of this collection use [`set_endpoint_groups`](Self::set_endpoint_groups).
        ///
        /// <p>The list of the endpoint groups associated with a listener for a custom routing accelerator.</p>
        pub fn endpoint_groups(
            mut self,
            input: impl Into<crate::model::CustomRoutingEndpointGroup>,
        ) -> Self {
            let mut v = self.endpoint_groups.unwrap_or_default();
            v.push(input.into());
            self.endpoint_groups = Some(v);
            self
        }
        /// <p>The list of the endpoint groups associated with a listener for a custom routing accelerator.</p>
        pub fn set_endpoint_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CustomRoutingEndpointGroup>>,
        ) -> Self {
            self.endpoint_groups = input;
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListCustomRoutingEndpointGroupsOutput`](crate::output::ListCustomRoutingEndpointGroupsOutput)
        pub fn build(self) -> crate::output::ListCustomRoutingEndpointGroupsOutput {
            crate::output::ListCustomRoutingEndpointGroupsOutput {
                endpoint_groups: self.endpoint_groups,
                next_token: self.next_token,
            }
        }
    }
}
impl ListCustomRoutingEndpointGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListCustomRoutingEndpointGroupsOutput`](crate::output::ListCustomRoutingEndpointGroupsOutput)
    pub fn builder() -> crate::output::list_custom_routing_endpoint_groups_output::Builder {
        crate::output::list_custom_routing_endpoint_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListCustomRoutingAcceleratorsOutput {
    /// <p>The list of custom routing accelerators for a customer account.</p>
    pub accelerators: std::option::Option<std::vec::Vec<crate::model::CustomRoutingAccelerator>>,
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListCustomRoutingAcceleratorsOutput {
    /// <p>The list of custom routing accelerators for a customer account.</p>
    pub fn accelerators(&self) -> std::option::Option<&[crate::model::CustomRoutingAccelerator]> {
        self.accelerators.as_deref()
    }
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListCustomRoutingAcceleratorsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListCustomRoutingAcceleratorsOutput");
        formatter.field("accelerators", &self.accelerators);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListCustomRoutingAcceleratorsOutput`](crate::output::ListCustomRoutingAcceleratorsOutput)
pub mod list_custom_routing_accelerators_output {
    /// A builder for [`ListCustomRoutingAcceleratorsOutput`](crate::output::ListCustomRoutingAcceleratorsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accelerators:
            std::option::Option<std::vec::Vec<crate::model::CustomRoutingAccelerator>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `accelerators`.
        ///
        /// To override the contents of this collection use [`set_accelerators`](Self::set_accelerators).
        ///
        /// <p>The list of custom routing accelerators for a customer account.</p>
        pub fn accelerators(
            mut self,
            input: impl Into<crate::model::CustomRoutingAccelerator>,
        ) -> Self {
            let mut v = self.accelerators.unwrap_or_default();
            v.push(input.into());
            self.accelerators = Some(v);
            self
        }
        /// <p>The list of custom routing accelerators for a customer account.</p>
        pub fn set_accelerators(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CustomRoutingAccelerator>>,
        ) -> Self {
            self.accelerators = input;
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListCustomRoutingAcceleratorsOutput`](crate::output::ListCustomRoutingAcceleratorsOutput)
        pub fn build(self) -> crate::output::ListCustomRoutingAcceleratorsOutput {
            crate::output::ListCustomRoutingAcceleratorsOutput {
                accelerators: self.accelerators,
                next_token: self.next_token,
            }
        }
    }
}
impl ListCustomRoutingAcceleratorsOutput {
    /// Creates a new builder-style object to manufacture [`ListCustomRoutingAcceleratorsOutput`](crate::output::ListCustomRoutingAcceleratorsOutput)
    pub fn builder() -> crate::output::list_custom_routing_accelerators_output::Builder {
        crate::output::list_custom_routing_accelerators_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListByoipCidrsOutput {
    /// <p>Information about your address ranges.</p>
    pub byoip_cidrs: std::option::Option<std::vec::Vec<crate::model::ByoipCidr>>,
    /// <p>The token for the next page of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListByoipCidrsOutput {
    /// <p>Information about your address ranges.</p>
    pub fn byoip_cidrs(&self) -> std::option::Option<&[crate::model::ByoipCidr]> {
        self.byoip_cidrs.as_deref()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListByoipCidrsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListByoipCidrsOutput");
        formatter.field("byoip_cidrs", &self.byoip_cidrs);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListByoipCidrsOutput`](crate::output::ListByoipCidrsOutput)
pub mod list_byoip_cidrs_output {
    /// A builder for [`ListByoipCidrsOutput`](crate::output::ListByoipCidrsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidrs: std::option::Option<std::vec::Vec<crate::model::ByoipCidr>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `byoip_cidrs`.
        ///
        /// To override the contents of this collection use [`set_byoip_cidrs`](Self::set_byoip_cidrs).
        ///
        /// <p>Information about your address ranges.</p>
        pub fn byoip_cidrs(mut self, input: impl Into<crate::model::ByoipCidr>) -> Self {
            let mut v = self.byoip_cidrs.unwrap_or_default();
            v.push(input.into());
            self.byoip_cidrs = Some(v);
            self
        }
        /// <p>Information about your address ranges.</p>
        pub fn set_byoip_cidrs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ByoipCidr>>,
        ) -> Self {
            self.byoip_cidrs = input;
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListByoipCidrsOutput`](crate::output::ListByoipCidrsOutput)
        pub fn build(self) -> crate::output::ListByoipCidrsOutput {
            crate::output::ListByoipCidrsOutput {
                byoip_cidrs: self.byoip_cidrs,
                next_token: self.next_token,
            }
        }
    }
}
impl ListByoipCidrsOutput {
    /// Creates a new builder-style object to manufacture [`ListByoipCidrsOutput`](crate::output::ListByoipCidrsOutput)
    pub fn builder() -> crate::output::list_byoip_cidrs_output::Builder {
        crate::output::list_byoip_cidrs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAcceleratorsOutput {
    /// <p>The list of accelerators for a customer account.</p>
    pub accelerators: std::option::Option<std::vec::Vec<crate::model::Accelerator>>,
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAcceleratorsOutput {
    /// <p>The list of accelerators for a customer account.</p>
    pub fn accelerators(&self) -> std::option::Option<&[crate::model::Accelerator]> {
        self.accelerators.as_deref()
    }
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAcceleratorsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAcceleratorsOutput");
        formatter.field("accelerators", &self.accelerators);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAcceleratorsOutput`](crate::output::ListAcceleratorsOutput)
pub mod list_accelerators_output {
    /// A builder for [`ListAcceleratorsOutput`](crate::output::ListAcceleratorsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accelerators: std::option::Option<std::vec::Vec<crate::model::Accelerator>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `accelerators`.
        ///
        /// To override the contents of this collection use [`set_accelerators`](Self::set_accelerators).
        ///
        /// <p>The list of accelerators for a customer account.</p>
        pub fn accelerators(mut self, input: impl Into<crate::model::Accelerator>) -> Self {
            let mut v = self.accelerators.unwrap_or_default();
            v.push(input.into());
            self.accelerators = Some(v);
            self
        }
        /// <p>The list of accelerators for a customer account.</p>
        pub fn set_accelerators(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Accelerator>>,
        ) -> Self {
            self.accelerators = input;
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results. You receive this token from a previous call.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAcceleratorsOutput`](crate::output::ListAcceleratorsOutput)
        pub fn build(self) -> crate::output::ListAcceleratorsOutput {
            crate::output::ListAcceleratorsOutput {
                accelerators: self.accelerators,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAcceleratorsOutput {
    /// Creates a new builder-style object to manufacture [`ListAcceleratorsOutput`](crate::output::ListAcceleratorsOutput)
    pub fn builder() -> crate::output::list_accelerators_output::Builder {
        crate::output::list_accelerators_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeListenerOutput {
    /// <p>The description of a listener.</p>
    pub listener: std::option::Option<crate::model::Listener>,
}
impl DescribeListenerOutput {
    /// <p>The description of a listener.</p>
    pub fn listener(&self) -> std::option::Option<&crate::model::Listener> {
        self.listener.as_ref()
    }
}
impl std::fmt::Debug for DescribeListenerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeListenerOutput");
        formatter.field("listener", &self.listener);
        formatter.finish()
    }
}
/// See [`DescribeListenerOutput`](crate::output::DescribeListenerOutput)
pub mod describe_listener_output {
    /// A builder for [`DescribeListenerOutput`](crate::output::DescribeListenerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) listener: std::option::Option<crate::model::Listener>,
    }
    impl Builder {
        /// <p>The description of a listener.</p>
        pub fn listener(mut self, input: crate::model::Listener) -> Self {
            self.listener = Some(input);
            self
        }
        /// <p>The description of a listener.</p>
        pub fn set_listener(mut self, input: std::option::Option<crate::model::Listener>) -> Self {
            self.listener = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeListenerOutput`](crate::output::DescribeListenerOutput)
        pub fn build(self) -> crate::output::DescribeListenerOutput {
            crate::output::DescribeListenerOutput {
                listener: self.listener,
            }
        }
    }
}
impl DescribeListenerOutput {
    /// Creates a new builder-style object to manufacture [`DescribeListenerOutput`](crate::output::DescribeListenerOutput)
    pub fn builder() -> crate::output::describe_listener_output::Builder {
        crate::output::describe_listener_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEndpointGroupOutput {
    /// <p>The description of an endpoint group.</p>
    pub endpoint_group: std::option::Option<crate::model::EndpointGroup>,
}
impl DescribeEndpointGroupOutput {
    /// <p>The description of an endpoint group.</p>
    pub fn endpoint_group(&self) -> std::option::Option<&crate::model::EndpointGroup> {
        self.endpoint_group.as_ref()
    }
}
impl std::fmt::Debug for DescribeEndpointGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEndpointGroupOutput");
        formatter.field("endpoint_group", &self.endpoint_group);
        formatter.finish()
    }
}
/// See [`DescribeEndpointGroupOutput`](crate::output::DescribeEndpointGroupOutput)
pub mod describe_endpoint_group_output {
    /// A builder for [`DescribeEndpointGroupOutput`](crate::output::DescribeEndpointGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint_group: std::option::Option<crate::model::EndpointGroup>,
    }
    impl Builder {
        /// <p>The description of an endpoint group.</p>
        pub fn endpoint_group(mut self, input: crate::model::EndpointGroup) -> Self {
            self.endpoint_group = Some(input);
            self
        }
        /// <p>The description of an endpoint group.</p>
        pub fn set_endpoint_group(
            mut self,
            input: std::option::Option<crate::model::EndpointGroup>,
        ) -> Self {
            self.endpoint_group = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEndpointGroupOutput`](crate::output::DescribeEndpointGroupOutput)
        pub fn build(self) -> crate::output::DescribeEndpointGroupOutput {
            crate::output::DescribeEndpointGroupOutput {
                endpoint_group: self.endpoint_group,
            }
        }
    }
}
impl DescribeEndpointGroupOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEndpointGroupOutput`](crate::output::DescribeEndpointGroupOutput)
    pub fn builder() -> crate::output::describe_endpoint_group_output::Builder {
        crate::output::describe_endpoint_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCustomRoutingListenerOutput {
    /// <p>The description of a listener for a custom routing accelerator.</p>
    pub listener: std::option::Option<crate::model::CustomRoutingListener>,
}
impl DescribeCustomRoutingListenerOutput {
    /// <p>The description of a listener for a custom routing accelerator.</p>
    pub fn listener(&self) -> std::option::Option<&crate::model::CustomRoutingListener> {
        self.listener.as_ref()
    }
}
impl std::fmt::Debug for DescribeCustomRoutingListenerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCustomRoutingListenerOutput");
        formatter.field("listener", &self.listener);
        formatter.finish()
    }
}
/// See [`DescribeCustomRoutingListenerOutput`](crate::output::DescribeCustomRoutingListenerOutput)
pub mod describe_custom_routing_listener_output {
    /// A builder for [`DescribeCustomRoutingListenerOutput`](crate::output::DescribeCustomRoutingListenerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) listener: std::option::Option<crate::model::CustomRoutingListener>,
    }
    impl Builder {
        /// <p>The description of a listener for a custom routing accelerator.</p>
        pub fn listener(mut self, input: crate::model::CustomRoutingListener) -> Self {
            self.listener = Some(input);
            self
        }
        /// <p>The description of a listener for a custom routing accelerator.</p>
        pub fn set_listener(
            mut self,
            input: std::option::Option<crate::model::CustomRoutingListener>,
        ) -> Self {
            self.listener = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCustomRoutingListenerOutput`](crate::output::DescribeCustomRoutingListenerOutput)
        pub fn build(self) -> crate::output::DescribeCustomRoutingListenerOutput {
            crate::output::DescribeCustomRoutingListenerOutput {
                listener: self.listener,
            }
        }
    }
}
impl DescribeCustomRoutingListenerOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCustomRoutingListenerOutput`](crate::output::DescribeCustomRoutingListenerOutput)
    pub fn builder() -> crate::output::describe_custom_routing_listener_output::Builder {
        crate::output::describe_custom_routing_listener_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCustomRoutingEndpointGroupOutput {
    /// <p>The description of an endpoint group for a custom routing accelerator.</p>
    pub endpoint_group: std::option::Option<crate::model::CustomRoutingEndpointGroup>,
}
impl DescribeCustomRoutingEndpointGroupOutput {
    /// <p>The description of an endpoint group for a custom routing accelerator.</p>
    pub fn endpoint_group(&self) -> std::option::Option<&crate::model::CustomRoutingEndpointGroup> {
        self.endpoint_group.as_ref()
    }
}
impl std::fmt::Debug for DescribeCustomRoutingEndpointGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCustomRoutingEndpointGroupOutput");
        formatter.field("endpoint_group", &self.endpoint_group);
        formatter.finish()
    }
}
/// See [`DescribeCustomRoutingEndpointGroupOutput`](crate::output::DescribeCustomRoutingEndpointGroupOutput)
pub mod describe_custom_routing_endpoint_group_output {
    /// A builder for [`DescribeCustomRoutingEndpointGroupOutput`](crate::output::DescribeCustomRoutingEndpointGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint_group: std::option::Option<crate::model::CustomRoutingEndpointGroup>,
    }
    impl Builder {
        /// <p>The description of an endpoint group for a custom routing accelerator.</p>
        pub fn endpoint_group(mut self, input: crate::model::CustomRoutingEndpointGroup) -> Self {
            self.endpoint_group = Some(input);
            self
        }
        /// <p>The description of an endpoint group for a custom routing accelerator.</p>
        pub fn set_endpoint_group(
            mut self,
            input: std::option::Option<crate::model::CustomRoutingEndpointGroup>,
        ) -> Self {
            self.endpoint_group = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCustomRoutingEndpointGroupOutput`](crate::output::DescribeCustomRoutingEndpointGroupOutput)
        pub fn build(self) -> crate::output::DescribeCustomRoutingEndpointGroupOutput {
            crate::output::DescribeCustomRoutingEndpointGroupOutput {
                endpoint_group: self.endpoint_group,
            }
        }
    }
}
impl DescribeCustomRoutingEndpointGroupOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCustomRoutingEndpointGroupOutput`](crate::output::DescribeCustomRoutingEndpointGroupOutput)
    pub fn builder() -> crate::output::describe_custom_routing_endpoint_group_output::Builder {
        crate::output::describe_custom_routing_endpoint_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCustomRoutingAcceleratorAttributesOutput {
    /// <p>The attributes of the custom routing accelerator.</p>
    pub accelerator_attributes:
        std::option::Option<crate::model::CustomRoutingAcceleratorAttributes>,
}
impl DescribeCustomRoutingAcceleratorAttributesOutput {
    /// <p>The attributes of the custom routing accelerator.</p>
    pub fn accelerator_attributes(
        &self,
    ) -> std::option::Option<&crate::model::CustomRoutingAcceleratorAttributes> {
        self.accelerator_attributes.as_ref()
    }
}
impl std::fmt::Debug for DescribeCustomRoutingAcceleratorAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCustomRoutingAcceleratorAttributesOutput");
        formatter.field("accelerator_attributes", &self.accelerator_attributes);
        formatter.finish()
    }
}
/// See [`DescribeCustomRoutingAcceleratorAttributesOutput`](crate::output::DescribeCustomRoutingAcceleratorAttributesOutput)
pub mod describe_custom_routing_accelerator_attributes_output {
    /// A builder for [`DescribeCustomRoutingAcceleratorAttributesOutput`](crate::output::DescribeCustomRoutingAcceleratorAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accelerator_attributes:
            std::option::Option<crate::model::CustomRoutingAcceleratorAttributes>,
    }
    impl Builder {
        /// <p>The attributes of the custom routing accelerator.</p>
        pub fn accelerator_attributes(
            mut self,
            input: crate::model::CustomRoutingAcceleratorAttributes,
        ) -> Self {
            self.accelerator_attributes = Some(input);
            self
        }
        /// <p>The attributes of the custom routing accelerator.</p>
        pub fn set_accelerator_attributes(
            mut self,
            input: std::option::Option<crate::model::CustomRoutingAcceleratorAttributes>,
        ) -> Self {
            self.accelerator_attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCustomRoutingAcceleratorAttributesOutput`](crate::output::DescribeCustomRoutingAcceleratorAttributesOutput)
        pub fn build(self) -> crate::output::DescribeCustomRoutingAcceleratorAttributesOutput {
            crate::output::DescribeCustomRoutingAcceleratorAttributesOutput {
                accelerator_attributes: self.accelerator_attributes,
            }
        }
    }
}
impl DescribeCustomRoutingAcceleratorAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCustomRoutingAcceleratorAttributesOutput`](crate::output::DescribeCustomRoutingAcceleratorAttributesOutput)
    pub fn builder() -> crate::output::describe_custom_routing_accelerator_attributes_output::Builder
    {
        crate::output::describe_custom_routing_accelerator_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCustomRoutingAcceleratorOutput {
    /// <p>The description of the custom routing accelerator.</p>
    pub accelerator: std::option::Option<crate::model::CustomRoutingAccelerator>,
}
impl DescribeCustomRoutingAcceleratorOutput {
    /// <p>The description of the custom routing accelerator.</p>
    pub fn accelerator(&self) -> std::option::Option<&crate::model::CustomRoutingAccelerator> {
        self.accelerator.as_ref()
    }
}
impl std::fmt::Debug for DescribeCustomRoutingAcceleratorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCustomRoutingAcceleratorOutput");
        formatter.field("accelerator", &self.accelerator);
        formatter.finish()
    }
}
/// See [`DescribeCustomRoutingAcceleratorOutput`](crate::output::DescribeCustomRoutingAcceleratorOutput)
pub mod describe_custom_routing_accelerator_output {
    /// A builder for [`DescribeCustomRoutingAcceleratorOutput`](crate::output::DescribeCustomRoutingAcceleratorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accelerator: std::option::Option<crate::model::CustomRoutingAccelerator>,
    }
    impl Builder {
        /// <p>The description of the custom routing accelerator.</p>
        pub fn accelerator(mut self, input: crate::model::CustomRoutingAccelerator) -> Self {
            self.accelerator = Some(input);
            self
        }
        /// <p>The description of the custom routing accelerator.</p>
        pub fn set_accelerator(
            mut self,
            input: std::option::Option<crate::model::CustomRoutingAccelerator>,
        ) -> Self {
            self.accelerator = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCustomRoutingAcceleratorOutput`](crate::output::DescribeCustomRoutingAcceleratorOutput)
        pub fn build(self) -> crate::output::DescribeCustomRoutingAcceleratorOutput {
            crate::output::DescribeCustomRoutingAcceleratorOutput {
                accelerator: self.accelerator,
            }
        }
    }
}
impl DescribeCustomRoutingAcceleratorOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCustomRoutingAcceleratorOutput`](crate::output::DescribeCustomRoutingAcceleratorOutput)
    pub fn builder() -> crate::output::describe_custom_routing_accelerator_output::Builder {
        crate::output::describe_custom_routing_accelerator_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAcceleratorAttributesOutput {
    /// <p>The attributes of the accelerator.</p>
    pub accelerator_attributes: std::option::Option<crate::model::AcceleratorAttributes>,
}
impl DescribeAcceleratorAttributesOutput {
    /// <p>The attributes of the accelerator.</p>
    pub fn accelerator_attributes(
        &self,
    ) -> std::option::Option<&crate::model::AcceleratorAttributes> {
        self.accelerator_attributes.as_ref()
    }
}
impl std::fmt::Debug for DescribeAcceleratorAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAcceleratorAttributesOutput");
        formatter.field("accelerator_attributes", &self.accelerator_attributes);
        formatter.finish()
    }
}
/// See [`DescribeAcceleratorAttributesOutput`](crate::output::DescribeAcceleratorAttributesOutput)
pub mod describe_accelerator_attributes_output {
    /// A builder for [`DescribeAcceleratorAttributesOutput`](crate::output::DescribeAcceleratorAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accelerator_attributes: std::option::Option<crate::model::AcceleratorAttributes>,
    }
    impl Builder {
        /// <p>The attributes of the accelerator.</p>
        pub fn accelerator_attributes(
            mut self,
            input: crate::model::AcceleratorAttributes,
        ) -> Self {
            self.accelerator_attributes = Some(input);
            self
        }
        /// <p>The attributes of the accelerator.</p>
        pub fn set_accelerator_attributes(
            mut self,
            input: std::option::Option<crate::model::AcceleratorAttributes>,
        ) -> Self {
            self.accelerator_attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAcceleratorAttributesOutput`](crate::output::DescribeAcceleratorAttributesOutput)
        pub fn build(self) -> crate::output::DescribeAcceleratorAttributesOutput {
            crate::output::DescribeAcceleratorAttributesOutput {
                accelerator_attributes: self.accelerator_attributes,
            }
        }
    }
}
impl DescribeAcceleratorAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAcceleratorAttributesOutput`](crate::output::DescribeAcceleratorAttributesOutput)
    pub fn builder() -> crate::output::describe_accelerator_attributes_output::Builder {
        crate::output::describe_accelerator_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAcceleratorOutput {
    /// <p>The description of the accelerator.</p>
    pub accelerator: std::option::Option<crate::model::Accelerator>,
}
impl DescribeAcceleratorOutput {
    /// <p>The description of the accelerator.</p>
    pub fn accelerator(&self) -> std::option::Option<&crate::model::Accelerator> {
        self.accelerator.as_ref()
    }
}
impl std::fmt::Debug for DescribeAcceleratorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAcceleratorOutput");
        formatter.field("accelerator", &self.accelerator);
        formatter.finish()
    }
}
/// See [`DescribeAcceleratorOutput`](crate::output::DescribeAcceleratorOutput)
pub mod describe_accelerator_output {
    /// A builder for [`DescribeAcceleratorOutput`](crate::output::DescribeAcceleratorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accelerator: std::option::Option<crate::model::Accelerator>,
    }
    impl Builder {
        /// <p>The description of the accelerator.</p>
        pub fn accelerator(mut self, input: crate::model::Accelerator) -> Self {
            self.accelerator = Some(input);
            self
        }
        /// <p>The description of the accelerator.</p>
        pub fn set_accelerator(
            mut self,
            input: std::option::Option<crate::model::Accelerator>,
        ) -> Self {
            self.accelerator = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAcceleratorOutput`](crate::output::DescribeAcceleratorOutput)
        pub fn build(self) -> crate::output::DescribeAcceleratorOutput {
            crate::output::DescribeAcceleratorOutput {
                accelerator: self.accelerator,
            }
        }
    }
}
impl DescribeAcceleratorOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAcceleratorOutput`](crate::output::DescribeAcceleratorOutput)
    pub fn builder() -> crate::output::describe_accelerator_output::Builder {
        crate::output::describe_accelerator_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeprovisionByoipCidrOutput {
    /// <p>Information about the address range.</p>
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
}
impl DeprovisionByoipCidrOutput {
    /// <p>Information about the address range.</p>
    pub fn byoip_cidr(&self) -> std::option::Option<&crate::model::ByoipCidr> {
        self.byoip_cidr.as_ref()
    }
}
impl std::fmt::Debug for DeprovisionByoipCidrOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeprovisionByoipCidrOutput");
        formatter.field("byoip_cidr", &self.byoip_cidr);
        formatter.finish()
    }
}
/// See [`DeprovisionByoipCidrOutput`](crate::output::DeprovisionByoipCidrOutput)
pub mod deprovision_byoip_cidr_output {
    /// A builder for [`DeprovisionByoipCidrOutput`](crate::output::DeprovisionByoipCidrOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    }
    impl Builder {
        /// <p>Information about the address range.</p>
        pub fn byoip_cidr(mut self, input: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(input);
            self
        }
        /// <p>Information about the address range.</p>
        pub fn set_byoip_cidr(
            mut self,
            input: std::option::Option<crate::model::ByoipCidr>,
        ) -> Self {
            self.byoip_cidr = input;
            self
        }
        /// Consumes the builder and constructs a [`DeprovisionByoipCidrOutput`](crate::output::DeprovisionByoipCidrOutput)
        pub fn build(self) -> crate::output::DeprovisionByoipCidrOutput {
            crate::output::DeprovisionByoipCidrOutput {
                byoip_cidr: self.byoip_cidr,
            }
        }
    }
}
impl DeprovisionByoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`DeprovisionByoipCidrOutput`](crate::output::DeprovisionByoipCidrOutput)
    pub fn builder() -> crate::output::deprovision_byoip_cidr_output::Builder {
        crate::output::deprovision_byoip_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DenyCustomRoutingTrafficOutput {}
impl std::fmt::Debug for DenyCustomRoutingTrafficOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DenyCustomRoutingTrafficOutput");
        formatter.finish()
    }
}
/// See [`DenyCustomRoutingTrafficOutput`](crate::output::DenyCustomRoutingTrafficOutput)
pub mod deny_custom_routing_traffic_output {
    /// A builder for [`DenyCustomRoutingTrafficOutput`](crate::output::DenyCustomRoutingTrafficOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DenyCustomRoutingTrafficOutput`](crate::output::DenyCustomRoutingTrafficOutput)
        pub fn build(self) -> crate::output::DenyCustomRoutingTrafficOutput {
            crate::output::DenyCustomRoutingTrafficOutput {}
        }
    }
}
impl DenyCustomRoutingTrafficOutput {
    /// Creates a new builder-style object to manufacture [`DenyCustomRoutingTrafficOutput`](crate::output::DenyCustomRoutingTrafficOutput)
    pub fn builder() -> crate::output::deny_custom_routing_traffic_output::Builder {
        crate::output::deny_custom_routing_traffic_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteListenerOutput {}
impl std::fmt::Debug for DeleteListenerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteListenerOutput");
        formatter.finish()
    }
}
/// See [`DeleteListenerOutput`](crate::output::DeleteListenerOutput)
pub mod delete_listener_output {
    /// A builder for [`DeleteListenerOutput`](crate::output::DeleteListenerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteListenerOutput`](crate::output::DeleteListenerOutput)
        pub fn build(self) -> crate::output::DeleteListenerOutput {
            crate::output::DeleteListenerOutput {}
        }
    }
}
impl DeleteListenerOutput {
    /// Creates a new builder-style object to manufacture [`DeleteListenerOutput`](crate::output::DeleteListenerOutput)
    pub fn builder() -> crate::output::delete_listener_output::Builder {
        crate::output::delete_listener_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteEndpointGroupOutput {}
impl std::fmt::Debug for DeleteEndpointGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteEndpointGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteEndpointGroupOutput`](crate::output::DeleteEndpointGroupOutput)
pub mod delete_endpoint_group_output {
    /// A builder for [`DeleteEndpointGroupOutput`](crate::output::DeleteEndpointGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteEndpointGroupOutput`](crate::output::DeleteEndpointGroupOutput)
        pub fn build(self) -> crate::output::DeleteEndpointGroupOutput {
            crate::output::DeleteEndpointGroupOutput {}
        }
    }
}
impl DeleteEndpointGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEndpointGroupOutput`](crate::output::DeleteEndpointGroupOutput)
    pub fn builder() -> crate::output::delete_endpoint_group_output::Builder {
        crate::output::delete_endpoint_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteCustomRoutingListenerOutput {}
impl std::fmt::Debug for DeleteCustomRoutingListenerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteCustomRoutingListenerOutput");
        formatter.finish()
    }
}
/// See [`DeleteCustomRoutingListenerOutput`](crate::output::DeleteCustomRoutingListenerOutput)
pub mod delete_custom_routing_listener_output {
    /// A builder for [`DeleteCustomRoutingListenerOutput`](crate::output::DeleteCustomRoutingListenerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteCustomRoutingListenerOutput`](crate::output::DeleteCustomRoutingListenerOutput)
        pub fn build(self) -> crate::output::DeleteCustomRoutingListenerOutput {
            crate::output::DeleteCustomRoutingListenerOutput {}
        }
    }
}
impl DeleteCustomRoutingListenerOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCustomRoutingListenerOutput`](crate::output::DeleteCustomRoutingListenerOutput)
    pub fn builder() -> crate::output::delete_custom_routing_listener_output::Builder {
        crate::output::delete_custom_routing_listener_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteCustomRoutingEndpointGroupOutput {}
impl std::fmt::Debug for DeleteCustomRoutingEndpointGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteCustomRoutingEndpointGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteCustomRoutingEndpointGroupOutput`](crate::output::DeleteCustomRoutingEndpointGroupOutput)
pub mod delete_custom_routing_endpoint_group_output {
    /// A builder for [`DeleteCustomRoutingEndpointGroupOutput`](crate::output::DeleteCustomRoutingEndpointGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteCustomRoutingEndpointGroupOutput`](crate::output::DeleteCustomRoutingEndpointGroupOutput)
        pub fn build(self) -> crate::output::DeleteCustomRoutingEndpointGroupOutput {
            crate::output::DeleteCustomRoutingEndpointGroupOutput {}
        }
    }
}
impl DeleteCustomRoutingEndpointGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCustomRoutingEndpointGroupOutput`](crate::output::DeleteCustomRoutingEndpointGroupOutput)
    pub fn builder() -> crate::output::delete_custom_routing_endpoint_group_output::Builder {
        crate::output::delete_custom_routing_endpoint_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteCustomRoutingAcceleratorOutput {}
impl std::fmt::Debug for DeleteCustomRoutingAcceleratorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteCustomRoutingAcceleratorOutput");
        formatter.finish()
    }
}
/// See [`DeleteCustomRoutingAcceleratorOutput`](crate::output::DeleteCustomRoutingAcceleratorOutput)
pub mod delete_custom_routing_accelerator_output {
    /// A builder for [`DeleteCustomRoutingAcceleratorOutput`](crate::output::DeleteCustomRoutingAcceleratorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteCustomRoutingAcceleratorOutput`](crate::output::DeleteCustomRoutingAcceleratorOutput)
        pub fn build(self) -> crate::output::DeleteCustomRoutingAcceleratorOutput {
            crate::output::DeleteCustomRoutingAcceleratorOutput {}
        }
    }
}
impl DeleteCustomRoutingAcceleratorOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCustomRoutingAcceleratorOutput`](crate::output::DeleteCustomRoutingAcceleratorOutput)
    pub fn builder() -> crate::output::delete_custom_routing_accelerator_output::Builder {
        crate::output::delete_custom_routing_accelerator_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAcceleratorOutput {}
impl std::fmt::Debug for DeleteAcceleratorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAcceleratorOutput");
        formatter.finish()
    }
}
/// See [`DeleteAcceleratorOutput`](crate::output::DeleteAcceleratorOutput)
pub mod delete_accelerator_output {
    /// A builder for [`DeleteAcceleratorOutput`](crate::output::DeleteAcceleratorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAcceleratorOutput`](crate::output::DeleteAcceleratorOutput)
        pub fn build(self) -> crate::output::DeleteAcceleratorOutput {
            crate::output::DeleteAcceleratorOutput {}
        }
    }
}
impl DeleteAcceleratorOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAcceleratorOutput`](crate::output::DeleteAcceleratorOutput)
    pub fn builder() -> crate::output::delete_accelerator_output::Builder {
        crate::output::delete_accelerator_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateListenerOutput {
    /// <p>The listener that you've created.</p>
    pub listener: std::option::Option<crate::model::Listener>,
}
impl CreateListenerOutput {
    /// <p>The listener that you've created.</p>
    pub fn listener(&self) -> std::option::Option<&crate::model::Listener> {
        self.listener.as_ref()
    }
}
impl std::fmt::Debug for CreateListenerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateListenerOutput");
        formatter.field("listener", &self.listener);
        formatter.finish()
    }
}
/// See [`CreateListenerOutput`](crate::output::CreateListenerOutput)
pub mod create_listener_output {
    /// A builder for [`CreateListenerOutput`](crate::output::CreateListenerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) listener: std::option::Option<crate::model::Listener>,
    }
    impl Builder {
        /// <p>The listener that you've created.</p>
        pub fn listener(mut self, input: crate::model::Listener) -> Self {
            self.listener = Some(input);
            self
        }
        /// <p>The listener that you've created.</p>
        pub fn set_listener(mut self, input: std::option::Option<crate::model::Listener>) -> Self {
            self.listener = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateListenerOutput`](crate::output::CreateListenerOutput)
        pub fn build(self) -> crate::output::CreateListenerOutput {
            crate::output::CreateListenerOutput {
                listener: self.listener,
            }
        }
    }
}
impl CreateListenerOutput {
    /// Creates a new builder-style object to manufacture [`CreateListenerOutput`](crate::output::CreateListenerOutput)
    pub fn builder() -> crate::output::create_listener_output::Builder {
        crate::output::create_listener_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateEndpointGroupOutput {
    /// <p>The information about the endpoint group that was created.</p>
    pub endpoint_group: std::option::Option<crate::model::EndpointGroup>,
}
impl CreateEndpointGroupOutput {
    /// <p>The information about the endpoint group that was created.</p>
    pub fn endpoint_group(&self) -> std::option::Option<&crate::model::EndpointGroup> {
        self.endpoint_group.as_ref()
    }
}
impl std::fmt::Debug for CreateEndpointGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateEndpointGroupOutput");
        formatter.field("endpoint_group", &self.endpoint_group);
        formatter.finish()
    }
}
/// See [`CreateEndpointGroupOutput`](crate::output::CreateEndpointGroupOutput)
pub mod create_endpoint_group_output {
    /// A builder for [`CreateEndpointGroupOutput`](crate::output::CreateEndpointGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint_group: std::option::Option<crate::model::EndpointGroup>,
    }
    impl Builder {
        /// <p>The information about the endpoint group that was created.</p>
        pub fn endpoint_group(mut self, input: crate::model::EndpointGroup) -> Self {
            self.endpoint_group = Some(input);
            self
        }
        /// <p>The information about the endpoint group that was created.</p>
        pub fn set_endpoint_group(
            mut self,
            input: std::option::Option<crate::model::EndpointGroup>,
        ) -> Self {
            self.endpoint_group = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateEndpointGroupOutput`](crate::output::CreateEndpointGroupOutput)
        pub fn build(self) -> crate::output::CreateEndpointGroupOutput {
            crate::output::CreateEndpointGroupOutput {
                endpoint_group: self.endpoint_group,
            }
        }
    }
}
impl CreateEndpointGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateEndpointGroupOutput`](crate::output::CreateEndpointGroupOutput)
    pub fn builder() -> crate::output::create_endpoint_group_output::Builder {
        crate::output::create_endpoint_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCustomRoutingListenerOutput {
    /// <p>The listener that you've created for a custom routing accelerator.</p>
    pub listener: std::option::Option<crate::model::CustomRoutingListener>,
}
impl CreateCustomRoutingListenerOutput {
    /// <p>The listener that you've created for a custom routing accelerator.</p>
    pub fn listener(&self) -> std::option::Option<&crate::model::CustomRoutingListener> {
        self.listener.as_ref()
    }
}
impl std::fmt::Debug for CreateCustomRoutingListenerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCustomRoutingListenerOutput");
        formatter.field("listener", &self.listener);
        formatter.finish()
    }
}
/// See [`CreateCustomRoutingListenerOutput`](crate::output::CreateCustomRoutingListenerOutput)
pub mod create_custom_routing_listener_output {
    /// A builder for [`CreateCustomRoutingListenerOutput`](crate::output::CreateCustomRoutingListenerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) listener: std::option::Option<crate::model::CustomRoutingListener>,
    }
    impl Builder {
        /// <p>The listener that you've created for a custom routing accelerator.</p>
        pub fn listener(mut self, input: crate::model::CustomRoutingListener) -> Self {
            self.listener = Some(input);
            self
        }
        /// <p>The listener that you've created for a custom routing accelerator.</p>
        pub fn set_listener(
            mut self,
            input: std::option::Option<crate::model::CustomRoutingListener>,
        ) -> Self {
            self.listener = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateCustomRoutingListenerOutput`](crate::output::CreateCustomRoutingListenerOutput)
        pub fn build(self) -> crate::output::CreateCustomRoutingListenerOutput {
            crate::output::CreateCustomRoutingListenerOutput {
                listener: self.listener,
            }
        }
    }
}
impl CreateCustomRoutingListenerOutput {
    /// Creates a new builder-style object to manufacture [`CreateCustomRoutingListenerOutput`](crate::output::CreateCustomRoutingListenerOutput)
    pub fn builder() -> crate::output::create_custom_routing_listener_output::Builder {
        crate::output::create_custom_routing_listener_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCustomRoutingEndpointGroupOutput {
    /// <p>The information about the endpoint group created for a custom routing accelerator.</p>
    pub endpoint_group: std::option::Option<crate::model::CustomRoutingEndpointGroup>,
}
impl CreateCustomRoutingEndpointGroupOutput {
    /// <p>The information about the endpoint group created for a custom routing accelerator.</p>
    pub fn endpoint_group(&self) -> std::option::Option<&crate::model::CustomRoutingEndpointGroup> {
        self.endpoint_group.as_ref()
    }
}
impl std::fmt::Debug for CreateCustomRoutingEndpointGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCustomRoutingEndpointGroupOutput");
        formatter.field("endpoint_group", &self.endpoint_group);
        formatter.finish()
    }
}
/// See [`CreateCustomRoutingEndpointGroupOutput`](crate::output::CreateCustomRoutingEndpointGroupOutput)
pub mod create_custom_routing_endpoint_group_output {
    /// A builder for [`CreateCustomRoutingEndpointGroupOutput`](crate::output::CreateCustomRoutingEndpointGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint_group: std::option::Option<crate::model::CustomRoutingEndpointGroup>,
    }
    impl Builder {
        /// <p>The information about the endpoint group created for a custom routing accelerator.</p>
        pub fn endpoint_group(mut self, input: crate::model::CustomRoutingEndpointGroup) -> Self {
            self.endpoint_group = Some(input);
            self
        }
        /// <p>The information about the endpoint group created for a custom routing accelerator.</p>
        pub fn set_endpoint_group(
            mut self,
            input: std::option::Option<crate::model::CustomRoutingEndpointGroup>,
        ) -> Self {
            self.endpoint_group = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateCustomRoutingEndpointGroupOutput`](crate::output::CreateCustomRoutingEndpointGroupOutput)
        pub fn build(self) -> crate::output::CreateCustomRoutingEndpointGroupOutput {
            crate::output::CreateCustomRoutingEndpointGroupOutput {
                endpoint_group: self.endpoint_group,
            }
        }
    }
}
impl CreateCustomRoutingEndpointGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateCustomRoutingEndpointGroupOutput`](crate::output::CreateCustomRoutingEndpointGroupOutput)
    pub fn builder() -> crate::output::create_custom_routing_endpoint_group_output::Builder {
        crate::output::create_custom_routing_endpoint_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCustomRoutingAcceleratorOutput {
    /// <p>The accelerator that is created.</p>
    pub accelerator: std::option::Option<crate::model::CustomRoutingAccelerator>,
}
impl CreateCustomRoutingAcceleratorOutput {
    /// <p>The accelerator that is created.</p>
    pub fn accelerator(&self) -> std::option::Option<&crate::model::CustomRoutingAccelerator> {
        self.accelerator.as_ref()
    }
}
impl std::fmt::Debug for CreateCustomRoutingAcceleratorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCustomRoutingAcceleratorOutput");
        formatter.field("accelerator", &self.accelerator);
        formatter.finish()
    }
}
/// See [`CreateCustomRoutingAcceleratorOutput`](crate::output::CreateCustomRoutingAcceleratorOutput)
pub mod create_custom_routing_accelerator_output {
    /// A builder for [`CreateCustomRoutingAcceleratorOutput`](crate::output::CreateCustomRoutingAcceleratorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accelerator: std::option::Option<crate::model::CustomRoutingAccelerator>,
    }
    impl Builder {
        /// <p>The accelerator that is created.</p>
        pub fn accelerator(mut self, input: crate::model::CustomRoutingAccelerator) -> Self {
            self.accelerator = Some(input);
            self
        }
        /// <p>The accelerator that is created.</p>
        pub fn set_accelerator(
            mut self,
            input: std::option::Option<crate::model::CustomRoutingAccelerator>,
        ) -> Self {
            self.accelerator = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateCustomRoutingAcceleratorOutput`](crate::output::CreateCustomRoutingAcceleratorOutput)
        pub fn build(self) -> crate::output::CreateCustomRoutingAcceleratorOutput {
            crate::output::CreateCustomRoutingAcceleratorOutput {
                accelerator: self.accelerator,
            }
        }
    }
}
impl CreateCustomRoutingAcceleratorOutput {
    /// Creates a new builder-style object to manufacture [`CreateCustomRoutingAcceleratorOutput`](crate::output::CreateCustomRoutingAcceleratorOutput)
    pub fn builder() -> crate::output::create_custom_routing_accelerator_output::Builder {
        crate::output::create_custom_routing_accelerator_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateAcceleratorOutput {
    /// <p>The accelerator that is created by specifying a listener and the supported IP address types.</p>
    pub accelerator: std::option::Option<crate::model::Accelerator>,
}
impl CreateAcceleratorOutput {
    /// <p>The accelerator that is created by specifying a listener and the supported IP address types.</p>
    pub fn accelerator(&self) -> std::option::Option<&crate::model::Accelerator> {
        self.accelerator.as_ref()
    }
}
impl std::fmt::Debug for CreateAcceleratorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAcceleratorOutput");
        formatter.field("accelerator", &self.accelerator);
        formatter.finish()
    }
}
/// See [`CreateAcceleratorOutput`](crate::output::CreateAcceleratorOutput)
pub mod create_accelerator_output {
    /// A builder for [`CreateAcceleratorOutput`](crate::output::CreateAcceleratorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accelerator: std::option::Option<crate::model::Accelerator>,
    }
    impl Builder {
        /// <p>The accelerator that is created by specifying a listener and the supported IP address types.</p>
        pub fn accelerator(mut self, input: crate::model::Accelerator) -> Self {
            self.accelerator = Some(input);
            self
        }
        /// <p>The accelerator that is created by specifying a listener and the supported IP address types.</p>
        pub fn set_accelerator(
            mut self,
            input: std::option::Option<crate::model::Accelerator>,
        ) -> Self {
            self.accelerator = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateAcceleratorOutput`](crate::output::CreateAcceleratorOutput)
        pub fn build(self) -> crate::output::CreateAcceleratorOutput {
            crate::output::CreateAcceleratorOutput {
                accelerator: self.accelerator,
            }
        }
    }
}
impl CreateAcceleratorOutput {
    /// Creates a new builder-style object to manufacture [`CreateAcceleratorOutput`](crate::output::CreateAcceleratorOutput)
    pub fn builder() -> crate::output::create_accelerator_output::Builder {
        crate::output::create_accelerator_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AllowCustomRoutingTrafficOutput {}
impl std::fmt::Debug for AllowCustomRoutingTrafficOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AllowCustomRoutingTrafficOutput");
        formatter.finish()
    }
}
/// See [`AllowCustomRoutingTrafficOutput`](crate::output::AllowCustomRoutingTrafficOutput)
pub mod allow_custom_routing_traffic_output {
    /// A builder for [`AllowCustomRoutingTrafficOutput`](crate::output::AllowCustomRoutingTrafficOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AllowCustomRoutingTrafficOutput`](crate::output::AllowCustomRoutingTrafficOutput)
        pub fn build(self) -> crate::output::AllowCustomRoutingTrafficOutput {
            crate::output::AllowCustomRoutingTrafficOutput {}
        }
    }
}
impl AllowCustomRoutingTrafficOutput {
    /// Creates a new builder-style object to manufacture [`AllowCustomRoutingTrafficOutput`](crate::output::AllowCustomRoutingTrafficOutput)
    pub fn builder() -> crate::output::allow_custom_routing_traffic_output::Builder {
        crate::output::allow_custom_routing_traffic_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AdvertiseByoipCidrOutput {
    /// <p>Information about the address range.</p>
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
}
impl AdvertiseByoipCidrOutput {
    /// <p>Information about the address range.</p>
    pub fn byoip_cidr(&self) -> std::option::Option<&crate::model::ByoipCidr> {
        self.byoip_cidr.as_ref()
    }
}
impl std::fmt::Debug for AdvertiseByoipCidrOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AdvertiseByoipCidrOutput");
        formatter.field("byoip_cidr", &self.byoip_cidr);
        formatter.finish()
    }
}
/// See [`AdvertiseByoipCidrOutput`](crate::output::AdvertiseByoipCidrOutput)
pub mod advertise_byoip_cidr_output {
    /// A builder for [`AdvertiseByoipCidrOutput`](crate::output::AdvertiseByoipCidrOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    }
    impl Builder {
        /// <p>Information about the address range.</p>
        pub fn byoip_cidr(mut self, input: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(input);
            self
        }
        /// <p>Information about the address range.</p>
        pub fn set_byoip_cidr(
            mut self,
            input: std::option::Option<crate::model::ByoipCidr>,
        ) -> Self {
            self.byoip_cidr = input;
            self
        }
        /// Consumes the builder and constructs a [`AdvertiseByoipCidrOutput`](crate::output::AdvertiseByoipCidrOutput)
        pub fn build(self) -> crate::output::AdvertiseByoipCidrOutput {
            crate::output::AdvertiseByoipCidrOutput {
                byoip_cidr: self.byoip_cidr,
            }
        }
    }
}
impl AdvertiseByoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`AdvertiseByoipCidrOutput`](crate::output::AdvertiseByoipCidrOutput)
    pub fn builder() -> crate::output::advertise_byoip_cidr_output::Builder {
        crate::output::advertise_byoip_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddCustomRoutingEndpointsOutput {
    /// <p>The endpoint objects added to the custom routing accelerator.</p>
    pub endpoint_descriptions:
        std::option::Option<std::vec::Vec<crate::model::CustomRoutingEndpointDescription>>,
    /// <p>The Amazon Resource Name (ARN) of the endpoint group for the custom routing endpoint.</p>
    pub endpoint_group_arn: std::option::Option<std::string::String>,
}
impl AddCustomRoutingEndpointsOutput {
    /// <p>The endpoint objects added to the custom routing accelerator.</p>
    pub fn endpoint_descriptions(
        &self,
    ) -> std::option::Option<&[crate::model::CustomRoutingEndpointDescription]> {
        self.endpoint_descriptions.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the endpoint group for the custom routing endpoint.</p>
    pub fn endpoint_group_arn(&self) -> std::option::Option<&str> {
        self.endpoint_group_arn.as_deref()
    }
}
impl std::fmt::Debug for AddCustomRoutingEndpointsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddCustomRoutingEndpointsOutput");
        formatter.field("endpoint_descriptions", &self.endpoint_descriptions);
        formatter.field("endpoint_group_arn", &self.endpoint_group_arn);
        formatter.finish()
    }
}
/// See [`AddCustomRoutingEndpointsOutput`](crate::output::AddCustomRoutingEndpointsOutput)
pub mod add_custom_routing_endpoints_output {
    /// A builder for [`AddCustomRoutingEndpointsOutput`](crate::output::AddCustomRoutingEndpointsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint_descriptions:
            std::option::Option<std::vec::Vec<crate::model::CustomRoutingEndpointDescription>>,
        pub(crate) endpoint_group_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `endpoint_descriptions`.
        ///
        /// To override the contents of this collection use [`set_endpoint_descriptions`](Self::set_endpoint_descriptions).
        ///
        /// <p>The endpoint objects added to the custom routing accelerator.</p>
        pub fn endpoint_descriptions(
            mut self,
            input: impl Into<crate::model::CustomRoutingEndpointDescription>,
        ) -> Self {
            let mut v = self.endpoint_descriptions.unwrap_or_default();
            v.push(input.into());
            self.endpoint_descriptions = Some(v);
            self
        }
        /// <p>The endpoint objects added to the custom routing accelerator.</p>
        pub fn set_endpoint_descriptions(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::CustomRoutingEndpointDescription>,
            >,
        ) -> Self {
            self.endpoint_descriptions = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the endpoint group for the custom routing endpoint.</p>
        pub fn endpoint_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.endpoint_group_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the endpoint group for the custom routing endpoint.</p>
        pub fn set_endpoint_group_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.endpoint_group_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`AddCustomRoutingEndpointsOutput`](crate::output::AddCustomRoutingEndpointsOutput)
        pub fn build(self) -> crate::output::AddCustomRoutingEndpointsOutput {
            crate::output::AddCustomRoutingEndpointsOutput {
                endpoint_descriptions: self.endpoint_descriptions,
                endpoint_group_arn: self.endpoint_group_arn,
            }
        }
    }
}
impl AddCustomRoutingEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`AddCustomRoutingEndpointsOutput`](crate::output::AddCustomRoutingEndpointsOutput)
    pub fn builder() -> crate::output::add_custom_routing_endpoints_output::Builder {
        crate::output::add_custom_routing_endpoints_output::Builder::default()
    }
}
