// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_cross_account_attachment::_delete_cross_account_attachment_output::DeleteCrossAccountAttachmentOutputBuilder;

pub use crate::operation::delete_cross_account_attachment::_delete_cross_account_attachment_input::DeleteCrossAccountAttachmentInputBuilder;

impl crate::operation::delete_cross_account_attachment::builders::DeleteCrossAccountAttachmentInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_cross_account_attachment::DeleteCrossAccountAttachmentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_cross_account_attachment::DeleteCrossAccountAttachmentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_cross_account_attachment();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteCrossAccountAttachment`.
///
/// <p>Delete a cross-account attachment. When you delete an attachment, Global Accelerator revokes the permission to use the resources in the attachment from all principals in the list of principals. Global Accelerator revokes the permission for specific resources.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/cross-account-resources.html"> Working with cross-account attachments and resources in Global Accelerator</a> in the <i> Global Accelerator Developer Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteCrossAccountAttachmentFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_cross_account_attachment::builders::DeleteCrossAccountAttachmentInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_cross_account_attachment::DeleteCrossAccountAttachmentOutput,
        crate::operation::delete_cross_account_attachment::DeleteCrossAccountAttachmentError,
    > for DeleteCrossAccountAttachmentFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_cross_account_attachment::DeleteCrossAccountAttachmentOutput,
            crate::operation::delete_cross_account_attachment::DeleteCrossAccountAttachmentError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteCrossAccountAttachmentFluentBuilder {
    /// Creates a new `DeleteCrossAccountAttachment`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteCrossAccountAttachment as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_cross_account_attachment::builders::DeleteCrossAccountAttachmentInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_cross_account_attachment::DeleteCrossAccountAttachmentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_cross_account_attachment::DeleteCrossAccountAttachmentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_cross_account_attachment::DeleteCrossAccountAttachment::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_cross_account_attachment::DeleteCrossAccountAttachment::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_cross_account_attachment::DeleteCrossAccountAttachmentOutput,
        crate::operation::delete_cross_account_attachment::DeleteCrossAccountAttachmentError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the cross-account attachment to delete.</p>
    pub fn attachment_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.attachment_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the cross-account attachment to delete.</p>
    pub fn set_attachment_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_attachment_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the cross-account attachment to delete.</p>
    pub fn get_attachment_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_attachment_arn()
    }
}
