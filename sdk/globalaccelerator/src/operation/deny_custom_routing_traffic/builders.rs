// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::deny_custom_routing_traffic::_deny_custom_routing_traffic_output::DenyCustomRoutingTrafficOutputBuilder;

pub use crate::operation::deny_custom_routing_traffic::_deny_custom_routing_traffic_input::DenyCustomRoutingTrafficInputBuilder;

impl crate::operation::deny_custom_routing_traffic::builders::DenyCustomRoutingTrafficInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.deny_custom_routing_traffic();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DenyCustomRoutingTraffic`.
///
/// <p>Specify the Amazon EC2 instance (destination) IP addresses and ports for a VPC subnet endpoint that cannot receive traffic for a custom routing accelerator. You can deny traffic to all destinations in the VPC endpoint, or deny traffic to a specified list of destination IP addresses and ports. Note that you cannot specify IP addresses or ports outside of the range that you configured for the endpoint group.</p>
/// <p>After you make changes, you can verify that the updates are complete by checking the status of your accelerator: the status changes from IN_PROGRESS to DEPLOYED.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DenyCustomRoutingTrafficFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::deny_custom_routing_traffic::builders::DenyCustomRoutingTrafficInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficOutput,
        crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError,
    > for DenyCustomRoutingTrafficFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficOutput,
            crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DenyCustomRoutingTrafficFluentBuilder {
    /// Creates a new `DenyCustomRoutingTraffic`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DenyCustomRoutingTraffic as a reference.
    pub fn as_input(&self) -> &crate::operation::deny_custom_routing_traffic::builders::DenyCustomRoutingTrafficInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTraffic::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTraffic::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficOutput,
        crate::operation::deny_custom_routing_traffic::DenyCustomRoutingTrafficError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the endpoint group.</p>
    pub fn endpoint_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.endpoint_group_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the endpoint group.</p>
    pub fn set_endpoint_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_group_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the endpoint group.</p>
    pub fn get_endpoint_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_endpoint_group_arn()
    }
    /// <p>An ID for the endpoint. For custom routing accelerators, this is the virtual private cloud (VPC) subnet ID.</p>
    pub fn endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.endpoint_id(input.into());
        self
    }
    /// <p>An ID for the endpoint. For custom routing accelerators, this is the virtual private cloud (VPC) subnet ID.</p>
    pub fn set_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_id(input);
        self
    }
    /// <p>An ID for the endpoint. For custom routing accelerators, this is the virtual private cloud (VPC) subnet ID.</p>
    pub fn get_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_endpoint_id()
    }
    ///
    /// Appends an item to `DestinationAddresses`.
    ///
    /// To override the contents of this collection use [`set_destination_addresses`](Self::set_destination_addresses).
    ///
    /// <p>A list of specific Amazon EC2 instance IP addresses (destination addresses) in a subnet that you want to prevent from receiving traffic. The IP addresses must be a subset of the IP addresses allowed for the VPC subnet associated with the endpoint group.</p>
    pub fn destination_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.destination_addresses(input.into());
        self
    }
    /// <p>A list of specific Amazon EC2 instance IP addresses (destination addresses) in a subnet that you want to prevent from receiving traffic. The IP addresses must be a subset of the IP addresses allowed for the VPC subnet associated with the endpoint group.</p>
    pub fn set_destination_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_destination_addresses(input);
        self
    }
    /// <p>A list of specific Amazon EC2 instance IP addresses (destination addresses) in a subnet that you want to prevent from receiving traffic. The IP addresses must be a subset of the IP addresses allowed for the VPC subnet associated with the endpoint group.</p>
    pub fn get_destination_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_destination_addresses()
    }
    ///
    /// Appends an item to `DestinationPorts`.
    ///
    /// To override the contents of this collection use [`set_destination_ports`](Self::set_destination_ports).
    ///
    /// <p>A list of specific Amazon EC2 instance ports (destination ports) in a subnet endpoint that you want to prevent from receiving traffic.</p>
    pub fn destination_ports(mut self, input: i32) -> Self {
        self.inner = self.inner.destination_ports(input);
        self
    }
    /// <p>A list of specific Amazon EC2 instance ports (destination ports) in a subnet endpoint that you want to prevent from receiving traffic.</p>
    pub fn set_destination_ports(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.inner = self.inner.set_destination_ports(input);
        self
    }
    /// <p>A list of specific Amazon EC2 instance ports (destination ports) in a subnet endpoint that you want to prevent from receiving traffic.</p>
    pub fn get_destination_ports(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        self.inner.get_destination_ports()
    }
    /// <p>Indicates whether all destination IP addresses and ports for a specified VPC subnet endpoint <i>cannot</i> receive traffic from a custom routing accelerator. The value is TRUE or FALSE.</p>
    /// <p>When set to TRUE, <i>no</i> destinations in the custom routing VPC subnet can receive traffic. Note that you cannot specify destination IP addresses and ports when the value is set to TRUE.</p>
    /// <p>When set to FALSE (or not specified), you <i>must</i> specify a list of destination IP addresses that cannot receive traffic. A list of ports is optional. If you don't specify a list of ports, the ports that can accept traffic is the same as the ports configured for the endpoint group.</p>
    /// <p>The default value is FALSE.</p>
    pub fn deny_all_traffic_to_endpoint(mut self, input: bool) -> Self {
        self.inner = self.inner.deny_all_traffic_to_endpoint(input);
        self
    }
    /// <p>Indicates whether all destination IP addresses and ports for a specified VPC subnet endpoint <i>cannot</i> receive traffic from a custom routing accelerator. The value is TRUE or FALSE.</p>
    /// <p>When set to TRUE, <i>no</i> destinations in the custom routing VPC subnet can receive traffic. Note that you cannot specify destination IP addresses and ports when the value is set to TRUE.</p>
    /// <p>When set to FALSE (or not specified), you <i>must</i> specify a list of destination IP addresses that cannot receive traffic. A list of ports is optional. If you don't specify a list of ports, the ports that can accept traffic is the same as the ports configured for the endpoint group.</p>
    /// <p>The default value is FALSE.</p>
    pub fn set_deny_all_traffic_to_endpoint(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_deny_all_traffic_to_endpoint(input);
        self
    }
    /// <p>Indicates whether all destination IP addresses and ports for a specified VPC subnet endpoint <i>cannot</i> receive traffic from a custom routing accelerator. The value is TRUE or FALSE.</p>
    /// <p>When set to TRUE, <i>no</i> destinations in the custom routing VPC subnet can receive traffic. Note that you cannot specify destination IP addresses and ports when the value is set to TRUE.</p>
    /// <p>When set to FALSE (or not specified), you <i>must</i> specify a list of destination IP addresses that cannot receive traffic. A list of ports is optional. If you don't specify a list of ports, the ports that can accept traffic is the same as the ports configured for the endpoint group.</p>
    /// <p>The default value is FALSE.</p>
    pub fn get_deny_all_traffic_to_endpoint(&self) -> &::std::option::Option<bool> {
        self.inner.get_deny_all_traffic_to_endpoint()
    }
}
