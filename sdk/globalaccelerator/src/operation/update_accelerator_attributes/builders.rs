// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_accelerator_attributes::_update_accelerator_attributes_output::UpdateAcceleratorAttributesOutputBuilder;

pub use crate::operation::update_accelerator_attributes::_update_accelerator_attributes_input::UpdateAcceleratorAttributesInputBuilder;

/// Fluent builder constructing a request to `UpdateAcceleratorAttributes`.
///
/// <p>Update the attributes for an accelerator. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAcceleratorAttributesFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_accelerator_attributes::builders::UpdateAcceleratorAttributesInputBuilder
            }
impl UpdateAcceleratorAttributesFluentBuilder {
    /// Creates a new `UpdateAcceleratorAttributes`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributes,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_accelerator_attributes::UpdateAcceleratorAttributesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the accelerator that you want to update.</p>
    pub fn accelerator_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.accelerator_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the accelerator that you want to update.</p>
    pub fn set_accelerator_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_accelerator_arn(input);
        self
    }
    /// <p>Update whether flow logs are enabled. The default value is false. If the value is true, <code>FlowLogsS3Bucket</code> and <code>FlowLogsS3Prefix</code> must be specified.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/monitoring-global-accelerator.flow-logs.html">Flow Logs</a> in the <i>Global Accelerator Developer Guide</i>.</p>
    pub fn flow_logs_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.flow_logs_enabled(input);
        self
    }
    /// <p>Update whether flow logs are enabled. The default value is false. If the value is true, <code>FlowLogsS3Bucket</code> and <code>FlowLogsS3Prefix</code> must be specified.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/global-accelerator/latest/dg/monitoring-global-accelerator.flow-logs.html">Flow Logs</a> in the <i>Global Accelerator Developer Guide</i>.</p>
    pub fn set_flow_logs_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_flow_logs_enabled(input);
        self
    }
    /// <p>The name of the Amazon S3 bucket for the flow logs. Attribute is required if <code>FlowLogsEnabled</code> is <code>true</code>. The bucket must exist and have a bucket policy that grants Global Accelerator permission to write to the bucket.</p>
    pub fn flow_logs_s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_logs_s3_bucket(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket for the flow logs. Attribute is required if <code>FlowLogsEnabled</code> is <code>true</code>. The bucket must exist and have a bucket policy that grants Global Accelerator permission to write to the bucket.</p>
    pub fn set_flow_logs_s3_bucket(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_flow_logs_s3_bucket(input);
        self
    }
    /// <p>Update the prefix for the location in the Amazon S3 bucket for the flow logs. Attribute is required if <code>FlowLogsEnabled</code> is <code>true</code>. </p>
    /// <p>If you specify slash (/) for the S3 bucket prefix, the log file bucket folder structure will include a double slash (//), like the following:</p>
    /// <p>s3-bucket_name//AWSLogs/aws_account_id</p>
    pub fn flow_logs_s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_logs_s3_prefix(input.into());
        self
    }
    /// <p>Update the prefix for the location in the Amazon S3 bucket for the flow logs. Attribute is required if <code>FlowLogsEnabled</code> is <code>true</code>. </p>
    /// <p>If you specify slash (/) for the S3 bucket prefix, the log file bucket folder structure will include a double slash (//), like the following:</p>
    /// <p>s3-bucket_name//AWSLogs/aws_account_id</p>
    pub fn set_flow_logs_s3_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_flow_logs_s3_prefix(input);
        self
    }
}
