// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_accelerators_output_next_token(
    input: &crate::output::ListAcceleratorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_byoip_cidrs_output_next_token(
    input: &crate::output::ListByoipCidrsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_custom_routing_accelerators_output_next_token(
    input: &crate::output::ListCustomRoutingAcceleratorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_custom_routing_endpoint_groups_output_next_token(
    input: &crate::output::ListCustomRoutingEndpointGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_custom_routing_listeners_output_next_token(
    input: &crate::output::ListCustomRoutingListenersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_custom_routing_port_mappings_output_next_token(
    input: &crate::output::ListCustomRoutingPortMappingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_custom_routing_port_mappings_by_destination_output_next_token(
    input: &crate::output::ListCustomRoutingPortMappingsByDestinationOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_endpoint_groups_output_next_token(
    input: &crate::output::ListEndpointGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_listeners_output_next_token(
    input: &crate::output::ListListenersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_accelerators_output_accelerators(
    input: crate::output::ListAcceleratorsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Accelerator>> {
    let input = match input.accelerators {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_byoip_cidrs_output_byoip_cidrs(
    input: crate::output::ListByoipCidrsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ByoipCidr>> {
    let input = match input.byoip_cidrs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_custom_routing_accelerators_output_accelerators(
    input: crate::output::ListCustomRoutingAcceleratorsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CustomRoutingAccelerator>> {
    let input = match input.accelerators {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_custom_routing_listeners_output_listeners(
    input: crate::output::ListCustomRoutingListenersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CustomRoutingListener>> {
    let input = match input.listeners {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_custom_routing_port_mappings_output_port_mappings(
    input: crate::output::ListCustomRoutingPortMappingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PortMapping>> {
    let input = match input.port_mappings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_custom_routing_port_mappings_by_destination_output_destination_port_mappings(
    input: crate::output::ListCustomRoutingPortMappingsByDestinationOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DestinationPortMapping>> {
    let input = match input.destination_port_mappings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_endpoint_groups_output_endpoint_groups(
    input: crate::output::ListEndpointGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EndpointGroup>> {
    let input = match input.endpoint_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_listeners_output_listeners(
    input: crate::output::ListListenersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Listener>> {
    let input = match input.listeners {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
