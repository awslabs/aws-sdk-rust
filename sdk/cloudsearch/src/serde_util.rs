// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn define_analysis_scheme_output_correct_errors(
    mut builder: crate::operation::define_analysis_scheme::builders::DefineAnalysisSchemeOutputBuilder,
) -> crate::operation::define_analysis_scheme::builders::DefineAnalysisSchemeOutputBuilder {
    if builder.analysis_scheme.is_none() {
        builder.analysis_scheme = {
            let builder = crate::types::builders::AnalysisSchemeStatusBuilder::default();
            Some(crate::serde_util::analysis_scheme_status_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn define_expression_output_correct_errors(
    mut builder: crate::operation::define_expression::builders::DefineExpressionOutputBuilder,
) -> crate::operation::define_expression::builders::DefineExpressionOutputBuilder {
    if builder.expression.is_none() {
        builder.expression = {
            let builder = crate::types::builders::ExpressionStatusBuilder::default();
            Some(crate::serde_util::expression_status_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn define_index_field_output_correct_errors(
    mut builder: crate::operation::define_index_field::builders::DefineIndexFieldOutputBuilder,
) -> crate::operation::define_index_field::builders::DefineIndexFieldOutputBuilder {
    if builder.index_field.is_none() {
        builder.index_field = {
            let builder = crate::types::builders::IndexFieldStatusBuilder::default();
            Some(crate::serde_util::index_field_status_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn define_suggester_output_correct_errors(
    mut builder: crate::operation::define_suggester::builders::DefineSuggesterOutputBuilder,
) -> crate::operation::define_suggester::builders::DefineSuggesterOutputBuilder {
    if builder.suggester.is_none() {
        builder.suggester = {
            let builder = crate::types::builders::SuggesterStatusBuilder::default();
            Some(crate::serde_util::suggester_status_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_analysis_scheme_output_correct_errors(
    mut builder: crate::operation::delete_analysis_scheme::builders::DeleteAnalysisSchemeOutputBuilder,
) -> crate::operation::delete_analysis_scheme::builders::DeleteAnalysisSchemeOutputBuilder {
    if builder.analysis_scheme.is_none() {
        builder.analysis_scheme = {
            let builder = crate::types::builders::AnalysisSchemeStatusBuilder::default();
            Some(crate::serde_util::analysis_scheme_status_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_expression_output_correct_errors(
    mut builder: crate::operation::delete_expression::builders::DeleteExpressionOutputBuilder,
) -> crate::operation::delete_expression::builders::DeleteExpressionOutputBuilder {
    if builder.expression.is_none() {
        builder.expression = {
            let builder = crate::types::builders::ExpressionStatusBuilder::default();
            Some(crate::serde_util::expression_status_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_index_field_output_correct_errors(
    mut builder: crate::operation::delete_index_field::builders::DeleteIndexFieldOutputBuilder,
) -> crate::operation::delete_index_field::builders::DeleteIndexFieldOutputBuilder {
    if builder.index_field.is_none() {
        builder.index_field = {
            let builder = crate::types::builders::IndexFieldStatusBuilder::default();
            Some(crate::serde_util::index_field_status_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn delete_suggester_output_correct_errors(
    mut builder: crate::operation::delete_suggester::builders::DeleteSuggesterOutputBuilder,
) -> crate::operation::delete_suggester::builders::DeleteSuggesterOutputBuilder {
    if builder.suggester.is_none() {
        builder.suggester = {
            let builder = crate::types::builders::SuggesterStatusBuilder::default();
            Some(crate::serde_util::suggester_status_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn describe_analysis_schemes_output_correct_errors(
    mut builder: crate::operation::describe_analysis_schemes::builders::DescribeAnalysisSchemesOutputBuilder,
) -> crate::operation::describe_analysis_schemes::builders::DescribeAnalysisSchemesOutputBuilder {
    if builder.analysis_schemes.is_none() {
        builder.analysis_schemes = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_domains_output_correct_errors(
    mut builder: crate::operation::describe_domains::builders::DescribeDomainsOutputBuilder,
) -> crate::operation::describe_domains::builders::DescribeDomainsOutputBuilder {
    if builder.domain_status_list.is_none() {
        builder.domain_status_list = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_expressions_output_correct_errors(
    mut builder: crate::operation::describe_expressions::builders::DescribeExpressionsOutputBuilder,
) -> crate::operation::describe_expressions::builders::DescribeExpressionsOutputBuilder {
    if builder.expressions.is_none() {
        builder.expressions = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_index_fields_output_correct_errors(
    mut builder: crate::operation::describe_index_fields::builders::DescribeIndexFieldsOutputBuilder,
) -> crate::operation::describe_index_fields::builders::DescribeIndexFieldsOutputBuilder {
    if builder.index_fields.is_none() {
        builder.index_fields = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_scaling_parameters_output_correct_errors(
    mut builder: crate::operation::describe_scaling_parameters::builders::DescribeScalingParametersOutputBuilder,
) -> crate::operation::describe_scaling_parameters::builders::DescribeScalingParametersOutputBuilder {
    if builder.scaling_parameters.is_none() {
        builder.scaling_parameters = {
            let builder = crate::types::builders::ScalingParametersStatusBuilder::default();
            Some(crate::serde_util::scaling_parameters_status_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn describe_service_access_policies_output_correct_errors(
    mut builder: crate::operation::describe_service_access_policies::builders::DescribeServiceAccessPoliciesOutputBuilder,
) -> crate::operation::describe_service_access_policies::builders::DescribeServiceAccessPoliciesOutputBuilder {
    if builder.access_policies.is_none() {
        builder.access_policies = {
            let builder = crate::types::builders::AccessPoliciesStatusBuilder::default();
            crate::serde_util::access_policies_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_suggesters_output_correct_errors(
    mut builder: crate::operation::describe_suggesters::builders::DescribeSuggestersOutputBuilder,
) -> crate::operation::describe_suggesters::builders::DescribeSuggestersOutputBuilder {
    if builder.suggesters.is_none() {
        builder.suggesters = Some(Default::default())
    }
    builder
}

pub(crate) fn update_scaling_parameters_output_correct_errors(
    mut builder: crate::operation::update_scaling_parameters::builders::UpdateScalingParametersOutputBuilder,
) -> crate::operation::update_scaling_parameters::builders::UpdateScalingParametersOutputBuilder {
    if builder.scaling_parameters.is_none() {
        builder.scaling_parameters = {
            let builder = crate::types::builders::ScalingParametersStatusBuilder::default();
            Some(crate::serde_util::scaling_parameters_status_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn update_service_access_policies_output_correct_errors(
    mut builder: crate::operation::update_service_access_policies::builders::UpdateServiceAccessPoliciesOutputBuilder,
) -> crate::operation::update_service_access_policies::builders::UpdateServiceAccessPoliciesOutputBuilder {
    if builder.access_policies.is_none() {
        builder.access_policies = {
            let builder = crate::types::builders::AccessPoliciesStatusBuilder::default();
            crate::serde_util::access_policies_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn analysis_scheme_status_correct_errors(
    mut builder: crate::types::builders::AnalysisSchemeStatusBuilder,
) -> crate::types::builders::AnalysisSchemeStatusBuilder {
    if builder.options.is_none() {
        builder.options = {
            let builder = crate::types::builders::AnalysisSchemeBuilder::default();
            crate::serde_util::analysis_scheme_correct_errors(builder).build().ok()
        }
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::OptionStatusBuilder::default();
            crate::serde_util::option_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn expression_status_correct_errors(
    mut builder: crate::types::builders::ExpressionStatusBuilder,
) -> crate::types::builders::ExpressionStatusBuilder {
    if builder.options.is_none() {
        builder.options = {
            let builder = crate::types::builders::ExpressionBuilder::default();
            crate::serde_util::expression_correct_errors(builder).build().ok()
        }
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::OptionStatusBuilder::default();
            crate::serde_util::option_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn index_field_status_correct_errors(
    mut builder: crate::types::builders::IndexFieldStatusBuilder,
) -> crate::types::builders::IndexFieldStatusBuilder {
    if builder.options.is_none() {
        builder.options = {
            let builder = crate::types::builders::IndexFieldBuilder::default();
            crate::serde_util::index_field_correct_errors(builder).build().ok()
        }
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::OptionStatusBuilder::default();
            crate::serde_util::option_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn suggester_status_correct_errors(
    mut builder: crate::types::builders::SuggesterStatusBuilder,
) -> crate::types::builders::SuggesterStatusBuilder {
    if builder.options.is_none() {
        builder.options = {
            let builder = crate::types::builders::SuggesterBuilder::default();
            crate::serde_util::suggester_correct_errors(builder).build().ok()
        }
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::OptionStatusBuilder::default();
            crate::serde_util::option_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn scaling_parameters_status_correct_errors(
    mut builder: crate::types::builders::ScalingParametersStatusBuilder,
) -> crate::types::builders::ScalingParametersStatusBuilder {
    if builder.options.is_none() {
        builder.options = {
            let builder = crate::types::builders::ScalingParametersBuilder::default();
            Some(builder.build())
        }
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::OptionStatusBuilder::default();
            crate::serde_util::option_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn access_policies_status_correct_errors(
    mut builder: crate::types::builders::AccessPoliciesStatusBuilder,
) -> crate::types::builders::AccessPoliciesStatusBuilder {
    if builder.options.is_none() {
        builder.options = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::OptionStatusBuilder::default();
            crate::serde_util::option_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn availability_options_status_correct_errors(
    mut builder: crate::types::builders::AvailabilityOptionsStatusBuilder,
) -> crate::types::builders::AvailabilityOptionsStatusBuilder {
    if builder.options.is_none() {
        builder.options = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::OptionStatusBuilder::default();
            crate::serde_util::option_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn domain_endpoint_options_status_correct_errors(
    mut builder: crate::types::builders::DomainEndpointOptionsStatusBuilder,
) -> crate::types::builders::DomainEndpointOptionsStatusBuilder {
    if builder.options.is_none() {
        builder.options = {
            let builder = crate::types::builders::DomainEndpointOptionsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.status.is_none() {
        builder.status = {
            let builder = crate::types::builders::OptionStatusBuilder::default();
            crate::serde_util::option_status_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn domain_status_correct_errors(mut builder: crate::types::builders::DomainStatusBuilder) -> crate::types::builders::DomainStatusBuilder {
    if builder.domain_id.is_none() {
        builder.domain_id = Some(Default::default())
    }
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.requires_index_documents.is_none() {
        builder.requires_index_documents = Some(Default::default())
    }
    builder
}

pub(crate) fn analysis_scheme_correct_errors(
    mut builder: crate::types::builders::AnalysisSchemeBuilder,
) -> crate::types::builders::AnalysisSchemeBuilder {
    if builder.analysis_scheme_name.is_none() {
        builder.analysis_scheme_name = Some(Default::default())
    }
    if builder.analysis_scheme_language.is_none() {
        builder.analysis_scheme_language = "no value was set".parse::<crate::types::AnalysisSchemeLanguage>().ok()
    }
    builder
}

pub(crate) fn option_status_correct_errors(mut builder: crate::types::builders::OptionStatusBuilder) -> crate::types::builders::OptionStatusBuilder {
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_date.is_none() {
        builder.update_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::OptionState>().ok()
    }
    builder
}

pub(crate) fn expression_correct_errors(mut builder: crate::types::builders::ExpressionBuilder) -> crate::types::builders::ExpressionBuilder {
    if builder.expression_name.is_none() {
        builder.expression_name = Some(Default::default())
    }
    if builder.expression_value.is_none() {
        builder.expression_value = Some(Default::default())
    }
    builder
}

pub(crate) fn index_field_correct_errors(mut builder: crate::types::builders::IndexFieldBuilder) -> crate::types::builders::IndexFieldBuilder {
    if builder.index_field_name.is_none() {
        builder.index_field_name = Some(Default::default())
    }
    if builder.index_field_type.is_none() {
        builder.index_field_type = "no value was set".parse::<crate::types::IndexFieldType>().ok()
    }
    builder
}

pub(crate) fn suggester_correct_errors(mut builder: crate::types::builders::SuggesterBuilder) -> crate::types::builders::SuggesterBuilder {
    if builder.suggester_name.is_none() {
        builder.suggester_name = Some(Default::default())
    }
    if builder.document_suggester_options.is_none() {
        builder.document_suggester_options = {
            let builder = crate::types::builders::DocumentSuggesterOptionsBuilder::default();
            crate::serde_util::document_suggester_options_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn limits_correct_errors(mut builder: crate::types::builders::LimitsBuilder) -> crate::types::builders::LimitsBuilder {
    if builder.maximum_replication_count.is_none() {
        builder.maximum_replication_count = Some(Default::default())
    }
    if builder.maximum_partition_count.is_none() {
        builder.maximum_partition_count = Some(Default::default())
    }
    builder
}

pub(crate) fn document_suggester_options_correct_errors(
    mut builder: crate::types::builders::DocumentSuggesterOptionsBuilder,
) -> crate::types::builders::DocumentSuggesterOptionsBuilder {
    if builder.source_field.is_none() {
        builder.source_field = Some(Default::default())
    }
    builder
}
