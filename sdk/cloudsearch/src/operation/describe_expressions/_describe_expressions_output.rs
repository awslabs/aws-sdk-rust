// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result of a <code>DescribeExpressions</code> request. Contains the expressions configured for the domain specified in the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeExpressionsOutput {
    /// <p>The expressions configured for the domain.</p>
    #[doc(hidden)]
    pub expressions: std::option::Option<std::vec::Vec<crate::types::ExpressionStatus>>,
    _request_id: Option<String>,
}
impl DescribeExpressionsOutput {
    /// <p>The expressions configured for the domain.</p>
    pub fn expressions(&self) -> std::option::Option<&[crate::types::ExpressionStatus]> {
        self.expressions.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeExpressionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeExpressionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeExpressionsOutput`](crate::operation::describe_expressions::DescribeExpressionsOutput).
    pub fn builder(
    ) -> crate::operation::describe_expressions::builders::DescribeExpressionsOutputBuilder {
        crate::operation::describe_expressions::builders::DescribeExpressionsOutputBuilder::default(
        )
    }
}

/// A builder for [`DescribeExpressionsOutput`](crate::operation::describe_expressions::DescribeExpressionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeExpressionsOutputBuilder {
    pub(crate) expressions: std::option::Option<std::vec::Vec<crate::types::ExpressionStatus>>,
    _request_id: Option<String>,
}
impl DescribeExpressionsOutputBuilder {
    /// Appends an item to `expressions`.
    ///
    /// To override the contents of this collection use [`set_expressions`](Self::set_expressions).
    ///
    /// <p>The expressions configured for the domain.</p>
    pub fn expressions(mut self, input: crate::types::ExpressionStatus) -> Self {
        let mut v = self.expressions.unwrap_or_default();
        v.push(input);
        self.expressions = Some(v);
        self
    }
    /// <p>The expressions configured for the domain.</p>
    pub fn set_expressions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ExpressionStatus>>,
    ) -> Self {
        self.expressions = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeExpressionsOutput`](crate::operation::describe_expressions::DescribeExpressionsOutput).
    pub fn build(self) -> crate::operation::describe_expressions::DescribeExpressionsOutput {
        crate::operation::describe_expressions::DescribeExpressionsOutput {
            expressions: self.expressions,
            _request_id: self._request_id,
        }
    }
}
