// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the parameters to the <code><code>DescribeAnalysisSchemes</code></code> operation. Specifies the name of the domain you want to describe. To limit the response to particular analysis schemes, specify the names of the analysis schemes you want to describe. To show the active configuration and exclude any pending changes, set the <code>Deployed</code> option to <code>true</code>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAnalysisSchemesInput {
    /// <p>The name of the domain you want to describe.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The analysis schemes you want to describe.</p>
    pub analysis_scheme_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.</p>
    pub deployed: ::std::option::Option<bool>,
}
impl DescribeAnalysisSchemesInput {
    /// <p>The name of the domain you want to describe.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The analysis schemes you want to describe.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.analysis_scheme_names.is_none()`.
    pub fn analysis_scheme_names(&self) -> &[::std::string::String] {
        self.analysis_scheme_names.as_deref().unwrap_or_default()
    }
    /// <p>Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.</p>
    pub fn deployed(&self) -> ::std::option::Option<bool> {
        self.deployed
    }
}
impl DescribeAnalysisSchemesInput {
    /// Creates a new builder-style object to manufacture [`DescribeAnalysisSchemesInput`](crate::operation::describe_analysis_schemes::DescribeAnalysisSchemesInput).
    pub fn builder() -> crate::operation::describe_analysis_schemes::builders::DescribeAnalysisSchemesInputBuilder {
        crate::operation::describe_analysis_schemes::builders::DescribeAnalysisSchemesInputBuilder::default()
    }
}

/// A builder for [`DescribeAnalysisSchemesInput`](crate::operation::describe_analysis_schemes::DescribeAnalysisSchemesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeAnalysisSchemesInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_scheme_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) deployed: ::std::option::Option<bool>,
}
impl DescribeAnalysisSchemesInputBuilder {
    /// <p>The name of the domain you want to describe.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain you want to describe.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The name of the domain you want to describe.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// Appends an item to `analysis_scheme_names`.
    ///
    /// To override the contents of this collection use [`set_analysis_scheme_names`](Self::set_analysis_scheme_names).
    ///
    /// <p>The analysis schemes you want to describe.</p>
    pub fn analysis_scheme_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.analysis_scheme_names.unwrap_or_default();
        v.push(input.into());
        self.analysis_scheme_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The analysis schemes you want to describe.</p>
    pub fn set_analysis_scheme_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.analysis_scheme_names = input;
        self
    }
    /// <p>The analysis schemes you want to describe.</p>
    pub fn get_analysis_scheme_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.analysis_scheme_names
    }
    /// <p>Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.</p>
    pub fn deployed(mut self, input: bool) -> Self {
        self.deployed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.</p>
    pub fn set_deployed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deployed = input;
        self
    }
    /// <p>Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.</p>
    pub fn get_deployed(&self) -> &::std::option::Option<bool> {
        &self.deployed
    }
    /// Consumes the builder and constructs a [`DescribeAnalysisSchemesInput`](crate::operation::describe_analysis_schemes::DescribeAnalysisSchemesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_analysis_schemes::DescribeAnalysisSchemesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_analysis_schemes::DescribeAnalysisSchemesInput {
            domain_name: self.domain_name,
            analysis_scheme_names: self.analysis_scheme_names,
            deployed: self.deployed,
        })
    }
}
