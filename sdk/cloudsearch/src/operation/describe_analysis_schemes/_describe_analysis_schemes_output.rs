// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result of a <code>DescribeAnalysisSchemes</code> request. Contains the analysis schemes configured for the domain specified in the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAnalysisSchemesOutput {
    /// <p>The analysis scheme descriptions.</p>
    #[doc(hidden)]
    pub analysis_schemes: std::option::Option<std::vec::Vec<crate::types::AnalysisSchemeStatus>>,
    _request_id: Option<String>,
}
impl DescribeAnalysisSchemesOutput {
    /// <p>The analysis scheme descriptions.</p>
    pub fn analysis_schemes(&self) -> std::option::Option<&[crate::types::AnalysisSchemeStatus]> {
        self.analysis_schemes.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAnalysisSchemesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAnalysisSchemesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAnalysisSchemesOutput`](crate::operation::describe_analysis_schemes::DescribeAnalysisSchemesOutput).
    pub fn builder(
    ) -> crate::operation::describe_analysis_schemes::builders::DescribeAnalysisSchemesOutputBuilder
    {
        crate::operation::describe_analysis_schemes::builders::DescribeAnalysisSchemesOutputBuilder::default()
    }
}

/// A builder for [`DescribeAnalysisSchemesOutput`](crate::operation::describe_analysis_schemes::DescribeAnalysisSchemesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAnalysisSchemesOutputBuilder {
    pub(crate) analysis_schemes:
        std::option::Option<std::vec::Vec<crate::types::AnalysisSchemeStatus>>,
    _request_id: Option<String>,
}
impl DescribeAnalysisSchemesOutputBuilder {
    /// Appends an item to `analysis_schemes`.
    ///
    /// To override the contents of this collection use [`set_analysis_schemes`](Self::set_analysis_schemes).
    ///
    /// <p>The analysis scheme descriptions.</p>
    pub fn analysis_schemes(mut self, input: crate::types::AnalysisSchemeStatus) -> Self {
        let mut v = self.analysis_schemes.unwrap_or_default();
        v.push(input);
        self.analysis_schemes = Some(v);
        self
    }
    /// <p>The analysis scheme descriptions.</p>
    pub fn set_analysis_schemes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AnalysisSchemeStatus>>,
    ) -> Self {
        self.analysis_schemes = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAnalysisSchemesOutput`](crate::operation::describe_analysis_schemes::DescribeAnalysisSchemesOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_analysis_schemes::DescribeAnalysisSchemesOutput {
        crate::operation::describe_analysis_schemes::DescribeAnalysisSchemesOutput {
            analysis_schemes: self.analysis_schemes,
            _request_id: self._request_id,
        }
    }
}
