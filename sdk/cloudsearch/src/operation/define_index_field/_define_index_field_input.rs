// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the parameters to the <code><code>DefineIndexField</code></code> operation. Specifies the name of the domain you want to update and the index field configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefineIndexFieldInput {
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The index field and field options you want to configure. </p>
    pub index_field: ::std::option::Option<crate::types::IndexField>,
}
impl DefineIndexFieldInput {
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The index field and field options you want to configure. </p>
    pub fn index_field(&self) -> ::std::option::Option<&crate::types::IndexField> {
        self.index_field.as_ref()
    }
}
impl DefineIndexFieldInput {
    /// Creates a new builder-style object to manufacture [`DefineIndexFieldInput`](crate::operation::define_index_field::DefineIndexFieldInput).
    pub fn builder() -> crate::operation::define_index_field::builders::DefineIndexFieldInputBuilder {
        crate::operation::define_index_field::builders::DefineIndexFieldInputBuilder::default()
    }
}

/// A builder for [`DefineIndexFieldInput`](crate::operation::define_index_field::DefineIndexFieldInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefineIndexFieldInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) index_field: ::std::option::Option<crate::types::IndexField>,
}
impl DefineIndexFieldInputBuilder {
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The index field and field options you want to configure. </p>
    /// This field is required.
    pub fn index_field(mut self, input: crate::types::IndexField) -> Self {
        self.index_field = ::std::option::Option::Some(input);
        self
    }
    /// <p>The index field and field options you want to configure. </p>
    pub fn set_index_field(mut self, input: ::std::option::Option<crate::types::IndexField>) -> Self {
        self.index_field = input;
        self
    }
    /// <p>The index field and field options you want to configure. </p>
    pub fn get_index_field(&self) -> &::std::option::Option<crate::types::IndexField> {
        &self.index_field
    }
    /// Consumes the builder and constructs a [`DefineIndexFieldInput`](crate::operation::define_index_field::DefineIndexFieldInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::define_index_field::DefineIndexFieldInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::define_index_field::DefineIndexFieldInput {
            domain_name: self.domain_name,
            index_field: self.index_field,
        })
    }
}
