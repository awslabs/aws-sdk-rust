// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the parameters to the <code><code>DefineSuggester</code></code> operation. Specifies the name of the domain you want to update and the suggester configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DefineSuggesterInput {
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>Configuration information for a search suggester. Each suggester has a unique name and specifies the text field you want to use for suggestions. The following options can be configured for a suggester: <code>FuzzyMatching</code>, <code>SortExpression</code>. </p>
    #[doc(hidden)]
    pub suggester: std::option::Option<crate::types::Suggester>,
}
impl DefineSuggesterInput {
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>Configuration information for a search suggester. Each suggester has a unique name and specifies the text field you want to use for suggestions. The following options can be configured for a suggester: <code>FuzzyMatching</code>, <code>SortExpression</code>. </p>
    pub fn suggester(&self) -> std::option::Option<&crate::types::Suggester> {
        self.suggester.as_ref()
    }
}
impl DefineSuggesterInput {
    /// Creates a new builder-style object to manufacture [`DefineSuggesterInput`](crate::operation::define_suggester::DefineSuggesterInput).
    pub fn builder() -> crate::operation::define_suggester::builders::DefineSuggesterInputBuilder {
        crate::operation::define_suggester::builders::DefineSuggesterInputBuilder::default()
    }
}

/// A builder for [`DefineSuggesterInput`](crate::operation::define_suggester::DefineSuggesterInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DefineSuggesterInputBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) suggester: std::option::Option<crate::types::Suggester>,
}
impl DefineSuggesterInputBuilder {
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>Configuration information for a search suggester. Each suggester has a unique name and specifies the text field you want to use for suggestions. The following options can be configured for a suggester: <code>FuzzyMatching</code>, <code>SortExpression</code>. </p>
    pub fn suggester(mut self, input: crate::types::Suggester) -> Self {
        self.suggester = Some(input);
        self
    }
    /// <p>Configuration information for a search suggester. Each suggester has a unique name and specifies the text field you want to use for suggestions. The following options can be configured for a suggester: <code>FuzzyMatching</code>, <code>SortExpression</code>. </p>
    pub fn set_suggester(mut self, input: std::option::Option<crate::types::Suggester>) -> Self {
        self.suggester = input;
        self
    }
    /// Consumes the builder and constructs a [`DefineSuggesterInput`](crate::operation::define_suggester::DefineSuggesterInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::define_suggester::DefineSuggesterInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::define_suggester::DefineSuggesterInput {
            domain_name: self.domain_name,
            suggester: self.suggester,
        })
    }
}
