// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result of a <code>DefineExpression</code> request. Contains the status of the newly-configured expression.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefineExpressionOutput {
    /// <p>The value of an <code>Expression</code> and its current status.</p>
    pub expression: ::std::option::Option<crate::types::ExpressionStatus>,
    _request_id: Option<String>,
}
impl DefineExpressionOutput {
    /// <p>The value of an <code>Expression</code> and its current status.</p>
    pub fn expression(&self) -> ::std::option::Option<&crate::types::ExpressionStatus> {
        self.expression.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DefineExpressionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DefineExpressionOutput {
    /// Creates a new builder-style object to manufacture [`DefineExpressionOutput`](crate::operation::define_expression::DefineExpressionOutput).
    pub fn builder() -> crate::operation::define_expression::builders::DefineExpressionOutputBuilder {
        crate::operation::define_expression::builders::DefineExpressionOutputBuilder::default()
    }
}

/// A builder for [`DefineExpressionOutput`](crate::operation::define_expression::DefineExpressionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefineExpressionOutputBuilder {
    pub(crate) expression: ::std::option::Option<crate::types::ExpressionStatus>,
    _request_id: Option<String>,
}
impl DefineExpressionOutputBuilder {
    /// <p>The value of an <code>Expression</code> and its current status.</p>
    /// This field is required.
    pub fn expression(mut self, input: crate::types::ExpressionStatus) -> Self {
        self.expression = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of an <code>Expression</code> and its current status.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<crate::types::ExpressionStatus>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The value of an <code>Expression</code> and its current status.</p>
    pub fn get_expression(&self) -> &::std::option::Option<crate::types::ExpressionStatus> {
        &self.expression
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DefineExpressionOutput`](crate::operation::define_expression::DefineExpressionOutput).
    pub fn build(self) -> crate::operation::define_expression::DefineExpressionOutput {
        crate::operation::define_expression::DefineExpressionOutput {
            expression: self.expression,
            _request_id: self._request_id,
        }
    }
}
