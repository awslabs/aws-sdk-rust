// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result of a <code><code>DefineAnalysisScheme</code></code> request. Contains the status of the newly-configured analysis scheme.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefineAnalysisSchemeOutput {
    /// <p>The status and configuration of an <code>AnalysisScheme</code>.</p>
    pub analysis_scheme: ::std::option::Option<crate::types::AnalysisSchemeStatus>,
    _request_id: Option<String>,
}
impl DefineAnalysisSchemeOutput {
    /// <p>The status and configuration of an <code>AnalysisScheme</code>.</p>
    pub fn analysis_scheme(&self) -> ::std::option::Option<&crate::types::AnalysisSchemeStatus> {
        self.analysis_scheme.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DefineAnalysisSchemeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DefineAnalysisSchemeOutput {
    /// Creates a new builder-style object to manufacture [`DefineAnalysisSchemeOutput`](crate::operation::define_analysis_scheme::DefineAnalysisSchemeOutput).
    pub fn builder() -> crate::operation::define_analysis_scheme::builders::DefineAnalysisSchemeOutputBuilder {
        crate::operation::define_analysis_scheme::builders::DefineAnalysisSchemeOutputBuilder::default()
    }
}

/// A builder for [`DefineAnalysisSchemeOutput`](crate::operation::define_analysis_scheme::DefineAnalysisSchemeOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefineAnalysisSchemeOutputBuilder {
    pub(crate) analysis_scheme: ::std::option::Option<crate::types::AnalysisSchemeStatus>,
    _request_id: Option<String>,
}
impl DefineAnalysisSchemeOutputBuilder {
    /// <p>The status and configuration of an <code>AnalysisScheme</code>.</p>
    /// This field is required.
    pub fn analysis_scheme(mut self, input: crate::types::AnalysisSchemeStatus) -> Self {
        self.analysis_scheme = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status and configuration of an <code>AnalysisScheme</code>.</p>
    pub fn set_analysis_scheme(mut self, input: ::std::option::Option<crate::types::AnalysisSchemeStatus>) -> Self {
        self.analysis_scheme = input;
        self
    }
    /// <p>The status and configuration of an <code>AnalysisScheme</code>.</p>
    pub fn get_analysis_scheme(&self) -> &::std::option::Option<crate::types::AnalysisSchemeStatus> {
        &self.analysis_scheme
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DefineAnalysisSchemeOutput`](crate::operation::define_analysis_scheme::DefineAnalysisSchemeOutput).
    pub fn build(self) -> crate::operation::define_analysis_scheme::DefineAnalysisSchemeOutput {
        crate::operation::define_analysis_scheme::DefineAnalysisSchemeOutput {
            analysis_scheme: self.analysis_scheme,
            _request_id: self._request_id,
        }
    }
}
