// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct BuildSuggestersError {
    pub kind: BuildSuggestersErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum BuildSuggestersErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for BuildSuggestersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            BuildSuggestersErrorKind::BaseException(_inner) => _inner.fmt(f),
            BuildSuggestersErrorKind::InternalException(_inner) => _inner.fmt(f),
            BuildSuggestersErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            BuildSuggestersErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for BuildSuggestersError {
    fn code(&self) -> Option<&str> {
        BuildSuggestersError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl BuildSuggestersError {
    pub fn new(kind: BuildSuggestersErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: BuildSuggestersErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: BuildSuggestersErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, BuildSuggestersErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self.kind, BuildSuggestersErrorKind::InternalException(_))
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            BuildSuggestersErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for BuildSuggestersError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            BuildSuggestersErrorKind::BaseException(_inner) => Some(_inner),
            BuildSuggestersErrorKind::InternalException(_inner) => Some(_inner),
            BuildSuggestersErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            BuildSuggestersErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateDomainError {
    pub kind: CreateDomainErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateDomainErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceAlreadyExistsException(crate::error::ResourceAlreadyExistsException),
    ValidationException(crate::error::ValidationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateDomainError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateDomainErrorKind::BaseException(_inner) => _inner.fmt(f),
            CreateDomainErrorKind::InternalException(_inner) => _inner.fmt(f),
            CreateDomainErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            CreateDomainErrorKind::ResourceAlreadyExistsException(_inner) => _inner.fmt(f),
            CreateDomainErrorKind::ValidationException(_inner) => _inner.fmt(f),
            CreateDomainErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateDomainError {
    fn code(&self) -> Option<&str> {
        CreateDomainError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateDomainError {
    pub fn new(kind: CreateDomainErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateDomainErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateDomainErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, CreateDomainErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self.kind, CreateDomainErrorKind::InternalException(_))
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(&self.kind, CreateDomainErrorKind::LimitExceededException(_))
    }
    pub fn is_resource_already_exists_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateDomainErrorKind::ResourceAlreadyExistsException(_)
        )
    }
    pub fn is_validation_exception(&self) -> bool {
        matches!(&self.kind, CreateDomainErrorKind::ValidationException(_))
    }
}
impl std::error::Error for CreateDomainError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateDomainErrorKind::BaseException(_inner) => Some(_inner),
            CreateDomainErrorKind::InternalException(_inner) => Some(_inner),
            CreateDomainErrorKind::LimitExceededException(_inner) => Some(_inner),
            CreateDomainErrorKind::ResourceAlreadyExistsException(_inner) => Some(_inner),
            CreateDomainErrorKind::ValidationException(_inner) => Some(_inner),
            CreateDomainErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DefineAnalysisSchemeError {
    pub kind: DefineAnalysisSchemeErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DefineAnalysisSchemeErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DefineAnalysisSchemeError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DefineAnalysisSchemeErrorKind::BaseException(_inner) => _inner.fmt(f),
            DefineAnalysisSchemeErrorKind::InternalException(_inner) => _inner.fmt(f),
            DefineAnalysisSchemeErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            DefineAnalysisSchemeErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            DefineAnalysisSchemeErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DefineAnalysisSchemeErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DefineAnalysisSchemeError {
    fn code(&self) -> Option<&str> {
        DefineAnalysisSchemeError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DefineAnalysisSchemeError {
    pub fn new(kind: DefineAnalysisSchemeErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DefineAnalysisSchemeErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DefineAnalysisSchemeErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DefineAnalysisSchemeErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineAnalysisSchemeErrorKind::InternalException(_)
        )
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineAnalysisSchemeErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineAnalysisSchemeErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineAnalysisSchemeErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DefineAnalysisSchemeError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DefineAnalysisSchemeErrorKind::BaseException(_inner) => Some(_inner),
            DefineAnalysisSchemeErrorKind::InternalException(_inner) => Some(_inner),
            DefineAnalysisSchemeErrorKind::InvalidTypeException(_inner) => Some(_inner),
            DefineAnalysisSchemeErrorKind::LimitExceededException(_inner) => Some(_inner),
            DefineAnalysisSchemeErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DefineAnalysisSchemeErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DefineExpressionError {
    pub kind: DefineExpressionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DefineExpressionErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DefineExpressionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DefineExpressionErrorKind::BaseException(_inner) => _inner.fmt(f),
            DefineExpressionErrorKind::InternalException(_inner) => _inner.fmt(f),
            DefineExpressionErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            DefineExpressionErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            DefineExpressionErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DefineExpressionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DefineExpressionError {
    fn code(&self) -> Option<&str> {
        DefineExpressionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DefineExpressionError {
    pub fn new(kind: DefineExpressionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DefineExpressionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DefineExpressionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DefineExpressionErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self.kind, DefineExpressionErrorKind::InternalException(_))
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineExpressionErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineExpressionErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineExpressionErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DefineExpressionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DefineExpressionErrorKind::BaseException(_inner) => Some(_inner),
            DefineExpressionErrorKind::InternalException(_inner) => Some(_inner),
            DefineExpressionErrorKind::InvalidTypeException(_inner) => Some(_inner),
            DefineExpressionErrorKind::LimitExceededException(_inner) => Some(_inner),
            DefineExpressionErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DefineExpressionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DefineIndexFieldError {
    pub kind: DefineIndexFieldErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DefineIndexFieldErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DefineIndexFieldError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DefineIndexFieldErrorKind::BaseException(_inner) => _inner.fmt(f),
            DefineIndexFieldErrorKind::InternalException(_inner) => _inner.fmt(f),
            DefineIndexFieldErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            DefineIndexFieldErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            DefineIndexFieldErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DefineIndexFieldErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DefineIndexFieldError {
    fn code(&self) -> Option<&str> {
        DefineIndexFieldError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DefineIndexFieldError {
    pub fn new(kind: DefineIndexFieldErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DefineIndexFieldErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DefineIndexFieldErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DefineIndexFieldErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self.kind, DefineIndexFieldErrorKind::InternalException(_))
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineIndexFieldErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineIndexFieldErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineIndexFieldErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DefineIndexFieldError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DefineIndexFieldErrorKind::BaseException(_inner) => Some(_inner),
            DefineIndexFieldErrorKind::InternalException(_inner) => Some(_inner),
            DefineIndexFieldErrorKind::InvalidTypeException(_inner) => Some(_inner),
            DefineIndexFieldErrorKind::LimitExceededException(_inner) => Some(_inner),
            DefineIndexFieldErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DefineIndexFieldErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DefineSuggesterError {
    pub kind: DefineSuggesterErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DefineSuggesterErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DefineSuggesterError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DefineSuggesterErrorKind::BaseException(_inner) => _inner.fmt(f),
            DefineSuggesterErrorKind::InternalException(_inner) => _inner.fmt(f),
            DefineSuggesterErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            DefineSuggesterErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            DefineSuggesterErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DefineSuggesterErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DefineSuggesterError {
    fn code(&self) -> Option<&str> {
        DefineSuggesterError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DefineSuggesterError {
    pub fn new(kind: DefineSuggesterErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DefineSuggesterErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DefineSuggesterErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DefineSuggesterErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self.kind, DefineSuggesterErrorKind::InternalException(_))
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineSuggesterErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineSuggesterErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DefineSuggesterErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DefineSuggesterError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DefineSuggesterErrorKind::BaseException(_inner) => Some(_inner),
            DefineSuggesterErrorKind::InternalException(_inner) => Some(_inner),
            DefineSuggesterErrorKind::InvalidTypeException(_inner) => Some(_inner),
            DefineSuggesterErrorKind::LimitExceededException(_inner) => Some(_inner),
            DefineSuggesterErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DefineSuggesterErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteAnalysisSchemeError {
    pub kind: DeleteAnalysisSchemeErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteAnalysisSchemeErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteAnalysisSchemeError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteAnalysisSchemeErrorKind::BaseException(_inner) => _inner.fmt(f),
            DeleteAnalysisSchemeErrorKind::InternalException(_inner) => _inner.fmt(f),
            DeleteAnalysisSchemeErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            DeleteAnalysisSchemeErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DeleteAnalysisSchemeErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteAnalysisSchemeError {
    fn code(&self) -> Option<&str> {
        DeleteAnalysisSchemeError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteAnalysisSchemeError {
    pub fn new(kind: DeleteAnalysisSchemeErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteAnalysisSchemeErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteAnalysisSchemeErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DeleteAnalysisSchemeErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteAnalysisSchemeErrorKind::InternalException(_)
        )
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteAnalysisSchemeErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteAnalysisSchemeErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DeleteAnalysisSchemeError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteAnalysisSchemeErrorKind::BaseException(_inner) => Some(_inner),
            DeleteAnalysisSchemeErrorKind::InternalException(_inner) => Some(_inner),
            DeleteAnalysisSchemeErrorKind::InvalidTypeException(_inner) => Some(_inner),
            DeleteAnalysisSchemeErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DeleteAnalysisSchemeErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteDomainError {
    pub kind: DeleteDomainErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteDomainErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteDomainError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteDomainErrorKind::BaseException(_inner) => _inner.fmt(f),
            DeleteDomainErrorKind::InternalException(_inner) => _inner.fmt(f),
            DeleteDomainErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteDomainError {
    fn code(&self) -> Option<&str> {
        DeleteDomainError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteDomainError {
    pub fn new(kind: DeleteDomainErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteDomainErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteDomainErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DeleteDomainErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self.kind, DeleteDomainErrorKind::InternalException(_))
    }
}
impl std::error::Error for DeleteDomainError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteDomainErrorKind::BaseException(_inner) => Some(_inner),
            DeleteDomainErrorKind::InternalException(_inner) => Some(_inner),
            DeleteDomainErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteExpressionError {
    pub kind: DeleteExpressionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteExpressionErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteExpressionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteExpressionErrorKind::BaseException(_inner) => _inner.fmt(f),
            DeleteExpressionErrorKind::InternalException(_inner) => _inner.fmt(f),
            DeleteExpressionErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            DeleteExpressionErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DeleteExpressionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteExpressionError {
    fn code(&self) -> Option<&str> {
        DeleteExpressionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteExpressionError {
    pub fn new(kind: DeleteExpressionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteExpressionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteExpressionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DeleteExpressionErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self.kind, DeleteExpressionErrorKind::InternalException(_))
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteExpressionErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteExpressionErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DeleteExpressionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteExpressionErrorKind::BaseException(_inner) => Some(_inner),
            DeleteExpressionErrorKind::InternalException(_inner) => Some(_inner),
            DeleteExpressionErrorKind::InvalidTypeException(_inner) => Some(_inner),
            DeleteExpressionErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DeleteExpressionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteIndexFieldError {
    pub kind: DeleteIndexFieldErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteIndexFieldErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteIndexFieldError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteIndexFieldErrorKind::BaseException(_inner) => _inner.fmt(f),
            DeleteIndexFieldErrorKind::InternalException(_inner) => _inner.fmt(f),
            DeleteIndexFieldErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            DeleteIndexFieldErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DeleteIndexFieldErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteIndexFieldError {
    fn code(&self) -> Option<&str> {
        DeleteIndexFieldError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteIndexFieldError {
    pub fn new(kind: DeleteIndexFieldErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteIndexFieldErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteIndexFieldErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DeleteIndexFieldErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self.kind, DeleteIndexFieldErrorKind::InternalException(_))
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteIndexFieldErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteIndexFieldErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DeleteIndexFieldError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteIndexFieldErrorKind::BaseException(_inner) => Some(_inner),
            DeleteIndexFieldErrorKind::InternalException(_inner) => Some(_inner),
            DeleteIndexFieldErrorKind::InvalidTypeException(_inner) => Some(_inner),
            DeleteIndexFieldErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DeleteIndexFieldErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteSuggesterError {
    pub kind: DeleteSuggesterErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteSuggesterErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteSuggesterError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteSuggesterErrorKind::BaseException(_inner) => _inner.fmt(f),
            DeleteSuggesterErrorKind::InternalException(_inner) => _inner.fmt(f),
            DeleteSuggesterErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            DeleteSuggesterErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DeleteSuggesterErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteSuggesterError {
    fn code(&self) -> Option<&str> {
        DeleteSuggesterError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteSuggesterError {
    pub fn new(kind: DeleteSuggesterErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteSuggesterErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteSuggesterErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DeleteSuggesterErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self.kind, DeleteSuggesterErrorKind::InternalException(_))
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteSuggesterErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteSuggesterErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DeleteSuggesterError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteSuggesterErrorKind::BaseException(_inner) => Some(_inner),
            DeleteSuggesterErrorKind::InternalException(_inner) => Some(_inner),
            DeleteSuggesterErrorKind::InvalidTypeException(_inner) => Some(_inner),
            DeleteSuggesterErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DeleteSuggesterErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeAnalysisSchemesError {
    pub kind: DescribeAnalysisSchemesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeAnalysisSchemesErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeAnalysisSchemesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeAnalysisSchemesErrorKind::BaseException(_inner) => _inner.fmt(f),
            DescribeAnalysisSchemesErrorKind::InternalException(_inner) => _inner.fmt(f),
            DescribeAnalysisSchemesErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DescribeAnalysisSchemesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeAnalysisSchemesError {
    fn code(&self) -> Option<&str> {
        DescribeAnalysisSchemesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeAnalysisSchemesError {
    pub fn new(kind: DescribeAnalysisSchemesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeAnalysisSchemesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeAnalysisSchemesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeAnalysisSchemesErrorKind::BaseException(_)
        )
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeAnalysisSchemesErrorKind::InternalException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeAnalysisSchemesErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DescribeAnalysisSchemesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeAnalysisSchemesErrorKind::BaseException(_inner) => Some(_inner),
            DescribeAnalysisSchemesErrorKind::InternalException(_inner) => Some(_inner),
            DescribeAnalysisSchemesErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DescribeAnalysisSchemesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeAvailabilityOptionsError {
    pub kind: DescribeAvailabilityOptionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeAvailabilityOptionsErrorKind {
    BaseException(crate::error::BaseException),
    DisabledOperationException(crate::error::DisabledOperationException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeAvailabilityOptionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeAvailabilityOptionsErrorKind::BaseException(_inner) => _inner.fmt(f),
            DescribeAvailabilityOptionsErrorKind::DisabledOperationException(_inner) => {
                _inner.fmt(f)
            }
            DescribeAvailabilityOptionsErrorKind::InternalException(_inner) => _inner.fmt(f),
            DescribeAvailabilityOptionsErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            DescribeAvailabilityOptionsErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            DescribeAvailabilityOptionsErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DescribeAvailabilityOptionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeAvailabilityOptionsError {
    fn code(&self) -> Option<&str> {
        DescribeAvailabilityOptionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeAvailabilityOptionsError {
    pub fn new(kind: DescribeAvailabilityOptionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeAvailabilityOptionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeAvailabilityOptionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeAvailabilityOptionsErrorKind::BaseException(_)
        )
    }
    pub fn is_disabled_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeAvailabilityOptionsErrorKind::DisabledOperationException(_)
        )
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeAvailabilityOptionsErrorKind::InternalException(_)
        )
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeAvailabilityOptionsErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeAvailabilityOptionsErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeAvailabilityOptionsErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DescribeAvailabilityOptionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeAvailabilityOptionsErrorKind::BaseException(_inner) => Some(_inner),
            DescribeAvailabilityOptionsErrorKind::DisabledOperationException(_inner) => {
                Some(_inner)
            }
            DescribeAvailabilityOptionsErrorKind::InternalException(_inner) => Some(_inner),
            DescribeAvailabilityOptionsErrorKind::InvalidTypeException(_inner) => Some(_inner),
            DescribeAvailabilityOptionsErrorKind::LimitExceededException(_inner) => Some(_inner),
            DescribeAvailabilityOptionsErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DescribeAvailabilityOptionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeDomainEndpointOptionsError {
    pub kind: DescribeDomainEndpointOptionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeDomainEndpointOptionsErrorKind {
    BaseException(crate::error::BaseException),
    DisabledOperationException(crate::error::DisabledOperationException),
    InternalException(crate::error::InternalException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeDomainEndpointOptionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeDomainEndpointOptionsErrorKind::BaseException(_inner) => _inner.fmt(f),
            DescribeDomainEndpointOptionsErrorKind::DisabledOperationException(_inner) => {
                _inner.fmt(f)
            }
            DescribeDomainEndpointOptionsErrorKind::InternalException(_inner) => _inner.fmt(f),
            DescribeDomainEndpointOptionsErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            DescribeDomainEndpointOptionsErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DescribeDomainEndpointOptionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeDomainEndpointOptionsError {
    fn code(&self) -> Option<&str> {
        DescribeDomainEndpointOptionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeDomainEndpointOptionsError {
    pub fn new(kind: DescribeDomainEndpointOptionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeDomainEndpointOptionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeDomainEndpointOptionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDomainEndpointOptionsErrorKind::BaseException(_)
        )
    }
    pub fn is_disabled_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDomainEndpointOptionsErrorKind::DisabledOperationException(_)
        )
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDomainEndpointOptionsErrorKind::InternalException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDomainEndpointOptionsErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDomainEndpointOptionsErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DescribeDomainEndpointOptionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeDomainEndpointOptionsErrorKind::BaseException(_inner) => Some(_inner),
            DescribeDomainEndpointOptionsErrorKind::DisabledOperationException(_inner) => {
                Some(_inner)
            }
            DescribeDomainEndpointOptionsErrorKind::InternalException(_inner) => Some(_inner),
            DescribeDomainEndpointOptionsErrorKind::LimitExceededException(_inner) => Some(_inner),
            DescribeDomainEndpointOptionsErrorKind::ResourceNotFoundException(_inner) => {
                Some(_inner)
            }
            DescribeDomainEndpointOptionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeDomainsError {
    pub kind: DescribeDomainsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeDomainsErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeDomainsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeDomainsErrorKind::BaseException(_inner) => _inner.fmt(f),
            DescribeDomainsErrorKind::InternalException(_inner) => _inner.fmt(f),
            DescribeDomainsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeDomainsError {
    fn code(&self) -> Option<&str> {
        DescribeDomainsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeDomainsError {
    pub fn new(kind: DescribeDomainsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeDomainsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeDomainsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DescribeDomainsErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self.kind, DescribeDomainsErrorKind::InternalException(_))
    }
}
impl std::error::Error for DescribeDomainsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeDomainsErrorKind::BaseException(_inner) => Some(_inner),
            DescribeDomainsErrorKind::InternalException(_inner) => Some(_inner),
            DescribeDomainsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeExpressionsError {
    pub kind: DescribeExpressionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeExpressionsErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeExpressionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeExpressionsErrorKind::BaseException(_inner) => _inner.fmt(f),
            DescribeExpressionsErrorKind::InternalException(_inner) => _inner.fmt(f),
            DescribeExpressionsErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DescribeExpressionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeExpressionsError {
    fn code(&self) -> Option<&str> {
        DescribeExpressionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeExpressionsError {
    pub fn new(kind: DescribeExpressionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeExpressionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeExpressionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DescribeExpressionsErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeExpressionsErrorKind::InternalException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeExpressionsErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DescribeExpressionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeExpressionsErrorKind::BaseException(_inner) => Some(_inner),
            DescribeExpressionsErrorKind::InternalException(_inner) => Some(_inner),
            DescribeExpressionsErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DescribeExpressionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeIndexFieldsError {
    pub kind: DescribeIndexFieldsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeIndexFieldsErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeIndexFieldsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeIndexFieldsErrorKind::BaseException(_inner) => _inner.fmt(f),
            DescribeIndexFieldsErrorKind::InternalException(_inner) => _inner.fmt(f),
            DescribeIndexFieldsErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DescribeIndexFieldsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeIndexFieldsError {
    fn code(&self) -> Option<&str> {
        DescribeIndexFieldsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeIndexFieldsError {
    pub fn new(kind: DescribeIndexFieldsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeIndexFieldsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeIndexFieldsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DescribeIndexFieldsErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeIndexFieldsErrorKind::InternalException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeIndexFieldsErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DescribeIndexFieldsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeIndexFieldsErrorKind::BaseException(_inner) => Some(_inner),
            DescribeIndexFieldsErrorKind::InternalException(_inner) => Some(_inner),
            DescribeIndexFieldsErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DescribeIndexFieldsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeScalingParametersError {
    pub kind: DescribeScalingParametersErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeScalingParametersErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeScalingParametersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeScalingParametersErrorKind::BaseException(_inner) => _inner.fmt(f),
            DescribeScalingParametersErrorKind::InternalException(_inner) => _inner.fmt(f),
            DescribeScalingParametersErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DescribeScalingParametersErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeScalingParametersError {
    fn code(&self) -> Option<&str> {
        DescribeScalingParametersError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeScalingParametersError {
    pub fn new(kind: DescribeScalingParametersErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeScalingParametersErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeScalingParametersErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeScalingParametersErrorKind::BaseException(_)
        )
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeScalingParametersErrorKind::InternalException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeScalingParametersErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DescribeScalingParametersError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeScalingParametersErrorKind::BaseException(_inner) => Some(_inner),
            DescribeScalingParametersErrorKind::InternalException(_inner) => Some(_inner),
            DescribeScalingParametersErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DescribeScalingParametersErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeServiceAccessPoliciesError {
    pub kind: DescribeServiceAccessPoliciesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeServiceAccessPoliciesErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeServiceAccessPoliciesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeServiceAccessPoliciesErrorKind::BaseException(_inner) => _inner.fmt(f),
            DescribeServiceAccessPoliciesErrorKind::InternalException(_inner) => _inner.fmt(f),
            DescribeServiceAccessPoliciesErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DescribeServiceAccessPoliciesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeServiceAccessPoliciesError {
    fn code(&self) -> Option<&str> {
        DescribeServiceAccessPoliciesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeServiceAccessPoliciesError {
    pub fn new(kind: DescribeServiceAccessPoliciesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeServiceAccessPoliciesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeServiceAccessPoliciesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeServiceAccessPoliciesErrorKind::BaseException(_)
        )
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeServiceAccessPoliciesErrorKind::InternalException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeServiceAccessPoliciesErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DescribeServiceAccessPoliciesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeServiceAccessPoliciesErrorKind::BaseException(_inner) => Some(_inner),
            DescribeServiceAccessPoliciesErrorKind::InternalException(_inner) => Some(_inner),
            DescribeServiceAccessPoliciesErrorKind::ResourceNotFoundException(_inner) => {
                Some(_inner)
            }
            DescribeServiceAccessPoliciesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeSuggestersError {
    pub kind: DescribeSuggestersErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeSuggestersErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeSuggestersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeSuggestersErrorKind::BaseException(_inner) => _inner.fmt(f),
            DescribeSuggestersErrorKind::InternalException(_inner) => _inner.fmt(f),
            DescribeSuggestersErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DescribeSuggestersErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeSuggestersError {
    fn code(&self) -> Option<&str> {
        DescribeSuggestersError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeSuggestersError {
    pub fn new(kind: DescribeSuggestersErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeSuggestersErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeSuggestersErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, DescribeSuggestersErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSuggestersErrorKind::InternalException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSuggestersErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DescribeSuggestersError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeSuggestersErrorKind::BaseException(_inner) => Some(_inner),
            DescribeSuggestersErrorKind::InternalException(_inner) => Some(_inner),
            DescribeSuggestersErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DescribeSuggestersErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct IndexDocumentsError {
    pub kind: IndexDocumentsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum IndexDocumentsErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for IndexDocumentsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            IndexDocumentsErrorKind::BaseException(_inner) => _inner.fmt(f),
            IndexDocumentsErrorKind::InternalException(_inner) => _inner.fmt(f),
            IndexDocumentsErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            IndexDocumentsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for IndexDocumentsError {
    fn code(&self) -> Option<&str> {
        IndexDocumentsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl IndexDocumentsError {
    pub fn new(kind: IndexDocumentsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: IndexDocumentsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: IndexDocumentsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, IndexDocumentsErrorKind::BaseException(_))
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(&self.kind, IndexDocumentsErrorKind::InternalException(_))
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            IndexDocumentsErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for IndexDocumentsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            IndexDocumentsErrorKind::BaseException(_inner) => Some(_inner),
            IndexDocumentsErrorKind::InternalException(_inner) => Some(_inner),
            IndexDocumentsErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            IndexDocumentsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListDomainNamesError {
    pub kind: ListDomainNamesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListDomainNamesErrorKind {
    BaseException(crate::error::BaseException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListDomainNamesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListDomainNamesErrorKind::BaseException(_inner) => _inner.fmt(f),
            ListDomainNamesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListDomainNamesError {
    fn code(&self) -> Option<&str> {
        ListDomainNamesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListDomainNamesError {
    pub fn new(kind: ListDomainNamesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListDomainNamesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListDomainNamesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(&self.kind, ListDomainNamesErrorKind::BaseException(_))
    }
}
impl std::error::Error for ListDomainNamesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListDomainNamesErrorKind::BaseException(_inner) => Some(_inner),
            ListDomainNamesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateAvailabilityOptionsError {
    pub kind: UpdateAvailabilityOptionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateAvailabilityOptionsErrorKind {
    BaseException(crate::error::BaseException),
    DisabledOperationException(crate::error::DisabledOperationException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    ValidationException(crate::error::ValidationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateAvailabilityOptionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateAvailabilityOptionsErrorKind::BaseException(_inner) => _inner.fmt(f),
            UpdateAvailabilityOptionsErrorKind::DisabledOperationException(_inner) => _inner.fmt(f),
            UpdateAvailabilityOptionsErrorKind::InternalException(_inner) => _inner.fmt(f),
            UpdateAvailabilityOptionsErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            UpdateAvailabilityOptionsErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            UpdateAvailabilityOptionsErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            UpdateAvailabilityOptionsErrorKind::ValidationException(_inner) => _inner.fmt(f),
            UpdateAvailabilityOptionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateAvailabilityOptionsError {
    fn code(&self) -> Option<&str> {
        UpdateAvailabilityOptionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateAvailabilityOptionsError {
    pub fn new(kind: UpdateAvailabilityOptionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateAvailabilityOptionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateAvailabilityOptionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateAvailabilityOptionsErrorKind::BaseException(_)
        )
    }
    pub fn is_disabled_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateAvailabilityOptionsErrorKind::DisabledOperationException(_)
        )
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateAvailabilityOptionsErrorKind::InternalException(_)
        )
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateAvailabilityOptionsErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateAvailabilityOptionsErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateAvailabilityOptionsErrorKind::ResourceNotFoundException(_)
        )
    }
    pub fn is_validation_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateAvailabilityOptionsErrorKind::ValidationException(_)
        )
    }
}
impl std::error::Error for UpdateAvailabilityOptionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateAvailabilityOptionsErrorKind::BaseException(_inner) => Some(_inner),
            UpdateAvailabilityOptionsErrorKind::DisabledOperationException(_inner) => Some(_inner),
            UpdateAvailabilityOptionsErrorKind::InternalException(_inner) => Some(_inner),
            UpdateAvailabilityOptionsErrorKind::InvalidTypeException(_inner) => Some(_inner),
            UpdateAvailabilityOptionsErrorKind::LimitExceededException(_inner) => Some(_inner),
            UpdateAvailabilityOptionsErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            UpdateAvailabilityOptionsErrorKind::ValidationException(_inner) => Some(_inner),
            UpdateAvailabilityOptionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateDomainEndpointOptionsError {
    pub kind: UpdateDomainEndpointOptionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateDomainEndpointOptionsErrorKind {
    BaseException(crate::error::BaseException),
    DisabledOperationException(crate::error::DisabledOperationException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    ValidationException(crate::error::ValidationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateDomainEndpointOptionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateDomainEndpointOptionsErrorKind::BaseException(_inner) => _inner.fmt(f),
            UpdateDomainEndpointOptionsErrorKind::DisabledOperationException(_inner) => {
                _inner.fmt(f)
            }
            UpdateDomainEndpointOptionsErrorKind::InternalException(_inner) => _inner.fmt(f),
            UpdateDomainEndpointOptionsErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            UpdateDomainEndpointOptionsErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            UpdateDomainEndpointOptionsErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            UpdateDomainEndpointOptionsErrorKind::ValidationException(_inner) => _inner.fmt(f),
            UpdateDomainEndpointOptionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateDomainEndpointOptionsError {
    fn code(&self) -> Option<&str> {
        UpdateDomainEndpointOptionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateDomainEndpointOptionsError {
    pub fn new(kind: UpdateDomainEndpointOptionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateDomainEndpointOptionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateDomainEndpointOptionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateDomainEndpointOptionsErrorKind::BaseException(_)
        )
    }
    pub fn is_disabled_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateDomainEndpointOptionsErrorKind::DisabledOperationException(_)
        )
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateDomainEndpointOptionsErrorKind::InternalException(_)
        )
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateDomainEndpointOptionsErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateDomainEndpointOptionsErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateDomainEndpointOptionsErrorKind::ResourceNotFoundException(_)
        )
    }
    pub fn is_validation_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateDomainEndpointOptionsErrorKind::ValidationException(_)
        )
    }
}
impl std::error::Error for UpdateDomainEndpointOptionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateDomainEndpointOptionsErrorKind::BaseException(_inner) => Some(_inner),
            UpdateDomainEndpointOptionsErrorKind::DisabledOperationException(_inner) => {
                Some(_inner)
            }
            UpdateDomainEndpointOptionsErrorKind::InternalException(_inner) => Some(_inner),
            UpdateDomainEndpointOptionsErrorKind::InvalidTypeException(_inner) => Some(_inner),
            UpdateDomainEndpointOptionsErrorKind::LimitExceededException(_inner) => Some(_inner),
            UpdateDomainEndpointOptionsErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            UpdateDomainEndpointOptionsErrorKind::ValidationException(_inner) => Some(_inner),
            UpdateDomainEndpointOptionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateScalingParametersError {
    pub kind: UpdateScalingParametersErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateScalingParametersErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateScalingParametersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateScalingParametersErrorKind::BaseException(_inner) => _inner.fmt(f),
            UpdateScalingParametersErrorKind::InternalException(_inner) => _inner.fmt(f),
            UpdateScalingParametersErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            UpdateScalingParametersErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            UpdateScalingParametersErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            UpdateScalingParametersErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateScalingParametersError {
    fn code(&self) -> Option<&str> {
        UpdateScalingParametersError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateScalingParametersError {
    pub fn new(kind: UpdateScalingParametersErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateScalingParametersErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateScalingParametersErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateScalingParametersErrorKind::BaseException(_)
        )
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateScalingParametersErrorKind::InternalException(_)
        )
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateScalingParametersErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateScalingParametersErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateScalingParametersErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for UpdateScalingParametersError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateScalingParametersErrorKind::BaseException(_inner) => Some(_inner),
            UpdateScalingParametersErrorKind::InternalException(_inner) => Some(_inner),
            UpdateScalingParametersErrorKind::InvalidTypeException(_inner) => Some(_inner),
            UpdateScalingParametersErrorKind::LimitExceededException(_inner) => Some(_inner),
            UpdateScalingParametersErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            UpdateScalingParametersErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateServiceAccessPoliciesError {
    pub kind: UpdateServiceAccessPoliciesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateServiceAccessPoliciesErrorKind {
    BaseException(crate::error::BaseException),
    InternalException(crate::error::InternalException),
    InvalidTypeException(crate::error::InvalidTypeException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateServiceAccessPoliciesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateServiceAccessPoliciesErrorKind::BaseException(_inner) => _inner.fmt(f),
            UpdateServiceAccessPoliciesErrorKind::InternalException(_inner) => _inner.fmt(f),
            UpdateServiceAccessPoliciesErrorKind::InvalidTypeException(_inner) => _inner.fmt(f),
            UpdateServiceAccessPoliciesErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            UpdateServiceAccessPoliciesErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            UpdateServiceAccessPoliciesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateServiceAccessPoliciesError {
    fn code(&self) -> Option<&str> {
        UpdateServiceAccessPoliciesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateServiceAccessPoliciesError {
    pub fn new(kind: UpdateServiceAccessPoliciesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateServiceAccessPoliciesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateServiceAccessPoliciesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_base_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateServiceAccessPoliciesErrorKind::BaseException(_)
        )
    }
    pub fn is_internal_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateServiceAccessPoliciesErrorKind::InternalException(_)
        )
    }
    pub fn is_invalid_type_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateServiceAccessPoliciesErrorKind::InvalidTypeException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateServiceAccessPoliciesErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateServiceAccessPoliciesErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for UpdateServiceAccessPoliciesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateServiceAccessPoliciesErrorKind::BaseException(_inner) => Some(_inner),
            UpdateServiceAccessPoliciesErrorKind::InternalException(_inner) => Some(_inner),
            UpdateServiceAccessPoliciesErrorKind::InvalidTypeException(_inner) => Some(_inner),
            UpdateServiceAccessPoliciesErrorKind::LimitExceededException(_inner) => Some(_inner),
            UpdateServiceAccessPoliciesErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            UpdateServiceAccessPoliciesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// <p>The request was rejected because it attempted to reference a resource that does not exist.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceNotFoundException {
    /// <p>A machine-parsable string error or warning code.</p>
    pub code: std::option::Option<std::string::String>,
    /// <p>A human-readable string error or warning message.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceNotFoundException");
        formatter.field("code", &self.code);
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceNotFoundException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceNotFoundException")?;
        if let Some(inner_1) = &self.message {
            write!(f, ": {}", inner_1)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceNotFoundException {}
/// See [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
pub mod resource_not_found_exception {
    /// A builder for [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) code: std::option::Option<std::string::String>,
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A machine-parsable string error or warning code.</p>
        pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
            self.code = Some(input.into());
            self
        }
        pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.code = input;
            self
        }
        /// <p>A human-readable string error or warning message.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
        pub fn build(self) -> crate::error::ResourceNotFoundException {
            crate::error::ResourceNotFoundException {
                code: self.code,
                message: self.message,
            }
        }
    }
}
impl ResourceNotFoundException {
    /// Creates a new builder-style object to manufacture [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
    pub fn builder() -> crate::error::resource_not_found_exception::Builder {
        crate::error::resource_not_found_exception::Builder::default()
    }
}

/// <p>The request was rejected because a resource limit has already been met.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LimitExceededException {
    /// <p>A machine-parsable string error or warning code.</p>
    pub code: std::option::Option<std::string::String>,
    /// <p>A human-readable string error or warning message.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for LimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("LimitExceededException");
        formatter.field("code", &self.code);
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl LimitExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for LimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "LimitExceededException")?;
        if let Some(inner_2) = &self.message {
            write!(f, ": {}", inner_2)?;
        }
        Ok(())
    }
}
impl std::error::Error for LimitExceededException {}
/// See [`LimitExceededException`](crate::error::LimitExceededException)
pub mod limit_exceeded_exception {
    /// A builder for [`LimitExceededException`](crate::error::LimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) code: std::option::Option<std::string::String>,
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A machine-parsable string error or warning code.</p>
        pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
            self.code = Some(input.into());
            self
        }
        pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.code = input;
            self
        }
        /// <p>A human-readable string error or warning message.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`LimitExceededException`](crate::error::LimitExceededException)
        pub fn build(self) -> crate::error::LimitExceededException {
            crate::error::LimitExceededException {
                code: self.code,
                message: self.message,
            }
        }
    }
}
impl LimitExceededException {
    /// Creates a new builder-style object to manufacture [`LimitExceededException`](crate::error::LimitExceededException)
    pub fn builder() -> crate::error::limit_exceeded_exception::Builder {
        crate::error::limit_exceeded_exception::Builder::default()
    }
}

/// <p>The request was rejected because it specified an invalid type definition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidTypeException {
    /// <p>A machine-parsable string error or warning code.</p>
    pub code: std::option::Option<std::string::String>,
    /// <p>A human-readable string error or warning message.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidTypeException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidTypeException");
        formatter.field("code", &self.code);
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidTypeException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidTypeException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidTypeException")?;
        if let Some(inner_3) = &self.message {
            write!(f, ": {}", inner_3)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidTypeException {}
/// See [`InvalidTypeException`](crate::error::InvalidTypeException)
pub mod invalid_type_exception {
    /// A builder for [`InvalidTypeException`](crate::error::InvalidTypeException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) code: std::option::Option<std::string::String>,
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A machine-parsable string error or warning code.</p>
        pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
            self.code = Some(input.into());
            self
        }
        pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.code = input;
            self
        }
        /// <p>A human-readable string error or warning message.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidTypeException`](crate::error::InvalidTypeException)
        pub fn build(self) -> crate::error::InvalidTypeException {
            crate::error::InvalidTypeException {
                code: self.code,
                message: self.message,
            }
        }
    }
}
impl InvalidTypeException {
    /// Creates a new builder-style object to manufacture [`InvalidTypeException`](crate::error::InvalidTypeException)
    pub fn builder() -> crate::error::invalid_type_exception::Builder {
        crate::error::invalid_type_exception::Builder::default()
    }
}

/// <p>An internal error occurred while processing the request. If this problem persists,
/// report an issue from the <a href="http://status.aws.amazon.com/" target="_blank">Service Health Dashboard</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InternalException {
    /// <p>A machine-parsable string error or warning code.</p>
    pub code: std::option::Option<std::string::String>,
    /// <p>A human-readable string error or warning message.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InternalException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InternalException");
        formatter.field("code", &self.code);
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InternalException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InternalException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InternalException")?;
        if let Some(inner_4) = &self.message {
            write!(f, ": {}", inner_4)?;
        }
        Ok(())
    }
}
impl std::error::Error for InternalException {}
/// See [`InternalException`](crate::error::InternalException)
pub mod internal_exception {
    /// A builder for [`InternalException`](crate::error::InternalException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) code: std::option::Option<std::string::String>,
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A machine-parsable string error or warning code.</p>
        pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
            self.code = Some(input.into());
            self
        }
        pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.code = input;
            self
        }
        /// <p>A human-readable string error or warning message.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InternalException`](crate::error::InternalException)
        pub fn build(self) -> crate::error::InternalException {
            crate::error::InternalException {
                code: self.code,
                message: self.message,
            }
        }
    }
}
impl InternalException {
    /// Creates a new builder-style object to manufacture [`InternalException`](crate::error::InternalException)
    pub fn builder() -> crate::error::internal_exception::Builder {
        crate::error::internal_exception::Builder::default()
    }
}

/// <p>An error occurred while processing the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BaseException {
    /// <p>A machine-parsable string error or warning code.</p>
    pub code: std::option::Option<std::string::String>,
    /// <p>A human-readable string error or warning message.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for BaseException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BaseException");
        formatter.field("code", &self.code);
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl BaseException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for BaseException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "BaseException")?;
        if let Some(inner_5) = &self.message {
            write!(f, ": {}", inner_5)?;
        }
        Ok(())
    }
}
impl std::error::Error for BaseException {}
/// See [`BaseException`](crate::error::BaseException)
pub mod base_exception {
    /// A builder for [`BaseException`](crate::error::BaseException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) code: std::option::Option<std::string::String>,
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A machine-parsable string error or warning code.</p>
        pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
            self.code = Some(input.into());
            self
        }
        pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.code = input;
            self
        }
        /// <p>A human-readable string error or warning message.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`BaseException`](crate::error::BaseException)
        pub fn build(self) -> crate::error::BaseException {
            crate::error::BaseException {
                code: self.code,
                message: self.message,
            }
        }
    }
}
impl BaseException {
    /// Creates a new builder-style object to manufacture [`BaseException`](crate::error::BaseException)
    pub fn builder() -> crate::error::base_exception::Builder {
        crate::error::base_exception::Builder::default()
    }
}

/// <p>The request was rejected because it has invalid parameters.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidationException {
    /// <p>A machine-parsable string error or warning code.</p>
    pub code: std::option::Option<std::string::String>,
    /// <p>A human-readable string error or warning message.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ValidationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ValidationException");
        formatter.field("code", &self.code);
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ValidationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ValidationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ValidationException")?;
        if let Some(inner_6) = &self.message {
            write!(f, ": {}", inner_6)?;
        }
        Ok(())
    }
}
impl std::error::Error for ValidationException {}
/// See [`ValidationException`](crate::error::ValidationException)
pub mod validation_exception {
    /// A builder for [`ValidationException`](crate::error::ValidationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) code: std::option::Option<std::string::String>,
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A machine-parsable string error or warning code.</p>
        pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
            self.code = Some(input.into());
            self
        }
        pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.code = input;
            self
        }
        /// <p>A human-readable string error or warning message.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ValidationException`](crate::error::ValidationException)
        pub fn build(self) -> crate::error::ValidationException {
            crate::error::ValidationException {
                code: self.code,
                message: self.message,
            }
        }
    }
}
impl ValidationException {
    /// Creates a new builder-style object to manufacture [`ValidationException`](crate::error::ValidationException)
    pub fn builder() -> crate::error::validation_exception::Builder {
        crate::error::validation_exception::Builder::default()
    }
}

/// <p>The request was rejected because it attempted an operation which is not enabled.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisabledOperationException {
    /// <p>A machine-parsable string error or warning code.</p>
    pub code: std::option::Option<std::string::String>,
    /// <p>A human-readable string error or warning message.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DisabledOperationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisabledOperationException");
        formatter.field("code", &self.code);
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl DisabledOperationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for DisabledOperationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "DisabledOperationException")?;
        if let Some(inner_7) = &self.message {
            write!(f, ": {}", inner_7)?;
        }
        Ok(())
    }
}
impl std::error::Error for DisabledOperationException {}
/// See [`DisabledOperationException`](crate::error::DisabledOperationException)
pub mod disabled_operation_exception {
    /// A builder for [`DisabledOperationException`](crate::error::DisabledOperationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) code: std::option::Option<std::string::String>,
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A machine-parsable string error or warning code.</p>
        pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
            self.code = Some(input.into());
            self
        }
        pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.code = input;
            self
        }
        /// <p>A human-readable string error or warning message.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`DisabledOperationException`](crate::error::DisabledOperationException)
        pub fn build(self) -> crate::error::DisabledOperationException {
            crate::error::DisabledOperationException {
                code: self.code,
                message: self.message,
            }
        }
    }
}
impl DisabledOperationException {
    /// Creates a new builder-style object to manufacture [`DisabledOperationException`](crate::error::DisabledOperationException)
    pub fn builder() -> crate::error::disabled_operation_exception::Builder {
        crate::error::disabled_operation_exception::Builder::default()
    }
}

/// <p>The request was rejected because it attempted to create a resource that already exists.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceAlreadyExistsException {
    /// <p>A machine-parsable string error or warning code.</p>
    pub code: std::option::Option<std::string::String>,
    /// <p>A human-readable string error or warning message.</p>
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceAlreadyExistsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceAlreadyExistsException");
        formatter.field("code", &self.code);
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceAlreadyExistsException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceAlreadyExistsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceAlreadyExistsException")?;
        if let Some(inner_8) = &self.message {
            write!(f, ": {}", inner_8)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceAlreadyExistsException {}
/// See [`ResourceAlreadyExistsException`](crate::error::ResourceAlreadyExistsException)
pub mod resource_already_exists_exception {
    /// A builder for [`ResourceAlreadyExistsException`](crate::error::ResourceAlreadyExistsException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) code: std::option::Option<std::string::String>,
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A machine-parsable string error or warning code.</p>
        pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
            self.code = Some(input.into());
            self
        }
        pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.code = input;
            self
        }
        /// <p>A human-readable string error or warning message.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceAlreadyExistsException`](crate::error::ResourceAlreadyExistsException)
        pub fn build(self) -> crate::error::ResourceAlreadyExistsException {
            crate::error::ResourceAlreadyExistsException {
                code: self.code,
                message: self.message,
            }
        }
    }
}
impl ResourceAlreadyExistsException {
    /// Creates a new builder-style object to manufacture [`ResourceAlreadyExistsException`](crate::error::ResourceAlreadyExistsException)
    pub fn builder() -> crate::error::resource_already_exists_exception::Builder {
        crate::error::resource_already_exists_exception::Builder::default()
    }
}
