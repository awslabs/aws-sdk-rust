// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_analysis_scheme(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::AnalysisScheme,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AnalysisSchemeName");
    {
        scope_1.string(&input.analysis_scheme_name);
    }
    #[allow(unused_mut)]
    let mut scope_2 = writer.prefix("AnalysisSchemeLanguage");
    {
        scope_2.string(input.analysis_scheme_language.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("AnalysisOptions");
    if let Some(var_4) = &input.analysis_options {
        crate::protocol_serde::shape_analysis_options::ser_analysis_options(scope_3, var_4)?;
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_analysis_scheme(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::AnalysisScheme, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::AnalysisScheme::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AnalysisSchemeName") /* AnalysisSchemeName com.amazonaws.cloudsearch#AnalysisScheme$AnalysisSchemeName */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_analysis_scheme_name(var_5);
            }
            ,
            s if s.matches("AnalysisSchemeLanguage") /* AnalysisSchemeLanguage com.amazonaws.cloudsearch#AnalysisScheme$AnalysisSchemeLanguage */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::AnalysisSchemeLanguage, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::AnalysisSchemeLanguage::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_analysis_scheme_language(var_6);
            }
            ,
            s if s.matches("AnalysisOptions") /* AnalysisOptions com.amazonaws.cloudsearch#AnalysisScheme$AnalysisOptions */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_analysis_options::de_analysis_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_analysis_options(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::analysis_scheme_correct_errors(builder)
        .build()
        .map_err(|_| ::aws_smithy_xml::decode::XmlDecodeError::custom("missing field"))?)
}
