// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_index_field(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::IndexField,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("IndexFieldName");
    if let Some(var_2) = &input.index_field_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("IndexFieldType");
    if let Some(var_4) = &input.index_field_type {
        scope_3.string(var_4.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("IntOptions");
    if let Some(var_6) = &input.int_options {
        crate::protocol_serde::shape_int_options::ser_int_options(scope_5, var_6)?;
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("DoubleOptions");
    if let Some(var_8) = &input.double_options {
        crate::protocol_serde::shape_double_options::ser_double_options(scope_7, var_8)?;
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("LiteralOptions");
    if let Some(var_10) = &input.literal_options {
        crate::protocol_serde::shape_literal_options::ser_literal_options(scope_9, var_10)?;
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("TextOptions");
    if let Some(var_12) = &input.text_options {
        crate::protocol_serde::shape_text_options::ser_text_options(scope_11, var_12)?;
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("DateOptions");
    if let Some(var_14) = &input.date_options {
        crate::protocol_serde::shape_date_options::ser_date_options(scope_13, var_14)?;
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("LatLonOptions");
    if let Some(var_16) = &input.lat_lon_options {
        crate::protocol_serde::shape_lat_lon_options::ser_lat_lon_options(scope_15, var_16)?;
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("IntArrayOptions");
    if let Some(var_18) = &input.int_array_options {
        crate::protocol_serde::shape_int_array_options::ser_int_array_options(scope_17, var_18)?;
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("DoubleArrayOptions");
    if let Some(var_20) = &input.double_array_options {
        crate::protocol_serde::shape_double_array_options::ser_double_array_options(
            scope_19, var_20,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("LiteralArrayOptions");
    if let Some(var_22) = &input.literal_array_options {
        crate::protocol_serde::shape_literal_array_options::ser_literal_array_options(
            scope_21, var_22,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("TextArrayOptions");
    if let Some(var_24) = &input.text_array_options {
        crate::protocol_serde::shape_text_array_options::ser_text_array_options(scope_23, var_24)?;
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("DateArrayOptions");
    if let Some(var_26) = &input.date_array_options {
        crate::protocol_serde::shape_date_array_options::ser_date_array_options(scope_25, var_26)?;
    }
    Ok(())
}

pub fn de_index_field(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::IndexField, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::IndexField::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("IndexFieldName") /* IndexFieldName com.amazonaws.cloudsearch#IndexField$IndexFieldName */ =>  {
                let var_27 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_index_field_name(var_27);
            }
            ,
            s if s.matches("IndexFieldType") /* IndexFieldType com.amazonaws.cloudsearch#IndexField$IndexFieldType */ =>  {
                let var_28 =
                    Some(
                        Result::<crate::types::IndexFieldType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::IndexFieldType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_index_field_type(var_28);
            }
            ,
            s if s.matches("IntOptions") /* IntOptions com.amazonaws.cloudsearch#IndexField$IntOptions */ =>  {
                let var_29 =
                    Some(
                        crate::protocol_serde::shape_int_options::de_int_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_int_options(var_29);
            }
            ,
            s if s.matches("DoubleOptions") /* DoubleOptions com.amazonaws.cloudsearch#IndexField$DoubleOptions */ =>  {
                let var_30 =
                    Some(
                        crate::protocol_serde::shape_double_options::de_double_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_double_options(var_30);
            }
            ,
            s if s.matches("LiteralOptions") /* LiteralOptions com.amazonaws.cloudsearch#IndexField$LiteralOptions */ =>  {
                let var_31 =
                    Some(
                        crate::protocol_serde::shape_literal_options::de_literal_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_literal_options(var_31);
            }
            ,
            s if s.matches("TextOptions") /* TextOptions com.amazonaws.cloudsearch#IndexField$TextOptions */ =>  {
                let var_32 =
                    Some(
                        crate::protocol_serde::shape_text_options::de_text_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_text_options(var_32);
            }
            ,
            s if s.matches("DateOptions") /* DateOptions com.amazonaws.cloudsearch#IndexField$DateOptions */ =>  {
                let var_33 =
                    Some(
                        crate::protocol_serde::shape_date_options::de_date_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_date_options(var_33);
            }
            ,
            s if s.matches("LatLonOptions") /* LatLonOptions com.amazonaws.cloudsearch#IndexField$LatLonOptions */ =>  {
                let var_34 =
                    Some(
                        crate::protocol_serde::shape_lat_lon_options::de_lat_lon_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_lat_lon_options(var_34);
            }
            ,
            s if s.matches("IntArrayOptions") /* IntArrayOptions com.amazonaws.cloudsearch#IndexField$IntArrayOptions */ =>  {
                let var_35 =
                    Some(
                        crate::protocol_serde::shape_int_array_options::de_int_array_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_int_array_options(var_35);
            }
            ,
            s if s.matches("DoubleArrayOptions") /* DoubleArrayOptions com.amazonaws.cloudsearch#IndexField$DoubleArrayOptions */ =>  {
                let var_36 =
                    Some(
                        crate::protocol_serde::shape_double_array_options::de_double_array_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_double_array_options(var_36);
            }
            ,
            s if s.matches("LiteralArrayOptions") /* LiteralArrayOptions com.amazonaws.cloudsearch#IndexField$LiteralArrayOptions */ =>  {
                let var_37 =
                    Some(
                        crate::protocol_serde::shape_literal_array_options::de_literal_array_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_literal_array_options(var_37);
            }
            ,
            s if s.matches("TextArrayOptions") /* TextArrayOptions com.amazonaws.cloudsearch#IndexField$TextArrayOptions */ =>  {
                let var_38 =
                    Some(
                        crate::protocol_serde::shape_text_array_options::de_text_array_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_text_array_options(var_38);
            }
            ,
            s if s.matches("DateArrayOptions") /* DateArrayOptions com.amazonaws.cloudsearch#IndexField$DateArrayOptions */ =>  {
                let var_39 =
                    Some(
                        crate::protocol_serde::shape_date_array_options::de_date_array_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_date_array_options(var_39);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
