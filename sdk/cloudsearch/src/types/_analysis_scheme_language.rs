// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AnalysisSchemeLanguage`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let analysisschemelanguage = unimplemented!();
/// match analysisschemelanguage {
///     AnalysisSchemeLanguage::Ar => { /* ... */ },
///     AnalysisSchemeLanguage::Bg => { /* ... */ },
///     AnalysisSchemeLanguage::Ca => { /* ... */ },
///     AnalysisSchemeLanguage::Cs => { /* ... */ },
///     AnalysisSchemeLanguage::Da => { /* ... */ },
///     AnalysisSchemeLanguage::De => { /* ... */ },
///     AnalysisSchemeLanguage::El => { /* ... */ },
///     AnalysisSchemeLanguage::En => { /* ... */ },
///     AnalysisSchemeLanguage::Es => { /* ... */ },
///     AnalysisSchemeLanguage::Eu => { /* ... */ },
///     AnalysisSchemeLanguage::Fa => { /* ... */ },
///     AnalysisSchemeLanguage::Fi => { /* ... */ },
///     AnalysisSchemeLanguage::Fr => { /* ... */ },
///     AnalysisSchemeLanguage::Ga => { /* ... */ },
///     AnalysisSchemeLanguage::Gl => { /* ... */ },
///     AnalysisSchemeLanguage::He => { /* ... */ },
///     AnalysisSchemeLanguage::Hi => { /* ... */ },
///     AnalysisSchemeLanguage::Hu => { /* ... */ },
///     AnalysisSchemeLanguage::Hy => { /* ... */ },
///     AnalysisSchemeLanguage::Id => { /* ... */ },
///     AnalysisSchemeLanguage::It => { /* ... */ },
///     AnalysisSchemeLanguage::Ja => { /* ... */ },
///     AnalysisSchemeLanguage::Ko => { /* ... */ },
///     AnalysisSchemeLanguage::Lv => { /* ... */ },
///     AnalysisSchemeLanguage::Mul => { /* ... */ },
///     AnalysisSchemeLanguage::Nl => { /* ... */ },
///     AnalysisSchemeLanguage::No => { /* ... */ },
///     AnalysisSchemeLanguage::Pt => { /* ... */ },
///     AnalysisSchemeLanguage::Ro => { /* ... */ },
///     AnalysisSchemeLanguage::Ru => { /* ... */ },
///     AnalysisSchemeLanguage::Sv => { /* ... */ },
///     AnalysisSchemeLanguage::Th => { /* ... */ },
///     AnalysisSchemeLanguage::Tr => { /* ... */ },
///     AnalysisSchemeLanguage::ZhHans => { /* ... */ },
///     AnalysisSchemeLanguage::ZhHant => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `analysisschemelanguage` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AnalysisSchemeLanguage::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AnalysisSchemeLanguage::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AnalysisSchemeLanguage::NewFeature` is defined.
/// Specifically, when `analysisschemelanguage` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AnalysisSchemeLanguage::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// <p>An <a href="http://tools.ietf.org/html/rfc4646" target="_blank">IETF RFC 4646</a> language code or <code>mul</code>  for multiple languages.</p>
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AnalysisSchemeLanguage {
    #[allow(missing_docs)] // documentation missing in model
    Ar,
    #[allow(missing_docs)] // documentation missing in model
    Bg,
    #[allow(missing_docs)] // documentation missing in model
    Ca,
    #[allow(missing_docs)] // documentation missing in model
    Cs,
    #[allow(missing_docs)] // documentation missing in model
    Da,
    #[allow(missing_docs)] // documentation missing in model
    De,
    #[allow(missing_docs)] // documentation missing in model
    El,
    #[allow(missing_docs)] // documentation missing in model
    En,
    #[allow(missing_docs)] // documentation missing in model
    Es,
    #[allow(missing_docs)] // documentation missing in model
    Eu,
    #[allow(missing_docs)] // documentation missing in model
    Fa,
    #[allow(missing_docs)] // documentation missing in model
    Fi,
    #[allow(missing_docs)] // documentation missing in model
    Fr,
    #[allow(missing_docs)] // documentation missing in model
    Ga,
    #[allow(missing_docs)] // documentation missing in model
    Gl,
    #[allow(missing_docs)] // documentation missing in model
    He,
    #[allow(missing_docs)] // documentation missing in model
    Hi,
    #[allow(missing_docs)] // documentation missing in model
    Hu,
    #[allow(missing_docs)] // documentation missing in model
    Hy,
    #[allow(missing_docs)] // documentation missing in model
    Id,
    #[allow(missing_docs)] // documentation missing in model
    It,
    #[allow(missing_docs)] // documentation missing in model
    Ja,
    #[allow(missing_docs)] // documentation missing in model
    Ko,
    #[allow(missing_docs)] // documentation missing in model
    Lv,
    #[allow(missing_docs)] // documentation missing in model
    Mul,
    #[allow(missing_docs)] // documentation missing in model
    Nl,
    #[allow(missing_docs)] // documentation missing in model
    No,
    #[allow(missing_docs)] // documentation missing in model
    Pt,
    #[allow(missing_docs)] // documentation missing in model
    Ro,
    #[allow(missing_docs)] // documentation missing in model
    Ru,
    #[allow(missing_docs)] // documentation missing in model
    Sv,
    #[allow(missing_docs)] // documentation missing in model
    Th,
    #[allow(missing_docs)] // documentation missing in model
    Tr,
    #[allow(missing_docs)] // documentation missing in model
    ZhHans,
    #[allow(missing_docs)] // documentation missing in model
    ZhHant,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for AnalysisSchemeLanguage {
    fn from(s: &str) -> Self {
        match s {
            "ar" => AnalysisSchemeLanguage::Ar,
            "bg" => AnalysisSchemeLanguage::Bg,
            "ca" => AnalysisSchemeLanguage::Ca,
            "cs" => AnalysisSchemeLanguage::Cs,
            "da" => AnalysisSchemeLanguage::Da,
            "de" => AnalysisSchemeLanguage::De,
            "el" => AnalysisSchemeLanguage::El,
            "en" => AnalysisSchemeLanguage::En,
            "es" => AnalysisSchemeLanguage::Es,
            "eu" => AnalysisSchemeLanguage::Eu,
            "fa" => AnalysisSchemeLanguage::Fa,
            "fi" => AnalysisSchemeLanguage::Fi,
            "fr" => AnalysisSchemeLanguage::Fr,
            "ga" => AnalysisSchemeLanguage::Ga,
            "gl" => AnalysisSchemeLanguage::Gl,
            "he" => AnalysisSchemeLanguage::He,
            "hi" => AnalysisSchemeLanguage::Hi,
            "hu" => AnalysisSchemeLanguage::Hu,
            "hy" => AnalysisSchemeLanguage::Hy,
            "id" => AnalysisSchemeLanguage::Id,
            "it" => AnalysisSchemeLanguage::It,
            "ja" => AnalysisSchemeLanguage::Ja,
            "ko" => AnalysisSchemeLanguage::Ko,
            "lv" => AnalysisSchemeLanguage::Lv,
            "mul" => AnalysisSchemeLanguage::Mul,
            "nl" => AnalysisSchemeLanguage::Nl,
            "no" => AnalysisSchemeLanguage::No,
            "pt" => AnalysisSchemeLanguage::Pt,
            "ro" => AnalysisSchemeLanguage::Ro,
            "ru" => AnalysisSchemeLanguage::Ru,
            "sv" => AnalysisSchemeLanguage::Sv,
            "th" => AnalysisSchemeLanguage::Th,
            "tr" => AnalysisSchemeLanguage::Tr,
            "zh-Hans" => AnalysisSchemeLanguage::ZhHans,
            "zh-Hant" => AnalysisSchemeLanguage::ZhHant,
            other => AnalysisSchemeLanguage::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for AnalysisSchemeLanguage {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AnalysisSchemeLanguage::from(s))
    }
}
impl AnalysisSchemeLanguage {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AnalysisSchemeLanguage::Ar => "ar",
            AnalysisSchemeLanguage::Bg => "bg",
            AnalysisSchemeLanguage::Ca => "ca",
            AnalysisSchemeLanguage::Cs => "cs",
            AnalysisSchemeLanguage::Da => "da",
            AnalysisSchemeLanguage::De => "de",
            AnalysisSchemeLanguage::El => "el",
            AnalysisSchemeLanguage::En => "en",
            AnalysisSchemeLanguage::Es => "es",
            AnalysisSchemeLanguage::Eu => "eu",
            AnalysisSchemeLanguage::Fa => "fa",
            AnalysisSchemeLanguage::Fi => "fi",
            AnalysisSchemeLanguage::Fr => "fr",
            AnalysisSchemeLanguage::Ga => "ga",
            AnalysisSchemeLanguage::Gl => "gl",
            AnalysisSchemeLanguage::He => "he",
            AnalysisSchemeLanguage::Hi => "hi",
            AnalysisSchemeLanguage::Hu => "hu",
            AnalysisSchemeLanguage::Hy => "hy",
            AnalysisSchemeLanguage::Id => "id",
            AnalysisSchemeLanguage::It => "it",
            AnalysisSchemeLanguage::Ja => "ja",
            AnalysisSchemeLanguage::Ko => "ko",
            AnalysisSchemeLanguage::Lv => "lv",
            AnalysisSchemeLanguage::Mul => "mul",
            AnalysisSchemeLanguage::Nl => "nl",
            AnalysisSchemeLanguage::No => "no",
            AnalysisSchemeLanguage::Pt => "pt",
            AnalysisSchemeLanguage::Ro => "ro",
            AnalysisSchemeLanguage::Ru => "ru",
            AnalysisSchemeLanguage::Sv => "sv",
            AnalysisSchemeLanguage::Th => "th",
            AnalysisSchemeLanguage::Tr => "tr",
            AnalysisSchemeLanguage::ZhHans => "zh-Hans",
            AnalysisSchemeLanguage::ZhHant => "zh-Hant",
            AnalysisSchemeLanguage::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ar", "bg", "ca", "cs", "da", "de", "el", "en", "es", "eu", "fa", "fi", "fr", "ga",
            "gl", "he", "hi", "hu", "hy", "id", "it", "ja", "ko", "lv", "mul", "nl", "no", "pt",
            "ro", "ru", "sv", "th", "tr", "zh-Hans", "zh-Hant",
        ]
    }
}
impl AsRef<str> for AnalysisSchemeLanguage {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
