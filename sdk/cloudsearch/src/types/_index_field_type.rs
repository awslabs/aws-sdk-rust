// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `IndexFieldType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let indexfieldtype = unimplemented!();
/// match indexfieldtype {
///     IndexFieldType::Date => { /* ... */ },
///     IndexFieldType::DateArray => { /* ... */ },
///     IndexFieldType::Double => { /* ... */ },
///     IndexFieldType::DoubleArray => { /* ... */ },
///     IndexFieldType::Int => { /* ... */ },
///     IndexFieldType::IntArray => { /* ... */ },
///     IndexFieldType::Latlon => { /* ... */ },
///     IndexFieldType::Literal => { /* ... */ },
///     IndexFieldType::LiteralArray => { /* ... */ },
///     IndexFieldType::Text => { /* ... */ },
///     IndexFieldType::TextArray => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `indexfieldtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `IndexFieldType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `IndexFieldType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `IndexFieldType::NewFeature` is defined.
/// Specifically, when `indexfieldtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `IndexFieldType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// <p>The type of field. The valid options for a field depend on the field type. For more information about the supported field types, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html" target="_blank">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum IndexFieldType {
    #[allow(missing_docs)] // documentation missing in model
    Date,
    #[allow(missing_docs)] // documentation missing in model
    DateArray,
    #[allow(missing_docs)] // documentation missing in model
    Double,
    #[allow(missing_docs)] // documentation missing in model
    DoubleArray,
    #[allow(missing_docs)] // documentation missing in model
    Int,
    #[allow(missing_docs)] // documentation missing in model
    IntArray,
    #[allow(missing_docs)] // documentation missing in model
    Latlon,
    #[allow(missing_docs)] // documentation missing in model
    Literal,
    #[allow(missing_docs)] // documentation missing in model
    LiteralArray,
    #[allow(missing_docs)] // documentation missing in model
    Text,
    #[allow(missing_docs)] // documentation missing in model
    TextArray,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for IndexFieldType {
    fn from(s: &str) -> Self {
        match s {
            "date" => IndexFieldType::Date,
            "date-array" => IndexFieldType::DateArray,
            "double" => IndexFieldType::Double,
            "double-array" => IndexFieldType::DoubleArray,
            "int" => IndexFieldType::Int,
            "int-array" => IndexFieldType::IntArray,
            "latlon" => IndexFieldType::Latlon,
            "literal" => IndexFieldType::Literal,
            "literal-array" => IndexFieldType::LiteralArray,
            "text" => IndexFieldType::Text,
            "text-array" => IndexFieldType::TextArray,
            other => {
                IndexFieldType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for IndexFieldType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(IndexFieldType::from(s))
    }
}
impl IndexFieldType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            IndexFieldType::Date => "date",
            IndexFieldType::DateArray => "date-array",
            IndexFieldType::Double => "double",
            IndexFieldType::DoubleArray => "double-array",
            IndexFieldType::Int => "int",
            IndexFieldType::IntArray => "int-array",
            IndexFieldType::Latlon => "latlon",
            IndexFieldType::Literal => "literal",
            IndexFieldType::LiteralArray => "literal-array",
            IndexFieldType::Text => "text",
            IndexFieldType::TextArray => "text-array",
            IndexFieldType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "date",
            "date-array",
            "double",
            "double-array",
            "int",
            "int-array",
            "latlon",
            "literal",
            "literal-array",
            "text",
            "text-array",
        ]
    }
}
impl AsRef<str> for IndexFieldType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
