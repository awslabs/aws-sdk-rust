// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The domain's endpoint options.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainEndpointOptions {
    /// <p>Whether the domain is HTTPS only enabled.</p>
    #[doc(hidden)]
    pub enforce_https: std::option::Option<bool>,
    /// <p>The minimum required TLS version</p>
    #[doc(hidden)]
    pub tls_security_policy: std::option::Option<crate::types::TlsSecurityPolicy>,
}
impl DomainEndpointOptions {
    /// <p>Whether the domain is HTTPS only enabled.</p>
    pub fn enforce_https(&self) -> std::option::Option<bool> {
        self.enforce_https
    }
    /// <p>The minimum required TLS version</p>
    pub fn tls_security_policy(&self) -> std::option::Option<&crate::types::TlsSecurityPolicy> {
        self.tls_security_policy.as_ref()
    }
}
impl DomainEndpointOptions {
    /// Creates a new builder-style object to manufacture [`DomainEndpointOptions`](crate::types::DomainEndpointOptions).
    pub fn builder() -> crate::types::builders::DomainEndpointOptionsBuilder {
        crate::types::builders::DomainEndpointOptionsBuilder::default()
    }
}

/// A builder for [`DomainEndpointOptions`](crate::types::DomainEndpointOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainEndpointOptionsBuilder {
    pub(crate) enforce_https: std::option::Option<bool>,
    pub(crate) tls_security_policy: std::option::Option<crate::types::TlsSecurityPolicy>,
}
impl DomainEndpointOptionsBuilder {
    /// <p>Whether the domain is HTTPS only enabled.</p>
    pub fn enforce_https(mut self, input: bool) -> Self {
        self.enforce_https = Some(input);
        self
    }
    /// <p>Whether the domain is HTTPS only enabled.</p>
    pub fn set_enforce_https(mut self, input: std::option::Option<bool>) -> Self {
        self.enforce_https = input;
        self
    }
    /// <p>The minimum required TLS version</p>
    pub fn tls_security_policy(mut self, input: crate::types::TlsSecurityPolicy) -> Self {
        self.tls_security_policy = Some(input);
        self
    }
    /// <p>The minimum required TLS version</p>
    pub fn set_tls_security_policy(
        mut self,
        input: std::option::Option<crate::types::TlsSecurityPolicy>,
    ) -> Self {
        self.tls_security_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainEndpointOptions`](crate::types::DomainEndpointOptions).
    pub fn build(self) -> crate::types::DomainEndpointOptions {
        crate::types::DomainEndpointOptions {
            enforce_https: self.enforce_https,
            tls_security_policy: self.tls_security_policy,
        }
    }
}
