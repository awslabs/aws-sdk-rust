// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information for a field in the index, including its name, type, and options. The supported options depend on the <code><code>IndexFieldType</code></code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IndexField {
    /// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p>
    /// <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p>
    /// <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
    #[doc(hidden)]
    pub index_field_name: std::option::Option<std::string::String>,
    /// <p>The type of field. The valid options for a field depend on the field type. For more information about the supported field types, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html" target="_blank">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.</p>
    #[doc(hidden)]
    pub index_field_type: std::option::Option<crate::types::IndexFieldType>,
    /// <p>Options for a 64-bit signed integer field. Present if <code>IndexFieldType</code> specifies the field is of type <code>int</code>. All options are enabled by default.</p>
    #[doc(hidden)]
    pub int_options: std::option::Option<crate::types::IntOptions>,
    /// <p>Options for a double-precision 64-bit floating point field. Present if <code>IndexFieldType</code> specifies the field is of type <code>double</code>. All options are enabled by default.</p>
    #[doc(hidden)]
    pub double_options: std::option::Option<crate::types::DoubleOptions>,
    /// <p>Options for literal field. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal</code>. All options are enabled by default.</p>
    #[doc(hidden)]
    pub literal_options: std::option::Option<crate::types::LiteralOptions>,
    /// <p>Options for text field. Present if <code>IndexFieldType</code> specifies the field is of type <code>text</code>. A <code>text</code> field is always searchable. All options are enabled by default.</p>
    #[doc(hidden)]
    pub text_options: std::option::Option<crate::types::TextOptions>,
    /// <p>Options for a date field. Dates and times are specified in UTC (Coordinated Universal Time) according to IETF RFC3339: yyyy-mm-ddT00:00:00Z. Present if <code>IndexFieldType</code> specifies the field is of type <code>date</code>. All options are enabled by default.</p>
    #[doc(hidden)]
    pub date_options: std::option::Option<crate::types::DateOptions>,
    /// <p>Options for a latlon field. A latlon field contains a location stored as a latitude and longitude value pair. Present if <code>IndexFieldType</code> specifies the field is of type <code>latlon</code>. All options are enabled by default.</p>
    #[doc(hidden)]
    pub lat_lon_options: std::option::Option<crate::types::LatLonOptions>,
    /// <p>Options for a field that contains an array of 64-bit signed integers. Present if <code>IndexFieldType</code> specifies the field is of type <code>int-array</code>. All options are enabled by default.</p>
    #[doc(hidden)]
    pub int_array_options: std::option::Option<crate::types::IntArrayOptions>,
    /// <p>Options for a field that contains an array of double-precision 64-bit floating point values. Present if <code>IndexFieldType</code> specifies the field is of type <code>double-array</code>. All options are enabled by default.</p>
    #[doc(hidden)]
    pub double_array_options: std::option::Option<crate::types::DoubleArrayOptions>,
    /// <p>Options for a field that contains an array of literal strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal-array</code>. All options are enabled by default.</p>
    #[doc(hidden)]
    pub literal_array_options: std::option::Option<crate::types::LiteralArrayOptions>,
    /// <p>Options for a field that contains an array of text strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>text-array</code>. A <code>text-array</code> field is always searchable. All options are enabled by default.</p>
    #[doc(hidden)]
    pub text_array_options: std::option::Option<crate::types::TextArrayOptions>,
    /// <p>Options for a field that contains an array of dates. Present if <code>IndexFieldType</code> specifies the field is of type <code>date-array</code>. All options are enabled by default.</p>
    #[doc(hidden)]
    pub date_array_options: std::option::Option<crate::types::DateArrayOptions>,
}
impl IndexField {
    /// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p>
    /// <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p>
    /// <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
    pub fn index_field_name(&self) -> std::option::Option<&str> {
        self.index_field_name.as_deref()
    }
    /// <p>The type of field. The valid options for a field depend on the field type. For more information about the supported field types, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html" target="_blank">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.</p>
    pub fn index_field_type(&self) -> std::option::Option<&crate::types::IndexFieldType> {
        self.index_field_type.as_ref()
    }
    /// <p>Options for a 64-bit signed integer field. Present if <code>IndexFieldType</code> specifies the field is of type <code>int</code>. All options are enabled by default.</p>
    pub fn int_options(&self) -> std::option::Option<&crate::types::IntOptions> {
        self.int_options.as_ref()
    }
    /// <p>Options for a double-precision 64-bit floating point field. Present if <code>IndexFieldType</code> specifies the field is of type <code>double</code>. All options are enabled by default.</p>
    pub fn double_options(&self) -> std::option::Option<&crate::types::DoubleOptions> {
        self.double_options.as_ref()
    }
    /// <p>Options for literal field. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal</code>. All options are enabled by default.</p>
    pub fn literal_options(&self) -> std::option::Option<&crate::types::LiteralOptions> {
        self.literal_options.as_ref()
    }
    /// <p>Options for text field. Present if <code>IndexFieldType</code> specifies the field is of type <code>text</code>. A <code>text</code> field is always searchable. All options are enabled by default.</p>
    pub fn text_options(&self) -> std::option::Option<&crate::types::TextOptions> {
        self.text_options.as_ref()
    }
    /// <p>Options for a date field. Dates and times are specified in UTC (Coordinated Universal Time) according to IETF RFC3339: yyyy-mm-ddT00:00:00Z. Present if <code>IndexFieldType</code> specifies the field is of type <code>date</code>. All options are enabled by default.</p>
    pub fn date_options(&self) -> std::option::Option<&crate::types::DateOptions> {
        self.date_options.as_ref()
    }
    /// <p>Options for a latlon field. A latlon field contains a location stored as a latitude and longitude value pair. Present if <code>IndexFieldType</code> specifies the field is of type <code>latlon</code>. All options are enabled by default.</p>
    pub fn lat_lon_options(&self) -> std::option::Option<&crate::types::LatLonOptions> {
        self.lat_lon_options.as_ref()
    }
    /// <p>Options for a field that contains an array of 64-bit signed integers. Present if <code>IndexFieldType</code> specifies the field is of type <code>int-array</code>. All options are enabled by default.</p>
    pub fn int_array_options(&self) -> std::option::Option<&crate::types::IntArrayOptions> {
        self.int_array_options.as_ref()
    }
    /// <p>Options for a field that contains an array of double-precision 64-bit floating point values. Present if <code>IndexFieldType</code> specifies the field is of type <code>double-array</code>. All options are enabled by default.</p>
    pub fn double_array_options(&self) -> std::option::Option<&crate::types::DoubleArrayOptions> {
        self.double_array_options.as_ref()
    }
    /// <p>Options for a field that contains an array of literal strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal-array</code>. All options are enabled by default.</p>
    pub fn literal_array_options(&self) -> std::option::Option<&crate::types::LiteralArrayOptions> {
        self.literal_array_options.as_ref()
    }
    /// <p>Options for a field that contains an array of text strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>text-array</code>. A <code>text-array</code> field is always searchable. All options are enabled by default.</p>
    pub fn text_array_options(&self) -> std::option::Option<&crate::types::TextArrayOptions> {
        self.text_array_options.as_ref()
    }
    /// <p>Options for a field that contains an array of dates. Present if <code>IndexFieldType</code> specifies the field is of type <code>date-array</code>. All options are enabled by default.</p>
    pub fn date_array_options(&self) -> std::option::Option<&crate::types::DateArrayOptions> {
        self.date_array_options.as_ref()
    }
}
impl IndexField {
    /// Creates a new builder-style object to manufacture [`IndexField`](crate::types::IndexField).
    pub fn builder() -> crate::types::builders::IndexFieldBuilder {
        crate::types::builders::IndexFieldBuilder::default()
    }
}

/// A builder for [`IndexField`](crate::types::IndexField).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IndexFieldBuilder {
    pub(crate) index_field_name: std::option::Option<std::string::String>,
    pub(crate) index_field_type: std::option::Option<crate::types::IndexFieldType>,
    pub(crate) int_options: std::option::Option<crate::types::IntOptions>,
    pub(crate) double_options: std::option::Option<crate::types::DoubleOptions>,
    pub(crate) literal_options: std::option::Option<crate::types::LiteralOptions>,
    pub(crate) text_options: std::option::Option<crate::types::TextOptions>,
    pub(crate) date_options: std::option::Option<crate::types::DateOptions>,
    pub(crate) lat_lon_options: std::option::Option<crate::types::LatLonOptions>,
    pub(crate) int_array_options: std::option::Option<crate::types::IntArrayOptions>,
    pub(crate) double_array_options: std::option::Option<crate::types::DoubleArrayOptions>,
    pub(crate) literal_array_options: std::option::Option<crate::types::LiteralArrayOptions>,
    pub(crate) text_array_options: std::option::Option<crate::types::TextArrayOptions>,
    pub(crate) date_array_options: std::option::Option<crate::types::DateArrayOptions>,
}
impl IndexFieldBuilder {
    /// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p>
    /// <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p>
    /// <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
    pub fn index_field_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.index_field_name = Some(input.into());
        self
    }
    /// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p>
    /// <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p>
    /// <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
    pub fn set_index_field_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.index_field_name = input;
        self
    }
    /// <p>The type of field. The valid options for a field depend on the field type. For more information about the supported field types, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html" target="_blank">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.</p>
    pub fn index_field_type(mut self, input: crate::types::IndexFieldType) -> Self {
        self.index_field_type = Some(input);
        self
    }
    /// <p>The type of field. The valid options for a field depend on the field type. For more information about the supported field types, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html" target="_blank">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.</p>
    pub fn set_index_field_type(
        mut self,
        input: std::option::Option<crate::types::IndexFieldType>,
    ) -> Self {
        self.index_field_type = input;
        self
    }
    /// <p>Options for a 64-bit signed integer field. Present if <code>IndexFieldType</code> specifies the field is of type <code>int</code>. All options are enabled by default.</p>
    pub fn int_options(mut self, input: crate::types::IntOptions) -> Self {
        self.int_options = Some(input);
        self
    }
    /// <p>Options for a 64-bit signed integer field. Present if <code>IndexFieldType</code> specifies the field is of type <code>int</code>. All options are enabled by default.</p>
    pub fn set_int_options(mut self, input: std::option::Option<crate::types::IntOptions>) -> Self {
        self.int_options = input;
        self
    }
    /// <p>Options for a double-precision 64-bit floating point field. Present if <code>IndexFieldType</code> specifies the field is of type <code>double</code>. All options are enabled by default.</p>
    pub fn double_options(mut self, input: crate::types::DoubleOptions) -> Self {
        self.double_options = Some(input);
        self
    }
    /// <p>Options for a double-precision 64-bit floating point field. Present if <code>IndexFieldType</code> specifies the field is of type <code>double</code>. All options are enabled by default.</p>
    pub fn set_double_options(
        mut self,
        input: std::option::Option<crate::types::DoubleOptions>,
    ) -> Self {
        self.double_options = input;
        self
    }
    /// <p>Options for literal field. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal</code>. All options are enabled by default.</p>
    pub fn literal_options(mut self, input: crate::types::LiteralOptions) -> Self {
        self.literal_options = Some(input);
        self
    }
    /// <p>Options for literal field. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal</code>. All options are enabled by default.</p>
    pub fn set_literal_options(
        mut self,
        input: std::option::Option<crate::types::LiteralOptions>,
    ) -> Self {
        self.literal_options = input;
        self
    }
    /// <p>Options for text field. Present if <code>IndexFieldType</code> specifies the field is of type <code>text</code>. A <code>text</code> field is always searchable. All options are enabled by default.</p>
    pub fn text_options(mut self, input: crate::types::TextOptions) -> Self {
        self.text_options = Some(input);
        self
    }
    /// <p>Options for text field. Present if <code>IndexFieldType</code> specifies the field is of type <code>text</code>. A <code>text</code> field is always searchable. All options are enabled by default.</p>
    pub fn set_text_options(
        mut self,
        input: std::option::Option<crate::types::TextOptions>,
    ) -> Self {
        self.text_options = input;
        self
    }
    /// <p>Options for a date field. Dates and times are specified in UTC (Coordinated Universal Time) according to IETF RFC3339: yyyy-mm-ddT00:00:00Z. Present if <code>IndexFieldType</code> specifies the field is of type <code>date</code>. All options are enabled by default.</p>
    pub fn date_options(mut self, input: crate::types::DateOptions) -> Self {
        self.date_options = Some(input);
        self
    }
    /// <p>Options for a date field. Dates and times are specified in UTC (Coordinated Universal Time) according to IETF RFC3339: yyyy-mm-ddT00:00:00Z. Present if <code>IndexFieldType</code> specifies the field is of type <code>date</code>. All options are enabled by default.</p>
    pub fn set_date_options(
        mut self,
        input: std::option::Option<crate::types::DateOptions>,
    ) -> Self {
        self.date_options = input;
        self
    }
    /// <p>Options for a latlon field. A latlon field contains a location stored as a latitude and longitude value pair. Present if <code>IndexFieldType</code> specifies the field is of type <code>latlon</code>. All options are enabled by default.</p>
    pub fn lat_lon_options(mut self, input: crate::types::LatLonOptions) -> Self {
        self.lat_lon_options = Some(input);
        self
    }
    /// <p>Options for a latlon field. A latlon field contains a location stored as a latitude and longitude value pair. Present if <code>IndexFieldType</code> specifies the field is of type <code>latlon</code>. All options are enabled by default.</p>
    pub fn set_lat_lon_options(
        mut self,
        input: std::option::Option<crate::types::LatLonOptions>,
    ) -> Self {
        self.lat_lon_options = input;
        self
    }
    /// <p>Options for a field that contains an array of 64-bit signed integers. Present if <code>IndexFieldType</code> specifies the field is of type <code>int-array</code>. All options are enabled by default.</p>
    pub fn int_array_options(mut self, input: crate::types::IntArrayOptions) -> Self {
        self.int_array_options = Some(input);
        self
    }
    /// <p>Options for a field that contains an array of 64-bit signed integers. Present if <code>IndexFieldType</code> specifies the field is of type <code>int-array</code>. All options are enabled by default.</p>
    pub fn set_int_array_options(
        mut self,
        input: std::option::Option<crate::types::IntArrayOptions>,
    ) -> Self {
        self.int_array_options = input;
        self
    }
    /// <p>Options for a field that contains an array of double-precision 64-bit floating point values. Present if <code>IndexFieldType</code> specifies the field is of type <code>double-array</code>. All options are enabled by default.</p>
    pub fn double_array_options(mut self, input: crate::types::DoubleArrayOptions) -> Self {
        self.double_array_options = Some(input);
        self
    }
    /// <p>Options for a field that contains an array of double-precision 64-bit floating point values. Present if <code>IndexFieldType</code> specifies the field is of type <code>double-array</code>. All options are enabled by default.</p>
    pub fn set_double_array_options(
        mut self,
        input: std::option::Option<crate::types::DoubleArrayOptions>,
    ) -> Self {
        self.double_array_options = input;
        self
    }
    /// <p>Options for a field that contains an array of literal strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal-array</code>. All options are enabled by default.</p>
    pub fn literal_array_options(mut self, input: crate::types::LiteralArrayOptions) -> Self {
        self.literal_array_options = Some(input);
        self
    }
    /// <p>Options for a field that contains an array of literal strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal-array</code>. All options are enabled by default.</p>
    pub fn set_literal_array_options(
        mut self,
        input: std::option::Option<crate::types::LiteralArrayOptions>,
    ) -> Self {
        self.literal_array_options = input;
        self
    }
    /// <p>Options for a field that contains an array of text strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>text-array</code>. A <code>text-array</code> field is always searchable. All options are enabled by default.</p>
    pub fn text_array_options(mut self, input: crate::types::TextArrayOptions) -> Self {
        self.text_array_options = Some(input);
        self
    }
    /// <p>Options for a field that contains an array of text strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>text-array</code>. A <code>text-array</code> field is always searchable. All options are enabled by default.</p>
    pub fn set_text_array_options(
        mut self,
        input: std::option::Option<crate::types::TextArrayOptions>,
    ) -> Self {
        self.text_array_options = input;
        self
    }
    /// <p>Options for a field that contains an array of dates. Present if <code>IndexFieldType</code> specifies the field is of type <code>date-array</code>. All options are enabled by default.</p>
    pub fn date_array_options(mut self, input: crate::types::DateArrayOptions) -> Self {
        self.date_array_options = Some(input);
        self
    }
    /// <p>Options for a field that contains an array of dates. Present if <code>IndexFieldType</code> specifies the field is of type <code>date-array</code>. All options are enabled by default.</p>
    pub fn set_date_array_options(
        mut self,
        input: std::option::Option<crate::types::DateArrayOptions>,
    ) -> Self {
        self.date_array_options = input;
        self
    }
    /// Consumes the builder and constructs a [`IndexField`](crate::types::IndexField).
    pub fn build(self) -> crate::types::IndexField {
        crate::types::IndexField {
            index_field_name: self.index_field_name,
            index_field_type: self.index_field_type,
            int_options: self.int_options,
            double_options: self.double_options,
            literal_options: self.literal_options,
            text_options: self.text_options,
            date_options: self.date_options,
            lat_lon_options: self.lat_lon_options,
            int_array_options: self.int_array_options,
            double_array_options: self.double_array_options,
            literal_array_options: self.literal_array_options,
            text_array_options: self.text_array_options,
            date_array_options: self.date_array_options,
        }
    }
}
