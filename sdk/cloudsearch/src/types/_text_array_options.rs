// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options for a field that contains an array of text strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>text-array</code>. A <code>text-array</code> field is always searchable. All options are enabled by default.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TextArrayOptions {
    /// A value to use for the field if the field isn't specified for a document.
    #[doc(hidden)]
    pub default_value: std::option::Option<std::string::String>,
    /// <p>A list of source fields to map to the field. </p>
    #[doc(hidden)]
    pub source_fields: std::option::Option<std::string::String>,
    /// <p>Whether the contents of the field can be returned in the search results.</p>
    #[doc(hidden)]
    pub return_enabled: std::option::Option<bool>,
    /// <p>Whether highlights can be returned for the field.</p>
    #[doc(hidden)]
    pub highlight_enabled: std::option::Option<bool>,
    /// <p>The name of an analysis scheme for a <code>text-array</code> field.</p>
    #[doc(hidden)]
    pub analysis_scheme: std::option::Option<std::string::String>,
}
impl TextArrayOptions {
    /// A value to use for the field if the field isn't specified for a document.
    pub fn default_value(&self) -> std::option::Option<&str> {
        self.default_value.as_deref()
    }
    /// <p>A list of source fields to map to the field. </p>
    pub fn source_fields(&self) -> std::option::Option<&str> {
        self.source_fields.as_deref()
    }
    /// <p>Whether the contents of the field can be returned in the search results.</p>
    pub fn return_enabled(&self) -> std::option::Option<bool> {
        self.return_enabled
    }
    /// <p>Whether highlights can be returned for the field.</p>
    pub fn highlight_enabled(&self) -> std::option::Option<bool> {
        self.highlight_enabled
    }
    /// <p>The name of an analysis scheme for a <code>text-array</code> field.</p>
    pub fn analysis_scheme(&self) -> std::option::Option<&str> {
        self.analysis_scheme.as_deref()
    }
}
impl TextArrayOptions {
    /// Creates a new builder-style object to manufacture [`TextArrayOptions`](crate::types::TextArrayOptions).
    pub fn builder() -> crate::types::builders::TextArrayOptionsBuilder {
        crate::types::builders::TextArrayOptionsBuilder::default()
    }
}

/// A builder for [`TextArrayOptions`](crate::types::TextArrayOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TextArrayOptionsBuilder {
    pub(crate) default_value: std::option::Option<std::string::String>,
    pub(crate) source_fields: std::option::Option<std::string::String>,
    pub(crate) return_enabled: std::option::Option<bool>,
    pub(crate) highlight_enabled: std::option::Option<bool>,
    pub(crate) analysis_scheme: std::option::Option<std::string::String>,
}
impl TextArrayOptionsBuilder {
    /// A value to use for the field if the field isn't specified for a document.
    pub fn default_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_value = Some(input.into());
        self
    }
    /// A value to use for the field if the field isn't specified for a document.
    pub fn set_default_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>A list of source fields to map to the field. </p>
    pub fn source_fields(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_fields = Some(input.into());
        self
    }
    /// <p>A list of source fields to map to the field. </p>
    pub fn set_source_fields(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_fields = input;
        self
    }
    /// <p>Whether the contents of the field can be returned in the search results.</p>
    pub fn return_enabled(mut self, input: bool) -> Self {
        self.return_enabled = Some(input);
        self
    }
    /// <p>Whether the contents of the field can be returned in the search results.</p>
    pub fn set_return_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.return_enabled = input;
        self
    }
    /// <p>Whether highlights can be returned for the field.</p>
    pub fn highlight_enabled(mut self, input: bool) -> Self {
        self.highlight_enabled = Some(input);
        self
    }
    /// <p>Whether highlights can be returned for the field.</p>
    pub fn set_highlight_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.highlight_enabled = input;
        self
    }
    /// <p>The name of an analysis scheme for a <code>text-array</code> field.</p>
    pub fn analysis_scheme(mut self, input: impl Into<std::string::String>) -> Self {
        self.analysis_scheme = Some(input.into());
        self
    }
    /// <p>The name of an analysis scheme for a <code>text-array</code> field.</p>
    pub fn set_analysis_scheme(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.analysis_scheme = input;
        self
    }
    /// Consumes the builder and constructs a [`TextArrayOptions`](crate::types::TextArrayOptions).
    pub fn build(self) -> crate::types::TextArrayOptions {
        crate::types::TextArrayOptions {
            default_value: self.default_value,
            source_fields: self.source_fields,
            return_enabled: self.return_enabled,
            highlight_enabled: self.highlight_enabled,
            analysis_scheme: self.analysis_scheme,
        }
    }
}
