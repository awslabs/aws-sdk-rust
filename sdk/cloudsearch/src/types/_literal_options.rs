// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options for literal field. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal</code>. All options are enabled by default.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LiteralOptions {
    /// A value to use for the field if the field isn't specified for a document.
    #[doc(hidden)]
    pub default_value: std::option::Option<std::string::String>,
    /// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p>
    /// <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p>
    /// <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
    #[doc(hidden)]
    pub source_field: std::option::Option<std::string::String>,
    /// <p>Whether facet information can be returned for the field.</p>
    #[doc(hidden)]
    pub facet_enabled: std::option::Option<bool>,
    /// <p>Whether the contents of the field are searchable.</p>
    #[doc(hidden)]
    pub search_enabled: std::option::Option<bool>,
    /// <p>Whether the contents of the field can be returned in the search results.</p>
    #[doc(hidden)]
    pub return_enabled: std::option::Option<bool>,
    /// <p>Whether the field can be used to sort the search results.</p>
    #[doc(hidden)]
    pub sort_enabled: std::option::Option<bool>,
}
impl LiteralOptions {
    /// A value to use for the field if the field isn't specified for a document.
    pub fn default_value(&self) -> std::option::Option<&str> {
        self.default_value.as_deref()
    }
    /// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p>
    /// <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p>
    /// <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
    pub fn source_field(&self) -> std::option::Option<&str> {
        self.source_field.as_deref()
    }
    /// <p>Whether facet information can be returned for the field.</p>
    pub fn facet_enabled(&self) -> std::option::Option<bool> {
        self.facet_enabled
    }
    /// <p>Whether the contents of the field are searchable.</p>
    pub fn search_enabled(&self) -> std::option::Option<bool> {
        self.search_enabled
    }
    /// <p>Whether the contents of the field can be returned in the search results.</p>
    pub fn return_enabled(&self) -> std::option::Option<bool> {
        self.return_enabled
    }
    /// <p>Whether the field can be used to sort the search results.</p>
    pub fn sort_enabled(&self) -> std::option::Option<bool> {
        self.sort_enabled
    }
}
impl LiteralOptions {
    /// Creates a new builder-style object to manufacture [`LiteralOptions`](crate::types::LiteralOptions).
    pub fn builder() -> crate::types::builders::LiteralOptionsBuilder {
        crate::types::builders::LiteralOptionsBuilder::default()
    }
}

/// A builder for [`LiteralOptions`](crate::types::LiteralOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LiteralOptionsBuilder {
    pub(crate) default_value: std::option::Option<std::string::String>,
    pub(crate) source_field: std::option::Option<std::string::String>,
    pub(crate) facet_enabled: std::option::Option<bool>,
    pub(crate) search_enabled: std::option::Option<bool>,
    pub(crate) return_enabled: std::option::Option<bool>,
    pub(crate) sort_enabled: std::option::Option<bool>,
}
impl LiteralOptionsBuilder {
    /// A value to use for the field if the field isn't specified for a document.
    pub fn default_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_value = Some(input.into());
        self
    }
    /// A value to use for the field if the field isn't specified for a document.
    pub fn set_default_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p>
    /// <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p>
    /// <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
    pub fn source_field(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_field = Some(input.into());
        self
    }
    /// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p>
    /// <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p>
    /// <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
    pub fn set_source_field(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_field = input;
        self
    }
    /// <p>Whether facet information can be returned for the field.</p>
    pub fn facet_enabled(mut self, input: bool) -> Self {
        self.facet_enabled = Some(input);
        self
    }
    /// <p>Whether facet information can be returned for the field.</p>
    pub fn set_facet_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.facet_enabled = input;
        self
    }
    /// <p>Whether the contents of the field are searchable.</p>
    pub fn search_enabled(mut self, input: bool) -> Self {
        self.search_enabled = Some(input);
        self
    }
    /// <p>Whether the contents of the field are searchable.</p>
    pub fn set_search_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.search_enabled = input;
        self
    }
    /// <p>Whether the contents of the field can be returned in the search results.</p>
    pub fn return_enabled(mut self, input: bool) -> Self {
        self.return_enabled = Some(input);
        self
    }
    /// <p>Whether the contents of the field can be returned in the search results.</p>
    pub fn set_return_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.return_enabled = input;
        self
    }
    /// <p>Whether the field can be used to sort the search results.</p>
    pub fn sort_enabled(mut self, input: bool) -> Self {
        self.sort_enabled = Some(input);
        self
    }
    /// <p>Whether the field can be used to sort the search results.</p>
    pub fn set_sort_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.sort_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`LiteralOptions`](crate::types::LiteralOptions).
    pub fn build(self) -> crate::types::LiteralOptions {
        crate::types::LiteralOptions {
            default_value: self.default_value,
            source_field: self.source_field,
            facet_enabled: self.facet_enabled,
            search_enabled: self.search_enabled,
            return_enabled: self.return_enabled,
            sort_enabled: self.sort_enabled,
        }
    }
}
