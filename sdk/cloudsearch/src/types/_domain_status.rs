// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The current status of the search domain.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainStatus {
    /// <p>An internally generated unique identifier for a domain.</p>
    #[doc(hidden)]
    pub domain_id: std::option::Option<std::string::String>,
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the search domain. See <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i> for more information.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>True if the search domain is created. It can take several minutes to initialize a domain when <code>CreateDomain</code> is called. Newly created search domains are returned from <code>DescribeDomains</code> with a false value for Created until domain creation is complete.</p>
    #[doc(hidden)]
    pub created: std::option::Option<bool>,
    /// <p>True if the search domain has been deleted. The system must clean up resources dedicated to the search domain when <code>DeleteDomain</code> is called. Newly deleted search domains are returned from <code>DescribeDomains</code> with a true value for IsDeleted for several minutes until resource cleanup is complete.</p>
    #[doc(hidden)]
    pub deleted: std::option::Option<bool>,
    /// <p>The service endpoint for updating documents in a search domain.</p>
    #[doc(hidden)]
    pub doc_service: std::option::Option<crate::types::ServiceEndpoint>,
    /// <p>The service endpoint for requesting search results from a search domain.</p>
    #[doc(hidden)]
    pub search_service: std::option::Option<crate::types::ServiceEndpoint>,
    /// <p>True if <code>IndexDocuments</code> needs to be called to activate the current domain configuration.</p>
    #[doc(hidden)]
    pub requires_index_documents: std::option::Option<bool>,
    /// <p>True if processing is being done to activate the current domain configuration.</p>
    #[doc(hidden)]
    pub processing: std::option::Option<bool>,
    /// <p>The instance type that is being used to process search requests.</p>
    #[doc(hidden)]
    pub search_instance_type: std::option::Option<std::string::String>,
    /// <p>The number of partitions across which the search index is spread.</p>
    #[doc(hidden)]
    pub search_partition_count: i32,
    /// <p>The number of search instances that are available to process search requests.</p>
    #[doc(hidden)]
    pub search_instance_count: i32,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub limits: std::option::Option<crate::types::Limits>,
}
impl DomainStatus {
    /// <p>An internally generated unique identifier for a domain.</p>
    pub fn domain_id(&self) -> std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the search domain. See <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i> for more information.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>True if the search domain is created. It can take several minutes to initialize a domain when <code>CreateDomain</code> is called. Newly created search domains are returned from <code>DescribeDomains</code> with a false value for Created until domain creation is complete.</p>
    pub fn created(&self) -> std::option::Option<bool> {
        self.created
    }
    /// <p>True if the search domain has been deleted. The system must clean up resources dedicated to the search domain when <code>DeleteDomain</code> is called. Newly deleted search domains are returned from <code>DescribeDomains</code> with a true value for IsDeleted for several minutes until resource cleanup is complete.</p>
    pub fn deleted(&self) -> std::option::Option<bool> {
        self.deleted
    }
    /// <p>The service endpoint for updating documents in a search domain.</p>
    pub fn doc_service(&self) -> std::option::Option<&crate::types::ServiceEndpoint> {
        self.doc_service.as_ref()
    }
    /// <p>The service endpoint for requesting search results from a search domain.</p>
    pub fn search_service(&self) -> std::option::Option<&crate::types::ServiceEndpoint> {
        self.search_service.as_ref()
    }
    /// <p>True if <code>IndexDocuments</code> needs to be called to activate the current domain configuration.</p>
    pub fn requires_index_documents(&self) -> std::option::Option<bool> {
        self.requires_index_documents
    }
    /// <p>True if processing is being done to activate the current domain configuration.</p>
    pub fn processing(&self) -> std::option::Option<bool> {
        self.processing
    }
    /// <p>The instance type that is being used to process search requests.</p>
    pub fn search_instance_type(&self) -> std::option::Option<&str> {
        self.search_instance_type.as_deref()
    }
    /// <p>The number of partitions across which the search index is spread.</p>
    pub fn search_partition_count(&self) -> i32 {
        self.search_partition_count
    }
    /// <p>The number of search instances that are available to process search requests.</p>
    pub fn search_instance_count(&self) -> i32 {
        self.search_instance_count
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn limits(&self) -> std::option::Option<&crate::types::Limits> {
        self.limits.as_ref()
    }
}
impl DomainStatus {
    /// Creates a new builder-style object to manufacture [`DomainStatus`](crate::types::DomainStatus).
    pub fn builder() -> crate::types::builders::DomainStatusBuilder {
        crate::types::builders::DomainStatusBuilder::default()
    }
}

/// A builder for [`DomainStatus`](crate::types::DomainStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainStatusBuilder {
    pub(crate) domain_id: std::option::Option<std::string::String>,
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) created: std::option::Option<bool>,
    pub(crate) deleted: std::option::Option<bool>,
    pub(crate) doc_service: std::option::Option<crate::types::ServiceEndpoint>,
    pub(crate) search_service: std::option::Option<crate::types::ServiceEndpoint>,
    pub(crate) requires_index_documents: std::option::Option<bool>,
    pub(crate) processing: std::option::Option<bool>,
    pub(crate) search_instance_type: std::option::Option<std::string::String>,
    pub(crate) search_partition_count: std::option::Option<i32>,
    pub(crate) search_instance_count: std::option::Option<i32>,
    pub(crate) limits: std::option::Option<crate::types::Limits>,
}
impl DomainStatusBuilder {
    /// <p>An internally generated unique identifier for a domain.</p>
    pub fn domain_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_id = Some(input.into());
        self
    }
    /// <p>An internally generated unique identifier for a domain.</p>
    pub fn set_domain_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the search domain. See <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i> for more information.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the search domain. See <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i> for more information.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>True if the search domain is created. It can take several minutes to initialize a domain when <code>CreateDomain</code> is called. Newly created search domains are returned from <code>DescribeDomains</code> with a false value for Created until domain creation is complete.</p>
    pub fn created(mut self, input: bool) -> Self {
        self.created = Some(input);
        self
    }
    /// <p>True if the search domain is created. It can take several minutes to initialize a domain when <code>CreateDomain</code> is called. Newly created search domains are returned from <code>DescribeDomains</code> with a false value for Created until domain creation is complete.</p>
    pub fn set_created(mut self, input: std::option::Option<bool>) -> Self {
        self.created = input;
        self
    }
    /// <p>True if the search domain has been deleted. The system must clean up resources dedicated to the search domain when <code>DeleteDomain</code> is called. Newly deleted search domains are returned from <code>DescribeDomains</code> with a true value for IsDeleted for several minutes until resource cleanup is complete.</p>
    pub fn deleted(mut self, input: bool) -> Self {
        self.deleted = Some(input);
        self
    }
    /// <p>True if the search domain has been deleted. The system must clean up resources dedicated to the search domain when <code>DeleteDomain</code> is called. Newly deleted search domains are returned from <code>DescribeDomains</code> with a true value for IsDeleted for several minutes until resource cleanup is complete.</p>
    pub fn set_deleted(mut self, input: std::option::Option<bool>) -> Self {
        self.deleted = input;
        self
    }
    /// <p>The service endpoint for updating documents in a search domain.</p>
    pub fn doc_service(mut self, input: crate::types::ServiceEndpoint) -> Self {
        self.doc_service = Some(input);
        self
    }
    /// <p>The service endpoint for updating documents in a search domain.</p>
    pub fn set_doc_service(
        mut self,
        input: std::option::Option<crate::types::ServiceEndpoint>,
    ) -> Self {
        self.doc_service = input;
        self
    }
    /// <p>The service endpoint for requesting search results from a search domain.</p>
    pub fn search_service(mut self, input: crate::types::ServiceEndpoint) -> Self {
        self.search_service = Some(input);
        self
    }
    /// <p>The service endpoint for requesting search results from a search domain.</p>
    pub fn set_search_service(
        mut self,
        input: std::option::Option<crate::types::ServiceEndpoint>,
    ) -> Self {
        self.search_service = input;
        self
    }
    /// <p>True if <code>IndexDocuments</code> needs to be called to activate the current domain configuration.</p>
    pub fn requires_index_documents(mut self, input: bool) -> Self {
        self.requires_index_documents = Some(input);
        self
    }
    /// <p>True if <code>IndexDocuments</code> needs to be called to activate the current domain configuration.</p>
    pub fn set_requires_index_documents(mut self, input: std::option::Option<bool>) -> Self {
        self.requires_index_documents = input;
        self
    }
    /// <p>True if processing is being done to activate the current domain configuration.</p>
    pub fn processing(mut self, input: bool) -> Self {
        self.processing = Some(input);
        self
    }
    /// <p>True if processing is being done to activate the current domain configuration.</p>
    pub fn set_processing(mut self, input: std::option::Option<bool>) -> Self {
        self.processing = input;
        self
    }
    /// <p>The instance type that is being used to process search requests.</p>
    pub fn search_instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.search_instance_type = Some(input.into());
        self
    }
    /// <p>The instance type that is being used to process search requests.</p>
    pub fn set_search_instance_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.search_instance_type = input;
        self
    }
    /// <p>The number of partitions across which the search index is spread.</p>
    pub fn search_partition_count(mut self, input: i32) -> Self {
        self.search_partition_count = Some(input);
        self
    }
    /// <p>The number of partitions across which the search index is spread.</p>
    pub fn set_search_partition_count(mut self, input: std::option::Option<i32>) -> Self {
        self.search_partition_count = input;
        self
    }
    /// <p>The number of search instances that are available to process search requests.</p>
    pub fn search_instance_count(mut self, input: i32) -> Self {
        self.search_instance_count = Some(input);
        self
    }
    /// <p>The number of search instances that are available to process search requests.</p>
    pub fn set_search_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.search_instance_count = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn limits(mut self, input: crate::types::Limits) -> Self {
        self.limits = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_limits(mut self, input: std::option::Option<crate::types::Limits>) -> Self {
        self.limits = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainStatus`](crate::types::DomainStatus).
    pub fn build(self) -> crate::types::DomainStatus {
        crate::types::DomainStatus {
            domain_id: self.domain_id,
            domain_name: self.domain_name,
            arn: self.arn,
            created: self.created,
            deleted: self.deleted,
            doc_service: self.doc_service,
            search_service: self.search_service,
            requires_index_documents: self.requires_index_documents,
            processing: self.processing,
            search_instance_type: self.search_instance_type,
            search_partition_count: self.search_partition_count.unwrap_or_default(),
            search_instance_count: self.search_instance_count.unwrap_or_default(),
            limits: self.limits,
        }
    }
}
