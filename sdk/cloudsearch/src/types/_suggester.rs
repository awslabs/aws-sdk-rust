// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information for a search suggester. Each suggester has a unique name and specifies the text field you want to use for suggestions. The following options can be configured for a suggester: <code>FuzzyMatching</code>, <code>SortExpression</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Suggester {
    /// <p>Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).</p>
    #[doc(hidden)]
    pub suggester_name: std::option::Option<std::string::String>,
    /// <p>Options for a search suggester.</p>
    #[doc(hidden)]
    pub document_suggester_options: std::option::Option<crate::types::DocumentSuggesterOptions>,
}
impl Suggester {
    /// <p>Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).</p>
    pub fn suggester_name(&self) -> std::option::Option<&str> {
        self.suggester_name.as_deref()
    }
    /// <p>Options for a search suggester.</p>
    pub fn document_suggester_options(
        &self,
    ) -> std::option::Option<&crate::types::DocumentSuggesterOptions> {
        self.document_suggester_options.as_ref()
    }
}
impl Suggester {
    /// Creates a new builder-style object to manufacture [`Suggester`](crate::types::Suggester).
    pub fn builder() -> crate::types::builders::SuggesterBuilder {
        crate::types::builders::SuggesterBuilder::default()
    }
}

/// A builder for [`Suggester`](crate::types::Suggester).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SuggesterBuilder {
    pub(crate) suggester_name: std::option::Option<std::string::String>,
    pub(crate) document_suggester_options:
        std::option::Option<crate::types::DocumentSuggesterOptions>,
}
impl SuggesterBuilder {
    /// <p>Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).</p>
    pub fn suggester_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.suggester_name = Some(input.into());
        self
    }
    /// <p>Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).</p>
    pub fn set_suggester_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.suggester_name = input;
        self
    }
    /// <p>Options for a search suggester.</p>
    pub fn document_suggester_options(
        mut self,
        input: crate::types::DocumentSuggesterOptions,
    ) -> Self {
        self.document_suggester_options = Some(input);
        self
    }
    /// <p>Options for a search suggester.</p>
    pub fn set_document_suggester_options(
        mut self,
        input: std::option::Option<crate::types::DocumentSuggesterOptions>,
    ) -> Self {
        self.document_suggester_options = input;
        self
    }
    /// Consumes the builder and constructs a [`Suggester`](crate::types::Suggester).
    pub fn build(self) -> crate::types::Suggester {
        crate::types::Suggester {
            suggester_name: self.suggester_name,
            document_suggester_options: self.document_suggester_options,
        }
    }
}
