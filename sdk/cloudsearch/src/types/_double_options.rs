// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options for a double-precision 64-bit floating point field. Present if <code>IndexFieldType</code> specifies the field is of type <code>double</code>. All options are enabled by default.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DoubleOptions {
    /// <p>A value to use for the field if the field isn't specified for a document. This can be important if you are using the field in an expression and that field is not present in every document.</p>
    #[doc(hidden)]
    pub default_value: std::option::Option<f64>,
    /// <p>The name of the source field to map to the field. </p>
    #[doc(hidden)]
    pub source_field: std::option::Option<std::string::String>,
    /// <p>Whether facet information can be returned for the field.</p>
    #[doc(hidden)]
    pub facet_enabled: std::option::Option<bool>,
    /// <p>Whether the contents of the field are searchable.</p>
    #[doc(hidden)]
    pub search_enabled: std::option::Option<bool>,
    /// <p>Whether the contents of the field can be returned in the search results.</p>
    #[doc(hidden)]
    pub return_enabled: std::option::Option<bool>,
    /// <p>Whether the field can be used to sort the search results.</p>
    #[doc(hidden)]
    pub sort_enabled: std::option::Option<bool>,
}
impl DoubleOptions {
    /// <p>A value to use for the field if the field isn't specified for a document. This can be important if you are using the field in an expression and that field is not present in every document.</p>
    pub fn default_value(&self) -> std::option::Option<f64> {
        self.default_value
    }
    /// <p>The name of the source field to map to the field. </p>
    pub fn source_field(&self) -> std::option::Option<&str> {
        self.source_field.as_deref()
    }
    /// <p>Whether facet information can be returned for the field.</p>
    pub fn facet_enabled(&self) -> std::option::Option<bool> {
        self.facet_enabled
    }
    /// <p>Whether the contents of the field are searchable.</p>
    pub fn search_enabled(&self) -> std::option::Option<bool> {
        self.search_enabled
    }
    /// <p>Whether the contents of the field can be returned in the search results.</p>
    pub fn return_enabled(&self) -> std::option::Option<bool> {
        self.return_enabled
    }
    /// <p>Whether the field can be used to sort the search results.</p>
    pub fn sort_enabled(&self) -> std::option::Option<bool> {
        self.sort_enabled
    }
}
impl DoubleOptions {
    /// Creates a new builder-style object to manufacture [`DoubleOptions`](crate::types::DoubleOptions).
    pub fn builder() -> crate::types::builders::DoubleOptionsBuilder {
        crate::types::builders::DoubleOptionsBuilder::default()
    }
}

/// A builder for [`DoubleOptions`](crate::types::DoubleOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DoubleOptionsBuilder {
    pub(crate) default_value: std::option::Option<f64>,
    pub(crate) source_field: std::option::Option<std::string::String>,
    pub(crate) facet_enabled: std::option::Option<bool>,
    pub(crate) search_enabled: std::option::Option<bool>,
    pub(crate) return_enabled: std::option::Option<bool>,
    pub(crate) sort_enabled: std::option::Option<bool>,
}
impl DoubleOptionsBuilder {
    /// <p>A value to use for the field if the field isn't specified for a document. This can be important if you are using the field in an expression and that field is not present in every document.</p>
    pub fn default_value(mut self, input: f64) -> Self {
        self.default_value = Some(input);
        self
    }
    /// <p>A value to use for the field if the field isn't specified for a document. This can be important if you are using the field in an expression and that field is not present in every document.</p>
    pub fn set_default_value(mut self, input: std::option::Option<f64>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The name of the source field to map to the field. </p>
    pub fn source_field(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_field = Some(input.into());
        self
    }
    /// <p>The name of the source field to map to the field. </p>
    pub fn set_source_field(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_field = input;
        self
    }
    /// <p>Whether facet information can be returned for the field.</p>
    pub fn facet_enabled(mut self, input: bool) -> Self {
        self.facet_enabled = Some(input);
        self
    }
    /// <p>Whether facet information can be returned for the field.</p>
    pub fn set_facet_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.facet_enabled = input;
        self
    }
    /// <p>Whether the contents of the field are searchable.</p>
    pub fn search_enabled(mut self, input: bool) -> Self {
        self.search_enabled = Some(input);
        self
    }
    /// <p>Whether the contents of the field are searchable.</p>
    pub fn set_search_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.search_enabled = input;
        self
    }
    /// <p>Whether the contents of the field can be returned in the search results.</p>
    pub fn return_enabled(mut self, input: bool) -> Self {
        self.return_enabled = Some(input);
        self
    }
    /// <p>Whether the contents of the field can be returned in the search results.</p>
    pub fn set_return_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.return_enabled = input;
        self
    }
    /// <p>Whether the field can be used to sort the search results.</p>
    pub fn sort_enabled(mut self, input: bool) -> Self {
        self.sort_enabled = Some(input);
        self
    }
    /// <p>Whether the field can be used to sort the search results.</p>
    pub fn set_sort_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.sort_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`DoubleOptions`](crate::types::DoubleOptions).
    pub fn build(self) -> crate::types::DoubleOptions {
        crate::types::DoubleOptions {
            default_value: self.default_value,
            source_field: self.source_field,
            facet_enabled: self.facet_enabled,
            search_enabled: self.search_enabled,
            return_enabled: self.return_enabled,
            sort_enabled: self.sort_enabled,
        }
    }
}
