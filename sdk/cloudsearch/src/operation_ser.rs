// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_build_suggesters(
    input: &crate::input::BuildSuggestersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BuildSuggesters", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DomainName");
    if let Some(var_2) = &input.domain_name {
        scope_1.string(var_2);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_domain(
    input: &crate::input::CreateDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDomain", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("DomainName");
    if let Some(var_4) = &input.domain_name {
        scope_3.string(var_4);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_define_analysis_scheme(
    input: &crate::input::DefineAnalysisSchemeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DefineAnalysisScheme", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("DomainName");
    if let Some(var_6) = &input.domain_name {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("AnalysisScheme");
    if let Some(var_8) = &input.analysis_scheme {
        crate::query_ser::serialize_structure_crate_model_analysis_scheme(scope_7, var_8)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_define_expression(
    input: &crate::input::DefineExpressionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DefineExpression", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("DomainName");
    if let Some(var_10) = &input.domain_name {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("Expression");
    if let Some(var_12) = &input.expression {
        crate::query_ser::serialize_structure_crate_model_expression(scope_11, var_12)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_define_index_field(
    input: &crate::input::DefineIndexFieldInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DefineIndexField", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("DomainName");
    if let Some(var_14) = &input.domain_name {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("IndexField");
    if let Some(var_16) = &input.index_field {
        crate::query_ser::serialize_structure_crate_model_index_field(scope_15, var_16)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_define_suggester(
    input: &crate::input::DefineSuggesterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DefineSuggester", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("DomainName");
    if let Some(var_18) = &input.domain_name {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("Suggester");
    if let Some(var_20) = &input.suggester {
        crate::query_ser::serialize_structure_crate_model_suggester(scope_19, var_20)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_analysis_scheme(
    input: &crate::input::DeleteAnalysisSchemeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteAnalysisScheme", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("DomainName");
    if let Some(var_22) = &input.domain_name {
        scope_21.string(var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("AnalysisSchemeName");
    if let Some(var_24) = &input.analysis_scheme_name {
        scope_23.string(var_24);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_domain(
    input: &crate::input::DeleteDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDomain", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("DomainName");
    if let Some(var_26) = &input.domain_name {
        scope_25.string(var_26);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_expression(
    input: &crate::input::DeleteExpressionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteExpression", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("DomainName");
    if let Some(var_28) = &input.domain_name {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("ExpressionName");
    if let Some(var_30) = &input.expression_name {
        scope_29.string(var_30);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_index_field(
    input: &crate::input::DeleteIndexFieldInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIndexField", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("DomainName");
    if let Some(var_32) = &input.domain_name {
        scope_31.string(var_32);
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("IndexFieldName");
    if let Some(var_34) = &input.index_field_name {
        scope_33.string(var_34);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_suggester(
    input: &crate::input::DeleteSuggesterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSuggester", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("DomainName");
    if let Some(var_36) = &input.domain_name {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("SuggesterName");
    if let Some(var_38) = &input.suggester_name {
        scope_37.string(var_38);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_analysis_schemes(
    input: &crate::input::DescribeAnalysisSchemesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAnalysisSchemes", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("DomainName");
    if let Some(var_40) = &input.domain_name {
        scope_39.string(var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("AnalysisSchemeNames");
    if let Some(var_42) = &input.analysis_scheme_names {
        let mut list_44 = scope_41.start_list(false, None);
        for item_43 in var_42 {
            #[allow(unused_mut)]
            let mut entry_45 = list_44.entry();
            entry_45.string(item_43);
        }
        list_44.finish();
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("Deployed");
    if let Some(var_47) = &input.deployed {
        scope_46.boolean(*var_47);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_options(
    input: &crate::input::DescribeAvailabilityOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityOptions", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("DomainName");
    if let Some(var_49) = &input.domain_name {
        scope_48.string(var_49);
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("Deployed");
    if let Some(var_51) = &input.deployed {
        scope_50.boolean(*var_51);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_domain_endpoint_options(
    input: &crate::input::DescribeDomainEndpointOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDomainEndpointOptions", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("DomainName");
    if let Some(var_53) = &input.domain_name {
        scope_52.string(var_53);
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("Deployed");
    if let Some(var_55) = &input.deployed {
        scope_54.boolean(*var_55);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_domains(
    input: &crate::input::DescribeDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeDomains", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("DomainNames");
    if let Some(var_57) = &input.domain_names {
        let mut list_59 = scope_56.start_list(false, None);
        for item_58 in var_57 {
            #[allow(unused_mut)]
            let mut entry_60 = list_59.entry();
            entry_60.string(item_58);
        }
        list_59.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_expressions(
    input: &crate::input::DescribeExpressionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExpressions", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("DomainName");
    if let Some(var_62) = &input.domain_name {
        scope_61.string(var_62);
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("ExpressionNames");
    if let Some(var_64) = &input.expression_names {
        let mut list_66 = scope_63.start_list(false, None);
        for item_65 in var_64 {
            #[allow(unused_mut)]
            let mut entry_67 = list_66.entry();
            entry_67.string(item_65);
        }
        list_66.finish();
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("Deployed");
    if let Some(var_69) = &input.deployed {
        scope_68.boolean(*var_69);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_index_fields(
    input: &crate::input::DescribeIndexFieldsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIndexFields", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("DomainName");
    if let Some(var_71) = &input.domain_name {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("FieldNames");
    if let Some(var_73) = &input.field_names {
        let mut list_75 = scope_72.start_list(false, None);
        for item_74 in var_73 {
            #[allow(unused_mut)]
            let mut entry_76 = list_75.entry();
            entry_76.string(item_74);
        }
        list_75.finish();
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("Deployed");
    if let Some(var_78) = &input.deployed {
        scope_77.boolean(*var_78);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scaling_parameters(
    input: &crate::input::DescribeScalingParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScalingParameters", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("DomainName");
    if let Some(var_80) = &input.domain_name {
        scope_79.string(var_80);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_service_access_policies(
    input: &crate::input::DescribeServiceAccessPoliciesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeServiceAccessPolicies", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("DomainName");
    if let Some(var_82) = &input.domain_name {
        scope_81.string(var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("Deployed");
    if let Some(var_84) = &input.deployed {
        scope_83.boolean(*var_84);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_suggesters(
    input: &crate::input::DescribeSuggestersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSuggesters", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("DomainName");
    if let Some(var_86) = &input.domain_name {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("SuggesterNames");
    if let Some(var_88) = &input.suggester_names {
        let mut list_90 = scope_87.start_list(false, None);
        for item_89 in var_88 {
            #[allow(unused_mut)]
            let mut entry_91 = list_90.entry();
            entry_91.string(item_89);
        }
        list_90.finish();
    }
    #[allow(unused_mut)]
    let mut scope_92 = writer.prefix("Deployed");
    if let Some(var_93) = &input.deployed {
        scope_92.boolean(*var_93);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_index_documents(
    input: &crate::input::IndexDocumentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "IndexDocuments", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("DomainName");
    if let Some(var_95) = &input.domain_name {
        scope_94.string(var_95);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_domain_names(
    input: &crate::input::ListDomainNamesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListDomainNames", "2013-01-01");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_availability_options(
    input: &crate::input::UpdateAvailabilityOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateAvailabilityOptions", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("DomainName");
    if let Some(var_97) = &input.domain_name {
        scope_96.string(var_97);
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("MultiAZ");
    if let Some(var_99) = &input.multi_az {
        scope_98.boolean(*var_99);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_domain_endpoint_options(
    input: &crate::input::UpdateDomainEndpointOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateDomainEndpointOptions", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_100 = writer.prefix("DomainName");
    if let Some(var_101) = &input.domain_name {
        scope_100.string(var_101);
    }
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("DomainEndpointOptions");
    if let Some(var_103) = &input.domain_endpoint_options {
        crate::query_ser::serialize_structure_crate_model_domain_endpoint_options(
            scope_102, var_103,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_scaling_parameters(
    input: &crate::input::UpdateScalingParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateScalingParameters", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("DomainName");
    if let Some(var_105) = &input.domain_name {
        scope_104.string(var_105);
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("ScalingParameters");
    if let Some(var_107) = &input.scaling_parameters {
        crate::query_ser::serialize_structure_crate_model_scaling_parameters(scope_106, var_107)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_service_access_policies(
    input: &crate::input::UpdateServiceAccessPoliciesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateServiceAccessPolicies", "2013-01-01");
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("DomainName");
    if let Some(var_109) = &input.domain_name {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("AccessPolicies");
    if let Some(var_111) = &input.access_policies {
        scope_110.string(var_111);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
