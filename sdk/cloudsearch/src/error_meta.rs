// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>An error occurred while processing the request.</p>
    BaseException(crate::error::BaseException),
    /// <p>The request was rejected because it attempted an operation which is not enabled.</p>
    DisabledOperationException(crate::error::DisabledOperationException),
    /// <p>An internal error occurred while processing the request. If this problem persists, report an issue from the <a href="http://status.aws.amazon.com/" target="_blank">Service Health Dashboard</a>.</p>
    InternalException(crate::error::InternalException),
    /// <p>The request was rejected because it specified an invalid type definition.</p>
    InvalidTypeException(crate::error::InvalidTypeException),
    /// <p>The request was rejected because a resource limit has already been met.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The request was rejected because it attempted to create a resource that already exists.</p>
    ResourceAlreadyExistsException(crate::error::ResourceAlreadyExistsException),
    /// <p>The request was rejected because it attempted to reference a resource that does not exist.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The request was rejected because it has invalid parameters.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BaseException(inner) => inner.fmt(f),
            Error::DisabledOperationException(inner) => inner.fmt(f),
            Error::InternalException(inner) => inner.fmt(f),
            Error::InvalidTypeException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BuildSuggestersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BuildSuggestersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BuildSuggestersError> for Error {
    fn from(err: crate::error::BuildSuggestersError) -> Self {
        match err {
            crate::error::BuildSuggestersError::BaseException(inner) => Error::BaseException(inner),
            crate::error::BuildSuggestersError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::BuildSuggestersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::BuildSuggestersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BuildSuggestersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDomainError> for Error {
    fn from(err: crate::error::CreateDomainError) -> Self {
        match err {
            crate::error::CreateDomainError::BaseException(inner) => Error::BaseException(inner),
            crate::error::CreateDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateDomainError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDomainError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreateDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DefineAnalysisSchemeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DefineAnalysisSchemeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DefineAnalysisSchemeError> for Error {
    fn from(err: crate::error::DefineAnalysisSchemeError) -> Self {
        match err {
            crate::error::DefineAnalysisSchemeError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DefineAnalysisSchemeError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DefineAnalysisSchemeError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::DefineAnalysisSchemeError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DefineAnalysisSchemeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DefineAnalysisSchemeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DefineAnalysisSchemeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DefineExpressionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DefineExpressionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DefineExpressionError> for Error {
    fn from(err: crate::error::DefineExpressionError) -> Self {
        match err {
            crate::error::DefineExpressionError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DefineExpressionError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DefineExpressionError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::DefineExpressionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DefineExpressionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DefineExpressionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DefineExpressionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DefineIndexFieldError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DefineIndexFieldError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DefineIndexFieldError> for Error {
    fn from(err: crate::error::DefineIndexFieldError) -> Self {
        match err {
            crate::error::DefineIndexFieldError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DefineIndexFieldError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DefineIndexFieldError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::DefineIndexFieldError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DefineIndexFieldError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DefineIndexFieldError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DefineIndexFieldError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DefineSuggesterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DefineSuggesterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DefineSuggesterError> for Error {
    fn from(err: crate::error::DefineSuggesterError) -> Self {
        match err {
            crate::error::DefineSuggesterError::BaseException(inner) => Error::BaseException(inner),
            crate::error::DefineSuggesterError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DefineSuggesterError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::DefineSuggesterError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DefineSuggesterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DefineSuggesterError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DefineSuggesterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAnalysisSchemeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAnalysisSchemeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAnalysisSchemeError> for Error {
    fn from(err: crate::error::DeleteAnalysisSchemeError) -> Self {
        match err {
            crate::error::DeleteAnalysisSchemeError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DeleteAnalysisSchemeError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteAnalysisSchemeError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::DeleteAnalysisSchemeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAnalysisSchemeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteAnalysisSchemeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDomainError> for Error {
    fn from(err: crate::error::DeleteDomainError) -> Self {
        match err {
            crate::error::DeleteDomainError::BaseException(inner) => Error::BaseException(inner),
            crate::error::DeleteDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteExpressionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteExpressionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteExpressionError> for Error {
    fn from(err: crate::error::DeleteExpressionError) -> Self {
        match err {
            crate::error::DeleteExpressionError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DeleteExpressionError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteExpressionError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::DeleteExpressionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteExpressionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteExpressionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIndexFieldError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteIndexFieldError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteIndexFieldError> for Error {
    fn from(err: crate::error::DeleteIndexFieldError) -> Self {
        match err {
            crate::error::DeleteIndexFieldError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DeleteIndexFieldError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteIndexFieldError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::DeleteIndexFieldError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteIndexFieldError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteIndexFieldError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSuggesterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSuggesterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSuggesterError> for Error {
    fn from(err: crate::error::DeleteSuggesterError) -> Self {
        match err {
            crate::error::DeleteSuggesterError::BaseException(inner) => Error::BaseException(inner),
            crate::error::DeleteSuggesterError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteSuggesterError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::DeleteSuggesterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteSuggesterError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteSuggesterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAnalysisSchemesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAnalysisSchemesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAnalysisSchemesError> for Error {
    fn from(err: crate::error::DescribeAnalysisSchemesError) -> Self {
        match err {
            crate::error::DescribeAnalysisSchemesError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeAnalysisSchemesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeAnalysisSchemesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeAnalysisSchemesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAvailabilityOptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAvailabilityOptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAvailabilityOptionsError> for Error {
    fn from(err: crate::error::DescribeAvailabilityOptionsError) -> Self {
        match err {
            crate::error::DescribeAvailabilityOptionsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeAvailabilityOptionsError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::DescribeAvailabilityOptionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeAvailabilityOptionsError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::DescribeAvailabilityOptionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DescribeAvailabilityOptionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeAvailabilityOptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDomainEndpointOptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDomainEndpointOptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDomainEndpointOptionsError> for Error {
    fn from(err: crate::error::DescribeDomainEndpointOptionsError) -> Self {
        match err {
            crate::error::DescribeDomainEndpointOptionsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeDomainEndpointOptionsError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::DescribeDomainEndpointOptionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeDomainEndpointOptionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DescribeDomainEndpointOptionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDomainEndpointOptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDomainsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDomainsError> for Error {
    fn from(err: crate::error::DescribeDomainsError) -> Self {
        match err {
            crate::error::DescribeDomainsError::BaseException(inner) => Error::BaseException(inner),
            crate::error::DescribeDomainsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeExpressionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeExpressionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeExpressionsError> for Error {
    fn from(err: crate::error::DescribeExpressionsError) -> Self {
        match err {
            crate::error::DescribeExpressionsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeExpressionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeExpressionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeExpressionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeIndexFieldsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeIndexFieldsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeIndexFieldsError> for Error {
    fn from(err: crate::error::DescribeIndexFieldsError) -> Self {
        match err {
            crate::error::DescribeIndexFieldsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeIndexFieldsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeIndexFieldsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeIndexFieldsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeScalingParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeScalingParametersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeScalingParametersError> for Error {
    fn from(err: crate::error::DescribeScalingParametersError) -> Self {
        match err {
            crate::error::DescribeScalingParametersError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeScalingParametersError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeScalingParametersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeScalingParametersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeServiceAccessPoliciesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeServiceAccessPoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeServiceAccessPoliciesError> for Error {
    fn from(err: crate::error::DescribeServiceAccessPoliciesError) -> Self {
        match err {
            crate::error::DescribeServiceAccessPoliciesError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeServiceAccessPoliciesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeServiceAccessPoliciesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeServiceAccessPoliciesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSuggestersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSuggestersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSuggestersError> for Error {
    fn from(err: crate::error::DescribeSuggestersError) -> Self {
        match err {
            crate::error::DescribeSuggestersError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeSuggestersError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeSuggestersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeSuggestersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::IndexDocumentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::IndexDocumentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::IndexDocumentsError> for Error {
    fn from(err: crate::error::IndexDocumentsError) -> Self {
        match err {
            crate::error::IndexDocumentsError::BaseException(inner) => Error::BaseException(inner),
            crate::error::IndexDocumentsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::IndexDocumentsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::IndexDocumentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::IndexDocumentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDomainNamesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDomainNamesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDomainNamesError> for Error {
    fn from(err: crate::error::ListDomainNamesError) -> Self {
        match err {
            crate::error::ListDomainNamesError::BaseException(inner) => Error::BaseException(inner),
            crate::error::ListDomainNamesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAvailabilityOptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAvailabilityOptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAvailabilityOptionsError> for Error {
    fn from(err: crate::error::UpdateAvailabilityOptionsError) -> Self {
        match err {
            crate::error::UpdateAvailabilityOptionsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::UpdateAvailabilityOptionsError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::UpdateAvailabilityOptionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateAvailabilityOptionsError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::UpdateAvailabilityOptionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateAvailabilityOptionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAvailabilityOptionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateAvailabilityOptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDomainEndpointOptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDomainEndpointOptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDomainEndpointOptionsError> for Error {
    fn from(err: crate::error::UpdateDomainEndpointOptionsError) -> Self {
        match err {
            crate::error::UpdateDomainEndpointOptionsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::UpdateDomainEndpointOptionsError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::UpdateDomainEndpointOptionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateDomainEndpointOptionsError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::UpdateDomainEndpointOptionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateDomainEndpointOptionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDomainEndpointOptionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateDomainEndpointOptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateScalingParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateScalingParametersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateScalingParametersError> for Error {
    fn from(err: crate::error::UpdateScalingParametersError) -> Self {
        match err {
            crate::error::UpdateScalingParametersError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::UpdateScalingParametersError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateScalingParametersError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::UpdateScalingParametersError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateScalingParametersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateScalingParametersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateScalingParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateServiceAccessPoliciesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateServiceAccessPoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServiceAccessPoliciesError> for Error {
    fn from(err: crate::error::UpdateServiceAccessPoliciesError) -> Self {
        match err {
            crate::error::UpdateServiceAccessPoliciesError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::UpdateServiceAccessPoliciesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateServiceAccessPoliciesError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::UpdateServiceAccessPoliciesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateServiceAccessPoliciesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateServiceAccessPoliciesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateServiceAccessPoliciesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BaseException(e) => e.request_id(),
            Self::DisabledOperationException(e) => e.request_id(),
            Self::InternalException(e) => e.request_id(),
            Self::InvalidTypeException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
