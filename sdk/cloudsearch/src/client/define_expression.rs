// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DefineExpression`](crate::operation::define_expression::builders::DefineExpressionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::operation::define_expression::builders::DefineExpressionFluentBuilder::domain_name) / [`set_domain_name(Option<String>)`](crate::operation::define_expression::builders::DefineExpressionFluentBuilder::set_domain_name):<br>required: **true**<br><p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p><br>
    ///   - [`expression(Expression)`](crate::operation::define_expression::builders::DefineExpressionFluentBuilder::expression) / [`set_expression(Option<Expression>)`](crate::operation::define_expression::builders::DefineExpressionFluentBuilder::set_expression):<br>required: **true**<br><p>A named expression that can be evaluated at search time. Can be used to sort the search results, define other expressions, or return computed information in the search results. </p><br>
    /// - On success, responds with [`DefineExpressionOutput`](crate::operation::define_expression::DefineExpressionOutput) with field(s):
    ///   - [`expression(Option<ExpressionStatus>)`](crate::operation::define_expression::DefineExpressionOutput::expression): <p>The value of an <code>Expression</code> and its current status.</p>
    /// - On failure, responds with [`SdkError<DefineExpressionError>`](crate::operation::define_expression::DefineExpressionError)
    pub fn define_expression(&self) -> crate::operation::define_expression::builders::DefineExpressionFluentBuilder {
        crate::operation::define_expression::builders::DefineExpressionFluentBuilder::new(self.handle.clone())
    }
}
