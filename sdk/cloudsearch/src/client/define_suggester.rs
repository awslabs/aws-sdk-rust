// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DefineSuggester`](crate::operation::define_suggester::builders::DefineSuggesterFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::operation::define_suggester::builders::DefineSuggesterFluentBuilder::domain_name) / [`set_domain_name(Option<String>)`](crate::operation::define_suggester::builders::DefineSuggesterFluentBuilder::set_domain_name): <p>A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    ///   - [`suggester(Suggester)`](crate::operation::define_suggester::builders::DefineSuggesterFluentBuilder::suggester) / [`set_suggester(Option<Suggester>)`](crate::operation::define_suggester::builders::DefineSuggesterFluentBuilder::set_suggester): <p>Configuration information for a search suggester. Each suggester has a unique name and specifies the text field you want to use for suggestions. The following options can be configured for a suggester: <code>FuzzyMatching</code>, <code>SortExpression</code>. </p>
    /// - On success, responds with [`DefineSuggesterOutput`](crate::operation::define_suggester::DefineSuggesterOutput) with field(s):
    ///   - [`suggester(Option<SuggesterStatus>)`](crate::operation::define_suggester::DefineSuggesterOutput::suggester): <p>The value of a <code>Suggester</code> and its current status.</p>
    /// - On failure, responds with [`SdkError<DefineSuggesterError>`](crate::operation::define_suggester::DefineSuggesterError)
    pub fn define_suggester(
        &self,
    ) -> crate::operation::define_suggester::builders::DefineSuggesterFluentBuilder {
        crate::operation::define_suggester::builders::DefineSuggesterFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
