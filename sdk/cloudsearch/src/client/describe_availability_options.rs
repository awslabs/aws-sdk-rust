// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeAvailabilityOptions`](crate::operation::describe_availability_options::builders::DescribeAvailabilityOptionsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::operation::describe_availability_options::builders::DescribeAvailabilityOptionsFluentBuilder::domain_name) / [`set_domain_name(Option<String>)`](crate::operation::describe_availability_options::builders::DescribeAvailabilityOptionsFluentBuilder::set_domain_name): <p>The name of the domain you want to describe.</p>
    ///   - [`deployed(bool)`](crate::operation::describe_availability_options::builders::DescribeAvailabilityOptionsFluentBuilder::deployed) / [`set_deployed(Option<bool>)`](crate::operation::describe_availability_options::builders::DescribeAvailabilityOptionsFluentBuilder::set_deployed): <p>Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.</p>
    /// - On success, responds with [`DescribeAvailabilityOptionsOutput`](crate::operation::describe_availability_options::DescribeAvailabilityOptionsOutput) with field(s):
    ///   - [`availability_options(Option<AvailabilityOptionsStatus>)`](crate::operation::describe_availability_options::DescribeAvailabilityOptionsOutput::availability_options): <p>The availability options configured for the domain. Indicates whether Multi-AZ is enabled for the domain. </p>
    /// - On failure, responds with [`SdkError<DescribeAvailabilityOptionsError>`](crate::operation::describe_availability_options::DescribeAvailabilityOptionsError)
    pub fn describe_availability_options(&self) -> crate::operation::describe_availability_options::builders::DescribeAvailabilityOptionsFluentBuilder{
        crate::operation::describe_availability_options::builders::DescribeAvailabilityOptionsFluentBuilder::new(self.handle.clone())
    }
}
