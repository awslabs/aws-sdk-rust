// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_application_output_correct_errors(
    mut builder: crate::operation::create_application::builders::CreateApplicationOutputBuilder,
) -> crate::operation::create_application::builders::CreateApplicationOutputBuilder {
    if builder.application_summary.is_none() {
        builder.application_summary = {
            let builder = crate::types::builders::ApplicationSummaryBuilder::default();
            crate::serde_util::application_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_application_output_correct_errors(
    mut builder: crate::operation::describe_application::builders::DescribeApplicationOutputBuilder,
) -> crate::operation::describe_application::builders::DescribeApplicationOutputBuilder {
    if builder.application_detail.is_none() {
        builder.application_detail = {
            let builder = crate::types::builders::ApplicationDetailBuilder::default();
            crate::serde_util::application_detail_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_applications_output_correct_errors(
    mut builder: crate::operation::list_applications::builders::ListApplicationsOutputBuilder,
) -> crate::operation::list_applications::builders::ListApplicationsOutputBuilder {
    if builder.application_summaries.is_none() {
        builder.application_summaries = Some(Default::default())
    }
    if builder.has_more_applications.is_none() {
        builder.has_more_applications = Some(Default::default())
    }
    builder
}

pub(crate) fn application_summary_correct_errors(
    mut builder: crate::types::builders::ApplicationSummaryBuilder,
) -> crate::types::builders::ApplicationSummaryBuilder {
    if builder.application_name.is_none() {
        builder.application_name = Some(Default::default())
    }
    if builder.application_arn.is_none() {
        builder.application_arn = Some(Default::default())
    }
    if builder.application_status.is_none() {
        builder.application_status = "no value was set".parse::<crate::types::ApplicationStatus>().ok()
    }
    builder
}

pub(crate) fn application_detail_correct_errors(
    mut builder: crate::types::builders::ApplicationDetailBuilder,
) -> crate::types::builders::ApplicationDetailBuilder {
    if builder.application_name.is_none() {
        builder.application_name = Some(Default::default())
    }
    if builder.application_arn.is_none() {
        builder.application_arn = Some(Default::default())
    }
    if builder.application_status.is_none() {
        builder.application_status = "no value was set".parse::<crate::types::ApplicationStatus>().ok()
    }
    if builder.application_version_id.is_none() {
        builder.application_version_id = Some(Default::default())
    }
    builder
}

pub(crate) fn source_schema_correct_errors(mut builder: crate::types::builders::SourceSchemaBuilder) -> crate::types::builders::SourceSchemaBuilder {
    if builder.record_format.is_none() {
        builder.record_format = {
            let builder = crate::types::builders::RecordFormatBuilder::default();
            crate::serde_util::record_format_correct_errors(builder).build().ok()
        }
    }
    if builder.record_columns.is_none() {
        builder.record_columns = Some(Default::default())
    }
    builder
}

pub(crate) fn record_format_correct_errors(mut builder: crate::types::builders::RecordFormatBuilder) -> crate::types::builders::RecordFormatBuilder {
    if builder.record_format_type.is_none() {
        builder.record_format_type = "no value was set".parse::<crate::types::RecordFormatType>().ok()
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_logging_option_description_correct_errors(
    mut builder: crate::types::builders::CloudWatchLoggingOptionDescriptionBuilder,
) -> crate::types::builders::CloudWatchLoggingOptionDescriptionBuilder {
    if builder.log_stream_arn.is_none() {
        builder.log_stream_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn record_column_correct_errors(mut builder: crate::types::builders::RecordColumnBuilder) -> crate::types::builders::RecordColumnBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.sql_type.is_none() {
        builder.sql_type = Some(Default::default())
    }
    builder
}

pub(crate) fn reference_data_source_description_correct_errors(
    mut builder: crate::types::builders::ReferenceDataSourceDescriptionBuilder,
) -> crate::types::builders::ReferenceDataSourceDescriptionBuilder {
    if builder.reference_id.is_none() {
        builder.reference_id = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.s3_reference_data_source_description.is_none() {
        builder.s3_reference_data_source_description = {
            let builder = crate::types::builders::S3ReferenceDataSourceDescriptionBuilder::default();
            crate::serde_util::s3_reference_data_source_description_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn csv_mapping_parameters_correct_errors(
    mut builder: crate::types::builders::CsvMappingParametersBuilder,
) -> crate::types::builders::CsvMappingParametersBuilder {
    if builder.record_row_delimiter.is_none() {
        builder.record_row_delimiter = Some(Default::default())
    }
    if builder.record_column_delimiter.is_none() {
        builder.record_column_delimiter = Some(Default::default())
    }
    builder
}

pub(crate) fn destination_schema_correct_errors(
    mut builder: crate::types::builders::DestinationSchemaBuilder,
) -> crate::types::builders::DestinationSchemaBuilder {
    if builder.record_format_type.is_none() {
        builder.record_format_type = "no value was set".parse::<crate::types::RecordFormatType>().ok()
    }
    builder
}

pub(crate) fn json_mapping_parameters_correct_errors(
    mut builder: crate::types::builders::JsonMappingParametersBuilder,
) -> crate::types::builders::JsonMappingParametersBuilder {
    if builder.record_row_path.is_none() {
        builder.record_row_path = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_reference_data_source_description_correct_errors(
    mut builder: crate::types::builders::S3ReferenceDataSourceDescriptionBuilder,
) -> crate::types::builders::S3ReferenceDataSourceDescriptionBuilder {
    if builder.bucket_arn.is_none() {
        builder.bucket_arn = Some(Default::default())
    }
    if builder.file_key.is_none() {
        builder.file_key = Some(Default::default())
    }
    if builder.reference_role_arn.is_none() {
        builder.reference_role_arn = Some(Default::default())
    }
    builder
}
