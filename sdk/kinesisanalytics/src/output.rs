// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateApplicationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateApplicationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateApplicationOutput`](crate::output::UpdateApplicationOutput).
    pub fn builder() -> crate::output::update_application_output::Builder {
        crate::output::update_application_output::Builder::default()
    }
}

/// See [`UpdateApplicationOutput`](crate::output::UpdateApplicationOutput).
pub mod update_application_output {

    /// A builder for [`UpdateApplicationOutput`](crate::output::UpdateApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateApplicationOutput`](crate::output::UpdateApplicationOutput).
        pub fn build(self) -> crate::output::UpdateApplicationOutput {
            crate::output::UpdateApplicationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopApplicationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StopApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StopApplicationOutput {
    /// Creates a new builder-style object to manufacture [`StopApplicationOutput`](crate::output::StopApplicationOutput).
    pub fn builder() -> crate::output::stop_application_output::Builder {
        crate::output::stop_application_output::Builder::default()
    }
}

/// See [`StopApplicationOutput`](crate::output::StopApplicationOutput).
pub mod stop_application_output {

    /// A builder for [`StopApplicationOutput`](crate::output::StopApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopApplicationOutput`](crate::output::StopApplicationOutput).
        pub fn build(self) -> crate::output::StopApplicationOutput {
            crate::output::StopApplicationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartApplicationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StartApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartApplicationOutput {
    /// Creates a new builder-style object to manufacture [`StartApplicationOutput`](crate::output::StartApplicationOutput).
    pub fn builder() -> crate::output::start_application_output::Builder {
        crate::output::start_application_output::Builder::default()
    }
}

/// See [`StartApplicationOutput`](crate::output::StartApplicationOutput).
pub mod start_application_output {

    /// A builder for [`StartApplicationOutput`](crate::output::StartApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartApplicationOutput`](crate::output::StartApplicationOutput).
        pub fn build(self) -> crate::output::StartApplicationOutput {
            crate::output::StartApplicationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The key-value tags assigned to the application.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The key-value tags assigned to the application.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The key-value tags assigned to the application.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The key-value tags assigned to the application.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListApplicationsOutput {
    /// <p>List of <code>ApplicationSummary</code> objects. </p>
    #[doc(hidden)]
    pub application_summaries: std::option::Option<std::vec::Vec<crate::model::ApplicationSummary>>,
    /// <p>Returns true if there are more applications to retrieve.</p>
    #[doc(hidden)]
    pub has_more_applications: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ListApplicationsOutput {
    /// <p>List of <code>ApplicationSummary</code> objects. </p>
    pub fn application_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::ApplicationSummary]> {
        self.application_summaries.as_deref()
    }
    /// <p>Returns true if there are more applications to retrieve.</p>
    pub fn has_more_applications(&self) -> std::option::Option<bool> {
        self.has_more_applications
    }
}
impl aws_http::request_id::RequestId for ListApplicationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListApplicationsOutput {
    /// Creates a new builder-style object to manufacture [`ListApplicationsOutput`](crate::output::ListApplicationsOutput).
    pub fn builder() -> crate::output::list_applications_output::Builder {
        crate::output::list_applications_output::Builder::default()
    }
}

/// See [`ListApplicationsOutput`](crate::output::ListApplicationsOutput).
pub mod list_applications_output {

    /// A builder for [`ListApplicationsOutput`](crate::output::ListApplicationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_summaries:
            std::option::Option<std::vec::Vec<crate::model::ApplicationSummary>>,
        pub(crate) has_more_applications: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `application_summaries`.
        ///
        /// To override the contents of this collection use [`set_application_summaries`](Self::set_application_summaries).
        ///
        /// <p>List of <code>ApplicationSummary</code> objects. </p>
        pub fn application_summaries(mut self, input: crate::model::ApplicationSummary) -> Self {
            let mut v = self.application_summaries.unwrap_or_default();
            v.push(input);
            self.application_summaries = Some(v);
            self
        }
        /// <p>List of <code>ApplicationSummary</code> objects. </p>
        pub fn set_application_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ApplicationSummary>>,
        ) -> Self {
            self.application_summaries = input;
            self
        }
        /// <p>Returns true if there are more applications to retrieve.</p>
        pub fn has_more_applications(mut self, input: bool) -> Self {
            self.has_more_applications = Some(input);
            self
        }
        /// <p>Returns true if there are more applications to retrieve.</p>
        pub fn set_has_more_applications(mut self, input: std::option::Option<bool>) -> Self {
            self.has_more_applications = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListApplicationsOutput`](crate::output::ListApplicationsOutput).
        pub fn build(self) -> crate::output::ListApplicationsOutput {
            crate::output::ListApplicationsOutput {
                application_summaries: self.application_summaries,
                has_more_applications: self.has_more_applications,
                _request_id: self._request_id,
            }
        }
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DiscoverInputSchemaOutput {
    /// <p>Schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.</p>
    #[doc(hidden)]
    pub input_schema: std::option::Option<crate::model::SourceSchema>,
    /// <p>An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).</p>
    #[doc(hidden)]
    pub parsed_input_records:
        std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
    /// <p>Stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter.</p>
    #[doc(hidden)]
    pub processed_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Raw stream data that was sampled to infer the schema.</p>
    #[doc(hidden)]
    pub raw_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl DiscoverInputSchemaOutput {
    /// <p>Schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.</p>
    pub fn input_schema(&self) -> std::option::Option<&crate::model::SourceSchema> {
        self.input_schema.as_ref()
    }
    /// <p>An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).</p>
    pub fn parsed_input_records(
        &self,
    ) -> std::option::Option<&[std::vec::Vec<std::string::String>]> {
        self.parsed_input_records.as_deref()
    }
    /// <p>Stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter.</p>
    pub fn processed_input_records(&self) -> std::option::Option<&[std::string::String]> {
        self.processed_input_records.as_deref()
    }
    /// <p>Raw stream data that was sampled to infer the schema.</p>
    pub fn raw_input_records(&self) -> std::option::Option<&[std::string::String]> {
        self.raw_input_records.as_deref()
    }
}
impl aws_http::request_id::RequestId for DiscoverInputSchemaOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DiscoverInputSchemaOutput {
    /// Creates a new builder-style object to manufacture [`DiscoverInputSchemaOutput`](crate::output::DiscoverInputSchemaOutput).
    pub fn builder() -> crate::output::discover_input_schema_output::Builder {
        crate::output::discover_input_schema_output::Builder::default()
    }
}

/// See [`DiscoverInputSchemaOutput`](crate::output::DiscoverInputSchemaOutput).
pub mod discover_input_schema_output {

    /// A builder for [`DiscoverInputSchemaOutput`](crate::output::DiscoverInputSchemaOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) input_schema: std::option::Option<crate::model::SourceSchema>,
        pub(crate) parsed_input_records:
            std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
        pub(crate) processed_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) raw_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.</p>
        pub fn input_schema(mut self, input: crate::model::SourceSchema) -> Self {
            self.input_schema = Some(input);
            self
        }
        /// <p>Schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.</p>
        pub fn set_input_schema(
            mut self,
            input: std::option::Option<crate::model::SourceSchema>,
        ) -> Self {
            self.input_schema = input;
            self
        }
        /// Appends an item to `parsed_input_records`.
        ///
        /// To override the contents of this collection use [`set_parsed_input_records`](Self::set_parsed_input_records).
        ///
        /// <p>An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).</p>
        pub fn parsed_input_records(mut self, input: std::vec::Vec<std::string::String>) -> Self {
            let mut v = self.parsed_input_records.unwrap_or_default();
            v.push(input);
            self.parsed_input_records = Some(v);
            self
        }
        /// <p>An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).</p>
        pub fn set_parsed_input_records(
            mut self,
            input: std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
        ) -> Self {
            self.parsed_input_records = input;
            self
        }
        /// Appends an item to `processed_input_records`.
        ///
        /// To override the contents of this collection use [`set_processed_input_records`](Self::set_processed_input_records).
        ///
        /// <p>Stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter.</p>
        pub fn processed_input_records(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.processed_input_records.unwrap_or_default();
            v.push(input.into());
            self.processed_input_records = Some(v);
            self
        }
        /// <p>Stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter.</p>
        pub fn set_processed_input_records(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.processed_input_records = input;
            self
        }
        /// Appends an item to `raw_input_records`.
        ///
        /// To override the contents of this collection use [`set_raw_input_records`](Self::set_raw_input_records).
        ///
        /// <p>Raw stream data that was sampled to infer the schema.</p>
        pub fn raw_input_records(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.raw_input_records.unwrap_or_default();
            v.push(input.into());
            self.raw_input_records = Some(v);
            self
        }
        /// <p>Raw stream data that was sampled to infer the schema.</p>
        pub fn set_raw_input_records(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.raw_input_records = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DiscoverInputSchemaOutput`](crate::output::DiscoverInputSchemaOutput).
        pub fn build(self) -> crate::output::DiscoverInputSchemaOutput {
            crate::output::DiscoverInputSchemaOutput {
                input_schema: self.input_schema,
                parsed_input_records: self.parsed_input_records,
                processed_input_records: self.processed_input_records,
                raw_input_records: self.raw_input_records,
                _request_id: self._request_id,
            }
        }
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeApplicationOutput {
    /// <p>Provides a description of the application, such as the application Amazon Resource Name (ARN), status, latest version, and input and output configuration details.</p>
    #[doc(hidden)]
    pub application_detail: std::option::Option<crate::model::ApplicationDetail>,
    _request_id: Option<String>,
}
impl DescribeApplicationOutput {
    /// <p>Provides a description of the application, such as the application Amazon Resource Name (ARN), status, latest version, and input and output configuration details.</p>
    pub fn application_detail(&self) -> std::option::Option<&crate::model::ApplicationDetail> {
        self.application_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeApplicationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeApplicationOutput`](crate::output::DescribeApplicationOutput).
    pub fn builder() -> crate::output::describe_application_output::Builder {
        crate::output::describe_application_output::Builder::default()
    }
}

/// See [`DescribeApplicationOutput`](crate::output::DescribeApplicationOutput).
pub mod describe_application_output {

    /// A builder for [`DescribeApplicationOutput`](crate::output::DescribeApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_detail: std::option::Option<crate::model::ApplicationDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides a description of the application, such as the application Amazon Resource Name (ARN), status, latest version, and input and output configuration details.</p>
        pub fn application_detail(mut self, input: crate::model::ApplicationDetail) -> Self {
            self.application_detail = Some(input);
            self
        }
        /// <p>Provides a description of the application, such as the application Amazon Resource Name (ARN), status, latest version, and input and output configuration details.</p>
        pub fn set_application_detail(
            mut self,
            input: std::option::Option<crate::model::ApplicationDetail>,
        ) -> Self {
            self.application_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeApplicationOutput`](crate::output::DescribeApplicationOutput).
        pub fn build(self) -> crate::output::DescribeApplicationOutput {
            crate::output::DescribeApplicationOutput {
                application_detail: self.application_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationReferenceDataSourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteApplicationReferenceDataSourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationReferenceDataSourceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationReferenceDataSourceOutput`](crate::output::DeleteApplicationReferenceDataSourceOutput).
    pub fn builder() -> crate::output::delete_application_reference_data_source_output::Builder {
        crate::output::delete_application_reference_data_source_output::Builder::default()
    }
}

/// See [`DeleteApplicationReferenceDataSourceOutput`](crate::output::DeleteApplicationReferenceDataSourceOutput).
pub mod delete_application_reference_data_source_output {

    /// A builder for [`DeleteApplicationReferenceDataSourceOutput`](crate::output::DeleteApplicationReferenceDataSourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApplicationReferenceDataSourceOutput`](crate::output::DeleteApplicationReferenceDataSourceOutput).
        pub fn build(self) -> crate::output::DeleteApplicationReferenceDataSourceOutput {
            crate::output::DeleteApplicationReferenceDataSourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationOutputOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteApplicationOutputOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationOutputOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationOutputOutput`](crate::output::DeleteApplicationOutputOutput).
    pub fn builder() -> crate::output::delete_application_output_output::Builder {
        crate::output::delete_application_output_output::Builder::default()
    }
}

/// See [`DeleteApplicationOutputOutput`](crate::output::DeleteApplicationOutputOutput).
pub mod delete_application_output_output {

    /// A builder for [`DeleteApplicationOutputOutput`](crate::output::DeleteApplicationOutputOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApplicationOutputOutput`](crate::output::DeleteApplicationOutputOutput).
        pub fn build(self) -> crate::output::DeleteApplicationOutputOutput {
            crate::output::DeleteApplicationOutputOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationInputProcessingConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteApplicationInputProcessingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationInputProcessingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationInputProcessingConfigurationOutput`](crate::output::DeleteApplicationInputProcessingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::delete_application_input_processing_configuration_output::Builder {
        crate::output::delete_application_input_processing_configuration_output::Builder::default()
    }
}

/// See [`DeleteApplicationInputProcessingConfigurationOutput`](crate::output::DeleteApplicationInputProcessingConfigurationOutput).
pub mod delete_application_input_processing_configuration_output {

    /// A builder for [`DeleteApplicationInputProcessingConfigurationOutput`](crate::output::DeleteApplicationInputProcessingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApplicationInputProcessingConfigurationOutput`](crate::output::DeleteApplicationInputProcessingConfigurationOutput).
        pub fn build(self) -> crate::output::DeleteApplicationInputProcessingConfigurationOutput {
            crate::output::DeleteApplicationInputProcessingConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationCloudWatchLoggingOptionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteApplicationCloudWatchLoggingOptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationCloudWatchLoggingOptionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationCloudWatchLoggingOptionOutput`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput).
    pub fn builder() -> crate::output::delete_application_cloud_watch_logging_option_output::Builder
    {
        crate::output::delete_application_cloud_watch_logging_option_output::Builder::default()
    }
}

/// See [`DeleteApplicationCloudWatchLoggingOptionOutput`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput).
pub mod delete_application_cloud_watch_logging_option_output {

    /// A builder for [`DeleteApplicationCloudWatchLoggingOptionOutput`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApplicationCloudWatchLoggingOptionOutput`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput).
        pub fn build(self) -> crate::output::DeleteApplicationCloudWatchLoggingOptionOutput {
            crate::output::DeleteApplicationCloudWatchLoggingOptionOutput {
                _request_id: self._request_id,
            }
        }
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationOutput`](crate::output::DeleteApplicationOutput).
    pub fn builder() -> crate::output::delete_application_output::Builder {
        crate::output::delete_application_output::Builder::default()
    }
}

/// See [`DeleteApplicationOutput`](crate::output::DeleteApplicationOutput).
pub mod delete_application_output {

    /// A builder for [`DeleteApplicationOutput`](crate::output::DeleteApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApplicationOutput`](crate::output::DeleteApplicationOutput).
        pub fn build(self) -> crate::output::DeleteApplicationOutput {
            crate::output::DeleteApplicationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

/// <p>TBD</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateApplicationOutput {
    /// <p>In response to your <code>CreateApplication</code> request, Amazon Kinesis Analytics returns a response with a summary of the application it created, including the application Amazon Resource Name (ARN), name, and status.</p>
    #[doc(hidden)]
    pub application_summary: std::option::Option<crate::model::ApplicationSummary>,
    _request_id: Option<String>,
}
impl CreateApplicationOutput {
    /// <p>In response to your <code>CreateApplication</code> request, Amazon Kinesis Analytics returns a response with a summary of the application it created, including the application Amazon Resource Name (ARN), name, and status.</p>
    pub fn application_summary(&self) -> std::option::Option<&crate::model::ApplicationSummary> {
        self.application_summary.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateApplicationOutput {
    /// Creates a new builder-style object to manufacture [`CreateApplicationOutput`](crate::output::CreateApplicationOutput).
    pub fn builder() -> crate::output::create_application_output::Builder {
        crate::output::create_application_output::Builder::default()
    }
}

/// See [`CreateApplicationOutput`](crate::output::CreateApplicationOutput).
pub mod create_application_output {

    /// A builder for [`CreateApplicationOutput`](crate::output::CreateApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_summary: std::option::Option<crate::model::ApplicationSummary>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>In response to your <code>CreateApplication</code> request, Amazon Kinesis Analytics returns a response with a summary of the application it created, including the application Amazon Resource Name (ARN), name, and status.</p>
        pub fn application_summary(mut self, input: crate::model::ApplicationSummary) -> Self {
            self.application_summary = Some(input);
            self
        }
        /// <p>In response to your <code>CreateApplication</code> request, Amazon Kinesis Analytics returns a response with a summary of the application it created, including the application Amazon Resource Name (ARN), name, and status.</p>
        pub fn set_application_summary(
            mut self,
            input: std::option::Option<crate::model::ApplicationSummary>,
        ) -> Self {
            self.application_summary = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateApplicationOutput`](crate::output::CreateApplicationOutput).
        pub fn build(self) -> crate::output::CreateApplicationOutput {
            crate::output::CreateApplicationOutput {
                application_summary: self.application_summary,
                _request_id: self._request_id,
            }
        }
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationReferenceDataSourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AddApplicationReferenceDataSourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddApplicationReferenceDataSourceOutput {
    /// Creates a new builder-style object to manufacture [`AddApplicationReferenceDataSourceOutput`](crate::output::AddApplicationReferenceDataSourceOutput).
    pub fn builder() -> crate::output::add_application_reference_data_source_output::Builder {
        crate::output::add_application_reference_data_source_output::Builder::default()
    }
}

/// See [`AddApplicationReferenceDataSourceOutput`](crate::output::AddApplicationReferenceDataSourceOutput).
pub mod add_application_reference_data_source_output {

    /// A builder for [`AddApplicationReferenceDataSourceOutput`](crate::output::AddApplicationReferenceDataSourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AddApplicationReferenceDataSourceOutput`](crate::output::AddApplicationReferenceDataSourceOutput).
        pub fn build(self) -> crate::output::AddApplicationReferenceDataSourceOutput {
            crate::output::AddApplicationReferenceDataSourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationOutputOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AddApplicationOutputOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddApplicationOutputOutput {
    /// Creates a new builder-style object to manufacture [`AddApplicationOutputOutput`](crate::output::AddApplicationOutputOutput).
    pub fn builder() -> crate::output::add_application_output_output::Builder {
        crate::output::add_application_output_output::Builder::default()
    }
}

/// See [`AddApplicationOutputOutput`](crate::output::AddApplicationOutputOutput).
pub mod add_application_output_output {

    /// A builder for [`AddApplicationOutputOutput`](crate::output::AddApplicationOutputOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AddApplicationOutputOutput`](crate::output::AddApplicationOutputOutput).
        pub fn build(self) -> crate::output::AddApplicationOutputOutput {
            crate::output::AddApplicationOutputOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationInputProcessingConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AddApplicationInputProcessingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddApplicationInputProcessingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`AddApplicationInputProcessingConfigurationOutput`](crate::output::AddApplicationInputProcessingConfigurationOutput).
    pub fn builder() -> crate::output::add_application_input_processing_configuration_output::Builder
    {
        crate::output::add_application_input_processing_configuration_output::Builder::default()
    }
}

/// See [`AddApplicationInputProcessingConfigurationOutput`](crate::output::AddApplicationInputProcessingConfigurationOutput).
pub mod add_application_input_processing_configuration_output {

    /// A builder for [`AddApplicationInputProcessingConfigurationOutput`](crate::output::AddApplicationInputProcessingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AddApplicationInputProcessingConfigurationOutput`](crate::output::AddApplicationInputProcessingConfigurationOutput).
        pub fn build(self) -> crate::output::AddApplicationInputProcessingConfigurationOutput {
            crate::output::AddApplicationInputProcessingConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationInputOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AddApplicationInputOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddApplicationInputOutput {
    /// Creates a new builder-style object to manufacture [`AddApplicationInputOutput`](crate::output::AddApplicationInputOutput).
    pub fn builder() -> crate::output::add_application_input_output::Builder {
        crate::output::add_application_input_output::Builder::default()
    }
}

/// See [`AddApplicationInputOutput`](crate::output::AddApplicationInputOutput).
pub mod add_application_input_output {

    /// A builder for [`AddApplicationInputOutput`](crate::output::AddApplicationInputOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AddApplicationInputOutput`](crate::output::AddApplicationInputOutput).
        pub fn build(self) -> crate::output::AddApplicationInputOutput {
            crate::output::AddApplicationInputOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationCloudWatchLoggingOptionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AddApplicationCloudWatchLoggingOptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddApplicationCloudWatchLoggingOptionOutput {
    /// Creates a new builder-style object to manufacture [`AddApplicationCloudWatchLoggingOptionOutput`](crate::output::AddApplicationCloudWatchLoggingOptionOutput).
    pub fn builder() -> crate::output::add_application_cloud_watch_logging_option_output::Builder {
        crate::output::add_application_cloud_watch_logging_option_output::Builder::default()
    }
}

/// See [`AddApplicationCloudWatchLoggingOptionOutput`](crate::output::AddApplicationCloudWatchLoggingOptionOutput).
pub mod add_application_cloud_watch_logging_option_output {

    /// A builder for [`AddApplicationCloudWatchLoggingOptionOutput`](crate::output::AddApplicationCloudWatchLoggingOptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AddApplicationCloudWatchLoggingOptionOutput`](crate::output::AddApplicationCloudWatchLoggingOptionOutput).
        pub fn build(self) -> crate::output::AddApplicationCloudWatchLoggingOptionOutput {
            crate::output::AddApplicationCloudWatchLoggingOptionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
